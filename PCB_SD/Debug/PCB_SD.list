
PCB_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000561c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080058dc  080058dc  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058dc  080058dc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080058e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000024  08005908  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08005908  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a725  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe0  00000000  00000000  0002a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000822  00000000  00000000  0002d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7b0  00000000  00000000  0002da9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e994  00000000  00000000  0004824a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d120  00000000  00000000  00056bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a90  00000000  00000000  000f3d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f6790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005790 	.word	0x08005790

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08005790 	.word	0x08005790

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa25 	bl	8000622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f89e 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f920 	bl	8000420 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001e0:	f000 f8e0 	bl	80003a4 <MX_SPI1_Init>
  MX_FATFS_Init();
 80001e4:	f002 f976 	bl	80024d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 fa8e 	bl	800070c <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80001f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80001f4:	2201      	movs	r2, #1
 80001f6:	4944      	ldr	r1, [pc, #272]	; (8000308 <main+0x13c>)
 80001f8:	4618      	mov	r0, r3
 80001fa:	f004 fbef 	bl	80049dc <f_mount>
 80001fe:	4603      	mov	r3, r0
 8000200:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000204:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000208:	2b00      	cmp	r3, #0
 800020a:	d000      	beq.n	800020e <main+0x42>
  	//myprintf("f_mount error (%i)\r\n", fres);
  	while(1);
 800020c:	e7fe      	b.n	800020c <main+0x40>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 800020e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000216:	4619      	mov	r1, r3
 8000218:	483b      	ldr	r0, [pc, #236]	; (8000308 <main+0x13c>)
 800021a:	f005 f93f 	bl	800549c <f_getfree>
 800021e:	4603      	mov	r3, r0
 8000220:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000224:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000228:	2b00      	cmp	r3, #0
 800022a:	d000      	beq.n	800022e <main+0x62>
  	//myprintf("f_getfree error (%i)\r\n", fres);
  	while(1);
 800022c:	e7fe      	b.n	800022c <main+0x60>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800022e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000232:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	3b02      	subs	r3, #2
 800023c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000240:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8000244:	6812      	ldr	r2, [r2, #0]
 8000246:	8952      	ldrh	r2, [r2, #10]
 8000248:	fb02 f303 	mul.w	r3, r2, r3
 800024c:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    free_sectors = free_clusters * getFreeFs->csize;
 8000250:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000254:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	895b      	ldrh	r3, [r3, #10]
 800025c:	461a      	mov	r2, r3
 800025e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000262:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	fb02 f303 	mul.w	r3, r2, r3
 800026c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

    //myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 8000270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000274:	2201      	movs	r2, #1
 8000276:	4925      	ldr	r1, [pc, #148]	; (800030c <main+0x140>)
 8000278:	4618      	mov	r0, r3
 800027a:	f004 fbf5 	bl	8004a68 <f_open>
 800027e:	4603      	mov	r3, r0
 8000280:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000284:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000288:	2b00      	cmp	r3, #0
 800028a:	d000      	beq.n	800028e <main+0xc2>
  	//myprintf("f_open error (%i)\r\n");
  	while(1);
 800028c:	e7fe      	b.n	800028c <main+0xc0>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800028e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	211e      	movs	r1, #30
 8000298:	4618      	mov	r0, r3
 800029a:	f005 f9b4 	bl	8005606 <f_gets>
 800029e:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
    } else {
  	//myprintf("f_gets error (%i)\r\n", fres);
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 80002a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002a6:	4618      	mov	r0, r3
 80002a8:	f005 f8ce 	bl	8005448 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80002ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b0:	221a      	movs	r2, #26
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <main+0x144>)
 80002b4:	4618      	mov	r0, r3
 80002b6:	f004 fbd7 	bl	8004a68 <f_open>
 80002ba:	4603      	mov	r3, r0
 80002bc:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    } else {
  	//myprintf("f_open error (%i)\r\n", fres);
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 80002c0:	f107 0308 	add.w	r3, r7, #8
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <main+0x148>)
 80002c6:	461c      	mov	r4, r3
 80002c8:	4615      	mov	r5, r2
 80002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ce:	682b      	ldr	r3, [r5, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	8022      	strh	r2, [r4, #0]
 80002d4:	3402      	adds	r4, #2
 80002d6:	0c1b      	lsrs	r3, r3, #16
 80002d8:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	f107 0108 	add.w	r1, r7, #8
 80002e0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80002e4:	2213      	movs	r2, #19
 80002e6:	f004 febc 	bl	8005062 <f_write>
 80002ea:	4603      	mov	r3, r0
 80002ec:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    } else {
  	//myprintf("f_write error (%i)\r\n");
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 80002f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002f4:	4618      	mov	r0, r3
 80002f6:	f005 f8a7 	bl	8005448 <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	4902      	ldr	r1, [pc, #8]	; (8000308 <main+0x13c>)
 80002fe:	2000      	movs	r0, #0
 8000300:	f004 fb6c 	bl	80049dc <f_mount>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x138>
 8000306:	bf00      	nop
 8000308:	080057a8 	.word	0x080057a8
 800030c:	080057ac 	.word	0x080057ac
 8000310:	080057b8 	.word	0x080057b8
 8000314:	080057c4 	.word	0x080057c4

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b096      	sub	sp, #88	; 0x58
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2244      	movs	r2, #68	; 0x44
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f005 fa05 	bl	8005736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800033a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800033e:	f000 fc87 	bl	8000c50 <HAL_PWREx_ControlVoltageScaling>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000348:	f000 f89a 	bl	8000480 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800034c:	2310      	movs	r3, #16
 800034e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000358:	2360      	movs	r3, #96	; 0x60
 800035a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	2300      	movs	r3, #0
 800035e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fcc9 	bl	8000cfc <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000370:	f000 f886 	bl	8000480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 f917 	bl	80015c0 <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000398:	f000 f872 	bl	8000480 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3758      	adds	r7, #88	; 0x58
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_SPI1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <MX_SPI1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_SPI1_Init+0x74>)
 80003be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_SPI1_Init+0x74>)
 80003d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_SPI1_Init+0x74>)
 80003da:	2230      	movs	r2, #48	; 0x30
 80003dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f2:	2207      	movs	r2, #7
 80003f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SPI1_Init+0x74>)
 80003fe:	2208      	movs	r2, #8
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_SPI1_Init+0x74>)
 8000404:	f001 fac8 	bl	8001998 <HAL_SPI_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f837 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000040 	.word	0x20000040
 800041c:	40013000 	.word	0x40013000

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_GPIO_Init+0x5c>)
 8000436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <MX_GPIO_Init+0x5c>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_GPIO_Init+0x5c>)
 8000442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2110      	movs	r1, #16
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fbd6 	bl	8000c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000458:	2310      	movs	r3, #16
 800045a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f000 fa56 	bl	8000920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000474:	bf00      	nop
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x44>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_MspInit+0x44>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6613      	str	r3, [r2, #96]	; 0x60
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x44>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_MspInit+0x44>)
 80004ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ae:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_MspInit+0x44>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	6593      	str	r3, [r2, #88]	; 0x58
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_MspInit+0x44>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a17      	ldr	r2, [pc, #92]	; (8000550 <HAL_SPI_MspInit+0x7c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d128      	bne.n	8000548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <HAL_SPI_MspInit+0x80>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <HAL_SPI_MspInit+0x80>)
 80004fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000500:	6613      	str	r3, [r2, #96]	; 0x60
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <HAL_SPI_MspInit+0x80>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_SPI_MspInit+0x80>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <HAL_SPI_MspInit+0x80>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_SPI_MspInit+0x80>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|SD_MISO_Pin|SD_MOSI_Pin;
 8000526:	23c2      	movs	r3, #194	; 0xc2
 8000528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000532:	2303      	movs	r3, #3
 8000534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000536:	2305      	movs	r3, #5
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 f9ec 	bl	8000920 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3728      	adds	r7, #40	; 0x28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013000 	.word	0x40013000
 8000554:	40021000 	.word	0x40021000

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f892 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff ffea 	bl	80005ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f005 f8a3 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f7ff fde3 	bl	80001cc <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000608:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000614:	080058e4 	.word	0x080058e4
  ldr r2, =_sbss
 8000618:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800061c:	200000f0 	.word	0x200000f0

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>

08000622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f943 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	200f      	movs	r0, #15
 8000634:	f000 f80e 	bl	8000654 <HAL_InitTick>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000644:	f7ff ff22 	bl	800048c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	79fb      	ldrb	r3, [r7, #7]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_InitTick+0x6c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d023      	beq.n	80006b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <HAL_InitTick+0x70>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_InitTick+0x6c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f941 	bl	8000906 <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10f      	bne.n	80006aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d809      	bhi.n	80006a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f919 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <HAL_InitTick+0x74>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e007      	b.n	80006b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e004      	b.n	80006b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	e001      	b.n	80006b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000004 	.word	0x20000004

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	200000a4 	.word	0x200000a4

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000a4 	.word	0x200000a4

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff ffee 	bl	80006f4 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_Delay+0x44>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffde 	bl	80006f4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d8f7      	bhi.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000008 	.word	0x20000008

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff47 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff5c 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff8e 	bl	800080c <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffb0 	bl	8000874 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e14e      	b.n	8000bce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 8140 	beq.w	8000bc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	2b01      	cmp	r3, #1
 8000952:	d005      	beq.n	8000960 <HAL_GPIO_Init+0x40>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	f003 0201 	and.w	r2, r3, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d017      	beq.n	80009fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d123      	bne.n	8000a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	6939      	ldr	r1, [r7, #16]
 8000a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0203 	and.w	r2, r3, #3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 809a 	beq.w	8000bc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a98:	4a54      	ldr	r2, [pc, #336]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa0:	4b52      	ldr	r3, [pc, #328]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aac:	4a50      	ldr	r2, [pc, #320]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ad6:	d013      	beq.n	8000b00 <HAL_GPIO_Init+0x1e0>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a46      	ldr	r2, [pc, #280]	; (8000bf4 <HAL_GPIO_Init+0x2d4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d00d      	beq.n	8000afc <HAL_GPIO_Init+0x1dc>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a45      	ldr	r2, [pc, #276]	; (8000bf8 <HAL_GPIO_Init+0x2d8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a44      	ldr	r2, [pc, #272]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <HAL_GPIO_Init+0x1d4>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000af4:	2307      	movs	r3, #7
 8000af6:	e004      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000b00:	2300      	movs	r3, #0
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b12:	4937      	ldr	r1, [pc, #220]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b44:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b6e:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_GPIO_Init+0x2e0>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f47f aea9 	bne.w	8000930 <HAL_GPIO_Init+0x10>
  }
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40007000 	.word	0x40007000

08000c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c5e:	d130      	bne.n	8000cc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6c:	d038      	beq.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2232      	movs	r2, #50	; 0x32
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c94:	e002      	b.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca8:	d102      	bne.n	8000cb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f2      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cbc:	d110      	bne.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e00f      	b.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cce:	d007      	beq.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	431bde83 	.word	0x431bde83

08000cfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f000 bc4f 	b.w	80015ae <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d10:	4b97      	ldr	r3, [pc, #604]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d1a:	4b95      	ldr	r3, [pc, #596]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80e6 	beq.w	8000efe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <HAL_RCC_OscConfig+0x4c>
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	2b0c      	cmp	r3, #12
 8000d3c:	f040 808d 	bne.w	8000e5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f040 8089 	bne.w	8000e5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d48:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_RCC_OscConfig+0x66>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f000 bc26 	b.w	80015ae <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d66:	4b82      	ldr	r3, [pc, #520]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <HAL_RCC_OscConfig+0x80>
 8000d72:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d7a:	e005      	b.n	8000d88 <HAL_RCC_OscConfig+0x8c>
 8000d7c:	4b7c      	ldr	r3, [pc, #496]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d224      	bcs.n	8000dd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fda1 	bl	80018d8 <RCC_SetFlashLatencyFromMSIRange>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f000 bc06 	b.w	80015ae <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000da2:	4b73      	ldr	r3, [pc, #460]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a72      	ldr	r2, [pc, #456]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	496d      	ldr	r1, [pc, #436]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dc0:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	4968      	ldr	r1, [pc, #416]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	e025      	b.n	8000e22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd6:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a65      	ldr	r2, [pc, #404]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b63      	ldr	r3, [pc, #396]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	4960      	ldr	r1, [pc, #384]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000df0:	4313      	orrs	r3, r2
 8000df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df4:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	495b      	ldr	r1, [pc, #364]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d109      	bne.n	8000e22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fd60 	bl	80018d8 <RCC_SetFlashLatencyFromMSIRange>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e3c5      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e22:	f000 fccd 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8000e26:	4602      	mov	r2, r0
 8000e28:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	4950      	ldr	r1, [pc, #320]	; (8000f74 <HAL_RCC_OscConfig+0x278>)
 8000e34:	5ccb      	ldrb	r3, [r1, r3]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	4a4e      	ldr	r2, [pc, #312]	; (8000f78 <HAL_RCC_OscConfig+0x27c>)
 8000e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e42:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <HAL_RCC_OscConfig+0x280>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc04 	bl	8000654 <HAL_InitTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d052      	beq.n	8000efc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	e3a9      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d032      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e62:	4b43      	ldr	r3, [pc, #268]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fc41 	bl	80006f4 <HAL_GetTick>
 8000e72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc3d 	bl	80006f4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e392      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a35      	ldr	r2, [pc, #212]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	4930      	ldr	r1, [pc, #192]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	492b      	ldr	r1, [pc, #172]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
 8000ec6:	e01a      	b.n	8000efe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc0e 	bl	80006f4 <HAL_GetTick>
 8000ed8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc0a 	bl	80006f4 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e35f      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0x1e0>
 8000efa:	e000      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d073      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d005      	beq.n	8000f1c <HAL_RCC_OscConfig+0x220>
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	2b0c      	cmp	r3, #12
 8000f14:	d10e      	bne.n	8000f34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d10b      	bne.n	8000f34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d063      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x2f4>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d15f      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e33c      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d106      	bne.n	8000f4c <HAL_RCC_OscConfig+0x250>
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e025      	b.n	8000f98 <HAL_RCC_OscConfig+0x29c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f54:	d114      	bne.n	8000f80 <HAL_RCC_OscConfig+0x284>
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e013      	b.n	8000f98 <HAL_RCC_OscConfig+0x29c>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	0800581c 	.word	0x0800581c
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	4b8f      	ldr	r3, [pc, #572]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a8e      	ldr	r2, [pc, #568]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b8c      	ldr	r3, [pc, #560]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a8b      	ldr	r2, [pc, #556]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fba8 	bl	80006f4 <HAL_GetTick>
 8000fa4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fba4 	bl	80006f4 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e2f9      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fba:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2ac>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fb94 	bl	80006f4 <HAL_GetTick>
 8000fcc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fb90 	bl	80006f4 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e2e5      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe2:	4b77      	ldr	r3, [pc, #476]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2d4>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d060      	beq.n	80010c0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d005      	beq.n	8001010 <HAL_RCC_OscConfig+0x314>
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d119      	bne.n	800103e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d116      	bne.n	800103e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001010:	4b6b      	ldr	r3, [pc, #428]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x32c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e2c2      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	061b      	lsls	r3, r3, #24
 8001036:	4962      	ldr	r1, [pc, #392]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800103c:	e040      	b.n	80010c0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d023      	beq.n	800108e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5d      	ldr	r2, [pc, #372]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001052:	f7ff fb4f 	bl	80006f4 <HAL_GetTick>
 8001056:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fb4b 	bl	80006f4 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e2a0      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800106c:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	061b      	lsls	r3, r3, #24
 8001086:	494e      	ldr	r1, [pc, #312]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
 800108c:	e018      	b.n	80010c0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109a:	f7ff fb2b 	bl	80006f4 <HAL_GetTick>
 800109e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fb27 	bl	80006f4 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e27c      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f0      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8082 	beq.w	80011d2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d05f      	beq.n	8001196 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010dc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f003 0310 	and.w	r3, r3, #16
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d037      	beq.n	800115c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e254      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01b      	beq.n	8001146 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001114:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800111e:	f7ff fae9 	bl	80006f4 <HAL_GetTick>
 8001122:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001126:	f7ff fae5 	bl	80006f4 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b11      	cmp	r3, #17
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e23a      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ef      	bne.n	8001126 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	f023 0210 	bic.w	r2, r3, #16
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	491a      	ldr	r1, [pc, #104]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fac2 	bl	80006f4 <HAL_GetTick>
 8001170:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fabe 	bl	80006f4 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b11      	cmp	r3, #17
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e213      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0ef      	beq.n	8001174 <HAL_RCC_OscConfig+0x478>
 8001194:	e01d      	b.n	80011d2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a6:	f7ff faa5 	bl	80006f4 <HAL_GetTick>
 80011aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff faa1 	bl	80006f4 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b11      	cmp	r3, #17
 80011ba:	d903      	bls.n	80011c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1f6      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
 80011c0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c4:	4ba9      	ldr	r3, [pc, #676]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80011c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ed      	bne.n	80011ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80bd 	beq.w	800135a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011e6:	4ba1      	ldr	r3, [pc, #644]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10e      	bne.n	8001210 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b9e      	ldr	r3, [pc, #632]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a9d      	ldr	r2, [pc, #628]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b9b      	ldr	r3, [pc, #620]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001210:	4b97      	ldr	r3, [pc, #604]	; (8001470 <HAL_RCC_OscConfig+0x774>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001218:	2b00      	cmp	r3, #0
 800121a:	d118      	bne.n	800124e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800121c:	4b94      	ldr	r3, [pc, #592]	; (8001470 <HAL_RCC_OscConfig+0x774>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a93      	ldr	r2, [pc, #588]	; (8001470 <HAL_RCC_OscConfig+0x774>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001228:	f7ff fa64 	bl	80006f4 <HAL_GetTick>
 800122c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001230:	f7ff fa60 	bl	80006f4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1b5      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001242:	4b8b      	ldr	r3, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x774>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d02c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800125a:	4b84      	ldr	r3, [pc, #528]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800125c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001260:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126c:	497f      	ldr	r1, [pc, #508]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800126e:	4313      	orrs	r3, r2
 8001270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d010      	beq.n	80012a2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	4a79      	ldr	r2, [pc, #484]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001290:	4b76      	ldr	r3, [pc, #472]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a75      	ldr	r2, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a0:	e018      	b.n	80012d4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012a2:	4b72      	ldr	r3, [pc, #456]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a8:	4a70      	ldr	r2, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b2:	e00f      	b.n	80012d4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012b4:	4b6d      	ldr	r3, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	4a6c      	ldr	r2, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012c4:	4b69      	ldr	r3, [pc, #420]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ca:	4a68      	ldr	r2, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d016      	beq.n	800130a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff fa0a 	bl	80006f4 <HAL_GetTick>
 80012e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff fa06 	bl	80006f4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e159      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012fa:	4b5c      	ldr	r3, [pc, #368]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80012fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0ed      	beq.n	80012e4 <HAL_RCC_OscConfig+0x5e8>
 8001308:	e01d      	b.n	8001346 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff f9f3 	bl	80006f4 <HAL_GetTick>
 800130e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff f9ef 	bl	80006f4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e142      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800132a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ed      	bne.n	8001312 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001336:	4b4d      	ldr	r3, [pc, #308]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800133e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800134a:	2b01      	cmp	r3, #1
 800134c:	d105      	bne.n	800135a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a46      	ldr	r2, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001374:	4a3d      	ldr	r2, [pc, #244]	; (800146c <HAL_RCC_OscConfig+0x770>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff f9b9 	bl	80006f4 <HAL_GetTick>
 8001382:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001386:	f7ff f9b5 	bl	80006f4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e10a      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800139a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ef      	beq.n	8001386 <HAL_RCC_OscConfig+0x68a>
 80013a6:	e01b      	b.n	80013e0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80013aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff f99c 	bl	80006f4 <HAL_GetTick>
 80013bc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c0:	f7ff f998 	bl	80006f4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0ed      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80013d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ef      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80e1 	beq.w	80015ac <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	f040 80b5 	bne.w	800155e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_RCC_OscConfig+0x770>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0203 	and.w	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	429a      	cmp	r2, r3
 8001406:	d124      	bne.n	8001452 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	3b01      	subs	r3, #1
 8001414:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d11b      	bne.n	8001452 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d113      	bne.n	8001452 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	3b01      	subs	r3, #1
 8001438:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d109      	bne.n	8001452 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d05f      	beq.n	8001512 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d05a      	beq.n	800150e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_RCC_OscConfig+0x770>)
 800145e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001464:	f7ff f946 	bl	80006f4 <HAL_GetTick>
 8001468:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146a:	e00c      	b.n	8001486 <HAL_RCC_OscConfig+0x78a>
 800146c:	40021000 	.word	0x40021000
 8001470:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff f93e 	bl	80006f4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e093      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <HAL_RCC_OscConfig+0x8c0>)
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014a2:	3a01      	subs	r2, #1
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	4311      	orrs	r1, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014b4:	0852      	lsrs	r2, r2, #1
 80014b6:	3a01      	subs	r2, #1
 80014b8:	0552      	lsls	r2, r2, #21
 80014ba:	4311      	orrs	r1, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014c0:	0852      	lsrs	r2, r2, #1
 80014c2:	3a01      	subs	r2, #1
 80014c4:	0652      	lsls	r2, r2, #25
 80014c6:	430a      	orrs	r2, r1
 80014c8:	493b      	ldr	r1, [pc, #236]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 80014d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 80014e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014e6:	f7ff f905 	bl	80006f4 <HAL_GetTick>
 80014ea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff f901 	bl	80006f4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e056      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800150c:	e04e      	b.n	80015ac <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e04d      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d146      	bne.n	80015ac <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001528:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001534:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001536:	f7ff f8dd 	bl	80006f4 <HAL_GetTick>
 800153a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff f8d9 	bl	80006f4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e02e      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x842>
 800155c:	e026      	b.n	80015ac <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	2b0c      	cmp	r3, #12
 8001562:	d021      	beq.n	80015a8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 800156a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff f8c0 	bl	80006f4 <HAL_GetTick>
 8001574:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff f8bc 	bl	80006f4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_RCC_OscConfig+0x8bc>)
 800159c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015a0:	f023 0303 	bic.w	r3, r3, #3
 80015a4:	60d3      	str	r3, [r2, #12]
 80015a6:	e001      	b.n	80015ac <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	f99f808c 	.word	0xf99f808c

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0e7      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d910      	bls.n	8001604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 0207 	bic.w	r2, r3, #7
 80015ea:	4970      	ldr	r1, [pc, #448]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cf      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d010      	beq.n	8001632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800161c:	429a      	cmp	r2, r3
 800161e:	d908      	bls.n	8001632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4960      	ldr	r1, [pc, #384]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04c      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d121      	bne.n	8001696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0a6      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d115      	bne.n	8001696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e09a      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e08e      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e086      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4943      	ldr	r1, [pc, #268]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff f824 	bl	80006f4 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff f820 	bl	80006f4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e06e      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d010      	beq.n	8001706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d208      	bcs.n	8001706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	492b      	ldr	r1, [pc, #172]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d210      	bcs.n	8001736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 0207 	bic.w	r2, r3, #7
 800171c:	4923      	ldr	r1, [pc, #140]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_RCC_ClockConfig+0x1ec>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e036      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4918      	ldr	r1, [pc, #96]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4910      	ldr	r1, [pc, #64]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001774:	f000 f824 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_RCC_ClockConfig+0x1f0>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	490b      	ldr	r1, [pc, #44]	; (80017b4 <HAL_RCC_ClockConfig+0x1f4>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1f8>)
 8001792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_ClockConfig+0x1fc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe ff5b 	bl	8000654 <HAL_InitTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80017a2:	7afb      	ldrb	r3, [r7, #11]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40022000 	.word	0x40022000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	0800581c 	.word	0x0800581c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x34>
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d121      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d11e      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e005      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800181c:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d102      	bne.n	800183e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	e004      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d101      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d134      	bne.n	80018b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0xa6>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d003      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0xac>
 8001864:	e005      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001868:	617b      	str	r3, [r7, #20]
      break;
 800186a:	e005      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800186e:	617b      	str	r3, [r7, #20]
      break;
 8001870:	e002      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	617b      	str	r3, [r7, #20]
      break;
 8001876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	3301      	adds	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	fb03 f202 	mul.w	r2, r3, r2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	0e5b      	lsrs	r3, r3, #25
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	3301      	adds	r3, #1
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018b8:	69bb      	ldr	r3, [r7, #24]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	0800582c 	.word	0x0800582c
 80018d0:	00f42400 	.word	0x00f42400
 80018d4:	007a1200 	.word	0x007a1200

080018d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018f0:	f7ff f9a0 	bl	8000c34 <HAL_PWREx_GetVoltageRange>
 80018f4:	6178      	str	r0, [r7, #20]
 80018f6:	e014      	b.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	; 0x58
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001910:	f7ff f990 	bl	8000c34 <HAL_PWREx_GetVoltageRange>
 8001914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001928:	d10b      	bne.n	8001942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b80      	cmp	r3, #128	; 0x80
 800192e:	d919      	bls.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2ba0      	cmp	r3, #160	; 0xa0
 8001934:	d902      	bls.n	800193c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	e013      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e010      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b80      	cmp	r3, #128	; 0x80
 8001946:	d902      	bls.n	800194e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	e00a      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d102      	bne.n	800195a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e004      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b70      	cmp	r3, #112	; 0x70
 800195e:	d101      	bne.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 0207 	bic.w	r2, r3, #7
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e095      	b.n	8001ad6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ba:	d009      	beq.n	80019d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
 80019c2:	e005      	b.n	80019d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fd72 	bl	80004d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a10:	d902      	bls.n	8001a18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e002      	b.n	8001a1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a26:	d007      	beq.n	8001a38 <HAL_SPI_Init+0xa0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a30:	d002      	beq.n	8001a38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	ea42 0103 	orr.w	r1, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	f003 0204 	and.w	r2, r3, #4
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ab4:	ea42 0103 	orr.w	r1, r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b088      	sub	sp, #32
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4613      	mov	r3, r2
 8001aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_SPI_Transmit+0x22>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e15f      	b.n	8001dc0 <HAL_SPI_Transmit+0x2e2>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b08:	f7fe fdf4 	bl	80006f4 <HAL_GetTick>
 8001b0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d002      	beq.n	8001b24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b22:	e148      	b.n	8001db6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_SPI_Transmit+0x52>
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b34:	e13f      	b.n	8001db6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b80:	d10f      	bne.n	8001ba2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ba0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d007      	beq.n	8001bc0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bc8:	d94f      	bls.n	8001c6a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_SPI_Transmit+0xfa>
 8001bd2:	8afb      	ldrh	r3, [r7, #22]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d142      	bne.n	8001c5e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	881a      	ldrh	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	1c9a      	adds	r2, r3, #2
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bfc:	e02f      	b.n	8001c5e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d112      	bne.n	8001c32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	1c9a      	adds	r2, r3, #2
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c30:	e015      	b.n	8001c5e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c32:	f7fe fd5f 	bl	80006f4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d803      	bhi.n	8001c4a <HAL_SPI_Transmit+0x16c>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d102      	bne.n	8001c50 <HAL_SPI_Transmit+0x172>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001c5c:	e0ab      	b.n	8001db6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ca      	bne.n	8001bfe <HAL_SPI_Transmit+0x120>
 8001c68:	e080      	b.n	8001d6c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_Transmit+0x19a>
 8001c72:	8afb      	ldrh	r3, [r7, #22]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d174      	bne.n	8001d62 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d912      	bls.n	8001ca8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	1c9a      	adds	r2, r3, #2
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b02      	subs	r3, #2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ca6:	e05c      	b.n	8001d62 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001cce:	e048      	b.n	8001d62 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d912      	bls.n	8001d0e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b02      	subs	r3, #2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d0c:	e029      	b.n	8001d62 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	330c      	adds	r3, #12
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d34:	e015      	b.n	8001d62 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d36:	f7fe fcdd 	bl	80006f4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d803      	bhi.n	8001d4e <HAL_SPI_Transmit+0x270>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d102      	bne.n	8001d54 <HAL_SPI_Transmit+0x276>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001d60:	e029      	b.n	8001db6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1b1      	bne.n	8001cd0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fb69 	bl	8002448 <SPI_EndRxTxTransaction>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	77fb      	strb	r3, [r7, #31]
 8001dac:	e003      	b.n	8001db6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001dbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_SPI_TransmitReceive+0x26>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e20a      	b.n	8002204 <HAL_SPI_TransmitReceive+0x43c>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df6:	f7fe fc7d 	bl	80006f4 <HAL_GetTick>
 8001dfa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e02:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e12:	7efb      	ldrb	r3, [r7, #27]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d00e      	beq.n	8001e36 <HAL_SPI_TransmitReceive+0x6e>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e1e:	d106      	bne.n	8001e2e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <HAL_SPI_TransmitReceive+0x66>
 8001e28:	7efb      	ldrb	r3, [r7, #27]
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d003      	beq.n	8001e36 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001e34:	e1e0      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_SPI_TransmitReceive+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_SPI_TransmitReceive+0x80>
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d103      	bne.n	8001e50 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001e4e:	e1d3      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d003      	beq.n	8001e64 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ea6:	d802      	bhi.n	8001eae <HAL_SPI_TransmitReceive+0xe6>
 8001ea8:	8a3b      	ldrh	r3, [r7, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d908      	bls.n	8001ec0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	e007      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ece:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d007      	beq.n	8001eee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ef6:	f240 8081 	bls.w	8001ffc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x140>
 8001f02:	8a7b      	ldrh	r3, [r7, #18]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d16d      	bne.n	8001fe4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	1c9a      	adds	r2, r3, #2
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2c:	e05a      	b.n	8001fe4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11b      	bne.n	8001f74 <HAL_SPI_TransmitReceive+0x1ac>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x1ac>
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d113      	bne.n	8001f74 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	881a      	ldrh	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	1c9a      	adds	r2, r3, #2
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d11c      	bne.n	8001fbc <HAL_SPI_TransmitReceive+0x1f4>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	1c9a      	adds	r2, r3, #2
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fbc:	f7fe fb9a 	bl	80006f4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d80b      	bhi.n	8001fe4 <HAL_SPI_TransmitReceive+0x21c>
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd2:	d007      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8001fe2:	e109      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d19f      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x166>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d199      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x166>
 8001ffa:	e0e3      	b.n	80021c4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_SPI_TransmitReceive+0x244>
 8002004:	8a7b      	ldrh	r3, [r7, #18]
 8002006:	2b01      	cmp	r3, #1
 8002008:	f040 80cf 	bne.w	80021aa <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d912      	bls.n	800203c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	881a      	ldrh	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	1c9a      	adds	r2, r3, #2
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b02      	subs	r3, #2
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	87da      	strh	r2, [r3, #62]	; 0x3e
 800203a:	e0b6      	b.n	80021aa <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002062:	e0a2      	b.n	80021aa <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d134      	bne.n	80020dc <HAL_SPI_TransmitReceive+0x314>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02f      	beq.n	80020dc <HAL_SPI_TransmitReceive+0x314>
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12c      	bne.n	80020dc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d912      	bls.n	80020b2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	1c9a      	adds	r2, r3, #2
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b02      	subs	r3, #2
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020b0:	e012      	b.n	80020d8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d148      	bne.n	800217c <HAL_SPI_TransmitReceive+0x3b4>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d042      	beq.n	800217c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d923      	bls.n	800214a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	b292      	uxth	r2, r2
 800210e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	1c9a      	adds	r2, r3, #2
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b02      	subs	r3, #2
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d81f      	bhi.n	8002178 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	e016      	b.n	8002178 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f103 020c 	add.w	r2, r3, #12
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002178:	2301      	movs	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800217c:	f7fe faba 	bl	80006f4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002188:	429a      	cmp	r2, r3
 800218a:	d803      	bhi.n	8002194 <HAL_SPI_TransmitReceive+0x3cc>
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d102      	bne.n	800219a <HAL_SPI_TransmitReceive+0x3d2>
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80021a8:	e026      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f af57 	bne.w	8002064 <HAL_SPI_TransmitReceive+0x29c>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f47f af50 	bne.w	8002064 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f93d 	bl	8002448 <SPI_EndRxTxTransaction>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021ee:	e003      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002204:	4618      	mov	r0, r3
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800221c:	f7fe fa6a 	bl	80006f4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800222c:	f7fe fa62 	bl	80006f4 <HAL_GetTick>
 8002230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002232:	4b39      	ldr	r3, [pc, #228]	; (8002318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	015b      	lsls	r3, r3, #5
 8002238:	0d1b      	lsrs	r3, r3, #20
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002242:	e054      	b.n	80022ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d050      	beq.n	80022ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800224c:	f7fe fa52 	bl	80006f4 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	429a      	cmp	r2, r3
 800225a:	d902      	bls.n	8002262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d13d      	bne.n	80022de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227a:	d111      	bne.n	80022a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002284:	d004      	beq.n	8002290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d107      	bne.n	80022a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a8:	d10f      	bne.n	80022ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e017      	b.n	800230e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	429a      	cmp	r2, r3
 800230a:	d19b      	bne.n	8002244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800232e:	f7fe f9e1 	bl	80006f4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	4413      	add	r3, r2
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800233e:	f7fe f9d9 	bl	80006f4 <HAL_GetTick>
 8002342:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	330c      	adds	r3, #12
 800234a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00da      	lsls	r2, r3, #3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	0d1b      	lsrs	r3, r3, #20
 800235c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002364:	e060      	b.n	8002428 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800236c:	d107      	bne.n	800237e <SPI_WaitFifoStateUntilTimeout+0x62>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800237c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d050      	beq.n	8002428 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002386:	f7fe f9b5 	bl	80006f4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	429a      	cmp	r2, r3
 8002394:	d902      	bls.n	800239c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d13d      	bne.n	8002418 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b4:	d111      	bne.n	80023da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023be:	d004      	beq.n	80023ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c8:	d107      	bne.n	80023da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e2:	d10f      	bne.n	8002404 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002402:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e010      	b.n	800243a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3b01      	subs	r3, #1
 8002426:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d196      	bne.n	8002366 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff ff5b 	bl	800231c <SPI_WaitFifoStateUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e027      	b.n	80024cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fec0 	bl	800220c <SPI_WaitFlagStateUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e014      	b.n	80024cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff ff34 	bl	800231c <SPI_WaitFifoStateUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	f043 0220 	orr.w	r2, r3, #32
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e000      	b.n	80024cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <MX_FATFS_Init+0x18>)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_FATFS_Init+0x1c>)
 80024dc:	f003 f91c 	bl	8005718 <FATFS_LinkDriver>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <MX_FATFS_Init+0x20>)
 80024e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200000ac 	.word	0x200000ac
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	200000a8 	.word	0x200000a8

080024f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80024fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f9d1 	bl	80028bc <USER_SPI_initialize>
 800251a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return USER_SPI_status(pdrv); //ADD THIS LINE
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 faaf 	bl	8002a94 <USER_SPI_status>
 8002536:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002550:	7bf8      	ldrb	r0, [r7, #15]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	f000 fab2 	bl	8002ac0 <USER_SPI_read>
 800255c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8002576:	7bf8      	ldrb	r0, [r7, #15]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	f000 fb05 	bl	8002b8c <USER_SPI_write>
 8002582:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	603a      	str	r2, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	460b      	mov	r3, r1
 800259a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800259c:	79b9      	ldrb	r1, [r7, #6]
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fb6e 	bl	8002c84 <USER_SPI_ioctl>
 80025a8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80025bc:	f7fe f89a 	bl	80006f4 <HAL_GetTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <SPI_Timer_On+0x20>)
 80025c4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <SPI_Timer_On+0x24>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200000b4 	.word	0x200000b4
 80025d8:	200000b8 	.word	0x200000b8

080025dc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80025e0:	f7fe f888 	bl	80006f4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <SPI_Timer_Status+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1ad2      	subs	r2, r2, r3
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SPI_Timer_Status+0x28>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	bf34      	ite	cc
 80025f4:	2301      	movcc	r3, #1
 80025f6:	2300      	movcs	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200000b4 	.word	0x200000b4
 8002604:	200000b8 	.word	0x200000b8

08002608 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af02      	add	r7, sp, #8
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002612:	f107 020f 	add.w	r2, r7, #15
 8002616:	1df9      	adds	r1, r7, #7
 8002618:	2332      	movs	r3, #50	; 0x32
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	4804      	ldr	r0, [pc, #16]	; (8002630 <xchg_spi+0x28>)
 8002620:	f7ff fbd2 	bl	8001dc8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000040 	.word	0x20000040

08002634 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e00a      	b.n	800265a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	18d4      	adds	r4, r2, r3
 800264a:	20ff      	movs	r0, #255	; 0xff
 800264c:	f7ff ffdc 	bl	8002608 <xchg_spi>
 8002650:	4603      	mov	r3, r0
 8002652:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3f0      	bcc.n	8002644 <rcvr_spi_multi+0x10>
	}
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}

0800266c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b29a      	uxth	r2, r3
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <xmit_spi_multi+0x24>)
 8002682:	f7ff fa2c 	bl	8001ade <HAL_SPI_Transmit>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000040 	.word	0x20000040

08002694 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800269c:	f7fe f82a 	bl	80006f4 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80026a6:	20ff      	movs	r0, #255	; 0xff
 80026a8:	f7ff ffae 	bl	8002608 <xchg_spi>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2bff      	cmp	r3, #255	; 0xff
 80026b4:	d007      	beq.n	80026c6 <wait_ready+0x32>
 80026b6:	f7fe f81d 	bl	80006f4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d8ef      	bhi.n	80026a6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2bff      	cmp	r3, #255	; 0xff
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80026de:	2201      	movs	r2, #1
 80026e0:	2110      	movs	r1, #16
 80026e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e6:	f7fe fa8d 	bl	8000c04 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80026ea:	20ff      	movs	r0, #255	; 0xff
 80026ec:	f7ff ff8c 	bl	8002608 <xchg_spi>

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80026f8:	2200      	movs	r2, #0
 80026fa:	2110      	movs	r1, #16
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002700:	f7fe fa80 	bl	8000c04 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002704:	20ff      	movs	r0, #255	; 0xff
 8002706:	f7ff ff7f 	bl	8002608 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800270a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800270e:	f7ff ffc1 	bl	8002694 <wait_ready>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <spiselect+0x28>
 8002718:	2301      	movs	r3, #1
 800271a:	e002      	b.n	8002722 <spiselect+0x2e>

	despiselect();
 800271c:	f7ff ffdd 	bl	80026da <despiselect>
	return 0;	/* Timeout */
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}

08002726 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002730:	20c8      	movs	r0, #200	; 0xc8
 8002732:	f7ff ff3f 	bl	80025b4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002736:	20ff      	movs	r0, #255	; 0xff
 8002738:	f7ff ff66 	bl	8002608 <xchg_spi>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d104      	bne.n	8002750 <rcvr_datablock+0x2a>
 8002746:	f7ff ff49 	bl	80025dc <SPI_Timer_Status>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f2      	bne.n	8002736 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2bfe      	cmp	r3, #254	; 0xfe
 8002754:	d001      	beq.n	800275a <rcvr_datablock+0x34>
 8002756:	2300      	movs	r3, #0
 8002758:	e00a      	b.n	8002770 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff69 	bl	8002634 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002762:	20ff      	movs	r0, #255	; 0xff
 8002764:	f7ff ff50 	bl	8002608 <xchg_spi>
 8002768:	20ff      	movs	r0, #255	; 0xff
 800276a:	f7ff ff4d 	bl	8002608 <xchg_spi>

	return 1;						/* Function succeeded */
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002788:	f7ff ff84 	bl	8002694 <wait_ready>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <xmit_datablock+0x1e>
 8002792:	2300      	movs	r3, #0
 8002794:	e01e      	b.n	80027d4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff35 	bl	8002608 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	2bfd      	cmp	r3, #253	; 0xfd
 80027a2:	d016      	beq.n	80027d2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80027a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff5f 	bl	800266c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80027ae:	20ff      	movs	r0, #255	; 0xff
 80027b0:	f7ff ff2a 	bl	8002608 <xchg_spi>
 80027b4:	20ff      	movs	r0, #255	; 0xff
 80027b6:	f7ff ff27 	bl	8002608 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80027ba:	20ff      	movs	r0, #255	; 0xff
 80027bc:	f7ff ff24 	bl	8002608 <xchg_spi>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d001      	beq.n	80027d2 <xmit_datablock+0x5a>
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <xmit_datablock+0x5c>
	}
	return 1;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da0e      	bge.n	800280e <send_cmd+0x32>
		cmd &= 0x7F;
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80027f8:	2100      	movs	r1, #0
 80027fa:	2037      	movs	r0, #55	; 0x37
 80027fc:	f7ff ffee 	bl	80027dc <send_cmd>
 8002800:	4603      	mov	r3, r0
 8002802:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d901      	bls.n	800280e <send_cmd+0x32>
 800280a:	7bbb      	ldrb	r3, [r7, #14]
 800280c:	e051      	b.n	80028b2 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d008      	beq.n	8002826 <send_cmd+0x4a>
		despiselect();
 8002814:	f7ff ff61 	bl	80026da <despiselect>
		if (!spiselect()) return 0xFF;
 8002818:	f7ff ff6c 	bl	80026f4 <spiselect>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <send_cmd+0x4a>
 8002822:	23ff      	movs	r3, #255	; 0xff
 8002824:	e045      	b.n	80028b2 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff feea 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	0e1b      	lsrs	r3, r3, #24
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fee4 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fede 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fed8 	bl	8002608 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fed3 	bl	8002608 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <send_cmd+0x94>
 800286c:	2395      	movs	r3, #149	; 0x95
 800286e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d101      	bne.n	800287a <send_cmd+0x9e>
 8002876:	2387      	movs	r3, #135	; 0x87
 8002878:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fec3 	bl	8002608 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d102      	bne.n	800288e <send_cmd+0xb2>
 8002888:	20ff      	movs	r0, #255	; 0xff
 800288a:	f7ff febd 	bl	8002608 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800288e:	230a      	movs	r3, #10
 8002890:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002892:	20ff      	movs	r0, #255	; 0xff
 8002894:	f7ff feb8 	bl	8002608 <xchg_spi>
 8002898:	4603      	mov	r3, r0
 800289a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800289c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da05      	bge.n	80028b0 <send_cmd+0xd4>
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <send_cmd+0xb6>

	return res;							/* Return received response */
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <USER_SPI_initialize+0x14>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d6      	b.n	8002a7e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80028d0:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <USER_SPI_initialize+0x1cc>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <USER_SPI_initialize+0x2a>
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <USER_SPI_initialize+0x1cc>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	e0cb      	b.n	8002a7e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80028e6:	4b69      	ldr	r3, [pc, #420]	; (8002a8c <USER_SPI_initialize+0x1d0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80028f0:	4b66      	ldr	r3, [pc, #408]	; (8002a8c <USER_SPI_initialize+0x1d0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80028f8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80028fa:	230a      	movs	r3, #10
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e005      	b.n	800290c <USER_SPI_initialize+0x50>
 8002900:	20ff      	movs	r0, #255	; 0xff
 8002902:	f7ff fe81 	bl	8002608 <xchg_spi>
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	3b01      	subs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f6      	bne.n	8002900 <USER_SPI_initialize+0x44>

	ty = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002916:	2100      	movs	r1, #0
 8002918:	2000      	movs	r0, #0
 800291a:	f7ff ff5f 	bl	80027dc <send_cmd>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	f040 808b 	bne.w	8002a3c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800292a:	f7ff fe43 	bl	80025b4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800292e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002932:	2008      	movs	r0, #8
 8002934:	f7ff ff52 	bl	80027dc <send_cmd>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d151      	bne.n	80029e2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e00d      	b.n	8002960 <USER_SPI_initialize+0xa4>
 8002944:	7bfc      	ldrb	r4, [r7, #15]
 8002946:	20ff      	movs	r0, #255	; 0xff
 8002948:	f7ff fe5e 	bl	8002608 <xchg_spi>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	f104 0310 	add.w	r3, r4, #16
 8002954:	443b      	add	r3, r7
 8002956:	f803 2c08 	strb.w	r2, [r3, #-8]
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	3301      	adds	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d9ee      	bls.n	8002944 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002966:	7abb      	ldrb	r3, [r7, #10]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d167      	bne.n	8002a3c <USER_SPI_initialize+0x180>
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	2baa      	cmp	r3, #170	; 0xaa
 8002970:	d164      	bne.n	8002a3c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002972:	bf00      	nop
 8002974:	f7ff fe32 	bl	80025dc <SPI_Timer_Status>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <USER_SPI_initialize+0xd2>
 800297e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002982:	20a9      	movs	r0, #169	; 0xa9
 8002984:	f7ff ff2a 	bl	80027dc <send_cmd>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f2      	bne.n	8002974 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800298e:	f7ff fe25 	bl	80025dc <SPI_Timer_Status>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d051      	beq.n	8002a3c <USER_SPI_initialize+0x180>
 8002998:	2100      	movs	r1, #0
 800299a:	203a      	movs	r0, #58	; 0x3a
 800299c:	f7ff ff1e 	bl	80027dc <send_cmd>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d14a      	bne.n	8002a3c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e00d      	b.n	80029c8 <USER_SPI_initialize+0x10c>
 80029ac:	7bfc      	ldrb	r4, [r7, #15]
 80029ae:	20ff      	movs	r0, #255	; 0xff
 80029b0:	f7ff fe2a 	bl	8002608 <xchg_spi>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	f104 0310 	add.w	r3, r4, #16
 80029bc:	443b      	add	r3, r7
 80029be:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d9ee      	bls.n	80029ac <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80029ce:	7a3b      	ldrb	r3, [r7, #8]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <USER_SPI_initialize+0x120>
 80029d8:	230c      	movs	r3, #12
 80029da:	e000      	b.n	80029de <USER_SPI_initialize+0x122>
 80029dc:	2304      	movs	r3, #4
 80029de:	737b      	strb	r3, [r7, #13]
 80029e0:	e02c      	b.n	8002a3c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80029e2:	2100      	movs	r1, #0
 80029e4:	20a9      	movs	r0, #169	; 0xa9
 80029e6:	f7ff fef9 	bl	80027dc <send_cmd>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d804      	bhi.n	80029fa <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80029f0:	2302      	movs	r3, #2
 80029f2:	737b      	strb	r3, [r7, #13]
 80029f4:	23a9      	movs	r3, #169	; 0xa9
 80029f6:	73bb      	strb	r3, [r7, #14]
 80029f8:	e003      	b.n	8002a02 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80029fa:	2301      	movs	r3, #1
 80029fc:	737b      	strb	r3, [r7, #13]
 80029fe:	2301      	movs	r3, #1
 8002a00:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002a02:	bf00      	nop
 8002a04:	f7ff fdea 	bl	80025dc <SPI_Timer_Status>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <USER_SPI_initialize+0x162>
 8002a0e:	7bbb      	ldrb	r3, [r7, #14]
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fee2 	bl	80027dc <send_cmd>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f2      	bne.n	8002a04 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002a1e:	f7ff fddd 	bl	80025dc <SPI_Timer_Status>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <USER_SPI_initialize+0x17c>
 8002a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a2c:	2010      	movs	r0, #16
 8002a2e:	f7ff fed5 	bl	80027dc <send_cmd>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <USER_SPI_initialize+0x180>
				ty = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <USER_SPI_initialize+0x1d4>)
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002a42:	f7ff fe4a 	bl	80026da <despiselect>

	if (ty) {			/* OK */
 8002a46:	7b7b      	ldrb	r3, [r7, #13]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <USER_SPI_initialize+0x1d0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <USER_SPI_initialize+0x1d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0210 	orr.w	r2, r2, #16
 8002a5e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <USER_SPI_initialize+0x1cc>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <USER_SPI_initialize+0x1cc>)
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e002      	b.n	8002a78 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <USER_SPI_initialize+0x1cc>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <USER_SPI_initialize+0x1cc>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd90      	pop	{r4, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000020 	.word	0x20000020
 8002a8c:	20000040 	.word	0x20000040
 8002a90:	200000b0 	.word	0x200000b0

08002a94 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <USER_SPI_status+0x14>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e002      	b.n	8002aae <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <USER_SPI_status+0x28>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000020 	.word	0x20000020

08002ac0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4603      	mov	r3, r0
 8002ace:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <USER_SPI_read+0x1c>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <USER_SPI_read+0x20>
 8002adc:	2304      	movs	r3, #4
 8002ade:	e04d      	b.n	8002b7c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <USER_SPI_read+0xc4>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <USER_SPI_read+0x32>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e044      	b.n	8002b7c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <USER_SPI_read+0xc8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <USER_SPI_read+0x44>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d111      	bne.n	8002b2e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	2011      	movs	r0, #17
 8002b0e:	f7ff fe65 	bl	80027dc <send_cmd>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d129      	bne.n	8002b6c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b1c:	68b8      	ldr	r0, [r7, #8]
 8002b1e:	f7ff fe02 	bl	8002726 <rcvr_datablock>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d021      	beq.n	8002b6c <USER_SPI_read+0xac>
			count = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	e01e      	b.n	8002b6c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	2012      	movs	r0, #18
 8002b32:	f7ff fe53 	bl	80027dc <send_cmd>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d117      	bne.n	8002b6c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b40:	68b8      	ldr	r0, [r7, #8]
 8002b42:	f7ff fdf0 	bl	8002726 <rcvr_datablock>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <USER_SPI_read+0xa2>
				buff += 512;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b52:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ed      	bne.n	8002b3c <USER_SPI_read+0x7c>
 8002b60:	e000      	b.n	8002b64 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002b62:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002b64:	2100      	movs	r1, #0
 8002b66:	200c      	movs	r0, #12
 8002b68:	f7ff fe38 	bl	80027dc <send_cmd>
		}
	}
	despiselect();
 8002b6c:	f7ff fdb5 	bl	80026da <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000020 	.word	0x20000020
 8002b88:	200000b0 	.word	0x200000b0

08002b8c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <USER_SPI_write+0x1c>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <USER_SPI_write+0x20>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e063      	b.n	8002c74 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <USER_SPI_write+0xf0>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <USER_SPI_write+0x32>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e05a      	b.n	8002c74 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <USER_SPI_write+0xf0>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <USER_SPI_write+0x44>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e051      	b.n	8002c74 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <USER_SPI_write+0xf4>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <USER_SPI_write+0x56>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	025b      	lsls	r3, r3, #9
 8002be0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d110      	bne.n	8002c0a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	2018      	movs	r0, #24
 8002bec:	f7ff fdf6 	bl	80027dc <send_cmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d136      	bne.n	8002c64 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002bf6:	21fe      	movs	r1, #254	; 0xfe
 8002bf8:	68b8      	ldr	r0, [r7, #8]
 8002bfa:	f7ff fdbd 	bl	8002778 <xmit_datablock>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02f      	beq.n	8002c64 <USER_SPI_write+0xd8>
			count = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	e02c      	b.n	8002c64 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <USER_SPI_write+0xf4>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f003 0306 	and.w	r3, r3, #6
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <USER_SPI_write+0x92>
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	2097      	movs	r0, #151	; 0x97
 8002c1a:	f7ff fddf 	bl	80027dc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	2019      	movs	r0, #25
 8002c22:	f7ff fddb 	bl	80027dc <send_cmd>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11b      	bne.n	8002c64 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002c2c:	21fc      	movs	r1, #252	; 0xfc
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f7ff fda2 	bl	8002778 <xmit_datablock>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <USER_SPI_write+0xc4>
				buff += 512;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c40:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ee      	bne.n	8002c2c <USER_SPI_write+0xa0>
 8002c4e:	e000      	b.n	8002c52 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002c50:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002c52:	21fd      	movs	r1, #253	; 0xfd
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fd8f 	bl	8002778 <xmit_datablock>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <USER_SPI_write+0xd8>
 8002c60:	2301      	movs	r3, #1
 8002c62:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002c64:	f7ff fd39 	bl	80026da <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000020 	.word	0x20000020
 8002c80:	200000b0 	.word	0x200000b0

08002c84 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	; 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	603a      	str	r2, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
 8002c90:	460b      	mov	r3, r1
 8002c92:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <USER_SPI_ioctl+0x1a>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e15a      	b.n	8002f54 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c9e:	4baf      	ldr	r3, [pc, #700]	; (8002f5c <USER_SPI_ioctl+0x2d8>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <USER_SPI_ioctl+0x2c>
 8002cac:	2303      	movs	r3, #3
 8002cae:	e151      	b.n	8002f54 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002cb6:	79bb      	ldrb	r3, [r7, #6]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	f200 8136 	bhi.w	8002f2a <USER_SPI_ioctl+0x2a6>
 8002cbe:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <USER_SPI_ioctl+0x40>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002cd9 	.word	0x08002cd9
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002f2b 	.word	0x08002f2b
 8002cd0:	08002d99 	.word	0x08002d99
 8002cd4:	08002e8f 	.word	0x08002e8f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002cd8:	f7ff fd0c 	bl	80026f4 <spiselect>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8127 	beq.w	8002f32 <USER_SPI_ioctl+0x2ae>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002cea:	e122      	b.n	8002f32 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002cec:	2100      	movs	r1, #0
 8002cee:	2009      	movs	r0, #9
 8002cf0:	f7ff fd74 	bl	80027dc <send_cmd>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 811d 	bne.w	8002f36 <USER_SPI_ioctl+0x2b2>
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	2110      	movs	r1, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fd0f 	bl	8002726 <rcvr_datablock>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8113 	beq.w	8002f36 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002d10:	7b3b      	ldrb	r3, [r7, #12]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d111      	bne.n	8002d3e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002d1a:	7d7b      	ldrb	r3, [r7, #21]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	7d3b      	ldrb	r3, [r7, #20]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	4413      	add	r3, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002d2e:	4413      	add	r3, r2
 8002d30:	3301      	adds	r3, #1
 8002d32:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	029a      	lsls	r2, r3, #10
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e028      	b.n	8002d90 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d3e:	7c7b      	ldrb	r3, [r7, #17]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	7dbb      	ldrb	r3, [r7, #22]
 8002d48:	09db      	lsrs	r3, r3, #7
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	7d7b      	ldrb	r3, [r7, #21]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0306 	and.w	r3, r3, #6
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3302      	adds	r3, #2
 8002d62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002d66:	7d3b      	ldrb	r3, [r7, #20]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	441a      	add	r2, r3
 8002d74:	7cbb      	ldrb	r3, [r7, #18]
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3301      	adds	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002d82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d86:	3b09      	subs	r3, #9
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002d96:	e0ce      	b.n	8002f36 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002d98:	4b71      	ldr	r3, [pc, #452]	; (8002f60 <USER_SPI_ioctl+0x2dc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d031      	beq.n	8002e08 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002da4:	2100      	movs	r1, #0
 8002da6:	208d      	movs	r0, #141	; 0x8d
 8002da8:	f7ff fd18 	bl	80027dc <send_cmd>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80c3 	bne.w	8002f3a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002db4:	20ff      	movs	r0, #255	; 0xff
 8002db6:	f7ff fc27 	bl	8002608 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fcb0 	bl	8002726 <rcvr_datablock>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80b6 	beq.w	8002f3a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002dce:	2330      	movs	r3, #48	; 0x30
 8002dd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002dd4:	e007      	b.n	8002de6 <USER_SPI_ioctl+0x162>
 8002dd6:	20ff      	movs	r0, #255	; 0xff
 8002dd8:	f7ff fc16 	bl	8002608 <xchg_spi>
 8002ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002de0:	3b01      	subs	r3, #1
 8002de2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002de6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f3      	bne.n	8002dd6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002dee:	7dbb      	ldrb	r3, [r7, #22]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	2310      	movs	r3, #16
 8002df8:	fa03 f202 	lsl.w	r2, r3, r2
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002e06:	e098      	b.n	8002f3a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2009      	movs	r0, #9
 8002e0c:	f7ff fce6 	bl	80027dc <send_cmd>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8091 	bne.w	8002f3a <USER_SPI_ioctl+0x2b6>
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fc81 	bl	8002726 <rcvr_datablock>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8087 	beq.w	8002f3a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002e2c:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <USER_SPI_ioctl+0x2dc>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d012      	beq.n	8002e5e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002e38:	7dbb      	ldrb	r3, [r7, #22]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002e40:	7dfa      	ldrb	r2, [r7, #23]
 8002e42:	09d2      	lsrs	r2, r2, #7
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	4413      	add	r3, r2
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	7e7b      	ldrb	r3, [r7, #25]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e013      	b.n	8002e86 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002e5e:	7dbb      	ldrb	r3, [r7, #22]
 8002e60:	109b      	asrs	r3, r3, #2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	3301      	adds	r3, #1
 8002e6a:	7dfa      	ldrb	r2, [r7, #23]
 8002e6c:	00d2      	lsls	r2, r2, #3
 8002e6e:	f002 0218 	and.w	r2, r2, #24
 8002e72:	7df9      	ldrb	r1, [r7, #23]
 8002e74:	0949      	lsrs	r1, r1, #5
 8002e76:	b2c9      	uxtb	r1, r1
 8002e78:	440a      	add	r2, r1
 8002e7a:	3201      	adds	r2, #1
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002e8c:	e055      	b.n	8002f3a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <USER_SPI_ioctl+0x2dc>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f003 0306 	and.w	r3, r3, #6
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d051      	beq.n	8002f3e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e9a:	f107 020c 	add.w	r2, r7, #12
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	210b      	movs	r1, #11
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff feee 	bl	8002c84 <USER_SPI_ioctl>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d149      	bne.n	8002f42 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002eae:	7b3b      	ldrb	r3, [r7, #12]
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <USER_SPI_ioctl+0x23e>
 8002eb8:	7dbb      	ldrb	r3, [r7, #22]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d041      	beq.n	8002f46 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <USER_SPI_ioctl+0x2dc>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eec:	2020      	movs	r0, #32
 8002eee:	f7ff fc75 	bl	80027dc <send_cmd>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d128      	bne.n	8002f4a <USER_SPI_ioctl+0x2c6>
 8002ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efa:	2021      	movs	r0, #33	; 0x21
 8002efc:	f7ff fc6e 	bl	80027dc <send_cmd>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d121      	bne.n	8002f4a <USER_SPI_ioctl+0x2c6>
 8002f06:	2100      	movs	r1, #0
 8002f08:	2026      	movs	r0, #38	; 0x26
 8002f0a:	f7ff fc67 	bl	80027dc <send_cmd>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11a      	bne.n	8002f4a <USER_SPI_ioctl+0x2c6>
 8002f14:	f247 5030 	movw	r0, #30000	; 0x7530
 8002f18:	f7ff fbbc 	bl	8002694 <wait_ready>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d013      	beq.n	8002f4a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002f28:	e00f      	b.n	8002f4a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f30:	e00c      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		break;
 8002f32:	bf00      	nop
 8002f34:	e00a      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		break;
 8002f36:	bf00      	nop
 8002f38:	e008      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		break;
 8002f3a:	bf00      	nop
 8002f3c:	e006      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002f3e:	bf00      	nop
 8002f40:	e004      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <USER_SPI_ioctl+0x2c8>
		break;
 8002f4a:	bf00      	nop
	}

	despiselect();
 8002f4c:	f7ff fbc5 	bl	80026da <despiselect>

	return res;
 8002f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3730      	adds	r7, #48	; 0x30
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000020 	.word	0x20000020
 8002f60:	200000b0 	.word	0x200000b0

08002f64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <disk_status+0x30>)
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	79fa      	ldrb	r2, [r7, #7]
 8002f7c:	4905      	ldr	r1, [pc, #20]	; (8002f94 <disk_status+0x30>)
 8002f7e:	440a      	add	r2, r1
 8002f80:	7a12      	ldrb	r2, [r2, #8]
 8002f82:	4610      	mov	r0, r2
 8002f84:	4798      	blx	r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200000e4 	.word	0x200000e4

08002f98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <disk_initialize+0x48>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <disk_initialize+0x48>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <disk_initialize+0x48>)
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	79fa      	ldrb	r2, [r7, #7]
 8002fc6:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <disk_initialize+0x48>)
 8002fc8:	440a      	add	r2, r1
 8002fca:	7a12      	ldrb	r2, [r2, #8]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000e4 	.word	0x200000e4

08002fe4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <disk_read+0x3c>)
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	689c      	ldr	r4, [r3, #8]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	4a07      	ldr	r2, [pc, #28]	; (8003020 <disk_read+0x3c>)
 8003004:	4413      	add	r3, r2
 8003006:	7a18      	ldrb	r0, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	47a0      	blx	r4
 8003010:	4603      	mov	r3, r0
 8003012:	75fb      	strb	r3, [r7, #23]
  return res;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
}
 8003016:	4618      	mov	r0, r3
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop
 8003020:	200000e4 	.word	0x200000e4

08003024 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <disk_write+0x3c>)
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68dc      	ldr	r4, [r3, #12]
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <disk_write+0x3c>)
 8003044:	4413      	add	r3, r2
 8003046:	7a18      	ldrb	r0, [r3, #8]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	47a0      	blx	r4
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]
  return res;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
}
 8003056:	4618      	mov	r0, r3
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	bf00      	nop
 8003060:	200000e4 	.word	0x200000e4

08003064 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	603a      	str	r2, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	460b      	mov	r3, r1
 8003072:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <disk_ioctl+0x38>)
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	79fa      	ldrb	r2, [r7, #7]
 8003082:	4906      	ldr	r1, [pc, #24]	; (800309c <disk_ioctl+0x38>)
 8003084:	440a      	add	r2, r1
 8003086:	7a10      	ldrb	r0, [r2, #8]
 8003088:	79b9      	ldrb	r1, [r7, #6]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4798      	blx	r3
 800308e:	4603      	mov	r3, r0
 8003090:	73fb      	strb	r3, [r7, #15]
  return res;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200000e4 	.word	0x200000e4

080030a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3301      	adds	r3, #1
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80030b0:	89fb      	ldrh	r3, [r7, #14]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b21b      	sxth	r3, r3
 80030c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80030c2:	89fb      	ldrh	r3, [r7, #14]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3303      	adds	r3, #3
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	3202      	adds	r2, #2
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	3201      	adds	r2, #1
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
	return rv;
 8003108:	68fb      	ldr	r3, [r7, #12]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	887a      	ldrh	r2, [r7, #2]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	1c53      	adds	r3, r2, #1
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	6179      	str	r1, [r7, #20]
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f1      	bne.n	80031be <mem_cpy+0x1a>
	}
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	617a      	str	r2, [r7, #20]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f3      	bne.n	80031f6 <mem_set+0x10>
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	61ba      	str	r2, [r7, #24]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	1acb      	subs	r3, r1, r3
 8003248:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3b01      	subs	r3, #1
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <mem_cmp+0x40>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0eb      	beq.n	8003234 <mem_cmp+0x18>

	return r;
 800325c:	697b      	ldr	r3, [r7, #20]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003274:	e002      	b.n	800327c <chk_chr+0x12>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3301      	adds	r3, #1
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <chk_chr+0x26>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	4293      	cmp	r3, r2
 800328e:	d1f2      	bne.n	8003276 <chk_chr+0xc>
	return *str;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	781b      	ldrb	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e029      	b.n	8003308 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <chk_lock+0xb4>)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	4413      	add	r3, r2
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01d      	beq.n	80032fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80032c2:	4a24      	ldr	r2, [pc, #144]	; (8003354 <chk_lock+0xb4>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d116      	bne.n	8003302 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <chk_lock+0xb4>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d10c      	bne.n	8003302 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80032e8:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <chk_lock+0xb4>)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4413      	add	r3, r2
 80032f0:	3308      	adds	r3, #8
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d102      	bne.n	8003302 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80032fc:	e007      	b.n	800330e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80032fe:	2301      	movs	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d9d2      	bls.n	80032b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d109      	bne.n	8003328 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <chk_lock+0x80>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d101      	bne.n	8003324 <chk_lock+0x84>
 8003320:	2300      	movs	r3, #0
 8003322:	e010      	b.n	8003346 <chk_lock+0xa6>
 8003324:	2312      	movs	r3, #18
 8003326:	e00e      	b.n	8003346 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d108      	bne.n	8003340 <chk_lock+0xa0>
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <chk_lock+0xb4>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	4413      	add	r3, r2
 8003336:	330c      	adds	r3, #12
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d101      	bne.n	8003344 <chk_lock+0xa4>
 8003340:	2310      	movs	r3, #16
 8003342:	e000      	b.n	8003346 <chk_lock+0xa6>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200000c4 	.word	0x200000c4

08003358 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	e002      	b.n	800336a <enq_lock+0x12>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3301      	adds	r3, #1
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d806      	bhi.n	800337e <enq_lock+0x26>
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <enq_lock+0x40>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	4413      	add	r3, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b02      	cmp	r3, #2
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	200000c4 	.word	0x200000c4

0800339c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e01f      	b.n	80033ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80033ac:	4a41      	ldr	r2, [pc, #260]	; (80034b4 <inc_lock+0x118>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	4413      	add	r3, r2
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d113      	bne.n	80033e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80033be:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <inc_lock+0x118>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	4413      	add	r3, r2
 80033c6:	3304      	adds	r3, #4
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d109      	bne.n	80033e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80033d2:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <inc_lock+0x118>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	4413      	add	r3, r2
 80033da:	3308      	adds	r3, #8
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d006      	beq.n	80033f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3301      	adds	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d9dc      	bls.n	80033ac <inc_lock+0x10>
 80033f2:	e000      	b.n	80033f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80033f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d132      	bne.n	8003462 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e002      	b.n	8003408 <inc_lock+0x6c>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d806      	bhi.n	800341c <inc_lock+0x80>
 800340e:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <inc_lock+0x118>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f2      	bne.n	8003402 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d101      	bne.n	8003426 <inc_lock+0x8a>
 8003422:	2300      	movs	r3, #0
 8003424:	e040      	b.n	80034a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4922      	ldr	r1, [pc, #136]	; (80034b4 <inc_lock+0x118>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	440b      	add	r3, r1
 8003432:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	491e      	ldr	r1, [pc, #120]	; (80034b4 <inc_lock+0x118>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	440b      	add	r3, r1
 8003440:	3304      	adds	r3, #4
 8003442:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	491a      	ldr	r1, [pc, #104]	; (80034b4 <inc_lock+0x118>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	440b      	add	r3, r1
 8003450:	3308      	adds	r3, #8
 8003452:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <inc_lock+0x118>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	4413      	add	r3, r2
 800345c:	330c      	adds	r3, #12
 800345e:	2200      	movs	r2, #0
 8003460:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <inc_lock+0xe0>
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <inc_lock+0x118>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	330c      	adds	r3, #12
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <inc_lock+0xe0>
 8003478:	2300      	movs	r3, #0
 800347a:	e015      	b.n	80034a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <inc_lock+0xf8>
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <inc_lock+0x118>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	4413      	add	r3, r2
 800348a:	330c      	adds	r3, #12
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	e001      	b.n	8003498 <inc_lock+0xfc>
 8003494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003498:	4906      	ldr	r1, [pc, #24]	; (80034b4 <inc_lock+0x118>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	440b      	add	r3, r1
 80034a0:	330c      	adds	r3, #12
 80034a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	200000c4 	.word	0x200000c4

080034b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d825      	bhi.n	8003518 <dec_lock+0x60>
		n = Files[i].ctr;
 80034cc:	4a17      	ldr	r2, [pc, #92]	; (800352c <dec_lock+0x74>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	4413      	add	r3, r2
 80034d4:	330c      	adds	r3, #12
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e0:	d101      	bne.n	80034e6 <dec_lock+0x2e>
 80034e2:	2300      	movs	r3, #0
 80034e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <dec_lock+0x3a>
 80034ec:	89fb      	ldrh	r3, [r7, #14]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80034f2:	4a0e      	ldr	r2, [pc, #56]	; (800352c <dec_lock+0x74>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4413      	add	r3, r2
 80034fa:	330c      	adds	r3, #12
 80034fc:	89fa      	ldrh	r2, [r7, #14]
 80034fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003500:	89fb      	ldrh	r3, [r7, #14]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <dec_lock+0x5a>
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <dec_lock+0x74>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	737b      	strb	r3, [r7, #13]
 8003516:	e001      	b.n	800351c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003518:	2302      	movs	r3, #2
 800351a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800351c:	7b7b      	ldrb	r3, [r7, #13]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200000c4 	.word	0x200000c4

08003530 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e010      	b.n	8003560 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800353e:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <clear_lock+0x44>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d105      	bne.n	800355a <clear_lock+0x2a>
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <clear_lock+0x44>)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	4413      	add	r3, r2
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3301      	adds	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d9eb      	bls.n	800353e <clear_lock+0xe>
	}
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	200000c4 	.word	0x200000c4

08003578 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	78db      	ldrb	r3, [r3, #3]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d034      	beq.n	80035f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7858      	ldrb	r0, [r3, #1]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800359c:	2301      	movs	r3, #1
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	f7ff fd40 	bl	8003024 <disk_write>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e022      	b.n	80035f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	1ad2      	subs	r2, r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d217      	bcs.n	80035f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e010      	b.n	80035f0 <sync_window+0x78>
					wsect += fs->fsize;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4413      	add	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7858      	ldrb	r0, [r3, #1]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80035e2:	2301      	movs	r3, #1
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	f7ff fd1d 	bl	8003024 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d8eb      	bhi.n	80035ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d01b      	beq.n	8003650 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ffad 	bl	8003578 <sync_window>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7858      	ldrb	r0, [r3, #1]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003632:	2301      	movs	r3, #1
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	f7ff fcd5 	bl	8002fe4 <disk_read>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff87 	bl	8003578 <sync_window>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d158      	bne.n	8003726 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d148      	bne.n	800370e <sync_fs+0xb2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	791b      	ldrb	r3, [r3, #4]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d144      	bne.n	800370e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3330      	adds	r3, #48	; 0x30
 8003688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fda9 	bl	80031e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3330      	adds	r3, #48	; 0x30
 8003698:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800369c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fd38 	bl	8003116 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3330      	adds	r3, #48	; 0x30
 80036aa:	4921      	ldr	r1, [pc, #132]	; (8003730 <sync_fs+0xd4>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fd4d 	bl	800314c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3330      	adds	r3, #48	; 0x30
 80036b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80036ba:	491e      	ldr	r1, [pc, #120]	; (8003734 <sync_fs+0xd8>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fd45 	bl	800314c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3330      	adds	r3, #48	; 0x30
 80036c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7ff fd3b 	bl	800314c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3330      	adds	r3, #48	; 0x30
 80036da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff fd31 	bl	800314c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7858      	ldrb	r0, [r3, #1]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	2301      	movs	r3, #1
 8003704:	f7ff fc8e 	bl	8003024 <disk_write>
			fs->fsi_flag = 0;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fca4 	bl	8003064 <disk_ioctl>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <sync_fs+0xca>
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	41615252 	.word	0x41615252
 8003734:	61417272 	.word	0x61417272

08003738 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	3b02      	subs	r3, #2
 8003746:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	3b02      	subs	r3, #2
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d301      	bcc.n	8003758 <clust2sect+0x20>
 8003754:	2300      	movs	r3, #0
 8003756:	e008      	b.n	800376a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	895b      	ldrh	r3, [r3, #10]
 800375c:	461a      	mov	r2, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	fb03 f202 	mul.w	r2, r3, r2
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	4413      	add	r3, r2
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d904      	bls.n	8003796 <get_fat+0x20>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003796:	2301      	movs	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e08f      	b.n	80038bc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d062      	beq.n	8003870 <get_fat+0xfa>
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	dc7c      	bgt.n	80038a8 <get_fat+0x132>
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d002      	beq.n	80037b8 <get_fat+0x42>
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d042      	beq.n	800383c <get_fat+0xc6>
 80037b6:	e077      	b.n	80038a8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6a1a      	ldr	r2, [r3, #32]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0a5b      	lsrs	r3, r3, #9
 80037ce:	4413      	add	r3, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	6938      	ldr	r0, [r7, #16]
 80037d4:	f7ff ff14 	bl	8003600 <move_window>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d167      	bne.n	80038ae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	60fa      	str	r2, [r7, #12]
 80037e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	0a5b      	lsrs	r3, r3, #9
 80037fa:	4413      	add	r3, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	6938      	ldr	r0, [r7, #16]
 8003800:	f7ff fefe 	bl	8003600 <move_window>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d153      	bne.n	80038b2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <get_fat+0xbc>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	e002      	b.n	8003838 <get_fat+0xc2>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	617b      	str	r3, [r7, #20]
			break;
 800383a:	e03f      	b.n	80038bc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	4413      	add	r3, r2
 8003846:	4619      	mov	r1, r3
 8003848:	6938      	ldr	r0, [r7, #16]
 800384a:	f7ff fed9 	bl	8003600 <move_window>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d130      	bne.n	80038b6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003862:	4413      	add	r3, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fc1b 	bl	80030a0 <ld_word>
 800386a:	4603      	mov	r3, r0
 800386c:	617b      	str	r3, [r7, #20]
			break;
 800386e:	e025      	b.n	80038bc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	09db      	lsrs	r3, r3, #7
 8003878:	4413      	add	r3, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6938      	ldr	r0, [r7, #16]
 800387e:	f7ff febf 	bl	8003600 <move_window>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d118      	bne.n	80038ba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003896:	4413      	add	r3, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fc19 	bl	80030d0 <ld_dword>
 800389e:	4603      	mov	r3, r0
 80038a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038a4:	617b      	str	r3, [r7, #20]
			break;
 80038a6:	e009      	b.n	80038bc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e006      	b.n	80038bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038ae:	bf00      	nop
 80038b0:	e004      	b.n	80038bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80038ba:	bf00      	nop
		}
	}

	return val;
 80038bc:	697b      	ldr	r3, [r7, #20]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80038c6:	b590      	push	{r4, r7, lr}
 80038c8:	b089      	sub	sp, #36	; 0x24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f240 80d9 	bls.w	8003a90 <put_fat+0x1ca>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	f080 80d3 	bcs.w	8003a90 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	f000 8096 	beq.w	8003a20 <put_fat+0x15a>
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	f300 80cb 	bgt.w	8003a90 <put_fat+0x1ca>
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d002      	beq.n	8003904 <put_fat+0x3e>
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d06e      	beq.n	80039e0 <put_fat+0x11a>
 8003902:	e0c5      	b.n	8003a90 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4413      	add	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	0a5b      	lsrs	r3, r3, #9
 800391a:	4413      	add	r3, r2
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fe6e 	bl	8003600 <move_window>
 8003924:	4603      	mov	r3, r0
 8003926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003928:	7ffb      	ldrb	r3, [r7, #31]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 80a9 	bne.w	8003a82 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1c59      	adds	r1, r3, #1
 800393a:	61b9      	str	r1, [r7, #24]
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	4413      	add	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <put_fat+0xa4>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b25b      	sxtb	r3, r3
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b25a      	sxtb	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	b25b      	sxtb	r3, r3
 8003962:	4313      	orrs	r3, r2
 8003964:	b25b      	sxtb	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e001      	b.n	800396e <put_fat+0xa8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	0a5b      	lsrs	r3, r3, #9
 8003980:	4413      	add	r3, r2
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fe3b 	bl	8003600 <move_window>
 800398a:	4603      	mov	r3, r0
 800398c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800398e:	7ffb      	ldrb	r3, [r7, #31]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d178      	bne.n	8003a86 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a0:	4413      	add	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <put_fat+0xf0>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e00e      	b.n	80039d4 <put_fat+0x10e>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b25b      	sxtb	r3, r3
 80039bc:	f023 030f 	bic.w	r3, r3, #15
 80039c0:	b25a      	sxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	70da      	strb	r2, [r3, #3]
			break;
 80039de:	e057      	b.n	8003a90 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	4413      	add	r3, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff fe07 	bl	8003600 <move_window>
 80039f2:	4603      	mov	r3, r0
 80039f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80039f6:	7ffb      	ldrb	r3, [r7, #31]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d146      	bne.n	8003a8a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003a0a:	4413      	add	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fb7f 	bl	8003116 <st_word>
			fs->wflag = 1;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	70da      	strb	r2, [r3, #3]
			break;
 8003a1e:	e037      	b.n	8003a90 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	09db      	lsrs	r3, r3, #7
 8003a28:	4413      	add	r3, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fde7 	bl	8003600 <move_window>
 8003a32:	4603      	mov	r3, r0
 8003a34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a36:	7ffb      	ldrb	r3, [r7, #31]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d128      	bne.n	8003a8e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003a50:	4413      	add	r3, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fb3c 	bl	80030d0 <ld_dword>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a5e:	4323      	orrs	r3, r4
 8003a60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003a70:	4413      	add	r3, r2
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fb69 	bl	800314c <st_dword>
			fs->wflag = 1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	70da      	strb	r2, [r3, #3]
			break;
 8003a80:	e006      	b.n	8003a90 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a82:	bf00      	nop
 8003a84:	e004      	b.n	8003a90 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8003a8e:	bf00      	nop
		}
	}
	return res;
 8003a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd90      	pop	{r4, r7, pc}

08003a9a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d904      	bls.n	8003ac0 <remove_chain+0x26>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d301      	bcc.n	8003ac4 <remove_chain+0x2a>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e04b      	b.n	8003b5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	69b8      	ldr	r0, [r7, #24]
 8003ad2:	f7ff fef8 	bl	80038c6 <put_fat>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <remove_chain+0x4a>
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	e03b      	b.n	8003b5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff fe45 	bl	8003776 <get_fat>
 8003aec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d031      	beq.n	8003b58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <remove_chain+0x64>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e02e      	b.n	8003b5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d101      	bne.n	8003b0a <remove_chain+0x70>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e028      	b.n	8003b5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	69b8      	ldr	r0, [r7, #24]
 8003b10:	f7ff fed9 	bl	80038c6 <put_fat>
 8003b14:	4603      	mov	r3, r0
 8003b16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <remove_chain+0x88>
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	e01c      	b.n	8003b5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	3b02      	subs	r3, #2
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d20b      	bcs.n	8003b48 <remove_chain+0xae>
			fs->free_clst++;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	791b      	ldrb	r3, [r3, #4]
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3c6      	bcc.n	8003ae4 <remove_chain+0x4a>
 8003b56:	e000      	b.n	8003b5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003b58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <create_chain+0x2c>
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d31b      	bcc.n	8003bc8 <create_chain+0x64>
 8003b90:	2301      	movs	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e018      	b.n	8003bc8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003b96:	6839      	ldr	r1, [r7, #0]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fdec 	bl	8003776 <get_fat>
 8003b9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d801      	bhi.n	8003baa <create_chain+0x46>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e070      	b.n	8003c8c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d101      	bne.n	8003bb6 <create_chain+0x52>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	e06a      	b.n	8003c8c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d201      	bcs.n	8003bc4 <create_chain+0x60>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	e063      	b.n	8003c8c <create_chain+0x128>
		scl = clst;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d307      	bcc.n	8003bec <create_chain+0x88>
				ncl = 2;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d901      	bls.n	8003bec <create_chain+0x88>
 8003be8:	2300      	movs	r3, #0
 8003bea:	e04f      	b.n	8003c8c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003bec:	69f9      	ldr	r1, [r7, #28]
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fdc1 	bl	8003776 <get_fat>
 8003bf4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d003      	beq.n	8003c0a <create_chain+0xa6>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d101      	bne.n	8003c0e <create_chain+0xaa>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	e03e      	b.n	8003c8c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d1da      	bne.n	8003bcc <create_chain+0x68>
 8003c16:	2300      	movs	r3, #0
 8003c18:	e038      	b.n	8003c8c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003c1a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	69f9      	ldr	r1, [r7, #28]
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f7ff fe4f 	bl	80038c6 <put_fat>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <create_chain+0xe2>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	6938      	ldr	r0, [r7, #16]
 8003c3e:	f7ff fe42 	bl	80038c6 <put_fat>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d116      	bne.n	8003c7a <create_chain+0x116>
		fs->last_clst = ncl;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	3b02      	subs	r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d804      	bhi.n	8003c6a <create_chain+0x106>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	791b      	ldrb	r3, [r3, #4]
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	711a      	strb	r2, [r3, #4]
 8003c78:	e007      	b.n	8003c8a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d102      	bne.n	8003c86 <create_chain+0x122>
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295
 8003c84:	e000      	b.n	8003c88 <create_chain+0x124>
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003c8a:	69fb      	ldr	r3, [r7, #28]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	3304      	adds	r3, #4
 8003caa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	0a5b      	lsrs	r3, r3, #9
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	8952      	ldrh	r2, [r2, #10]
 8003cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1d1a      	adds	r2, r3, #4
 8003cbe:	613a      	str	r2, [r7, #16]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <clmt_clust+0x3a>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e010      	b.n	8003cf0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d307      	bcc.n	8003ce6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003ce4:	e7e9      	b.n	8003cba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003ce6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d12:	d204      	bcs.n	8003d1e <dir_sdi+0x22>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e063      	b.n	8003dea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <dir_sdi+0x46>
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d902      	bls.n	8003d42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10c      	bne.n	8003d62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	8912      	ldrh	r2, [r2, #8]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d301      	bcc.n	8003d58 <dir_sdi+0x5c>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e048      	b.n	8003dea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	61da      	str	r2, [r3, #28]
 8003d60:	e029      	b.n	8003db6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	895b      	ldrh	r3, [r3, #10]
 8003d66:	025b      	lsls	r3, r3, #9
 8003d68:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003d6a:	e019      	b.n	8003da0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fd00 	bl	8003776 <get_fat>
 8003d76:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d101      	bne.n	8003d84 <dir_sdi+0x88>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d904      	bls.n	8003d94 <dir_sdi+0x98>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d301      	bcc.n	8003d98 <dir_sdi+0x9c>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e028      	b.n	8003dea <dir_sdi+0xee>
			ofs -= csz;
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d2e1      	bcs.n	8003d6c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	6938      	ldr	r0, [r7, #16]
 8003dac:	f7ff fcc4 	bl	8003738 <clust2sect>
 8003db0:	4602      	mov	r2, r0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <dir_sdi+0xcc>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e010      	b.n	8003dea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	0a5b      	lsrs	r3, r3, #9
 8003dd0:	441a      	add	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	441a      	add	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	3320      	adds	r3, #32
 8003e08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <dir_next+0x28>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e18:	d301      	bcc.n	8003e1e <dir_next+0x2c>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e0aa      	b.n	8003f74 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 8098 	bne.w	8003f5a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	8912      	ldrh	r2, [r2, #8]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	f0c0 8088 	bcc.w	8003f5a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61da      	str	r2, [r3, #28]
 8003e50:	2304      	movs	r3, #4
 8003e52:	e08f      	b.n	8003f74 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	0a5b      	lsrs	r3, r3, #9
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	8952      	ldrh	r2, [r2, #10]
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d17a      	bne.n	8003f5a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7ff fc82 	bl	8003776 <get_fat>
 8003e72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d801      	bhi.n	8003e7e <dir_next+0x8c>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e07a      	b.n	8003f74 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d101      	bne.n	8003e8a <dir_next+0x98>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e074      	b.n	8003f74 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d358      	bcc.n	8003f46 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	61da      	str	r2, [r3, #28]
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e067      	b.n	8003f74 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7ff fe59 	bl	8003b64 <create_chain>
 8003eb2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <dir_next+0xcc>
 8003eba:	2307      	movs	r3, #7
 8003ebc:	e05a      	b.n	8003f74 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <dir_next+0xd6>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e055      	b.n	8003f74 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d101      	bne.n	8003ed4 <dir_next+0xe2>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e04f      	b.n	8003f74 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff fb4f 	bl	8003578 <sync_window>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <dir_next+0xf2>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e047      	b.n	8003f74 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3330      	adds	r3, #48	; 0x30
 8003ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff f979 	bl	80031e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	6979      	ldr	r1, [r7, #20]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fc1c 	bl	8003738 <clust2sect>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f06:	e012      	b.n	8003f2e <dir_next+0x13c>
						fs->wflag = 1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fb32 	bl	8003578 <sync_window>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <dir_next+0x12c>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02a      	b.n	8003f74 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3301      	adds	r3, #1
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	895b      	ldrh	r3, [r3, #10]
 8003f32:	461a      	mov	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d3e6      	bcc.n	8003f08 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad2      	subs	r2, r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003f4c:	6979      	ldr	r1, [r7, #20]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff fbf2 	bl	8003738 <clust2sect>
 8003f54:	4602      	mov	r2, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff feb4 	bl	8003cfc <dir_sdi>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d12b      	bne.n	8003ff6 <dir_alloc+0x7a>
		n = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fb29 	bl	8003600 <move_window>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d11d      	bne.n	8003ff4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2be5      	cmp	r3, #229	; 0xe5
 8003fc0:	d004      	beq.n	8003fcc <dir_alloc+0x50>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d102      	bne.n	8003fe0 <dir_alloc+0x64>
 8003fda:	e00c      	b.n	8003ff6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff05 	bl	8003df2 <dir_next>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0d7      	beq.n	8003fa2 <dir_alloc+0x26>
 8003ff2:	e000      	b.n	8003ff6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003ff4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d101      	bne.n	8004000 <dir_alloc+0x84>
 8003ffc:	2307      	movs	r3, #7
 8003ffe:	75fb      	strb	r3, [r7, #23]
	return res;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	331a      	adds	r3, #26
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff f841 	bl	80030a0 <ld_word>
 800401e:	4603      	mov	r3, r0
 8004020:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d109      	bne.n	800403e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff f836 	bl	80030a0 <ld_word>
 8004034:	4603      	mov	r3, r0
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800403e:	68fb      	ldr	r3, [r7, #12]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	331a      	adds	r3, #26
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	b292      	uxth	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f859 	bl	8003116 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d109      	bne.n	8004080 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f103 0214 	add.w	r2, r3, #20
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	b29b      	uxth	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f7ff f84b 	bl	8003116 <st_word>
	}
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004096:	2100      	movs	r1, #0
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fe2f 	bl	8003cfc <dir_sdi>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <dir_find+0x24>
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	e03e      	b.n	800412a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	4619      	mov	r1, r3
 80040b2:	6938      	ldr	r0, [r7, #16]
 80040b4:	f7ff faa4 	bl	8003600 <move_window>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d12f      	bne.n	8004122 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <dir_find+0x4e>
 80040d0:	2304      	movs	r3, #4
 80040d2:	75fb      	strb	r3, [r7, #23]
 80040d4:	e028      	b.n	8004128 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	330b      	adds	r3, #11
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	330b      	adds	r3, #11
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <dir_find+0x86>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a18      	ldr	r0, [r3, #32]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	220b      	movs	r2, #11
 8004102:	4619      	mov	r1, r3
 8004104:	f7ff f88a 	bl	800321c <mem_cmp>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800410e:	2100      	movs	r1, #0
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fe6e 	bl	8003df2 <dir_next>
 8004116:	4603      	mov	r3, r0
 8004118:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0c5      	beq.n	80040ac <dir_find+0x24>
 8004120:	e002      	b.n	8004128 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004126:	bf00      	nop

	return res;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004140:	2101      	movs	r1, #1
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff1a 	bl	8003f7c <dir_alloc>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11c      	bne.n	800418c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4619      	mov	r1, r3
 8004158:	68b8      	ldr	r0, [r7, #8]
 800415a:	f7ff fa51 	bl	8003600 <move_window>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d111      	bne.n	800418c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	2220      	movs	r2, #32
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff f838 	bl	80031e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a18      	ldr	r0, [r3, #32]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	; 0x24
 800417e:	220b      	movs	r2, #11
 8004180:	4619      	mov	r1, r3
 8004182:	f7ff f80f 	bl	80031a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2201      	movs	r2, #1
 800418a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80041ae:	220b      	movs	r2, #11
 80041b0:	2120      	movs	r1, #32
 80041b2:	68b8      	ldr	r0, [r7, #8]
 80041b4:	f7ff f817 	bl	80031e6 <mem_set>
	si = i = 0; ni = 8;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	2308      	movs	r3, #8
 80041c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80041d2:	7efb      	ldrb	r3, [r7, #27]
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d94e      	bls.n	8004276 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80041d8:	7efb      	ldrb	r3, [r7, #27]
 80041da:	2b2f      	cmp	r3, #47	; 0x2f
 80041dc:	d006      	beq.n	80041ec <create_name+0x54>
 80041de:	7efb      	ldrb	r3, [r7, #27]
 80041e0:	2b5c      	cmp	r3, #92	; 0x5c
 80041e2:	d110      	bne.n	8004206 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80041e4:	e002      	b.n	80041ec <create_name+0x54>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3301      	adds	r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b2f      	cmp	r3, #47	; 0x2f
 80041f6:	d0f6      	beq.n	80041e6 <create_name+0x4e>
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b5c      	cmp	r3, #92	; 0x5c
 8004202:	d0f0      	beq.n	80041e6 <create_name+0x4e>
			break;
 8004204:	e038      	b.n	8004278 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004206:	7efb      	ldrb	r3, [r7, #27]
 8004208:	2b2e      	cmp	r3, #46	; 0x2e
 800420a:	d003      	beq.n	8004214 <create_name+0x7c>
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	d30c      	bcc.n	800422e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b0b      	cmp	r3, #11
 8004218:	d002      	beq.n	8004220 <create_name+0x88>
 800421a:	7efb      	ldrb	r3, [r7, #27]
 800421c:	2b2e      	cmp	r3, #46	; 0x2e
 800421e:	d001      	beq.n	8004224 <create_name+0x8c>
 8004220:	2306      	movs	r3, #6
 8004222:	e044      	b.n	80042ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004224:	2308      	movs	r3, #8
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	230b      	movs	r3, #11
 800422a:	617b      	str	r3, [r7, #20]
			continue;
 800422c:	e022      	b.n	8004274 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800422e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004232:	2b00      	cmp	r3, #0
 8004234:	da04      	bge.n	8004240 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004236:	7efb      	ldrb	r3, [r7, #27]
 8004238:	3b80      	subs	r3, #128	; 0x80
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <create_name+0x120>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004240:	7efb      	ldrb	r3, [r7, #27]
 8004242:	4619      	mov	r1, r3
 8004244:	481d      	ldr	r0, [pc, #116]	; (80042bc <create_name+0x124>)
 8004246:	f7ff f810 	bl	800326a <chk_chr>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <create_name+0xbc>
 8004250:	2306      	movs	r3, #6
 8004252:	e02c      	b.n	80042ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004254:	7efb      	ldrb	r3, [r7, #27]
 8004256:	2b60      	cmp	r3, #96	; 0x60
 8004258:	d905      	bls.n	8004266 <create_name+0xce>
 800425a:	7efb      	ldrb	r3, [r7, #27]
 800425c:	2b7a      	cmp	r3, #122	; 0x7a
 800425e:	d802      	bhi.n	8004266 <create_name+0xce>
 8004260:	7efb      	ldrb	r3, [r7, #27]
 8004262:	3b20      	subs	r3, #32
 8004264:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	613a      	str	r2, [r7, #16]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4413      	add	r3, r2
 8004270:	7efa      	ldrb	r2, [r7, #27]
 8004272:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004274:	e7a6      	b.n	80041c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004276:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	441a      	add	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <create_name+0xf4>
 8004288:	2306      	movs	r3, #6
 800428a:	e010      	b.n	80042ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2be5      	cmp	r3, #229	; 0xe5
 8004292:	d102      	bne.n	800429a <create_name+0x102>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2205      	movs	r2, #5
 8004298:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800429a:	7efb      	ldrb	r3, [r7, #27]
 800429c:	2b20      	cmp	r3, #32
 800429e:	d801      	bhi.n	80042a4 <create_name+0x10c>
 80042a0:	2204      	movs	r2, #4
 80042a2:	e000      	b.n	80042a6 <create_name+0x10e>
 80042a4:	2200      	movs	r2, #0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	330b      	adds	r3, #11
 80042aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80042ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	0800585c 	.word	0x0800585c
 80042bc:	080057d8 	.word	0x080057d8

080042c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80042d4:	e002      	b.n	80042dc <follow_path+0x1c>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b2f      	cmp	r3, #47	; 0x2f
 80042e2:	d0f8      	beq.n	80042d6 <follow_path+0x16>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b5c      	cmp	r3, #92	; 0x5c
 80042ea:	d0f4      	beq.n	80042d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b1f      	cmp	r3, #31
 80042f8:	d80a      	bhi.n	8004310 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004302:	2100      	movs	r1, #0
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fcf9 	bl	8003cfc <dir_sdi>
 800430a:	4603      	mov	r3, r0
 800430c:	75fb      	strb	r3, [r7, #23]
 800430e:	e043      	b.n	8004398 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004310:	463b      	mov	r3, r7
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff3f 	bl	8004198 <create_name>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d134      	bne.n	800438e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff feaf 	bl	8004088 <dir_find>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004334:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d127      	bne.n	8004392 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d122      	bne.n	8004392 <follow_path+0xd2>
 800434c:	2305      	movs	r3, #5
 800434e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004350:	e01f      	b.n	8004392 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004352:	7afb      	ldrb	r3, [r7, #11]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d11c      	bne.n	8004396 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	799b      	ldrb	r3, [r3, #6]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004368:	2305      	movs	r3, #5
 800436a:	75fb      	strb	r3, [r7, #23]
 800436c:	e014      	b.n	8004398 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437c:	4413      	add	r3, r2
 800437e:	4619      	mov	r1, r3
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff fe42 	bl	800400a <ld_clust>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800438c:	e7c0      	b.n	8004310 <follow_path+0x50>
			if (res != FR_OK) break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <follow_path+0xd8>
				break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004396:	bf00      	nop
			}
		}
	}

	return res;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d031      	beq.n	800441c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e002      	b.n	80043c6 <get_ldnumber+0x24>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d903      	bls.n	80043d6 <get_ldnumber+0x34>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b3a      	cmp	r3, #58	; 0x3a
 80043d4:	d1f4      	bne.n	80043c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b3a      	cmp	r3, #58	; 0x3a
 80043dc:	d11c      	bne.n	8004418 <get_ldnumber+0x76>
			tp = *path;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	60fa      	str	r2, [r7, #12]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	3b30      	subs	r3, #48	; 0x30
 80043ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b09      	cmp	r3, #9
 80043f4:	d80e      	bhi.n	8004414 <get_ldnumber+0x72>
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10a      	bne.n	8004414 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d107      	bne.n	8004414 <get_ldnumber+0x72>
					vol = (int)i;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3301      	adds	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	e002      	b.n	800441e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800441c:	693b      	ldr	r3, [r7, #16]
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	70da      	strb	r2, [r3, #3]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f04f 32ff 	mov.w	r2, #4294967295
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff f8da 	bl	8003600 <move_window>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <check_fs+0x2a>
 8004452:	2304      	movs	r3, #4
 8004454:	e038      	b.n	80044c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3330      	adds	r3, #48	; 0x30
 800445a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fe1e 	bl	80030a0 <ld_word>
 8004464:	4603      	mov	r3, r0
 8004466:	461a      	mov	r2, r3
 8004468:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <check_fs+0x48>
 8004470:	2303      	movs	r3, #3
 8004472:	e029      	b.n	80044c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800447a:	2be9      	cmp	r3, #233	; 0xe9
 800447c:	d009      	beq.n	8004492 <check_fs+0x66>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004484:	2beb      	cmp	r3, #235	; 0xeb
 8004486:	d11e      	bne.n	80044c6 <check_fs+0x9a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800448e:	2b90      	cmp	r3, #144	; 0x90
 8004490:	d119      	bne.n	80044c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3330      	adds	r3, #48	; 0x30
 8004496:	3336      	adds	r3, #54	; 0x36
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe fe19 	bl	80030d0 <ld_dword>
 800449e:	4603      	mov	r3, r0
 80044a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <check_fs+0xa4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <check_fs+0x82>
 80044aa:	2300      	movs	r3, #0
 80044ac:	e00c      	b.n	80044c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3330      	adds	r3, #48	; 0x30
 80044b2:	3352      	adds	r3, #82	; 0x52
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fe0b 	bl	80030d0 <ld_dword>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <check_fs+0xa8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <check_fs+0x9a>
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80044c6:	2302      	movs	r3, #2
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	00544146 	.word	0x00544146
 80044d4:	33544146 	.word	0x33544146

080044d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b096      	sub	sp, #88	; 0x58
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff ff58 	bl	80043a2 <get_ldnumber>
 80044f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80044f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da01      	bge.n	80044fe <find_volume+0x26>
 80044fa:	230b      	movs	r3, #11
 80044fc:	e22d      	b.n	800495a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80044fe:	4aa1      	ldr	r2, [pc, #644]	; (8004784 <find_volume+0x2ac>)
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <find_volume+0x3a>
 800450e:	230c      	movs	r3, #12
 8004510:	e223      	b.n	800495a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004516:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01a      	beq.n	800455e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fd19 	bl	8002f64 <disk_status>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <find_volume+0x82>
 800454a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004556:	230a      	movs	r3, #10
 8004558:	e1ff      	b.n	800495a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800455a:	2300      	movs	r3, #0
 800455c:	e1fd      	b.n	800495a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	b2da      	uxtb	r2, r3
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fd11 	bl	8002f98 <disk_initialize>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800457c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004588:	2303      	movs	r3, #3
 800458a:	e1e6      	b.n	800495a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <find_volume+0xca>
 8004592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800459e:	230a      	movs	r3, #10
 80045a0:	e1db      	b.n	800495a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80045a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045aa:	f7ff ff3f 	bl	800442c <check_fs>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80045b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d149      	bne.n	8004650 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80045bc:	2300      	movs	r3, #0
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
 80045c0:	e01e      	b.n	8004600 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80045d0:	4413      	add	r3, r2
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	3304      	adds	r3, #4
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <find_volume+0x114>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	3308      	adds	r3, #8
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe fd74 	bl	80030d0 <ld_dword>
 80045e8:	4602      	mov	r2, r0
 80045ea:	e000      	b.n	80045ee <find_volume+0x116>
 80045ec:	2200      	movs	r2, #0
 80045ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3358      	adds	r3, #88	; 0x58
 80045f4:	443b      	add	r3, r7
 80045f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80045fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fc:	3301      	adds	r3, #1
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004602:	2b03      	cmp	r3, #3
 8004604:	d9dd      	bls.n	80045c2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004606:	2300      	movs	r3, #0
 8004608:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800460a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <find_volume+0x13e>
 8004610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004612:	3b01      	subs	r3, #1
 8004614:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	3358      	adds	r3, #88	; 0x58
 800461c:	443b      	add	r3, r7
 800461e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <find_volume+0x15e>
 800462a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800462c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800462e:	f7ff fefd 	bl	800442c <check_fs>
 8004632:	4603      	mov	r3, r0
 8004634:	e000      	b.n	8004638 <find_volume+0x160>
 8004636:	2303      	movs	r3, #3
 8004638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800463c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004640:	2b01      	cmp	r3, #1
 8004642:	d905      	bls.n	8004650 <find_volume+0x178>
 8004644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004646:	3301      	adds	r3, #1
 8004648:	643b      	str	r3, [r7, #64]	; 0x40
 800464a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464c:	2b03      	cmp	r3, #3
 800464e:	d9e2      	bls.n	8004616 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004654:	2b04      	cmp	r3, #4
 8004656:	d101      	bne.n	800465c <find_volume+0x184>
 8004658:	2301      	movs	r3, #1
 800465a:	e17e      	b.n	800495a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800465c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004660:	2b01      	cmp	r3, #1
 8004662:	d901      	bls.n	8004668 <find_volume+0x190>
 8004664:	230d      	movs	r3, #13
 8004666:	e178      	b.n	800495a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	3330      	adds	r3, #48	; 0x30
 800466c:	330b      	adds	r3, #11
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fd16 	bl	80030a0 <ld_word>
 8004674:	4603      	mov	r3, r0
 8004676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467a:	d001      	beq.n	8004680 <find_volume+0x1a8>
 800467c:	230d      	movs	r3, #13
 800467e:	e16c      	b.n	800495a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	3330      	adds	r3, #48	; 0x30
 8004684:	3316      	adds	r3, #22
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fd0a 	bl	80030a0 <ld_word>
 800468c:	4603      	mov	r3, r0
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <find_volume+0x1cc>
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	3330      	adds	r3, #48	; 0x30
 800469a:	3324      	adds	r3, #36	; 0x24
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fd17 	bl	80030d0 <ld_dword>
 80046a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	789b      	ldrb	r3, [r3, #2]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d005      	beq.n	80046c8 <find_volume+0x1f0>
 80046bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046be:	789b      	ldrb	r3, [r3, #2]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d001      	beq.n	80046c8 <find_volume+0x1f0>
 80046c4:	230d      	movs	r3, #13
 80046c6:	e148      	b.n	800495a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	789b      	ldrb	r3, [r3, #2]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b29a      	uxth	r2, r3
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	895b      	ldrh	r3, [r3, #10]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <find_volume+0x224>
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	895b      	ldrh	r3, [r3, #10]
 80046ee:	461a      	mov	r2, r3
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	895b      	ldrh	r3, [r3, #10]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <find_volume+0x228>
 80046fc:	230d      	movs	r3, #13
 80046fe:	e12c      	b.n	800495a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	3330      	adds	r3, #48	; 0x30
 8004704:	3311      	adds	r3, #17
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fcca 	bl	80030a0 <ld_word>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	891b      	ldrh	r3, [r3, #8]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <find_volume+0x24e>
 8004722:	230d      	movs	r3, #13
 8004724:	e119      	b.n	800495a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	3330      	adds	r3, #48	; 0x30
 800472a:	3313      	adds	r3, #19
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe fcb7 	bl	80030a0 <ld_word>
 8004732:	4603      	mov	r3, r0
 8004734:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <find_volume+0x272>
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	3330      	adds	r3, #48	; 0x30
 8004740:	3320      	adds	r3, #32
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fcc4 	bl	80030d0 <ld_dword>
 8004748:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	3330      	adds	r3, #48	; 0x30
 800474e:	330e      	adds	r3, #14
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fca5 	bl	80030a0 <ld_word>
 8004756:	4603      	mov	r3, r0
 8004758:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800475a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <find_volume+0x28c>
 8004760:	230d      	movs	r3, #13
 8004762:	e0fa      	b.n	800495a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004764:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004768:	4413      	add	r3, r2
 800476a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476c:	8912      	ldrh	r2, [r2, #8]
 800476e:	0912      	lsrs	r2, r2, #4
 8004770:	b292      	uxth	r2, r2
 8004772:	4413      	add	r3, r2
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	429a      	cmp	r2, r3
 800477c:	d204      	bcs.n	8004788 <find_volume+0x2b0>
 800477e:	230d      	movs	r3, #13
 8004780:	e0eb      	b.n	800495a <find_volume+0x482>
 8004782:	bf00      	nop
 8004784:	200000bc 	.word	0x200000bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004790:	8952      	ldrh	r2, [r2, #10]
 8004792:	fbb3 f3f2 	udiv	r3, r3, r2
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <find_volume+0x2ca>
 800479e:	230d      	movs	r3, #13
 80047a0:	e0db      	b.n	800495a <find_volume+0x482>
		fmt = FS_FAT32;
 80047a2:	2303      	movs	r3, #3
 80047a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d802      	bhi.n	80047b8 <find_volume+0x2e0>
 80047b2:	2302      	movs	r3, #2
 80047b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f640 72f5 	movw	r2, #4085	; 0xff5
 80047be:	4293      	cmp	r3, r2
 80047c0:	d802      	bhi.n	80047c8 <find_volume+0x2f0>
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	1c9a      	adds	r2, r3, #2
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047d4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80047d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047da:	441a      	add	r2, r3
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80047e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	441a      	add	r2, r3
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80047ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d11e      	bne.n	8004830 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	3330      	adds	r3, #48	; 0x30
 80047f6:	332a      	adds	r3, #42	; 0x2a
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe fc51 	bl	80030a0 <ld_word>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <find_volume+0x330>
 8004804:	230d      	movs	r3, #13
 8004806:	e0a8      	b.n	800495a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	891b      	ldrh	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <find_volume+0x33c>
 8004810:	230d      	movs	r3, #13
 8004812:	e0a2      	b.n	800495a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	3330      	adds	r3, #48	; 0x30
 8004818:	332c      	adds	r3, #44	; 0x2c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fc58 	bl	80030d0 <ld_dword>
 8004820:	4602      	mov	r2, r0
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
 800482e:	e01f      	b.n	8004870 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	891b      	ldrh	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <find_volume+0x364>
 8004838:	230d      	movs	r3, #13
 800483a:	e08e      	b.n	800495a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	441a      	add	r2, r3
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800484c:	2b02      	cmp	r3, #2
 800484e:	d103      	bne.n	8004858 <find_volume+0x380>
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	e00a      	b.n	800486e <find_volume+0x396>
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	085a      	lsrs	r2, r3, #1
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004876:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800487a:	0a5b      	lsrs	r3, r3, #9
 800487c:	429a      	cmp	r2, r3
 800487e:	d201      	bcs.n	8004884 <find_volume+0x3ac>
 8004880:	230d      	movs	r3, #13
 8004882:	e06a      	b.n	800495a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	f04f 32ff 	mov.w	r2, #4294967295
 800488a:	611a      	str	r2, [r3, #16]
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800489a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d149      	bne.n	8004936 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	3330      	adds	r3, #48	; 0x30
 80048a6:	3330      	adds	r3, #48	; 0x30
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe fbf9 	bl	80030a0 <ld_word>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d140      	bne.n	8004936 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80048b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b6:	3301      	adds	r3, #1
 80048b8:	4619      	mov	r1, r3
 80048ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048bc:	f7fe fea0 	bl	8003600 <move_window>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d137      	bne.n	8004936 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2200      	movs	r2, #0
 80048ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	3330      	adds	r3, #48	; 0x30
 80048d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe fbe3 	bl	80030a0 <ld_word>
 80048da:	4603      	mov	r3, r0
 80048dc:	461a      	mov	r2, r3
 80048de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d127      	bne.n	8004936 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	3330      	adds	r3, #48	; 0x30
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fbf0 	bl	80030d0 <ld_dword>
 80048f0:	4603      	mov	r3, r0
 80048f2:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <find_volume+0x48c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d11e      	bne.n	8004936 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	3330      	adds	r3, #48	; 0x30
 80048fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe fbe5 	bl	80030d0 <ld_dword>
 8004906:	4603      	mov	r3, r0
 8004908:	4a17      	ldr	r2, [pc, #92]	; (8004968 <find_volume+0x490>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d113      	bne.n	8004936 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	3330      	adds	r3, #48	; 0x30
 8004912:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fbda 	bl	80030d0 <ld_dword>
 800491c:	4602      	mov	r2, r0
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	3330      	adds	r3, #48	; 0x30
 8004926:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fbd0 	bl	80030d0 <ld_dword>
 8004930:	4602      	mov	r2, r0
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800493c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <find_volume+0x494>)
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <find_volume+0x494>)
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <find_volume+0x494>)
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004952:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004954:	f7fe fdec 	bl	8003530 <clear_lock>
#endif
	return FR_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3758      	adds	r7, #88	; 0x58
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	41615252 	.word	0x41615252
 8004968:	61417272 	.word	0x61417272
 800496c:	200000c0 	.word	0x200000c0

08004970 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800497a:	2309      	movs	r3, #9
 800497c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01c      	beq.n	80049be <validate+0x4e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d018      	beq.n	80049be <validate+0x4e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d013      	beq.n	80049be <validate+0x4e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	889a      	ldrh	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	88db      	ldrh	r3, [r3, #6]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d10c      	bne.n	80049be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fada 	bl	8002f64 <disk_status>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <validate+0x4e>
			res = FR_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <validate+0x5a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	e000      	b.n	80049cc <validate+0x5c>
 80049ca:	2300      	movs	r3, #0
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	6013      	str	r3, [r2, #0]
	return res;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80049ee:	f107 0310 	add.w	r3, r7, #16
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fcd5 	bl	80043a2 <get_ldnumber>
 80049f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da01      	bge.n	8004a04 <f_mount+0x28>
 8004a00:	230b      	movs	r3, #11
 8004a02:	e02b      	b.n	8004a5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <f_mount+0x88>)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004a14:	69b8      	ldr	r0, [r7, #24]
 8004a16:	f7fe fd8b 	bl	8003530 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	490d      	ldr	r1, [pc, #52]	; (8004a64 <f_mount+0x88>)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <f_mount+0x66>
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d001      	beq.n	8004a46 <f_mount+0x6a>
 8004a42:	2300      	movs	r3, #0
 8004a44:	e00a      	b.n	8004a5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004a46:	f107 010c 	add.w	r1, r7, #12
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fd41 	bl	80044d8 <find_volume>
 8004a56:	4603      	mov	r3, r0
 8004a58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200000bc 	.word	0x200000bc

08004a68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b098      	sub	sp, #96	; 0x60
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <f_open+0x18>
 8004a7c:	2309      	movs	r3, #9
 8004a7e:	e1ad      	b.n	8004ddc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004a88:	79fa      	ldrb	r2, [r7, #7]
 8004a8a:	f107 0110 	add.w	r1, r7, #16
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fd20 	bl	80044d8 <find_volume>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 8191 	bne.w	8004dca <f_open+0x362>
		dj.obj.fs = fs;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	f107 0314 	add.w	r3, r7, #20
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fc03 	bl	80042c0 <follow_path>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11a      	bne.n	8004afe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da03      	bge.n	8004ada <f_open+0x72>
				res = FR_INVALID_NAME;
 8004ad2:	2306      	movs	r3, #6
 8004ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ad8:	e011      	b.n	8004afe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fbd4 	bl	80032a0 <chk_lock>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	f003 031c 	and.w	r3, r3, #28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d07f      	beq.n	8004c08 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004b08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d10e      	bne.n	8004b36 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004b18:	f7fe fc1e 	bl	8003358 <enq_lock>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <f_open+0xc8>
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fb03 	bl	8004132 <dir_register>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	e000      	b.n	8004b32 <f_open+0xca>
 8004b30:	2312      	movs	r3, #18
 8004b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	f043 0308 	orr.w	r3, r3, #8
 8004b3c:	71fb      	strb	r3, [r7, #7]
 8004b3e:	e010      	b.n	8004b62 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004b40:	7ebb      	ldrb	r3, [r7, #26]
 8004b42:	f003 0311 	and.w	r3, r3, #17
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <f_open+0xea>
					res = FR_DENIED;
 8004b4a:	2307      	movs	r3, #7
 8004b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004b50:	e007      	b.n	8004b62 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <f_open+0xfa>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d168      	bne.n	8004c3c <f_open+0x1d4>
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d063      	beq.n	8004c3c <f_open+0x1d4>
				dw = GET_FATTIME();
 8004b74:	f7fd fcc0 	bl	80024f8 <get_fattime>
 8004b78:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	330e      	adds	r3, #14
 8004b7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fae3 	bl	800314c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	3316      	adds	r3, #22
 8004b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fadd 	bl	800314c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b94:	330b      	adds	r3, #11
 8004b96:	2220      	movs	r2, #32
 8004b98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fa32 	bl	800400a <ld_clust>
 8004ba6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bac:	2200      	movs	r2, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fa4a 	bl	8004048 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	331c      	adds	r3, #28
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fac6 	bl	800314c <st_dword>
					fs->wflag = 1;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d037      	beq.n	8004c3c <f_open+0x1d4>
						dw = fs->winsect;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe ff5d 	bl	8003a9a <remove_chain>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d126      	bne.n	8004c3c <f_open+0x1d4>
							res = move_window(fs, dw);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fd04 	bl	8003600 <move_window>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c02:	3a01      	subs	r2, #1
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e019      	b.n	8004c3c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d115      	bne.n	8004c3c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004c10:	7ebb      	ldrb	r3, [r7, #26]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004c20:	e00c      	b.n	8004c3c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <f_open+0x1d4>
 8004c2c:	7ebb      	ldrb	r3, [r7, #26]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <f_open+0x1d4>
						res = FR_DENIED;
 8004c36:	2307      	movs	r3, #7
 8004c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d128      	bne.n	8004c96 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe fb8d 	bl	800339c <inc_lock>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <f_open+0x22e>
 8004c90:	2302      	movs	r3, #2
 8004c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 8095 	bne.w	8004dca <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff f9af 	bl	800400a <ld_clust>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb4:	331c      	adds	r3, #28
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fa0a 	bl	80030d0 <ld_dword>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	88da      	ldrh	r2, [r3, #6]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	79fa      	ldrb	r2, [r7, #7]
 8004cda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3330      	adds	r3, #48	; 0x30
 8004cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fa74 	bl	80031e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d060      	beq.n	8004dca <f_open+0x362>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05c      	beq.n	8004dca <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	895b      	ldrh	r3, [r3, #10]
 8004d1c:	025b      	lsls	r3, r3, #9
 8004d1e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d2c:	e016      	b.n	8004d5c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fd1f 	bl	8003776 <get_fat>
 8004d38:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d802      	bhi.n	8004d46 <f_open+0x2de>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d102      	bne.n	8004d54 <f_open+0x2ec>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <f_open+0x304>
 8004d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d8e0      	bhi.n	8004d2e <f_open+0x2c6>
				}
				fp->clust = clst;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004d72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d127      	bne.n	8004dca <f_open+0x362>
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fcd5 	bl	8003738 <clust2sect>
 8004d8e:	6478      	str	r0, [r7, #68]	; 0x44
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <f_open+0x336>
						res = FR_INT_ERR;
 8004d96:	2302      	movs	r3, #2
 8004d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004d9c:	e015      	b.n	8004dca <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da0:	0a5a      	lsrs	r2, r3, #9
 8004da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	7858      	ldrb	r0, [r3, #1]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	2301      	movs	r3, #1
 8004dba:	f7fe f913 	bl	8002fe4 <disk_read>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <f_open+0x362>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <f_open+0x370>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3760      	adds	r7, #96	; 0x60
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	; 0x38
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f107 0214 	add.w	r2, r7, #20
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fdb3 	bl	8004970 <validate>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <f_read+0x44>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	7d5b      	ldrb	r3, [r3, #21]
 8004e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <f_read+0x4a>
 8004e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e2c:	e115      	b.n	800505a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	7d1b      	ldrb	r3, [r3, #20]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <f_read+0x5a>
 8004e3a:	2307      	movs	r3, #7
 8004e3c:	e10d      	b.n	800505a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f240 80fe 	bls.w	8005050 <f_read+0x26c>
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004e58:	e0fa      	b.n	8005050 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 80c6 	bne.w	8004ff4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	0a5b      	lsrs	r3, r3, #9
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	8952      	ldrh	r2, [r2, #10]
 8004e72:	3a01      	subs	r2, #1
 8004e74:	4013      	ands	r3, r2
 8004e76:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d12f      	bne.n	8004ede <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8c:	e013      	b.n	8004eb6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7fe fef9 	bl	8003c94 <clmt_clust>
 8004ea2:	6338      	str	r0, [r7, #48]	; 0x30
 8004ea4:	e007      	b.n	8004eb6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fe fc61 	bl	8003776 <get_fat>
 8004eb4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d804      	bhi.n	8004ec6 <f_read+0xe2>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	755a      	strb	r2, [r3, #21]
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0c9      	b.n	800505a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d104      	bne.n	8004ed8 <f_read+0xf4>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	755a      	strb	r2, [r3, #21]
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0c0      	b.n	800505a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fc26 	bl	8003738 <clust2sect>
 8004eec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <f_read+0x11a>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	755a      	strb	r2, [r3, #21]
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0ad      	b.n	800505a <f_read+0x276>
			sect += csect;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0a5b      	lsrs	r3, r3, #9
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d039      	beq.n	8004f86 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	4413      	add	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	8952      	ldrh	r2, [r2, #10]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d905      	bls.n	8004f2c <f_read+0x148>
					cc = fs->csize - csect;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	895b      	ldrh	r3, [r3, #10]
 8004f24:	461a      	mov	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	7858      	ldrb	r0, [r3, #1]
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f36:	f7fe f855 	bl	8002fe4 <disk_read>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <f_read+0x166>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	755a      	strb	r2, [r3, #21]
 8004f46:	2301      	movs	r3, #1
 8004f48:	e087      	b.n	800505a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	7d1b      	ldrb	r3, [r3, #20]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da14      	bge.n	8004f7e <f_read+0x19a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a1a      	ldr	r2, [r3, #32]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d90d      	bls.n	8004f7e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	025b      	lsls	r3, r3, #9
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	18d0      	adds	r0, r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3330      	adds	r3, #48	; 0x30
 8004f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fe f913 	bl	80031a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	025b      	lsls	r3, r3, #9
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004f84:	e050      	b.n	8005028 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d02e      	beq.n	8004fee <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	7d1b      	ldrb	r3, [r3, #20]
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da18      	bge.n	8004fcc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	7858      	ldrb	r0, [r3, #1]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f7fe f83b 	bl	8003024 <disk_write>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <f_read+0x1da>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	755a      	strb	r2, [r3, #21]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e04d      	b.n	800505a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	7d1b      	ldrb	r3, [r3, #20]
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	7858      	ldrb	r0, [r3, #1]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	f7fe f803 	bl	8002fe4 <disk_read>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <f_read+0x20a>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	755a      	strb	r2, [r3, #21]
 8004fea:	2301      	movs	r3, #1
 8004fec:	e035      	b.n	800505a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d901      	bls.n	800500e <f_read+0x22a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501c:	4413      	add	r3, r2
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	4619      	mov	r1, r3
 8005022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005024:	f7fe f8be 	bl	80031a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	4413      	add	r3, r2
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	441a      	add	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	619a      	str	r2, [r3, #24]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	441a      	add	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f47f af01 	bne.w	8004e5a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3738      	adds	r7, #56	; 0x38
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b08c      	sub	sp, #48	; 0x30
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f107 0210 	add.w	r2, r7, #16
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fc74 	bl	8004970 <validate>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800508e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <f_write+0x44>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	7d5b      	ldrb	r3, [r3, #21]
 800509a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800509e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <f_write+0x4a>
 80050a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050aa:	e14b      	b.n	8005344 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	7d1b      	ldrb	r3, [r3, #20]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <f_write+0x5a>
 80050b8:	2307      	movs	r3, #7
 80050ba:	e143      	b.n	8005344 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	441a      	add	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f080 812d 	bcs.w	8005328 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80050d6:	e127      	b.n	8005328 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f040 80e3 	bne.w	80052ac <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	0a5b      	lsrs	r3, r3, #9
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	8952      	ldrh	r2, [r2, #10]
 80050f0:	3a01      	subs	r2, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d143      	bne.n	8005184 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10c      	bne.n	800511e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11a      	bne.n	8005146 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fd25 	bl	8003b64 <create_chain>
 800511a:	62b8      	str	r0, [r7, #40]	; 0x28
 800511c:	e013      	b.n	8005146 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	4619      	mov	r1, r3
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7fe fdb1 	bl	8003c94 <clmt_clust>
 8005132:	62b8      	str	r0, [r7, #40]	; 0x28
 8005134:	e007      	b.n	8005146 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fe fd10 	bl	8003b64 <create_chain>
 8005144:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80f2 	beq.w	8005332 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	2b01      	cmp	r3, #1
 8005152:	d104      	bne.n	800515e <f_write+0xfc>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2202      	movs	r2, #2
 8005158:	755a      	strb	r2, [r3, #21]
 800515a:	2302      	movs	r3, #2
 800515c:	e0f2      	b.n	8005344 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d104      	bne.n	8005170 <f_write+0x10e>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	755a      	strb	r2, [r3, #21]
 800516c:	2301      	movs	r3, #1
 800516e:	e0e9      	b.n	8005344 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005174:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <f_write+0x122>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005182:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	7d1b      	ldrb	r3, [r3, #20]
 8005188:	b25b      	sxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	da18      	bge.n	80051c0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	7858      	ldrb	r0, [r3, #1]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	2301      	movs	r3, #1
 800519e:	f7fd ff41 	bl	8003024 <disk_write>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <f_write+0x150>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	755a      	strb	r2, [r3, #21]
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0c8      	b.n	8005344 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	7d1b      	ldrb	r3, [r3, #20]
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fe fab5 	bl	8003738 <clust2sect>
 80051ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <f_write+0x17e>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2202      	movs	r2, #2
 80051da:	755a      	strb	r2, [r3, #21]
 80051dc:	2302      	movs	r3, #2
 80051de:	e0b1      	b.n	8005344 <f_write+0x2e2>
			sect += csect;
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0a5b      	lsrs	r3, r3, #9
 80051ec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d03c      	beq.n	800526e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4413      	add	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	8952      	ldrh	r2, [r2, #10]
 80051fe:	4293      	cmp	r3, r2
 8005200:	d905      	bls.n	800520e <f_write+0x1ac>
					cc = fs->csize - csect;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	895b      	ldrh	r3, [r3, #10]
 8005206:	461a      	mov	r2, r3
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	7858      	ldrb	r0, [r3, #1]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	69f9      	ldr	r1, [r7, #28]
 8005218:	f7fd ff04 	bl	8003024 <disk_write>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <f_write+0x1ca>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	755a      	strb	r2, [r3, #21]
 8005228:	2301      	movs	r3, #1
 800522a:	e08b      	b.n	8005344 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	429a      	cmp	r2, r3
 8005238:	d915      	bls.n	8005266 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	025b      	lsls	r3, r3, #9
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005252:	4619      	mov	r1, r3
 8005254:	f7fd ffa6 	bl	80031a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	7d1b      	ldrb	r3, [r3, #20]
 800525c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	025b      	lsls	r3, r3, #9
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800526c:	e03f      	b.n	80052ee <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	429a      	cmp	r2, r3
 8005276:	d016      	beq.n	80052a6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005280:	429a      	cmp	r2, r3
 8005282:	d210      	bcs.n	80052a6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	7858      	ldrb	r0, [r3, #1]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800528e:	2301      	movs	r3, #1
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	f7fd fea7 	bl	8002fe4 <disk_read>
 8005296:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	755a      	strb	r2, [r3, #21]
 80052a2:	2301      	movs	r3, #1
 80052a4:	e04e      	b.n	8005344 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d901      	bls.n	80052c6 <f_write+0x264>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d4:	4413      	add	r3, r2
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd ff62 	bl	80031a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	7d1b      	ldrb	r3, [r3, #20]
 80052e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	4413      	add	r3, r2
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	619a      	str	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	429a      	cmp	r2, r3
 800530c:	bf38      	it	cc
 800530e:	461a      	movcc	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	441a      	add	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f47f aed4 	bne.w	80050d8 <f_write+0x76>
 8005330:	e000      	b.n	8005334 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005332:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	7d1b      	ldrb	r3, [r3, #20]
 8005338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3730      	adds	r7, #48	; 0x30
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f107 0208 	add.w	r2, r7, #8
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fb07 	bl	8004970 <validate>
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d168      	bne.n	800543e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7d1b      	ldrb	r3, [r3, #20]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d062      	beq.n	800543e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7d1b      	ldrb	r3, [r3, #20]
 800537c:	b25b      	sxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	da15      	bge.n	80053ae <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	7858      	ldrb	r0, [r3, #1]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1a      	ldr	r2, [r3, #32]
 8005390:	2301      	movs	r3, #1
 8005392:	f7fd fe47 	bl	8003024 <disk_write>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <f_sync+0x54>
 800539c:	2301      	movs	r3, #1
 800539e:	e04f      	b.n	8005440 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	7d1b      	ldrb	r3, [r3, #20]
 80053a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80053ae:	f7fd f8a3 	bl	80024f8 <get_fattime>
 80053b2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f7fe f91f 	bl	8003600 <move_window>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d138      	bne.n	800543e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	330b      	adds	r3, #11
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	330b      	adds	r3, #11
 80053dc:	f042 0220 	orr.w	r2, r2, #32
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	461a      	mov	r2, r3
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	f7fe fe2a 	bl	8004048 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f103 021c 	add.w	r2, r3, #28
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fd fea3 	bl	800314c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3316      	adds	r3, #22
 800540a:	6939      	ldr	r1, [r7, #16]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fd fe9d 	bl	800314c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3312      	adds	r3, #18
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f7fd fe7c 	bl	8003116 <st_word>
					fs->wflag = 1;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2201      	movs	r2, #1
 8005422:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe f918 	bl	800365c <sync_fs>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7d1b      	ldrb	r3, [r3, #20]
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff7b 	bl	800534c <f_sync>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d118      	bne.n	8005492 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f107 0208 	add.w	r2, r7, #8
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fa81 	bl	8004970 <validate>
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10c      	bne.n	8005492 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe f81b 	bl	80034b8 <dec_lock>
 8005482:	4603      	mov	r3, r0
 8005484:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b092      	sub	sp, #72	; 0x48
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80054a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80054ac:	f107 030c 	add.w	r3, r7, #12
 80054b0:	2200      	movs	r2, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f810 	bl	80044d8 <find_volume>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80054be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f040 8099 	bne.w	80055fa <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80054c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	3b02      	subs	r3, #2
 80054d8:	429a      	cmp	r2, r3
 80054da:	d804      	bhi.n	80054e6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e089      	b.n	80055fa <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d128      	bne.n	8005544 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80054f2:	2302      	movs	r3, #2
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80054fa:	f107 0314 	add.w	r3, r7, #20
 80054fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe f938 	bl	8003776 <get_fat>
 8005506:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d103      	bne.n	8005518 <f_getfree+0x7c>
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005516:	e063      	b.n	80055e0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d103      	bne.n	8005526 <f_getfree+0x8a>
 800551e:	2302      	movs	r3, #2
 8005520:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005524:	e05c      	b.n	80055e0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <f_getfree+0x96>
 800552c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552e:	3301      	adds	r3, #1
 8005530:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	3301      	adds	r3, #1
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800553e:	429a      	cmp	r2, r3
 8005540:	d3db      	bcc.n	80054fa <f_getfree+0x5e>
 8005542:	e04d      	b.n	80055e0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
 8005554:	2300      	movs	r3, #0
 8005556:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555a:	2b00      	cmp	r3, #0
 800555c:	d113      	bne.n	8005586 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800555e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	63ba      	str	r2, [r7, #56]	; 0x38
 8005566:	4619      	mov	r1, r3
 8005568:	f7fe f84a 	bl	8003600 <move_window>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005572:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005576:	2b00      	cmp	r3, #0
 8005578:	d131      	bne.n	80055de <f_getfree+0x142>
							p = fs->win;
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	3330      	adds	r3, #48	; 0x30
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d10f      	bne.n	80055ae <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800558e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005590:	f7fd fd86 	bl	80030a0 <ld_word>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <f_getfree+0x104>
 800559a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559c:	3301      	adds	r3, #1
 800559e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	3302      	adds	r3, #2
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	3b02      	subs	r3, #2
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
 80055ac:	e010      	b.n	80055d0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80055ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b0:	f7fd fd8e 	bl	80030d0 <ld_dword>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <f_getfree+0x128>
 80055be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c0:	3301      	adds	r3, #1
 80055c2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	3304      	adds	r3, #4
 80055c8:	633b      	str	r3, [r7, #48]	; 0x30
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	3b04      	subs	r3, #4
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80055d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d2:	3b01      	subs	r3, #1
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1bd      	bne.n	8005558 <f_getfree+0xbc>
 80055dc:	e000      	b.n	80055e0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80055de:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	791a      	ldrb	r2, [r3, #4]
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80055fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3748      	adds	r7, #72	; 0x48
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b088      	sub	sp, #32
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800561a:	e01b      	b.n	8005654 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	f107 0114 	add.w	r1, r7, #20
 8005624:	2201      	movs	r2, #1
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fbdc 	bl	8004de4 <f_read>
		if (rc != 1) break;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d116      	bne.n	8005660 <f_gets+0x5a>
		c = s[0];
 8005632:	7d3b      	ldrb	r3, [r7, #20]
 8005634:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b0d      	cmp	r3, #13
 800563a:	d100      	bne.n	800563e <f_gets+0x38>
 800563c:	e00a      	b.n	8005654 <f_gets+0x4e>
		*p++ = c;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	61ba      	str	r2, [r7, #24]
 8005644:	7dfa      	ldrb	r2, [r7, #23]
 8005646:	701a      	strb	r2, [r3, #0]
		n++;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	3301      	adds	r3, #1
 800564c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b0a      	cmp	r3, #10
 8005652:	d007      	beq.n	8005664 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	429a      	cmp	r2, r3
 800565c:	dbde      	blt.n	800561c <f_gets+0x16>
 800565e:	e002      	b.n	8005666 <f_gets+0x60>
		if (rc != 1) break;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005664:	bf00      	nop
	}
	*p = 0;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <f_gets+0x70>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	e000      	b.n	8005678 <f_gets+0x72>
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005696:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 8005698:	7a5b      	ldrb	r3, [r3, #9]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d131      	bne.n	8005704 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056a2:	7a5b      	ldrb	r3, [r3, #9]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056b0:	7a5b      	ldrb	r3, [r3, #9]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	4a17      	ldr	r2, [pc, #92]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80056be:	4b15      	ldr	r3, [pc, #84]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056c0:	7a5b      	ldrb	r3, [r3, #9]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056c8:	4413      	add	r3, r2
 80056ca:	79fa      	ldrb	r2, [r7, #7]
 80056cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056d0:	7a5b      	ldrb	r3, [r3, #9]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	b2d1      	uxtb	r1, r2
 80056d8:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <FATFS_LinkDriverEx+0x94>)
 80056da:	7251      	strb	r1, [r2, #9]
 80056dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056de:	7dbb      	ldrb	r3, [r7, #22]
 80056e0:	3330      	adds	r3, #48	; 0x30
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3301      	adds	r3, #1
 80056ec:	223a      	movs	r2, #58	; 0x3a
 80056ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3302      	adds	r3, #2
 80056f4:	222f      	movs	r2, #47	; 0x2f
 80056f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3303      	adds	r3, #3
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
}
 8005706:	4618      	mov	r0, r3
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	200000e4 	.word	0x200000e4

08005718 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005722:	2200      	movs	r2, #0
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff ffaa 	bl	8005680 <FATFS_LinkDriverEx>
 800572c:	4603      	mov	r3, r0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <memset>:
 8005736:	4402      	add	r2, r0
 8005738:	4603      	mov	r3, r0
 800573a:	4293      	cmp	r3, r2
 800573c:	d100      	bne.n	8005740 <memset+0xa>
 800573e:	4770      	bx	lr
 8005740:	f803 1b01 	strb.w	r1, [r3], #1
 8005744:	e7f9      	b.n	800573a <memset+0x4>
	...

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4d0d      	ldr	r5, [pc, #52]	; (8005780 <__libc_init_array+0x38>)
 800574c:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	2600      	movs	r6, #0
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	4d0b      	ldr	r5, [pc, #44]	; (8005788 <__libc_init_array+0x40>)
 800575a:	4c0c      	ldr	r4, [pc, #48]	; (800578c <__libc_init_array+0x44>)
 800575c:	f000 f818 	bl	8005790 <_init>
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	2600      	movs	r6, #0
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	080058dc 	.word	0x080058dc
 8005784:	080058dc 	.word	0x080058dc
 8005788:	080058dc 	.word	0x080058dc
 800578c:	080058e0 	.word	0x080058e0

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
