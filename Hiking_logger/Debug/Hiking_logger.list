
Hiking_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d8  080045d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080045e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  08004648  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004648  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfdb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d52  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000825  00000000  00000000  0002f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029fef  00000000  00000000  000300d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d483  00000000  00000000  0005a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fef07  00000000  00000000  00067547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003100  00000000  00000000  00166450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00169550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000068 	.word	0x20000068
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004540 	.word	0x08004540

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000006c 	.word	0x2000006c
 80001f8:	08004540 	.word	0x08004540

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fbc1 	bl	8000c82 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f842 	bl	8000588 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f920 	bl	8000748 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000508:	f000 f886 	bl	8000618 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800050c:	f000 f8d0 	bl	80006b0 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <main+0x34>)
 8000516:	f000 fedd 	bl	80012d4 <HAL_GPIO_TogglePin>
	  printf("TEST\r\n");
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x38>)
 800051c:	f003 fc7c 	bl	8003e18 <puts>
	  HAL_Delay(500);
 8000520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000524:	f000 fc22 	bl	8000d6c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000528:	e7f2      	b.n	8000510 <main+0x18>
 800052a:	bf00      	nop
 800052c:	48000400 	.word	0x48000400
 8000530:	08004558 	.word	0x08004558

08000534 <__io_putchar>:
  }

}

int __io_putchar(int ch)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800053c:	1d39      	adds	r1, r7, #4
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2201      	movs	r2, #1
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <__io_putchar+0x20>)
 8000546:	f002 fbf3 	bl	8002d30 <HAL_UART_Transmit>
        return ch;
 800054a:	687b      	ldr	r3, [r7, #4]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000084 	.word	0x20000084

08000558 <__io_getchar>:
int __io_getchar(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
        uint8_t ch = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	71fb      	strb	r3, [r7, #7]
        __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <__io_getchar+0x2c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2208      	movs	r2, #8
 8000568:	621a      	str	r2, [r3, #32]
        HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800056a:	1df9      	adds	r1, r7, #7
 800056c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000570:	2201      	movs	r2, #1
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <__io_getchar+0x2c>)
 8000574:	f002 fc6b 	bl	8002e4e <HAL_UART_Receive>
        return ch;
 8000578:	79fb      	ldrb	r3, [r7, #7]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000084 	.word	0x20000084

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fd1e 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f000 fecb 	bl	8001348 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f98a 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005bc:	2310      	movs	r3, #16
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ff6b 	bl	80014b0 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005e0:	f000 f976 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fb70 	bl	8001ce4 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800060a:	f000 f961 	bl	80008d0 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3758      	adds	r7, #88	; 0x58
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 800061e:	4a23      	ldr	r2, [pc, #140]	; (80006ac <MX_LPUART1_UART_Init+0x94>)
 8000620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000660:	4811      	ldr	r0, [pc, #68]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000662:	f002 fb15 	bl	8002c90 <HAL_UART_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800066c:	f000 f930 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000670:	2100      	movs	r1, #0
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000674:	f003 fa02 	bl	8003a7c <HAL_UARTEx_SetTxFifoThreshold>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800067e:	f000 f927 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000686:	f003 fa37 	bl	8003af8 <HAL_UARTEx_SetRxFifoThreshold>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000690:	f000 f91e 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000696:	f003 f9b8 	bl	8003a0a <HAL_UARTEx_DisableFifoMode>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f916 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000084 	.word	0x20000084
 80006ac:	40008000 	.word	0x40008000

080006b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006b6:	4a23      	ldr	r2, [pc, #140]	; (8000744 <MX_USART3_UART_Init+0x94>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f8:	4811      	ldr	r0, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x90>)
 80006fa:	f002 fac9 	bl	8002c90 <HAL_UART_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000704:	f000 f8e4 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_USART3_UART_Init+0x90>)
 800070c:	f003 f9b6 	bl	8003a7c <HAL_UARTEx_SetTxFifoThreshold>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000716:	f000 f8db 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x90>)
 800071e:	f003 f9eb 	bl	8003af8 <HAL_UARTEx_SetRxFifoThreshold>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000728:	f000 f8d2 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_USART3_UART_Init+0x90>)
 800072e:	f003 f96c 	bl	8003a0a <HAL_UARTEx_DisableFifoMode>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000738:	f000 f8ca 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000118 	.word	0x20000118
 8000744:	40004800 	.word	0x40004800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a57      	ldr	r2, [pc, #348]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b55      	ldr	r3, [pc, #340]	; (80008c0 <MX_GPIO_Init+0x178>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b52      	ldr	r3, [pc, #328]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a51      	ldr	r2, [pc, #324]	; (80008c0 <MX_GPIO_Init+0x178>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b4f      	ldr	r3, [pc, #316]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a4b      	ldr	r2, [pc, #300]	; (80008c0 <MX_GPIO_Init+0x178>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b49      	ldr	r3, [pc, #292]	; (80008c0 <MX_GPIO_Init+0x178>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	4b46      	ldr	r3, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a45      	ldr	r2, [pc, #276]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a3f      	ldr	r2, [pc, #252]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80007d6:	f000 fe5b 	bl	8001490 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a38      	ldr	r2, [pc, #224]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <MX_GPIO_Init+0x178>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <MX_GPIO_Init+0x17c>)
 80007fa:	f000 fd53 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x180>)
 8000804:	f000 fd4e 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	482b      	ldr	r0, [pc, #172]	; (80008cc <MX_GPIO_Init+0x184>)
 8000820:	f000 fbae 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000824:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <MX_GPIO_Init+0x17c>)
 800083e:	f000 fb9f 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000842:	2320      	movs	r3, #32
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	481c      	ldr	r0, [pc, #112]	; (80008c8 <MX_GPIO_Init+0x180>)
 8000856:	f000 fb93 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4815      	ldr	r0, [pc, #84]	; (80008c8 <MX_GPIO_Init+0x180>)
 8000872:	f000 fb85 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000876:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000888:	230a      	movs	r3, #10
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fb73 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800089a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f000 fb65 	bl	8000f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	; 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48001800 	.word	0x48001800
 80008cc:	48000800 	.word	0x48000800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0b0      	sub	sp, #192	; 0xc0
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	2294      	movs	r2, #148	; 0x94
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fb47 	bl	8003fd8 <memset>
  if(huart->Instance==LPUART1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a43      	ldr	r2, [pc, #268]	; (8000a5c <HAL_UART_MspInit+0x138>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d13e      	bne.n	80009d2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000954:	2320      	movs	r3, #32
 8000956:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fc7d 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ffb0 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000974:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 800097e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000988:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 800098e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80009a0:	f000 fd76 	bl	8001490 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80009a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009be:	2308      	movs	r3, #8
 80009c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009c8:	4619      	mov	r1, r3
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <HAL_UART_MspInit+0x140>)
 80009cc:	f000 fad8 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d0:	e040      	b.n	8000a54 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <HAL_UART_MspInit+0x144>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13b      	bne.n	8000a54 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009dc:	2304      	movs	r3, #4
 80009de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fc39 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80009f4:	f7ff ff6c 	bl	80008d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 80009fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_UART_MspInit+0x13c>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a42:	2307      	movs	r3, #7
 8000a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <HAL_UART_MspInit+0x148>)
 8000a50:	f000 fa96 	bl	8000f80 <HAL_GPIO_Init>
}
 8000a54:	bf00      	nop
 8000a56:	37c0      	adds	r7, #192	; 0xc0
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40008000 	.word	0x40008000
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48001800 	.word	0x48001800
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	48000c00 	.word	0x48000c00

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f936 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad6:	f7ff fd3f 	bl	8000558 <__io_getchar>
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
  }

  return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd0b 	bl	8000534 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
  }
  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f003 fa50 	bl	8004074 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200a0000 	.word	0x200a0000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200001ac 	.word	0x200001ac
 8000c08:	20000300 	.word	0x20000300

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f003 fa0f 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fc49 	bl	80004f8 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c74:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 8000c78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c7c:	20000300 	.word	0x20000300

08000c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_IRQHandler>

08000c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f943 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f80e 	bl	8000cb4 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fe1a 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d023      	beq.n	8000d10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_InitTick+0x70>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f941 	bl	8000f66 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d809      	bhi.n	8000d04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f919 	bl	8000f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_InitTick+0x74>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e007      	b.n	8000d14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e004      	b.n	8000d14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e001      	b.n	8000d14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200001b0 	.word	0x200001b0

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200001b0 	.word	0x200001b0

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff47 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5c 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	e166      	b.n	800125e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8158 	beq.w	8001258 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x40>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d017      	beq.n	800105e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80b2 	beq.w	8001258 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b61      	ldr	r3, [pc, #388]	; (800127c <HAL_GPIO_Init+0x2fc>)
 80010f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f8:	4a60      	ldr	r2, [pc, #384]	; (800127c <HAL_GPIO_Init+0x2fc>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001100:	4b5e      	ldr	r3, [pc, #376]	; (800127c <HAL_GPIO_Init+0x2fc>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800110c:	4a5c      	ldr	r2, [pc, #368]	; (8001280 <HAL_GPIO_Init+0x300>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001136:	d02b      	beq.n	8001190 <HAL_GPIO_Init+0x210>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_GPIO_Init+0x304>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d025      	beq.n	800118c <HAL_GPIO_Init+0x20c>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a51      	ldr	r2, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x308>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d01f      	beq.n	8001188 <HAL_GPIO_Init+0x208>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a50      	ldr	r2, [pc, #320]	; (800128c <HAL_GPIO_Init+0x30c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d019      	beq.n	8001184 <HAL_GPIO_Init+0x204>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x310>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d013      	beq.n	8001180 <HAL_GPIO_Init+0x200>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_GPIO_Init+0x314>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1fc>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <HAL_GPIO_Init+0x318>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1f8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a4c      	ldr	r2, [pc, #304]	; (800129c <HAL_GPIO_Init+0x31c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1f4>
 8001170:	2307      	movs	r3, #7
 8001172:	e00e      	b.n	8001192 <HAL_GPIO_Init+0x212>
 8001174:	2308      	movs	r3, #8
 8001176:	e00c      	b.n	8001192 <HAL_GPIO_Init+0x212>
 8001178:	2306      	movs	r3, #6
 800117a:	e00a      	b.n	8001192 <HAL_GPIO_Init+0x212>
 800117c:	2305      	movs	r3, #5
 800117e:	e008      	b.n	8001192 <HAL_GPIO_Init+0x212>
 8001180:	2304      	movs	r3, #4
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x212>
 8001184:	2303      	movs	r3, #3
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x212>
 8001188:	2302      	movs	r3, #2
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x212>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x212>
 8001190:	2300      	movs	r3, #0
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a2:	4937      	ldr	r1, [pc, #220]	; (8001280 <HAL_GPIO_Init+0x300>)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_GPIO_Init+0x320>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d4:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <HAL_GPIO_Init+0x320>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <HAL_GPIO_Init+0x320>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011fe:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <HAL_GPIO_Init+0x320>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x320>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001228:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <HAL_GPIO_Init+0x320>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_GPIO_Init+0x320>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_GPIO_Init+0x320>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	f47f ae91 	bne.w	8000f90 <HAL_GPIO_Init+0x10>
  }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	48000c00 	.word	0x48000c00
 8001290:	48001000 	.word	0x48001000
 8001294:	48001400 	.word	0x48001400
 8001298:	48001800 	.word	0x48001800
 800129c:	48001c00 	.word	0x48001c00
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43d9      	mvns	r1, r3
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	400b      	ands	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_PWREx_GetVoltageRange+0x3c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	d102      	bne.n	8001320 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800131a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131e:	e00b      	b.n	8001338 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800132e:	d102      	bne.n	8001336 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001334:	e000      	b.n	8001338 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001336:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40007000 	.word	0x40007000

08001348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d141      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001362:	d131      	bne.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800136a:	4a46      	ldr	r2, [pc, #280]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137c:	4a41      	ldr	r2, [pc, #260]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2232      	movs	r2, #50	; 0x32
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a3f      	ldr	r2, [pc, #252]	; (800148c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139a:	e002      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3b01      	subs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ae:	d102      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f2      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c2:	d158      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e057      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ce:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013d8:	e04d      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e0:	d141      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d131      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2232      	movs	r2, #50	; 0x32
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001426:	e002      	b.n	800142e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d102      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d112      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e011      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001464:	e007      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001474:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40007000 	.word	0x40007000
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6053      	str	r3, [r2, #4]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000

080014b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f000 bc08 	b.w	8001cd4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c4:	4b96      	ldr	r3, [pc, #600]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ce:	4b94      	ldr	r3, [pc, #592]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80e4 	beq.w	80016ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <HAL_RCC_OscConfig+0x4c>
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	f040 808b 	bne.w	800160a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	f040 8087 	bne.w	800160a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014fc:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x64>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e3df      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1a      	ldr	r2, [r3, #32]
 8001518:	4b81      	ldr	r3, [pc, #516]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_RCC_OscConfig+0x7e>
 8001524:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800152c:	e005      	b.n	800153a <HAL_RCC_OscConfig+0x8a>
 800152e:	4b7c      	ldr	r3, [pc, #496]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800153a:	4293      	cmp	r3, r2
 800153c:	d223      	bcs.n	8001586 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fdcc 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e3c0      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001552:	4b73      	ldr	r3, [pc, #460]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a72      	ldr	r2, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b70      	ldr	r3, [pc, #448]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	496d      	ldr	r1, [pc, #436]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001570:	4b6b      	ldr	r3, [pc, #428]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	4968      	ldr	r1, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
 8001584:	e025      	b.n	80015d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001586:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a65      	ldr	r2, [pc, #404]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4960      	ldr	r1, [pc, #384]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a4:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	495b      	ldr	r1, [pc, #364]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fd8c 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e380      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d2:	f000 fcc1 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	4950      	ldr	r1, [pc, #320]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <HAL_RCC_OscConfig+0x278>)
 80015f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015f2:	4b4e      	ldr	r3, [pc, #312]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb5c 	bl	8000cb4 <HAL_InitTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d052      	beq.n	80016ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	e364      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d032      	beq.n	8001678 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a42      	ldr	r2, [pc, #264]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb99 	bl	8000d54 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001626:	f7ff fb95 	bl	8000d54 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e34d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a35      	ldr	r2, [pc, #212]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4930      	ldr	r1, [pc, #192]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	492b      	ldr	r1, [pc, #172]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
 8001676:	e01a      	b.n	80016ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001684:	f7ff fb66 	bl	8000d54 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800168c:	f7ff fb62 	bl	8000d54 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e31a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1dc>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d073      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x21c>
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	d10e      	bne.n	80016e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d10b      	bne.n	80016e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d063      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d15f      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e2f7      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d106      	bne.n	80016fc <HAL_RCC_OscConfig+0x24c>
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e025      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001704:	d114      	bne.n	8001730 <HAL_RCC_OscConfig+0x280>
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a02      	ldr	r2, [pc, #8]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e013      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
 8001720:	40021000 	.word	0x40021000
 8001724:	08004560 	.word	0x08004560
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004
 8001730:	4ba0      	ldr	r3, [pc, #640]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a9f      	ldr	r2, [pc, #636]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a9c      	ldr	r2, [pc, #624]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb00 	bl	8000d54 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fafc 	bl	8000d54 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e2b4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x2a8>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff faec 	bl	8000d54 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fae8 	bl	8000d54 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e2a0      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x2d0>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d060      	beq.n	8001870 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x310>
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d116      	bne.n	80017ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x328>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e27d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	4973      	ldr	r1, [pc, #460]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ec:	e040      	b.n	8001870 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d023      	beq.n	800183e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff faa7 	bl	8000d54 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff faa3 	bl	8000d54 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e25b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181c:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	495f      	ldr	r1, [pc, #380]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fa83 	bl	8000d54 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fa7f 	bl	8000d54 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e237      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d03c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01c      	beq.n	80018be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	4a4a      	ldr	r2, [pc, #296]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fa5e 	bl	8000d54 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fa5a 	bl	8000d54 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e212      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x3ec>
 80018bc:	e01b      	b.n	80018f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c4:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa41 	bl	8000d54 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff fa3d 	bl	8000d54 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1f5      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ef      	bne.n	80018d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80a6 	beq.w	8001a50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10d      	bne.n	8001930 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	6593      	str	r3, [r2, #88]	; 0x58
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192c:	2301      	movs	r3, #1
 800192e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x508>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d118      	bne.n	800196e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_RCC_OscConfig+0x508>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x508>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001948:	f7ff fa04 	bl	8000d54 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001950:	f7ff fa00 	bl	8000d54 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1b8      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_OscConfig+0x508>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_RCC_OscConfig+0x4d8>
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001986:	e029      	b.n	80019dc <HAL_RCC_OscConfig+0x52c>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b05      	cmp	r3, #5
 800198e:	d115      	bne.n	80019bc <HAL_RCC_OscConfig+0x50c>
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x52c>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40007000 	.word	0x40007000
 80019bc:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a9c      	ldr	r2, [pc, #624]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	4a98      	ldr	r2, [pc, #608]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d016      	beq.n	8001a12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff f9b6 	bl	8000d54 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff f9b2 	bl	8000d54 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e168      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ed      	beq.n	80019ec <HAL_RCC_OscConfig+0x53c>
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff f99f 	bl	8000d54 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f99b 	bl	8000d54 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e151      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a30:	4b80      	ldr	r3, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ed      	bne.n	8001a1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a3e:	7ffb      	ldrb	r3, [r7, #31]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d03c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6a:	4a72      	ldr	r2, [pc, #456]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f96e 	bl	8000d54 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7c:	f7ff f96a 	bl	8000d54 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e122      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a8e:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ef      	beq.n	8001a7c <HAL_RCC_OscConfig+0x5cc>
 8001a9c:	e01b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aa4:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff f951 	bl	8000d54 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab6:	f7ff f94d 	bl	8000d54 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e105      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ef      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80f9 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	f040 80cf 	bne.w	8001c88 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aea:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0203 	and.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d12c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d123      	bne.n	8001b58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d11b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d113      	bne.n	8001b58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d109      	bne.n	8001b58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	3b01      	subs	r3, #1
 8001b52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d071      	beq.n	8001c3c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d068      	beq.n	8001c30 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0ac      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b86:	f7ff f8e5 	bl	8000d54 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f8e1 	bl	8000d54 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e099      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	0552      	lsls	r2, r2, #21
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bda:	0852      	lsrs	r2, r2, #1
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0652      	lsls	r2, r2, #25
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001be6:	06d2      	lsls	r2, r2, #27
 8001be8:	430a      	orrs	r2, r1
 8001bea:	4912      	ldr	r1, [pc, #72]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c08:	f7ff f8a4 	bl	8000d54 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff f8a0 	bl	8000d54 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e058      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2e:	e050      	b.n	8001cd2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e04f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
 8001c34:	40021000 	.word	0x40021000
 8001c38:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d144      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c60:	f7ff f878 	bl	8000d54 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff f874 	bl	8000d54 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e02c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x7b8>
 8001c86:	e024      	b.n	8001cd2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d01f      	beq.n	8001cce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f85b 	bl	8000d54 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff f857 	bl	8000d54 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4905      	ldr	r1, [pc, #20]	; (8001cdc <HAL_RCC_OscConfig+0x82c>)
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x830>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
 8001ccc:	e001      	b.n	8001cd2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	feeefffc 	.word	0xfeeefffc

08001ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e11d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b90      	ldr	r3, [pc, #576]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 020f 	bic.w	r2, r3, #15
 8001d12:	498b      	ldr	r1, [pc, #556]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b89      	ldr	r3, [pc, #548]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e105      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d908      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	497b      	ldr	r1, [pc, #492]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d079      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d11e      	bne.n	8001dac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0dc      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d7e:	f000 fa09 	bl	8002194 <RCC_GetSysClockFreqFromPLLSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a70      	ldr	r2, [pc, #448]	; (8001f48 <HAL_RCC_ClockConfig+0x264>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d946      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d140      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d96:	4b6b      	ldr	r3, [pc, #428]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9e:	4a69      	ldr	r2, [pc, #420]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e035      	b.n	8001e18 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db4:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d115      	bne.n	8001dec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b9      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0ad      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ddc:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0a5      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001dec:	f000 f8b4 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a55      	ldr	r2, [pc, #340]	; (8001f48 <HAL_RCC_ClockConfig+0x264>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d90f      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001df8:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e04:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e18:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 0203 	bic.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4947      	ldr	r1, [pc, #284]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2a:	f7fe ff93 	bl	8000d54 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7fe ff8f 	bl	8000d54 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e077      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 020c 	and.w	r2, r3, #12
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d1eb      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e6a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d208      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	492b      	ldr	r1, [pc, #172]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d210      	bcs.n	8001eca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 020f 	bic.w	r2, r3, #15
 8001eb0:	4923      	ldr	r1, [pc, #140]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCC_ClockConfig+0x25c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e036      	b.n	8001f38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4918      	ldr	r1, [pc, #96]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4910      	ldr	r1, [pc, #64]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f08:	f000 f826 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_RCC_ClockConfig+0x260>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <HAL_RCC_ClockConfig+0x268>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x26c>)
 8001f26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fec1 	bl	8000cb4 <HAL_InitTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	04c4b400 	.word	0x04c4b400
 8001f4c:	08004560 	.word	0x08004560
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d134      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xac>
 8001ffc:	e005      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e002      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0e5b      	lsrs	r3, r3, #25
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	08004578 	.word	0x08004578
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08004570 	.word	0x08004570

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b8:	f7ff ffda 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08004570 	.word	0x08004570

080020e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f906 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a21      	ldr	r2, [pc, #132]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f8f6 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d10b      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d913      	bls.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2ba0      	cmp	r3, #160	; 0xa0
 800213c:	d902      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e00d      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e00a      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b7f      	cmp	r3, #127	; 0x7f
 800214e:	d902      	bls.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002150:	2302      	movs	r3, #2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e004      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b70      	cmp	r3, #112	; 0x70
 800215a:	d101      	bne.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 020f 	bic.w	r2, r3, #15
 8002168:	4909      	ldr	r1, [pc, #36]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40022000 	.word	0x40022000

08002194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d00b      	beq.n	80021c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d825      	bhi.n	80021fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d008      	beq.n	80021c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d11f      	bne.n	80021fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021be:	613b      	str	r3, [r7, #16]
    break;
 80021c0:	e01f      	b.n	8002202 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80021c4:	613b      	str	r3, [r7, #16]
    break;
 80021c6:	e01c      	b.n	8002202 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e005      	b.n	80021f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	613b      	str	r3, [r7, #16]
    break;
 80021fa:	e002      	b.n	8002202 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
    break;
 8002200:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	3301      	adds	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	fb03 f202 	mul.w	r2, r3, r2
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0e5b      	lsrs	r3, r3, #25
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	3301      	adds	r3, #1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002242:	683b      	ldr	r3, [r7, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000
 8002254:	00f42400 	.word	0x00f42400
 8002258:	007a1200 	.word	0x007a1200
 800225c:	08004578 	.word	0x08004578

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002268:	2300      	movs	r3, #0
 800226a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800226c:	2300      	movs	r3, #0
 800226e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002278:	2b00      	cmp	r3, #0
 800227a:	d040      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d02a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002284:	2b80      	cmp	r3, #128	; 0x80
 8002286:	d825      	bhi.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002288:	2b60      	cmp	r3, #96	; 0x60
 800228a:	d026      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800228c:	2b60      	cmp	r3, #96	; 0x60
 800228e:	d821      	bhi.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d006      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d81d      	bhi.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800229c:	2b20      	cmp	r3, #32
 800229e:	d010      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80022a0:	e018      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022a2:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a88      	ldr	r2, [pc, #544]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ae:	e015      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fb02 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c0:	e00c      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3320      	adds	r3, #32
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fbed 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d2:	e003      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	74fb      	strb	r3, [r7, #19]
      break;
 80022d8:	e000      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80022da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e2:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f0:	4975      	ldr	r1, [pc, #468]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80022f8:	e001      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d047      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d030      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d82a      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800231a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800231e:	d02a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002324:	d824      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232a:	d008      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800232c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002330:	d81e      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	d010      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800233c:	e018      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800233e:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a61      	ldr	r2, [pc, #388]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234a:	e015      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fab4 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800235c:	e00c      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3320      	adds	r3, #32
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fb9f 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800236e:	e003      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	74fb      	strb	r3, [r7, #19]
      break;
 8002374:	e000      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800237e:	4b52      	ldr	r3, [pc, #328]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	494e      	ldr	r1, [pc, #312]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002394:	e001      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 809f 	beq.w	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6593      	str	r3, [r2, #88]	; 0x58
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a3a      	ldr	r2, [pc, #232]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ea:	f7fe fcb3 	bl	8000d54 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f0:	e009      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe fcaf 	bl	8000d54 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d902      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	74fb      	strb	r3, [r7, #19]
        break;
 8002404:	e005      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ef      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d15b      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002422:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01f      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	d019      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002440:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002462:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d016      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fc6e 	bl	8000d54 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247a:	e00b      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fc6a 	bl	8000d54 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d902      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	74fb      	strb	r3, [r7, #19]
            break;
 8002492:	e006      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ec      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024c0:	e008      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	74bb      	strb	r3, [r7, #18]
 80024c6:	e005      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d4:	7c7b      	ldrb	r3, [r7, #17]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4ba0      	ldr	r3, [pc, #640]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	4a9f      	ldr	r2, [pc, #636]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f2:	4b9a      	ldr	r3, [pc, #616]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f023 0203 	bic.w	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	4996      	ldr	r1, [pc, #600]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002514:	4b91      	ldr	r3, [pc, #580]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 020c 	bic.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	498e      	ldr	r1, [pc, #568]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002536:	4b89      	ldr	r3, [pc, #548]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	4985      	ldr	r1, [pc, #532]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002558:	4b80      	ldr	r3, [pc, #512]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	497d      	ldr	r1, [pc, #500]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257a:	4b78      	ldr	r3, [pc, #480]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	4974      	ldr	r1, [pc, #464]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800259c:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	496c      	ldr	r1, [pc, #432]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025be:	4b67      	ldr	r3, [pc, #412]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025cc:	4963      	ldr	r1, [pc, #396]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e0:	4b5e      	ldr	r3, [pc, #376]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ee:	495b      	ldr	r1, [pc, #364]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002602:	4b56      	ldr	r3, [pc, #344]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	4952      	ldr	r1, [pc, #328]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	494a      	ldr	r1, [pc, #296]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002646:	4b45      	ldr	r3, [pc, #276]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	4941      	ldr	r1, [pc, #260]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002668:	4b3c      	ldr	r3, [pc, #240]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4939      	ldr	r1, [pc, #228]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d028      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	4930      	ldr	r1, [pc, #192]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a8:	d106      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026aa:	4b2c      	ldr	r3, [pc, #176]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b4:	60d3      	str	r3, [r2, #12]
 80026b6:	e011      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026c0:	d10c      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2101      	movs	r1, #1
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f8f9 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d04d      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f0:	d108      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002702:	e012      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002710:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002722:	490e      	ldr	r1, [pc, #56]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002732:	d106      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273e:	60d3      	str	r3, [r2, #12]
 8002740:	e020      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800274a:	d109      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a02      	ldr	r2, [pc, #8]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
 8002758:	e014      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f8a5 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d028      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002790:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279e:	4947      	ldr	r1, [pc, #284]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ae:	d106      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a41      	ldr	r2, [pc, #260]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ba:	60d3      	str	r3, [r2, #12]
 80027bc:	e011      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f876 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01e      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fe:	492f      	ldr	r1, [pc, #188]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f851 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800283a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800283e:	f023 0204 	bic.w	r2, r3, #4
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002848:	491c      	ldr	r1, [pc, #112]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002862:	f023 0218 	bic.w	r2, r3, #24
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	4913      	ldr	r1, [pc, #76]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	490a      	ldr	r1, [pc, #40]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028a2:	d105      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ce:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00e      	beq.n	80028f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028da:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d103      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
       ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d142      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e03f      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d018      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x72>
 8002900:	2b03      	cmp	r3, #3
 8002902:	d825      	bhi.n	8002950 <RCCEx_PLLSAI1_Config+0x90>
 8002904:	2b01      	cmp	r3, #1
 8002906:	d002      	beq.n	800290e <RCCEx_PLLSAI1_Config+0x4e>
 8002908:	2b02      	cmp	r3, #2
 800290a:	d009      	beq.n	8002920 <RCCEx_PLLSAI1_Config+0x60>
 800290c:	e020      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800290e:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291e:	e01a      	b.n	8002956 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002920:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d116      	bne.n	800295a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002930:	e013      	b.n	800295a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800293e:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800294e:	e006      	b.n	800295e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      break;
 8002954:	e004      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800295e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d108      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002966:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4949      	ldr	r1, [pc, #292]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 8086 	bne.w	8002a8c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002980:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a44      	ldr	r2, [pc, #272]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800298a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe f9e2 	bl	8000d54 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002992:	e009      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002994:	f7fe f9de 	bl	8000d54 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	73fb      	strb	r3, [r7, #15]
        break;
 80029a6:	e005      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ef      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d113      	bne.n	80029e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6892      	ldr	r2, [r2, #8]
 80029cc:	0211      	lsls	r1, r2, #8
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68d2      	ldr	r2, [r2, #12]
 80029d2:	06d2      	lsls	r2, r2, #27
 80029d4:	4311      	orrs	r1, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6852      	ldr	r2, [r2, #4]
 80029da:	3a01      	subs	r2, #1
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	430a      	orrs	r2, r1
 80029e0:	492d      	ldr	r1, [pc, #180]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
 80029e6:	e02d      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d115      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ee:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	0211      	lsls	r1, r2, #8
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6912      	ldr	r2, [r2, #16]
 8002a00:	0852      	lsrs	r2, r2, #1
 8002a02:	3a01      	subs	r2, #1
 8002a04:	0552      	lsls	r2, r2, #21
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6852      	ldr	r2, [r2, #4]
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4921      	ldr	r1, [pc, #132]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	610b      	str	r3, [r1, #16]
 8002a18:	e014      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	0211      	lsls	r1, r2, #8
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6952      	ldr	r2, [r2, #20]
 8002a2c:	0852      	lsrs	r2, r2, #1
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0652      	lsls	r2, r2, #25
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0112      	lsls	r2, r2, #4
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	4916      	ldr	r1, [pc, #88]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe f980 	bl	8000d54 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a56:	e009      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a58:	f7fe f97c 	bl	8000d54 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	73fb      	strb	r3, [r7, #15]
          break;
 8002a6a:	e005      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	4904      	ldr	r1, [pc, #16]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	07ff800f 	.word	0x07ff800f
 8002aa0:	ff9f800f 	.word	0xff9f800f
 8002aa4:	f9ff800f 	.word	0xf9ff800f

08002aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab6:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00e      	beq.n	8002ae0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0203 	and.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d103      	bne.n	8002ada <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d142      	bne.n	8002b60 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e03f      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d018      	beq.n	8002b1a <RCCEx_PLLSAI2_Config+0x72>
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d825      	bhi.n	8002b38 <RCCEx_PLLSAI2_Config+0x90>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d002      	beq.n	8002af6 <RCCEx_PLLSAI2_Config+0x4e>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d009      	beq.n	8002b08 <RCCEx_PLLSAI2_Config+0x60>
 8002af4:	e020      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11d      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e01a      	b.n	8002b3e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b08:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e013      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1a:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b36:	e006      	b.n	8002b46 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e004      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 0203 	bic.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4949      	ldr	r1, [pc, #292]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 8086 	bne.w	8002c74 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b68:	4b45      	ldr	r3, [pc, #276]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a44      	ldr	r2, [pc, #272]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe f8ee 	bl	8000d54 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b7a:	e009      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b7c:	f7fe f8ea 	bl	8000d54 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d902      	bls.n	8002b90 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b8e:	e005      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ef      	bne.n	8002b7c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d168      	bne.n	8002c74 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d113      	bne.n	8002bd0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	06d2      	lsls	r2, r2, #27
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6852      	ldr	r2, [r2, #4]
 8002bc2:	3a01      	subs	r2, #1
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	492d      	ldr	r1, [pc, #180]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	614b      	str	r3, [r1, #20]
 8002bce:	e02d      	b.n	8002c2c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d115      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6892      	ldr	r2, [r2, #8]
 8002be2:	0211      	lsls	r1, r2, #8
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6912      	ldr	r2, [r2, #16]
 8002be8:	0852      	lsrs	r2, r2, #1
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0552      	lsls	r2, r2, #21
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	4921      	ldr	r1, [pc, #132]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	614b      	str	r3, [r1, #20]
 8002c00:	e014      	b.n	8002c2c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c02:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	0211      	lsls	r1, r2, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6952      	ldr	r2, [r2, #20]
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0652      	lsls	r2, r2, #25
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	3a01      	subs	r2, #1
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	430a      	orrs	r2, r1
 8002c26:	4916      	ldr	r1, [pc, #88]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe f88c 	bl	8000d54 <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c3e:	e009      	b.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c40:	f7fe f888 	bl	8000d54 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d902      	bls.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	73fb      	strb	r3, [r7, #15]
          break;
 8002c52:	e005      	b.n	8002c60 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	4904      	ldr	r1, [pc, #16]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	07ff800f 	.word	0x07ff800f
 8002c88:	ff9f800f 	.word	0xff9f800f
 8002c8c:	f9ff800f 	.word	0xf9ff800f

08002c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e042      	b.n	8002d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fd fe35 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fc7c 	bl	80035d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f97d 	bl	8002fe0 <UART_SetConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01b      	b.n	8002d28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fcfb 	bl	800371c <UART_CheckIdleState>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d17c      	bne.n	8002e44 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Transmit+0x26>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e075      	b.n	8002e46 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6a:	f7fd fff3 	bl	8000d54 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x6c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da4:	e031      	b.n	8002e0a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fd5d 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e03e      	b.n	8002e46 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3302      	adds	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e008      	b.n	8002df8 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b292      	uxth	r2, r2
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1c7      	bne.n	8002da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2140      	movs	r1, #64	; 0x40
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fd25 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08a      	sub	sp, #40	; 0x28
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	f040 80b6 	bne.w	8002fd6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_UART_Receive+0x28>
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0ae      	b.n	8002fd8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2222      	movs	r2, #34	; 0x22
 8002e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e90:	f7fd ff60 	bl	8000d54 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	d10e      	bne.n	8002ece <HAL_UART_Receive+0x80>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_UART_Receive+0x76>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ec2:	e02d      	b.n	8002f20 <HAL_UART_Receive+0xd2>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	22ff      	movs	r2, #255	; 0xff
 8002ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ecc:	e028      	b.n	8002f20 <HAL_UART_Receive+0xd2>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_UART_Receive+0xa4>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Receive+0x9a>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ee6:	e01b      	b.n	8002f20 <HAL_UART_Receive+0xd2>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	227f      	movs	r2, #127	; 0x7f
 8002eec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002ef0:	e016      	b.n	8002f20 <HAL_UART_Receive+0xd2>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efa:	d10d      	bne.n	8002f18 <HAL_UART_Receive+0xca>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_UART_Receive+0xc0>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	227f      	movs	r2, #127	; 0x7f
 8002f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f0c:	e008      	b.n	8002f20 <HAL_UART_Receive+0xd2>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	223f      	movs	r2, #63	; 0x3f
 8002f12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Receive+0xd2>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002f26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f30:	d108      	bne.n	8002f44 <HAL_UART_Receive+0xf6>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e003      	b.n	8002f4c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f4c:	e037      	b.n	8002fbe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2120      	movs	r1, #32
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fc89 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e033      	b.n	8002fd8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10c      	bne.n	8002f90 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	8a7b      	ldrh	r3, [r7, #18]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e00d      	b.n	8002fac <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8a7b      	ldrh	r3, [r7, #18]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1c1      	bne.n	8002f4e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
  }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b08c      	sub	sp, #48	; 0x30
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	4313      	orrs	r3, r2
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4baa      	ldr	r3, [pc, #680]	; (80032b8 <UART_SetConfig+0x2d8>)
 8003010:	4013      	ands	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003018:	430b      	orrs	r3, r1
 800301a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a9f      	ldr	r2, [pc, #636]	; (80032bc <UART_SetConfig+0x2dc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003048:	4313      	orrs	r3, r2
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003056:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	f023 010f 	bic.w	r1, r3, #15
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a90      	ldr	r2, [pc, #576]	; (80032c0 <UART_SetConfig+0x2e0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d125      	bne.n	80030d0 <UART_SetConfig+0xf0>
 8003084:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <UART_SetConfig+0x2e4>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d81a      	bhi.n	80030c8 <UART_SetConfig+0xe8>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0xb8>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030c1 	.word	0x080030c1
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ae:	e116      	b.n	80032de <UART_SetConfig+0x2fe>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b6:	e112      	b.n	80032de <UART_SetConfig+0x2fe>
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030be:	e10e      	b.n	80032de <UART_SetConfig+0x2fe>
 80030c0:	2308      	movs	r3, #8
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c6:	e10a      	b.n	80032de <UART_SetConfig+0x2fe>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ce:	e106      	b.n	80032de <UART_SetConfig+0x2fe>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <UART_SetConfig+0x2e8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d138      	bne.n	800314c <UART_SetConfig+0x16c>
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <UART_SetConfig+0x2e4>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d82d      	bhi.n	8003144 <UART_SetConfig+0x164>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x110>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003125 	.word	0x08003125
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003145 	.word	0x08003145
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003135 	.word	0x08003135
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
 800310c:	08003145 	.word	0x08003145
 8003110:	0800312d 	.word	0x0800312d
 8003114:	08003145 	.word	0x08003145
 8003118:	08003145 	.word	0x08003145
 800311c:	08003145 	.word	0x08003145
 8003120:	0800313d 	.word	0x0800313d
 8003124:	2300      	movs	r3, #0
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312a:	e0d8      	b.n	80032de <UART_SetConfig+0x2fe>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003132:	e0d4      	b.n	80032de <UART_SetConfig+0x2fe>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313a:	e0d0      	b.n	80032de <UART_SetConfig+0x2fe>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003142:	e0cc      	b.n	80032de <UART_SetConfig+0x2fe>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314a:	e0c8      	b.n	80032de <UART_SetConfig+0x2fe>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5e      	ldr	r2, [pc, #376]	; (80032cc <UART_SetConfig+0x2ec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d125      	bne.n	80031a2 <UART_SetConfig+0x1c2>
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <UART_SetConfig+0x2e4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003160:	2b30      	cmp	r3, #48	; 0x30
 8003162:	d016      	beq.n	8003192 <UART_SetConfig+0x1b2>
 8003164:	2b30      	cmp	r3, #48	; 0x30
 8003166:	d818      	bhi.n	800319a <UART_SetConfig+0x1ba>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d00a      	beq.n	8003182 <UART_SetConfig+0x1a2>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d814      	bhi.n	800319a <UART_SetConfig+0x1ba>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <UART_SetConfig+0x19a>
 8003174:	2b10      	cmp	r3, #16
 8003176:	d008      	beq.n	800318a <UART_SetConfig+0x1aa>
 8003178:	e00f      	b.n	800319a <UART_SetConfig+0x1ba>
 800317a:	2300      	movs	r3, #0
 800317c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003180:	e0ad      	b.n	80032de <UART_SetConfig+0x2fe>
 8003182:	2302      	movs	r3, #2
 8003184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003188:	e0a9      	b.n	80032de <UART_SetConfig+0x2fe>
 800318a:	2304      	movs	r3, #4
 800318c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003190:	e0a5      	b.n	80032de <UART_SetConfig+0x2fe>
 8003192:	2308      	movs	r3, #8
 8003194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003198:	e0a1      	b.n	80032de <UART_SetConfig+0x2fe>
 800319a:	2310      	movs	r3, #16
 800319c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a0:	e09d      	b.n	80032de <UART_SetConfig+0x2fe>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <UART_SetConfig+0x2f0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d125      	bne.n	80031f8 <UART_SetConfig+0x218>
 80031ac:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <UART_SetConfig+0x2e4>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031b6:	2bc0      	cmp	r3, #192	; 0xc0
 80031b8:	d016      	beq.n	80031e8 <UART_SetConfig+0x208>
 80031ba:	2bc0      	cmp	r3, #192	; 0xc0
 80031bc:	d818      	bhi.n	80031f0 <UART_SetConfig+0x210>
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d00a      	beq.n	80031d8 <UART_SetConfig+0x1f8>
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d814      	bhi.n	80031f0 <UART_SetConfig+0x210>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <UART_SetConfig+0x1f0>
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d008      	beq.n	80031e0 <UART_SetConfig+0x200>
 80031ce:	e00f      	b.n	80031f0 <UART_SetConfig+0x210>
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d6:	e082      	b.n	80032de <UART_SetConfig+0x2fe>
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031de:	e07e      	b.n	80032de <UART_SetConfig+0x2fe>
 80031e0:	2304      	movs	r3, #4
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e6:	e07a      	b.n	80032de <UART_SetConfig+0x2fe>
 80031e8:	2308      	movs	r3, #8
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ee:	e076      	b.n	80032de <UART_SetConfig+0x2fe>
 80031f0:	2310      	movs	r3, #16
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f6:	e072      	b.n	80032de <UART_SetConfig+0x2fe>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a35      	ldr	r2, [pc, #212]	; (80032d4 <UART_SetConfig+0x2f4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d12a      	bne.n	8003258 <UART_SetConfig+0x278>
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <UART_SetConfig+0x2e4>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003210:	d01a      	beq.n	8003248 <UART_SetConfig+0x268>
 8003212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003216:	d81b      	bhi.n	8003250 <UART_SetConfig+0x270>
 8003218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321c:	d00c      	beq.n	8003238 <UART_SetConfig+0x258>
 800321e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003222:	d815      	bhi.n	8003250 <UART_SetConfig+0x270>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <UART_SetConfig+0x250>
 8003228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800322c:	d008      	beq.n	8003240 <UART_SetConfig+0x260>
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x270>
 8003230:	2300      	movs	r3, #0
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003236:	e052      	b.n	80032de <UART_SetConfig+0x2fe>
 8003238:	2302      	movs	r3, #2
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e04e      	b.n	80032de <UART_SetConfig+0x2fe>
 8003240:	2304      	movs	r3, #4
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003246:	e04a      	b.n	80032de <UART_SetConfig+0x2fe>
 8003248:	2308      	movs	r3, #8
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324e:	e046      	b.n	80032de <UART_SetConfig+0x2fe>
 8003250:	2310      	movs	r3, #16
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003256:	e042      	b.n	80032de <UART_SetConfig+0x2fe>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <UART_SetConfig+0x2dc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d13a      	bne.n	80032d8 <UART_SetConfig+0x2f8>
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <UART_SetConfig+0x2e4>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800326c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003270:	d01a      	beq.n	80032a8 <UART_SetConfig+0x2c8>
 8003272:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003276:	d81b      	bhi.n	80032b0 <UART_SetConfig+0x2d0>
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327c:	d00c      	beq.n	8003298 <UART_SetConfig+0x2b8>
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003282:	d815      	bhi.n	80032b0 <UART_SetConfig+0x2d0>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <UART_SetConfig+0x2b0>
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d008      	beq.n	80032a0 <UART_SetConfig+0x2c0>
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x2d0>
 8003290:	2300      	movs	r3, #0
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003296:	e022      	b.n	80032de <UART_SetConfig+0x2fe>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329e:	e01e      	b.n	80032de <UART_SetConfig+0x2fe>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a6:	e01a      	b.n	80032de <UART_SetConfig+0x2fe>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e016      	b.n	80032de <UART_SetConfig+0x2fe>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e012      	b.n	80032de <UART_SetConfig+0x2fe>
 80032b8:	cfff69f3 	.word	0xcfff69f3
 80032bc:	40008000 	.word	0x40008000
 80032c0:	40013800 	.word	0x40013800
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40004800 	.word	0x40004800
 80032d0:	40004c00 	.word	0x40004c00
 80032d4:	40005000 	.word	0x40005000
 80032d8:	2310      	movs	r3, #16
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4aae      	ldr	r2, [pc, #696]	; (800359c <UART_SetConfig+0x5bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	f040 8097 	bne.w	8003418 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d823      	bhi.n	800333a <UART_SetConfig+0x35a>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <UART_SetConfig+0x318>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	08003325 	.word	0x08003325
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800332b 	.word	0x0800332b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	0800333b 	.word	0x0800333b
 8003314:	0800333b 	.word	0x0800333b
 8003318:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe feb4 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003322:	e010      	b.n	8003346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b9e      	ldr	r3, [pc, #632]	; (80035a0 <UART_SetConfig+0x5c0>)
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003328:	e00d      	b.n	8003346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7fe fe15 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800332e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003330:	e009      	b.n	8003346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003338:	e005      	b.n	8003346 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8130 	beq.w	80035ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	4a94      	ldr	r2, [pc, #592]	; (80035a4 <UART_SetConfig+0x5c4>)
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	461a      	mov	r2, r3
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003360:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	429a      	cmp	r2, r3
 8003370:	d305      	bcc.n	800337e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	429a      	cmp	r2, r3
 800337c:	d903      	bls.n	8003386 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003384:	e113      	b.n	80035ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	2200      	movs	r2, #0
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	60fa      	str	r2, [r7, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	4a84      	ldr	r2, [pc, #528]	; (80035a4 <UART_SetConfig+0x5c4>)
 8003394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003398:	b29b      	uxth	r3, r3
 800339a:	2200      	movs	r2, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a8:	f7fc ff28 	bl	80001fc <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	020b      	lsls	r3, r1, #8
 80033be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033c2:	0202      	lsls	r2, r0, #8
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	6849      	ldr	r1, [r1, #4]
 80033c8:	0849      	lsrs	r1, r1, #1
 80033ca:	2000      	movs	r0, #0
 80033cc:	460c      	mov	r4, r1
 80033ce:	4605      	mov	r5, r0
 80033d0:	eb12 0804 	adds.w	r8, r2, r4
 80033d4:	eb43 0905 	adc.w	r9, r3, r5
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	469a      	mov	sl, r3
 80033e0:	4693      	mov	fp, r2
 80033e2:	4652      	mov	r2, sl
 80033e4:	465b      	mov	r3, fp
 80033e6:	4640      	mov	r0, r8
 80033e8:	4649      	mov	r1, r9
 80033ea:	f7fc ff07 	bl	80001fc <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4613      	mov	r3, r2
 80033f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fc:	d308      	bcc.n	8003410 <UART_SetConfig+0x430>
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003404:	d204      	bcs.n	8003410 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e0ce      	b.n	80035ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003416:	e0ca      	b.n	80035ae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003420:	d166      	bne.n	80034f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003426:	2b08      	cmp	r3, #8
 8003428:	d827      	bhi.n	800347a <UART_SetConfig+0x49a>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0x450>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003455 	.word	0x08003455
 8003434:	0800345d 	.word	0x0800345d
 8003438:	08003465 	.word	0x08003465
 800343c:	0800347b 	.word	0x0800347b
 8003440:	0800346b 	.word	0x0800346b
 8003444:	0800347b 	.word	0x0800347b
 8003448:	0800347b 	.word	0x0800347b
 800344c:	0800347b 	.word	0x0800347b
 8003450:	08003473 	.word	0x08003473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7fe fe18 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8003458:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800345a:	e014      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7fe fe2a 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003462:	e010      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003464:	4b4e      	ldr	r3, [pc, #312]	; (80035a0 <UART_SetConfig+0x5c0>)
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003468:	e00d      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	f7fe fd75 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800346e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003470:	e009      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003478:	e005      	b.n	8003486 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8090 	beq.w	80035ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	4a44      	ldr	r2, [pc, #272]	; (80035a4 <UART_SetConfig+0x5c4>)
 8003494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003498:	461a      	mov	r2, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a0:	005a      	lsls	r2, r3, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	441a      	add	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	d916      	bls.n	80034e8 <UART_SetConfig+0x508>
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d212      	bcs.n	80034e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	8bfb      	ldrh	r3, [r7, #30]
 80034da:	4313      	orrs	r3, r2
 80034dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	8bfa      	ldrh	r2, [r7, #30]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e062      	b.n	80035ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034ee:	e05e      	b.n	80035ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d828      	bhi.n	800354a <UART_SetConfig+0x56a>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0x520>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003525 	.word	0x08003525
 8003504:	0800352d 	.word	0x0800352d
 8003508:	08003535 	.word	0x08003535
 800350c:	0800354b 	.word	0x0800354b
 8003510:	0800353b 	.word	0x0800353b
 8003514:	0800354b 	.word	0x0800354b
 8003518:	0800354b 	.word	0x0800354b
 800351c:	0800354b 	.word	0x0800354b
 8003520:	08003543 	.word	0x08003543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7fe fdb0 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800352a:	e014      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7fe fdc2 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003532:	e010      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <UART_SetConfig+0x5c0>)
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003538:	e00d      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353a:	f7fe fd0d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800353e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003540:	e009      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003548:	e005      	b.n	8003556 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003554:	bf00      	nop
    }

    if (pclk != 0U)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d028      	beq.n	80035ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <UART_SetConfig+0x5c4>)
 8003562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003566:	461a      	mov	r2, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	fbb3 f2f2 	udiv	r2, r3, r2
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	441a      	add	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d910      	bls.n	80035a8 <UART_SetConfig+0x5c8>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d20c      	bcs.n	80035a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	b29a      	uxth	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e009      	b.n	80035ae <UART_SetConfig+0x5ce>
 800359a:	bf00      	nop
 800359c:	40008000 	.word	0x40008000
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	080045a8 	.word	0x080045a8
      }
      else
      {
        ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80035ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3730      	adds	r7, #48	; 0x30
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d6:	d10a      	bne.n	80036ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b098      	sub	sp, #96	; 0x60
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800372c:	f7fd fb12 	bl	8000d54 <HAL_GetTick>
 8003730:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d12f      	bne.n	80037a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003748:	2200      	movs	r2, #0
 800374a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f88e 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d022      	beq.n	80037a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376e:	653b      	str	r3, [r7, #80]	; 0x50
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
 800377a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800377e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e6      	bne.n	800375a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e063      	b.n	8003868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d149      	bne.n	8003842 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	2200      	movs	r2, #0
 80037b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f857 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03c      	beq.n	8003842 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	623b      	str	r3, [r7, #32]
   return(result);
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
 80037e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e6      	bne.n	80037c8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3308      	adds	r3, #8
 8003800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	60fb      	str	r3, [r7, #12]
   return(result);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	64bb      	str	r3, [r7, #72]	; 0x48
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800381a:	61fa      	str	r2, [r7, #28]
 800381c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	617b      	str	r3, [r7, #20]
   return(result);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e012      	b.n	8003868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3758      	adds	r7, #88	; 0x58
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e049      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d045      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fa63 	bl	8000d54 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e048      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d031      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d110      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f838 	bl	800393e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2208      	movs	r2, #8
 80038d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e029      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f0:	d111      	bne.n	8003916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f81e 	bl	800393e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e00f      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	429a      	cmp	r2, r3
 8003932:	d0a6      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800393e:	b480      	push	{r7}
 8003940:	b095      	sub	sp, #84	; 0x54
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
 8003966:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800396a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e6      	bne.n	8003946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	61fb      	str	r3, [r7, #28]
   return(result);
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3308      	adds	r3, #8
 800399a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800399c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e3      	bne.n	8003978 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d118      	bne.n	80039ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 0310 	bic.w	r3, r3, #16
 80039cc:	647b      	str	r3, [r7, #68]	; 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	613b      	str	r3, [r7, #16]
   return(result);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80039fe:	bf00      	nop
 8003a00:	3754      	adds	r7, #84	; 0x54
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e027      	b.n	8003a70 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e02d      	b.n	8003af0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f84f 	bl	8003b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e02d      	b.n	8003b6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f811 	bl	8003b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d108      	bne.n	8003b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b94:	e031      	b.n	8003bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b96:	2308      	movs	r3, #8
 8003b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	0e5b      	lsrs	r3, r3, #25
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	0f5b      	lsrs	r3, r3, #29
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
 8003bc0:	7b3a      	ldrb	r2, [r7, #12]
 8003bc2:	4911      	ldr	r1, [pc, #68]	; (8003c08 <UARTEx_SetNbDataToProcess+0x94>)
 8003bc4:	5c8a      	ldrb	r2, [r1, r2]
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003bca:	7b3a      	ldrb	r2, [r7, #12]
 8003bcc:	490f      	ldr	r1, [pc, #60]	; (8003c0c <UARTEx_SetNbDataToProcess+0x98>)
 8003bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	7b7a      	ldrb	r2, [r7, #13]
 8003be0:	4909      	ldr	r1, [pc, #36]	; (8003c08 <UARTEx_SetNbDataToProcess+0x94>)
 8003be2:	5c8a      	ldrb	r2, [r1, r2]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003be8:	7b7a      	ldrb	r2, [r7, #13]
 8003bea:	4908      	ldr	r1, [pc, #32]	; (8003c0c <UARTEx_SetNbDataToProcess+0x98>)
 8003bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	080045c0 	.word	0x080045c0
 8003c0c:	080045c8 	.word	0x080045c8

08003c10 <std>:
 8003c10:	2300      	movs	r3, #0
 8003c12:	b510      	push	{r4, lr}
 8003c14:	4604      	mov	r4, r0
 8003c16:	e9c0 3300 	strd	r3, r3, [r0]
 8003c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c1e:	6083      	str	r3, [r0, #8]
 8003c20:	8181      	strh	r1, [r0, #12]
 8003c22:	6643      	str	r3, [r0, #100]	; 0x64
 8003c24:	81c2      	strh	r2, [r0, #14]
 8003c26:	6183      	str	r3, [r0, #24]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	305c      	adds	r0, #92	; 0x5c
 8003c2e:	f000 f9d3 	bl	8003fd8 <memset>
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <std+0x38>)
 8003c34:	6263      	str	r3, [r4, #36]	; 0x24
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <std+0x3c>)
 8003c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <std+0x40>)
 8003c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <std+0x44>)
 8003c40:	6224      	str	r4, [r4, #32]
 8003c42:	6323      	str	r3, [r4, #48]	; 0x30
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	bf00      	nop
 8003c48:	08003e29 	.word	0x08003e29
 8003c4c:	08003e4b 	.word	0x08003e4b
 8003c50:	08003e83 	.word	0x08003e83
 8003c54:	08003ea7 	.word	0x08003ea7

08003c58 <stdio_exit_handler>:
 8003c58:	4a02      	ldr	r2, [pc, #8]	; (8003c64 <stdio_exit_handler+0xc>)
 8003c5a:	4903      	ldr	r1, [pc, #12]	; (8003c68 <stdio_exit_handler+0x10>)
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <stdio_exit_handler+0x14>)
 8003c5e:	f000 b869 	b.w	8003d34 <_fwalk_sglue>
 8003c62:	bf00      	nop
 8003c64:	2000000c 	.word	0x2000000c
 8003c68:	080043c9 	.word	0x080043c9
 8003c6c:	20000018 	.word	0x20000018

08003c70 <cleanup_stdio>:
 8003c70:	6841      	ldr	r1, [r0, #4]
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <cleanup_stdio+0x34>)
 8003c74:	4299      	cmp	r1, r3
 8003c76:	b510      	push	{r4, lr}
 8003c78:	4604      	mov	r4, r0
 8003c7a:	d001      	beq.n	8003c80 <cleanup_stdio+0x10>
 8003c7c:	f000 fba4 	bl	80043c8 <_fflush_r>
 8003c80:	68a1      	ldr	r1, [r4, #8]
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <cleanup_stdio+0x38>)
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d002      	beq.n	8003c8e <cleanup_stdio+0x1e>
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f000 fb9d 	bl	80043c8 <_fflush_r>
 8003c8e:	68e1      	ldr	r1, [r4, #12]
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <cleanup_stdio+0x3c>)
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d004      	beq.n	8003ca0 <cleanup_stdio+0x30>
 8003c96:	4620      	mov	r0, r4
 8003c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c9c:	f000 bb94 	b.w	80043c8 <_fflush_r>
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200001b4 	.word	0x200001b4
 8003ca8:	2000021c 	.word	0x2000021c
 8003cac:	20000284 	.word	0x20000284

08003cb0 <global_stdio_init.part.0>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <global_stdio_init.part.0+0x30>)
 8003cb4:	4c0b      	ldr	r4, [pc, #44]	; (8003ce4 <global_stdio_init.part.0+0x34>)
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <global_stdio_init.part.0+0x38>)
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	f7ff ffa6 	bl	8003c10 <std>
 8003cc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cc8:	2201      	movs	r2, #1
 8003cca:	2109      	movs	r1, #9
 8003ccc:	f7ff ffa0 	bl	8003c10 <std>
 8003cd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cda:	2112      	movs	r1, #18
 8003cdc:	f7ff bf98 	b.w	8003c10 <std>
 8003ce0:	200002ec 	.word	0x200002ec
 8003ce4:	200001b4 	.word	0x200001b4
 8003ce8:	08003c59 	.word	0x08003c59

08003cec <__sfp_lock_acquire>:
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <__sfp_lock_acquire+0x8>)
 8003cee:	f000 b9eb 	b.w	80040c8 <__retarget_lock_acquire_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	200002f5 	.word	0x200002f5

08003cf8 <__sfp_lock_release>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <__sfp_lock_release+0x8>)
 8003cfa:	f000 b9e6 	b.w	80040ca <__retarget_lock_release_recursive>
 8003cfe:	bf00      	nop
 8003d00:	200002f5 	.word	0x200002f5

08003d04 <__sinit>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	4604      	mov	r4, r0
 8003d08:	f7ff fff0 	bl	8003cec <__sfp_lock_acquire>
 8003d0c:	6a23      	ldr	r3, [r4, #32]
 8003d0e:	b11b      	cbz	r3, 8003d18 <__sinit+0x14>
 8003d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d14:	f7ff bff0 	b.w	8003cf8 <__sfp_lock_release>
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <__sinit+0x28>)
 8003d1a:	6223      	str	r3, [r4, #32]
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <__sinit+0x2c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f5      	bne.n	8003d10 <__sinit+0xc>
 8003d24:	f7ff ffc4 	bl	8003cb0 <global_stdio_init.part.0>
 8003d28:	e7f2      	b.n	8003d10 <__sinit+0xc>
 8003d2a:	bf00      	nop
 8003d2c:	08003c71 	.word	0x08003c71
 8003d30:	200002ec 	.word	0x200002ec

08003d34 <_fwalk_sglue>:
 8003d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d38:	4607      	mov	r7, r0
 8003d3a:	4688      	mov	r8, r1
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d44:	f1b9 0901 	subs.w	r9, r9, #1
 8003d48:	d505      	bpl.n	8003d56 <_fwalk_sglue+0x22>
 8003d4a:	6824      	ldr	r4, [r4, #0]
 8003d4c:	2c00      	cmp	r4, #0
 8003d4e:	d1f7      	bne.n	8003d40 <_fwalk_sglue+0xc>
 8003d50:	4630      	mov	r0, r6
 8003d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d56:	89ab      	ldrh	r3, [r5, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d907      	bls.n	8003d6c <_fwalk_sglue+0x38>
 8003d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d60:	3301      	adds	r3, #1
 8003d62:	d003      	beq.n	8003d6c <_fwalk_sglue+0x38>
 8003d64:	4629      	mov	r1, r5
 8003d66:	4638      	mov	r0, r7
 8003d68:	47c0      	blx	r8
 8003d6a:	4306      	orrs	r6, r0
 8003d6c:	3568      	adds	r5, #104	; 0x68
 8003d6e:	e7e9      	b.n	8003d44 <_fwalk_sglue+0x10>

08003d70 <_puts_r>:
 8003d70:	6a03      	ldr	r3, [r0, #32]
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	6884      	ldr	r4, [r0, #8]
 8003d76:	4605      	mov	r5, r0
 8003d78:	460e      	mov	r6, r1
 8003d7a:	b90b      	cbnz	r3, 8003d80 <_puts_r+0x10>
 8003d7c:	f7ff ffc2 	bl	8003d04 <__sinit>
 8003d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d82:	07db      	lsls	r3, r3, #31
 8003d84:	d405      	bmi.n	8003d92 <_puts_r+0x22>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	0598      	lsls	r0, r3, #22
 8003d8a:	d402      	bmi.n	8003d92 <_puts_r+0x22>
 8003d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d8e:	f000 f99b 	bl	80040c8 <__retarget_lock_acquire_recursive>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	0719      	lsls	r1, r3, #28
 8003d96:	d513      	bpl.n	8003dc0 <_puts_r+0x50>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	b18b      	cbz	r3, 8003dc0 <_puts_r+0x50>
 8003d9c:	3e01      	subs	r6, #1
 8003d9e:	68a3      	ldr	r3, [r4, #8]
 8003da0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60a3      	str	r3, [r4, #8]
 8003da8:	b9e9      	cbnz	r1, 8003de6 <_puts_r+0x76>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da2e      	bge.n	8003e0c <_puts_r+0x9c>
 8003dae:	4622      	mov	r2, r4
 8003db0:	210a      	movs	r1, #10
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 f87b 	bl	8003eae <__swbuf_r>
 8003db8:	3001      	adds	r0, #1
 8003dba:	d007      	beq.n	8003dcc <_puts_r+0x5c>
 8003dbc:	250a      	movs	r5, #10
 8003dbe:	e007      	b.n	8003dd0 <_puts_r+0x60>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f8b0 	bl	8003f28 <__swsetup_r>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0e7      	beq.n	8003d9c <_puts_r+0x2c>
 8003dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd2:	07da      	lsls	r2, r3, #31
 8003dd4:	d405      	bmi.n	8003de2 <_puts_r+0x72>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	059b      	lsls	r3, r3, #22
 8003dda:	d402      	bmi.n	8003de2 <_puts_r+0x72>
 8003ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dde:	f000 f974 	bl	80040ca <__retarget_lock_release_recursive>
 8003de2:	4628      	mov	r0, r5
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da04      	bge.n	8003df4 <_puts_r+0x84>
 8003dea:	69a2      	ldr	r2, [r4, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	dc06      	bgt.n	8003dfe <_puts_r+0x8e>
 8003df0:	290a      	cmp	r1, #10
 8003df2:	d004      	beq.n	8003dfe <_puts_r+0x8e>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	6022      	str	r2, [r4, #0]
 8003dfa:	7019      	strb	r1, [r3, #0]
 8003dfc:	e7cf      	b.n	8003d9e <_puts_r+0x2e>
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 f854 	bl	8003eae <__swbuf_r>
 8003e06:	3001      	adds	r0, #1
 8003e08:	d1c9      	bne.n	8003d9e <_puts_r+0x2e>
 8003e0a:	e7df      	b.n	8003dcc <_puts_r+0x5c>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	250a      	movs	r5, #10
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	701d      	strb	r5, [r3, #0]
 8003e16:	e7db      	b.n	8003dd0 <_puts_r+0x60>

08003e18 <puts>:
 8003e18:	4b02      	ldr	r3, [pc, #8]	; (8003e24 <puts+0xc>)
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	f7ff bfa7 	b.w	8003d70 <_puts_r>
 8003e22:	bf00      	nop
 8003e24:	20000064 	.word	0x20000064

08003e28 <__sread>:
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e30:	f000 f8fc 	bl	800402c <_read_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	bfab      	itete	ge
 8003e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e3c:	181b      	addge	r3, r3, r0
 8003e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e42:	bfac      	ite	ge
 8003e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e46:	81a3      	strhlt	r3, [r4, #12]
 8003e48:	bd10      	pop	{r4, pc}

08003e4a <__swrite>:
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	461f      	mov	r7, r3
 8003e50:	898b      	ldrh	r3, [r1, #12]
 8003e52:	05db      	lsls	r3, r3, #23
 8003e54:	4605      	mov	r5, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	4616      	mov	r6, r2
 8003e5a:	d505      	bpl.n	8003e68 <__swrite+0x1e>
 8003e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e60:	2302      	movs	r3, #2
 8003e62:	2200      	movs	r2, #0
 8003e64:	f000 f8d0 	bl	8004008 <_lseek_r>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e72:	81a3      	strh	r3, [r4, #12]
 8003e74:	4632      	mov	r2, r6
 8003e76:	463b      	mov	r3, r7
 8003e78:	4628      	mov	r0, r5
 8003e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	f000 b8e7 	b.w	8004050 <_write_r>

08003e82 <__sseek>:
 8003e82:	b510      	push	{r4, lr}
 8003e84:	460c      	mov	r4, r1
 8003e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8a:	f000 f8bd 	bl	8004008 <_lseek_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	bf15      	itete	ne
 8003e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e9e:	81a3      	strheq	r3, [r4, #12]
 8003ea0:	bf18      	it	ne
 8003ea2:	81a3      	strhne	r3, [r4, #12]
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <__sclose>:
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 b89d 	b.w	8003fe8 <_close_r>

08003eae <__swbuf_r>:
 8003eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb0:	460e      	mov	r6, r1
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	b118      	cbz	r0, 8003ec0 <__swbuf_r+0x12>
 8003eb8:	6a03      	ldr	r3, [r0, #32]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <__swbuf_r+0x12>
 8003ebc:	f7ff ff22 	bl	8003d04 <__sinit>
 8003ec0:	69a3      	ldr	r3, [r4, #24]
 8003ec2:	60a3      	str	r3, [r4, #8]
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	071a      	lsls	r2, r3, #28
 8003ec8:	d525      	bpl.n	8003f16 <__swbuf_r+0x68>
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	b31b      	cbz	r3, 8003f16 <__swbuf_r+0x68>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	6922      	ldr	r2, [r4, #16]
 8003ed2:	1a98      	subs	r0, r3, r2
 8003ed4:	6963      	ldr	r3, [r4, #20]
 8003ed6:	b2f6      	uxtb	r6, r6
 8003ed8:	4283      	cmp	r3, r0
 8003eda:	4637      	mov	r7, r6
 8003edc:	dc04      	bgt.n	8003ee8 <__swbuf_r+0x3a>
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 fa71 	bl	80043c8 <_fflush_r>
 8003ee6:	b9e0      	cbnz	r0, 8003f22 <__swbuf_r+0x74>
 8003ee8:	68a3      	ldr	r3, [r4, #8]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	60a3      	str	r3, [r4, #8]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	6022      	str	r2, [r4, #0]
 8003ef4:	701e      	strb	r6, [r3, #0]
 8003ef6:	6962      	ldr	r2, [r4, #20]
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d004      	beq.n	8003f08 <__swbuf_r+0x5a>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	07db      	lsls	r3, r3, #31
 8003f02:	d506      	bpl.n	8003f12 <__swbuf_r+0x64>
 8003f04:	2e0a      	cmp	r6, #10
 8003f06:	d104      	bne.n	8003f12 <__swbuf_r+0x64>
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f000 fa5c 	bl	80043c8 <_fflush_r>
 8003f10:	b938      	cbnz	r0, 8003f22 <__swbuf_r+0x74>
 8003f12:	4638      	mov	r0, r7
 8003f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f16:	4621      	mov	r1, r4
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 f805 	bl	8003f28 <__swsetup_r>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d0d5      	beq.n	8003ece <__swbuf_r+0x20>
 8003f22:	f04f 37ff 	mov.w	r7, #4294967295
 8003f26:	e7f4      	b.n	8003f12 <__swbuf_r+0x64>

08003f28 <__swsetup_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <__swsetup_r+0xac>)
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	460c      	mov	r4, r1
 8003f32:	b118      	cbz	r0, 8003f3c <__swsetup_r+0x14>
 8003f34:	6a03      	ldr	r3, [r0, #32]
 8003f36:	b90b      	cbnz	r3, 8003f3c <__swsetup_r+0x14>
 8003f38:	f7ff fee4 	bl	8003d04 <__sinit>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f42:	0718      	lsls	r0, r3, #28
 8003f44:	d422      	bmi.n	8003f8c <__swsetup_r+0x64>
 8003f46:	06d9      	lsls	r1, r3, #27
 8003f48:	d407      	bmi.n	8003f5a <__swsetup_r+0x32>
 8003f4a:	2309      	movs	r3, #9
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f52:	81a3      	strh	r3, [r4, #12]
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	e034      	b.n	8003fc4 <__swsetup_r+0x9c>
 8003f5a:	0758      	lsls	r0, r3, #29
 8003f5c:	d512      	bpl.n	8003f84 <__swsetup_r+0x5c>
 8003f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f60:	b141      	cbz	r1, 8003f74 <__swsetup_r+0x4c>
 8003f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f66:	4299      	cmp	r1, r3
 8003f68:	d002      	beq.n	8003f70 <__swsetup_r+0x48>
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 f8ae 	bl	80040cc <_free_r>
 8003f70:	2300      	movs	r3, #0
 8003f72:	6363      	str	r3, [r4, #52]	; 0x34
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6063      	str	r3, [r4, #4]
 8003f80:	6923      	ldr	r3, [r4, #16]
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	f043 0308 	orr.w	r3, r3, #8
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	b94b      	cbnz	r3, 8003fa4 <__swsetup_r+0x7c>
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9a:	d003      	beq.n	8003fa4 <__swsetup_r+0x7c>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fa60 	bl	8004464 <__smakebuf_r>
 8003fa4:	89a0      	ldrh	r0, [r4, #12]
 8003fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003faa:	f010 0301 	ands.w	r3, r0, #1
 8003fae:	d00a      	beq.n	8003fc6 <__swsetup_r+0x9e>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60a3      	str	r3, [r4, #8]
 8003fb4:	6963      	ldr	r3, [r4, #20]
 8003fb6:	425b      	negs	r3, r3
 8003fb8:	61a3      	str	r3, [r4, #24]
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	b943      	cbnz	r3, 8003fd0 <__swsetup_r+0xa8>
 8003fbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fc2:	d1c4      	bne.n	8003f4e <__swsetup_r+0x26>
 8003fc4:	bd38      	pop	{r3, r4, r5, pc}
 8003fc6:	0781      	lsls	r1, r0, #30
 8003fc8:	bf58      	it	pl
 8003fca:	6963      	ldrpl	r3, [r4, #20]
 8003fcc:	60a3      	str	r3, [r4, #8]
 8003fce:	e7f4      	b.n	8003fba <__swsetup_r+0x92>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e7f7      	b.n	8003fc4 <__swsetup_r+0x9c>
 8003fd4:	20000064 	.word	0x20000064

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <_close_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4d06      	ldr	r5, [pc, #24]	; (8004004 <_close_r+0x1c>)
 8003fec:	2300      	movs	r3, #0
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fc fd9f 	bl	8000b36 <_close>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_close_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_close_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	200002f0 	.word	0x200002f0

08004008 <_lseek_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d07      	ldr	r5, [pc, #28]	; (8004028 <_lseek_r+0x20>)
 800400c:	4604      	mov	r4, r0
 800400e:	4608      	mov	r0, r1
 8004010:	4611      	mov	r1, r2
 8004012:	2200      	movs	r2, #0
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fc fdb4 	bl	8000b84 <_lseek>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_lseek_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_lseek_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	200002f0 	.word	0x200002f0

0800402c <_read_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d07      	ldr	r5, [pc, #28]	; (800404c <_read_r+0x20>)
 8004030:	4604      	mov	r4, r0
 8004032:	4608      	mov	r0, r1
 8004034:	4611      	mov	r1, r2
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fc fd42 	bl	8000ac4 <_read>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_read_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_read_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	200002f0 	.word	0x200002f0

08004050 <_write_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	; (8004070 <_write_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fc fd4d 	bl	8000afe <_write>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_write_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_write_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	200002f0 	.word	0x200002f0

08004074 <__errno>:
 8004074:	4b01      	ldr	r3, [pc, #4]	; (800407c <__errno+0x8>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000064 	.word	0x20000064

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	4d0d      	ldr	r5, [pc, #52]	; (80040b8 <__libc_init_array+0x38>)
 8004084:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <__libc_init_array+0x3c>)
 8004086:	1b64      	subs	r4, r4, r5
 8004088:	10a4      	asrs	r4, r4, #2
 800408a:	2600      	movs	r6, #0
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	4d0b      	ldr	r5, [pc, #44]	; (80040c0 <__libc_init_array+0x40>)
 8004092:	4c0c      	ldr	r4, [pc, #48]	; (80040c4 <__libc_init_array+0x44>)
 8004094:	f000 fa54 	bl	8004540 <_init>
 8004098:	1b64      	subs	r4, r4, r5
 800409a:	10a4      	asrs	r4, r4, #2
 800409c:	2600      	movs	r6, #0
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	080045d8 	.word	0x080045d8
 80040bc:	080045d8 	.word	0x080045d8
 80040c0:	080045d8 	.word	0x080045d8
 80040c4:	080045dc 	.word	0x080045dc

080040c8 <__retarget_lock_acquire_recursive>:
 80040c8:	4770      	bx	lr

080040ca <__retarget_lock_release_recursive>:
 80040ca:	4770      	bx	lr

080040cc <_free_r>:
 80040cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ce:	2900      	cmp	r1, #0
 80040d0:	d044      	beq.n	800415c <_free_r+0x90>
 80040d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d6:	9001      	str	r0, [sp, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f1a1 0404 	sub.w	r4, r1, #4
 80040de:	bfb8      	it	lt
 80040e0:	18e4      	addlt	r4, r4, r3
 80040e2:	f000 f8df 	bl	80042a4 <__malloc_lock>
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <_free_r+0x94>)
 80040e8:	9801      	ldr	r0, [sp, #4]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	b933      	cbnz	r3, 80040fc <_free_r+0x30>
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6014      	str	r4, [r2, #0]
 80040f2:	b003      	add	sp, #12
 80040f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040f8:	f000 b8da 	b.w	80042b0 <__malloc_unlock>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x46>
 8004100:	6825      	ldr	r5, [r4, #0]
 8004102:	1961      	adds	r1, r4, r5
 8004104:	428b      	cmp	r3, r1
 8004106:	bf01      	itttt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	1949      	addeq	r1, r1, r5
 800410e:	6021      	streq	r1, [r4, #0]
 8004110:	e7ed      	b.n	80040ee <_free_r+0x22>
 8004112:	461a      	mov	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b10b      	cbz	r3, 800411c <_free_r+0x50>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d9fa      	bls.n	8004112 <_free_r+0x46>
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	1855      	adds	r5, r2, r1
 8004120:	42a5      	cmp	r5, r4
 8004122:	d10b      	bne.n	800413c <_free_r+0x70>
 8004124:	6824      	ldr	r4, [r4, #0]
 8004126:	4421      	add	r1, r4
 8004128:	1854      	adds	r4, r2, r1
 800412a:	42a3      	cmp	r3, r4
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	d1e0      	bne.n	80040f2 <_free_r+0x26>
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	6053      	str	r3, [r2, #4]
 8004136:	440c      	add	r4, r1
 8004138:	6014      	str	r4, [r2, #0]
 800413a:	e7da      	b.n	80040f2 <_free_r+0x26>
 800413c:	d902      	bls.n	8004144 <_free_r+0x78>
 800413e:	230c      	movs	r3, #12
 8004140:	6003      	str	r3, [r0, #0]
 8004142:	e7d6      	b.n	80040f2 <_free_r+0x26>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf04      	itt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	bf04      	itt	eq
 8004154:	1949      	addeq	r1, r1, r5
 8004156:	6021      	streq	r1, [r4, #0]
 8004158:	6054      	str	r4, [r2, #4]
 800415a:	e7ca      	b.n	80040f2 <_free_r+0x26>
 800415c:	b003      	add	sp, #12
 800415e:	bd30      	pop	{r4, r5, pc}
 8004160:	200002f8 	.word	0x200002f8

08004164 <sbrk_aligned>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4e0e      	ldr	r6, [pc, #56]	; (80041a0 <sbrk_aligned+0x3c>)
 8004168:	460c      	mov	r4, r1
 800416a:	6831      	ldr	r1, [r6, #0]
 800416c:	4605      	mov	r5, r0
 800416e:	b911      	cbnz	r1, 8004176 <sbrk_aligned+0x12>
 8004170:	f000 f9d6 	bl	8004520 <_sbrk_r>
 8004174:	6030      	str	r0, [r6, #0]
 8004176:	4621      	mov	r1, r4
 8004178:	4628      	mov	r0, r5
 800417a:	f000 f9d1 	bl	8004520 <_sbrk_r>
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	d00a      	beq.n	8004198 <sbrk_aligned+0x34>
 8004182:	1cc4      	adds	r4, r0, #3
 8004184:	f024 0403 	bic.w	r4, r4, #3
 8004188:	42a0      	cmp	r0, r4
 800418a:	d007      	beq.n	800419c <sbrk_aligned+0x38>
 800418c:	1a21      	subs	r1, r4, r0
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f9c6 	bl	8004520 <_sbrk_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d101      	bne.n	800419c <sbrk_aligned+0x38>
 8004198:	f04f 34ff 	mov.w	r4, #4294967295
 800419c:	4620      	mov	r0, r4
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	200002fc 	.word	0x200002fc

080041a4 <_malloc_r>:
 80041a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a8:	1ccd      	adds	r5, r1, #3
 80041aa:	f025 0503 	bic.w	r5, r5, #3
 80041ae:	3508      	adds	r5, #8
 80041b0:	2d0c      	cmp	r5, #12
 80041b2:	bf38      	it	cc
 80041b4:	250c      	movcc	r5, #12
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	4607      	mov	r7, r0
 80041ba:	db01      	blt.n	80041c0 <_malloc_r+0x1c>
 80041bc:	42a9      	cmp	r1, r5
 80041be:	d905      	bls.n	80041cc <_malloc_r+0x28>
 80041c0:	230c      	movs	r3, #12
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	2600      	movs	r6, #0
 80041c6:	4630      	mov	r0, r6
 80041c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042a0 <_malloc_r+0xfc>
 80041d0:	f000 f868 	bl	80042a4 <__malloc_lock>
 80041d4:	f8d8 3000 	ldr.w	r3, [r8]
 80041d8:	461c      	mov	r4, r3
 80041da:	bb5c      	cbnz	r4, 8004234 <_malloc_r+0x90>
 80041dc:	4629      	mov	r1, r5
 80041de:	4638      	mov	r0, r7
 80041e0:	f7ff ffc0 	bl	8004164 <sbrk_aligned>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	4604      	mov	r4, r0
 80041e8:	d155      	bne.n	8004296 <_malloc_r+0xf2>
 80041ea:	f8d8 4000 	ldr.w	r4, [r8]
 80041ee:	4626      	mov	r6, r4
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	d145      	bne.n	8004280 <_malloc_r+0xdc>
 80041f4:	2c00      	cmp	r4, #0
 80041f6:	d048      	beq.n	800428a <_malloc_r+0xe6>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	4631      	mov	r1, r6
 80041fc:	4638      	mov	r0, r7
 80041fe:	eb04 0903 	add.w	r9, r4, r3
 8004202:	f000 f98d 	bl	8004520 <_sbrk_r>
 8004206:	4581      	cmp	r9, r0
 8004208:	d13f      	bne.n	800428a <_malloc_r+0xe6>
 800420a:	6821      	ldr	r1, [r4, #0]
 800420c:	1a6d      	subs	r5, r5, r1
 800420e:	4629      	mov	r1, r5
 8004210:	4638      	mov	r0, r7
 8004212:	f7ff ffa7 	bl	8004164 <sbrk_aligned>
 8004216:	3001      	adds	r0, #1
 8004218:	d037      	beq.n	800428a <_malloc_r+0xe6>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	442b      	add	r3, r5
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d038      	beq.n	800429a <_malloc_r+0xf6>
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	42a2      	cmp	r2, r4
 800422c:	d12b      	bne.n	8004286 <_malloc_r+0xe2>
 800422e:	2200      	movs	r2, #0
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	e00f      	b.n	8004254 <_malloc_r+0xb0>
 8004234:	6822      	ldr	r2, [r4, #0]
 8004236:	1b52      	subs	r2, r2, r5
 8004238:	d41f      	bmi.n	800427a <_malloc_r+0xd6>
 800423a:	2a0b      	cmp	r2, #11
 800423c:	d917      	bls.n	800426e <_malloc_r+0xca>
 800423e:	1961      	adds	r1, r4, r5
 8004240:	42a3      	cmp	r3, r4
 8004242:	6025      	str	r5, [r4, #0]
 8004244:	bf18      	it	ne
 8004246:	6059      	strne	r1, [r3, #4]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	bf08      	it	eq
 800424c:	f8c8 1000 	streq.w	r1, [r8]
 8004250:	5162      	str	r2, [r4, r5]
 8004252:	604b      	str	r3, [r1, #4]
 8004254:	4638      	mov	r0, r7
 8004256:	f104 060b 	add.w	r6, r4, #11
 800425a:	f000 f829 	bl	80042b0 <__malloc_unlock>
 800425e:	f026 0607 	bic.w	r6, r6, #7
 8004262:	1d23      	adds	r3, r4, #4
 8004264:	1af2      	subs	r2, r6, r3
 8004266:	d0ae      	beq.n	80041c6 <_malloc_r+0x22>
 8004268:	1b9b      	subs	r3, r3, r6
 800426a:	50a3      	str	r3, [r4, r2]
 800426c:	e7ab      	b.n	80041c6 <_malloc_r+0x22>
 800426e:	42a3      	cmp	r3, r4
 8004270:	6862      	ldr	r2, [r4, #4]
 8004272:	d1dd      	bne.n	8004230 <_malloc_r+0x8c>
 8004274:	f8c8 2000 	str.w	r2, [r8]
 8004278:	e7ec      	b.n	8004254 <_malloc_r+0xb0>
 800427a:	4623      	mov	r3, r4
 800427c:	6864      	ldr	r4, [r4, #4]
 800427e:	e7ac      	b.n	80041da <_malloc_r+0x36>
 8004280:	4634      	mov	r4, r6
 8004282:	6876      	ldr	r6, [r6, #4]
 8004284:	e7b4      	b.n	80041f0 <_malloc_r+0x4c>
 8004286:	4613      	mov	r3, r2
 8004288:	e7cc      	b.n	8004224 <_malloc_r+0x80>
 800428a:	230c      	movs	r3, #12
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4638      	mov	r0, r7
 8004290:	f000 f80e 	bl	80042b0 <__malloc_unlock>
 8004294:	e797      	b.n	80041c6 <_malloc_r+0x22>
 8004296:	6025      	str	r5, [r4, #0]
 8004298:	e7dc      	b.n	8004254 <_malloc_r+0xb0>
 800429a:	605b      	str	r3, [r3, #4]
 800429c:	deff      	udf	#255	; 0xff
 800429e:	bf00      	nop
 80042a0:	200002f8 	.word	0x200002f8

080042a4 <__malloc_lock>:
 80042a4:	4801      	ldr	r0, [pc, #4]	; (80042ac <__malloc_lock+0x8>)
 80042a6:	f7ff bf0f 	b.w	80040c8 <__retarget_lock_acquire_recursive>
 80042aa:	bf00      	nop
 80042ac:	200002f4 	.word	0x200002f4

080042b0 <__malloc_unlock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__malloc_unlock+0x8>)
 80042b2:	f7ff bf0a 	b.w	80040ca <__retarget_lock_release_recursive>
 80042b6:	bf00      	nop
 80042b8:	200002f4 	.word	0x200002f4

080042bc <__sflush_r>:
 80042bc:	898a      	ldrh	r2, [r1, #12]
 80042be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c2:	4605      	mov	r5, r0
 80042c4:	0710      	lsls	r0, r2, #28
 80042c6:	460c      	mov	r4, r1
 80042c8:	d458      	bmi.n	800437c <__sflush_r+0xc0>
 80042ca:	684b      	ldr	r3, [r1, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	dc05      	bgt.n	80042dc <__sflush_r+0x20>
 80042d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	dc02      	bgt.n	80042dc <__sflush_r+0x20>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042de:	2e00      	cmp	r6, #0
 80042e0:	d0f9      	beq.n	80042d6 <__sflush_r+0x1a>
 80042e2:	2300      	movs	r3, #0
 80042e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042e8:	682f      	ldr	r7, [r5, #0]
 80042ea:	6a21      	ldr	r1, [r4, #32]
 80042ec:	602b      	str	r3, [r5, #0]
 80042ee:	d032      	beq.n	8004356 <__sflush_r+0x9a>
 80042f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	075a      	lsls	r2, r3, #29
 80042f6:	d505      	bpl.n	8004304 <__sflush_r+0x48>
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	1ac0      	subs	r0, r0, r3
 80042fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042fe:	b10b      	cbz	r3, 8004304 <__sflush_r+0x48>
 8004300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004302:	1ac0      	subs	r0, r0, r3
 8004304:	2300      	movs	r3, #0
 8004306:	4602      	mov	r2, r0
 8004308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800430a:	6a21      	ldr	r1, [r4, #32]
 800430c:	4628      	mov	r0, r5
 800430e:	47b0      	blx	r6
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	d106      	bne.n	8004324 <__sflush_r+0x68>
 8004316:	6829      	ldr	r1, [r5, #0]
 8004318:	291d      	cmp	r1, #29
 800431a:	d82b      	bhi.n	8004374 <__sflush_r+0xb8>
 800431c:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <__sflush_r+0x108>)
 800431e:	410a      	asrs	r2, r1
 8004320:	07d6      	lsls	r6, r2, #31
 8004322:	d427      	bmi.n	8004374 <__sflush_r+0xb8>
 8004324:	2200      	movs	r2, #0
 8004326:	6062      	str	r2, [r4, #4]
 8004328:	04d9      	lsls	r1, r3, #19
 800432a:	6922      	ldr	r2, [r4, #16]
 800432c:	6022      	str	r2, [r4, #0]
 800432e:	d504      	bpl.n	800433a <__sflush_r+0x7e>
 8004330:	1c42      	adds	r2, r0, #1
 8004332:	d101      	bne.n	8004338 <__sflush_r+0x7c>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b903      	cbnz	r3, 800433a <__sflush_r+0x7e>
 8004338:	6560      	str	r0, [r4, #84]	; 0x54
 800433a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800433c:	602f      	str	r7, [r5, #0]
 800433e:	2900      	cmp	r1, #0
 8004340:	d0c9      	beq.n	80042d6 <__sflush_r+0x1a>
 8004342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004346:	4299      	cmp	r1, r3
 8004348:	d002      	beq.n	8004350 <__sflush_r+0x94>
 800434a:	4628      	mov	r0, r5
 800434c:	f7ff febe 	bl	80040cc <_free_r>
 8004350:	2000      	movs	r0, #0
 8004352:	6360      	str	r0, [r4, #52]	; 0x34
 8004354:	e7c0      	b.n	80042d8 <__sflush_r+0x1c>
 8004356:	2301      	movs	r3, #1
 8004358:	4628      	mov	r0, r5
 800435a:	47b0      	blx	r6
 800435c:	1c41      	adds	r1, r0, #1
 800435e:	d1c8      	bne.n	80042f2 <__sflush_r+0x36>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0c5      	beq.n	80042f2 <__sflush_r+0x36>
 8004366:	2b1d      	cmp	r3, #29
 8004368:	d001      	beq.n	800436e <__sflush_r+0xb2>
 800436a:	2b16      	cmp	r3, #22
 800436c:	d101      	bne.n	8004372 <__sflush_r+0xb6>
 800436e:	602f      	str	r7, [r5, #0]
 8004370:	e7b1      	b.n	80042d6 <__sflush_r+0x1a>
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004378:	81a3      	strh	r3, [r4, #12]
 800437a:	e7ad      	b.n	80042d8 <__sflush_r+0x1c>
 800437c:	690f      	ldr	r7, [r1, #16]
 800437e:	2f00      	cmp	r7, #0
 8004380:	d0a9      	beq.n	80042d6 <__sflush_r+0x1a>
 8004382:	0793      	lsls	r3, r2, #30
 8004384:	680e      	ldr	r6, [r1, #0]
 8004386:	bf08      	it	eq
 8004388:	694b      	ldreq	r3, [r1, #20]
 800438a:	600f      	str	r7, [r1, #0]
 800438c:	bf18      	it	ne
 800438e:	2300      	movne	r3, #0
 8004390:	eba6 0807 	sub.w	r8, r6, r7
 8004394:	608b      	str	r3, [r1, #8]
 8004396:	f1b8 0f00 	cmp.w	r8, #0
 800439a:	dd9c      	ble.n	80042d6 <__sflush_r+0x1a>
 800439c:	6a21      	ldr	r1, [r4, #32]
 800439e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043a0:	4643      	mov	r3, r8
 80043a2:	463a      	mov	r2, r7
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b0      	blx	r6
 80043a8:	2800      	cmp	r0, #0
 80043aa:	dc06      	bgt.n	80043ba <__sflush_r+0xfe>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	f04f 30ff 	mov.w	r0, #4294967295
 80043b8:	e78e      	b.n	80042d8 <__sflush_r+0x1c>
 80043ba:	4407      	add	r7, r0
 80043bc:	eba8 0800 	sub.w	r8, r8, r0
 80043c0:	e7e9      	b.n	8004396 <__sflush_r+0xda>
 80043c2:	bf00      	nop
 80043c4:	dfbffffe 	.word	0xdfbffffe

080043c8 <_fflush_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	4605      	mov	r5, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	b913      	cbnz	r3, 80043d8 <_fflush_r+0x10>
 80043d2:	2500      	movs	r5, #0
 80043d4:	4628      	mov	r0, r5
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	b118      	cbz	r0, 80043e2 <_fflush_r+0x1a>
 80043da:	6a03      	ldr	r3, [r0, #32]
 80043dc:	b90b      	cbnz	r3, 80043e2 <_fflush_r+0x1a>
 80043de:	f7ff fc91 	bl	8003d04 <__sinit>
 80043e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f3      	beq.n	80043d2 <_fflush_r+0xa>
 80043ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043ec:	07d0      	lsls	r0, r2, #31
 80043ee:	d404      	bmi.n	80043fa <_fflush_r+0x32>
 80043f0:	0599      	lsls	r1, r3, #22
 80043f2:	d402      	bmi.n	80043fa <_fflush_r+0x32>
 80043f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f6:	f7ff fe67 	bl	80040c8 <__retarget_lock_acquire_recursive>
 80043fa:	4628      	mov	r0, r5
 80043fc:	4621      	mov	r1, r4
 80043fe:	f7ff ff5d 	bl	80042bc <__sflush_r>
 8004402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004404:	07da      	lsls	r2, r3, #31
 8004406:	4605      	mov	r5, r0
 8004408:	d4e4      	bmi.n	80043d4 <_fflush_r+0xc>
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	059b      	lsls	r3, r3, #22
 800440e:	d4e1      	bmi.n	80043d4 <_fflush_r+0xc>
 8004410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004412:	f7ff fe5a 	bl	80040ca <__retarget_lock_release_recursive>
 8004416:	e7dd      	b.n	80043d4 <_fflush_r+0xc>

08004418 <__swhatbuf_r>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	460c      	mov	r4, r1
 800441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004420:	2900      	cmp	r1, #0
 8004422:	b096      	sub	sp, #88	; 0x58
 8004424:	4615      	mov	r5, r2
 8004426:	461e      	mov	r6, r3
 8004428:	da0d      	bge.n	8004446 <__swhatbuf_r+0x2e>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	bf0c      	ite	eq
 8004436:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800443a:	2340      	movne	r3, #64	; 0x40
 800443c:	2000      	movs	r0, #0
 800443e:	6031      	str	r1, [r6, #0]
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	b016      	add	sp, #88	; 0x58
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	466a      	mov	r2, sp
 8004448:	f000 f848 	bl	80044dc <_fstat_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	dbec      	blt.n	800442a <__swhatbuf_r+0x12>
 8004450:	9901      	ldr	r1, [sp, #4]
 8004452:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004456:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800445a:	4259      	negs	r1, r3
 800445c:	4159      	adcs	r1, r3
 800445e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004462:	e7eb      	b.n	800443c <__swhatbuf_r+0x24>

08004464 <__smakebuf_r>:
 8004464:	898b      	ldrh	r3, [r1, #12]
 8004466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004468:	079d      	lsls	r5, r3, #30
 800446a:	4606      	mov	r6, r0
 800446c:	460c      	mov	r4, r1
 800446e:	d507      	bpl.n	8004480 <__smakebuf_r+0x1c>
 8004470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	6123      	str	r3, [r4, #16]
 8004478:	2301      	movs	r3, #1
 800447a:	6163      	str	r3, [r4, #20]
 800447c:	b002      	add	sp, #8
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	ab01      	add	r3, sp, #4
 8004482:	466a      	mov	r2, sp
 8004484:	f7ff ffc8 	bl	8004418 <__swhatbuf_r>
 8004488:	9900      	ldr	r1, [sp, #0]
 800448a:	4605      	mov	r5, r0
 800448c:	4630      	mov	r0, r6
 800448e:	f7ff fe89 	bl	80041a4 <_malloc_r>
 8004492:	b948      	cbnz	r0, 80044a8 <__smakebuf_r+0x44>
 8004494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004498:	059a      	lsls	r2, r3, #22
 800449a:	d4ef      	bmi.n	800447c <__smakebuf_r+0x18>
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	e7e3      	b.n	8004470 <__smakebuf_r+0xc>
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	6020      	str	r0, [r4, #0]
 80044ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	9b00      	ldr	r3, [sp, #0]
 80044b4:	6163      	str	r3, [r4, #20]
 80044b6:	9b01      	ldr	r3, [sp, #4]
 80044b8:	6120      	str	r0, [r4, #16]
 80044ba:	b15b      	cbz	r3, 80044d4 <__smakebuf_r+0x70>
 80044bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 f81d 	bl	8004500 <_isatty_r>
 80044c6:	b128      	cbz	r0, 80044d4 <__smakebuf_r+0x70>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	431d      	orrs	r5, r3
 80044d8:	81a5      	strh	r5, [r4, #12]
 80044da:	e7cf      	b.n	800447c <__smakebuf_r+0x18>

080044dc <_fstat_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d07      	ldr	r5, [pc, #28]	; (80044fc <_fstat_r+0x20>)
 80044e0:	2300      	movs	r3, #0
 80044e2:	4604      	mov	r4, r0
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	f7fc fb30 	bl	8000b4e <_fstat>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	d102      	bne.n	80044f8 <_fstat_r+0x1c>
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	b103      	cbz	r3, 80044f8 <_fstat_r+0x1c>
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	bd38      	pop	{r3, r4, r5, pc}
 80044fa:	bf00      	nop
 80044fc:	200002f0 	.word	0x200002f0

08004500 <_isatty_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d06      	ldr	r5, [pc, #24]	; (800451c <_isatty_r+0x1c>)
 8004504:	2300      	movs	r3, #0
 8004506:	4604      	mov	r4, r0
 8004508:	4608      	mov	r0, r1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	f7fc fb2f 	bl	8000b6e <_isatty>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d102      	bne.n	800451a <_isatty_r+0x1a>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	b103      	cbz	r3, 800451a <_isatty_r+0x1a>
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	200002f0 	.word	0x200002f0

08004520 <_sbrk_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d06      	ldr	r5, [pc, #24]	; (800453c <_sbrk_r+0x1c>)
 8004524:	2300      	movs	r3, #0
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fc fb38 	bl	8000ba0 <_sbrk>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_sbrk_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_sbrk_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	200002f0 	.word	0x200002f0

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
