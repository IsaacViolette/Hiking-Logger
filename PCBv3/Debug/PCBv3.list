
PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ca4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08010e38  08010e38  00020e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b80  08012b80  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08012b80  08012b80  00022b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b88  08012b88  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b88  08012b88  00022b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b8c  08012b8c  00022b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08012b90  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  20000210  08012da0  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20000bd4  08012da0  00030bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015edc  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038db  00000000  00000000  0004615f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00049a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f05  00000000  00000000  0004ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df50  00000000  00000000  0004bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b90d  00000000  00000000  00069c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8dbb  00000000  00000000  00085542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bc4  00000000  00000000  0012e300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00134ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e1c 	.word	0x08010e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010e1c 	.word	0x08010e1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <get_lat>:
 8001010:	b580      	push	{r7, lr}
 8001012:	b0c6      	sub	sp, #280	; 0x118
 8001014:	af00      	add	r7, sp, #0
 8001016:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800101a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800101e:	6018      	str	r0, [r3, #0]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 800102c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001030:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001034:	f107 000c 	add.w	r0, r7, #12
 8001038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	f00b f855 	bl	800c0ec <strncpy>
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4919      	ldr	r1, [pc, #100]	; (80010ac <get_lat+0x9c>)
 8001048:	4618      	mov	r0, r3
 800104a:	f00b f863 	bl	800c114 <strtok>
 800104e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001052:	e01b      	b.n	800108c <get_lat+0x7c>
 8001054:	4916      	ldr	r1, [pc, #88]	; (80010b0 <get_lat+0xa0>)
 8001056:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800105a:	f7ff f8b9 	bl	80001d0 <strcmp>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d017      	beq.n	8001094 <get_lat+0x84>
 8001064:	4913      	ldr	r1, [pc, #76]	; (80010b4 <get_lat+0xa4>)
 8001066:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800106a:	f7ff f8b1 	bl	80001d0 <strcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00f      	beq.n	8001094 <get_lat+0x84>
 8001074:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001078:	f009 f9db 	bl	800a432 <atof>
 800107c:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
 8001080:	490a      	ldr	r1, [pc, #40]	; (80010ac <get_lat+0x9c>)
 8001082:	2000      	movs	r0, #0
 8001084:	f00b f846 	bl	800c114 <strtok>
 8001088:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800108c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1df      	bne.n	8001054 <get_lat+0x44>
 8001094:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001098:	ec43 2b17 	vmov	d7, r2, r3
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08010e38 	.word	0x08010e38
 80010b0:	08010e3c 	.word	0x08010e3c
 80010b4:	08010e40 	.word	0x08010e40

080010b8 <get_lon>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0c6      	sub	sp, #280	; 0x118
 80010bc:	af00      	add	r7, sp, #0
 80010be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010c6:	6018      	str	r0, [r3, #0]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 80010d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010dc:	f107 000c 	add.w	r0, r7, #12
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	f00b f801 	bl	800c0ec <strncpy>
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4919      	ldr	r1, [pc, #100]	; (8001154 <get_lon+0x9c>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00b f80f 	bl	800c114 <strtok>
 80010f6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80010fa:	e01b      	b.n	8001134 <get_lon+0x7c>
 80010fc:	4916      	ldr	r1, [pc, #88]	; (8001158 <get_lon+0xa0>)
 80010fe:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001102:	f7ff f865 	bl	80001d0 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d017      	beq.n	800113c <get_lon+0x84>
 800110c:	4913      	ldr	r1, [pc, #76]	; (800115c <get_lon+0xa4>)
 800110e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001112:	f7ff f85d 	bl	80001d0 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00f      	beq.n	800113c <get_lon+0x84>
 800111c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001120:	f009 f987 	bl	800a432 <atof>
 8001124:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
 8001128:	490a      	ldr	r1, [pc, #40]	; (8001154 <get_lon+0x9c>)
 800112a:	2000      	movs	r0, #0
 800112c:	f00a fff2 	bl	800c114 <strtok>
 8001130:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1df      	bne.n	80010fc <get_lon+0x44>
 800113c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001140:	ec43 2b17 	vmov	d7, r2, r3
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	eef0 0a67 	vmov.f32	s1, s15
 800114c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08010e38 	.word	0x08010e38
 8001158:	08010e44 	.word	0x08010e44
 800115c:	08010e48 	.word	0x08010e48

08001160 <get_time>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	212c      	movs	r1, #44	; 0x2c
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f00a ff9e 	bl	800c0ae <strchr>
 8001172:	61f8      	str	r0, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	212c      	movs	r1, #44	; 0x2c
 800117a:	4618      	mov	r0, r3
 800117c:	f00a ff97 	bl	800c0ae <strchr>
 8001180:	61b8      	str	r0, [r7, #24]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3301      	adds	r3, #1
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4619      	mov	r1, r3
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f00a ffa9 	bl	800c0ec <strncpy>
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	4413      	add	r3, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	f107 010c 	add.w	r1, r7, #12
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	460b      	mov	r3, r1
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <get_time+0x88>)
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f00a ff00 	bl	800bfbc <siscanf>
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	3b05      	subs	r3, #5
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da02      	bge.n	80011ce <get_time+0x6e>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	3318      	adds	r3, #24
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68f9      	ldr	r1, [r7, #12]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	460b      	mov	r3, r1
 80011d8:	4904      	ldr	r1, [pc, #16]	; (80011ec <get_time+0x8c>)
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f00a fece 	bl	800bf7c <siprintf>
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08010e4c 	.word	0x08010e4c
 80011ec:	08010e58 	.word	0x08010e58

080011f0 <get_alt>:
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0c6      	sub	sp, #280	; 0x118
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 800120c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001210:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001214:	f107 000c 	add.w	r0, r7, #12
 8001218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	f00a ff65 	bl	800c0ec <strncpy>
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4916      	ldr	r1, [pc, #88]	; (8001280 <get_alt+0x90>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00a ff73 	bl	800c114 <strtok>
 800122e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001232:	e013      	b.n	800125c <get_alt+0x6c>
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <get_alt+0x94>)
 8001236:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800123a:	f7fe ffc9 	bl	80001d0 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d010      	beq.n	8001266 <get_alt+0x76>
 8001244:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001248:	f009 f8f3 	bl	800a432 <atof>
 800124c:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
 8001250:	490b      	ldr	r1, [pc, #44]	; (8001280 <get_alt+0x90>)
 8001252:	2000      	movs	r0, #0
 8001254:	f00a ff5e 	bl	800c114 <strtok>
 8001258:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800125c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e7      	bne.n	8001234 <get_alt+0x44>
 8001264:	e000      	b.n	8001268 <get_alt+0x78>
 8001266:	bf00      	nop
 8001268:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800126c:	ec43 2b17 	vmov	d7, r2, r3
 8001270:	eeb0 0a47 	vmov.f32	s0, s14
 8001274:	eef0 0a67 	vmov.f32	s1, s15
 8001278:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	08010e38 	.word	0x08010e38
 8001284:	08010e68 	.word	0x08010e68

08001288 <ddm2dd>:
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0b00 	vstr	d0, [r7]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <ddm2dd+0x8c>)
 8001298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129c:	f7ff fae6 	bl	800086c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b17 	vmov	d7, r2, r3
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	eef0 0a67 	vmov.f32	s1, s15
 80012b0:	f00e fb62 	bl	800f978 <floor>
 80012b4:	ed87 0b06 	vstr	d0, [r7, #24]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <ddm2dd+0x8c>)
 80012be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c2:	f7ff f9a9 	bl	8000618 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ce:	f7fe ffeb 	bl	80002a8 <__aeabi_dsub>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <ddm2dd+0x90>)
 80012e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e4:	f7ff fac2 	bl	800086c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012f0:	f7fe ffdc 	bl	80002ac <__adddf3>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80012fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001300:	ec43 2b17 	vmov	d7, r2, r3
 8001304:	eeb0 0a47 	vmov.f32	s0, s14
 8001308:	eef0 0a67 	vmov.f32	s1, s15
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40590000 	.word	0x40590000
 8001318:	404e0000 	.word	0x404e0000
 800131c:	00000000 	.word	0x00000000

08001320 <degreesToRadians>:
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0b00 	vstr	d0, [r7]
 800132a:	a30e      	add	r3, pc, #56	; (adr r3, 8001364 <degreesToRadians+0x44>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001334:	f7ff f970 	bl	8000618 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <degreesToRadians+0x40>)
 8001346:	f7ff fa91 	bl	800086c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b17 	vmov	d7, r2, r3
 8001352:	eeb0 0a47 	vmov.f32	s0, s14
 8001356:	eef0 0a67 	vmov.f32	s1, s15
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40668000 	.word	0x40668000
 8001364:	54442d18 	.word	0x54442d18
 8001368:	400921fb 	.word	0x400921fb
 800136c:	00000000 	.word	0x00000000

08001370 <calculateDistance>:
 8001370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001374:	ed2d 8b02 	vpush	{d8}
 8001378:	b092      	sub	sp, #72	; 0x48
 800137a:	af00      	add	r7, sp, #0
 800137c:	ed87 0b06 	vstr	d0, [r7, #24]
 8001380:	ed87 1b04 	vstr	d1, [r7, #16]
 8001384:	ed87 2b02 	vstr	d2, [r7, #8]
 8001388:	ed87 3b00 	vstr	d3, [r7]
 800138c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001390:	f7ff ff7a 	bl	8001288 <ddm2dd>
 8001394:	eeb0 7a40 	vmov.f32	s14, s0
 8001398:	eef0 7a60 	vmov.f32	s15, s1
 800139c:	eeb0 0a47 	vmov.f32	s0, s14
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	f7ff ffbc 	bl	8001320 <degreesToRadians>
 80013a8:	ed87 0b06 	vstr	d0, [r7, #24]
 80013ac:	ed97 0b04 	vldr	d0, [r7, #16]
 80013b0:	f7ff ff6a 	bl	8001288 <ddm2dd>
 80013b4:	eeb0 7a40 	vmov.f32	s14, s0
 80013b8:	eef0 7a60 	vmov.f32	s15, s1
 80013bc:	eeb0 0a47 	vmov.f32	s0, s14
 80013c0:	eef0 0a67 	vmov.f32	s1, s15
 80013c4:	f7ff ffac 	bl	8001320 <degreesToRadians>
 80013c8:	ed87 0b04 	vstr	d0, [r7, #16]
 80013cc:	ed97 0b02 	vldr	d0, [r7, #8]
 80013d0:	f7ff ff5a 	bl	8001288 <ddm2dd>
 80013d4:	eeb0 7a40 	vmov.f32	s14, s0
 80013d8:	eef0 7a60 	vmov.f32	s15, s1
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	eef0 0a67 	vmov.f32	s1, s15
 80013e4:	f7ff ff9c 	bl	8001320 <degreesToRadians>
 80013e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80013ec:	ed97 0b00 	vldr	d0, [r7]
 80013f0:	f7ff ff4a 	bl	8001288 <ddm2dd>
 80013f4:	eeb0 7a40 	vmov.f32	s14, s0
 80013f8:	eef0 7a60 	vmov.f32	s15, s1
 80013fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001400:	eef0 0a67 	vmov.f32	s1, s15
 8001404:	f7ff ff8c 	bl	8001320 <degreesToRadians>
 8001408:	ed87 0b00 	vstr	d0, [r7]
 800140c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001414:	f7fe ff48 	bl	80002a8 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001420:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001428:	f7fe ff3e 	bl	80002a8 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001440:	f7ff fa14 	bl	800086c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	ec43 2b17 	vmov	d7, r2, r3
 800144c:	eeb0 0a47 	vmov.f32	s0, s14
 8001450:	eef0 0a67 	vmov.f32	s1, s15
 8001454:	f00e f95c 	bl	800f710 <sin>
 8001458:	ec55 4b10 	vmov	r4, r5, d0
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001464:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001468:	f7ff fa00 	bl	800086c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b17 	vmov	d7, r2, r3
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f00e f948 	bl	800f710 <sin>
 8001480:	ec53 2b10 	vmov	r2, r3, d0
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7ff f8c6 	bl	8000618 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4614      	mov	r4, r2
 8001492:	461d      	mov	r5, r3
 8001494:	ed97 0b06 	vldr	d0, [r7, #24]
 8001498:	f00e f8e6 	bl	800f668 <cos>
 800149c:	ec59 8b10 	vmov	r8, r9, d0
 80014a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80014a4:	f00e f8e0 	bl	800f668 <cos>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4640      	mov	r0, r8
 80014ae:	4649      	mov	r1, r9
 80014b0:	f7ff f8b2 	bl	8000618 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4690      	mov	r8, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014c8:	f7ff f9d0 	bl	800086c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	ec43 2b17 	vmov	d7, r2, r3
 80014d4:	eeb0 0a47 	vmov.f32	s0, s14
 80014d8:	eef0 0a67 	vmov.f32	s1, s15
 80014dc:	f00e f918 	bl	800f710 <sin>
 80014e0:	ec53 2b10 	vmov	r2, r3, d0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f896 	bl	8000618 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4690      	mov	r8, r2
 80014f2:	4699      	mov	r9, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001500:	f7ff f9b4 	bl	800086c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b17 	vmov	d7, r2, r3
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	f00e f8fc 	bl	800f710 <sin>
 8001518:	ec53 2b10 	vmov	r2, r3, d0
 800151c:	4640      	mov	r0, r8
 800151e:	4649      	mov	r1, r9
 8001520:	f7ff f87a 	bl	8000618 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7fe febe 	bl	80002ac <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001538:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800153c:	f00e f866 	bl	800f60c <sqrt>
 8001540:	eeb0 8a40 	vmov.f32	s16, s0
 8001544:	eef0 8a60 	vmov.f32	s17, s1
 8001548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	4921      	ldr	r1, [pc, #132]	; (80015d8 <calculateDistance+0x268>)
 8001552:	f7fe fea9 	bl	80002a8 <__aeabi_dsub>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	ec43 2b17 	vmov	d7, r2, r3
 800155e:	eeb0 0a47 	vmov.f32	s0, s14
 8001562:	eef0 0a67 	vmov.f32	s1, s15
 8001566:	f00e f851 	bl	800f60c <sqrt>
 800156a:	eeb0 7a40 	vmov.f32	s14, s0
 800156e:	eef0 7a60 	vmov.f32	s15, s1
 8001572:	eeb0 1a47 	vmov.f32	s2, s14
 8001576:	eef0 1a67 	vmov.f32	s3, s15
 800157a:	eeb0 0a48 	vmov.f32	s0, s16
 800157e:	eef0 0a68 	vmov.f32	s1, s17
 8001582:	f00e f841 	bl	800f608 <atan2>
 8001586:	ec51 0b10 	vmov	r0, r1, d0
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	f7fe fe8d 	bl	80002ac <__adddf3>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800159a:	a30d      	add	r3, pc, #52	; (adr r3, 80015d0 <calculateDistance+0x260>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015a4:	f7ff f838 	bl	8000618 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80015b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b4:	ec43 2b17 	vmov	d7, r2, r3
 80015b8:	eeb0 0a47 	vmov.f32	s0, s14
 80015bc:	eef0 0a67 	vmov.f32	s1, s15
 80015c0:	3748      	adds	r7, #72	; 0x48
 80015c2:	46bd      	mov	sp, r7
 80015c4:	ecbd 8b02 	vpop	{d8}
 80015c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	41584dae 	.word	0x41584dae
 80015d8:	3ff00000 	.word	0x3ff00000

080015dc <I2C_Start>:
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	460b      	mov	r3, r1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	4613      	mov	r3, r2
 80015f0:	71bb      	strb	r3, [r7, #6]
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <I2C_Start+0x74>)
 8001600:	4013      	ands	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d104      	bne.n	8001614 <I2C_Start+0x38>
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e003      	b.n	800161c <I2C_Start+0x40>
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800162a:	4313      	orrs	r3, r2
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	fc009800 	.word	0xfc009800

08001654 <I2C_Stop>:
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	bf00      	nop
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f9      	beq.n	800166a <I2C_Stop+0x16>
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <I2C_WaitLineIdle>:
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	bf00      	nop
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169a:	d0f8      	beq.n	800168e <I2C_WaitLineIdle+0xa>
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <I2C_SendData>:
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	461a      	mov	r2, r3
 80016b6:	460b      	mov	r3, r1
 80016b8:	72fb      	strb	r3, [r7, #11]
 80016ba:	4613      	mov	r3, r2
 80016bc:	72bb      	strb	r3, [r7, #10]
 80016be:	7abb      	ldrb	r3, [r7, #10]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <I2C_SendData+0x20>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <I2C_SendData+0x26>
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e040      	b.n	8001752 <I2C_SendData+0xa8>
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff ffd7 	bl	8001684 <I2C_WaitLineIdle>
 80016d6:	7af9      	ldrb	r1, [r7, #11]
 80016d8:	7aba      	ldrb	r2, [r7, #10]
 80016da:	2300      	movs	r3, #0
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff7d 	bl	80015dc <I2C_Start>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da02      	bge.n	80016ee <I2C_SendData+0x44>
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	e031      	b.n	8001752 <I2C_SendData+0xa8>
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e010      	b.n	8001716 <I2C_SendData+0x6c>
 80016f4:	bf00      	nop
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f9      	beq.n	80016f6 <I2C_SendData+0x4c>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	7abb      	ldrb	r3, [r7, #10]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbea      	blt.n	80016f4 <I2C_SendData+0x4a>
 800171e:	bf00      	nop
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <I2C_SendData+0x8e>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f3      	beq.n	8001720 <I2C_SendData+0x76>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <I2C_SendData+0xa0>
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	e003      	b.n	8001752 <I2C_SendData+0xa8>
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff ff82 	bl	8001654 <I2C_Stop>
 8001750:	2300      	movs	r3, #0
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <I2C1_EV_IRQHandler>:
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <I2C1_ER_IRQHandler>:
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <lis3dh_init>:
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2230      	movs	r2, #48	; 0x30
 800178e:	809a      	strh	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	887a      	ldrh	r2, [r7, #2]
 800179a:	829a      	strh	r2, [r3, #20]
 800179c:	200a      	movs	r0, #10
 800179e:	f001 faf7 	bl	8002d90 <HAL_Delay>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8899      	ldrh	r1, [r3, #4]
 80017aa:	2332      	movs	r3, #50	; 0x32
 80017ac:	2201      	movs	r2, #1
 80017ae:	f002 f911 	bl	80039d4 <HAL_I2C_IsDeviceReady>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <lis3dh_init+0x4a>
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	e02b      	b.n	8001818 <lis3dh_init+0xa2>
 80017c0:	2201      	movs	r2, #1
 80017c2:	210f      	movs	r1, #15
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f849 	bl	800185c <lis3dh_read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	75fb      	strb	r3, [r7, #23]
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <lis3dh_init+0x62>
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	e01f      	b.n	8001818 <lis3dh_init+0xa2>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b33      	cmp	r3, #51	; 0x33
 80017e0:	d001      	beq.n	80017e6 <lis3dh_init+0x70>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e018      	b.n	8001818 <lis3dh_init+0xa2>
 80017e6:	2297      	movs	r2, #151	; 0x97
 80017e8:	2120      	movs	r1, #32
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f85d 	bl	80018aa <lis3dh_write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75fb      	strb	r3, [r7, #23]
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <lis3dh_init+0x88>
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	e00c      	b.n	8001818 <lis3dh_init+0xa2>
 80017fe:	2288      	movs	r2, #136	; 0x88
 8001800:	2123      	movs	r1, #35	; 0x23
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f851 	bl	80018aa <lis3dh_write>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <lis3dh_init+0xa0>
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	e000      	b.n	8001818 <lis3dh_init+0xa2>
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <lis3dh_xyz_available>:
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	2127      	movs	r1, #39	; 0x27
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f815 	bl	800185c <lis3dh_read>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <lis3dh_xyz_available+0x20>
 800183c:	2300      	movs	r3, #0
 800183e:	e009      	b.n	8001854 <lis3dh_xyz_available+0x34>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	bfcc      	ite	gt
 800184e:	2301      	movgt	r3, #1
 8001850:	2300      	movle	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <lis3dh_read>:
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b087      	sub	sp, #28
 8001860:	af04      	add	r7, sp, #16
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	803b      	strh	r3, [r7, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8a9b      	ldrh	r3, [r3, #20]
 8001870:	883a      	ldrh	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d901      	bls.n	800187a <lis3dh_read+0x1e>
 8001876:	2301      	movs	r3, #1
 8001878:	e013      	b.n	80018a2 <lis3dh_read+0x46>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	b299      	uxth	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	887c      	ldrh	r4, [r7, #2]
 800188e:	2232      	movs	r2, #50	; 0x32
 8001890:	9202      	str	r2, [sp, #8]
 8001892:	883a      	ldrh	r2, [r7, #0]
 8001894:	9201      	str	r2, [sp, #4]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	4622      	mov	r2, r4
 800189c:	f001 ff80 	bl	80037a0 <HAL_I2C_Mem_Read>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <lis3dh_write>:
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af04      	add	r7, sp, #16
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	707b      	strb	r3, [r7, #1]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	8899      	ldrh	r1, [r3, #4]
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	2332      	movs	r3, #50	; 0x32
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	2301      	movs	r3, #1
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	1c7b      	adds	r3, r7, #1
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2301      	movs	r3, #1
 80018d2:	f001 fe51 	bl	8003578 <HAL_I2C_Mem_Write>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <lis3dh_get_xyz>:
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	8a9b      	ldrh	r3, [r3, #20]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d801      	bhi.n	80018f4 <lis3dh_get_xyz+0x14>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e04b      	b.n	800198c <lis3dh_get_xyz+0xac>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	889b      	ldrh	r3, [r3, #4]
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	b299      	uxth	r1, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2232      	movs	r2, #50	; 0x32
 8001908:	9202      	str	r2, [sp, #8]
 800190a:	2206      	movs	r2, #6
 800190c:	9201      	str	r2, [sp, #4]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	22a8      	movs	r2, #168	; 0xa8
 8001914:	f001 ff44 	bl	80037a0 <HAL_I2C_Mem_Read>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <lis3dh_get_xyz+0x5e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	e026      	b.n	800198c <lis3dh_get_xyz+0xac>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	3301      	adds	r3, #1
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6992      	ldr	r2, [r2, #24]
 800194e:	7812      	ldrb	r2, [r2, #0]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	3303      	adds	r3, #3
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b25b      	sxtb	r3, r3
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6992      	ldr	r2, [r2, #24]
 8001966:	3202      	adds	r2, #2
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	3305      	adds	r3, #5
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b25b      	sxtb	r3, r3
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6992      	ldr	r2, [r2, #24]
 8001980:	3204      	adds	r2, #4
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	2300      	movs	r3, #0
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_UART_RxCpltCallback>:
char cur_time[9];
char pre_time[9];
double alt = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_UART_RxCpltCallback+0xc8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d157      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0xc0>

        nmea_buf[i++] = nmea;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_UART_RxCpltCallback+0xcc>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	b2d1      	uxtb	r1, r2
 80019ac:	4a2c      	ldr	r2, [pc, #176]	; (8001a60 <HAL_UART_RxCpltCallback+0xcc>)
 80019ae:	7011      	strb	r1, [r2, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_UART_RxCpltCallback+0xd0>)
 80019b4:	7819      	ldrb	r1, [r3, #0]
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_UART_RxCpltCallback+0xd4>)
 80019b8:	5499      	strb	r1, [r3, r2]

        if (nmea == '\n' || i >= sizeof(nmea_buf) - 1) {
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_UART_RxCpltCallback+0xd0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b0a      	cmp	r3, #10
 80019c0:	d003      	beq.n	80019ca <HAL_UART_RxCpltCallback+0x36>
 80019c2:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_UART_RxCpltCallback+0xcc>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d13f      	bne.n	8001a4a <HAL_UART_RxCpltCallback+0xb6>
        	if(nmea_buf[3]=='G' && nmea_buf[4]=='G' && nmea_buf[5] == 'A')
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_UART_RxCpltCallback+0xd4>)
 80019cc:	78db      	ldrb	r3, [r3, #3]
 80019ce:	2b47      	cmp	r3, #71	; 0x47
 80019d0:	d132      	bne.n	8001a38 <HAL_UART_RxCpltCallback+0xa4>
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_UART_RxCpltCallback+0xd4>)
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	2b47      	cmp	r3, #71	; 0x47
 80019d8:	d12e      	bne.n	8001a38 <HAL_UART_RxCpltCallback+0xa4>
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_UART_RxCpltCallback+0xd4>)
 80019dc:	795b      	ldrb	r3, [r3, #5]
 80019de:	2b41      	cmp	r3, #65	; 0x41
 80019e0:	d12a      	bne.n	8001a38 <HAL_UART_RxCpltCallback+0xa4>
        	{
        		memcpy(nmea_gga, nmea_buf, 256);
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_UART_RxCpltCallback+0xd8>)
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_UART_RxCpltCallback+0xd4>)
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ee:	461a      	mov	r2, r3
 80019f0:	f00a fc6a 	bl	800c2c8 <memcpy>
        		cur_lat = get_lat(nmea_gga);
 80019f4:	481d      	ldr	r0, [pc, #116]	; (8001a6c <HAL_UART_RxCpltCallback+0xd8>)
 80019f6:	f7ff fb0b 	bl	8001010 <get_lat>
 80019fa:	eeb0 7a40 	vmov.f32	s14, s0
 80019fe:	eef0 7a60 	vmov.f32	s15, s1
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_UART_RxCpltCallback+0xdc>)
 8001a04:	ed83 7b00 	vstr	d7, [r3]
        		cur_lon = get_lon(nmea_gga);
 8001a08:	4818      	ldr	r0, [pc, #96]	; (8001a6c <HAL_UART_RxCpltCallback+0xd8>)
 8001a0a:	f7ff fb55 	bl	80010b8 <get_lon>
 8001a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a12:	eef0 7a60 	vmov.f32	s15, s1
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_UART_RxCpltCallback+0xe0>)
 8001a18:	ed83 7b00 	vstr	d7, [r3]
        		get_time(nmea_gga, pre_time);
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <HAL_UART_RxCpltCallback+0xe4>)
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <HAL_UART_RxCpltCallback+0xd8>)
 8001a20:	f7ff fb9e 	bl	8001160 <get_time>
        		alt = get_alt(nmea_gga);
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <HAL_UART_RxCpltCallback+0xd8>)
 8001a26:	f7ff fbe3 	bl	80011f0 <get_alt>
 8001a2a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2e:	eef0 7a60 	vmov.f32	s15, s1
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_UART_RxCpltCallback+0xe8>)
 8001a34:	ed83 7b00 	vstr	d7, [r3]
        	}

            memset(nmea_buf, 0, sizeof(nmea_buf));
 8001a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	480a      	ldr	r0, [pc, #40]	; (8001a68 <HAL_UART_RxCpltCallback+0xd4>)
 8001a40:	f00a fb2d 	bl	800c09e <memset>
            i = 0;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_UART_RxCpltCallback+0xcc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
        }

        // Start the next reception
        HAL_UART_Receive_IT(&huart1, &nmea, 1);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4905      	ldr	r1, [pc, #20]	; (8001a64 <HAL_UART_RxCpltCallback+0xd0>)
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <HAL_UART_RxCpltCallback+0xc8>)
 8001a50:	f004 fa76 	bl	8005f40 <HAL_UART_Receive_IT>
    }
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000338 	.word	0x20000338
 8001a60:	200005e8 	.word	0x200005e8
 8001a64:	200003e5 	.word	0x200003e5
 8001a68:	200003e8 	.word	0x200003e8
 8001a6c:	200004e8 	.word	0x200004e8
 8001a70:	200005f0 	.word	0x200005f0
 8001a74:	200005f8 	.word	0x200005f8
 8001a78:	2000061c 	.word	0x2000061c
 8001a7c:	20000628 	.word	0x20000628

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8001a86:	af04      	add	r7, sp, #16
	UINT bytesWrote;
	FRESULT fres;
	BYTE writeBuf1[35];

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a88:	f001 f90d 	bl	8002ca6 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001a8c:	f000 fa2e 	bl	8001eec <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a90:	f000 fb6c 	bl	800216c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a94:	f000 fa78 	bl	8001f88 <MX_I2C1_Init>
	MX_I2C2_Init();
 8001a98:	f000 fab6 	bl	8002008 <MX_I2C2_Init>
	MX_SPI1_Init();
 8001a9c:	f000 faf4 	bl	8002088 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001aa0:	f000 fb30 	bl	8002104 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8001aa4:	f005 fcde 	bl	8007464 <MX_FATFS_Init>

	/* Create new file on MicroSD */
	HAL_Delay(1000);
 8001aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aac:	f001 f970 	bl	8002d90 <HAL_Delay>
	f_mount(&FatFs, "", 1); //1=mount now
 8001ab0:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	499c      	ldr	r1, [pc, #624]	; (8001d28 <main+0x2a8>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f007 ff1b 	bl	80098f4 <f_mount>
	f_open(&fil, "crds.txt", FA_CREATE_ALWAYS | FA_OPEN_ALWAYS);
 8001abe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	4999      	ldr	r1, [pc, #612]	; (8001d2c <main+0x2ac>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 ff5a 	bl	8009980 <f_open>
	f_close(&fil);
 8001acc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f008 fafb 	bl	800a0cc <f_close>
	f_mount(NULL, "", 0); //0=demount
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4993      	ldr	r1, [pc, #588]	; (8001d28 <main+0x2a8>)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f007 ff0a 	bl	80098f4 <f_mount>

	char buf1[16];
	char sd1[35];
	char message[64];
	uint8_t state = BELOW;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
	uint16_t steps = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8a7 3514 	strh.w	r3, [r7, #1300]	; 0x514

	status = lis3dh_init(&lis3dh, &hi2c1, xyz_buf, 6);
 8001aec:	2306      	movs	r3, #6
 8001aee:	4a90      	ldr	r2, [pc, #576]	; (8001d30 <main+0x2b0>)
 8001af0:	4990      	ldr	r1, [pc, #576]	; (8001d34 <main+0x2b4>)
 8001af2:	4891      	ldr	r0, [pc, #580]	; (8001d38 <main+0x2b8>)
 8001af4:	f7ff fe3f 	bl	8001776 <lis3dh_init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <main+0x2bc>)
 8001afe:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001b00:	4b8e      	ldr	r3, [pc, #568]	; (8001d3c <main+0x2bc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <main+0x90>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b08:	2140      	movs	r1, #64	; 0x40
 8001b0a:	488d      	ldr	r0, [pc, #564]	; (8001d40 <main+0x2c0>)
 8001b0c:	f001 fc7e 	bl	800340c <HAL_GPIO_TogglePin>
	}

	ssd1306_Init();
 8001b10:	f000 fc1c 	bl	800234c <ssd1306_Init>
	ssd1306_SetCursor(2,0);
 8001b14:	2100      	movs	r1, #0
 8001b16:	2002      	movs	r0, #2
 8001b18:	f000 fde6 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Steps:", Font_11x18, White);
 8001b1c:	4a89      	ldr	r2, [pc, #548]	; (8001d44 <main+0x2c4>)
 8001b1e:	2301      	movs	r3, #1
 8001b20:	ca06      	ldmia	r2, {r1, r2}
 8001b22:	4889      	ldr	r0, [pc, #548]	; (8001d48 <main+0x2c8>)
 8001b24:	f000 fdba 	bl	800269c <ssd1306_WriteString>
	ssd1306_SetCursor(2,20);
 8001b28:	2114      	movs	r1, #20
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f000 fddc 	bl	80026e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Distance:", Font_11x18, White);
 8001b30:	4a84      	ldr	r2, [pc, #528]	; (8001d44 <main+0x2c4>)
 8001b32:	2301      	movs	r3, #1
 8001b34:	ca06      	ldmia	r2, {r1, r2}
 8001b36:	4885      	ldr	r0, [pc, #532]	; (8001d4c <main+0x2cc>)
 8001b38:	f000 fdb0 	bl	800269c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b3c:	f000 fc9e 	bl	800247c <ssd1306_UpdateScreen>

	float total_distance = 0;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8001b48:	6013      	str	r3, [r2, #0]
	float new_distance;
	float miles;
	HAL_UART_Receive_IT(&huart1, &nmea, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4980      	ldr	r1, [pc, #512]	; (8001d50 <main+0x2d0>)
 8001b4e:	4881      	ldr	r0, [pc, #516]	; (8001d54 <main+0x2d4>)
 8001b50:	f004 f9f6 	bl	8005f40 <HAL_UART_Receive_IT>

	while (1)
	{
		for(int i = 0; i < NUM_SAMPLES; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001b5a:	e04a      	b.n	8001bf2 <main+0x172>
		{
			HAL_Delay(50); //20Hz
 8001b5c:	2032      	movs	r0, #50	; 0x32
 8001b5e:	f001 f917 	bl	8002d90 <HAL_Delay>

			if(lis3dh_xyz_available(&lis3dh)) {
 8001b62:	4875      	ldr	r0, [pc, #468]	; (8001d38 <main+0x2b8>)
 8001b64:	f7ff fe5c 	bl	8001820 <lis3dh_xyz_available>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03c      	beq.n	8001be8 <main+0x168>
				status = lis3dh_get_xyz(&lis3dh);
 8001b6e:	4872      	ldr	r0, [pc, #456]	; (8001d38 <main+0x2b8>)
 8001b70:	f7ff feb6 	bl	80018e0 <lis3dh_get_xyz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <main+0x2bc>)
 8001b7a:	701a      	strb	r2, [r3, #0]
				float xx = lis3dh.x;
 8001b7c:	4b6e      	ldr	r3, [pc, #440]	; (8001d38 <main+0x2b8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b88:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8001b8c:	edc3 7a00 	vstr	s15, [r3]

				switch(state) {
 8001b90:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <main+0x11e>
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d015      	beq.n	8001bc8 <main+0x148>
 8001b9c:	e024      	b.n	8001be8 <main+0x168>
					case TOP:
						if(xx < THRESH) {
 8001b9e:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001d58 <main+0x2d8>
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d400      	bmi.n	8001bb6 <main+0x136>
							steps += 1;
							state = BELOW;
						}
						break;
 8001bb4:	e018      	b.n	8001be8 <main+0x168>
							steps += 1;
 8001bb6:	f8b7 3514 	ldrh.w	r3, [r7, #1300]	; 0x514
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f8a7 3514 	strh.w	r3, [r7, #1300]	; 0x514
							state = BELOW;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
						break;
 8001bc6:	e00f      	b.n	8001be8 <main+0x168>
					case BELOW:
						if(xx >= THRESH) {
 8001bc8:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001d58 <main+0x2d8>
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	da00      	bge.n	8001be0 <main+0x160>
							state = TOP;
						}
						break;
 8001bde:	e002      	b.n	8001be6 <main+0x166>
							state = TOP;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
						break;
 8001be6:	bf00      	nop
		for(int i = 0; i < NUM_SAMPLES; i++)
 8001be8:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001bec:	3301      	adds	r3, #1
 8001bee:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001bf2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001bf6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001bfa:	dbaf      	blt.n	8001b5c <main+0xdc>
				}
			}
		}

		ssd1306_SetCursor(70,0);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2046      	movs	r0, #70	; 0x46
 8001c00:	f000 fd72 	bl	80026e8 <ssd1306_SetCursor>
		ssd1306_WriteString(itoa(steps,message,10), Font_11x18, White);
 8001c04:	f8b7 3514 	ldrh.w	r3, [r7, #1300]	; 0x514
 8001c08:	1d39      	adds	r1, r7, #4
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f008 fc2b 	bl	800a468 <itoa>
 8001c12:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <main+0x2c4>)
 8001c14:	2301      	movs	r3, #1
 8001c16:	ca06      	ldmia	r2, {r1, r2}
 8001c18:	f000 fd40 	bl	800269c <ssd1306_WriteString>

		if((pre_lat == 0) && (pre_lon == 0)) {
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <main+0x2dc>)
 8001c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	f7fe ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d018      	beq.n	8001c66 <main+0x1e6>
 8001c34:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <main+0x2e0>)
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f7fe ff51 	bl	8000ae8 <__aeabi_dcmpeq>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00c      	beq.n	8001c66 <main+0x1e6>
		  ssd1306_SetCursor(2,50);
 8001c4c:	2132      	movs	r1, #50	; 0x32
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f000 fd4a 	bl	80026e8 <ssd1306_SetCursor>
		  ssd1306_WriteString("Need GPS Lock", Font_7x10, White);
 8001c54:	4a43      	ldr	r2, [pc, #268]	; (8001d64 <main+0x2e4>)
 8001c56:	2301      	movs	r3, #1
 8001c58:	ca06      	ldmia	r2, {r1, r2}
 8001c5a:	4843      	ldr	r0, [pc, #268]	; (8001d68 <main+0x2e8>)
 8001c5c:	f000 fd1e 	bl	800269c <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8001c60:	f000 fc0c 	bl	800247c <ssd1306_UpdateScreen>
 8001c64:	e116      	b.n	8001e94 <main+0x414>
		}
		else {
			sprintf(sd1,"%fN,%fW,%s",pre_lat,pre_lon,pre_time);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <main+0x2dc>)
 8001c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <main+0x2e0>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001c76:	4d3d      	ldr	r5, [pc, #244]	; (8001d6c <main+0x2ec>)
 8001c78:	9502      	str	r5, [sp, #8]
 8001c7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	493b      	ldr	r1, [pc, #236]	; (8001d70 <main+0x2f0>)
 8001c84:	4620      	mov	r0, r4
 8001c86:	f00a f979 	bl	800bf7c <siprintf>

			fres = f_mount(&FatFs, "", 1); //1=mount now
 8001c8a:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4925      	ldr	r1, [pc, #148]	; (8001d28 <main+0x2a8>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 fe2e 	bl	80098f4 <f_mount>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b
			if(fres != FR_OK) {
 8001c9e:	f897 350b 	ldrb.w	r3, [r7, #1291]	; 0x50b
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <main+0x230>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	4825      	ldr	r0, [pc, #148]	; (8001d40 <main+0x2c0>)
 8001caa:	f001 fbaf 	bl	800340c <HAL_GPIO_TogglePin>
				while(1);
 8001cae:	e7fe      	b.n	8001cae <main+0x22e>
			}

			fres = f_open(&fil, "crds.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8001cb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cb4:	2212      	movs	r2, #18
 8001cb6:	491d      	ldr	r1, [pc, #116]	; (8001d2c <main+0x2ac>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f007 fe61 	bl	8009980 <f_open>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b
			if(fres == FR_OK) {
 8001cc4:	f897 350b 	ldrb.w	r3, [r7, #1291]	; 0x50b
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d127      	bne.n	8001d1c <main+0x29c>
				f_lseek(&fil, f_size(&fil));
 8001ccc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001cd0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f008 fa1f 	bl	800a120 <f_lseek>
				strncpy((char*)writeBuf1, sd1, 35);
 8001ce2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cea:	2223      	movs	r2, #35	; 0x23
 8001cec:	4618      	mov	r0, r3
 8001cee:	f00a f9fd 	bl	800c0ec <strncpy>
				fres = f_write(&fil, writeBuf1, 35, &bytesWrote);
 8001cf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001cfa:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001cfe:	2223      	movs	r2, #35	; 0x23
 8001d00:	f007 fffa 	bl	8009cf8 <f_write>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b
				if(fres != FR_OK) {
 8001d0a:	f897 350b 	ldrb.w	r3, [r7, #1291]	; 0x50b
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d030      	beq.n	8001d74 <main+0x2f4>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001d12:	2140      	movs	r1, #64	; 0x40
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <main+0x2c0>)
 8001d16:	f001 fb79 	bl	800340c <HAL_GPIO_TogglePin>
					while(1);
 8001d1a:	e7fe      	b.n	8001d1a <main+0x29a>
				}
			}
			else {
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	4808      	ldr	r0, [pc, #32]	; (8001d40 <main+0x2c0>)
 8001d20:	f001 fb74 	bl	800340c <HAL_GPIO_TogglePin>
				while(1);
 8001d24:	e7fe      	b.n	8001d24 <main+0x2a4>
 8001d26:	bf00      	nop
 8001d28:	08010e6c 	.word	0x08010e6c
 8001d2c:	08010e70 	.word	0x08010e70
 8001d30:	200003c0 	.word	0x200003c0
 8001d34:	2000022c 	.word	0x2000022c
 8001d38:	200003c8 	.word	0x200003c8
 8001d3c:	200003e4 	.word	0x200003e4
 8001d40:	48000800 	.word	0x48000800
 8001d44:	20000008 	.word	0x20000008
 8001d48:	08010e7c 	.word	0x08010e7c
 8001d4c:	08010e84 	.word	0x08010e84
 8001d50:	200003e5 	.word	0x200003e5
 8001d54:	20000338 	.word	0x20000338
 8001d58:	46500c00 	.word	0x46500c00
 8001d5c:	20000600 	.word	0x20000600
 8001d60:	20000608 	.word	0x20000608
 8001d64:	20000000 	.word	0x20000000
 8001d68:	08010e90 	.word	0x08010e90
 8001d6c:	2000061c 	.word	0x2000061c
 8001d70:	08010ea0 	.word	0x08010ea0
			}

			f_close(&fil);
 8001d74:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f008 f9a7 	bl	800a0cc <f_close>

			f_mount(NULL, "", 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	494f      	ldr	r1, [pc, #316]	; (8001ec0 <main+0x440>)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f007 fdb6 	bl	80098f4 <f_mount>

			new_distance = calculateDistance(pre_lat, pre_lon, cur_lat, cur_lon);
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <main+0x444>)
 8001d8a:	ed93 7b00 	vldr	d7, [r3]
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <main+0x448>)
 8001d90:	ed93 6b00 	vldr	d6, [r3]
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <main+0x44c>)
 8001d96:	ed93 5b00 	vldr	d5, [r3]
 8001d9a:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <main+0x450>)
 8001d9c:	ed93 4b00 	vldr	d4, [r3]
 8001da0:	eeb0 3a44 	vmov.f32	s6, s8
 8001da4:	eef0 3a64 	vmov.f32	s7, s9
 8001da8:	eeb0 2a45 	vmov.f32	s4, s10
 8001dac:	eef0 2a65 	vmov.f32	s5, s11
 8001db0:	eeb0 1a46 	vmov.f32	s2, s12
 8001db4:	eef0 1a66 	vmov.f32	s3, s13
 8001db8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbc:	eef0 0a67 	vmov.f32	s1, s15
 8001dc0:	f7ff fad6 	bl	8001370 <calculateDistance>
 8001dc4:	ec53 2b10 	vmov	r2, r3, d0
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe ff1c 	bl	8000c08 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8001dd6:	6013      	str	r3, [r2, #0]
			if (new_distance > MIN_GPS_DISTANCE){
 8001dd8:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	dd0d      	ble.n	8001e0a <main+0x38a>
			  total_distance += new_distance;
 8001dee:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001df2:	ed93 7a00 	vldr	s14, [r3]
 8001df6:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001e06:	edc3 7a00 	vstr	s15, [r3]
			}
			if (total_distance < 400)
 8001e0a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001ed4 <main+0x454>
 8001e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d50c      	bpl.n	8001e3a <main+0x3ba>
			{
			  sprintf(buf1,"%0.2f meters",total_distance);
 8001e20:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	f7fe fb9f 	bl	8000568 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001e32:	4929      	ldr	r1, [pc, #164]	; (8001ed8 <main+0x458>)
 8001e34:	f00a f8a2 	bl	800bf7c <siprintf>
 8001e38:	e01f      	b.n	8001e7a <main+0x3fa>
			}
			else{
			  miles = total_distance / METERS_TO_MILES;
 8001e3a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f7fe fb92 	bl	8000568 <__aeabi_f2d>
 8001e44:	a31c      	add	r3, pc, #112	; (adr r3, 8001eb8 <main+0x438>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fd0f 	bl	800086c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fed7 	bl	8000c08 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8001e60:	6013      	str	r3, [r2, #0]
			  sprintf(buf1,"%0.2f miles",miles);
 8001e62:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f7fe fb7e 	bl	8000568 <__aeabi_f2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001e74:	4919      	ldr	r1, [pc, #100]	; (8001edc <main+0x45c>)
 8001e76:	f00a f881 	bl	800bf7c <siprintf>
			}
			ssd1306_SetCursor(2,40);
 8001e7a:	2128      	movs	r1, #40	; 0x28
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f000 fc33 	bl	80026e8 <ssd1306_SetCursor>
			ssd1306_WriteString(buf1, Font_11x18, White);
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <main+0x460>)
 8001e84:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001e88:	2301      	movs	r3, #1
 8001e8a:	ca06      	ldmia	r2, {r1, r2}
 8001e8c:	f000 fc06 	bl	800269c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001e90:	f000 faf4 	bl	800247c <ssd1306_UpdateScreen>

		}
			  pre_lat = cur_lat;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <main+0x44c>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	490a      	ldr	r1, [pc, #40]	; (8001ec4 <main+0x444>)
 8001e9c:	e9c1 2300 	strd	r2, r3, [r1]
			  pre_lon = cur_lon;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <main+0x450>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <main+0x448>)
 8001ea8:	e9c1 2300 	strd	r2, r3, [r1]
			  strcpy(pre_time, cur_time);
 8001eac:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <main+0x464>)
 8001eae:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <main+0x468>)
 8001eb0:	f00a fa02 	bl	800c2b8 <strcpy>
		for(int i = 0; i < NUM_SAMPLES; i++)
 8001eb4:	e64e      	b.n	8001b54 <main+0xd4>
 8001eb6:	bf00      	nop
 8001eb8:	28f5c28f 	.word	0x28f5c28f
 8001ebc:	4099255c 	.word	0x4099255c
 8001ec0:	08010e6c 	.word	0x08010e6c
 8001ec4:	20000600 	.word	0x20000600
 8001ec8:	20000608 	.word	0x20000608
 8001ecc:	200005f0 	.word	0x200005f0
 8001ed0:	200005f8 	.word	0x200005f8
 8001ed4:	43c80000 	.word	0x43c80000
 8001ed8:	08010eac 	.word	0x08010eac
 8001edc:	08010ebc 	.word	0x08010ebc
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000610 	.word	0x20000610
 8001ee8:	2000061c 	.word	0x2000061c

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b096      	sub	sp, #88	; 0x58
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2244      	movs	r2, #68	; 0x44
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00a f8cf 	bl	800c09e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f12:	f002 f9c7 	bl	80042a4 <HAL_PWREx_ControlVoltageScaling>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f1c:	f000 f9a8 	bl	8002270 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001f36:	2314      	movs	r3, #20
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 fa02 	bl	8004350 <HAL_RCC_OscConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001f52:	f000 f98d 	bl	8002270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f56:	230f      	movs	r3, #15
 8001f58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fe50 	bl	8004c14 <HAL_RCC_ClockConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f7a:	f000 f979 	bl	8002270 <Error_Handler>
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3758      	adds	r7, #88	; 0x58
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <MX_I2C1_Init+0x78>)
 8001f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <MX_I2C1_Init+0x7c>)
 8001f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc2:	480e      	ldr	r0, [pc, #56]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fc4:	f001 fa3c 	bl	8003440 <HAL_I2C_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fce:	f000 f94f 	bl	8002270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fd6:	f002 f8bf 	bl	8004158 <HAL_I2CEx_ConfigAnalogFilter>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fe0:	f000 f946 	bl	8002270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_I2C1_Init+0x74>)
 8001fe8:	f002 f901 	bl	80041ee <HAL_I2CEx_ConfigDigitalFilter>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ff2:	f000 f93d 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000022c 	.word	0x2000022c
 8002000:	40005400 	.word	0x40005400
 8002004:	10909cec 	.word	0x10909cec

08002008 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_I2C2_Init+0x74>)
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <MX_I2C2_Init+0x78>)
 8002010:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_I2C2_Init+0x74>)
 8002014:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <MX_I2C2_Init+0x7c>)
 8002016:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_I2C2_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <MX_I2C2_Init+0x74>)
 8002020:	2201      	movs	r2, #1
 8002022:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_I2C2_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_I2C2_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_I2C2_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_I2C2_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_I2C2_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002042:	480e      	ldr	r0, [pc, #56]	; (800207c <MX_I2C2_Init+0x74>)
 8002044:	f001 f9fc 	bl	8003440 <HAL_I2C_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800204e:	f000 f90f 	bl	8002270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002052:	2100      	movs	r1, #0
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <MX_I2C2_Init+0x74>)
 8002056:	f002 f87f 	bl	8004158 <HAL_I2CEx_ConfigAnalogFilter>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002060:	f000 f906 	bl	8002270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002064:	2100      	movs	r1, #0
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_I2C2_Init+0x74>)
 8002068:	f002 f8c1 	bl	80041ee <HAL_I2CEx_ConfigDigitalFilter>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002072:	f000 f8fd 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000280 	.word	0x20000280
 8002080:	40005800 	.word	0x40005800
 8002084:	10909cec 	.word	0x10909cec

08002088 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <MX_SPI1_Init+0x74>)
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <MX_SPI1_Init+0x78>)
 8002090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_SPI1_Init+0x74>)
 8002094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_SPI1_Init+0x74>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <MX_SPI1_Init+0x74>)
 80020a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <MX_SPI1_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <MX_SPI1_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <MX_SPI1_Init+0x74>)
 80020b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_SPI1_Init+0x74>)
 80020be:	2238      	movs	r2, #56	; 0x38
 80020c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_SPI1_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_SPI1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <MX_SPI1_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_SPI1_Init+0x74>)
 80020d6:	2207      	movs	r2, #7
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <MX_SPI1_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_SPI1_Init+0x74>)
 80020e2:	2208      	movs	r2, #8
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_SPI1_Init+0x74>)
 80020e8:	f003 f93e 	bl	8005368 <HAL_SPI_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020f2:	f000 f8bd 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002d4 	.word	0x200002d4
 8002100:	40013000 	.word	0x40013000

08002104 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <MX_USART1_UART_Init+0x60>)
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <MX_USART1_UART_Init+0x64>)
 800210c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002114:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART1_UART_Init+0x60>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART1_UART_Init+0x60>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <MX_USART1_UART_Init+0x60>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002142:	2210      	movs	r2, #16
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART1_UART_Init+0x60>)
 8002150:	f003 fea8 	bl	8005ea4 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800215a:	f000 f889 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000338 	.word	0x20000338
 8002168:	40013800 	.word	0x40013800

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <MX_GPIO_Init+0xf8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a37      	ldr	r2, [pc, #220]	; (8002264 <MX_GPIO_Init+0xf8>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b35      	ldr	r3, [pc, #212]	; (8002264 <MX_GPIO_Init+0xf8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b32      	ldr	r3, [pc, #200]	; (8002264 <MX_GPIO_Init+0xf8>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a31      	ldr	r2, [pc, #196]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <MX_GPIO_Init+0xf8>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2110      	movs	r1, #16
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f001 f8f7 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f4:	481c      	ldr	r0, [pc, #112]	; (8002268 <MX_GPIO_Init+0xfc>)
 80021f6:	f001 f8f1 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	481b      	ldr	r0, [pc, #108]	; (800226c <MX_GPIO_Init+0x100>)
 8002200:	f001 f8ec 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002204:	2310      	movs	r3, #16
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f000 ff6b 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <MX_GPIO_Init+0xfc>)
 800223c:	f000 ff5c 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_GPIO_Init+0x100>)
 8002258:	f000 ff4e 	bl	80030f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	48000400 	.word	0x48000400
 800226c:	48000800 	.word	0x48000800

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002278:	e7fe      	b.n	8002278 <Error_Handler+0x8>

0800227a <ssd1306_Reset>:
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <ssd1306_WriteCommand>:
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	2300      	movs	r3, #0
 8002294:	733b      	strb	r3, [r7, #12]
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	737b      	strb	r3, [r7, #13]
 800229a:	f107 020c 	add.w	r2, r7, #12
 800229e:	2302      	movs	r3, #2
 80022a0:	2178      	movs	r1, #120	; 0x78
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <ssd1306_WriteCommand+0x28>)
 80022a4:	f7ff fa01 	bl	80016aa <I2C_SendData>
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40005800 	.word	0x40005800

080022b4 <ssd1306_WriteData>:
 80022b4:	b580      	push	{r7, lr}
 80022b6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022c0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80022c4:	6018      	str	r0, [r3, #0]
 80022c6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022ca:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80022ce:	6019      	str	r1, [r3, #0]
 80022d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022d4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80022e2:	e015      	b.n	8002310 <ssd1306_WriteData+0x5c>
 80022e4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80022e8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80022ec:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	441a      	add	r2, r3
 80022f4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80022f8:	3301      	adds	r3, #1
 80022fa:	7811      	ldrb	r1, [r2, #0]
 80022fc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002300:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8002304:	54d1      	strb	r1, [r2, r3]
 8002306:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800230a:	3301      	adds	r3, #1
 800230c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8002310:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002314:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002318:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d8e0      	bhi.n	80022e4 <ssd1306_WriteData+0x30>
 8002322:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002326:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f107 0208 	add.w	r2, r7, #8
 8002336:	2178      	movs	r1, #120	; 0x78
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <ssd1306_WriteData+0x94>)
 800233a:	f7ff f9b6 	bl	80016aa <I2C_SendData>
 800233e:	bf00      	nop
 8002340:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40005800 	.word	0x40005800

0800234c <ssd1306_Init>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	f7ff ff92 	bl	800227a <ssd1306_Reset>
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	e002      	b.n	8002362 <ssd1306_Init+0x16>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a31      	ldr	r2, [pc, #196]	; (800242c <ssd1306_Init+0xe0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d9f8      	bls.n	800235c <ssd1306_Init+0x10>
 800236a:	2000      	movs	r0, #0
 800236c:	f000 f9e8 	bl	8002740 <ssd1306_SetDisplayOn>
 8002370:	2020      	movs	r0, #32
 8002372:	f7ff ff89 	bl	8002288 <ssd1306_WriteCommand>
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff ff86 	bl	8002288 <ssd1306_WriteCommand>
 800237c:	20b0      	movs	r0, #176	; 0xb0
 800237e:	f7ff ff83 	bl	8002288 <ssd1306_WriteCommand>
 8002382:	20c8      	movs	r0, #200	; 0xc8
 8002384:	f7ff ff80 	bl	8002288 <ssd1306_WriteCommand>
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ff7d 	bl	8002288 <ssd1306_WriteCommand>
 800238e:	2010      	movs	r0, #16
 8002390:	f7ff ff7a 	bl	8002288 <ssd1306_WriteCommand>
 8002394:	2040      	movs	r0, #64	; 0x40
 8002396:	f7ff ff77 	bl	8002288 <ssd1306_WriteCommand>
 800239a:	20ff      	movs	r0, #255	; 0xff
 800239c:	f000 f9bc 	bl	8002718 <ssd1306_SetContrast>
 80023a0:	20a1      	movs	r0, #161	; 0xa1
 80023a2:	f7ff ff71 	bl	8002288 <ssd1306_WriteCommand>
 80023a6:	20a6      	movs	r0, #166	; 0xa6
 80023a8:	f7ff ff6e 	bl	8002288 <ssd1306_WriteCommand>
 80023ac:	203f      	movs	r0, #63	; 0x3f
 80023ae:	f7ff ff6b 	bl	8002288 <ssd1306_WriteCommand>
 80023b2:	20a4      	movs	r0, #164	; 0xa4
 80023b4:	f7ff ff68 	bl	8002288 <ssd1306_WriteCommand>
 80023b8:	20d3      	movs	r0, #211	; 0xd3
 80023ba:	f7ff ff65 	bl	8002288 <ssd1306_WriteCommand>
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff ff62 	bl	8002288 <ssd1306_WriteCommand>
 80023c4:	20d5      	movs	r0, #213	; 0xd5
 80023c6:	f7ff ff5f 	bl	8002288 <ssd1306_WriteCommand>
 80023ca:	20f0      	movs	r0, #240	; 0xf0
 80023cc:	f7ff ff5c 	bl	8002288 <ssd1306_WriteCommand>
 80023d0:	20d9      	movs	r0, #217	; 0xd9
 80023d2:	f7ff ff59 	bl	8002288 <ssd1306_WriteCommand>
 80023d6:	2022      	movs	r0, #34	; 0x22
 80023d8:	f7ff ff56 	bl	8002288 <ssd1306_WriteCommand>
 80023dc:	20da      	movs	r0, #218	; 0xda
 80023de:	f7ff ff53 	bl	8002288 <ssd1306_WriteCommand>
 80023e2:	2012      	movs	r0, #18
 80023e4:	f7ff ff50 	bl	8002288 <ssd1306_WriteCommand>
 80023e8:	20db      	movs	r0, #219	; 0xdb
 80023ea:	f7ff ff4d 	bl	8002288 <ssd1306_WriteCommand>
 80023ee:	2020      	movs	r0, #32
 80023f0:	f7ff ff4a 	bl	8002288 <ssd1306_WriteCommand>
 80023f4:	208d      	movs	r0, #141	; 0x8d
 80023f6:	f7ff ff47 	bl	8002288 <ssd1306_WriteCommand>
 80023fa:	2014      	movs	r0, #20
 80023fc:	f7ff ff44 	bl	8002288 <ssd1306_WriteCommand>
 8002400:	2001      	movs	r0, #1
 8002402:	f000 f99d 	bl	8002740 <ssd1306_SetDisplayOn>
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f814 	bl	8002434 <ssd1306_Fill>
 800240c:	f000 f836 	bl	800247c <ssd1306_UpdateScreen>
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <ssd1306_Init+0xe4>)
 8002412:	2200      	movs	r2, #0
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <ssd1306_Init+0xe4>)
 8002418:	2200      	movs	r2, #0
 800241a:	805a      	strh	r2, [r3, #2]
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <ssd1306_Init+0xe4>)
 800241e:	2201      	movs	r2, #1
 8002420:	715a      	strb	r2, [r3, #5]
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	0001869f 	.word	0x0001869f
 8002430:	20000a30 	.word	0x20000a30

08002434 <ssd1306_Fill>:
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e00d      	b.n	8002460 <ssd1306_Fill+0x2c>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <ssd1306_Fill+0x1a>
 800244a:	2100      	movs	r1, #0
 800244c:	e000      	b.n	8002450 <ssd1306_Fill+0x1c>
 800244e:	21ff      	movs	r1, #255	; 0xff
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <ssd1306_Fill+0x44>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	460a      	mov	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d3ed      	bcc.n	8002444 <ssd1306_Fill+0x10>
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000630 	.word	0x20000630

0800247c <ssd1306_UpdateScreen>:
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	2300      	movs	r3, #0
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e016      	b.n	80024b6 <ssd1306_UpdateScreen+0x3a>
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	3b50      	subs	r3, #80	; 0x50
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fefa 	bl	8002288 <ssd1306_WriteCommand>
 8002494:	2000      	movs	r0, #0
 8002496:	f7ff fef7 	bl	8002288 <ssd1306_WriteCommand>
 800249a:	2010      	movs	r0, #16
 800249c:	f7ff fef4 	bl	8002288 <ssd1306_WriteCommand>
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	01db      	lsls	r3, r3, #7
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <ssd1306_UpdateScreen+0x4c>)
 80024a6:	4413      	add	r3, r2
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff02 	bl	80022b4 <ssd1306_WriteData>
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	3301      	adds	r3, #1
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b07      	cmp	r3, #7
 80024ba:	d9e5      	bls.n	8002488 <ssd1306_UpdateScreen+0xc>
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000630 	.word	0x20000630

080024cc <ssd1306_DrawPixel>:
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	460b      	mov	r3, r1
 80024d8:	71bb      	strb	r3, [r7, #6]
 80024da:	4613      	mov	r3, r2
 80024dc:	717b      	strb	r3, [r7, #5]
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db48      	blt.n	8002578 <ssd1306_DrawPixel+0xac>
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	2b3f      	cmp	r3, #63	; 0x3f
 80024ea:	d845      	bhi.n	8002578 <ssd1306_DrawPixel+0xac>
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <ssd1306_DrawPixel+0xb8>)
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <ssd1306_DrawPixel+0x36>
 80024f4:	797b      	ldrb	r3, [r7, #5]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	717b      	strb	r3, [r7, #5]
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d11a      	bne.n	800253e <ssd1306_DrawPixel+0x72>
 8002508:	79fa      	ldrb	r2, [r7, #7]
 800250a:	79bb      	ldrb	r3, [r7, #6]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	b2d8      	uxtb	r0, r3
 8002510:	4603      	mov	r3, r0
 8002512:	01db      	lsls	r3, r3, #7
 8002514:	4413      	add	r3, r2
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <ssd1306_DrawPixel+0xbc>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	b25a      	sxtb	r2, r3
 800251c:	79bb      	ldrb	r3, [r7, #6]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	b25b      	sxtb	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	b259      	sxtb	r1, r3
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	4603      	mov	r3, r0
 8002532:	01db      	lsls	r3, r3, #7
 8002534:	4413      	add	r3, r2
 8002536:	b2c9      	uxtb	r1, r1
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <ssd1306_DrawPixel+0xbc>)
 800253a:	54d1      	strb	r1, [r2, r3]
 800253c:	e01d      	b.n	800257a <ssd1306_DrawPixel+0xae>
 800253e:	79fa      	ldrb	r2, [r7, #7]
 8002540:	79bb      	ldrb	r3, [r7, #6]
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	b2d8      	uxtb	r0, r3
 8002546:	4603      	mov	r3, r0
 8002548:	01db      	lsls	r3, r3, #7
 800254a:	4413      	add	r3, r2
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <ssd1306_DrawPixel+0xbc>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	b25a      	sxtb	r2, r3
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	b25b      	sxtb	r3, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	b25b      	sxtb	r3, r3
 8002564:	4013      	ands	r3, r2
 8002566:	b259      	sxtb	r1, r3
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	4603      	mov	r3, r0
 800256c:	01db      	lsls	r3, r3, #7
 800256e:	4413      	add	r3, r2
 8002570:	b2c9      	uxtb	r1, r1
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <ssd1306_DrawPixel+0xbc>)
 8002574:	54d1      	strb	r1, [r2, r3]
 8002576:	e000      	b.n	800257a <ssd1306_DrawPixel+0xae>
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	20000a30 	.word	0x20000a30
 8002588:	20000630 	.word	0x20000630

0800258c <ssd1306_WriteChar>:
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	4604      	mov	r4, r0
 8002594:	1d38      	adds	r0, r7, #4
 8002596:	e880 0006 	stmia.w	r0, {r1, r2}
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	4613      	mov	r3, r2
 80025a2:	73bb      	strb	r3, [r7, #14]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b1f      	cmp	r3, #31
 80025a8:	d902      	bls.n	80025b0 <ssd1306_WriteChar+0x24>
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b7e      	cmp	r3, #126	; 0x7e
 80025ae:	d901      	bls.n	80025b4 <ssd1306_WriteChar+0x28>
 80025b0:	2300      	movs	r3, #0
 80025b2:	e06d      	b.n	8002690 <ssd1306_WriteChar+0x104>
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <ssd1306_WriteChar+0x10c>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	793b      	ldrb	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	dc06      	bgt.n	80025d0 <ssd1306_WriteChar+0x44>
 80025c2:	4b35      	ldr	r3, [pc, #212]	; (8002698 <ssd1306_WriteChar+0x10c>)
 80025c4:	885b      	ldrh	r3, [r3, #2]
 80025c6:	461a      	mov	r2, r3
 80025c8:	797b      	ldrb	r3, [r7, #5]
 80025ca:	4413      	add	r3, r2
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	dd01      	ble.n	80025d4 <ssd1306_WriteChar+0x48>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e05d      	b.n	8002690 <ssd1306_WriteChar+0x104>
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e04c      	b.n	8002674 <ssd1306_WriteChar+0xe8>
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	3b20      	subs	r3, #32
 80025e0:	7979      	ldrb	r1, [r7, #5]
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	440b      	add	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e034      	b.n	8002664 <ssd1306_WriteChar+0xd8>
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <ssd1306_WriteChar+0xa4>
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <ssd1306_WriteChar+0x10c>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <ssd1306_WriteChar+0x10c>)
 800261a:	885b      	ldrh	r3, [r3, #2]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4413      	add	r3, r2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	7bba      	ldrb	r2, [r7, #14]
 8002628:	4619      	mov	r1, r3
 800262a:	f7ff ff4f 	bl	80024cc <ssd1306_DrawPixel>
 800262e:	e016      	b.n	800265e <ssd1306_WriteChar+0xd2>
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <ssd1306_WriteChar+0x10c>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4413      	add	r3, r2
 800263c:	b2d8      	uxtb	r0, r3
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <ssd1306_WriteChar+0x10c>)
 8002640:	885b      	ldrh	r3, [r3, #2]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4413      	add	r3, r2
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	f7ff ff37 	bl	80024cc <ssd1306_DrawPixel>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3301      	adds	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	793b      	ldrb	r3, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4293      	cmp	r3, r2
 800266c:	d3c5      	bcc.n	80025fa <ssd1306_WriteChar+0x6e>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	797b      	ldrb	r3, [r7, #5]
 8002676:	461a      	mov	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4293      	cmp	r3, r2
 800267c:	d3ad      	bcc.n	80025da <ssd1306_WriteChar+0x4e>
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <ssd1306_WriteChar+0x10c>)
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	793b      	ldrb	r3, [r7, #4]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4413      	add	r3, r2
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b03      	ldr	r3, [pc, #12]	; (8002698 <ssd1306_WriteChar+0x10c>)
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	4618      	mov	r0, r3
 8002692:	3724      	adds	r7, #36	; 0x24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	20000a30 	.word	0x20000a30

0800269c <ssd1306_WriteString>:
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	1d38      	adds	r0, r7, #4
 80026a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80026aa:	70fb      	strb	r3, [r7, #3]
 80026ac:	e012      	b.n	80026d4 <ssd1306_WriteString+0x38>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	7818      	ldrb	r0, [r3, #0]
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	1d3a      	adds	r2, r7, #4
 80026b6:	ca06      	ldmia	r2, {r1, r2}
 80026b8:	f7ff ff68 	bl	800258c <ssd1306_WriteChar>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d002      	beq.n	80026ce <ssd1306_WriteString+0x32>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	e008      	b.n	80026e0 <ssd1306_WriteString+0x44>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e8      	bne.n	80026ae <ssd1306_WriteString+0x12>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <ssd1306_SetCursor>:
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71bb      	strb	r3, [r7, #6]
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <ssd1306_SetCursor+0x2c>)
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <ssd1306_SetCursor+0x2c>)
 8002706:	805a      	strh	r2, [r3, #2]
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	20000a30 	.word	0x20000a30

08002718 <ssd1306_SetContrast>:
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	2381      	movs	r3, #129	; 0x81
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fdad 	bl	8002288 <ssd1306_WriteCommand>
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fda9 	bl	8002288 <ssd1306_WriteCommand>
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <ssd1306_SetDisplayOn>:
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <ssd1306_SetDisplayOn+0x1c>
 8002750:	23af      	movs	r3, #175	; 0xaf
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <ssd1306_SetDisplayOn+0x38>)
 8002756:	2201      	movs	r2, #1
 8002758:	719a      	strb	r2, [r3, #6]
 800275a:	e004      	b.n	8002766 <ssd1306_SetDisplayOn+0x26>
 800275c:	23ae      	movs	r3, #174	; 0xae
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <ssd1306_SetDisplayOn+0x38>)
 8002762:	2200      	movs	r2, #0
 8002764:	719a      	strb	r2, [r3, #6]
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fd8d 	bl	8002288 <ssd1306_WriteCommand>
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000a30 	.word	0x20000a30

0800277c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_MspInit+0x44>)
 8002784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_MspInit+0x44>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6613      	str	r3, [r2, #96]	; 0x60
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_MspInit+0x44>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_MspInit+0x44>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_MspInit+0x44>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_MspInit+0x44>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000

080027c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b098      	sub	sp, #96	; 0x60
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027dc:	f107 0318 	add.w	r3, r7, #24
 80027e0:	2234      	movs	r2, #52	; 0x34
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f009 fc5a 	bl	800c09e <memset>
  if(hi2c->Instance==I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <HAL_I2C_MspInit+0x124>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d138      	bne.n	8002866 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027f4:	2340      	movs	r3, #64	; 0x40
 80027f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fc:	f107 0318 	add.w	r3, r7, #24
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fc2b 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800280c:	f7ff fd30 	bl	8002270 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_I2C_MspInit+0x128>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4a35      	ldr	r2, [pc, #212]	; (80028ec <HAL_I2C_MspInit+0x128>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281c:	4b33      	ldr	r3, [pc, #204]	; (80028ec <HAL_I2C_MspInit+0x128>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 8002828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800282c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800282e:	2312      	movs	r3, #18
 8002830:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800283a:	2304      	movs	r3, #4
 800283c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002848:	f000 fc56 	bl	80030f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_I2C_MspInit+0x128>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_I2C_MspInit+0x128>)
 8002852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002856:	6593      	str	r3, [r2, #88]	; 0x58
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_I2C_MspInit+0x128>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002864:	e03b      	b.n	80028de <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <HAL_I2C_MspInit+0x12c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d136      	bne.n	80028de <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002874:	2300      	movs	r3, #0
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002878:	f107 0318 	add.w	r3, r7, #24
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fbed 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 8002888:	f7ff fcf2 	bl	8002270 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_I2C_MspInit+0x128>)
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_I2C_MspInit+0x128>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_I2C_MspInit+0x128>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 80028a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028aa:	2312      	movs	r3, #18
 80028ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028b6:	2304      	movs	r3, #4
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028be:	4619      	mov	r1, r3
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <HAL_I2C_MspInit+0x130>)
 80028c2:	f000 fc19 	bl	80030f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_I2C_MspInit+0x128>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_I2C_MspInit+0x128>)
 80028cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d0:	6593      	str	r3, [r2, #88]	; 0x58
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_I2C_MspInit+0x128>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	bf00      	nop
 80028e0:	3760      	adds	r7, #96	; 0x60
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40005400 	.word	0x40005400
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40005800 	.word	0x40005800
 80028f4:	48000400 	.word	0x48000400

080028f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_SPI_MspInit+0x7c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d128      	bne.n	800296c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_SPI_MspInit+0x80>)
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_SPI_MspInit+0x80>)
 8002920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002924:	6613      	str	r3, [r2, #96]	; 0x60
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_SPI_MspInit+0x80>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_SPI_MspInit+0x80>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_SPI_MspInit+0x80>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_SPI_MspInit+0x80>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800294a:	23c2      	movs	r3, #194	; 0xc2
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800295a:	2305      	movs	r3, #5
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002968:	f000 fbc6 	bl	80030f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40013000 	.word	0x40013000
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b096      	sub	sp, #88	; 0x58
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	2234      	movs	r2, #52	; 0x34
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f009 fb7e 	bl	800c09e <memset>
  if(huart->Instance==USART1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_UART_MspInit+0xb4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d13d      	bne.n	8002a28 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fb4f 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029c4:	f7ff fc54 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_UART_MspInit+0xb8>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_UART_MspInit+0xb8>)
 80029ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d2:	6613      	str	r3, [r2, #96]	; 0x60
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_UART_MspInit+0xb8>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_UART_MspInit+0xb8>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <HAL_UART_MspInit+0xb8>)
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_UART_MspInit+0xb8>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80029f8:	23c0      	movs	r3, #192	; 0xc0
 80029fa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a08:	2307      	movs	r3, #7
 8002a0a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a10:	4619      	mov	r1, r3
 8002a12:	4809      	ldr	r0, [pc, #36]	; (8002a38 <HAL_UART_MspInit+0xbc>)
 8002a14:	f000 fb70 	bl	80030f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2025      	movs	r0, #37	; 0x25
 8002a1e:	f000 fab6 	bl	8002f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a22:	2025      	movs	r0, #37	; 0x25
 8002a24:	f000 facf 	bl	8002fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a28:	bf00      	nop
 8002a2a:	3758      	adds	r7, #88	; 0x58
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	48000400 	.word	0x48000400

08002a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <NMI_Handler+0x4>

08002a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <HardFault_Handler+0x4>

08002a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <MemManage_Handler+0x4>

08002a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <BusFault_Handler+0x4>

08002a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <UsageFault_Handler+0x4>

08002a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a88:	f000 f962 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <USART1_IRQHandler+0x10>)
 8002a96:	f003 fa9f 	bl	8005fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000338 	.word	0x20000338

08002aa4 <_getpid>:
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_kill>:
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	f009 fbcf 	bl	800c260 <__errno>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2216      	movs	r2, #22
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_exit>:
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffe7 	bl	8002ab4 <_kill>
 8002ae6:	e7fe      	b.n	8002ae6 <_exit+0x12>

08002ae8 <_read>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	e00a      	b.n	8002b10 <_read+0x28>
 8002afa:	f3af 8000 	nop.w
 8002afe:	4601      	mov	r1, r0
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	b2ca      	uxtb	r2, r1
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	dbf0      	blt.n	8002afa <_read+0x12>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_write>:
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e009      	b.n	8002b48 <_write+0x26>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	60ba      	str	r2, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f3af 8000 	nop.w
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3301      	adds	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dbf1      	blt.n	8002b34 <_write+0x12>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_close>:
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <_fstat>:
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	2300      	movs	r3, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_isatty>:
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_lseek>:
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <_sbrk>:
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
 8002bf4:	f009 fb34 	bl	800c260 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2000a000 	.word	0x2000a000
 8002c24:	00004000 	.word	0x00004000
 8002c28:	20000a38 	.word	0x20000a38
 8002c2c:	20000bd8 	.word	0x20000bd8

08002c30 <SystemInit>:
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <SystemInit+0x20>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SystemInit+0x20>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <Reset_Handler>:
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopForever+0x2>
 8002c58:	f7ff ffea 	bl	8002c30 <SystemInit>
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <LoopForever+0x6>)
 8002c5e:	490d      	ldr	r1, [pc, #52]	; (8002c94 <LoopForever+0xa>)
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <LoopForever+0xe>)
 8002c62:	2300      	movs	r3, #0
 8002c64:	e002      	b.n	8002c6c <LoopCopyDataInit>

08002c66 <CopyDataInit>:
 8002c66:	58d4      	ldr	r4, [r2, r3]
 8002c68:	50c4      	str	r4, [r0, r3]
 8002c6a:	3304      	adds	r3, #4

08002c6c <LoopCopyDataInit>:
 8002c6c:	18c4      	adds	r4, r0, r3
 8002c6e:	428c      	cmp	r4, r1
 8002c70:	d3f9      	bcc.n	8002c66 <CopyDataInit>
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <LoopForever+0x12>)
 8002c74:	4c0a      	ldr	r4, [pc, #40]	; (8002ca0 <LoopForever+0x16>)
 8002c76:	2300      	movs	r3, #0
 8002c78:	e001      	b.n	8002c7e <LoopFillZerobss>

08002c7a <FillZerobss>:
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	3204      	adds	r2, #4

08002c7e <LoopFillZerobss>:
 8002c7e:	42a2      	cmp	r2, r4
 8002c80:	d3fb      	bcc.n	8002c7a <FillZerobss>
 8002c82:	f009 faf3 	bl	800c26c <__libc_init_array>
 8002c86:	f7fe fefb 	bl	8001a80 <main>

08002c8a <LoopForever>:
 8002c8a:	e7fe      	b.n	8002c8a <LoopForever>
 8002c8c:	2000a000 	.word	0x2000a000
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000210 	.word	0x20000210
 8002c98:	08012b90 	.word	0x08012b90
 8002c9c:	20000210 	.word	0x20000210
 8002ca0:	20000bd4 	.word	0x20000bd4

08002ca4 <ADC1_2_IRQHandler>:
 8002ca4:	e7fe      	b.n	8002ca4 <ADC1_2_IRQHandler>

08002ca6 <HAL_Init>:
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	2300      	movs	r3, #0
 8002cae:	71fb      	strb	r3, [r7, #7]
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 f961 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>
 8002cb6:	200f      	movs	r0, #15
 8002cb8:	f000 f80e 	bl	8002cd8 <HAL_InitTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_Init+0x22>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	71fb      	strb	r3, [r7, #7]
 8002cc6:	e001      	b.n	8002ccc <HAL_Init+0x26>
 8002cc8:	f7ff fd58 	bl	800277c <HAL_MspInit>
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_InitTick>:
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_InitTick+0x6c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_InitTick+0x5c>
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_InitTick+0x70>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_InitTick+0x6c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f96d 	bl	8002fe2 <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_InitTick+0x56>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d809      	bhi.n	8002d28 <HAL_InitTick+0x50>
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 f937 	bl	8002f8e <HAL_NVIC_SetPriority>
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_InitTick+0x74>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_InitTick+0x60>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e004      	b.n	8002d38 <HAL_InitTick+0x60>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e001      	b.n	8002d38 <HAL_InitTick+0x60>
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000018 	.word	0x20000018
 8002d48:	20000010 	.word	0x20000010
 8002d4c:	20000014 	.word	0x20000014

08002d50 <HAL_IncTick>:
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x20>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_IncTick+0x24>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000018 	.word	0x20000018
 8002d74:	20000a3c 	.word	0x20000a3c

08002d78 <HAL_GetTick>:
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_GetTick+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000a3c 	.word	0x20000a3c

08002d90 <HAL_Delay>:
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	bf00      	nop
 8002db8:	f7ff ffde 	bl	8002d78 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000018 	.word	0x20000018

08002dd8 <__NVIC_SetPriorityGrouping>:
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_EnableIRQ>:
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db0b      	blt.n	8002e66 <__NVIC_EnableIRQ+0x2a>
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4907      	ldr	r1, [pc, #28]	; (8002e74 <__NVIC_EnableIRQ+0x38>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <SysTick_Config>:
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f44:	d301      	bcc.n	8002f4a <SysTick_Config+0x16>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <SysTick_Config+0x36>
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <SysTick_Config+0x40>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	210f      	movs	r1, #15
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f7ff ff8e 	bl	8002e78 <__NVIC_SetPriority>
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <SysTick_Config+0x40>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <SysTick_Config+0x40>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriorityGrouping>:
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff29 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_SetPriority>:
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	f7ff ff3e 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002fa4:	6178      	str	r0, [r7, #20]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff8e 	bl	8002ecc <NVIC_EncodePriority>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff5d 	bl	8002e78 <__NVIC_SetPriority>
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_EnableIRQ>:
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff31 	bl	8002e3c <__NVIC_EnableIRQ>
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_SYSTICK_Config>:
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ffa2 	bl	8002f34 <SysTick_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_DMA_Abort>:
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d008      	beq.n	8003024 <HAL_DMA_Abort+0x2a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2204      	movs	r2, #4
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003020:	2301      	movs	r3, #1
 8003022:	e022      	b.n	800306a <HAL_DMA_Abort+0x70>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 020e 	bic.w	r2, r2, #14
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f003 021c 	and.w	r2, r3, #28
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_DMA_Abort_IT>:
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d005      	beq.n	800309a <HAL_DMA_Abort_IT+0x24>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	e029      	b.n	80030ee <HAL_DMA_Abort_IT+0x78>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 020e 	bic.w	r2, r2, #14
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f003 021c 	and.w	r2, r3, #28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_DMA_Abort_IT+0x78>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_GPIO_Init>:
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e14e      	b.n	80033a6 <HAL_GPIO_Init+0x2ae>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8140 	beq.w	80033a0 <HAL_GPIO_Init+0x2a8>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d005      	beq.n	8003138 <HAL_GPIO_Init+0x40>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d130      	bne.n	800319a <HAL_GPIO_Init+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	2201      	movs	r2, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 0201 	and.w	r2, r3, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d017      	beq.n	80031d6 <HAL_GPIO_Init+0xde>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d123      	bne.n	800322a <HAL_GPIO_Init+0x132>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0203 	and.w	r2, r3, #3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 809a 	beq.w	80033a0 <HAL_GPIO_Init+0x2a8>
 800326c:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <HAL_GPIO_Init+0x2cc>)
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_GPIO_Init+0x2cc>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6613      	str	r3, [r2, #96]	; 0x60
 8003278:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <HAL_GPIO_Init+0x2cc>)
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	220f      	movs	r2, #15
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ae:	d013      	beq.n	80032d8 <HAL_GPIO_Init+0x1e0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a46      	ldr	r2, [pc, #280]	; (80033cc <HAL_GPIO_Init+0x2d4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00d      	beq.n	80032d4 <HAL_GPIO_Init+0x1dc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <HAL_GPIO_Init+0x2d8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x1d8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a44      	ldr	r2, [pc, #272]	; (80033d4 <HAL_GPIO_Init+0x2dc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_GPIO_Init+0x1d4>
 80032c8:	2303      	movs	r3, #3
 80032ca:	e006      	b.n	80032da <HAL_GPIO_Init+0x1e2>
 80032cc:	2307      	movs	r3, #7
 80032ce:	e004      	b.n	80032da <HAL_GPIO_Init+0x1e2>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e002      	b.n	80032da <HAL_GPIO_Init+0x1e2>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_GPIO_Init+0x1e2>
 80032d8:	2300      	movs	r3, #0
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	f002 0203 	and.w	r2, r2, #3
 80032e0:	0092      	lsls	r2, r2, #2
 80032e2:	4093      	lsls	r3, r2
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80032f8:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x224>
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	6093      	str	r3, [r2, #8]
 8003322:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x24e>
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	60d3      	str	r3, [r2, #12]
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x278>
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6053      	str	r3, [r2, #4]
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x2a2>
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_GPIO_Init+0x2e0>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f aea9 	bne.w	8003108 <HAL_GPIO_Init+0x10>
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010000 	.word	0x40010000
 80033cc:	48000400 	.word	0x48000400
 80033d0:	48000800 	.word	0x48000800
 80033d4:	48000c00 	.word	0x48000c00
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_WritePin>:
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_WritePin+0x24>
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_GPIO_TogglePin>:
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43d9      	mvns	r1, r3
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	400b      	ands	r3, r1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	619a      	str	r2, [r3, #24]
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_I2C_Init>:
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Init+0x12>
 800344e:	2301      	movs	r3, #1
 8003450:	e08d      	b.n	800356e <HAL_I2C_Init+0x12e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_I2C_Init+0x2c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff f9ac 	bl	80027c4 <HAL_I2C_MspInit>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_I2C_Init+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e006      	b.n	80034c8 <HAL_I2C_Init+0x88>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d108      	bne.n	80034e2 <HAL_I2C_Init+0xa2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	e007      	b.n	80034f2 <HAL_I2C_Init+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003504:	6053      	str	r3, [r2, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	2300      	movs	r3, #0
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_I2C_Mem_Write>:
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	f040 80f9 	bne.w	8003792 <HAL_I2C_Mem_Write+0x21a>
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_I2C_Mem_Write+0x34>
 80035a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_I2C_Mem_Write+0x40>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0ed      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Mem_Write+0x4e>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e0e6      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ce:	f7ff fbd3 	bl	8002d78 <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2319      	movs	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fbcd 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x78>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d1      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2240      	movs	r2, #64	; 0x40
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	635a      	str	r2, [r3, #52]	; 0x34
 8003618:	88f8      	ldrh	r0, [r7, #6]
 800361a:	893a      	ldrh	r2, [r7, #8]
 800361c:	8979      	ldrh	r1, [r7, #10]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4603      	mov	r3, r0
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fadd 	bl	8003be8 <I2C_RequestMemoryWrite>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_I2C_Mem_Write+0xc8>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	2301      	movs	r3, #1
 800363e:	e0a9      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2bff      	cmp	r3, #255	; 0xff
 8003648:	d90e      	bls.n	8003668 <HAL_I2C_Mem_Write+0xf0>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	b2da      	uxtb	r2, r3
 8003656:	8979      	ldrh	r1, [r7, #10]
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fd47 	bl	80040f4 <I2C_TransferConfig>
 8003666:	e00f      	b.n	8003688 <HAL_I2C_Mem_Write+0x110>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	; 0x28
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	b2da      	uxtb	r2, r3
 8003678:	8979      	ldrh	r1, [r7, #10]
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fd36 	bl	80040f4 <I2C_TransferConfig>
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fbc6 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Write+0x124>
 8003698:	2301      	movs	r3, #1
 800369a:	e07b      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d034      	beq.n	8003740 <HAL_I2C_Mem_Write+0x1c8>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d130      	bne.n	8003740 <HAL_I2C_Mem_Write+0x1c8>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2200      	movs	r2, #0
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fb49 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x180>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04d      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2bff      	cmp	r3, #255	; 0xff
 8003700:	d90e      	bls.n	8003720 <HAL_I2C_Mem_Write+0x1a8>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	b2da      	uxtb	r2, r3
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	2300      	movs	r3, #0
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fceb 	bl	80040f4 <I2C_TransferConfig>
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Mem_Write+0x1c8>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	b2da      	uxtb	r2, r3
 8003730:	8979      	ldrh	r1, [r7, #10]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fcda 	bl	80040f4 <I2C_TransferConfig>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d19e      	bne.n	8003688 <HAL_I2C_Mem_Write+0x110>
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fbac 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Mem_Write+0x1e6>
 800375a:	2301      	movs	r3, #1
 800375c:	e01a      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2220      	movs	r2, #32
 8003764:	61da      	str	r2, [r3, #28]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_I2C_Mem_Write+0x224>)
 8003772:	400b      	ands	r3, r1
 8003774:	6053      	str	r3, [r2, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 8003792:	2302      	movs	r3, #2
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fe00e800 	.word	0xfe00e800

080037a0 <HAL_I2C_Mem_Read>:
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	f040 80fd 	bne.w	80039c2 <HAL_I2C_Mem_Read+0x222>
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x34>
 80037ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_I2C_Mem_Read+0x40>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
 80037dc:	2301      	movs	r3, #1
 80037de:	e0f1      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_I2C_Mem_Read+0x4e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0ea      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f6:	f7ff fabf 	bl	8002d78 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2319      	movs	r3, #25
 8003802:	2201      	movs	r2, #1
 8003804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fab9 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Mem_Read+0x78>
 8003814:	2301      	movs	r3, #1
 8003816:	e0d5      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2222      	movs	r2, #34	; 0x22
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
 8003840:	88f8      	ldrh	r0, [r7, #6]
 8003842:	893a      	ldrh	r2, [r7, #8]
 8003844:	8979      	ldrh	r1, [r7, #10]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	4603      	mov	r3, r0
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fa1d 	bl	8003c90 <I2C_RequestMemoryRead>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_I2C_Mem_Read+0xc8>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003864:	2301      	movs	r3, #1
 8003866:	e0ad      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2bff      	cmp	r3, #255	; 0xff
 8003870:	d90e      	bls.n	8003890 <HAL_I2C_Mem_Read+0xf0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	b2da      	uxtb	r2, r3
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	4b52      	ldr	r3, [pc, #328]	; (80039cc <HAL_I2C_Mem_Read+0x22c>)
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fc33 	bl	80040f4 <I2C_TransferConfig>
 800388e:	e00f      	b.n	80038b0 <HAL_I2C_Mem_Read+0x110>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_I2C_Mem_Read+0x22c>)
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fc22 	bl	80040f4 <I2C_TransferConfig>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	2200      	movs	r2, #0
 80038b8:	2104      	movs	r1, #4
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fa60 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Mem_Read+0x12a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07c      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d034      	beq.n	8003970 <HAL_I2C_Mem_Read+0x1d0>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d130      	bne.n	8003970 <HAL_I2C_Mem_Read+0x1d0>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fa31 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x188>
 8003924:	2301      	movs	r3, #1
 8003926:	e04d      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2bff      	cmp	r3, #255	; 0xff
 8003930:	d90e      	bls.n	8003950 <HAL_I2C_Mem_Read+0x1b0>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	b2da      	uxtb	r2, r3
 800393e:	8979      	ldrh	r1, [r7, #10]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fbd3 	bl	80040f4 <I2C_TransferConfig>
 800394e:	e00f      	b.n	8003970 <HAL_I2C_Mem_Read+0x1d0>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	b2da      	uxtb	r2, r3
 8003960:	8979      	ldrh	r1, [r7, #10]
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fbc2 	bl	80040f4 <I2C_TransferConfig>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d19a      	bne.n	80038b0 <HAL_I2C_Mem_Read+0x110>
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fa94 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Mem_Read+0x1ee>
 800398a:	2301      	movs	r3, #1
 800398c:	e01a      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2220      	movs	r2, #32
 8003994:	61da      	str	r2, [r3, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_I2C_Mem_Read+0x230>)
 80039a2:	400b      	ands	r3, r1
 80039a4:	6053      	str	r3, [r2, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 80039c2:	2302      	movs	r3, #2
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	80002400 	.word	0x80002400
 80039d0:	fe00e800 	.word	0xfe00e800

080039d4 <HAL_I2C_IsDeviceReady>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	f040 80f3 	bne.w	8003bdc <HAL_I2C_IsDeviceReady+0x208>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a04:	d101      	bne.n	8003a0a <HAL_I2C_IsDeviceReady+0x36>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0e9      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2C_IsDeviceReady+0x44>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0e2      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_I2C_IsDeviceReady+0x72>
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a44:	e006      	b.n	8003a54 <HAL_I2C_IsDeviceReady+0x80>
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a50:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	f7ff f98d 	bl	8002d78 <HAL_GetTick>
 8003a5e:	61b8      	str	r0, [r7, #24]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	77bb      	strb	r3, [r7, #30]
 8003a8c:	e034      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x124>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d01a      	beq.n	8003acc <HAL_I2C_IsDeviceReady+0xf8>
 8003a96:	f7ff f96f 	bl	8002d78 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <HAL_I2C_IsDeviceReady+0xd8>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <HAL_I2C_IsDeviceReady+0xf8>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e088      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	77bb      	strb	r3, [r7, #30]
 8003af8:	7ffb      	ldrb	r3, [r7, #31]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_I2C_IsDeviceReady+0x130>
 8003afe:	7fbb      	ldrb	r3, [r7, #30]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0c4      	beq.n	8003a8e <HAL_I2C_IsDeviceReady+0xba>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d01a      	beq.n	8003b48 <HAL_I2C_IsDeviceReady+0x174>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f92f 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_IsDeviceReady+0x158>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e058      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	61da      	str	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b44:	2300      	movs	r3, #0
 8003b46:	e04a      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2120      	movs	r1, #32
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f914 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_IsDeviceReady+0x18e>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03d      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2210      	movs	r2, #16
 8003b68:	61da      	str	r2, [r3, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	61da      	str	r2, [r3, #28]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d118      	bne.n	8003bac <HAL_I2C_IsDeviceReady+0x1d8>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2200      	movs	r2, #0
 8003b92:	2120      	movs	r1, #32
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f8f3 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_IsDeviceReady+0x1d0>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e01c      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	61da      	str	r2, [r3, #28]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	f63f af39 	bhi.w	8003a2e <HAL_I2C_IsDeviceReady+0x5a>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_I2C_IsDeviceReady+0x20a>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <I2C_RequestMemoryWrite>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	8979      	ldrh	r1, [r7, #10]
 8003c08:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <I2C_RequestMemoryWrite+0xa4>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fa6f 	bl	80040f4 <I2C_TransferConfig>
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	69b9      	ldr	r1, [r7, #24]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8ff 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_RequestMemoryWrite+0x42>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02c      	b.n	8003c84 <I2C_RequestMemoryWrite+0x9c>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <I2C_RequestMemoryWrite+0x54>
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
 8003c3a:	e015      	b.n	8003c68 <I2C_RequestMemoryWrite+0x80>
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f8e5 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_RequestMemoryWrite+0x76>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e012      	b.n	8003c84 <I2C_RequestMemoryWrite+0x9c>
 8003c5e:	893b      	ldrh	r3, [r7, #8]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f884 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_RequestMemoryWrite+0x9a>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <I2C_RequestMemoryWrite+0x9c>
 8003c82:	2300      	movs	r3, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	80002000 	.word	0x80002000

08003c90 <I2C_RequestMemoryRead>:
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	8979      	ldrh	r1, [r7, #10]
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <I2C_RequestMemoryRead+0xa4>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa1c 	bl	80040f4 <I2C_TransferConfig>
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8ac 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <I2C_RequestMemoryRead+0x40>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e02c      	b.n	8003d2a <I2C_RequestMemoryRead+0x9a>
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <I2C_RequestMemoryRead+0x52>
 8003cd6:	893b      	ldrh	r3, [r7, #8]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce0:	e015      	b.n	8003d0e <I2C_RequestMemoryRead+0x7e>
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f892 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <I2C_RequestMemoryRead+0x74>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e012      	b.n	8003d2a <I2C_RequestMemoryRead+0x9a>
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f831 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryRead+0x98>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <I2C_RequestMemoryRead+0x9a>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	80002000 	.word	0x80002000

08003d38 <I2C_Flush_TXDR>:
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d103      	bne.n	8003d56 <I2C_Flush_TXDR+0x1e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d007      	beq.n	8003d74 <I2C_Flush_TXDR+0x3c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	619a      	str	r2, [r3, #24]
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <I2C_WaitOnFlagUntilTimeout>:
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
 8003d90:	e031      	b.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x76>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d02d      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x76>
 8003d9a:	f7fe ffed 	bl	8002d78 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d122      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x76>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d113      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x76>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00f      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x96>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0be      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x12>
 8003e14:	2300      	movs	r3, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2C_WaitOnTXISFlagUntilTimeout>:
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	e033      	b.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f87f 	bl	8003f34 <I2C_IsErrorOccurred>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e031      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d025      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003e48:	f7fe ff96 	bl	8002d78 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11a      	bne.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d013      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d1c4      	bne.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnSTOPFlagUntilTimeout>:
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	e02f      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f838 	bl	8003f34 <I2C_IsErrorOccurred>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8003ece:	f7fe ff53 	bl	8002d78 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11a      	bne.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d013      	beq.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d1c8      	bne.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <I2C_IsErrorOccurred>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d068      	beq.n	8004032 <I2C_IsErrorOccurred+0xfe>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	61da      	str	r2, [r3, #28]
 8003f68:	e049      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d045      	beq.n	8003ffe <I2C_IsErrorOccurred+0xca>
 8003f72:	f7fe ff01 	bl	8002d78 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_IsErrorOccurred+0x54>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13a      	bne.n	8003ffe <I2C_IsErrorOccurred+0xca>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f9a:	74fb      	strb	r3, [r7, #19]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d121      	bne.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d01d      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d01a      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	f7fe fed5 	bl	8002d78 <HAL_GetTick>
 8003fce:	61f8      	str	r0, [r7, #28]
 8003fd0:	e00e      	b.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fd2:	f7fe fed1 	bl	8002d78 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b19      	cmp	r3, #25
 8003fde:	d907      	bls.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f043 0320 	orr.w	r3, r3, #32
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fee:	e006      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d1e9      	bne.n	8003fd2 <I2C_IsErrorOccurred+0x9e>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d003      	beq.n	8004014 <I2C_IsErrorOccurred+0xe0>
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0aa      	beq.n	8003f6a <I2C_IsErrorOccurred+0x36>
 8004014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <I2C_IsErrorOccurred+0xf0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2220      	movs	r2, #32
 8004022:	61da      	str	r2, [r3, #28]
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <I2C_IsErrorOccurred+0x128>
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004054:	61da      	str	r2, [r3, #28]
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <I2C_IsErrorOccurred+0x14a>
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004076:	61da      	str	r2, [r3, #28]
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <I2C_IsErrorOccurred+0x16c>
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004098:	61da      	str	r2, [r3, #28]
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <I2C_IsErrorOccurred+0x1ae>
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fe45 	bl	8003d38 <I2C_Flush_TXDR>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <I2C_IsErrorOccurred+0x1bc>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	6053      	str	r3, [r2, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	; 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	fe00e800 	.word	0xfe00e800

080040f4 <I2C_TransferConfig>:
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	4613      	mov	r3, r2
 8004104:	727b      	strb	r3, [r7, #9]
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800410c:	7a7b      	ldrb	r3, [r7, #9]
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	431a      	orrs	r2, r3
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	4313      	orrs	r3, r2
 800411e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	0d5b      	lsrs	r3, r3, #21
 800412e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <I2C_TransferConfig+0x60>)
 8004134:	430b      	orrs	r3, r1
 8004136:	43db      	mvns	r3, r3
 8004138:	ea02 0103 	and.w	r1, r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	03ff63ff 	.word	0x03ff63ff

08004158 <HAL_I2CEx_ConfigAnalogFilter>:
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	d138      	bne.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004178:	2302      	movs	r3, #2
 800417a:	e032      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041e0:	2302      	movs	r3, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_I2CEx_ConfigDigitalFilter>:
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	d139      	bne.n	8004278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800420e:	2302      	movs	r3, #2
 8004210:	e033      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	; 0x24
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004278:	2302      	movs	r3, #2
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_PWREx_GetVoltageRange>:
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40007000 	.word	0x40007000

080042a4 <HAL_PWREx_ControlVoltageScaling>:
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b2:	d130      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x72>
 80042b4:	4b23      	ldr	r3, [pc, #140]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d038      	beq.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x90>
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2232      	movs	r2, #50	; 0x32
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0c9b      	lsrs	r3, r3, #18
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e002      	b.n	80042f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fc:	d102      	bne.n	8004304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f2      	bne.n	80042ea <HAL_PWREx_ControlVoltageScaling+0x46>
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d110      	bne.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x90>
 8004312:	2303      	movs	r3, #3
 8004314:	e00f      	b.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x92>
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d007      	beq.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x90>
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432c:	4a05      	ldr	r2, [pc, #20]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40007000 	.word	0x40007000
 8004348:	20000010 	.word	0x20000010
 800434c:	431bde83 	.word	0x431bde83

08004350 <HAL_RCC_OscConfig>:
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <HAL_RCC_OscConfig+0x14>
 800435e:	2301      	movs	r3, #1
 8004360:	f000 bc4f 	b.w	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004364:	4b97      	ldr	r3, [pc, #604]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	4b95      	ldr	r3, [pc, #596]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80e6 	beq.w	8004552 <HAL_RCC_OscConfig+0x202>
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_RCC_OscConfig+0x4c>
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	f040 808d 	bne.w	80044ae <HAL_RCC_OscConfig+0x15e>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b01      	cmp	r3, #1
 8004398:	f040 8089 	bne.w	80044ae <HAL_RCC_OscConfig+0x15e>
 800439c:	4b89      	ldr	r3, [pc, #548]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <HAL_RCC_OscConfig+0x66>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <HAL_RCC_OscConfig+0x66>
 80043b0:	2301      	movs	r3, #1
 80043b2:	f000 bc26 	b.w	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	4b82      	ldr	r3, [pc, #520]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCC_OscConfig+0x80>
 80043c6:	4b7f      	ldr	r3, [pc, #508]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ce:	e005      	b.n	80043dc <HAL_RCC_OscConfig+0x8c>
 80043d0:	4b7c      	ldr	r3, [pc, #496]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d224      	bcs.n	800442a <HAL_RCC_OscConfig+0xda>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fdd9 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_RCC_OscConfig+0xa6>
 80043f0:	2301      	movs	r3, #1
 80043f2:	f000 bc06 	b.w	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80043f6:	4b73      	ldr	r3, [pc, #460]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a72      	ldr	r2, [pc, #456]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80043fc:	f043 0308 	orr.w	r3, r3, #8
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	496d      	ldr	r1, [pc, #436]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	4b6b      	ldr	r3, [pc, #428]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4968      	ldr	r1, [pc, #416]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
 8004428:	e025      	b.n	8004476 <HAL_RCC_OscConfig+0x126>
 800442a:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a65      	ldr	r2, [pc, #404]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004430:	f043 0308 	orr.w	r3, r3, #8
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	4960      	ldr	r1, [pc, #384]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	495b      	ldr	r1, [pc, #364]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004458:	4313      	orrs	r3, r2
 800445a:	604b      	str	r3, [r1, #4]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_RCC_OscConfig+0x126>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fd98 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x126>
 8004472:	2301      	movs	r3, #1
 8004474:	e3c5      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004476:	f000 fccd 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b51      	ldr	r3, [pc, #324]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	4950      	ldr	r1, [pc, #320]	; (80045c8 <HAL_RCC_OscConfig+0x278>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	4a4e      	ldr	r2, [pc, #312]	; (80045cc <HAL_RCC_OscConfig+0x27c>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b4e      	ldr	r3, [pc, #312]	; (80045d0 <HAL_RCC_OscConfig+0x280>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fc1c 	bl	8002cd8 <HAL_InitTick>
 80044a0:	4603      	mov	r3, r0
 80044a2:	75fb      	strb	r3, [r7, #23]
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d052      	beq.n	8004550 <HAL_RCC_OscConfig+0x200>
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	e3a9      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d032      	beq.n	800451c <HAL_RCC_OscConfig+0x1cc>
 80044b6:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a42      	ldr	r2, [pc, #264]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	f7fe fc59 	bl	8002d78 <HAL_GetTick>
 80044c6:	61b8      	str	r0, [r7, #24]
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x18c>
 80044ca:	f7fe fc55 	bl	8002d78 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x18c>
 80044d8:	2303      	movs	r3, #3
 80044da:	e392      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80044dc:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x17a>
 80044e8:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a35      	ldr	r2, [pc, #212]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80044ee:	f043 0308 	orr.w	r3, r3, #8
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	4930      	ldr	r1, [pc, #192]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
 8004506:	4b2f      	ldr	r3, [pc, #188]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	492b      	ldr	r1, [pc, #172]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
 800451a:	e01a      	b.n	8004552 <HAL_RCC_OscConfig+0x202>
 800451c:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	f7fe fc26 	bl	8002d78 <HAL_GetTick>
 800452c:	61b8      	str	r0, [r7, #24]
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1f2>
 8004530:	f7fe fc22 	bl	8002d78 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1f2>
 800453e:	2303      	movs	r3, #3
 8004540:	e35f      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1e0>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x202>
 8004550:	bf00      	nop
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d073      	beq.n	8004646 <HAL_RCC_OscConfig+0x2f6>
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d005      	beq.n	8004570 <HAL_RCC_OscConfig+0x220>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d10e      	bne.n	8004588 <HAL_RCC_OscConfig+0x238>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d10b      	bne.n	8004588 <HAL_RCC_OscConfig+0x238>
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d063      	beq.n	8004644 <HAL_RCC_OscConfig+0x2f4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d15f      	bne.n	8004644 <HAL_RCC_OscConfig+0x2f4>
 8004584:	2301      	movs	r3, #1
 8004586:	e33c      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_OscConfig+0x250>
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e025      	b.n	80045ec <HAL_RCC_OscConfig+0x29c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a8:	d114      	bne.n	80045d4 <HAL_RCC_OscConfig+0x284>
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a02      	ldr	r2, [pc, #8]	; (80045c4 <HAL_RCC_OscConfig+0x274>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e013      	b.n	80045ec <HAL_RCC_OscConfig+0x29c>
 80045c4:	40021000 	.word	0x40021000
 80045c8:	080123ac 	.word	0x080123ac
 80045cc:	20000010 	.word	0x20000010
 80045d0:	20000014 	.word	0x20000014
 80045d4:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a8e      	ldr	r2, [pc, #568]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a8b      	ldr	r2, [pc, #556]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d013      	beq.n	800461c <HAL_RCC_OscConfig+0x2cc>
 80045f4:	f7fe fbc0 	bl	8002d78 <HAL_GetTick>
 80045f8:	61b8      	str	r0, [r7, #24]
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x2be>
 80045fc:	f7fe fbbc 	bl	8002d78 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x2be>
 800460a:	2303      	movs	r3, #3
 800460c:	e2f9      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x2ac>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x2f6>
 800461c:	f7fe fbac 	bl	8002d78 <HAL_GetTick>
 8004620:	61b8      	str	r0, [r7, #24]
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x2e6>
 8004624:	f7fe fba8 	bl	8002d78 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x2e6>
 8004632:	2303      	movs	r3, #3
 8004634:	e2e5      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004636:	4b77      	ldr	r3, [pc, #476]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x2d4>
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x2f6>
 8004644:	bf00      	nop
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d060      	beq.n	8004714 <HAL_RCC_OscConfig+0x3c4>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d005      	beq.n	8004664 <HAL_RCC_OscConfig+0x314>
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d119      	bne.n	8004692 <HAL_RCC_OscConfig+0x342>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d116      	bne.n	8004692 <HAL_RCC_OscConfig+0x342>
 8004664:	4b6b      	ldr	r3, [pc, #428]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x32c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_OscConfig+0x32c>
 8004678:	2301      	movs	r3, #1
 800467a:	e2c2      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 800467c:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4962      	ldr	r1, [pc, #392]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	e040      	b.n	8004714 <HAL_RCC_OscConfig+0x3c4>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d023      	beq.n	80046e2 <HAL_RCC_OscConfig+0x392>
 800469a:	4b5e      	ldr	r3, [pc, #376]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a5d      	ldr	r2, [pc, #372]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	f7fe fb67 	bl	8002d78 <HAL_GetTick>
 80046aa:	61b8      	str	r0, [r7, #24]
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x370>
 80046ae:	f7fe fb63 	bl	8002d78 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x370>
 80046bc:	2303      	movs	r3, #3
 80046be:	e2a0      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80046c0:	4b54      	ldr	r3, [pc, #336]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x35e>
 80046cc:	4b51      	ldr	r3, [pc, #324]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	494e      	ldr	r1, [pc, #312]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	e018      	b.n	8004714 <HAL_RCC_OscConfig+0x3c4>
 80046e2:	4b4c      	ldr	r3, [pc, #304]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4b      	ldr	r2, [pc, #300]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	f7fe fb43 	bl	8002d78 <HAL_GetTick>
 80046f2:	61b8      	str	r0, [r7, #24]
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x3b8>
 80046f6:	f7fe fb3f 	bl	8002d78 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x3b8>
 8004704:	2303      	movs	r3, #3
 8004706:	e27c      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3a6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8082 	beq.w	8004826 <HAL_RCC_OscConfig+0x4d6>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05f      	beq.n	80047ea <HAL_RCC_OscConfig+0x49a>
 800472a:	4b3a      	ldr	r3, [pc, #232]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	429a      	cmp	r2, r3
 800473e:	d037      	beq.n	80047b0 <HAL_RCC_OscConfig+0x460>
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d006      	beq.n	8004758 <HAL_RCC_OscConfig+0x408>
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_OscConfig+0x408>
 8004754:	2301      	movs	r3, #1
 8004756:	e254      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01b      	beq.n	800479a <HAL_RCC_OscConfig+0x44a>
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004772:	f7fe fb01 	bl	8002d78 <HAL_GetTick>
 8004776:	61b8      	str	r0, [r7, #24]
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x43c>
 800477a:	f7fe fafd 	bl	8002d78 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b11      	cmp	r3, #17
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x43c>
 8004788:	2303      	movs	r3, #3
 800478a:	e23a      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ef      	bne.n	800477a <HAL_RCC_OscConfig+0x42a>
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	f023 0210 	bic.w	r2, r3, #16
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	491a      	ldr	r1, [pc, #104]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 80047b0:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b6:	4a17      	ldr	r2, [pc, #92]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047c0:	f7fe fada 	bl	8002d78 <HAL_GetTick>
 80047c4:	61b8      	str	r0, [r7, #24]
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x48a>
 80047c8:	f7fe fad6 	bl	8002d78 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b11      	cmp	r3, #17
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x48a>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e213      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <HAL_RCC_OscConfig+0x478>
 80047e8:	e01d      	b.n	8004826 <HAL_RCC_OscConfig+0x4d6>
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f0:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047fa:	f7fe fabd 	bl	8002d78 <HAL_GetTick>
 80047fe:	61b8      	str	r0, [r7, #24]
 8004800:	e00a      	b.n	8004818 <HAL_RCC_OscConfig+0x4c8>
 8004802:	f7fe fab9 	bl	8002d78 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b11      	cmp	r3, #17
 800480e:	d903      	bls.n	8004818 <HAL_RCC_OscConfig+0x4c8>
 8004810:	2303      	movs	r3, #3
 8004812:	e1f6      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004814:	40021000 	.word	0x40021000
 8004818:	4ba9      	ldr	r3, [pc, #676]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ed      	bne.n	8004802 <HAL_RCC_OscConfig+0x4b2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80bd 	beq.w	80049ae <HAL_RCC_OscConfig+0x65e>
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800483a:	4ba1      	ldr	r3, [pc, #644]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10e      	bne.n	8004864 <HAL_RCC_OscConfig+0x514>
 8004846:	4b9e      	ldr	r3, [pc, #632]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	4a9d      	ldr	r2, [pc, #628]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6593      	str	r3, [r2, #88]	; 0x58
 8004852:	4b9b      	ldr	r3, [pc, #620]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004864:	4b97      	ldr	r3, [pc, #604]	; (8004ac4 <HAL_RCC_OscConfig+0x774>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d118      	bne.n	80048a2 <HAL_RCC_OscConfig+0x552>
 8004870:	4b94      	ldr	r3, [pc, #592]	; (8004ac4 <HAL_RCC_OscConfig+0x774>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a93      	ldr	r2, [pc, #588]	; (8004ac4 <HAL_RCC_OscConfig+0x774>)
 8004876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	f7fe fa7c 	bl	8002d78 <HAL_GetTick>
 8004880:	61b8      	str	r0, [r7, #24]
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x546>
 8004884:	f7fe fa78 	bl	8002d78 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x546>
 8004892:	2303      	movs	r3, #3
 8004894:	e1b5      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004896:	4b8b      	ldr	r3, [pc, #556]	; (8004ac4 <HAL_RCC_OscConfig+0x774>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x534>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02c      	beq.n	8004908 <HAL_RCC_OscConfig+0x5b8>
 80048ae:	4b84      	ldr	r3, [pc, #528]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	497f      	ldr	r1, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <HAL_RCC_OscConfig+0x5a6>
 80048d4:	4b7a      	ldr	r3, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	4a79      	ldr	r2, [pc, #484]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e4:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f4:	e018      	b.n	8004928 <HAL_RCC_OscConfig+0x5d8>
 80048f6:	4b72      	ldr	r3, [pc, #456]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	4a70      	ldr	r2, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004906:	e00f      	b.n	8004928 <HAL_RCC_OscConfig+0x5d8>
 8004908:	4b6d      	ldr	r3, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	4a6c      	ldr	r2, [pc, #432]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004918:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	4a68      	ldr	r2, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004920:	f023 0304 	bic.w	r3, r3, #4
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d016      	beq.n	800495e <HAL_RCC_OscConfig+0x60e>
 8004930:	f7fe fa22 	bl	8002d78 <HAL_GetTick>
 8004934:	61b8      	str	r0, [r7, #24]
 8004936:	e00a      	b.n	800494e <HAL_RCC_OscConfig+0x5fe>
 8004938:	f7fe fa1e 	bl	8002d78 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	; 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x5fe>
 800494a:	2303      	movs	r3, #3
 800494c:	e159      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 800494e:	4b5c      	ldr	r3, [pc, #368]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ed      	beq.n	8004938 <HAL_RCC_OscConfig+0x5e8>
 800495c:	e01d      	b.n	800499a <HAL_RCC_OscConfig+0x64a>
 800495e:	f7fe fa0b 	bl	8002d78 <HAL_GetTick>
 8004962:	61b8      	str	r0, [r7, #24]
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x62c>
 8004966:	f7fe fa07 	bl	8002d78 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x62c>
 8004978:	2303      	movs	r3, #3
 800497a:	e142      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 800497c:	4b50      	ldr	r3, [pc, #320]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ed      	bne.n	8004966 <HAL_RCC_OscConfig+0x616>
 800498a:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	4a4b      	ldr	r2, [pc, #300]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800499a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <HAL_RCC_OscConfig+0x65e>
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	4a46      	ldr	r2, [pc, #280]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80049a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6593      	str	r3, [r2, #88]	; 0x58
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x6e4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01c      	beq.n	80049fc <HAL_RCC_OscConfig+0x6ac>
 80049c2:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80049c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049c8:	4a3d      	ldr	r2, [pc, #244]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80049d2:	f7fe f9d1 	bl	8002d78 <HAL_GetTick>
 80049d6:	61b8      	str	r0, [r7, #24]
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x69c>
 80049da:	f7fe f9cd 	bl	8002d78 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x69c>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e10a      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80049ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ef      	beq.n	80049da <HAL_RCC_OscConfig+0x68a>
 80049fa:	e01b      	b.n	8004a34 <HAL_RCC_OscConfig+0x6e4>
 80049fc:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 80049fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a02:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8004a0c:	f7fe f9b4 	bl	8002d78 <HAL_GetTick>
 8004a10:	61b8      	str	r0, [r7, #24]
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x6d6>
 8004a14:	f7fe f9b0 	bl	8002d78 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x6d6>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0ed      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ef      	bne.n	8004a14 <HAL_RCC_OscConfig+0x6c4>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80e1 	beq.w	8004c00 <HAL_RCC_OscConfig+0x8b0>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	f040 80b5 	bne.w	8004bb2 <HAL_RCC_OscConfig+0x862>
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f003 0203 	and.w	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d124      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x756>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x756>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d113      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x756>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	055b      	lsls	r3, r3, #21
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x756>
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	065b      	lsls	r3, r3, #25
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d05f      	beq.n	8004b66 <HAL_RCC_OscConfig+0x816>
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d05a      	beq.n	8004b62 <HAL_RCC_OscConfig+0x812>
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <HAL_RCC_OscConfig+0x770>)
 8004ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	f7fe f95e 	bl	8002d78 <HAL_GetTick>
 8004abc:	61b8      	str	r0, [r7, #24]
 8004abe:	e00c      	b.n	8004ada <HAL_RCC_OscConfig+0x78a>
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	f7fe f956 	bl	8002d78 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x78a>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e093      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x778>
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <HAL_RCC_OscConfig+0x8c0>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af6:	3a01      	subs	r2, #1
 8004af8:	0112      	lsls	r2, r2, #4
 8004afa:	4311      	orrs	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b00:	0212      	lsls	r2, r2, #8
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b08:	0852      	lsrs	r2, r2, #1
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0552      	lsls	r2, r2, #21
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b14:	0852      	lsrs	r2, r2, #1
 8004b16:	3a01      	subs	r2, #1
 8004b18:	0652      	lsls	r2, r2, #25
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	493b      	ldr	r1, [pc, #236]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60cb      	str	r3, [r1, #12]
 8004b22:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a39      	ldr	r2, [pc, #228]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b38:	60d3      	str	r3, [r2, #12]
 8004b3a:	f7fe f91d 	bl	8002d78 <HAL_GetTick>
 8004b3e:	61b8      	str	r0, [r7, #24]
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x804>
 8004b42:	f7fe f919 	bl	8002d78 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x804>
 8004b50:	2303      	movs	r3, #3
 8004b52:	e056      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x7f2>
 8004b60:	e04e      	b.n	8004c00 <HAL_RCC_OscConfig+0x8b0>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e04d      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d146      	bne.n	8004c00 <HAL_RCC_OscConfig+0x8b0>
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b88:	60d3      	str	r3, [r2, #12]
 8004b8a:	f7fe f8f5 	bl	8002d78 <HAL_GetTick>
 8004b8e:	61b8      	str	r0, [r7, #24]
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x854>
 8004b92:	f7fe f8f1 	bl	8002d78 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x854>
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e02e      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x842>
 8004bb0:	e026      	b.n	8004c00 <HAL_RCC_OscConfig+0x8b0>
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d021      	beq.n	8004bfc <HAL_RCC_OscConfig+0x8ac>
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	f7fe f8d8 	bl	8002d78 <HAL_GetTick>
 8004bc8:	61b8      	str	r0, [r7, #24]
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x88e>
 8004bcc:	f7fe f8d4 	bl	8002d78 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x88e>
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e011      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x87c>
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <HAL_RCC_OscConfig+0x8bc>)
 8004bf0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bf4:	f023 0303 	bic.w	r3, r3, #3
 8004bf8:	60d3      	str	r3, [r2, #12]
 8004bfa:	e001      	b.n	8004c00 <HAL_RCC_OscConfig+0x8b0>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x8b2>
 8004c00:	2300      	movs	r3, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	f99f808c 	.word	0xf99f808c

08004c14 <HAL_RCC_ClockConfig>:
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x14>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0e7      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004c28:	4b75      	ldr	r3, [pc, #468]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d910      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x44>
 8004c36:	4b72      	ldr	r3, [pc, #456]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 0207 	bic.w	r2, r3, #7
 8004c3e:	4970      	ldr	r1, [pc, #448]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x44>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0cf      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d010      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x72>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	4b66      	ldr	r3, [pc, #408]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d908      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x72>
 8004c74:	4b63      	ldr	r3, [pc, #396]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4960      	ldr	r1, [pc, #384]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04c      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x118>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0x96>
 8004c9a:	4b5a      	ldr	r3, [pc, #360]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d121      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0a6      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xae>
 8004cb2:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d115      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e09a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xc6>
 8004cca:	4b4e      	ldr	r3, [pc, #312]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e08e      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004cda:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xd6>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e086      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004cea:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4943      	ldr	r1, [pc, #268]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]
 8004cfc:	f7fe f83c 	bl	8002d78 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x106>
 8004d04:	f7fe f838 	bl	8002d78 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x106>
 8004d16:	2303      	movs	r3, #3
 8004d18:	e06e      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x146>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d208      	bcs.n	8004d5a <HAL_RCC_ClockConfig+0x146>
 8004d48:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	492b      	ldr	r1, [pc, #172]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d210      	bcs.n	8004d8a <HAL_RCC_ClockConfig+0x176>
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 0207 	bic.w	r2, r3, #7
 8004d70:	4923      	ldr	r1, [pc, #140]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]
 8004d78:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <HAL_RCC_ClockConfig+0x1ec>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x176>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e036      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1e4>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x194>
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4918      	ldr	r1, [pc, #96]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x1b4>
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4910      	ldr	r1, [pc, #64]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]
 8004dc8:	f000 f824 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	490b      	ldr	r1, [pc, #44]	; (8004e08 <HAL_RCC_ClockConfig+0x1f4>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1f8>)
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1fc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd ff73 	bl	8002cd8 <HAL_InitTick>
 8004df2:	4603      	mov	r3, r0
 8004df4:	72fb      	strb	r3, [r7, #11]
 8004df6:	7afb      	ldrb	r3, [r7, #11]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40022000 	.word	0x40022000
 8004e04:	40021000 	.word	0x40021000
 8004e08:	080123ac 	.word	0x080123ac
 8004e0c:	20000010 	.word	0x20000010
 8004e10:	20000014 	.word	0x20000014

08004e14 <HAL_RCC_GetSysClockFreq>:
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	4b3e      	ldr	r3, [pc, #248]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x34>
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d121      	bne.n	8004e86 <HAL_RCC_GetSysClockFreq+0x72>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d11e      	bne.n	8004e86 <HAL_RCC_GetSysClockFreq+0x72>
 8004e48:	4b34      	ldr	r3, [pc, #208]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_GetSysClockFreq+0x50>
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	e005      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x5c>
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCC_GetSysClockFreq+0x7e>
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e004      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x88>
 8004e98:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d134      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0xf8>
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0xa6>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8004eb8:	e005      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0xb2>
 8004eba:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e005      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0xb8>
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e002      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0xb8>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	bf00      	nop
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	fb03 f202 	mul.w	r2, r3, r2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	0e5b      	lsrs	r3, r3, #25
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	3301      	adds	r3, #1
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	080123c4 	.word	0x080123c4
 8004f24:	00f42400 	.word	0x00f42400
 8004f28:	007a1200 	.word	0x007a1200

08004f2c <HAL_RCC_GetHCLKFreq>:
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000010 	.word	0x20000010

08004f44 <HAL_RCC_GetPCLK1Freq>:
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	f7ff fff0 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4904      	ldr	r1, [pc, #16]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	080123bc 	.word	0x080123bc

08004f70 <HAL_RCC_GetPCLK2Freq>:
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	f7ff ffda 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0adb      	lsrs	r3, r3, #11
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4904      	ldr	r1, [pc, #16]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	080123bc 	.word	0x080123bc

08004f9c <RCC_SetFlashLatencyFromMSIRange>:
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
 8004fb4:	f7ff f968 	bl	8004288 <HAL_PWREx_GetVoltageRange>
 8004fb8:	6178      	str	r0, [r7, #20]
 8004fba:	e014      	b.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	4a24      	ldr	r2, [pc, #144]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f7ff f958 	bl	8004288 <HAL_PWREx_GetVoltageRange>
 8004fd8:	6178      	str	r0, [r7, #20]
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	d10b      	bne.n	8005006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d919      	bls.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ff8:	d902      	bls.n	8005000 <RCC_SetFlashLatencyFromMSIRange+0x64>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e013      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8005000:	2301      	movs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e010      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d902      	bls.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x76>
 800500c:	2303      	movs	r3, #3
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e00a      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d102      	bne.n	800501e <RCC_SetFlashLatencyFromMSIRange+0x82>
 8005018:	2302      	movs	r3, #2
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e004      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d101      	bne.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8005024:	2301      	movs	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 0207 	bic.w	r2, r3, #7
 8005030:	4909      	ldr	r1, [pc, #36]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <RCC_SetFlashLatencyFromMSIRange+0xae>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800504a:	2300      	movs	r3, #0
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	40022000 	.word	0x40022000

0800505c <HAL_RCCEx_PeriphCLKConfig>:
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	2300      	movs	r3, #0
 8005066:	74fb      	strb	r3, [r7, #19]
 8005068:	2300      	movs	r3, #0
 800506a:	74bb      	strb	r3, [r7, #18]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 809e 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800507a:	2300      	movs	r3, #0
 800507c:	747b      	strb	r3, [r7, #17]
 800507e:	4b46      	ldr	r3, [pc, #280]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00d      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005094:	4b40      	ldr	r3, [pc, #256]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	4a3f      	ldr	r2, [pc, #252]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509e:	6593      	str	r3, [r2, #88]	; 0x58
 80050a0:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2301      	movs	r3, #1
 80050ae:	747b      	strb	r3, [r7, #17]
 80050b0:	4b3a      	ldr	r3, [pc, #232]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a39      	ldr	r2, [pc, #228]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	f7fd fe5c 	bl	8002d78 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	e009      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050c4:	f7fd fe58 	bl	8002d78 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050d2:	2303      	movs	r3, #3
 80050d4:	74fb      	strb	r3, [r7, #19]
 80050d6:	e005      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80050d8:	4b30      	ldr	r3, [pc, #192]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ef      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d15a      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80050ea:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01e      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	429a      	cmp	r2, r3
 8005104:	d019      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800511a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005132:	4a19      	ldr	r2, [pc, #100]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005144:	f7fd fe18 	bl	8002d78 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	e00b      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800514c:	f7fd fe14 	bl	8002d78 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d902      	bls.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800515e:	2303      	movs	r3, #3
 8005160:	74fb      	strb	r3, [r7, #19]
 8005162:	e006      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0ec      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	4904      	ldr	r1, [pc, #16]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800518e:	e009      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	74bb      	strb	r3, [r7, #18]
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	40007000 	.word	0x40007000
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	74bb      	strb	r3, [r7, #18]
 80051a4:	7c7b      	ldrb	r3, [r7, #17]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d105      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80051aa:	4b6e      	ldr	r3, [pc, #440]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	4a6d      	ldr	r2, [pc, #436]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	; 0x58
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051c2:	4b68      	ldr	r3, [pc, #416]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f023 0203 	bic.w	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4964      	ldr	r1, [pc, #400]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80051e4:	4b5f      	ldr	r3, [pc, #380]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 020c 	bic.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	495c      	ldr	r1, [pc, #368]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005206:	4b57      	ldr	r3, [pc, #348]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4953      	ldr	r1, [pc, #332]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005228:	4b4e      	ldr	r3, [pc, #312]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	494b      	ldr	r1, [pc, #300]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800524a:	4b46      	ldr	r3, [pc, #280]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	4942      	ldr	r1, [pc, #264]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x226>
 800526c:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	493a      	ldr	r1, [pc, #232]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800528e:	4b35      	ldr	r3, [pc, #212]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	4931      	ldr	r1, [pc, #196]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	4929      	ldr	r1, [pc, #164]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4920      	ldr	r1, [pc, #128]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	4918      	ldr	r1, [pc, #96]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005312:	d105      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4a12      	ldr	r2, [pc, #72]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800531a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800531e:	60d3      	str	r3, [r2, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	490a      	ldr	r1, [pc, #40]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005356:	60d3      	str	r3, [r2, #12]
 8005358:	7cbb      	ldrb	r3, [r7, #18]
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_SPI_Init>:
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_SPI_Init+0x12>
 8005376:	2301      	movs	r3, #1
 8005378:	e095      	b.n	80054a6 <HAL_SPI_Init+0x13e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <HAL_SPI_Init+0x2c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538a:	d009      	beq.n	80053a0 <HAL_SPI_Init+0x38>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	61da      	str	r2, [r3, #28]
 8005392:	e005      	b.n	80053a0 <HAL_SPI_Init+0x38>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	615a      	str	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_SPI_Init+0x58>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd fa9c 	bl	80028f8 <HAL_SPI_MspInit>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053e0:	d902      	bls.n	80053e8 <HAL_SPI_Init+0x80>
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e002      	b.n	80053ee <HAL_SPI_Init+0x86>
 80053e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053f6:	d007      	beq.n	8005408 <HAL_SPI_Init+0xa0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Init+0xa0>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	629a      	str	r2, [r3, #40]	; 0x28
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	ea42 0103 	orr.w	r1, r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 0204 	and.w	r2, r3, #4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005484:	ea42 0103 	orr.w	r1, r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80054a4:	2300      	movs	r3, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_SPI_Transmit>:
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b088      	sub	sp, #32
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
 80054be:	2300      	movs	r3, #0
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_SPI_Transmit+0x22>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e15f      	b.n	8005790 <HAL_SPI_Transmit+0x2e2>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80054d8:	f7fd fc4e 	bl	8002d78 <HAL_GetTick>
 80054dc:	61b8      	str	r0, [r7, #24]
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	82fb      	strh	r3, [r7, #22]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Transmit+0x46>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e148      	b.n	8005786 <HAL_SPI_Transmit+0x2d8>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0x52>
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <HAL_SPI_Transmit+0x58>
 8005500:	2301      	movs	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e13f      	b.n	8005786 <HAL_SPI_Transmit+0x2d8>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	651a      	str	r2, [r3, #80]	; 0x50
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	64da      	str	r2, [r3, #76]	; 0x4c
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	d10f      	bne.n	8005572 <HAL_SPI_Transmit+0xc4>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d007      	beq.n	8005590 <HAL_SPI_Transmit+0xe2>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005598:	d94f      	bls.n	800563a <HAL_SPI_Transmit+0x18c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Transmit+0xfa>
 80055a2:	8afb      	ldrh	r3, [r7, #22]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d142      	bne.n	800562e <HAL_SPI_Transmit+0x180>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	1c9a      	adds	r2, r3, #2
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055cc:	e02f      	b.n	800562e <HAL_SPI_Transmit+0x180>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d112      	bne.n	8005602 <HAL_SPI_Transmit+0x154>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60da      	str	r2, [r3, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	1c9a      	adds	r2, r3, #2
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005600:	e015      	b.n	800562e <HAL_SPI_Transmit+0x180>
 8005602:	f7fd fbb9 	bl	8002d78 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_Transmit+0x16c>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x172>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <HAL_SPI_Transmit+0x180>
 8005620:	2303      	movs	r3, #3
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800562c:	e0ab      	b.n	8005786 <HAL_SPI_Transmit+0x2d8>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ca      	bne.n	80055ce <HAL_SPI_Transmit+0x120>
 8005638:	e080      	b.n	800573c <HAL_SPI_Transmit+0x28e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_SPI_Transmit+0x19a>
 8005642:	8afb      	ldrh	r3, [r7, #22]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d174      	bne.n	8005732 <HAL_SPI_Transmit+0x284>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	d912      	bls.n	8005678 <HAL_SPI_Transmit+0x1ca>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	881a      	ldrh	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	1c9a      	adds	r2, r3, #2
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b02      	subs	r3, #2
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005676:	e05c      	b.n	8005732 <HAL_SPI_Transmit+0x284>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800569e:	e048      	b.n	8005732 <HAL_SPI_Transmit+0x284>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d12b      	bne.n	8005706 <HAL_SPI_Transmit+0x258>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d912      	bls.n	80056de <HAL_SPI_Transmit+0x230>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b02      	subs	r3, #2
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056dc:	e029      	b.n	8005732 <HAL_SPI_Transmit+0x284>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005704:	e015      	b.n	8005732 <HAL_SPI_Transmit+0x284>
 8005706:	f7fd fb37 	bl	8002d78 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d803      	bhi.n	800571e <HAL_SPI_Transmit+0x270>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d102      	bne.n	8005724 <HAL_SPI_Transmit+0x276>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_SPI_Transmit+0x284>
 8005724:	2303      	movs	r3, #3
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005730:	e029      	b.n	8005786 <HAL_SPI_Transmit+0x2d8>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1b1      	bne.n	80056a0 <HAL_SPI_Transmit+0x1f2>
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fb69 	bl	8005e18 <SPI_EndRxTxTransaction>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_SPI_Transmit+0x2a4>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	661a      	str	r2, [r3, #96]	; 0x60
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <HAL_SPI_Transmit+0x2c2>
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Transmit+0x2d0>
 8005778:	2301      	movs	r3, #1
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e003      	b.n	8005786 <HAL_SPI_Transmit+0x2d8>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800578e:	7ffb      	ldrb	r3, [r7, #31]
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_SPI_TransmitReceive>:
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	807b      	strh	r3, [r7, #2]
 80057a6:	2301      	movs	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	2300      	movs	r3, #0
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_SPI_TransmitReceive+0x26>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e20a      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x43c>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80057c6:	f7fd fad7 	bl	8002d78 <HAL_GetTick>
 80057ca:	61f8      	str	r0, [r7, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d2:	76fb      	strb	r3, [r7, #27]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	827b      	strh	r3, [r7, #18]
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	823b      	strh	r3, [r7, #16]
 80057e2:	7efb      	ldrb	r3, [r7, #27]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d00e      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x6e>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d106      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x66>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x66>
 80057f8:	7efb      	ldrb	r3, [r7, #27]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x6e>
 80057fe:	2302      	movs	r3, #2
 8005800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005804:	e1e0      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x430>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_SPI_TransmitReceive+0x80>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_SPI_TransmitReceive+0x80>
 8005812:	887b      	ldrh	r3, [r7, #2]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x88>
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581e:	e1d3      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x430>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b04      	cmp	r3, #4
 800582a:	d003      	beq.n	8005834 <HAL_SPI_TransmitReceive+0x9c>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2205      	movs	r2, #5
 8005830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	661a      	str	r2, [r3, #96]	; 0x60
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	887a      	ldrh	r2, [r7, #2]
 8005844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	887a      	ldrh	r2, [r7, #2]
 800584c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	887a      	ldrh	r2, [r7, #2]
 800585a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	64da      	str	r2, [r3, #76]	; 0x4c
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	651a      	str	r2, [r3, #80]	; 0x50
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005876:	d802      	bhi.n	800587e <HAL_SPI_TransmitReceive+0xe6>
 8005878:	8a3b      	ldrh	r3, [r7, #16]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d908      	bls.n	8005890 <HAL_SPI_TransmitReceive+0xf8>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	e007      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x108>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d007      	beq.n	80058be <HAL_SPI_TransmitReceive+0x126>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c6:	f240 8081 	bls.w	80059cc <HAL_SPI_TransmitReceive+0x234>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x140>
 80058d2:	8a7b      	ldrh	r3, [r7, #18]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d16d      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x21c>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058fc:	e05a      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x21c>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x1ac>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x1ac>
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	2b01      	cmp	r3, #1
 800591a:	d113      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x1ac>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60da      	str	r2, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	1c9a      	adds	r2, r3, #2
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d11c      	bne.n	800598c <HAL_SPI_TransmitReceive+0x1f4>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_SPI_TransmitReceive+0x1f4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005988:	2301      	movs	r3, #1
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	f7fd f9f4 	bl	8002d78 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005998:	429a      	cmp	r2, r3
 800599a:	d80b      	bhi.n	80059b4 <HAL_SPI_TransmitReceive+0x21c>
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d007      	beq.n	80059b4 <HAL_SPI_TransmitReceive+0x21c>
 80059a4:	2303      	movs	r3, #3
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80059b2:	e109      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x430>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d19f      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x166>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d199      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x166>
 80059ca:	e0e3      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3fc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x244>
 80059d4:	8a7b      	ldrh	r3, [r7, #18]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	f040 80cf 	bne.w	8005b7a <HAL_SPI_TransmitReceive+0x3e2>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d912      	bls.n	8005a0c <HAL_SPI_TransmitReceive+0x274>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	1c9a      	adds	r2, r3, #2
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b02      	subs	r3, #2
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a0a:	e0b6      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x3e2>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a32:	e0a2      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x3e2>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d134      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x314>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02f      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x314>
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d12c      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x314>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d912      	bls.n	8005a82 <HAL_SPI_TransmitReceive+0x2ea>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	881a      	ldrh	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	1c9a      	adds	r2, r3, #2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b02      	subs	r3, #2
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a80:	e012      	b.n	8005aa8 <HAL_SPI_TransmitReceive+0x310>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d148      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x3b4>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d042      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x3b4>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d923      	bls.n	8005b1a <HAL_SPI_TransmitReceive+0x382>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	b292      	uxth	r2, r2
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b02      	subs	r3, #2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d81f      	bhi.n	8005b48 <HAL_SPI_TransmitReceive+0x3b0>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	e016      	b.n	8005b48 <HAL_SPI_TransmitReceive+0x3b0>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f103 020c 	add.w	r2, r3, #12
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b48:	2301      	movs	r3, #1
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	f7fd f914 	bl	8002d78 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d803      	bhi.n	8005b64 <HAL_SPI_TransmitReceive+0x3cc>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d102      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x3d2>
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x3e2>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005b78:	e026      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x430>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f47f af57 	bne.w	8005a34 <HAL_SPI_TransmitReceive+0x29c>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f47f af50 	bne.w	8005a34 <HAL_SPI_TransmitReceive+0x29c>
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f93d 	bl	8005e18 <SPI_EndRxTxTransaction>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x418>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	661a      	str	r2, [r3, #96]	; 0x60
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x428>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bbe:	e003      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x430>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3728      	adds	r7, #40	; 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <SPI_WaitFlagStateUntilTimeout>:
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
 8005bec:	f7fd f8c4 	bl	8002d78 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	f7fd f8bc 	bl	8002d78 <HAL_GetTick>
 8005c00:	61b8      	str	r0, [r7, #24]
 8005c02:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	015b      	lsls	r3, r3, #5
 8005c08:	0d1b      	lsrs	r3, r3, #20
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	fb02 f303 	mul.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e054      	b.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d050      	beq.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005c1c:	f7fd f8ac 	bl	8002d78 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d902      	bls.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d13d      	bne.n	8005cae <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4a:	d111      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c54:	d004      	beq.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5e:	d107      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c78:	d10f      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005caa:	2303      	movs	r3, #3
 8005cac:	e017      	b.n	8005cde <SPI_WaitFlagStateUntilTimeout+0x102>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d19b      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000010 	.word	0x20000010

08005cec <SPI_WaitFifoStateUntilTimeout>:
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
 8005cfe:	f7fd f83b 	bl	8002d78 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	f7fd f833 	bl	8002d78 <HAL_GetTick>
 8005d12:	6238      	str	r0, [r7, #32]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	4b3d      	ldr	r3, [pc, #244]	; (8005e14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	00da      	lsls	r2, r3, #3
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	0d1b      	lsrs	r3, r3, #20
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e060      	b.n	8005df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d3c:	d107      	bne.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	75fb      	strb	r3, [r7, #23]
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d050      	beq.n	8005df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8005d56:	f7fd f80f 	bl	8002d78 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d902      	bls.n	8005d6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d13d      	bne.n	8005de8 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d84:	d111      	bne.n	8005daa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8e:	d004      	beq.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0xae>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d98:	d107      	bne.n	8005daa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db2:	d10f      	bne.n	8005dd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005de4:	2303      	movs	r3, #3
 8005de6:	e010      	b.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0x11e>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <SPI_WaitFifoStateUntilTimeout+0x106>
 8005dee:	2300      	movs	r3, #0
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d196      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3728      	adds	r7, #40	; 0x28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000010 	.word	0x20000010

08005e18 <SPI_EndRxTxTransaction>:
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff ff5b 	bl	8005cec <SPI_WaitFifoStateUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <SPI_EndRxTxTransaction+0x34>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	661a      	str	r2, [r3, #96]	; 0x60
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e027      	b.n	8005e9c <SPI_EndRxTxTransaction+0x84>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	2180      	movs	r1, #128	; 0x80
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff fec0 	bl	8005bdc <SPI_WaitFlagStateUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <SPI_EndRxTxTransaction+0x5a>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e014      	b.n	8005e9c <SPI_EndRxTxTransaction+0x84>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff ff34 	bl	8005cec <SPI_WaitFifoStateUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <SPI_EndRxTxTransaction+0x82>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	661a      	str	r2, [r3, #96]	; 0x60
 8005e96:	2303      	movs	r3, #3
 8005e98:	e000      	b.n	8005e9c <SPI_EndRxTxTransaction+0x84>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_UART_Init>:
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Init+0x12>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e040      	b.n	8005f38 <HAL_UART_Init+0x94>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_UART_Init+0x28>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fc fd58 	bl	800297c <HAL_UART_MspInit>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2224      	movs	r2, #36	; 0x24
 8005ed0:	67da      	str	r2, [r3, #124]	; 0x7c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_UART_Init+0x4c>
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fdd8 	bl	8006aa0 <UART_AdvFeatureConfig>
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fb7b 	bl	80065ec <UART_SetConfig>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_UART_Init+0x5c>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e01b      	b.n	8005f38 <HAL_UART_Init+0x94>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fe57 	bl	8006be4 <UART_CheckIdleState>
 8005f36:	4603      	mov	r3, r0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_Receive_IT>:
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d137      	bne.n	8005fc8 <HAL_UART_Receive_IT+0x88>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_UART_Receive_IT+0x24>
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Receive_IT+0x28>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e030      	b.n	8005fca <HAL_UART_Receive_IT+0x8a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a18      	ldr	r2, [pc, #96]	; (8005fd4 <HAL_UART_Receive_IT+0x94>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d01f      	beq.n	8005fb8 <HAL_UART_Receive_IT+0x78>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d018      	beq.n	8005fb8 <HAL_UART_Receive_IT+0x78>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	61fa      	str	r2, [r7, #28]
 8005fa8:	69f9      	ldr	r1, [r7, #28]
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <HAL_UART_Receive_IT+0x46>
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 ff20 	bl	8006e04 <UART_Start_Receive_IT>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	e000      	b.n	8005fca <HAL_UART_Receive_IT+0x8a>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3728      	adds	r7, #40	; 0x28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40008000 	.word	0x40008000

08005fd8 <HAL_UART_IRQHandler>:
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b0ba      	sub	sp, #232	; 0xe8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ffe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006002:	f640 030f 	movw	r3, #2063	; 0x80f
 8006006:	4013      	ands	r3, r2
 8006008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800600c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d115      	bne.n	8006040 <HAL_UART_IRQHandler+0x68>
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00f      	beq.n	8006040 <HAL_UART_IRQHandler+0x68>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <HAL_UART_IRQHandler+0x68>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 82ae 	beq.w	8006592 <HAL_UART_IRQHandler+0x5ba>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	e2a8      	b.n	8006592 <HAL_UART_IRQHandler+0x5ba>
 8006040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8117 	beq.w	8006278 <HAL_UART_IRQHandler+0x2a0>
 800604a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_UART_IRQHandler+0x8c>
 8006056:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800605a:	4b85      	ldr	r3, [pc, #532]	; (8006270 <HAL_UART_IRQHandler+0x298>)
 800605c:	4013      	ands	r3, r2
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 810a 	beq.w	8006278 <HAL_UART_IRQHandler+0x2a0>
 8006064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d011      	beq.n	8006094 <HAL_UART_IRQHandler+0xbc>
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <HAL_UART_IRQHandler+0xbc>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	621a      	str	r2, [r3, #32]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608a:	f043 0201 	orr.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d011      	beq.n	80060c4 <HAL_UART_IRQHandler+0xec>
 80060a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HAL_UART_IRQHandler+0xec>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2202      	movs	r2, #2
 80060b2:	621a      	str	r2, [r3, #32]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	f043 0204 	orr.w	r2, r3, #4
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0x11c>
 80060d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0x11c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2204      	movs	r2, #4
 80060e2:	621a      	str	r2, [r3, #32]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ea:	f043 0202 	orr.w	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d017      	beq.n	8006130 <HAL_UART_IRQHandler+0x158>
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <HAL_UART_IRQHandler+0x140>
 800610c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <HAL_UART_IRQHandler+0x158>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2208      	movs	r2, #8
 800611e:	621a      	str	r2, [r3, #32]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006126:	f043 0208 	orr.w	r2, r3, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <HAL_UART_IRQHandler+0x18a>
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_UART_IRQHandler+0x18a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006150:	621a      	str	r2, [r3, #32]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8214 	beq.w	8006596 <HAL_UART_IRQHandler+0x5be>
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <HAL_UART_IRQHandler+0x1be>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <HAL_UART_IRQHandler+0x1be>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_UART_IRQHandler+0x1be>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800619c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d005      	beq.n	80061ba <HAL_UART_IRQHandler+0x1e2>
 80061ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d04f      	beq.n	800625a <HAL_UART_IRQHandler+0x282>
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fee8 	bl	8006f90 <UART_EndRxTransfer>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b40      	cmp	r3, #64	; 0x40
 80061cc:	d141      	bne.n	8006252 <HAL_UART_IRQHandler+0x27a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1d9      	bne.n	80061ce <HAL_UART_IRQHandler+0x1f6>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621e:	2b00      	cmp	r3, #0
 8006220:	d013      	beq.n	800624a <HAL_UART_IRQHandler+0x272>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <HAL_UART_IRQHandler+0x29c>)
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622e:	4618      	mov	r0, r3
 8006230:	f7fc ff21 	bl	8003076 <HAL_DMA_Abort_IT>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <HAL_UART_IRQHandler+0x292>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	e00f      	b.n	800626a <HAL_UART_IRQHandler+0x292>
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9b8 	bl	80065c0 <HAL_UART_ErrorCallback>
 8006250:	e00b      	b.n	800626a <HAL_UART_IRQHandler+0x292>
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9b4 	bl	80065c0 <HAL_UART_ErrorCallback>
 8006258:	e007      	b.n	800626a <HAL_UART_IRQHandler+0x292>
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9b0 	bl	80065c0 <HAL_UART_ErrorCallback>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006268:	e195      	b.n	8006596 <HAL_UART_IRQHandler+0x5be>
 800626a:	bf00      	nop
 800626c:	e193      	b.n	8006596 <HAL_UART_IRQHandler+0x5be>
 800626e:	bf00      	nop
 8006270:	04000120 	.word	0x04000120
 8006274:	08007059 	.word	0x08007059
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627c:	2b01      	cmp	r3, #1
 800627e:	f040 814e 	bne.w	800651e <HAL_UART_IRQHandler+0x546>
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8147 	beq.w	800651e <HAL_UART_IRQHandler+0x546>
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8140 	beq.w	800651e <HAL_UART_IRQHandler+0x546>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2210      	movs	r2, #16
 80062a4:	621a      	str	r2, [r3, #32]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	f040 80b8 	bne.w	8006426 <HAL_UART_IRQHandler+0x44e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80062c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8167 	beq.w	800659a <HAL_UART_IRQHandler+0x5c2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062d6:	429a      	cmp	r2, r3
 80062d8:	f080 815f 	bcs.w	800659a <HAL_UART_IRQHandler+0x5c2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 8086 	bne.w	8006404 <HAL_UART_IRQHandler+0x42c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800630c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006326:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800632a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800632e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800633a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1da      	bne.n	80062f8 <HAL_UART_IRQHandler+0x320>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	677b      	str	r3, [r7, #116]	; 0x74
 800634a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	673b      	str	r3, [r7, #112]	; 0x70
 8006352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800636a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800636c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800636e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	67bb      	str	r3, [r7, #120]	; 0x78
 8006378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e1      	bne.n	8006342 <HAL_UART_IRQHandler+0x36a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	663b      	str	r3, [r7, #96]	; 0x60
 8006386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	667b      	str	r3, [r7, #100]	; 0x64
 80063b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e3      	bne.n	800637e <HAL_UART_IRQHandler+0x3a6>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d4:	f023 0310 	bic.w	r3, r3, #16
 80063d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063e8:	657a      	str	r2, [r7, #84]	; 0x54
 80063ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	653b      	str	r3, [r7, #80]	; 0x50
 80063f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e4      	bne.n	80063c4 <HAL_UART_IRQHandler+0x3ec>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fc fdfb 	bl	8002ffa <HAL_DMA_Abort>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	665a      	str	r2, [r3, #100]	; 0x64
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006416:	b29b      	uxth	r3, r3
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	b29b      	uxth	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f8d8 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
 8006424:	e0b9      	b.n	800659a <HAL_UART_IRQHandler+0x5c2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006432:	b29b      	uxth	r3, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80ab 	beq.w	800659e <HAL_UART_IRQHandler+0x5c6>
 8006448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80a6 	beq.w	800659e <HAL_UART_IRQHandler+0x5c6>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	63bb      	str	r3, [r7, #56]	; 0x38
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006466:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006474:	647b      	str	r3, [r7, #68]	; 0x44
 8006476:	643a      	str	r2, [r7, #64]	; 0x40
 8006478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800647a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e4      	bne.n	8006452 <HAL_UART_IRQHandler+0x47a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ac:	633a      	str	r2, [r7, #48]	; 0x30
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e3      	bne.n	8006488 <HAL_UART_IRQHandler+0x4b0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	669a      	str	r2, [r3, #104]	; 0x68
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f023 0310 	bic.w	r3, r3, #16
 80064e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	61ba      	str	r2, [r7, #24]
 80064fa:	69b9      	ldr	r1, [r7, #24]
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e4      	bne.n	80064d4 <HAL_UART_IRQHandler+0x4fc>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	665a      	str	r2, [r3, #100]	; 0x64
 8006510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f85c 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
 800651c:	e03f      	b.n	800659e <HAL_UART_IRQHandler+0x5c6>
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <HAL_UART_IRQHandler+0x570>
 800652a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <HAL_UART_IRQHandler+0x570>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800653e:	621a      	str	r2, [r3, #32]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 ff85 	bl	8007450 <HAL_UARTEx_WakeupCallback>
 8006546:	e02d      	b.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00e      	beq.n	8006572 <HAL_UART_IRQHandler+0x59a>
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <HAL_UART_IRQHandler+0x59a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01c      	beq.n	80065a2 <HAL_UART_IRQHandler+0x5ca>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
 8006570:	e017      	b.n	80065a2 <HAL_UART_IRQHandler+0x5ca>
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d012      	beq.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 800657e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fd7a 	bl	8007084 <UART_EndTransmit_IT>
 8006590:	e008      	b.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 8006592:	bf00      	nop
 8006594:	e006      	b.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 8006596:	bf00      	nop
 8006598:	e004      	b.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 800659a:	bf00      	nop
 800659c:	e002      	b.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <HAL_UART_IRQHandler+0x5cc>
 80065a2:	bf00      	nop
 80065a4:	37e8      	adds	r7, #232	; 0xe8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop

080065ac <HAL_UART_TxCpltCallback>:
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_UART_ErrorCallback>:
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_UARTEx_RxEventCallback>:
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	807b      	strh	r3, [r7, #2]
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <UART_SetConfig>:
 80065ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f0:	b08a      	sub	sp, #40	; 0x28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	2300      	movs	r3, #0
 80065f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	431a      	orrs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	431a      	orrs	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	4313      	orrs	r3, r2
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b9e      	ldr	r3, [pc, #632]	; (8006894 <UART_SetConfig+0x2a8>)
 800661c:	4013      	ands	r3, r2
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006624:	430b      	orrs	r3, r1
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a93      	ldr	r2, [pc, #588]	; (8006898 <UART_SetConfig+0x2ac>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <UART_SetConfig+0x6c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	4313      	orrs	r3, r2
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a8a      	ldr	r2, [pc, #552]	; (800689c <UART_SetConfig+0x2b0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d126      	bne.n	80066c4 <UART_SetConfig+0xd8>
 8006676:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <UART_SetConfig+0x2b4>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	2b03      	cmp	r3, #3
 8006682:	d81b      	bhi.n	80066bc <UART_SetConfig+0xd0>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0xa0>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066b5 	.word	0x080066b5
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e0ab      	b.n	80067fc <UART_SetConfig+0x210>
 80066a4:	2302      	movs	r3, #2
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066aa:	e0a7      	b.n	80067fc <UART_SetConfig+0x210>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e0a3      	b.n	80067fc <UART_SetConfig+0x210>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e09f      	b.n	80067fc <UART_SetConfig+0x210>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e09b      	b.n	80067fc <UART_SetConfig+0x210>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <UART_SetConfig+0x2b8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d138      	bne.n	8006740 <UART_SetConfig+0x154>
 80066ce:	4b74      	ldr	r3, [pc, #464]	; (80068a0 <UART_SetConfig+0x2b4>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	d82d      	bhi.n	8006738 <UART_SetConfig+0x14c>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0xf8>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006721 	.word	0x08006721
 8006708:	08006739 	.word	0x08006739
 800670c:	08006739 	.word	0x08006739
 8006710:	08006739 	.word	0x08006739
 8006714:	08006731 	.word	0x08006731
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e06d      	b.n	80067fc <UART_SetConfig+0x210>
 8006720:	2302      	movs	r3, #2
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	e069      	b.n	80067fc <UART_SetConfig+0x210>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e065      	b.n	80067fc <UART_SetConfig+0x210>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e061      	b.n	80067fc <UART_SetConfig+0x210>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e05d      	b.n	80067fc <UART_SetConfig+0x210>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a58      	ldr	r2, [pc, #352]	; (80068a8 <UART_SetConfig+0x2bc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d125      	bne.n	8006796 <UART_SetConfig+0x1aa>
 800674a:	4b55      	ldr	r3, [pc, #340]	; (80068a0 <UART_SetConfig+0x2b4>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006754:	2b30      	cmp	r3, #48	; 0x30
 8006756:	d016      	beq.n	8006786 <UART_SetConfig+0x19a>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d818      	bhi.n	800678e <UART_SetConfig+0x1a2>
 800675c:	2b20      	cmp	r3, #32
 800675e:	d00a      	beq.n	8006776 <UART_SetConfig+0x18a>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d814      	bhi.n	800678e <UART_SetConfig+0x1a2>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <UART_SetConfig+0x182>
 8006768:	2b10      	cmp	r3, #16
 800676a:	d008      	beq.n	800677e <UART_SetConfig+0x192>
 800676c:	e00f      	b.n	800678e <UART_SetConfig+0x1a2>
 800676e:	2300      	movs	r3, #0
 8006770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006774:	e042      	b.n	80067fc <UART_SetConfig+0x210>
 8006776:	2302      	movs	r3, #2
 8006778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677c:	e03e      	b.n	80067fc <UART_SetConfig+0x210>
 800677e:	2304      	movs	r3, #4
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006784:	e03a      	b.n	80067fc <UART_SetConfig+0x210>
 8006786:	2308      	movs	r3, #8
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678c:	e036      	b.n	80067fc <UART_SetConfig+0x210>
 800678e:	2310      	movs	r3, #16
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006794:	e032      	b.n	80067fc <UART_SetConfig+0x210>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <UART_SetConfig+0x2ac>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d12a      	bne.n	80067f6 <UART_SetConfig+0x20a>
 80067a0:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <UART_SetConfig+0x2b4>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ae:	d01a      	beq.n	80067e6 <UART_SetConfig+0x1fa>
 80067b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067b4:	d81b      	bhi.n	80067ee <UART_SetConfig+0x202>
 80067b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ba:	d00c      	beq.n	80067d6 <UART_SetConfig+0x1ea>
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d815      	bhi.n	80067ee <UART_SetConfig+0x202>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <UART_SetConfig+0x1e2>
 80067c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ca:	d008      	beq.n	80067de <UART_SetConfig+0x1f2>
 80067cc:	e00f      	b.n	80067ee <UART_SetConfig+0x202>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e012      	b.n	80067fc <UART_SetConfig+0x210>
 80067d6:	2302      	movs	r3, #2
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067dc:	e00e      	b.n	80067fc <UART_SetConfig+0x210>
 80067de:	2304      	movs	r3, #4
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e4:	e00a      	b.n	80067fc <UART_SetConfig+0x210>
 80067e6:	2308      	movs	r3, #8
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ec:	e006      	b.n	80067fc <UART_SetConfig+0x210>
 80067ee:	2310      	movs	r3, #16
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f4:	e002      	b.n	80067fc <UART_SetConfig+0x210>
 80067f6:	2310      	movs	r3, #16
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a25      	ldr	r2, [pc, #148]	; (8006898 <UART_SetConfig+0x2ac>)
 8006802:	4293      	cmp	r3, r2
 8006804:	f040 808a 	bne.w	800691c <UART_SetConfig+0x330>
 8006808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680c:	2b08      	cmp	r3, #8
 800680e:	d824      	bhi.n	800685a <UART_SetConfig+0x26e>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x22c>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800683d 	.word	0x0800683d
 800681c:	0800685b 	.word	0x0800685b
 8006820:	08006845 	.word	0x08006845
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800684b 	.word	0x0800684b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	0800685b 	.word	0x0800685b
 8006834:	0800685b 	.word	0x0800685b
 8006838:	08006853 	.word	0x08006853
 800683c:	f7fe fb82 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8006840:	61f8      	str	r0, [r7, #28]
 8006842:	e010      	b.n	8006866 <UART_SetConfig+0x27a>
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <UART_SetConfig+0x2c0>)
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e00d      	b.n	8006866 <UART_SetConfig+0x27a>
 800684a:	f7fe fae3 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 800684e:	61f8      	str	r0, [r7, #28]
 8006850:	e009      	b.n	8006866 <UART_SetConfig+0x27a>
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x27a>
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006864:	bf00      	nop
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8109 	beq.w	8006a80 <UART_SetConfig+0x494>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	4413      	add	r3, r2
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	429a      	cmp	r2, r3
 800687c:	d305      	bcc.n	800688a <UART_SetConfig+0x29e>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	031b      	lsls	r3, r3, #12
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	429a      	cmp	r2, r3
 8006888:	d912      	bls.n	80068b0 <UART_SetConfig+0x2c4>
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006890:	e0f6      	b.n	8006a80 <UART_SetConfig+0x494>
 8006892:	bf00      	nop
 8006894:	efff69f3 	.word	0xefff69f3
 8006898:	40008000 	.word	0x40008000
 800689c:	40013800 	.word	0x40013800
 80068a0:	40021000 	.word	0x40021000
 80068a4:	40004400 	.word	0x40004400
 80068a8:	40004800 	.word	0x40004800
 80068ac:	00f42400 	.word	0x00f42400
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2200      	movs	r2, #0
 80068b4:	461c      	mov	r4, r3
 80068b6:	4615      	mov	r5, r2
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	022b      	lsls	r3, r5, #8
 80068c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068c6:	0222      	lsls	r2, r4, #8
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	6849      	ldr	r1, [r1, #4]
 80068cc:	0849      	lsrs	r1, r1, #1
 80068ce:	2000      	movs	r0, #0
 80068d0:	4688      	mov	r8, r1
 80068d2:	4681      	mov	r9, r0
 80068d4:	eb12 0a08 	adds.w	sl, r2, r8
 80068d8:	eb43 0b09 	adc.w	fp, r3, r9
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ea:	4650      	mov	r0, sl
 80068ec:	4659      	mov	r1, fp
 80068ee:	f7fa f9db 	bl	8000ca8 <__aeabi_uldivmod>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4613      	mov	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006900:	d308      	bcc.n	8006914 <UART_SetConfig+0x328>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006908:	d204      	bcs.n	8006914 <UART_SetConfig+0x328>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	60da      	str	r2, [r3, #12]
 8006912:	e0b5      	b.n	8006a80 <UART_SetConfig+0x494>
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800691a:	e0b1      	b.n	8006a80 <UART_SetConfig+0x494>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006924:	d15d      	bne.n	80069e2 <UART_SetConfig+0x3f6>
 8006926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800692a:	2b08      	cmp	r3, #8
 800692c:	d827      	bhi.n	800697e <UART_SetConfig+0x392>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x348>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006959 	.word	0x08006959
 8006938:	08006961 	.word	0x08006961
 800693c:	08006969 	.word	0x08006969
 8006940:	0800697f 	.word	0x0800697f
 8006944:	0800696f 	.word	0x0800696f
 8006948:	0800697f 	.word	0x0800697f
 800694c:	0800697f 	.word	0x0800697f
 8006950:	0800697f 	.word	0x0800697f
 8006954:	08006977 	.word	0x08006977
 8006958:	f7fe faf4 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800695c:	61f8      	str	r0, [r7, #28]
 800695e:	e014      	b.n	800698a <UART_SetConfig+0x39e>
 8006960:	f7fe fb06 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006964:	61f8      	str	r0, [r7, #28]
 8006966:	e010      	b.n	800698a <UART_SetConfig+0x39e>
 8006968:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <UART_SetConfig+0x4b0>)
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e00d      	b.n	800698a <UART_SetConfig+0x39e>
 800696e:	f7fe fa51 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8006972:	61f8      	str	r0, [r7, #28]
 8006974:	e009      	b.n	800698a <UART_SetConfig+0x39e>
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	e005      	b.n	800698a <UART_SetConfig+0x39e>
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	2301      	movs	r3, #1
 8006984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006988:	bf00      	nop
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d077      	beq.n	8006a80 <UART_SetConfig+0x494>
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	005a      	lsls	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b0f      	cmp	r3, #15
 80069aa:	d916      	bls.n	80069da <UART_SetConfig+0x3ee>
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b2:	d212      	bcs.n	80069da <UART_SetConfig+0x3ee>
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f023 030f 	bic.w	r3, r3, #15
 80069bc:	82fb      	strh	r3, [r7, #22]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	8afb      	ldrh	r3, [r7, #22]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	82fb      	strh	r3, [r7, #22]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	8afa      	ldrh	r2, [r7, #22]
 80069d6:	60da      	str	r2, [r3, #12]
 80069d8:	e052      	b.n	8006a80 <UART_SetConfig+0x494>
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069e0:	e04e      	b.n	8006a80 <UART_SetConfig+0x494>
 80069e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d827      	bhi.n	8006a3a <UART_SetConfig+0x44e>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x404>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a2b 	.word	0x08006a2b
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a3b 	.word	0x08006a3b
 8006a0c:	08006a3b 	.word	0x08006a3b
 8006a10:	08006a33 	.word	0x08006a33
 8006a14:	f7fe fa96 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8006a18:	61f8      	str	r0, [r7, #28]
 8006a1a:	e014      	b.n	8006a46 <UART_SetConfig+0x45a>
 8006a1c:	f7fe faa8 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006a20:	61f8      	str	r0, [r7, #28]
 8006a22:	e010      	b.n	8006a46 <UART_SetConfig+0x45a>
 8006a24:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <UART_SetConfig+0x4b0>)
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e00d      	b.n	8006a46 <UART_SetConfig+0x45a>
 8006a2a:	f7fe f9f3 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8006a2e:	61f8      	str	r0, [r7, #28]
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x45a>
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	61fb      	str	r3, [r7, #28]
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x45a>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a44:	bf00      	nop
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d019      	beq.n	8006a80 <UART_SetConfig+0x494>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	085a      	lsrs	r2, r3, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	61bb      	str	r3, [r7, #24]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b0f      	cmp	r3, #15
 8006a64:	d909      	bls.n	8006a7a <UART_SetConfig+0x48e>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6c:	d205      	bcs.n	8006a7a <UART_SetConfig+0x48e>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e002      	b.n	8006a80 <UART_SetConfig+0x494>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	669a      	str	r2, [r3, #104]	; 0x68
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006a90:	4618      	mov	r0, r3
 8006a92:	3728      	adds	r7, #40	; 0x28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a9a:	bf00      	nop
 8006a9c:	00f42400 	.word	0x00f42400

08006aa0 <UART_AdvFeatureConfig>:
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <UART_AdvFeatureConfig+0x2a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x4c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <UART_AdvFeatureConfig+0x6e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <UART_AdvFeatureConfig+0x90>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	605a      	str	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <UART_AdvFeatureConfig+0xb2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <UART_AdvFeatureConfig+0xd4>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01a      	beq.n	8006bb6 <UART_AdvFeatureConfig+0x116>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9e:	d10a      	bne.n	8006bb6 <UART_AdvFeatureConfig+0x116>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x138>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <UART_CheckIdleState>:
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b098      	sub	sp, #96	; 0x60
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006bf4:	f7fc f8c0 	bl	8002d78 <HAL_GetTick>
 8006bf8:	6578      	str	r0, [r7, #84]	; 0x54
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d12e      	bne.n	8006c66 <UART_CheckIdleState+0x82>
 8006c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c10:	2200      	movs	r2, #0
 8006c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f88c 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d021      	beq.n	8006c66 <UART_CheckIdleState+0x82>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c36:	653b      	str	r3, [r7, #80]	; 0x50
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
 8006c42:	643a      	str	r2, [r7, #64]	; 0x40
 8006c44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_CheckIdleState+0x3e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006c62:	2303      	movs	r3, #3
 8006c64:	e062      	b.n	8006d2c <UART_CheckIdleState+0x148>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d149      	bne.n	8006d08 <UART_CheckIdleState+0x124>
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f856 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03c      	beq.n	8006d08 <UART_CheckIdleState+0x124>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	623b      	str	r3, [r7, #32]
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cac:	633b      	str	r3, [r7, #48]	; 0x30
 8006cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_CheckIdleState+0xaa>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce0:	61fa      	str	r2, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <UART_CheckIdleState+0xdc>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006d04:	2303      	movs	r3, #3
 8006d06:	e011      	b.n	8006d2c <UART_CheckIdleState+0x148>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	67da      	str	r2, [r3, #124]	; 0x7c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	661a      	str	r2, [r3, #96]	; 0x60
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	665a      	str	r2, [r3, #100]	; 0x64
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3758      	adds	r7, #88	; 0x58
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_WaitOnFlagUntilTimeout>:
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	71fb      	strb	r3, [r7, #7]
 8006d44:	e049      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d045      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
 8006d4e:	f7fc f813 	bl	8002d78 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d302      	bcc.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x34>
 8006d64:	2303      	movs	r3, #3
 8006d66:	e048      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xc6>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d031      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d110      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x72>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	621a      	str	r2, [r3, #32]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f8ff 	bl	8006f90 <UART_EndRxTransfer>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2208      	movs	r2, #8
 8006d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006da2:	2301      	movs	r3, #1
 8006da4:	e029      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xc6>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db4:	d111      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dbe:	621a      	str	r2, [r3, #32]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f8e5 	bl	8006f90 <UART_EndRxTransfer>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xc6>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d0a6      	beq.n	8006d46 <UART_WaitOnFlagUntilTimeout+0x12>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UART_Start_Receive_IT>:
 8006e04:	b480      	push	{r7}
 8006e06:	b097      	sub	sp, #92	; 0x5c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	669a      	str	r2, [r3, #104]	; 0x68
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e36:	d10e      	bne.n	8006e56 <UART_Start_Receive_IT+0x52>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <UART_Start_Receive_IT+0x48>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e4a:	e02d      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	22ff      	movs	r2, #255	; 0xff
 8006e50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e54:	e028      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10d      	bne.n	8006e7a <UART_Start_Receive_IT+0x76>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <UART_Start_Receive_IT+0x6c>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	22ff      	movs	r2, #255	; 0xff
 8006e6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e6e:	e01b      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	227f      	movs	r2, #127	; 0x7f
 8006e74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e78:	e016      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e82:	d10d      	bne.n	8006ea0 <UART_Start_Receive_IT+0x9c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <UART_Start_Receive_IT+0x92>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	227f      	movs	r2, #127	; 0x7f
 8006e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e94:	e008      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	223f      	movs	r2, #63	; 0x3f
 8006e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e9e:	e003      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2222      	movs	r2, #34	; 0x22
 8006eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ed8:	64ba      	str	r2, [r7, #72]	; 0x48
 8006eda:	647b      	str	r3, [r7, #68]	; 0x44
 8006edc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_Start_Receive_IT+0xb4>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef4:	d107      	bne.n	8006f06 <UART_Start_Receive_IT+0x102>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <UART_Start_Receive_IT+0x102>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <UART_Start_Receive_IT+0x184>)
 8006f02:	669a      	str	r2, [r3, #104]	; 0x68
 8006f04:	e002      	b.n	8006f0c <UART_Start_Receive_IT+0x108>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a20      	ldr	r2, [pc, #128]	; (8006f8c <UART_Start_Receive_IT+0x188>)
 8006f0a:	669a      	str	r2, [r3, #104]	; 0x68
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d019      	beq.n	8006f48 <UART_Start_Receive_IT+0x144>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
 8006f34:	633a      	str	r2, [r7, #48]	; 0x30
 8006f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e6      	bne.n	8006f14 <UART_Start_Receive_IT+0x110>
 8006f46:	e018      	b.n	8006f7a <UART_Start_Receive_IT+0x176>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f043 0320 	orr.w	r3, r3, #32
 8006f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f66:	623b      	str	r3, [r7, #32]
 8006f68:	61fa      	str	r2, [r7, #28]
 8006f6a:	69f9      	ldr	r1, [r7, #28]
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_Start_Receive_IT+0x144>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	375c      	adds	r7, #92	; 0x5c
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	08007295 	.word	0x08007295
 8006f8c:	080070d9 	.word	0x080070d9

08006f90 <UART_EndRxTransfer>:
 8006f90:	b480      	push	{r7}
 8006f92:	b095      	sub	sp, #84	; 0x54
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e6      	bne.n	8006f98 <UART_EndRxTransfer+0x8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	623b      	str	r3, [r7, #32]
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_EndRxTransfer+0x3a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	2b01      	cmp	r3, #1
 8007004:	d118      	bne.n	8007038 <UART_EndRxTransfer+0xa8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_EndRxTransfer+0x76>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	661a      	str	r2, [r3, #96]	; 0x60
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	669a      	str	r2, [r3, #104]	; 0x68
 800704c:	bf00      	nop
 800704e:	3754      	adds	r7, #84	; 0x54
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_DMAAbortOnError>:
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff faa2 	bl	80065c0 <HAL_UART_ErrorCallback>
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <UART_EndTransmit_IT>:
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	617a      	str	r2, [r7, #20]
 80070ae:	6979      	ldr	r1, [r7, #20]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e6      	bne.n	800708c <UART_EndTransmit_IT+0x8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fa6e 	bl	80065ac <HAL_UART_TxCpltCallback>
 80070d0:	bf00      	nop
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <UART_RxISR_8BIT>:
 80070d8:	b580      	push	{r7, lr}
 80070da:	b09c      	sub	sp, #112	; 0x70
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f0:	2b22      	cmp	r3, #34	; 0x22
 80070f2:	f040 80be 	bne.w	8007272 <UART_RxISR_8BIT+0x19a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80070fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007104:	b2d9      	uxtb	r1, r3
 8007106:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800710a:	b2da      	uxtb	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	400a      	ands	r2, r1
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 80a3 	bne.w	8007286 <UART_RxISR_8BIT+0x1ae>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48
 800714e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007154:	66bb      	str	r3, [r7, #104]	; 0x68
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800715e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007160:	657a      	str	r2, [r7, #84]	; 0x54
 8007162:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	653b      	str	r3, [r7, #80]	; 0x50
 800716c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_RxISR_8BIT+0x68>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	667b      	str	r3, [r7, #100]	; 0x64
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007192:	647a      	str	r2, [r7, #68]	; 0x44
 8007194:	643b      	str	r3, [r7, #64]	; 0x40
 8007196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e5      	bne.n	8007172 <UART_RxISR_8BIT+0x9a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	669a      	str	r2, [r3, #104]	; 0x68
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	665a      	str	r2, [r3, #100]	; 0x64
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a34      	ldr	r2, [pc, #208]	; (8007290 <UART_RxISR_8BIT+0x1b8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d01f      	beq.n	8007204 <UART_RxISR_8BIT+0x12c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d018      	beq.n	8007204 <UART_RxISR_8BIT+0x12c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	623b      	str	r3, [r7, #32]
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071e6:	663b      	str	r3, [r7, #96]	; 0x60
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f0:	633b      	str	r3, [r7, #48]	; 0x30
 80071f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e6      	bne.n	80071d2 <UART_RxISR_8BIT+0xfa>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007208:	2b01      	cmp	r3, #1
 800720a:	d12e      	bne.n	800726a <UART_RxISR_8BIT+0x192>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	661a      	str	r2, [r3, #96]	; 0x60
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0310 	bic.w	r3, r3, #16
 8007226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	61ba      	str	r2, [r7, #24]
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_RxISR_8BIT+0x13a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b10      	cmp	r3, #16
 8007250:	d103      	bne.n	800725a <UART_RxISR_8BIT+0x182>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2210      	movs	r2, #16
 8007258:	621a      	str	r2, [r3, #32]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff f9b6 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
 8007268:	e00d      	b.n	8007286 <UART_RxISR_8BIT+0x1ae>
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fa fb92 	bl	8001994 <HAL_UART_RxCpltCallback>
 8007270:	e009      	b.n	8007286 <UART_RxISR_8BIT+0x1ae>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	8b1b      	ldrh	r3, [r3, #24]
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0208 	orr.w	r2, r2, #8
 8007282:	b292      	uxth	r2, r2
 8007284:	831a      	strh	r2, [r3, #24]
 8007286:	bf00      	nop
 8007288:	3770      	adds	r7, #112	; 0x70
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40008000 	.word	0x40008000

08007294 <UART_RxISR_16BIT>:
 8007294:	b580      	push	{r7, lr}
 8007296:	b09c      	sub	sp, #112	; 0x70
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ac:	2b22      	cmp	r3, #34	; 0x22
 80072ae:	f040 80be 	bne.w	800742e <UART_RxISR_16BIT+0x19a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80072c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80072ca:	4013      	ands	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	1c9a      	adds	r2, r3, #2
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	655a      	str	r2, [r3, #84]	; 0x54
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 80a3 	bne.w	8007442 <UART_RxISR_16BIT+0x1ae>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	64bb      	str	r3, [r7, #72]	; 0x48
 8007302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
 800730a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800730c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007310:	667b      	str	r3, [r7, #100]	; 0x64
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800731a:	657b      	str	r3, [r7, #84]	; 0x54
 800731c:	653a      	str	r2, [r7, #80]	; 0x50
 800731e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e6      	bne.n	80072fc <UART_RxISR_16BIT+0x68>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	633b      	str	r3, [r7, #48]	; 0x30
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	f023 0301 	bic.w	r3, r3, #1
 8007344:	663b      	str	r3, [r7, #96]	; 0x60
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800734e:	643a      	str	r2, [r7, #64]	; 0x40
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_RxISR_16BIT+0x9a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	669a      	str	r2, [r3, #104]	; 0x68
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	665a      	str	r2, [r3, #100]	; 0x64
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a34      	ldr	r2, [pc, #208]	; (800744c <UART_RxISR_16BIT+0x1b8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d01f      	beq.n	80073c0 <UART_RxISR_16BIT+0x12c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d018      	beq.n	80073c0 <UART_RxISR_16BIT+0x12c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	623b      	str	r3, [r7, #32]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80073b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_RxISR_16BIT+0xfa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d12e      	bne.n	8007426 <UART_RxISR_16BIT+0x192>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	661a      	str	r2, [r3, #96]	; 0x60
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0310 	bic.w	r3, r3, #16
 80073e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	617a      	str	r2, [r7, #20]
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_RxISR_16BIT+0x13a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b10      	cmp	r3, #16
 800740c:	d103      	bne.n	8007416 <UART_RxISR_16BIT+0x182>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2210      	movs	r2, #16
 8007414:	621a      	str	r2, [r3, #32]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff f8d8 	bl	80065d4 <HAL_UARTEx_RxEventCallback>
 8007424:	e00d      	b.n	8007442 <UART_RxISR_16BIT+0x1ae>
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fa fab4 	bl	8001994 <HAL_UART_RxCpltCallback>
 800742c:	e009      	b.n	8007442 <UART_RxISR_16BIT+0x1ae>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	8b1b      	ldrh	r3, [r3, #24]
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0208 	orr.w	r2, r2, #8
 800743e:	b292      	uxth	r2, r2
 8007440:	831a      	strh	r2, [r3, #24]
 8007442:	bf00      	nop
 8007444:	3770      	adds	r7, #112	; 0x70
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40008000 	.word	0x40008000

08007450 <HAL_UARTEx_WakeupCallback>:
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007468:	4904      	ldr	r1, [pc, #16]	; (800747c <MX_FATFS_Init+0x18>)
 800746a:	4805      	ldr	r0, [pc, #20]	; (8007480 <MX_FATFS_Init+0x1c>)
 800746c:	f002 ffd2 	bl	800a414 <FATFS_LinkDriver>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	4b03      	ldr	r3, [pc, #12]	; (8007484 <MX_FATFS_Init+0x20>)
 8007476:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007478:	bf00      	nop
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000a44 	.word	0x20000a44
 8007480:	2000001c 	.word	0x2000001c
 8007484:	20000a40 	.word	0x20000a40

08007488 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 f9d1 	bl	800783c <USER_SPI_initialize>
 800749a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return USER_SPI_status(pdrv); //ADD THIS LINE
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 faaf 	bl	8007a14 <USER_SPI_status>
 80074b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80074d0:	7bf8      	ldrb	r0, [r7, #15]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	f000 fab2 	bl	8007a40 <USER_SPI_read>
 80074dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80074f6:	7bf8      	ldrb	r0, [r7, #15]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	f000 fb05 	bl	8007b0c <USER_SPI_write>
 8007502:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	603a      	str	r2, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
 8007518:	460b      	mov	r3, r1
 800751a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800751c:	79b9      	ldrb	r1, [r7, #6]
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fb6e 	bl	8007c04 <USER_SPI_ioctl>
 8007528:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800753c:	f7fb fc1c 	bl	8002d78 <HAL_GetTick>
 8007540:	4603      	mov	r3, r0
 8007542:	4a04      	ldr	r2, [pc, #16]	; (8007554 <SPI_Timer_On+0x20>)
 8007544:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007546:	4a04      	ldr	r2, [pc, #16]	; (8007558 <SPI_Timer_On+0x24>)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20000a4c 	.word	0x20000a4c
 8007558:	20000a50 	.word	0x20000a50

0800755c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007560:	f7fb fc0a 	bl	8002d78 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <SPI_Timer_Status+0x24>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <SPI_Timer_Status+0x28>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	bf34      	ite	cc
 8007574:	2301      	movcc	r3, #1
 8007576:	2300      	movcs	r3, #0
 8007578:	b2db      	uxtb	r3, r3
}
 800757a:	4618      	mov	r0, r3
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000a4c 	.word	0x20000a4c
 8007584:	20000a50 	.word	0x20000a50

08007588 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af02      	add	r7, sp, #8
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007592:	f107 020f 	add.w	r2, r7, #15
 8007596:	1df9      	adds	r1, r7, #7
 8007598:	2332      	movs	r3, #50	; 0x32
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2301      	movs	r3, #1
 800759e:	4804      	ldr	r0, [pc, #16]	; (80075b0 <xchg_spi+0x28>)
 80075a0:	f7fe f8fa 	bl	8005798 <HAL_SPI_TransmitReceive>
    return rxDat;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200002d4 	.word	0x200002d4

080075b4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e00a      	b.n	80075da <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	18d4      	adds	r4, r2, r3
 80075ca:	20ff      	movs	r0, #255	; 0xff
 80075cc:	f7ff ffdc 	bl	8007588 <xchg_spi>
 80075d0:	4603      	mov	r3, r0
 80075d2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d3f0      	bcc.n	80075c4 <rcvr_spi_multi+0x10>
	}
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd90      	pop	{r4, r7, pc}

080075ec <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f04f 33ff 	mov.w	r3, #4294967295
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4803      	ldr	r0, [pc, #12]	; (8007610 <xmit_spi_multi+0x24>)
 8007602:	f7fd ff54 	bl	80054ae <HAL_SPI_Transmit>
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200002d4 	.word	0x200002d4

08007614 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800761c:	f7fb fbac 	bl	8002d78 <HAL_GetTick>
 8007620:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007626:	20ff      	movs	r0, #255	; 0xff
 8007628:	f7ff ffae 	bl	8007588 <xchg_spi>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2bff      	cmp	r3, #255	; 0xff
 8007634:	d007      	beq.n	8007646 <wait_ready+0x32>
 8007636:	f7fb fb9f 	bl	8002d78 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	429a      	cmp	r2, r3
 8007644:	d8ef      	bhi.n	8007626 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	2bff      	cmp	r3, #255	; 0xff
 800764a:	bf0c      	ite	eq
 800764c:	2301      	moveq	r3, #1
 800764e:	2300      	movne	r3, #0
 8007650:	b2db      	uxtb	r3, r3
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800765e:	2201      	movs	r2, #1
 8007660:	2110      	movs	r1, #16
 8007662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007666:	f7fb feb9 	bl	80033dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800766a:	20ff      	movs	r0, #255	; 0xff
 800766c:	f7ff ff8c 	bl	8007588 <xchg_spi>

}
 8007670:	bf00      	nop
 8007672:	bd80      	pop	{r7, pc}

08007674 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007678:	2200      	movs	r2, #0
 800767a:	2110      	movs	r1, #16
 800767c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007680:	f7fb feac 	bl	80033dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007684:	20ff      	movs	r0, #255	; 0xff
 8007686:	f7ff ff7f 	bl	8007588 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800768a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800768e:	f7ff ffc1 	bl	8007614 <wait_ready>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <spiselect+0x28>
 8007698:	2301      	movs	r3, #1
 800769a:	e002      	b.n	80076a2 <spiselect+0x2e>

	despiselect();
 800769c:	f7ff ffdd 	bl	800765a <despiselect>
	return 0;	/* Timeout */
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80076b0:	20c8      	movs	r0, #200	; 0xc8
 80076b2:	f7ff ff3f 	bl	8007534 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80076b6:	20ff      	movs	r0, #255	; 0xff
 80076b8:	f7ff ff66 	bl	8007588 <xchg_spi>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	2bff      	cmp	r3, #255	; 0xff
 80076c4:	d104      	bne.n	80076d0 <rcvr_datablock+0x2a>
 80076c6:	f7ff ff49 	bl	800755c <SPI_Timer_Status>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f2      	bne.n	80076b6 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2bfe      	cmp	r3, #254	; 0xfe
 80076d4:	d001      	beq.n	80076da <rcvr_datablock+0x34>
 80076d6:	2300      	movs	r3, #0
 80076d8:	e00a      	b.n	80076f0 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ff69 	bl	80075b4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80076e2:	20ff      	movs	r0, #255	; 0xff
 80076e4:	f7ff ff50 	bl	8007588 <xchg_spi>
 80076e8:	20ff      	movs	r0, #255	; 0xff
 80076ea:	f7ff ff4d 	bl	8007588 <xchg_spi>

	return 1;						/* Function succeeded */
 80076ee:	2301      	movs	r3, #1
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007708:	f7ff ff84 	bl	8007614 <wait_ready>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <xmit_datablock+0x1e>
 8007712:	2300      	movs	r3, #0
 8007714:	e01e      	b.n	8007754 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff ff35 	bl	8007588 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	2bfd      	cmp	r3, #253	; 0xfd
 8007722:	d016      	beq.n	8007752 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ff5f 	bl	80075ec <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800772e:	20ff      	movs	r0, #255	; 0xff
 8007730:	f7ff ff2a 	bl	8007588 <xchg_spi>
 8007734:	20ff      	movs	r0, #255	; 0xff
 8007736:	f7ff ff27 	bl	8007588 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800773a:	20ff      	movs	r0, #255	; 0xff
 800773c:	f7ff ff24 	bl	8007588 <xchg_spi>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2b05      	cmp	r3, #5
 800774c:	d001      	beq.n	8007752 <xmit_datablock+0x5a>
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <xmit_datablock+0x5c>
	}
	return 1;
 8007752:	2301      	movs	r3, #1
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	6039      	str	r1, [r7, #0]
 8007766:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776c:	2b00      	cmp	r3, #0
 800776e:	da0e      	bge.n	800778e <send_cmd+0x32>
		cmd &= 0x7F;
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007776:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007778:	2100      	movs	r1, #0
 800777a:	2037      	movs	r0, #55	; 0x37
 800777c:	f7ff ffee 	bl	800775c <send_cmd>
 8007780:	4603      	mov	r3, r0
 8007782:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d901      	bls.n	800778e <send_cmd+0x32>
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	e051      	b.n	8007832 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	2b0c      	cmp	r3, #12
 8007792:	d008      	beq.n	80077a6 <send_cmd+0x4a>
		despiselect();
 8007794:	f7ff ff61 	bl	800765a <despiselect>
		if (!spiselect()) return 0xFF;
 8007798:	f7ff ff6c 	bl	8007674 <spiselect>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <send_cmd+0x4a>
 80077a2:	23ff      	movs	r3, #255	; 0xff
 80077a4:	e045      	b.n	8007832 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff feea 	bl	8007588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	0e1b      	lsrs	r3, r3, #24
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fee4 	bl	8007588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	0c1b      	lsrs	r3, r3, #16
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fede 	bl	8007588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff fed8 	bl	8007588 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff fed3 	bl	8007588 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <send_cmd+0x94>
 80077ec:	2395      	movs	r3, #149	; 0x95
 80077ee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d101      	bne.n	80077fa <send_cmd+0x9e>
 80077f6:	2387      	movs	r3, #135	; 0x87
 80077f8:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fec3 	bl	8007588 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	2b0c      	cmp	r3, #12
 8007806:	d102      	bne.n	800780e <send_cmd+0xb2>
 8007808:	20ff      	movs	r0, #255	; 0xff
 800780a:	f7ff febd 	bl	8007588 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800780e:	230a      	movs	r3, #10
 8007810:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007812:	20ff      	movs	r0, #255	; 0xff
 8007814:	f7ff feb8 	bl	8007588 <xchg_spi>
 8007818:	4603      	mov	r3, r0
 800781a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800781c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da05      	bge.n	8007830 <send_cmd+0xd4>
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	3b01      	subs	r3, #1
 8007828:	73fb      	strb	r3, [r7, #15]
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007830:	7bbb      	ldrb	r3, [r7, #14]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800783c:	b590      	push	{r4, r7, lr}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <USER_SPI_initialize+0x14>
 800784c:	2301      	movs	r3, #1
 800784e:	e0d6      	b.n	80079fe <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007850:	4b6d      	ldr	r3, [pc, #436]	; (8007a08 <USER_SPI_initialize+0x1cc>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <USER_SPI_initialize+0x2a>
 800785e:	4b6a      	ldr	r3, [pc, #424]	; (8007a08 <USER_SPI_initialize+0x1cc>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	e0cb      	b.n	80079fe <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007866:	4b69      	ldr	r3, [pc, #420]	; (8007a0c <USER_SPI_initialize+0x1d0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007870:	4b66      	ldr	r3, [pc, #408]	; (8007a0c <USER_SPI_initialize+0x1d0>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007878:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800787a:	230a      	movs	r3, #10
 800787c:	73fb      	strb	r3, [r7, #15]
 800787e:	e005      	b.n	800788c <USER_SPI_initialize+0x50>
 8007880:	20ff      	movs	r0, #255	; 0xff
 8007882:	f7ff fe81 	bl	8007588 <xchg_spi>
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	3b01      	subs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f6      	bne.n	8007880 <USER_SPI_initialize+0x44>

	ty = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007896:	2100      	movs	r1, #0
 8007898:	2000      	movs	r0, #0
 800789a:	f7ff ff5f 	bl	800775c <send_cmd>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	f040 808b 	bne.w	80079bc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80078a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078aa:	f7ff fe43 	bl	8007534 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80078ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078b2:	2008      	movs	r0, #8
 80078b4:	f7ff ff52 	bl	800775c <send_cmd>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d151      	bne.n	8007962 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	e00d      	b.n	80078e0 <USER_SPI_initialize+0xa4>
 80078c4:	7bfc      	ldrb	r4, [r7, #15]
 80078c6:	20ff      	movs	r0, #255	; 0xff
 80078c8:	f7ff fe5e 	bl	8007588 <xchg_spi>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	f104 0310 	add.w	r3, r4, #16
 80078d4:	443b      	add	r3, r7
 80078d6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	3301      	adds	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d9ee      	bls.n	80078c4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80078e6:	7abb      	ldrb	r3, [r7, #10]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d167      	bne.n	80079bc <USER_SPI_initialize+0x180>
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	2baa      	cmp	r3, #170	; 0xaa
 80078f0:	d164      	bne.n	80079bc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80078f2:	bf00      	nop
 80078f4:	f7ff fe32 	bl	800755c <SPI_Timer_Status>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d007      	beq.n	800790e <USER_SPI_initialize+0xd2>
 80078fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007902:	20a9      	movs	r0, #169	; 0xa9
 8007904:	f7ff ff2a 	bl	800775c <send_cmd>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f2      	bne.n	80078f4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800790e:	f7ff fe25 	bl	800755c <SPI_Timer_Status>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d051      	beq.n	80079bc <USER_SPI_initialize+0x180>
 8007918:	2100      	movs	r1, #0
 800791a:	203a      	movs	r0, #58	; 0x3a
 800791c:	f7ff ff1e 	bl	800775c <send_cmd>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d14a      	bne.n	80079bc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
 800792a:	e00d      	b.n	8007948 <USER_SPI_initialize+0x10c>
 800792c:	7bfc      	ldrb	r4, [r7, #15]
 800792e:	20ff      	movs	r0, #255	; 0xff
 8007930:	f7ff fe2a 	bl	8007588 <xchg_spi>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	f104 0310 	add.w	r3, r4, #16
 800793c:	443b      	add	r3, r7
 800793e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	3301      	adds	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d9ee      	bls.n	800792c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800794e:	7a3b      	ldrb	r3, [r7, #8]
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <USER_SPI_initialize+0x120>
 8007958:	230c      	movs	r3, #12
 800795a:	e000      	b.n	800795e <USER_SPI_initialize+0x122>
 800795c:	2304      	movs	r3, #4
 800795e:	737b      	strb	r3, [r7, #13]
 8007960:	e02c      	b.n	80079bc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007962:	2100      	movs	r1, #0
 8007964:	20a9      	movs	r0, #169	; 0xa9
 8007966:	f7ff fef9 	bl	800775c <send_cmd>
 800796a:	4603      	mov	r3, r0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d804      	bhi.n	800797a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007970:	2302      	movs	r3, #2
 8007972:	737b      	strb	r3, [r7, #13]
 8007974:	23a9      	movs	r3, #169	; 0xa9
 8007976:	73bb      	strb	r3, [r7, #14]
 8007978:	e003      	b.n	8007982 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800797a:	2301      	movs	r3, #1
 800797c:	737b      	strb	r3, [r7, #13]
 800797e:	2301      	movs	r3, #1
 8007980:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007982:	bf00      	nop
 8007984:	f7ff fdea 	bl	800755c <SPI_Timer_Status>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <USER_SPI_initialize+0x162>
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fee2 	bl	800775c <send_cmd>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f2      	bne.n	8007984 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800799e:	f7ff fddd 	bl	800755c <SPI_Timer_Status>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d007      	beq.n	80079b8 <USER_SPI_initialize+0x17c>
 80079a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079ac:	2010      	movs	r0, #16
 80079ae:	f7ff fed5 	bl	800775c <send_cmd>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <USER_SPI_initialize+0x180>
				ty = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80079bc:	4a14      	ldr	r2, [pc, #80]	; (8007a10 <USER_SPI_initialize+0x1d4>)
 80079be:	7b7b      	ldrb	r3, [r7, #13]
 80079c0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80079c2:	f7ff fe4a 	bl	800765a <despiselect>

	if (ty) {			/* OK */
 80079c6:	7b7b      	ldrb	r3, [r7, #13]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d012      	beq.n	80079f2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <USER_SPI_initialize+0x1d0>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <USER_SPI_initialize+0x1d0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0210 	orr.w	r2, r2, #16
 80079de:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <USER_SPI_initialize+0x1cc>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <USER_SPI_initialize+0x1cc>)
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e002      	b.n	80079f8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <USER_SPI_initialize+0x1cc>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <USER_SPI_initialize+0x1cc>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b2db      	uxtb	r3, r3
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000030 	.word	0x20000030
 8007a0c:	200002d4 	.word	0x200002d4
 8007a10:	20000a48 	.word	0x20000a48

08007a14 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <USER_SPI_status+0x14>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e002      	b.n	8007a2e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007a28:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <USER_SPI_status+0x28>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	b2db      	uxtb	r3, r3
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000030 	.word	0x20000030

08007a40 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <USER_SPI_read+0x1c>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USER_SPI_read+0x20>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	e04d      	b.n	8007afc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007a60:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <USER_SPI_read+0xc4>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <USER_SPI_read+0x32>
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e044      	b.n	8007afc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007a72:	4b25      	ldr	r3, [pc, #148]	; (8007b08 <USER_SPI_read+0xc8>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d102      	bne.n	8007a84 <USER_SPI_read+0x44>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	025b      	lsls	r3, r3, #9
 8007a82:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d111      	bne.n	8007aae <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	2011      	movs	r0, #17
 8007a8e:	f7ff fe65 	bl	800775c <send_cmd>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d129      	bne.n	8007aec <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a9c:	68b8      	ldr	r0, [r7, #8]
 8007a9e:	f7ff fe02 	bl	80076a6 <rcvr_datablock>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d021      	beq.n	8007aec <USER_SPI_read+0xac>
			count = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	e01e      	b.n	8007aec <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	2012      	movs	r0, #18
 8007ab2:	f7ff fe53 	bl	800775c <send_cmd>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d117      	bne.n	8007aec <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f7ff fdf0 	bl	80076a6 <rcvr_datablock>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <USER_SPI_read+0xa2>
				buff += 512;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ad2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1ed      	bne.n	8007abc <USER_SPI_read+0x7c>
 8007ae0:	e000      	b.n	8007ae4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007ae2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	200c      	movs	r0, #12
 8007ae8:	f7ff fe38 	bl	800775c <send_cmd>
		}
	}
	despiselect();
 8007aec:	f7ff fdb5 	bl	800765a <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000030 	.word	0x20000030
 8007b08:	20000a48 	.word	0x20000a48

08007b0c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <USER_SPI_write+0x1c>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <USER_SPI_write+0x20>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	e063      	b.n	8007bf4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007b2c:	4b33      	ldr	r3, [pc, #204]	; (8007bfc <USER_SPI_write+0xf0>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <USER_SPI_write+0x32>
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e05a      	b.n	8007bf4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007b3e:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <USER_SPI_write+0xf0>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USER_SPI_write+0x44>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e051      	b.n	8007bf4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007b50:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <USER_SPI_write+0xf4>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <USER_SPI_write+0x56>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	025b      	lsls	r3, r3, #9
 8007b60:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d110      	bne.n	8007b8a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	2018      	movs	r0, #24
 8007b6c:	f7ff fdf6 	bl	800775c <send_cmd>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d136      	bne.n	8007be4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007b76:	21fe      	movs	r1, #254	; 0xfe
 8007b78:	68b8      	ldr	r0, [r7, #8]
 8007b7a:	f7ff fdbd 	bl	80076f8 <xmit_datablock>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02f      	beq.n	8007be4 <USER_SPI_write+0xd8>
			count = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	e02c      	b.n	8007be4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007b8a:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <USER_SPI_write+0xf4>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f003 0306 	and.w	r3, r3, #6
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <USER_SPI_write+0x92>
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	2097      	movs	r0, #151	; 0x97
 8007b9a:	f7ff fddf 	bl	800775c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	2019      	movs	r0, #25
 8007ba2:	f7ff fddb 	bl	800775c <send_cmd>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d11b      	bne.n	8007be4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007bac:	21fc      	movs	r1, #252	; 0xfc
 8007bae:	68b8      	ldr	r0, [r7, #8]
 8007bb0:	f7ff fda2 	bl	80076f8 <xmit_datablock>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <USER_SPI_write+0xc4>
				buff += 512;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007bc0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1ee      	bne.n	8007bac <USER_SPI_write+0xa0>
 8007bce:	e000      	b.n	8007bd2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007bd0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007bd2:	21fd      	movs	r1, #253	; 0xfd
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f7ff fd8f 	bl	80076f8 <xmit_datablock>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <USER_SPI_write+0xd8>
 8007be0:	2301      	movs	r3, #1
 8007be2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007be4:	f7ff fd39 	bl	800765a <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	2300      	moveq	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000030 	.word	0x20000030
 8007c00:	20000a48 	.word	0x20000a48

08007c04 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08c      	sub	sp, #48	; 0x30
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	603a      	str	r2, [r7, #0]
 8007c0e:	71fb      	strb	r3, [r7, #7]
 8007c10:	460b      	mov	r3, r1
 8007c12:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <USER_SPI_ioctl+0x1a>
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	e15a      	b.n	8007ed4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007c1e:	4baf      	ldr	r3, [pc, #700]	; (8007edc <USER_SPI_ioctl+0x2d8>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <USER_SPI_ioctl+0x2c>
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e151      	b.n	8007ed4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007c36:	79bb      	ldrb	r3, [r7, #6]
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	f200 8136 	bhi.w	8007eaa <USER_SPI_ioctl+0x2a6>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <USER_SPI_ioctl+0x40>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007eab 	.word	0x08007eab
 8007c50:	08007d19 	.word	0x08007d19
 8007c54:	08007e0f 	.word	0x08007e0f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007c58:	f7ff fd0c 	bl	8007674 <spiselect>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8127 	beq.w	8007eb2 <USER_SPI_ioctl+0x2ae>
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007c6a:	e122      	b.n	8007eb2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	2009      	movs	r0, #9
 8007c70:	f7ff fd74 	bl	800775c <send_cmd>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 811d 	bne.w	8007eb6 <USER_SPI_ioctl+0x2b2>
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	2110      	movs	r1, #16
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fd0f 	bl	80076a6 <rcvr_datablock>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8113 	beq.w	8007eb6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007c90:	7b3b      	ldrb	r3, [r7, #12]
 8007c92:	099b      	lsrs	r3, r3, #6
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d111      	bne.n	8007cbe <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007c9a:	7d7b      	ldrb	r3, [r7, #21]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	7d3b      	ldrb	r3, [r7, #20]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	4413      	add	r3, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	7cfb      	ldrb	r3, [r7, #19]
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007cae:	4413      	add	r3, r2
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	029a      	lsls	r2, r3, #10
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e028      	b.n	8007d10 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007cbe:	7c7b      	ldrb	r3, [r7, #17]
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	7dbb      	ldrb	r3, [r7, #22]
 8007cc8:	09db      	lsrs	r3, r3, #7
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	4413      	add	r3, r2
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	7d7b      	ldrb	r3, [r7, #21]
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f003 0306 	and.w	r3, r3, #6
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	4413      	add	r3, r2
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007ce6:	7d3b      	ldrb	r3, [r7, #20]
 8007ce8:	099b      	lsrs	r3, r3, #6
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	7cfb      	ldrb	r3, [r7, #19]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	441a      	add	r2, r3
 8007cf4:	7cbb      	ldrb	r3, [r7, #18]
 8007cf6:	029b      	lsls	r3, r3, #10
 8007cf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3301      	adds	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007d02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d06:	3b09      	subs	r3, #9
 8007d08:	69fa      	ldr	r2, [r7, #28]
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007d16:	e0ce      	b.n	8007eb6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007d18:	4b71      	ldr	r3, [pc, #452]	; (8007ee0 <USER_SPI_ioctl+0x2dc>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d031      	beq.n	8007d88 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007d24:	2100      	movs	r1, #0
 8007d26:	208d      	movs	r0, #141	; 0x8d
 8007d28:	f7ff fd18 	bl	800775c <send_cmd>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f040 80c3 	bne.w	8007eba <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007d34:	20ff      	movs	r0, #255	; 0xff
 8007d36:	f7ff fc27 	bl	8007588 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007d3a:	f107 030c 	add.w	r3, r7, #12
 8007d3e:	2110      	movs	r1, #16
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff fcb0 	bl	80076a6 <rcvr_datablock>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80b6 	beq.w	8007eba <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007d4e:	2330      	movs	r3, #48	; 0x30
 8007d50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007d54:	e007      	b.n	8007d66 <USER_SPI_ioctl+0x162>
 8007d56:	20ff      	movs	r0, #255	; 0xff
 8007d58:	f7ff fc16 	bl	8007588 <xchg_spi>
 8007d5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d60:	3b01      	subs	r3, #1
 8007d62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007d66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f3      	bne.n	8007d56 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007d6e:	7dbb      	ldrb	r3, [r7, #22]
 8007d70:	091b      	lsrs	r3, r3, #4
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	2310      	movs	r3, #16
 8007d78:	fa03 f202 	lsl.w	r2, r3, r2
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007d86:	e098      	b.n	8007eba <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007d88:	2100      	movs	r1, #0
 8007d8a:	2009      	movs	r0, #9
 8007d8c:	f7ff fce6 	bl	800775c <send_cmd>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 8091 	bne.w	8007eba <USER_SPI_ioctl+0x2b6>
 8007d98:	f107 030c 	add.w	r3, r7, #12
 8007d9c:	2110      	movs	r1, #16
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fc81 	bl	80076a6 <rcvr_datablock>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 8087 	beq.w	8007eba <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007dac:	4b4c      	ldr	r3, [pc, #304]	; (8007ee0 <USER_SPI_ioctl+0x2dc>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007db8:	7dbb      	ldrb	r3, [r7, #22]
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007dc0:	7dfa      	ldrb	r2, [r7, #23]
 8007dc2:	09d2      	lsrs	r2, r2, #7
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	7e7b      	ldrb	r3, [r7, #25]
 8007dcc:	099b      	lsrs	r3, r3, #6
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	e013      	b.n	8007e06 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007dde:	7dbb      	ldrb	r3, [r7, #22]
 8007de0:	109b      	asrs	r3, r3, #2
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	3301      	adds	r3, #1
 8007dea:	7dfa      	ldrb	r2, [r7, #23]
 8007dec:	00d2      	lsls	r2, r2, #3
 8007dee:	f002 0218 	and.w	r2, r2, #24
 8007df2:	7df9      	ldrb	r1, [r7, #23]
 8007df4:	0949      	lsrs	r1, r1, #5
 8007df6:	b2c9      	uxtb	r1, r1
 8007df8:	440a      	add	r2, r1
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	fb02 f303 	mul.w	r3, r2, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007e0c:	e055      	b.n	8007eba <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007e0e:	4b34      	ldr	r3, [pc, #208]	; (8007ee0 <USER_SPI_ioctl+0x2dc>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0306 	and.w	r3, r3, #6
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d051      	beq.n	8007ebe <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007e1a:	f107 020c 	add.w	r2, r7, #12
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	210b      	movs	r1, #11
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff feee 	bl	8007c04 <USER_SPI_ioctl>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d149      	bne.n	8007ec2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007e2e:	7b3b      	ldrb	r3, [r7, #12]
 8007e30:	099b      	lsrs	r3, r3, #6
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <USER_SPI_ioctl+0x23e>
 8007e38:	7dbb      	ldrb	r3, [r7, #22]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d041      	beq.n	8007ec6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	623b      	str	r3, [r7, #32]
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007e52:	4b23      	ldr	r3, [pc, #140]	; (8007ee0 <USER_SPI_ioctl+0x2dc>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f003 0308 	and.w	r3, r3, #8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d105      	bne.n	8007e6a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	025b      	lsls	r3, r3, #9
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	025b      	lsls	r3, r3, #9
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6c:	2020      	movs	r0, #32
 8007e6e:	f7ff fc75 	bl	800775c <send_cmd>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d128      	bne.n	8007eca <USER_SPI_ioctl+0x2c6>
 8007e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e7a:	2021      	movs	r0, #33	; 0x21
 8007e7c:	f7ff fc6e 	bl	800775c <send_cmd>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d121      	bne.n	8007eca <USER_SPI_ioctl+0x2c6>
 8007e86:	2100      	movs	r1, #0
 8007e88:	2026      	movs	r0, #38	; 0x26
 8007e8a:	f7ff fc67 	bl	800775c <send_cmd>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11a      	bne.n	8007eca <USER_SPI_ioctl+0x2c6>
 8007e94:	f247 5030 	movw	r0, #30000	; 0x7530
 8007e98:	f7ff fbbc 	bl	8007614 <wait_ready>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007ea8:	e00f      	b.n	8007eca <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007eaa:	2304      	movs	r3, #4
 8007eac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007eb0:	e00c      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		break;
 8007eb2:	bf00      	nop
 8007eb4:	e00a      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		break;
 8007eb6:	bf00      	nop
 8007eb8:	e008      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		break;
 8007eba:	bf00      	nop
 8007ebc:	e006      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007ebe:	bf00      	nop
 8007ec0:	e004      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <USER_SPI_ioctl+0x2c8>
		break;
 8007eca:	bf00      	nop
	}

	despiselect();
 8007ecc:	f7ff fbc5 	bl	800765a <despiselect>

	return res;
 8007ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3730      	adds	r7, #48	; 0x30
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000030 	.word	0x20000030
 8007ee0:	20000a48 	.word	0x20000a48

08007ee4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <disk_status+0x30>)
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	79fa      	ldrb	r2, [r7, #7]
 8007efc:	4905      	ldr	r1, [pc, #20]	; (8007f14 <disk_status+0x30>)
 8007efe:	440a      	add	r2, r1
 8007f00:	7a12      	ldrb	r2, [r2, #8]
 8007f02:	4610      	mov	r0, r2
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000a7c 	.word	0x20000a7c

08007f18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	4a0d      	ldr	r2, [pc, #52]	; (8007f60 <disk_initialize+0x48>)
 8007f2a:	5cd3      	ldrb	r3, [r2, r3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d111      	bne.n	8007f54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <disk_initialize+0x48>)
 8007f34:	2101      	movs	r1, #1
 8007f36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <disk_initialize+0x48>)
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	79fa      	ldrb	r2, [r7, #7]
 8007f46:	4906      	ldr	r1, [pc, #24]	; (8007f60 <disk_initialize+0x48>)
 8007f48:	440a      	add	r2, r1
 8007f4a:	7a12      	ldrb	r2, [r2, #8]
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000a7c 	.word	0x20000a7c

08007f64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	4a0a      	ldr	r2, [pc, #40]	; (8007fa0 <disk_read+0x3c>)
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	689c      	ldr	r4, [r3, #8]
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	4a07      	ldr	r2, [pc, #28]	; (8007fa0 <disk_read+0x3c>)
 8007f84:	4413      	add	r3, r2
 8007f86:	7a18      	ldrb	r0, [r3, #8]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	47a0      	blx	r4
 8007f90:	4603      	mov	r3, r0
 8007f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd90      	pop	{r4, r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000a7c 	.word	0x20000a7c

08007fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	4a0a      	ldr	r2, [pc, #40]	; (8007fe0 <disk_write+0x3c>)
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68dc      	ldr	r4, [r3, #12]
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <disk_write+0x3c>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	7a18      	ldrb	r0, [r3, #8]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	47a0      	blx	r4
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd90      	pop	{r4, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000a7c 	.word	0x20000a7c

08007fe4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	603a      	str	r2, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	4a09      	ldr	r2, [pc, #36]	; (800801c <disk_ioctl+0x38>)
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	79fa      	ldrb	r2, [r7, #7]
 8008002:	4906      	ldr	r1, [pc, #24]	; (800801c <disk_ioctl+0x38>)
 8008004:	440a      	add	r2, r1
 8008006:	7a10      	ldrb	r0, [r2, #8]
 8008008:	79b9      	ldrb	r1, [r7, #6]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]
  return res;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000a7c 	.word	0x20000a7c

08008020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3301      	adds	r3, #1
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	b21a      	sxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b21b      	sxth	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b21b      	sxth	r3, r3
 8008040:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008042:	89fb      	ldrh	r3, [r7, #14]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3303      	adds	r3, #3
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	3202      	adds	r2, #2
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	3201      	adds	r2, #1
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7812      	ldrb	r2, [r2, #0]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
	return rv;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	887a      	ldrh	r2, [r7, #2]
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	887b      	ldrh	r3, [r7, #2]
 80080b0:	0a1b      	lsrs	r3, r3, #8
 80080b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	887a      	ldrh	r2, [r7, #2]
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	0a1b      	lsrs	r3, r3, #8
 80080e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	b2d2      	uxtb	r2, r2
 80080f2:	701a      	strb	r2, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	1c53      	adds	r3, r2, #1
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	6179      	str	r1, [r7, #20]
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3b01      	subs	r3, #1
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f1      	bne.n	800813e <mem_cpy+0x1a>
	}
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	617a      	str	r2, [r7, #20]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3b01      	subs	r3, #1
 8008186:	607b      	str	r3, [r7, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f3      	bne.n	8008176 <mem_set+0x10>
}
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	; 0x24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	61fa      	str	r2, [r7, #28]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	61ba      	str	r2, [r7, #24]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	1acb      	subs	r3, r1, r3
 80081c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <mem_cmp+0x40>
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0eb      	beq.n	80081b4 <mem_cmp+0x18>

	return r;
 80081dc:	697b      	ldr	r3, [r7, #20]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3724      	adds	r7, #36	; 0x24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80081f4:	e002      	b.n	80081fc <chk_chr+0x12>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3301      	adds	r3, #1
 80081fa:	607b      	str	r3, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <chk_chr+0x26>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	4293      	cmp	r3, r2
 800820e:	d1f2      	bne.n	80081f6 <chk_chr+0xc>
	return *str;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	781b      	ldrb	r3, [r3, #0]
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e029      	b.n	8008288 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008234:	4a27      	ldr	r2, [pc, #156]	; (80082d4 <chk_lock+0xb4>)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	4413      	add	r3, r2
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01d      	beq.n	800827e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008242:	4a24      	ldr	r2, [pc, #144]	; (80082d4 <chk_lock+0xb4>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	4413      	add	r3, r2
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d116      	bne.n	8008282 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008254:	4a1f      	ldr	r2, [pc, #124]	; (80082d4 <chk_lock+0xb4>)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	4413      	add	r3, r2
 800825c:	3304      	adds	r3, #4
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008264:	429a      	cmp	r2, r3
 8008266:	d10c      	bne.n	8008282 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008268:	4a1a      	ldr	r2, [pc, #104]	; (80082d4 <chk_lock+0xb4>)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	4413      	add	r3, r2
 8008270:	3308      	adds	r3, #8
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008278:	429a      	cmp	r2, r3
 800827a:	d102      	bne.n	8008282 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800827c:	e007      	b.n	800828e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3301      	adds	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d9d2      	bls.n	8008234 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d109      	bne.n	80082a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <chk_lock+0x80>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d101      	bne.n	80082a4 <chk_lock+0x84>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e010      	b.n	80082c6 <chk_lock+0xa6>
 80082a4:	2312      	movs	r3, #18
 80082a6:	e00e      	b.n	80082c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d108      	bne.n	80082c0 <chk_lock+0xa0>
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <chk_lock+0xb4>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	4413      	add	r3, r2
 80082b6:	330c      	adds	r3, #12
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082be:	d101      	bne.n	80082c4 <chk_lock+0xa4>
 80082c0:	2310      	movs	r3, #16
 80082c2:	e000      	b.n	80082c6 <chk_lock+0xa6>
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000a5c 	.word	0x20000a5c

080082d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082de:	2300      	movs	r3, #0
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	e002      	b.n	80082ea <enq_lock+0x12>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3301      	adds	r3, #1
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d806      	bhi.n	80082fe <enq_lock+0x26>
 80082f0:	4a09      	ldr	r2, [pc, #36]	; (8008318 <enq_lock+0x40>)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	4413      	add	r3, r2
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f2      	bne.n	80082e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b02      	cmp	r3, #2
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20000a5c 	.word	0x20000a5c

0800831c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	e01f      	b.n	800836c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800832c:	4a41      	ldr	r2, [pc, #260]	; (8008434 <inc_lock+0x118>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	4413      	add	r3, r2
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d113      	bne.n	8008366 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800833e:	4a3d      	ldr	r2, [pc, #244]	; (8008434 <inc_lock+0x118>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	4413      	add	r3, r2
 8008346:	3304      	adds	r3, #4
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800834e:	429a      	cmp	r2, r3
 8008350:	d109      	bne.n	8008366 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008352:	4a38      	ldr	r2, [pc, #224]	; (8008434 <inc_lock+0x118>)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	4413      	add	r3, r2
 800835a:	3308      	adds	r3, #8
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008362:	429a      	cmp	r2, r3
 8008364:	d006      	beq.n	8008374 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d9dc      	bls.n	800832c <inc_lock+0x10>
 8008372:	e000      	b.n	8008376 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008374:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d132      	bne.n	80083e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e002      	b.n	8008388 <inc_lock+0x6c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d806      	bhi.n	800839c <inc_lock+0x80>
 800838e:	4a29      	ldr	r2, [pc, #164]	; (8008434 <inc_lock+0x118>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	4413      	add	r3, r2
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f2      	bne.n	8008382 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d101      	bne.n	80083a6 <inc_lock+0x8a>
 80083a2:	2300      	movs	r3, #0
 80083a4:	e040      	b.n	8008428 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4922      	ldr	r1, [pc, #136]	; (8008434 <inc_lock+0x118>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	440b      	add	r3, r1
 80083b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	491e      	ldr	r1, [pc, #120]	; (8008434 <inc_lock+0x118>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	440b      	add	r3, r1
 80083c0:	3304      	adds	r3, #4
 80083c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	491a      	ldr	r1, [pc, #104]	; (8008434 <inc_lock+0x118>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	440b      	add	r3, r1
 80083d0:	3308      	adds	r3, #8
 80083d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80083d4:	4a17      	ldr	r2, [pc, #92]	; (8008434 <inc_lock+0x118>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	4413      	add	r3, r2
 80083dc:	330c      	adds	r3, #12
 80083de:	2200      	movs	r2, #0
 80083e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <inc_lock+0xe0>
 80083e8:	4a12      	ldr	r2, [pc, #72]	; (8008434 <inc_lock+0x118>)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	4413      	add	r3, r2
 80083f0:	330c      	adds	r3, #12
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <inc_lock+0xe0>
 80083f8:	2300      	movs	r3, #0
 80083fa:	e015      	b.n	8008428 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d108      	bne.n	8008414 <inc_lock+0xf8>
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <inc_lock+0x118>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	4413      	add	r3, r2
 800840a:	330c      	adds	r3, #12
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	3301      	adds	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	e001      	b.n	8008418 <inc_lock+0xfc>
 8008414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008418:	4906      	ldr	r1, [pc, #24]	; (8008434 <inc_lock+0x118>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	440b      	add	r3, r1
 8008420:	330c      	adds	r3, #12
 8008422:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000a5c 	.word	0x20000a5c

08008438 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3b01      	subs	r3, #1
 8008444:	607b      	str	r3, [r7, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d825      	bhi.n	8008498 <dec_lock+0x60>
		n = Files[i].ctr;
 800844c:	4a17      	ldr	r2, [pc, #92]	; (80084ac <dec_lock+0x74>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	330c      	adds	r3, #12
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800845a:	89fb      	ldrh	r3, [r7, #14]
 800845c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008460:	d101      	bne.n	8008466 <dec_lock+0x2e>
 8008462:	2300      	movs	r3, #0
 8008464:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008466:	89fb      	ldrh	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <dec_lock+0x3a>
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	3b01      	subs	r3, #1
 8008470:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008472:	4a0e      	ldr	r2, [pc, #56]	; (80084ac <dec_lock+0x74>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	4413      	add	r3, r2
 800847a:	330c      	adds	r3, #12
 800847c:	89fa      	ldrh	r2, [r7, #14]
 800847e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008480:	89fb      	ldrh	r3, [r7, #14]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d105      	bne.n	8008492 <dec_lock+0x5a>
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <dec_lock+0x74>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	4413      	add	r3, r2
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	737b      	strb	r3, [r7, #13]
 8008496:	e001      	b.n	800849c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008498:	2302      	movs	r3, #2
 800849a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800849c:	7b7b      	ldrb	r3, [r7, #13]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000a5c 	.word	0x20000a5c

080084b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e010      	b.n	80084e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084be:	4a0d      	ldr	r2, [pc, #52]	; (80084f4 <clear_lock+0x44>)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	4413      	add	r3, r2
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d105      	bne.n	80084da <clear_lock+0x2a>
 80084ce:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <clear_lock+0x44>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	4413      	add	r3, r2
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d9eb      	bls.n	80084be <clear_lock+0xe>
	}
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	20000a5c 	.word	0x20000a5c

080084f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	78db      	ldrb	r3, [r3, #3]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d034      	beq.n	8008576 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7858      	ldrb	r0, [r3, #1]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800851c:	2301      	movs	r3, #1
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	f7ff fd40 	bl	8007fa4 <disk_write>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <sync_window+0x38>
			res = FR_DISK_ERR;
 800852a:	2301      	movs	r3, #1
 800852c:	73fb      	strb	r3, [r7, #15]
 800852e:	e022      	b.n	8008576 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	1ad2      	subs	r2, r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	429a      	cmp	r2, r3
 8008544:	d217      	bcs.n	8008576 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	789b      	ldrb	r3, [r3, #2]
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	e010      	b.n	8008570 <sync_window+0x78>
					wsect += fs->fsize;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4413      	add	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7858      	ldrb	r0, [r3, #1]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008562:	2301      	movs	r3, #1
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	f7ff fd1d 	bl	8007fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3b01      	subs	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d8eb      	bhi.n	800854e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d01b      	beq.n	80085d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff ffad 	bl	80084f8 <sync_window>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d113      	bne.n	80085d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	7858      	ldrb	r0, [r3, #1]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085b2:	2301      	movs	r3, #1
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	f7ff fcd5 	bl	8007f64 <disk_read>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80085c0:	f04f 33ff 	mov.w	r3, #4294967295
 80085c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff ff87 	bl	80084f8 <sync_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d158      	bne.n	80086a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d148      	bne.n	800868e <sync_fs+0xb2>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d144      	bne.n	800868e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3330      	adds	r3, #48	; 0x30
 8008608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fda9 	bl	8008166 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3330      	adds	r3, #48	; 0x30
 8008618:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800861c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff fd38 	bl	8008096 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3330      	adds	r3, #48	; 0x30
 800862a:	4921      	ldr	r1, [pc, #132]	; (80086b0 <sync_fs+0xd4>)
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fd4d 	bl	80080cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3330      	adds	r3, #48	; 0x30
 8008636:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800863a:	491e      	ldr	r1, [pc, #120]	; (80086b4 <sync_fs+0xd8>)
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fd45 	bl	80080cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3330      	adds	r3, #48	; 0x30
 8008646:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	f7ff fd3b 	bl	80080cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3330      	adds	r3, #48	; 0x30
 800865a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7ff fd31 	bl	80080cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7858      	ldrb	r0, [r3, #1]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	2301      	movs	r3, #1
 8008684:	f7ff fc8e 	bl	8007fa4 <disk_write>
			fs->fsi_flag = 0;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2200      	movs	r2, #0
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fca4 	bl	8007fe4 <disk_ioctl>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <sync_fs+0xca>
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	41615252 	.word	0x41615252
 80086b4:	61417272 	.word	0x61417272

080086b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	3b02      	subs	r3, #2
 80086c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	3b02      	subs	r3, #2
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d301      	bcc.n	80086d8 <clust2sect+0x20>
 80086d4:	2300      	movs	r3, #0
 80086d6:	e008      	b.n	80086ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	895b      	ldrh	r3, [r3, #10]
 80086dc:	461a      	mov	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	fb03 f202 	mul.w	r2, r3, r2
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	4413      	add	r3, r2
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d904      	bls.n	8008716 <get_fat+0x20>
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d302      	bcc.n	800871c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008716:	2301      	movs	r3, #1
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	e08f      	b.n	800883c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800871c:	f04f 33ff 	mov.w	r3, #4294967295
 8008720:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b03      	cmp	r3, #3
 8008728:	d062      	beq.n	80087f0 <get_fat+0xfa>
 800872a:	2b03      	cmp	r3, #3
 800872c:	dc7c      	bgt.n	8008828 <get_fat+0x132>
 800872e:	2b01      	cmp	r3, #1
 8008730:	d002      	beq.n	8008738 <get_fat+0x42>
 8008732:	2b02      	cmp	r3, #2
 8008734:	d042      	beq.n	80087bc <get_fat+0xc6>
 8008736:	e077      	b.n	8008828 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	085b      	lsrs	r3, r3, #1
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	0a5b      	lsrs	r3, r3, #9
 800874e:	4413      	add	r3, r2
 8008750:	4619      	mov	r1, r3
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	f7ff ff14 	bl	8008580 <move_window>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d167      	bne.n	800882e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	60fa      	str	r2, [r7, #12]
 8008764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4413      	add	r3, r2
 800876c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008770:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	0a5b      	lsrs	r3, r3, #9
 800877a:	4413      	add	r3, r2
 800877c:	4619      	mov	r1, r3
 800877e:	6938      	ldr	r0, [r7, #16]
 8008780:	f7ff fefe 	bl	8008580 <move_window>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d153      	bne.n	8008832 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4413      	add	r3, r2
 8008794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	461a      	mov	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <get_fat+0xbc>
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	091b      	lsrs	r3, r3, #4
 80087b0:	e002      	b.n	80087b8 <get_fat+0xc2>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087b8:	617b      	str	r3, [r7, #20]
			break;
 80087ba:	e03f      	b.n	800883c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6a1a      	ldr	r2, [r3, #32]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	4413      	add	r3, r2
 80087c6:	4619      	mov	r1, r3
 80087c8:	6938      	ldr	r0, [r7, #16]
 80087ca:	f7ff fed9 	bl	8008580 <move_window>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d130      	bne.n	8008836 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80087e2:	4413      	add	r3, r2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fc1b 	bl	8008020 <ld_word>
 80087ea:	4603      	mov	r3, r0
 80087ec:	617b      	str	r3, [r7, #20]
			break;
 80087ee:	e025      	b.n	800883c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	09db      	lsrs	r3, r3, #7
 80087f8:	4413      	add	r3, r2
 80087fa:	4619      	mov	r1, r3
 80087fc:	6938      	ldr	r0, [r7, #16]
 80087fe:	f7ff febf 	bl	8008580 <move_window>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d118      	bne.n	800883a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008816:	4413      	add	r3, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff fc19 	bl	8008050 <ld_dword>
 800881e:	4603      	mov	r3, r0
 8008820:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008824:	617b      	str	r3, [r7, #20]
			break;
 8008826:	e009      	b.n	800883c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e006      	b.n	800883c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800882e:	bf00      	nop
 8008830:	e004      	b.n	800883c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008832:	bf00      	nop
 8008834:	e002      	b.n	800883c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008836:	bf00      	nop
 8008838:	e000      	b.n	800883c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800883a:	bf00      	nop
		}
	}

	return val;
 800883c:	697b      	ldr	r3, [r7, #20]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008846:	b590      	push	{r4, r7, lr}
 8008848:	b089      	sub	sp, #36	; 0x24
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008852:	2302      	movs	r3, #2
 8008854:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b01      	cmp	r3, #1
 800885a:	f240 80d9 	bls.w	8008a10 <put_fat+0x1ca>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	429a      	cmp	r2, r3
 8008866:	f080 80d3 	bcs.w	8008a10 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b03      	cmp	r3, #3
 8008870:	f000 8096 	beq.w	80089a0 <put_fat+0x15a>
 8008874:	2b03      	cmp	r3, #3
 8008876:	f300 80cb 	bgt.w	8008a10 <put_fat+0x1ca>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d002      	beq.n	8008884 <put_fat+0x3e>
 800887e:	2b02      	cmp	r3, #2
 8008880:	d06e      	beq.n	8008960 <put_fat+0x11a>
 8008882:	e0c5      	b.n	8008a10 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	085b      	lsrs	r3, r3, #1
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	4413      	add	r3, r2
 8008890:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1a      	ldr	r2, [r3, #32]
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	0a5b      	lsrs	r3, r3, #9
 800889a:	4413      	add	r3, r2
 800889c:	4619      	mov	r1, r3
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff fe6e 	bl	8008580 <move_window>
 80088a4:	4603      	mov	r3, r0
 80088a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088a8:	7ffb      	ldrb	r3, [r7, #31]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 80a9 	bne.w	8008a02 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	1c59      	adds	r1, r3, #1
 80088ba:	61b9      	str	r1, [r7, #24]
 80088bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c0:	4413      	add	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <put_fat+0xa4>
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	b25b      	sxtb	r3, r3
 80088d4:	f003 030f 	and.w	r3, r3, #15
 80088d8:	b25a      	sxtb	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b25b      	sxtb	r3, r3
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	e001      	b.n	80088ee <put_fat+0xa8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1a      	ldr	r2, [r3, #32]
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	0a5b      	lsrs	r3, r3, #9
 8008900:	4413      	add	r3, r2
 8008902:	4619      	mov	r1, r3
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff fe3b 	bl	8008580 <move_window>
 800890a:	4603      	mov	r3, r0
 800890c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800890e:	7ffb      	ldrb	r3, [r7, #31]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d178      	bne.n	8008a06 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008920:	4413      	add	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <put_fat+0xf0>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	091b      	lsrs	r3, r3, #4
 8008932:	b2db      	uxtb	r3, r3
 8008934:	e00e      	b.n	8008954 <put_fat+0x10e>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	b25b      	sxtb	r3, r3
 800893c:	f023 030f 	bic.w	r3, r3, #15
 8008940:	b25a      	sxtb	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	b25b      	sxtb	r3, r3
 800894e:	4313      	orrs	r3, r2
 8008950:	b25b      	sxtb	r3, r3
 8008952:	b2db      	uxtb	r3, r3
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	70da      	strb	r2, [r3, #3]
			break;
 800895e:	e057      	b.n	8008a10 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a1a      	ldr	r2, [r3, #32]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	4413      	add	r3, r2
 800896a:	4619      	mov	r1, r3
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff fe07 	bl	8008580 <move_window>
 8008972:	4603      	mov	r3, r0
 8008974:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008976:	7ffb      	ldrb	r3, [r7, #31]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d146      	bne.n	8008a0a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800898a:	4413      	add	r3, r2
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	b292      	uxth	r2, r2
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fb7f 	bl	8008096 <st_word>
			fs->wflag = 1;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	70da      	strb	r2, [r3, #3]
			break;
 800899e:	e037      	b.n	8008a10 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	09db      	lsrs	r3, r3, #7
 80089a8:	4413      	add	r3, r2
 80089aa:	4619      	mov	r1, r3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7ff fde7 	bl	8008580 <move_window>
 80089b2:	4603      	mov	r3, r0
 80089b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089b6:	7ffb      	ldrb	r3, [r7, #31]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d128      	bne.n	8008a0e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80089d0:	4413      	add	r3, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff fb3c 	bl	8008050 <ld_dword>
 80089d8:	4603      	mov	r3, r0
 80089da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089de:	4323      	orrs	r3, r4
 80089e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80089f0:	4413      	add	r3, r2
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fb69 	bl	80080cc <st_dword>
			fs->wflag = 1;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	70da      	strb	r2, [r3, #3]
			break;
 8008a00:	e006      	b.n	8008a10 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a02:	bf00      	nop
 8008a04:	e004      	b.n	8008a10 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a06:	bf00      	nop
 8008a08:	e002      	b.n	8008a10 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a0a:	bf00      	nop
 8008a0c:	e000      	b.n	8008a10 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a0e:	bf00      	nop
		}
	}
	return res;
 8008a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3724      	adds	r7, #36	; 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd90      	pop	{r4, r7, pc}

08008a1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d904      	bls.n	8008a40 <remove_chain+0x26>
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d301      	bcc.n	8008a44 <remove_chain+0x2a>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e04b      	b.n	8008adc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	69b8      	ldr	r0, [r7, #24]
 8008a52:	f7ff fef8 	bl	8008846 <put_fat>
 8008a56:	4603      	mov	r3, r0
 8008a58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008a5a:	7ffb      	ldrb	r3, [r7, #31]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <remove_chain+0x4a>
 8008a60:	7ffb      	ldrb	r3, [r7, #31]
 8008a62:	e03b      	b.n	8008adc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fe45 	bl	80086f6 <get_fat>
 8008a6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d031      	beq.n	8008ad8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d101      	bne.n	8008a7e <remove_chain+0x64>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e02e      	b.n	8008adc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a84:	d101      	bne.n	8008a8a <remove_chain+0x70>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e028      	b.n	8008adc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	69b8      	ldr	r0, [r7, #24]
 8008a90:	f7ff fed9 	bl	8008846 <put_fat>
 8008a94:	4603      	mov	r3, r0
 8008a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008a98:	7ffb      	ldrb	r3, [r7, #31]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <remove_chain+0x88>
 8008a9e:	7ffb      	ldrb	r3, [r7, #31]
 8008aa0:	e01c      	b.n	8008adc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	3b02      	subs	r3, #2
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d20b      	bcs.n	8008ac8 <remove_chain+0xae>
			fs->free_clst++;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d3c6      	bcc.n	8008a64 <remove_chain+0x4a>
 8008ad6:	e000      	b.n	8008ada <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ad8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3720      	adds	r7, #32
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10d      	bne.n	8008b16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <create_chain+0x2c>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d31b      	bcc.n	8008b48 <create_chain+0x64>
 8008b10:	2301      	movs	r3, #1
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	e018      	b.n	8008b48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff fdec 	bl	80086f6 <get_fat>
 8008b1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d801      	bhi.n	8008b2a <create_chain+0x46>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e070      	b.n	8008c0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d101      	bne.n	8008b36 <create_chain+0x52>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	e06a      	b.n	8008c0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d201      	bcs.n	8008b44 <create_chain+0x60>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	e063      	b.n	8008c0c <create_chain+0x128>
		scl = clst;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d307      	bcc.n	8008b6c <create_chain+0x88>
				ncl = 2;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d901      	bls.n	8008b6c <create_chain+0x88>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e04f      	b.n	8008c0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008b6c:	69f9      	ldr	r1, [r7, #28]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff fdc1 	bl	80086f6 <get_fat>
 8008b74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d003      	beq.n	8008b8a <create_chain+0xa6>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d101      	bne.n	8008b8e <create_chain+0xaa>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	e03e      	b.n	8008c0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d1da      	bne.n	8008b4c <create_chain+0x68>
 8008b96:	2300      	movs	r3, #0
 8008b98:	e038      	b.n	8008c0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008b9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	69f9      	ldr	r1, [r7, #28]
 8008ba2:	6938      	ldr	r0, [r7, #16]
 8008ba4:	f7ff fe4f 	bl	8008846 <put_fat>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <create_chain+0xe2>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d006      	beq.n	8008bc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6938      	ldr	r0, [r7, #16]
 8008bbe:	f7ff fe42 	bl	8008846 <put_fat>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d116      	bne.n	8008bfa <create_chain+0x116>
		fs->last_clst = ncl;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	3b02      	subs	r3, #2
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d804      	bhi.n	8008bea <create_chain+0x106>
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	1e5a      	subs	r2, r3, #1
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	f043 0301 	orr.w	r3, r3, #1
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	711a      	strb	r2, [r3, #4]
 8008bf8:	e007      	b.n	8008c0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d102      	bne.n	8008c06 <create_chain+0x122>
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	e000      	b.n	8008c08 <create_chain+0x124>
 8008c06:	2301      	movs	r3, #1
 8008c08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c0a:	69fb      	ldr	r3, [r7, #28]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c2a:	d204      	bcs.n	8008c36 <dir_sdi+0x22>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008c36:	2302      	movs	r3, #2
 8008c38:	e063      	b.n	8008d02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <dir_sdi+0x46>
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d902      	bls.n	8008c5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	8912      	ldrh	r2, [r2, #8]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d301      	bcc.n	8008c70 <dir_sdi+0x5c>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e048      	b.n	8008d02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	61da      	str	r2, [r3, #28]
 8008c78:	e029      	b.n	8008cce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	895b      	ldrh	r3, [r3, #10]
 8008c7e:	025b      	lsls	r3, r3, #9
 8008c80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c82:	e019      	b.n	8008cb8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6979      	ldr	r1, [r7, #20]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fd34 	bl	80086f6 <get_fat>
 8008c8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d101      	bne.n	8008c9c <dir_sdi+0x88>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e032      	b.n	8008d02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d904      	bls.n	8008cac <dir_sdi+0x98>
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d301      	bcc.n	8008cb0 <dir_sdi+0x9c>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e028      	b.n	8008d02 <dir_sdi+0xee>
			ofs -= csz;
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d2e1      	bcs.n	8008c84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008cc0:	6979      	ldr	r1, [r7, #20]
 8008cc2:	6938      	ldr	r0, [r7, #16]
 8008cc4:	f7ff fcf8 	bl	80086b8 <clust2sect>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <dir_sdi+0xcc>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e010      	b.n	8008d02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	0a5b      	lsrs	r3, r3, #9
 8008ce8:	441a      	add	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	441a      	add	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b086      	sub	sp, #24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	3320      	adds	r3, #32
 8008d20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <dir_next+0x28>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d30:	d301      	bcc.n	8008d36 <dir_next+0x2c>
 8008d32:	2304      	movs	r3, #4
 8008d34:	e0aa      	b.n	8008e8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 8098 	bne.w	8008e72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	8912      	ldrh	r2, [r2, #8]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	f0c0 8088 	bcc.w	8008e72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	61da      	str	r2, [r3, #28]
 8008d68:	2304      	movs	r3, #4
 8008d6a:	e08f      	b.n	8008e8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	0a5b      	lsrs	r3, r3, #9
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	8952      	ldrh	r2, [r2, #10]
 8008d74:	3a01      	subs	r2, #1
 8008d76:	4013      	ands	r3, r2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d17a      	bne.n	8008e72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	4619      	mov	r1, r3
 8008d84:	4610      	mov	r0, r2
 8008d86:	f7ff fcb6 	bl	80086f6 <get_fat>
 8008d8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d801      	bhi.n	8008d96 <dir_next+0x8c>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e07a      	b.n	8008e8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d101      	bne.n	8008da2 <dir_next+0x98>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e074      	b.n	8008e8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d358      	bcc.n	8008e5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d104      	bne.n	8008dbc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	61da      	str	r2, [r3, #28]
 8008db8:	2304      	movs	r3, #4
 8008dba:	e067      	b.n	8008e8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f7ff fe8d 	bl	8008ae4 <create_chain>
 8008dca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <dir_next+0xcc>
 8008dd2:	2307      	movs	r3, #7
 8008dd4:	e05a      	b.n	8008e8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <dir_next+0xd6>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e055      	b.n	8008e8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de6:	d101      	bne.n	8008dec <dir_next+0xe2>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e04f      	b.n	8008e8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7ff fb83 	bl	80084f8 <sync_window>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <dir_next+0xf2>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e047      	b.n	8008e8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3330      	adds	r3, #48	; 0x30
 8008e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff f9ad 	bl	8008166 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	6979      	ldr	r1, [r7, #20]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f7ff fc50 	bl	80086b8 <clust2sect>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e1e:	e012      	b.n	8008e46 <dir_next+0x13c>
						fs->wflag = 1;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff fb66 	bl	80084f8 <sync_window>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <dir_next+0x12c>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e02a      	b.n	8008e8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	895b      	ldrh	r3, [r3, #10]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d3e6      	bcc.n	8008e20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	1ad2      	subs	r2, r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008e64:	6979      	ldr	r1, [r7, #20]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff fc26 	bl	80086b8 <clust2sect>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e84:	441a      	add	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff feb4 	bl	8008c14 <dir_sdi>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d12b      	bne.n	8008f0e <dir_alloc+0x7a>
		n = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fb5d 	bl	8008580 <move_window>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11d      	bne.n	8008f0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2be5      	cmp	r3, #229	; 0xe5
 8008ed8:	d004      	beq.n	8008ee4 <dir_alloc+0x50>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d107      	bne.n	8008ef4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d102      	bne.n	8008ef8 <dir_alloc+0x64>
 8008ef2:	e00c      	b.n	8008f0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ef8:	2101      	movs	r1, #1
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff ff05 	bl	8008d0a <dir_next>
 8008f00:	4603      	mov	r3, r0
 8008f02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0d7      	beq.n	8008eba <dir_alloc+0x26>
 8008f0a:	e000      	b.n	8008f0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008f0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d101      	bne.n	8008f18 <dir_alloc+0x84>
 8008f14:	2307      	movs	r3, #7
 8008f16:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	331a      	adds	r3, #26
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff f875 	bl	8008020 <ld_word>
 8008f36:	4603      	mov	r3, r0
 8008f38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d109      	bne.n	8008f56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	3314      	adds	r3, #20
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff f86a 	bl	8008020 <ld_word>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f56:	68fb      	ldr	r3, [r7, #12]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	331a      	adds	r3, #26
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	b292      	uxth	r2, r2
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff f88d 	bl	8008096 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d109      	bne.n	8008f98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f103 0214 	add.w	r2, r3, #20
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7ff f87f 	bl	8008096 <st_word>
	}
}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fae:	2100      	movs	r1, #0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fe2f 	bl	8008c14 <dir_sdi>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <dir_find+0x24>
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	e03e      	b.n	8009042 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6938      	ldr	r0, [r7, #16]
 8008fcc:	f7ff fad8 	bl	8008580 <move_window>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d12f      	bne.n	800903a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d102      	bne.n	8008fee <dir_find+0x4e>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	75fb      	strb	r3, [r7, #23]
 8008fec:	e028      	b.n	8009040 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	330b      	adds	r3, #11
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	330b      	adds	r3, #11
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10a      	bne.n	8009026 <dir_find+0x86>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a18      	ldr	r0, [r3, #32]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3324      	adds	r3, #36	; 0x24
 8009018:	220b      	movs	r2, #11
 800901a:	4619      	mov	r1, r3
 800901c:	f7ff f8be 	bl	800819c <mem_cmp>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff fe6e 	bl	8008d0a <dir_next>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0c5      	beq.n	8008fc4 <dir_find+0x24>
 8009038:	e002      	b.n	8009040 <dir_find+0xa0>
		if (res != FR_OK) break;
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800903e:	bf00      	nop

	return res;
 8009040:	7dfb      	ldrb	r3, [r7, #23]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009058:	2101      	movs	r1, #1
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff ff1a 	bl	8008e94 <dir_alloc>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d11c      	bne.n	80090a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	4619      	mov	r1, r3
 8009070:	68b8      	ldr	r0, [r7, #8]
 8009072:	f7ff fa85 	bl	8008580 <move_window>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d111      	bne.n	80090a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	2220      	movs	r2, #32
 8009086:	2100      	movs	r1, #0
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff f86c 	bl	8008166 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a18      	ldr	r0, [r3, #32]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3324      	adds	r3, #36	; 0x24
 8009096:	220b      	movs	r2, #11
 8009098:	4619      	mov	r1, r3
 800909a:	f7ff f843 	bl	8008124 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2201      	movs	r2, #1
 80090a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3324      	adds	r3, #36	; 0x24
 80090c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80090c6:	220b      	movs	r2, #11
 80090c8:	2120      	movs	r1, #32
 80090ca:	68b8      	ldr	r0, [r7, #8]
 80090cc:	f7ff f84b 	bl	8008166 <mem_set>
	si = i = 0; ni = 8;
 80090d0:	2300      	movs	r3, #0
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	2308      	movs	r3, #8
 80090da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	61fa      	str	r2, [r7, #28]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80090ea:	7efb      	ldrb	r3, [r7, #27]
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d94e      	bls.n	800918e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80090f0:	7efb      	ldrb	r3, [r7, #27]
 80090f2:	2b2f      	cmp	r3, #47	; 0x2f
 80090f4:	d006      	beq.n	8009104 <create_name+0x54>
 80090f6:	7efb      	ldrb	r3, [r7, #27]
 80090f8:	2b5c      	cmp	r3, #92	; 0x5c
 80090fa:	d110      	bne.n	800911e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80090fc:	e002      	b.n	8009104 <create_name+0x54>
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3301      	adds	r3, #1
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b2f      	cmp	r3, #47	; 0x2f
 800910e:	d0f6      	beq.n	80090fe <create_name+0x4e>
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	4413      	add	r3, r2
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b5c      	cmp	r3, #92	; 0x5c
 800911a:	d0f0      	beq.n	80090fe <create_name+0x4e>
			break;
 800911c:	e038      	b.n	8009190 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800911e:	7efb      	ldrb	r3, [r7, #27]
 8009120:	2b2e      	cmp	r3, #46	; 0x2e
 8009122:	d003      	beq.n	800912c <create_name+0x7c>
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	429a      	cmp	r2, r3
 800912a:	d30c      	bcc.n	8009146 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b0b      	cmp	r3, #11
 8009130:	d002      	beq.n	8009138 <create_name+0x88>
 8009132:	7efb      	ldrb	r3, [r7, #27]
 8009134:	2b2e      	cmp	r3, #46	; 0x2e
 8009136:	d001      	beq.n	800913c <create_name+0x8c>
 8009138:	2306      	movs	r3, #6
 800913a:	e044      	b.n	80091c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800913c:	2308      	movs	r3, #8
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	230b      	movs	r3, #11
 8009142:	617b      	str	r3, [r7, #20]
			continue;
 8009144:	e022      	b.n	800918c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009146:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da04      	bge.n	8009158 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800914e:	7efb      	ldrb	r3, [r7, #27]
 8009150:	3b80      	subs	r3, #128	; 0x80
 8009152:	4a1f      	ldr	r2, [pc, #124]	; (80091d0 <create_name+0x120>)
 8009154:	5cd3      	ldrb	r3, [r2, r3]
 8009156:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009158:	7efb      	ldrb	r3, [r7, #27]
 800915a:	4619      	mov	r1, r3
 800915c:	481d      	ldr	r0, [pc, #116]	; (80091d4 <create_name+0x124>)
 800915e:	f7ff f844 	bl	80081ea <chk_chr>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <create_name+0xbc>
 8009168:	2306      	movs	r3, #6
 800916a:	e02c      	b.n	80091c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800916c:	7efb      	ldrb	r3, [r7, #27]
 800916e:	2b60      	cmp	r3, #96	; 0x60
 8009170:	d905      	bls.n	800917e <create_name+0xce>
 8009172:	7efb      	ldrb	r3, [r7, #27]
 8009174:	2b7a      	cmp	r3, #122	; 0x7a
 8009176:	d802      	bhi.n	800917e <create_name+0xce>
 8009178:	7efb      	ldrb	r3, [r7, #27]
 800917a:	3b20      	subs	r3, #32
 800917c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	613a      	str	r2, [r7, #16]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	4413      	add	r3, r2
 8009188:	7efa      	ldrb	r2, [r7, #27]
 800918a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800918c:	e7a6      	b.n	80090dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800918e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	441a      	add	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <create_name+0xf4>
 80091a0:	2306      	movs	r3, #6
 80091a2:	e010      	b.n	80091c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2be5      	cmp	r3, #229	; 0xe5
 80091aa:	d102      	bne.n	80091b2 <create_name+0x102>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2205      	movs	r2, #5
 80091b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80091b2:	7efb      	ldrb	r3, [r7, #27]
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d801      	bhi.n	80091bc <create_name+0x10c>
 80091b8:	2204      	movs	r2, #4
 80091ba:	e000      	b.n	80091be <create_name+0x10e>
 80091bc:	2200      	movs	r2, #0
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	330b      	adds	r3, #11
 80091c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80091c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	080123f4 	.word	0x080123f4
 80091d4:	08010ec8 	.word	0x08010ec8

080091d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80091ec:	e002      	b.n	80091f4 <follow_path+0x1c>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b2f      	cmp	r3, #47	; 0x2f
 80091fa:	d0f8      	beq.n	80091ee <follow_path+0x16>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b5c      	cmp	r3, #92	; 0x5c
 8009202:	d0f4      	beq.n	80091ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2200      	movs	r2, #0
 8009208:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b1f      	cmp	r3, #31
 8009210:	d80a      	bhi.n	8009228 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2280      	movs	r2, #128	; 0x80
 8009216:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800921a:	2100      	movs	r1, #0
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff fcf9 	bl	8008c14 <dir_sdi>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
 8009226:	e043      	b.n	80092b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009228:	463b      	mov	r3, r7
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ff3f 	bl	80090b0 <create_name>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d134      	bne.n	80092a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff feaf 	bl	8008fa0 <dir_find>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800924c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	2b04      	cmp	r3, #4
 8009258:	d127      	bne.n	80092aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d122      	bne.n	80092aa <follow_path+0xd2>
 8009264:	2305      	movs	r3, #5
 8009266:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009268:	e01f      	b.n	80092aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800926a:	7afb      	ldrb	r3, [r7, #11]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d11c      	bne.n	80092ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	799b      	ldrb	r3, [r3, #6]
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009280:	2305      	movs	r3, #5
 8009282:	75fb      	strb	r3, [r7, #23]
 8009284:	e014      	b.n	80092b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009294:	4413      	add	r3, r2
 8009296:	4619      	mov	r1, r3
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fe42 	bl	8008f22 <ld_clust>
 800929e:	4602      	mov	r2, r0
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80092a4:	e7c0      	b.n	8009228 <follow_path+0x50>
			if (res != FR_OK) break;
 80092a6:	bf00      	nop
 80092a8:	e002      	b.n	80092b0 <follow_path+0xd8>
				break;
 80092aa:	bf00      	nop
 80092ac:	e000      	b.n	80092b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092ae:	bf00      	nop
			}
		}
	}

	return res;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b087      	sub	sp, #28
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295
 80092c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d031      	beq.n	8009334 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e002      	b.n	80092de <get_ldnumber+0x24>
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	3301      	adds	r3, #1
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d903      	bls.n	80092ee <get_ldnumber+0x34>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	2b3a      	cmp	r3, #58	; 0x3a
 80092ec:	d1f4      	bne.n	80092d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b3a      	cmp	r3, #58	; 0x3a
 80092f4:	d11c      	bne.n	8009330 <get_ldnumber+0x76>
			tp = *path;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	60fa      	str	r2, [r7, #12]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	3b30      	subs	r3, #48	; 0x30
 8009306:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b09      	cmp	r3, #9
 800930c:	d80e      	bhi.n	800932c <get_ldnumber+0x72>
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	429a      	cmp	r2, r3
 8009314:	d10a      	bne.n	800932c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d107      	bne.n	800932c <get_ldnumber+0x72>
					vol = (int)i;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	3301      	adds	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	e002      	b.n	8009336 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009330:	2300      	movs	r3, #0
 8009332:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009334:	693b      	ldr	r3, [r7, #16]
}
 8009336:	4618      	mov	r0, r3
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	70da      	strb	r2, [r3, #3]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f04f 32ff 	mov.w	r2, #4294967295
 800935a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff f90e 	bl	8008580 <move_window>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <check_fs+0x2a>
 800936a:	2304      	movs	r3, #4
 800936c:	e038      	b.n	80093e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3330      	adds	r3, #48	; 0x30
 8009372:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fe52 	bl	8008020 <ld_word>
 800937c:	4603      	mov	r3, r0
 800937e:	461a      	mov	r2, r3
 8009380:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009384:	429a      	cmp	r2, r3
 8009386:	d001      	beq.n	800938c <check_fs+0x48>
 8009388:	2303      	movs	r3, #3
 800938a:	e029      	b.n	80093e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009392:	2be9      	cmp	r3, #233	; 0xe9
 8009394:	d009      	beq.n	80093aa <check_fs+0x66>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800939c:	2beb      	cmp	r3, #235	; 0xeb
 800939e:	d11e      	bne.n	80093de <check_fs+0x9a>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80093a6:	2b90      	cmp	r3, #144	; 0x90
 80093a8:	d119      	bne.n	80093de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3330      	adds	r3, #48	; 0x30
 80093ae:	3336      	adds	r3, #54	; 0x36
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe fe4d 	bl	8008050 <ld_dword>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80093bc:	4a0a      	ldr	r2, [pc, #40]	; (80093e8 <check_fs+0xa4>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d101      	bne.n	80093c6 <check_fs+0x82>
 80093c2:	2300      	movs	r3, #0
 80093c4:	e00c      	b.n	80093e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3330      	adds	r3, #48	; 0x30
 80093ca:	3352      	adds	r3, #82	; 0x52
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fe3f 	bl	8008050 <ld_dword>
 80093d2:	4603      	mov	r3, r0
 80093d4:	4a05      	ldr	r2, [pc, #20]	; (80093ec <check_fs+0xa8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d101      	bne.n	80093de <check_fs+0x9a>
 80093da:	2300      	movs	r3, #0
 80093dc:	e000      	b.n	80093e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80093de:	2302      	movs	r3, #2
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	00544146 	.word	0x00544146
 80093ec:	33544146 	.word	0x33544146

080093f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b096      	sub	sp, #88	; 0x58
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	4613      	mov	r3, r2
 80093fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff ff58 	bl	80092ba <get_ldnumber>
 800940a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800940c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940e:	2b00      	cmp	r3, #0
 8009410:	da01      	bge.n	8009416 <find_volume+0x26>
 8009412:	230b      	movs	r3, #11
 8009414:	e22d      	b.n	8009872 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009416:	4aa1      	ldr	r2, [pc, #644]	; (800969c <find_volume+0x2ac>)
 8009418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800941e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <find_volume+0x3a>
 8009426:	230c      	movs	r3, #12
 8009428:	e223      	b.n	8009872 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800942e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01a      	beq.n	8009476 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	4618      	mov	r0, r3
 8009446:	f7fe fd4d 	bl	8007ee4 <disk_status>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009450:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10c      	bne.n	8009476 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <find_volume+0x82>
 8009462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800946e:	230a      	movs	r3, #10
 8009470:	e1ff      	b.n	8009872 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009472:	2300      	movs	r3, #0
 8009474:	e1fd      	b.n	8009872 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	2200      	movs	r2, #0
 800947a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	b2da      	uxtb	r2, r3
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fd45 	bl	8007f18 <disk_initialize>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009494:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80094a0:	2303      	movs	r3, #3
 80094a2:	e1e6      	b.n	8009872 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <find_volume+0xca>
 80094aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80094b6:	230a      	movs	r3, #10
 80094b8:	e1db      	b.n	8009872 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80094be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094c2:	f7ff ff3f 	bl	8009344 <check_fs>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80094cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d149      	bne.n	8009568 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094d4:	2300      	movs	r3, #0
 80094d6:	643b      	str	r3, [r7, #64]	; 0x40
 80094d8:	e01e      	b.n	8009518 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80094e8:	4413      	add	r3, r2
 80094ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	3304      	adds	r3, #4
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d006      	beq.n	8009504 <find_volume+0x114>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	3308      	adds	r3, #8
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe fda8 	bl	8008050 <ld_dword>
 8009500:	4602      	mov	r2, r0
 8009502:	e000      	b.n	8009506 <find_volume+0x116>
 8009504:	2200      	movs	r2, #0
 8009506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	3358      	adds	r3, #88	; 0x58
 800950c:	443b      	add	r3, r7
 800950e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009514:	3301      	adds	r3, #1
 8009516:	643b      	str	r3, [r7, #64]	; 0x40
 8009518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951a:	2b03      	cmp	r3, #3
 800951c:	d9dd      	bls.n	80094da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800951e:	2300      	movs	r3, #0
 8009520:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <find_volume+0x13e>
 8009528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800952a:	3b01      	subs	r3, #1
 800952c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800952e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	3358      	adds	r3, #88	; 0x58
 8009534:	443b      	add	r3, r7
 8009536:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800953a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800953c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <find_volume+0x15e>
 8009542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009546:	f7ff fefd 	bl	8009344 <check_fs>
 800954a:	4603      	mov	r3, r0
 800954c:	e000      	b.n	8009550 <find_volume+0x160>
 800954e:	2303      	movs	r3, #3
 8009550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009558:	2b01      	cmp	r3, #1
 800955a:	d905      	bls.n	8009568 <find_volume+0x178>
 800955c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800955e:	3301      	adds	r3, #1
 8009560:	643b      	str	r3, [r7, #64]	; 0x40
 8009562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009564:	2b03      	cmp	r3, #3
 8009566:	d9e2      	bls.n	800952e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800956c:	2b04      	cmp	r3, #4
 800956e:	d101      	bne.n	8009574 <find_volume+0x184>
 8009570:	2301      	movs	r3, #1
 8009572:	e17e      	b.n	8009872 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009578:	2b01      	cmp	r3, #1
 800957a:	d901      	bls.n	8009580 <find_volume+0x190>
 800957c:	230d      	movs	r3, #13
 800957e:	e178      	b.n	8009872 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	3330      	adds	r3, #48	; 0x30
 8009584:	330b      	adds	r3, #11
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fd4a 	bl	8008020 <ld_word>
 800958c:	4603      	mov	r3, r0
 800958e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009592:	d001      	beq.n	8009598 <find_volume+0x1a8>
 8009594:	230d      	movs	r3, #13
 8009596:	e16c      	b.n	8009872 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	3330      	adds	r3, #48	; 0x30
 800959c:	3316      	adds	r3, #22
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fd3e 	bl	8008020 <ld_word>
 80095a4:	4603      	mov	r3, r0
 80095a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80095a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <find_volume+0x1cc>
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	3330      	adds	r3, #48	; 0x30
 80095b2:	3324      	adds	r3, #36	; 0x24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fd4b 	bl	8008050 <ld_dword>
 80095ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	789b      	ldrb	r3, [r3, #2]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d005      	beq.n	80095e0 <find_volume+0x1f0>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	789b      	ldrb	r3, [r3, #2]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d001      	beq.n	80095e0 <find_volume+0x1f0>
 80095dc:	230d      	movs	r3, #13
 80095de:	e148      	b.n	8009872 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	789b      	ldrb	r3, [r3, #2]
 80095e4:	461a      	mov	r2, r3
 80095e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e8:	fb02 f303 	mul.w	r3, r2, r3
 80095ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	895b      	ldrh	r3, [r3, #10]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d008      	beq.n	8009614 <find_volume+0x224>
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	895b      	ldrh	r3, [r3, #10]
 8009606:	461a      	mov	r2, r3
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	895b      	ldrh	r3, [r3, #10]
 800960c:	3b01      	subs	r3, #1
 800960e:	4013      	ands	r3, r2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <find_volume+0x228>
 8009614:	230d      	movs	r3, #13
 8009616:	e12c      	b.n	8009872 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	3330      	adds	r3, #48	; 0x30
 800961c:	3311      	adds	r3, #17
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fcfe 	bl	8008020 <ld_word>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	891b      	ldrh	r3, [r3, #8]
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <find_volume+0x24e>
 800963a:	230d      	movs	r3, #13
 800963c:	e119      	b.n	8009872 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	3330      	adds	r3, #48	; 0x30
 8009642:	3313      	adds	r3, #19
 8009644:	4618      	mov	r0, r3
 8009646:	f7fe fceb 	bl	8008020 <ld_word>
 800964a:	4603      	mov	r3, r0
 800964c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800964e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <find_volume+0x272>
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	3330      	adds	r3, #48	; 0x30
 8009658:	3320      	adds	r3, #32
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fcf8 	bl	8008050 <ld_dword>
 8009660:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	3330      	adds	r3, #48	; 0x30
 8009666:	330e      	adds	r3, #14
 8009668:	4618      	mov	r0, r3
 800966a:	f7fe fcd9 	bl	8008020 <ld_word>
 800966e:	4603      	mov	r3, r0
 8009670:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <find_volume+0x28c>
 8009678:	230d      	movs	r3, #13
 800967a:	e0fa      	b.n	8009872 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800967c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800967e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009680:	4413      	add	r3, r2
 8009682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009684:	8912      	ldrh	r2, [r2, #8]
 8009686:	0912      	lsrs	r2, r2, #4
 8009688:	b292      	uxth	r2, r2
 800968a:	4413      	add	r3, r2
 800968c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800968e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	429a      	cmp	r2, r3
 8009694:	d204      	bcs.n	80096a0 <find_volume+0x2b0>
 8009696:	230d      	movs	r3, #13
 8009698:	e0eb      	b.n	8009872 <find_volume+0x482>
 800969a:	bf00      	nop
 800969c:	20000a54 	.word	0x20000a54
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80096a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096a8:	8952      	ldrh	r2, [r2, #10]
 80096aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <find_volume+0x2ca>
 80096b6:	230d      	movs	r3, #13
 80096b8:	e0db      	b.n	8009872 <find_volume+0x482>
		fmt = FS_FAT32;
 80096ba:	2303      	movs	r3, #3
 80096bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d802      	bhi.n	80096d0 <find_volume+0x2e0>
 80096ca:	2302      	movs	r3, #2
 80096cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d802      	bhi.n	80096e0 <find_volume+0x2f0>
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	1c9a      	adds	r2, r3, #2
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80096ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f2:	441a      	add	r2, r3
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80096f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	441a      	add	r2, r3
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009702:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009706:	2b03      	cmp	r3, #3
 8009708:	d11e      	bne.n	8009748 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	3330      	adds	r3, #48	; 0x30
 800970e:	332a      	adds	r3, #42	; 0x2a
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fc85 	bl	8008020 <ld_word>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <find_volume+0x330>
 800971c:	230d      	movs	r3, #13
 800971e:	e0a8      	b.n	8009872 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	891b      	ldrh	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <find_volume+0x33c>
 8009728:	230d      	movs	r3, #13
 800972a:	e0a2      	b.n	8009872 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	3330      	adds	r3, #48	; 0x30
 8009730:	332c      	adds	r3, #44	; 0x2c
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fc8c 	bl	8008050 <ld_dword>
 8009738:	4602      	mov	r2, r0
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	647b      	str	r3, [r7, #68]	; 0x44
 8009746:	e01f      	b.n	8009788 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	891b      	ldrh	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <find_volume+0x364>
 8009750:	230d      	movs	r3, #13
 8009752:	e08e      	b.n	8009872 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	6a1a      	ldr	r2, [r3, #32]
 8009758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975a:	441a      	add	r2, r3
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009764:	2b02      	cmp	r3, #2
 8009766:	d103      	bne.n	8009770 <find_volume+0x380>
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	e00a      	b.n	8009786 <find_volume+0x396>
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	695a      	ldr	r2, [r3, #20]
 8009774:	4613      	mov	r3, r2
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	4413      	add	r3, r2
 800977a:	085a      	lsrs	r2, r3, #1
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009786:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	699a      	ldr	r2, [r3, #24]
 800978c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009792:	0a5b      	lsrs	r3, r3, #9
 8009794:	429a      	cmp	r2, r3
 8009796:	d201      	bcs.n	800979c <find_volume+0x3ac>
 8009798:	230d      	movs	r3, #13
 800979a:	e06a      	b.n	8009872 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	f04f 32ff 	mov.w	r2, #4294967295
 80097a2:	611a      	str	r2, [r3, #16]
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	2280      	movs	r2, #128	; 0x80
 80097b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80097b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d149      	bne.n	800984e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	3330      	adds	r3, #48	; 0x30
 80097be:	3330      	adds	r3, #48	; 0x30
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fc2d 	bl	8008020 <ld_word>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d140      	bne.n	800984e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80097cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ce:	3301      	adds	r3, #1
 80097d0:	4619      	mov	r1, r3
 80097d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097d4:	f7fe fed4 	bl	8008580 <move_window>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d137      	bne.n	800984e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	2200      	movs	r2, #0
 80097e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	3330      	adds	r3, #48	; 0x30
 80097e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fc17 	bl	8008020 <ld_word>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d127      	bne.n	800984e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	3330      	adds	r3, #48	; 0x30
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fc24 	bl	8008050 <ld_dword>
 8009808:	4603      	mov	r3, r0
 800980a:	4a1c      	ldr	r2, [pc, #112]	; (800987c <find_volume+0x48c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d11e      	bne.n	800984e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	3330      	adds	r3, #48	; 0x30
 8009814:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fc19 	bl	8008050 <ld_dword>
 800981e:	4603      	mov	r3, r0
 8009820:	4a17      	ldr	r2, [pc, #92]	; (8009880 <find_volume+0x490>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d113      	bne.n	800984e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	3330      	adds	r3, #48	; 0x30
 800982a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fc0e 	bl	8008050 <ld_dword>
 8009834:	4602      	mov	r2, r0
 8009836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009838:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	3330      	adds	r3, #48	; 0x30
 800983e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fc04 	bl	8008050 <ld_dword>
 8009848:	4602      	mov	r2, r0
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009854:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <find_volume+0x494>)
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	b29a      	uxth	r2, r3
 800985e:	4b09      	ldr	r3, [pc, #36]	; (8009884 <find_volume+0x494>)
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	4b08      	ldr	r3, [pc, #32]	; (8009884 <find_volume+0x494>)
 8009864:	881a      	ldrh	r2, [r3, #0]
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800986a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800986c:	f7fe fe20 	bl	80084b0 <clear_lock>
#endif
	return FR_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3758      	adds	r7, #88	; 0x58
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	41615252 	.word	0x41615252
 8009880:	61417272 	.word	0x61417272
 8009884:	20000a58 	.word	0x20000a58

08009888 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009892:	2309      	movs	r3, #9
 8009894:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01c      	beq.n	80098d6 <validate+0x4e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d018      	beq.n	80098d6 <validate+0x4e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d013      	beq.n	80098d6 <validate+0x4e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	889a      	ldrh	r2, [r3, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	88db      	ldrh	r3, [r3, #6]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d10c      	bne.n	80098d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fb0e 	bl	8007ee4 <disk_status>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <validate+0x4e>
			res = FR_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <validate+0x5a>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	e000      	b.n	80098e4 <validate+0x5c>
 80098e2:	2300      	movs	r3, #0
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	6013      	str	r3, [r2, #0]
	return res;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009906:	f107 0310 	add.w	r3, r7, #16
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fcd5 	bl	80092ba <get_ldnumber>
 8009910:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	2b00      	cmp	r3, #0
 8009916:	da01      	bge.n	800991c <f_mount+0x28>
 8009918:	230b      	movs	r3, #11
 800991a:	e02b      	b.n	8009974 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800991c:	4a17      	ldr	r2, [pc, #92]	; (800997c <f_mount+0x88>)
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009924:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800992c:	69b8      	ldr	r0, [r7, #24]
 800992e:	f7fe fdbf 	bl	80084b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	490d      	ldr	r1, [pc, #52]	; (800997c <f_mount+0x88>)
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <f_mount+0x66>
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d001      	beq.n	800995e <f_mount+0x6a>
 800995a:	2300      	movs	r3, #0
 800995c:	e00a      	b.n	8009974 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800995e:	f107 010c 	add.w	r1, r7, #12
 8009962:	f107 0308 	add.w	r3, r7, #8
 8009966:	2200      	movs	r2, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff fd41 	bl	80093f0 <find_volume>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000a54 	.word	0x20000a54

08009980 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b098      	sub	sp, #96	; 0x60
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	4613      	mov	r3, r2
 800998c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <f_open+0x18>
 8009994:	2309      	movs	r3, #9
 8009996:	e1a9      	b.n	8009cec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800999e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	f107 0110 	add.w	r1, r7, #16
 80099a6:	f107 0308 	add.w	r3, r7, #8
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fd20 	bl	80093f0 <find_volume>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80099b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f040 818d 	bne.w	8009cda <f_open+0x35a>
		dj.obj.fs = fs;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	f107 0314 	add.w	r3, r7, #20
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fc03 	bl	80091d8 <follow_path>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80099d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d11a      	bne.n	8009a16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80099e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da03      	bge.n	80099f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80099ea:	2306      	movs	r3, #6
 80099ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099f0:	e011      	b.n	8009a16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	f023 0301 	bic.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bf14      	ite	ne
 80099fc:	2301      	movne	r3, #1
 80099fe:	2300      	moveq	r3, #0
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	f107 0314 	add.w	r3, r7, #20
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe fc08 	bl	8008220 <chk_lock>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	f003 031c 	and.w	r3, r3, #28
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d07e      	beq.n	8009b1e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8009a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d017      	beq.n	8009a58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d10e      	bne.n	8009a4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a30:	f7fe fc52 	bl	80082d8 <enq_lock>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d006      	beq.n	8009a48 <f_open+0xc8>
 8009a3a:	f107 0314 	add.w	r3, r7, #20
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fb03 	bl	800904a <dir_register>
 8009a44:	4603      	mov	r3, r0
 8009a46:	e000      	b.n	8009a4a <f_open+0xca>
 8009a48:	2312      	movs	r3, #18
 8009a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	f043 0308 	orr.w	r3, r3, #8
 8009a54:	71fb      	strb	r3, [r7, #7]
 8009a56:	e010      	b.n	8009a7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a58:	7ebb      	ldrb	r3, [r7, #26]
 8009a5a:	f003 0311 	and.w	r3, r3, #17
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <f_open+0xea>
					res = FR_DENIED;
 8009a62:	2307      	movs	r3, #7
 8009a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a68:	e007      	b.n	8009a7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <f_open+0xfa>
 8009a74:	2308      	movs	r3, #8
 8009a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d167      	bne.n	8009b52 <f_open+0x1d2>
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	f003 0308 	and.w	r3, r3, #8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d062      	beq.n	8009b52 <f_open+0x1d2>
				dw = GET_FATTIME();
 8009a8c:	4b99      	ldr	r3, [pc, #612]	; (8009cf4 <f_open+0x374>)
 8009a8e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a92:	330e      	adds	r3, #14
 8009a94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fb18 	bl	80080cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9e:	3316      	adds	r3, #22
 8009aa0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fb12 	bl	80080cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aaa:	330b      	adds	r3, #11
 8009aac:	2220      	movs	r2, #32
 8009aae:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fa33 	bl	8008f22 <ld_clust>
 8009abc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fa4b 	bl	8008f60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009acc:	331c      	adds	r3, #28
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe fafb 	bl	80080cc <st_dword>
					fs->wflag = 1;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d037      	beq.n	8009b52 <f_open+0x1d2>
						dw = fs->winsect;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009ae8:	f107 0314 	add.w	r3, r7, #20
 8009aec:	2200      	movs	r2, #0
 8009aee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe ff92 	bl	8008a1a <remove_chain>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009afc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d126      	bne.n	8009b52 <f_open+0x1d2>
							res = move_window(fs, dw);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fd39 	bl	8008580 <move_window>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b18:	3a01      	subs	r2, #1
 8009b1a:	60da      	str	r2, [r3, #12]
 8009b1c:	e019      	b.n	8009b52 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d115      	bne.n	8009b52 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009b26:	7ebb      	ldrb	r3, [r7, #26]
 8009b28:	f003 0310 	and.w	r3, r3, #16
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <f_open+0x1b8>
					res = FR_NO_FILE;
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b36:	e00c      	b.n	8009b52 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d007      	beq.n	8009b52 <f_open+0x1d2>
 8009b42:	7ebb      	ldrb	r3, [r7, #26]
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <f_open+0x1d2>
						res = FR_DENIED;
 8009b4c:	2307      	movs	r3, #7
 8009b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d128      	bne.n	8009bac <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	f003 0308 	and.w	r3, r3, #8
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bf14      	ite	ne
 8009b84:	2301      	movne	r3, #1
 8009b86:	2300      	moveq	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	4611      	mov	r1, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fbc2 	bl	800831c <inc_lock>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d102      	bne.n	8009bac <f_open+0x22c>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 8092 	bne.w	8009cda <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff f9b0 	bl	8008f22 <ld_clust>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bca:	331c      	adds	r3, #28
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fa3f 	bl	8008050 <ld_dword>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	88da      	ldrh	r2, [r3, #6]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	79fa      	ldrb	r2, [r7, #7]
 8009bea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	332c      	adds	r3, #44	; 0x2c
 8009c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe faac 	bl	8008166 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d060      	beq.n	8009cda <f_open+0x35a>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d05c      	beq.n	8009cda <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	895b      	ldrh	r3, [r3, #10]
 8009c2c:	025b      	lsls	r3, r3, #9
 8009c2e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c3c:	e016      	b.n	8009c6c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fd57 	bl	80086f6 <get_fat>
 8009c48:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d802      	bhi.n	8009c56 <f_open+0x2d6>
 8009c50:	2302      	movs	r3, #2
 8009c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d102      	bne.n	8009c64 <f_open+0x2e4>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d103      	bne.n	8009c7c <f_open+0x2fc>
 8009c74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d8e0      	bhi.n	8009c3e <f_open+0x2be>
				}
				fp->clust = clst;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d127      	bne.n	8009cda <f_open+0x35a>
 8009c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d022      	beq.n	8009cda <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fd0d 	bl	80086b8 <clust2sect>
 8009c9e:	6478      	str	r0, [r7, #68]	; 0x44
 8009ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <f_open+0x32e>
						res = FR_INT_ERR;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cac:	e015      	b.n	8009cda <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cb0:	0a5a      	lsrs	r2, r3, #9
 8009cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb4:	441a      	add	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	7858      	ldrb	r0, [r3, #1]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6a1a      	ldr	r2, [r3, #32]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f7fe f94b 	bl	8007f64 <disk_read>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <f_open+0x35a>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <f_open+0x368>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3760      	adds	r7, #96	; 0x60
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	46c40000 	.word	0x46c40000

08009cf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f107 0210 	add.w	r2, r7, #16
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff fdb5 	bl	8009888 <validate>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d107      	bne.n	8009d3c <f_write+0x44>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	7d5b      	ldrb	r3, [r3, #21]
 8009d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <f_write+0x4a>
 8009d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d40:	e13f      	b.n	8009fc2 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	7d1b      	ldrb	r3, [r3, #20]
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <f_write+0x5a>
 8009d4e:	2307      	movs	r3, #7
 8009d50:	e137      	b.n	8009fc2 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	441a      	add	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	f080 8121 	bcs.w	8009fa6 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d6c:	e11b      	b.n	8009fa6 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f040 80d7 	bne.w	8009f2a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	0a5b      	lsrs	r3, r3, #9
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	8952      	ldrh	r2, [r2, #10]
 8009d86:	3a01      	subs	r2, #1
 8009d88:	4013      	ands	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d137      	bne.n	8009e02 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10c      	bne.n	8009db4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10e      	bne.n	8009dc4 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fe9a 	bl	8008ae4 <create_chain>
 8009db0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009db2:	e007      	b.n	8009dc4 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	f7fe fe91 	bl	8008ae4 <create_chain>
 8009dc2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80f2 	beq.w	8009fb0 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d104      	bne.n	8009ddc <f_write+0xe4>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	755a      	strb	r2, [r3, #21]
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e0f2      	b.n	8009fc2 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d104      	bne.n	8009dee <f_write+0xf6>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	755a      	strb	r2, [r3, #21]
 8009dea:	2301      	movs	r3, #1
 8009dec:	e0e9      	b.n	8009fc2 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <f_write+0x10a>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	7d1b      	ldrb	r3, [r3, #20]
 8009e06:	b25b      	sxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da18      	bge.n	8009e3e <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	7858      	ldrb	r0, [r3, #1]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a1a      	ldr	r2, [r3, #32]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f7fe f8c2 	bl	8007fa4 <disk_write>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <f_write+0x138>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	755a      	strb	r2, [r3, #21]
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0c8      	b.n	8009fc2 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	7d1b      	ldrb	r3, [r3, #20]
 8009e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7fe fc36 	bl	80086b8 <clust2sect>
 8009e4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d104      	bne.n	8009e5e <f_write+0x166>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2202      	movs	r2, #2
 8009e58:	755a      	strb	r2, [r3, #21]
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e0b1      	b.n	8009fc2 <f_write+0x2ca>
			sect += csect;
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	4413      	add	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	0a5b      	lsrs	r3, r3, #9
 8009e6a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d03c      	beq.n	8009eec <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	4413      	add	r3, r2
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	8952      	ldrh	r2, [r2, #10]
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d905      	bls.n	8009e8c <f_write+0x194>
					cc = fs->csize - csect;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	895b      	ldrh	r3, [r3, #10]
 8009e84:	461a      	mov	r2, r3
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	7858      	ldrb	r0, [r3, #1]
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	69f9      	ldr	r1, [r7, #28]
 8009e96:	f7fe f885 	bl	8007fa4 <disk_write>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d004      	beq.n	8009eaa <f_write+0x1b2>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	755a      	strb	r2, [r3, #21]
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e08b      	b.n	8009fc2 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1a      	ldr	r2, [r3, #32]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d915      	bls.n	8009ee4 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a1a      	ldr	r2, [r3, #32]
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	025b      	lsls	r3, r3, #9
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f7fe f927 	bl	8008124 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	7d1b      	ldrb	r3, [r3, #20]
 8009eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	025b      	lsls	r3, r3, #9
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009eea:	e03f      	b.n	8009f6c <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d016      	beq.n	8009f24 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d210      	bcs.n	8009f24 <f_write+0x22c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	7858      	ldrb	r0, [r3, #1]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	f7fe f828 	bl	8007f64 <disk_read>
 8009f14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	755a      	strb	r2, [r3, #21]
 8009f20:	2301      	movs	r3, #1
 8009f22:	e04e      	b.n	8009fc2 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d901      	bls.n	8009f44 <f_write+0x24c>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f52:	4413      	add	r3, r2
 8009f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f56:	69f9      	ldr	r1, [r7, #28]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe f8e3 	bl	8008124 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	7d1b      	ldrb	r3, [r3, #20]
 8009f62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	4413      	add	r3, r2
 8009f72:	61fb      	str	r3, [r7, #28]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	441a      	add	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	619a      	str	r2, [r3, #24]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68da      	ldr	r2, [r3, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	bf38      	it	cc
 8009f8c:	461a      	movcc	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	60da      	str	r2, [r3, #12]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	441a      	add	r2, r3
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f47f aee0 	bne.w	8009d6e <f_write+0x76>
 8009fae:	e000      	b.n	8009fb2 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fb0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3730      	adds	r7, #48	; 0x30
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f107 0208 	add.w	r2, r7, #8
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff fc53 	bl	8009888 <validate>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d167      	bne.n	800a0bc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7d1b      	ldrb	r3, [r3, #20]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d061      	beq.n	800a0bc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7d1b      	ldrb	r3, [r3, #20]
 8009ffc:	b25b      	sxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da15      	bge.n	800a02e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	7858      	ldrb	r0, [r3, #1]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	2301      	movs	r3, #1
 800a012:	f7fd ffc7 	bl	8007fa4 <disk_write>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <f_sync+0x54>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e04e      	b.n	800a0be <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7d1b      	ldrb	r3, [r3, #20]
 800a024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a02e:	4b26      	ldr	r3, [pc, #152]	; (800a0c8 <f_sync+0xfc>)
 800a030:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f7fe faa0 	bl	8008580 <move_window>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d138      	bne.n	800a0bc <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	330b      	adds	r3, #11
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	330b      	adds	r3, #11
 800a05a:	f042 0220 	orr.w	r2, r2, #32
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	461a      	mov	r2, r3
 800a06c:	68f9      	ldr	r1, [r7, #12]
 800a06e:	f7fe ff77 	bl	8008f60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f103 021c 	add.w	r2, r3, #28
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f7fe f824 	bl	80080cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3316      	adds	r3, #22
 800a088:	6939      	ldr	r1, [r7, #16]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe f81e 	bl	80080cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3312      	adds	r3, #18
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f7fd fffd 	bl	8008096 <st_word>
					fs->wflag = 1;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fa99 	bl	80085dc <sync_fs>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7d1b      	ldrb	r3, [r3, #20]
 800a0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	46c40000 	.word	0x46c40000

0800a0cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff ff79 	bl	8009fcc <f_sync>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d118      	bne.n	800a116 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f107 0208 	add.w	r2, r7, #8
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fbcb 	bl	8009888 <validate>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10c      	bne.n	800a116 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe f999 	bl	8008438 <dec_lock>
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f107 0208 	add.w	r2, r7, #8
 800a130:	4611      	mov	r1, r2
 800a132:	4618      	mov	r0, r3
 800a134:	f7ff fba8 	bl	8009888 <validate>
 800a138:	4603      	mov	r3, r0
 800a13a:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a13c:	7ffb      	ldrb	r3, [r7, #31]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d102      	bne.n	800a148 <f_lseek+0x28>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	7d5b      	ldrb	r3, [r3, #21]
 800a146:	77fb      	strb	r3, [r7, #31]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a148:	7ffb      	ldrb	r3, [r7, #31]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <f_lseek+0x32>
 800a14e:	7ffb      	ldrb	r3, [r7, #31]
 800a150:	e10f      	b.n	800a372 <f_lseek+0x252>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d908      	bls.n	800a16e <f_lseek+0x4e>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7d1b      	ldrb	r3, [r3, #20]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80a7 	beq.w	800a2d4 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	895b      	ldrh	r3, [r3, #10]
 800a18a:	025b      	lsls	r3, r3, #9
 800a18c:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01b      	beq.n	800a1cc <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	1e5a      	subs	r2, r3, #1
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	1e59      	subs	r1, r3, #1
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d30f      	bcc.n	800a1cc <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	425b      	negs	r3, r3
 800a1b4:	401a      	ands	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	e022      	b.n	800a212 <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d119      	bne.n	800a20c <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2100      	movs	r1, #0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe fc81 	bl	8008ae4 <create_chain>
 800a1e2:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d104      	bne.n	800a1f4 <f_lseek+0xd4>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	755a      	strb	r2, [r3, #21]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e0be      	b.n	800a372 <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fa:	d104      	bne.n	800a206 <f_lseek+0xe6>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	755a      	strb	r2, [r3, #21]
 800a202:	2301      	movs	r3, #1
 800a204:	e0b5      	b.n	800a372 <f_lseek+0x252>
					fp->obj.sclust = clst;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d05d      	beq.n	800a2d4 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 800a218:	e03a      	b.n	800a290 <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	441a      	add	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	7d1b      	ldrb	r3, [r3, #20]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <f_lseek+0x132>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69b9      	ldr	r1, [r7, #24]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fc50 	bl	8008ae4 <create_chain>
 800a244:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d108      	bne.n	800a25e <f_lseek+0x13e>
							ofs = 0; break;
 800a24c:	2300      	movs	r3, #0
 800a24e:	603b      	str	r3, [r7, #0]
 800a250:	e022      	b.n	800a298 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fa4d 	bl	80086f6 <get_fat>
 800a25c:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a264:	d104      	bne.n	800a270 <f_lseek+0x150>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	755a      	strb	r2, [r3, #21]
 800a26c:	2301      	movs	r3, #1
 800a26e:	e080      	b.n	800a372 <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d904      	bls.n	800a280 <f_lseek+0x160>
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d304      	bcc.n	800a28a <f_lseek+0x16a>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	755a      	strb	r2, [r3, #21]
 800a286:	2302      	movs	r3, #2
 800a288:	e073      	b.n	800a372 <f_lseek+0x252>
					fp->clust = clst;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	429a      	cmp	r2, r3
 800a296:	d8c0      	bhi.n	800a21a <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699a      	ldr	r2, [r3, #24]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	441a      	add	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d012      	beq.n	800a2d4 <f_lseek+0x1b4>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	69b9      	ldr	r1, [r7, #24]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fa00 	bl	80086b8 <clust2sect>
 800a2b8:	6178      	str	r0, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d104      	bne.n	800a2ca <f_lseek+0x1aa>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	755a      	strb	r2, [r3, #21]
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e053      	b.n	800a372 <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	0a5b      	lsrs	r3, r3, #9
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d90a      	bls.n	800a2f6 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	699a      	ldr	r2, [r3, #24]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	7d1b      	ldrb	r3, [r3, #20]
 800a2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d036      	beq.n	800a370 <f_lseek+0x250>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d031      	beq.n	800a370 <f_lseek+0x250>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7d1b      	ldrb	r3, [r3, #20]
 800a310:	b25b      	sxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	da18      	bge.n	800a348 <f_lseek+0x228>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	7858      	ldrb	r0, [r3, #1]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1a      	ldr	r2, [r3, #32]
 800a324:	2301      	movs	r3, #1
 800a326:	f7fd fe3d 	bl	8007fa4 <disk_write>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d004      	beq.n	800a33a <f_lseek+0x21a>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	755a      	strb	r2, [r3, #21]
 800a336:	2301      	movs	r3, #1
 800a338:	e01b      	b.n	800a372 <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	7d1b      	ldrb	r3, [r3, #20]
 800a33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a342:	b2da      	uxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	7858      	ldrb	r0, [r3, #1]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a352:	2301      	movs	r3, #1
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	f7fd fe05 	bl	8007f64 <disk_read>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <f_lseek+0x24a>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	755a      	strb	r2, [r3, #21]
 800a366:	2301      	movs	r3, #1
 800a368:	e003      	b.n	800a372 <f_lseek+0x252>
#endif
			fp->sect = nsect;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a370:	7ffb      	ldrb	r3, [r7, #31]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3720      	adds	r7, #32
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a38a:	2301      	movs	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a392:	4b1f      	ldr	r3, [pc, #124]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a394:	7a5b      	ldrb	r3, [r3, #9]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d131      	bne.n	800a400 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a39c:	4b1c      	ldr	r3, [pc, #112]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a39e:	7a5b      	ldrb	r3, [r3, #9]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3aa:	4b19      	ldr	r3, [pc, #100]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3ac:	7a5b      	ldrb	r3, [r3, #9]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	4a17      	ldr	r2, [pc, #92]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3ba:	4b15      	ldr	r3, [pc, #84]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3bc:	7a5b      	ldrb	r3, [r3, #9]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b13      	ldr	r3, [pc, #76]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3c4:	4413      	add	r3, r2
 800a3c6:	79fa      	ldrb	r2, [r7, #7]
 800a3c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3ca:	4b11      	ldr	r3, [pc, #68]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3cc:	7a5b      	ldrb	r3, [r3, #9]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	b2d1      	uxtb	r1, r2
 800a3d4:	4a0e      	ldr	r2, [pc, #56]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3d6:	7251      	strb	r1, [r2, #9]
 800a3d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3da:	7dbb      	ldrb	r3, [r7, #22]
 800a3dc:	3330      	adds	r3, #48	; 0x30
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	223a      	movs	r2, #58	; 0x3a
 800a3ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3302      	adds	r3, #2
 800a3f0:	222f      	movs	r2, #47	; 0x2f
 800a3f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	3303      	adds	r3, #3
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
}
 800a402:	4618      	mov	r0, r3
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20000a7c 	.word	0x20000a7c

0800a414 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a41e:	2200      	movs	r2, #0
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ffaa 	bl	800a37c <FATFS_LinkDriverEx>
 800a428:	4603      	mov	r3, r0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <atof>:
 800a432:	2100      	movs	r1, #0
 800a434:	f000 be2e 	b.w	800b094 <strtod>

0800a438 <__itoa>:
 800a438:	1e93      	subs	r3, r2, #2
 800a43a:	2b22      	cmp	r3, #34	; 0x22
 800a43c:	b510      	push	{r4, lr}
 800a43e:	460c      	mov	r4, r1
 800a440:	d904      	bls.n	800a44c <__itoa+0x14>
 800a442:	2300      	movs	r3, #0
 800a444:	700b      	strb	r3, [r1, #0]
 800a446:	461c      	mov	r4, r3
 800a448:	4620      	mov	r0, r4
 800a44a:	bd10      	pop	{r4, pc}
 800a44c:	2a0a      	cmp	r2, #10
 800a44e:	d109      	bne.n	800a464 <__itoa+0x2c>
 800a450:	2800      	cmp	r0, #0
 800a452:	da07      	bge.n	800a464 <__itoa+0x2c>
 800a454:	232d      	movs	r3, #45	; 0x2d
 800a456:	700b      	strb	r3, [r1, #0]
 800a458:	4240      	negs	r0, r0
 800a45a:	2101      	movs	r1, #1
 800a45c:	4421      	add	r1, r4
 800a45e:	f000 fe25 	bl	800b0ac <__utoa>
 800a462:	e7f1      	b.n	800a448 <__itoa+0x10>
 800a464:	2100      	movs	r1, #0
 800a466:	e7f9      	b.n	800a45c <__itoa+0x24>

0800a468 <itoa>:
 800a468:	f7ff bfe6 	b.w	800a438 <__itoa>

0800a46c <sulp>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4604      	mov	r4, r0
 800a470:	460d      	mov	r5, r1
 800a472:	ec45 4b10 	vmov	d0, r4, r5
 800a476:	4616      	mov	r6, r2
 800a478:	f003 fdb2 	bl	800dfe0 <__ulp>
 800a47c:	ec51 0b10 	vmov	r0, r1, d0
 800a480:	b17e      	cbz	r6, 800a4a2 <sulp+0x36>
 800a482:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a486:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dd09      	ble.n	800a4a2 <sulp+0x36>
 800a48e:	051b      	lsls	r3, r3, #20
 800a490:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a494:	2400      	movs	r4, #0
 800a496:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a49a:	4622      	mov	r2, r4
 800a49c:	462b      	mov	r3, r5
 800a49e:	f7f6 f8bb 	bl	8000618 <__aeabi_dmul>
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	0000      	movs	r0, r0
	...

0800a4a8 <_strtod_l>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	ed2d 8b02 	vpush	{d8}
 800a4b0:	b09b      	sub	sp, #108	; 0x6c
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	9213      	str	r2, [sp, #76]	; 0x4c
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	9216      	str	r2, [sp, #88]	; 0x58
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	f04f 0800 	mov.w	r8, #0
 800a4c0:	f04f 0900 	mov.w	r9, #0
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	9215      	str	r2, [sp, #84]	; 0x54
 800a4c8:	7811      	ldrb	r1, [r2, #0]
 800a4ca:	292b      	cmp	r1, #43	; 0x2b
 800a4cc:	d04c      	beq.n	800a568 <_strtod_l+0xc0>
 800a4ce:	d83a      	bhi.n	800a546 <_strtod_l+0x9e>
 800a4d0:	290d      	cmp	r1, #13
 800a4d2:	d834      	bhi.n	800a53e <_strtod_l+0x96>
 800a4d4:	2908      	cmp	r1, #8
 800a4d6:	d834      	bhi.n	800a542 <_strtod_l+0x9a>
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	d03d      	beq.n	800a558 <_strtod_l+0xb0>
 800a4dc:	2200      	movs	r2, #0
 800a4de:	920a      	str	r2, [sp, #40]	; 0x28
 800a4e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a4e2:	7832      	ldrb	r2, [r6, #0]
 800a4e4:	2a30      	cmp	r2, #48	; 0x30
 800a4e6:	f040 80b4 	bne.w	800a652 <_strtod_l+0x1aa>
 800a4ea:	7872      	ldrb	r2, [r6, #1]
 800a4ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a4f0:	2a58      	cmp	r2, #88	; 0x58
 800a4f2:	d170      	bne.n	800a5d6 <_strtod_l+0x12e>
 800a4f4:	9302      	str	r3, [sp, #8]
 800a4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	ab16      	add	r3, sp, #88	; 0x58
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	4a8e      	ldr	r2, [pc, #568]	; (800a738 <_strtod_l+0x290>)
 800a500:	ab17      	add	r3, sp, #92	; 0x5c
 800a502:	a915      	add	r1, sp, #84	; 0x54
 800a504:	4620      	mov	r0, r4
 800a506:	f002 fe49 	bl	800d19c <__gethex>
 800a50a:	f010 070f 	ands.w	r7, r0, #15
 800a50e:	4605      	mov	r5, r0
 800a510:	d005      	beq.n	800a51e <_strtod_l+0x76>
 800a512:	2f06      	cmp	r7, #6
 800a514:	d12a      	bne.n	800a56c <_strtod_l+0xc4>
 800a516:	3601      	adds	r6, #1
 800a518:	2300      	movs	r3, #0
 800a51a:	9615      	str	r6, [sp, #84]	; 0x54
 800a51c:	930a      	str	r3, [sp, #40]	; 0x28
 800a51e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 857f 	bne.w	800b024 <_strtod_l+0xb7c>
 800a526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a528:	b1db      	cbz	r3, 800a562 <_strtod_l+0xba>
 800a52a:	4642      	mov	r2, r8
 800a52c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a530:	ec43 2b10 	vmov	d0, r2, r3
 800a534:	b01b      	add	sp, #108	; 0x6c
 800a536:	ecbd 8b02 	vpop	{d8}
 800a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53e:	2920      	cmp	r1, #32
 800a540:	d1cc      	bne.n	800a4dc <_strtod_l+0x34>
 800a542:	3201      	adds	r2, #1
 800a544:	e7bf      	b.n	800a4c6 <_strtod_l+0x1e>
 800a546:	292d      	cmp	r1, #45	; 0x2d
 800a548:	d1c8      	bne.n	800a4dc <_strtod_l+0x34>
 800a54a:	2101      	movs	r1, #1
 800a54c:	910a      	str	r1, [sp, #40]	; 0x28
 800a54e:	1c51      	adds	r1, r2, #1
 800a550:	9115      	str	r1, [sp, #84]	; 0x54
 800a552:	7852      	ldrb	r2, [r2, #1]
 800a554:	2a00      	cmp	r2, #0
 800a556:	d1c3      	bne.n	800a4e0 <_strtod_l+0x38>
 800a558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a55a:	9515      	str	r5, [sp, #84]	; 0x54
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 855f 	bne.w	800b020 <_strtod_l+0xb78>
 800a562:	4642      	mov	r2, r8
 800a564:	464b      	mov	r3, r9
 800a566:	e7e3      	b.n	800a530 <_strtod_l+0x88>
 800a568:	2100      	movs	r1, #0
 800a56a:	e7ef      	b.n	800a54c <_strtod_l+0xa4>
 800a56c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a56e:	b13a      	cbz	r2, 800a580 <_strtod_l+0xd8>
 800a570:	2135      	movs	r1, #53	; 0x35
 800a572:	a818      	add	r0, sp, #96	; 0x60
 800a574:	f003 fe31 	bl	800e1da <__copybits>
 800a578:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a57a:	4620      	mov	r0, r4
 800a57c:	f003 fa04 	bl	800d988 <_Bfree>
 800a580:	3f01      	subs	r7, #1
 800a582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a584:	2f04      	cmp	r7, #4
 800a586:	d806      	bhi.n	800a596 <_strtod_l+0xee>
 800a588:	e8df f007 	tbb	[pc, r7]
 800a58c:	201d0314 	.word	0x201d0314
 800a590:	14          	.byte	0x14
 800a591:	00          	.byte	0x00
 800a592:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a596:	05e9      	lsls	r1, r5, #23
 800a598:	bf48      	it	mi
 800a59a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a59e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5a2:	0d1b      	lsrs	r3, r3, #20
 800a5a4:	051b      	lsls	r3, r3, #20
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1b9      	bne.n	800a51e <_strtod_l+0x76>
 800a5aa:	f001 fe59 	bl	800c260 <__errno>
 800a5ae:	2322      	movs	r3, #34	; 0x22
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	e7b4      	b.n	800a51e <_strtod_l+0x76>
 800a5b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a5b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a5c4:	e7e7      	b.n	800a596 <_strtod_l+0xee>
 800a5c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a740 <_strtod_l+0x298>
 800a5ca:	e7e4      	b.n	800a596 <_strtod_l+0xee>
 800a5cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a5d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a5d4:	e7df      	b.n	800a596 <_strtod_l+0xee>
 800a5d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	9215      	str	r2, [sp, #84]	; 0x54
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b30      	cmp	r3, #48	; 0x30
 800a5e0:	d0f9      	beq.n	800a5d6 <_strtod_l+0x12e>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d09b      	beq.n	800a51e <_strtod_l+0x76>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	f04f 0a00 	mov.w	sl, #0
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a5f6:	46d3      	mov	fp, sl
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a5fc:	7806      	ldrb	r6, [r0, #0]
 800a5fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a602:	b2d9      	uxtb	r1, r3
 800a604:	2909      	cmp	r1, #9
 800a606:	d926      	bls.n	800a656 <_strtod_l+0x1ae>
 800a608:	494c      	ldr	r1, [pc, #304]	; (800a73c <_strtod_l+0x294>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	f001 fd5c 	bl	800c0c8 <strncmp>
 800a610:	2800      	cmp	r0, #0
 800a612:	d030      	beq.n	800a676 <_strtod_l+0x1ce>
 800a614:	2000      	movs	r0, #0
 800a616:	4632      	mov	r2, r6
 800a618:	9005      	str	r0, [sp, #20]
 800a61a:	465e      	mov	r6, fp
 800a61c:	4603      	mov	r3, r0
 800a61e:	2a65      	cmp	r2, #101	; 0x65
 800a620:	d001      	beq.n	800a626 <_strtod_l+0x17e>
 800a622:	2a45      	cmp	r2, #69	; 0x45
 800a624:	d113      	bne.n	800a64e <_strtod_l+0x1a6>
 800a626:	b91e      	cbnz	r6, 800a630 <_strtod_l+0x188>
 800a628:	9a04      	ldr	r2, [sp, #16]
 800a62a:	4302      	orrs	r2, r0
 800a62c:	d094      	beq.n	800a558 <_strtod_l+0xb0>
 800a62e:	2600      	movs	r6, #0
 800a630:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a632:	1c6a      	adds	r2, r5, #1
 800a634:	9215      	str	r2, [sp, #84]	; 0x54
 800a636:	786a      	ldrb	r2, [r5, #1]
 800a638:	2a2b      	cmp	r2, #43	; 0x2b
 800a63a:	d074      	beq.n	800a726 <_strtod_l+0x27e>
 800a63c:	2a2d      	cmp	r2, #45	; 0x2d
 800a63e:	d078      	beq.n	800a732 <_strtod_l+0x28a>
 800a640:	f04f 0c00 	mov.w	ip, #0
 800a644:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a648:	2909      	cmp	r1, #9
 800a64a:	d97f      	bls.n	800a74c <_strtod_l+0x2a4>
 800a64c:	9515      	str	r5, [sp, #84]	; 0x54
 800a64e:	2700      	movs	r7, #0
 800a650:	e09e      	b.n	800a790 <_strtod_l+0x2e8>
 800a652:	2300      	movs	r3, #0
 800a654:	e7c8      	b.n	800a5e8 <_strtod_l+0x140>
 800a656:	f1bb 0f08 	cmp.w	fp, #8
 800a65a:	bfd8      	it	le
 800a65c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a65e:	f100 0001 	add.w	r0, r0, #1
 800a662:	bfda      	itte	le
 800a664:	fb02 3301 	mlale	r3, r2, r1, r3
 800a668:	9309      	strle	r3, [sp, #36]	; 0x24
 800a66a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a66e:	f10b 0b01 	add.w	fp, fp, #1
 800a672:	9015      	str	r0, [sp, #84]	; 0x54
 800a674:	e7c1      	b.n	800a5fa <_strtod_l+0x152>
 800a676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	9215      	str	r2, [sp, #84]	; 0x54
 800a67c:	785a      	ldrb	r2, [r3, #1]
 800a67e:	f1bb 0f00 	cmp.w	fp, #0
 800a682:	d037      	beq.n	800a6f4 <_strtod_l+0x24c>
 800a684:	9005      	str	r0, [sp, #20]
 800a686:	465e      	mov	r6, fp
 800a688:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a68c:	2b09      	cmp	r3, #9
 800a68e:	d912      	bls.n	800a6b6 <_strtod_l+0x20e>
 800a690:	2301      	movs	r3, #1
 800a692:	e7c4      	b.n	800a61e <_strtod_l+0x176>
 800a694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	9215      	str	r2, [sp, #84]	; 0x54
 800a69a:	785a      	ldrb	r2, [r3, #1]
 800a69c:	3001      	adds	r0, #1
 800a69e:	2a30      	cmp	r2, #48	; 0x30
 800a6a0:	d0f8      	beq.n	800a694 <_strtod_l+0x1ec>
 800a6a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a6a6:	2b08      	cmp	r3, #8
 800a6a8:	f200 84c1 	bhi.w	800b02e <_strtod_l+0xb86>
 800a6ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ae:	9005      	str	r0, [sp, #20]
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	3a30      	subs	r2, #48	; 0x30
 800a6b8:	f100 0301 	add.w	r3, r0, #1
 800a6bc:	d014      	beq.n	800a6e8 <_strtod_l+0x240>
 800a6be:	9905      	ldr	r1, [sp, #20]
 800a6c0:	4419      	add	r1, r3
 800a6c2:	9105      	str	r1, [sp, #20]
 800a6c4:	4633      	mov	r3, r6
 800a6c6:	eb00 0c06 	add.w	ip, r0, r6
 800a6ca:	210a      	movs	r1, #10
 800a6cc:	4563      	cmp	r3, ip
 800a6ce:	d113      	bne.n	800a6f8 <_strtod_l+0x250>
 800a6d0:	1833      	adds	r3, r6, r0
 800a6d2:	2b08      	cmp	r3, #8
 800a6d4:	f106 0601 	add.w	r6, r6, #1
 800a6d8:	4406      	add	r6, r0
 800a6da:	dc1a      	bgt.n	800a712 <_strtod_l+0x26a>
 800a6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6de:	230a      	movs	r3, #10
 800a6e0:	fb03 2301 	mla	r3, r3, r1, r2
 800a6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6ea:	1c51      	adds	r1, r2, #1
 800a6ec:	9115      	str	r1, [sp, #84]	; 0x54
 800a6ee:	7852      	ldrb	r2, [r2, #1]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	e7c9      	b.n	800a688 <_strtod_l+0x1e0>
 800a6f4:	4658      	mov	r0, fp
 800a6f6:	e7d2      	b.n	800a69e <_strtod_l+0x1f6>
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	f103 0301 	add.w	r3, r3, #1
 800a6fe:	dc03      	bgt.n	800a708 <_strtod_l+0x260>
 800a700:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a702:	434f      	muls	r7, r1
 800a704:	9709      	str	r7, [sp, #36]	; 0x24
 800a706:	e7e1      	b.n	800a6cc <_strtod_l+0x224>
 800a708:	2b10      	cmp	r3, #16
 800a70a:	bfd8      	it	le
 800a70c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a710:	e7dc      	b.n	800a6cc <_strtod_l+0x224>
 800a712:	2e10      	cmp	r6, #16
 800a714:	bfdc      	itt	le
 800a716:	230a      	movle	r3, #10
 800a718:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a71c:	e7e3      	b.n	800a6e6 <_strtod_l+0x23e>
 800a71e:	2300      	movs	r3, #0
 800a720:	9305      	str	r3, [sp, #20]
 800a722:	2301      	movs	r3, #1
 800a724:	e780      	b.n	800a628 <_strtod_l+0x180>
 800a726:	f04f 0c00 	mov.w	ip, #0
 800a72a:	1caa      	adds	r2, r5, #2
 800a72c:	9215      	str	r2, [sp, #84]	; 0x54
 800a72e:	78aa      	ldrb	r2, [r5, #2]
 800a730:	e788      	b.n	800a644 <_strtod_l+0x19c>
 800a732:	f04f 0c01 	mov.w	ip, #1
 800a736:	e7f8      	b.n	800a72a <_strtod_l+0x282>
 800a738:	08012478 	.word	0x08012478
 800a73c:	08012474 	.word	0x08012474
 800a740:	7ff00000 	.word	0x7ff00000
 800a744:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a746:	1c51      	adds	r1, r2, #1
 800a748:	9115      	str	r1, [sp, #84]	; 0x54
 800a74a:	7852      	ldrb	r2, [r2, #1]
 800a74c:	2a30      	cmp	r2, #48	; 0x30
 800a74e:	d0f9      	beq.n	800a744 <_strtod_l+0x29c>
 800a750:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a754:	2908      	cmp	r1, #8
 800a756:	f63f af7a 	bhi.w	800a64e <_strtod_l+0x1a6>
 800a75a:	3a30      	subs	r2, #48	; 0x30
 800a75c:	9208      	str	r2, [sp, #32]
 800a75e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a760:	920c      	str	r2, [sp, #48]	; 0x30
 800a762:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a764:	1c57      	adds	r7, r2, #1
 800a766:	9715      	str	r7, [sp, #84]	; 0x54
 800a768:	7852      	ldrb	r2, [r2, #1]
 800a76a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a76e:	f1be 0f09 	cmp.w	lr, #9
 800a772:	d938      	bls.n	800a7e6 <_strtod_l+0x33e>
 800a774:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a776:	1a7f      	subs	r7, r7, r1
 800a778:	2f08      	cmp	r7, #8
 800a77a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a77e:	dc03      	bgt.n	800a788 <_strtod_l+0x2e0>
 800a780:	9908      	ldr	r1, [sp, #32]
 800a782:	428f      	cmp	r7, r1
 800a784:	bfa8      	it	ge
 800a786:	460f      	movge	r7, r1
 800a788:	f1bc 0f00 	cmp.w	ip, #0
 800a78c:	d000      	beq.n	800a790 <_strtod_l+0x2e8>
 800a78e:	427f      	negs	r7, r7
 800a790:	2e00      	cmp	r6, #0
 800a792:	d14f      	bne.n	800a834 <_strtod_l+0x38c>
 800a794:	9904      	ldr	r1, [sp, #16]
 800a796:	4301      	orrs	r1, r0
 800a798:	f47f aec1 	bne.w	800a51e <_strtod_l+0x76>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f47f aedb 	bne.w	800a558 <_strtod_l+0xb0>
 800a7a2:	2a69      	cmp	r2, #105	; 0x69
 800a7a4:	d029      	beq.n	800a7fa <_strtod_l+0x352>
 800a7a6:	dc26      	bgt.n	800a7f6 <_strtod_l+0x34e>
 800a7a8:	2a49      	cmp	r2, #73	; 0x49
 800a7aa:	d026      	beq.n	800a7fa <_strtod_l+0x352>
 800a7ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a7ae:	f47f aed3 	bne.w	800a558 <_strtod_l+0xb0>
 800a7b2:	499b      	ldr	r1, [pc, #620]	; (800aa20 <_strtod_l+0x578>)
 800a7b4:	a815      	add	r0, sp, #84	; 0x54
 800a7b6:	f002 ff31 	bl	800d61c <__match>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	f43f aecc 	beq.w	800a558 <_strtod_l+0xb0>
 800a7c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b28      	cmp	r3, #40	; 0x28
 800a7c6:	d12f      	bne.n	800a828 <_strtod_l+0x380>
 800a7c8:	4996      	ldr	r1, [pc, #600]	; (800aa24 <_strtod_l+0x57c>)
 800a7ca:	aa18      	add	r2, sp, #96	; 0x60
 800a7cc:	a815      	add	r0, sp, #84	; 0x54
 800a7ce:	f002 ff39 	bl	800d644 <__hexnan>
 800a7d2:	2805      	cmp	r0, #5
 800a7d4:	d128      	bne.n	800a828 <_strtod_l+0x380>
 800a7d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a7dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a7e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a7e4:	e69b      	b.n	800a51e <_strtod_l+0x76>
 800a7e6:	9f08      	ldr	r7, [sp, #32]
 800a7e8:	210a      	movs	r1, #10
 800a7ea:	fb01 2107 	mla	r1, r1, r7, r2
 800a7ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a7f2:	9208      	str	r2, [sp, #32]
 800a7f4:	e7b5      	b.n	800a762 <_strtod_l+0x2ba>
 800a7f6:	2a6e      	cmp	r2, #110	; 0x6e
 800a7f8:	e7d9      	b.n	800a7ae <_strtod_l+0x306>
 800a7fa:	498b      	ldr	r1, [pc, #556]	; (800aa28 <_strtod_l+0x580>)
 800a7fc:	a815      	add	r0, sp, #84	; 0x54
 800a7fe:	f002 ff0d 	bl	800d61c <__match>
 800a802:	2800      	cmp	r0, #0
 800a804:	f43f aea8 	beq.w	800a558 <_strtod_l+0xb0>
 800a808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a80a:	4988      	ldr	r1, [pc, #544]	; (800aa2c <_strtod_l+0x584>)
 800a80c:	3b01      	subs	r3, #1
 800a80e:	a815      	add	r0, sp, #84	; 0x54
 800a810:	9315      	str	r3, [sp, #84]	; 0x54
 800a812:	f002 ff03 	bl	800d61c <__match>
 800a816:	b910      	cbnz	r0, 800a81e <_strtod_l+0x376>
 800a818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81a:	3301      	adds	r3, #1
 800a81c:	9315      	str	r3, [sp, #84]	; 0x54
 800a81e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800aa3c <_strtod_l+0x594>
 800a822:	f04f 0800 	mov.w	r8, #0
 800a826:	e67a      	b.n	800a51e <_strtod_l+0x76>
 800a828:	4881      	ldr	r0, [pc, #516]	; (800aa30 <_strtod_l+0x588>)
 800a82a:	f001 fd5d 	bl	800c2e8 <nan>
 800a82e:	ec59 8b10 	vmov	r8, r9, d0
 800a832:	e674      	b.n	800a51e <_strtod_l+0x76>
 800a834:	9b05      	ldr	r3, [sp, #20]
 800a836:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a838:	1afb      	subs	r3, r7, r3
 800a83a:	f1bb 0f00 	cmp.w	fp, #0
 800a83e:	bf08      	it	eq
 800a840:	46b3      	moveq	fp, r6
 800a842:	2e10      	cmp	r6, #16
 800a844:	9308      	str	r3, [sp, #32]
 800a846:	4635      	mov	r5, r6
 800a848:	bfa8      	it	ge
 800a84a:	2510      	movge	r5, #16
 800a84c:	f7f5 fe6a 	bl	8000524 <__aeabi_ui2d>
 800a850:	2e09      	cmp	r6, #9
 800a852:	4680      	mov	r8, r0
 800a854:	4689      	mov	r9, r1
 800a856:	dd13      	ble.n	800a880 <_strtod_l+0x3d8>
 800a858:	4b76      	ldr	r3, [pc, #472]	; (800aa34 <_strtod_l+0x58c>)
 800a85a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a85e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a862:	f7f5 fed9 	bl	8000618 <__aeabi_dmul>
 800a866:	4680      	mov	r8, r0
 800a868:	4650      	mov	r0, sl
 800a86a:	4689      	mov	r9, r1
 800a86c:	f7f5 fe5a 	bl	8000524 <__aeabi_ui2d>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4640      	mov	r0, r8
 800a876:	4649      	mov	r1, r9
 800a878:	f7f5 fd18 	bl	80002ac <__adddf3>
 800a87c:	4680      	mov	r8, r0
 800a87e:	4689      	mov	r9, r1
 800a880:	2e0f      	cmp	r6, #15
 800a882:	dc38      	bgt.n	800a8f6 <_strtod_l+0x44e>
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f43f ae49 	beq.w	800a51e <_strtod_l+0x76>
 800a88c:	dd24      	ble.n	800a8d8 <_strtod_l+0x430>
 800a88e:	2b16      	cmp	r3, #22
 800a890:	dc0b      	bgt.n	800a8aa <_strtod_l+0x402>
 800a892:	4968      	ldr	r1, [pc, #416]	; (800aa34 <_strtod_l+0x58c>)
 800a894:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a89c:	4642      	mov	r2, r8
 800a89e:	464b      	mov	r3, r9
 800a8a0:	f7f5 feba 	bl	8000618 <__aeabi_dmul>
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	e639      	b.n	800a51e <_strtod_l+0x76>
 800a8aa:	9a08      	ldr	r2, [sp, #32]
 800a8ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	db20      	blt.n	800a8f6 <_strtod_l+0x44e>
 800a8b4:	4c5f      	ldr	r4, [pc, #380]	; (800aa34 <_strtod_l+0x58c>)
 800a8b6:	f1c6 060f 	rsb	r6, r6, #15
 800a8ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a8be:	4642      	mov	r2, r8
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c6:	f7f5 fea7 	bl	8000618 <__aeabi_dmul>
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	1b9e      	subs	r6, r3, r6
 800a8ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a8d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8d6:	e7e3      	b.n	800a8a0 <_strtod_l+0x3f8>
 800a8d8:	9b08      	ldr	r3, [sp, #32]
 800a8da:	3316      	adds	r3, #22
 800a8dc:	db0b      	blt.n	800a8f6 <_strtod_l+0x44e>
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	1bdf      	subs	r7, r3, r7
 800a8e2:	4b54      	ldr	r3, [pc, #336]	; (800aa34 <_strtod_l+0x58c>)
 800a8e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	f7f5 ffbc 	bl	800086c <__aeabi_ddiv>
 800a8f4:	e7d6      	b.n	800a8a4 <_strtod_l+0x3fc>
 800a8f6:	9b08      	ldr	r3, [sp, #32]
 800a8f8:	1b75      	subs	r5, r6, r5
 800a8fa:	441d      	add	r5, r3
 800a8fc:	2d00      	cmp	r5, #0
 800a8fe:	dd70      	ble.n	800a9e2 <_strtod_l+0x53a>
 800a900:	f015 030f 	ands.w	r3, r5, #15
 800a904:	d00a      	beq.n	800a91c <_strtod_l+0x474>
 800a906:	494b      	ldr	r1, [pc, #300]	; (800aa34 <_strtod_l+0x58c>)
 800a908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a914:	f7f5 fe80 	bl	8000618 <__aeabi_dmul>
 800a918:	4680      	mov	r8, r0
 800a91a:	4689      	mov	r9, r1
 800a91c:	f035 050f 	bics.w	r5, r5, #15
 800a920:	d04d      	beq.n	800a9be <_strtod_l+0x516>
 800a922:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a926:	dd22      	ble.n	800a96e <_strtod_l+0x4c6>
 800a928:	2500      	movs	r5, #0
 800a92a:	46ab      	mov	fp, r5
 800a92c:	9509      	str	r5, [sp, #36]	; 0x24
 800a92e:	9505      	str	r5, [sp, #20]
 800a930:	2322      	movs	r3, #34	; 0x22
 800a932:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aa3c <_strtod_l+0x594>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	f04f 0800 	mov.w	r8, #0
 800a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f43f aded 	beq.w	800a51e <_strtod_l+0x76>
 800a944:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a946:	4620      	mov	r0, r4
 800a948:	f003 f81e 	bl	800d988 <_Bfree>
 800a94c:	9905      	ldr	r1, [sp, #20]
 800a94e:	4620      	mov	r0, r4
 800a950:	f003 f81a 	bl	800d988 <_Bfree>
 800a954:	4659      	mov	r1, fp
 800a956:	4620      	mov	r0, r4
 800a958:	f003 f816 	bl	800d988 <_Bfree>
 800a95c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a95e:	4620      	mov	r0, r4
 800a960:	f003 f812 	bl	800d988 <_Bfree>
 800a964:	4629      	mov	r1, r5
 800a966:	4620      	mov	r0, r4
 800a968:	f003 f80e 	bl	800d988 <_Bfree>
 800a96c:	e5d7      	b.n	800a51e <_strtod_l+0x76>
 800a96e:	4b32      	ldr	r3, [pc, #200]	; (800aa38 <_strtod_l+0x590>)
 800a970:	9304      	str	r3, [sp, #16]
 800a972:	2300      	movs	r3, #0
 800a974:	112d      	asrs	r5, r5, #4
 800a976:	4640      	mov	r0, r8
 800a978:	4649      	mov	r1, r9
 800a97a:	469a      	mov	sl, r3
 800a97c:	2d01      	cmp	r5, #1
 800a97e:	dc21      	bgt.n	800a9c4 <_strtod_l+0x51c>
 800a980:	b10b      	cbz	r3, 800a986 <_strtod_l+0x4de>
 800a982:	4680      	mov	r8, r0
 800a984:	4689      	mov	r9, r1
 800a986:	492c      	ldr	r1, [pc, #176]	; (800aa38 <_strtod_l+0x590>)
 800a988:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a98c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a990:	4642      	mov	r2, r8
 800a992:	464b      	mov	r3, r9
 800a994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a998:	f7f5 fe3e 	bl	8000618 <__aeabi_dmul>
 800a99c:	4b27      	ldr	r3, [pc, #156]	; (800aa3c <_strtod_l+0x594>)
 800a99e:	460a      	mov	r2, r1
 800a9a0:	400b      	ands	r3, r1
 800a9a2:	4927      	ldr	r1, [pc, #156]	; (800aa40 <_strtod_l+0x598>)
 800a9a4:	428b      	cmp	r3, r1
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	d8be      	bhi.n	800a928 <_strtod_l+0x480>
 800a9aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9ae:	428b      	cmp	r3, r1
 800a9b0:	bf86      	itte	hi
 800a9b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800aa44 <_strtod_l+0x59c>
 800a9b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a9ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	e07b      	b.n	800aabc <_strtod_l+0x614>
 800a9c4:	07ea      	lsls	r2, r5, #31
 800a9c6:	d505      	bpl.n	800a9d4 <_strtod_l+0x52c>
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe23 	bl	8000618 <__aeabi_dmul>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	9a04      	ldr	r2, [sp, #16]
 800a9d6:	3208      	adds	r2, #8
 800a9d8:	f10a 0a01 	add.w	sl, sl, #1
 800a9dc:	106d      	asrs	r5, r5, #1
 800a9de:	9204      	str	r2, [sp, #16]
 800a9e0:	e7cc      	b.n	800a97c <_strtod_l+0x4d4>
 800a9e2:	d0ec      	beq.n	800a9be <_strtod_l+0x516>
 800a9e4:	426d      	negs	r5, r5
 800a9e6:	f015 020f 	ands.w	r2, r5, #15
 800a9ea:	d00a      	beq.n	800aa02 <_strtod_l+0x55a>
 800a9ec:	4b11      	ldr	r3, [pc, #68]	; (800aa34 <_strtod_l+0x58c>)
 800a9ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 ff37 	bl	800086c <__aeabi_ddiv>
 800a9fe:	4680      	mov	r8, r0
 800aa00:	4689      	mov	r9, r1
 800aa02:	112d      	asrs	r5, r5, #4
 800aa04:	d0db      	beq.n	800a9be <_strtod_l+0x516>
 800aa06:	2d1f      	cmp	r5, #31
 800aa08:	dd1e      	ble.n	800aa48 <_strtod_l+0x5a0>
 800aa0a:	2500      	movs	r5, #0
 800aa0c:	46ab      	mov	fp, r5
 800aa0e:	9509      	str	r5, [sp, #36]	; 0x24
 800aa10:	9505      	str	r5, [sp, #20]
 800aa12:	2322      	movs	r3, #34	; 0x22
 800aa14:	f04f 0800 	mov.w	r8, #0
 800aa18:	f04f 0900 	mov.w	r9, #0
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	e78d      	b.n	800a93c <_strtod_l+0x494>
 800aa20:	080124fa 	.word	0x080124fa
 800aa24:	0801248c 	.word	0x0801248c
 800aa28:	080124f2 	.word	0x080124f2
 800aa2c:	080125dc 	.word	0x080125dc
 800aa30:	080125d8 	.word	0x080125d8
 800aa34:	08012730 	.word	0x08012730
 800aa38:	08012708 	.word	0x08012708
 800aa3c:	7ff00000 	.word	0x7ff00000
 800aa40:	7ca00000 	.word	0x7ca00000
 800aa44:	7fefffff 	.word	0x7fefffff
 800aa48:	f015 0310 	ands.w	r3, r5, #16
 800aa4c:	bf18      	it	ne
 800aa4e:	236a      	movne	r3, #106	; 0x6a
 800aa50:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800adf4 <_strtod_l+0x94c>
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	4640      	mov	r0, r8
 800aa58:	4649      	mov	r1, r9
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	07ea      	lsls	r2, r5, #31
 800aa5e:	d504      	bpl.n	800aa6a <_strtod_l+0x5c2>
 800aa60:	e9da 2300 	ldrd	r2, r3, [sl]
 800aa64:	f7f5 fdd8 	bl	8000618 <__aeabi_dmul>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	106d      	asrs	r5, r5, #1
 800aa6c:	f10a 0a08 	add.w	sl, sl, #8
 800aa70:	d1f4      	bne.n	800aa5c <_strtod_l+0x5b4>
 800aa72:	b10b      	cbz	r3, 800aa78 <_strtod_l+0x5d0>
 800aa74:	4680      	mov	r8, r0
 800aa76:	4689      	mov	r9, r1
 800aa78:	9b04      	ldr	r3, [sp, #16]
 800aa7a:	b1bb      	cbz	r3, 800aaac <_strtod_l+0x604>
 800aa7c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800aa80:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	4649      	mov	r1, r9
 800aa88:	dd10      	ble.n	800aaac <_strtod_l+0x604>
 800aa8a:	2b1f      	cmp	r3, #31
 800aa8c:	f340 811e 	ble.w	800accc <_strtod_l+0x824>
 800aa90:	2b34      	cmp	r3, #52	; 0x34
 800aa92:	bfde      	ittt	le
 800aa94:	f04f 33ff 	movle.w	r3, #4294967295
 800aa98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aa9c:	4093      	lslle	r3, r2
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	bfcc      	ite	gt
 800aaa4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aaa8:	ea03 0901 	andle.w	r9, r3, r1
 800aaac:	2200      	movs	r2, #0
 800aaae:	2300      	movs	r3, #0
 800aab0:	4640      	mov	r0, r8
 800aab2:	4649      	mov	r1, r9
 800aab4:	f7f6 f818 	bl	8000ae8 <__aeabi_dcmpeq>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1a6      	bne.n	800aa0a <_strtod_l+0x562>
 800aabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aac2:	4633      	mov	r3, r6
 800aac4:	465a      	mov	r2, fp
 800aac6:	4620      	mov	r0, r4
 800aac8:	f002 ffc6 	bl	800da58 <__s2b>
 800aacc:	9009      	str	r0, [sp, #36]	; 0x24
 800aace:	2800      	cmp	r0, #0
 800aad0:	f43f af2a 	beq.w	800a928 <_strtod_l+0x480>
 800aad4:	9a08      	ldr	r2, [sp, #32]
 800aad6:	9b05      	ldr	r3, [sp, #20]
 800aad8:	2a00      	cmp	r2, #0
 800aada:	eba3 0307 	sub.w	r3, r3, r7
 800aade:	bfa8      	it	ge
 800aae0:	2300      	movge	r3, #0
 800aae2:	930c      	str	r3, [sp, #48]	; 0x30
 800aae4:	2500      	movs	r5, #0
 800aae6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aaea:	9312      	str	r3, [sp, #72]	; 0x48
 800aaec:	46ab      	mov	fp, r5
 800aaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	6859      	ldr	r1, [r3, #4]
 800aaf4:	f002 ff08 	bl	800d908 <_Balloc>
 800aaf8:	9005      	str	r0, [sp, #20]
 800aafa:	2800      	cmp	r0, #0
 800aafc:	f43f af18 	beq.w	800a930 <_strtod_l+0x488>
 800ab00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	3202      	adds	r2, #2
 800ab06:	f103 010c 	add.w	r1, r3, #12
 800ab0a:	0092      	lsls	r2, r2, #2
 800ab0c:	300c      	adds	r0, #12
 800ab0e:	f001 fbdb 	bl	800c2c8 <memcpy>
 800ab12:	ec49 8b10 	vmov	d0, r8, r9
 800ab16:	aa18      	add	r2, sp, #96	; 0x60
 800ab18:	a917      	add	r1, sp, #92	; 0x5c
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f003 fad0 	bl	800e0c0 <__d2b>
 800ab20:	ec49 8b18 	vmov	d8, r8, r9
 800ab24:	9016      	str	r0, [sp, #88]	; 0x58
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f43f af02 	beq.w	800a930 <_strtod_l+0x488>
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f003 f82a 	bl	800db88 <__i2b>
 800ab34:	4683      	mov	fp, r0
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f43f aefa 	beq.w	800a930 <_strtod_l+0x488>
 800ab3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	bfab      	itete	ge
 800ab44:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ab46:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ab48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ab4a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ab4e:	bfac      	ite	ge
 800ab50:	eb06 0a03 	addge.w	sl, r6, r3
 800ab54:	1b9f      	sublt	r7, r3, r6
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	1af6      	subs	r6, r6, r3
 800ab5a:	4416      	add	r6, r2
 800ab5c:	4ba0      	ldr	r3, [pc, #640]	; (800ade0 <_strtod_l+0x938>)
 800ab5e:	3e01      	subs	r6, #1
 800ab60:	429e      	cmp	r6, r3
 800ab62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab66:	f280 80c4 	bge.w	800acf2 <_strtod_l+0x84a>
 800ab6a:	1b9b      	subs	r3, r3, r6
 800ab6c:	2b1f      	cmp	r3, #31
 800ab6e:	eba2 0203 	sub.w	r2, r2, r3
 800ab72:	f04f 0101 	mov.w	r1, #1
 800ab76:	f300 80b0 	bgt.w	800acda <_strtod_l+0x832>
 800ab7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7e:	930e      	str	r3, [sp, #56]	; 0x38
 800ab80:	2300      	movs	r3, #0
 800ab82:	930d      	str	r3, [sp, #52]	; 0x34
 800ab84:	eb0a 0602 	add.w	r6, sl, r2
 800ab88:	9b04      	ldr	r3, [sp, #16]
 800ab8a:	45b2      	cmp	sl, r6
 800ab8c:	4417      	add	r7, r2
 800ab8e:	441f      	add	r7, r3
 800ab90:	4653      	mov	r3, sl
 800ab92:	bfa8      	it	ge
 800ab94:	4633      	movge	r3, r6
 800ab96:	42bb      	cmp	r3, r7
 800ab98:	bfa8      	it	ge
 800ab9a:	463b      	movge	r3, r7
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bfc2      	ittt	gt
 800aba0:	1af6      	subgt	r6, r6, r3
 800aba2:	1aff      	subgt	r7, r7, r3
 800aba4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800aba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dd17      	ble.n	800abde <_strtod_l+0x736>
 800abae:	4659      	mov	r1, fp
 800abb0:	461a      	mov	r2, r3
 800abb2:	4620      	mov	r0, r4
 800abb4:	f003 f8a8 	bl	800dd08 <__pow5mult>
 800abb8:	4683      	mov	fp, r0
 800abba:	2800      	cmp	r0, #0
 800abbc:	f43f aeb8 	beq.w	800a930 <_strtod_l+0x488>
 800abc0:	4601      	mov	r1, r0
 800abc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800abc4:	4620      	mov	r0, r4
 800abc6:	f002 fff5 	bl	800dbb4 <__multiply>
 800abca:	900b      	str	r0, [sp, #44]	; 0x2c
 800abcc:	2800      	cmp	r0, #0
 800abce:	f43f aeaf 	beq.w	800a930 <_strtod_l+0x488>
 800abd2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800abd4:	4620      	mov	r0, r4
 800abd6:	f002 fed7 	bl	800d988 <_Bfree>
 800abda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abdc:	9316      	str	r3, [sp, #88]	; 0x58
 800abde:	2e00      	cmp	r6, #0
 800abe0:	f300 808c 	bgt.w	800acfc <_strtod_l+0x854>
 800abe4:	9b08      	ldr	r3, [sp, #32]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dd08      	ble.n	800abfc <_strtod_l+0x754>
 800abea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abec:	9905      	ldr	r1, [sp, #20]
 800abee:	4620      	mov	r0, r4
 800abf0:	f003 f88a 	bl	800dd08 <__pow5mult>
 800abf4:	9005      	str	r0, [sp, #20]
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f43f ae9a 	beq.w	800a930 <_strtod_l+0x488>
 800abfc:	2f00      	cmp	r7, #0
 800abfe:	dd08      	ble.n	800ac12 <_strtod_l+0x76a>
 800ac00:	9905      	ldr	r1, [sp, #20]
 800ac02:	463a      	mov	r2, r7
 800ac04:	4620      	mov	r0, r4
 800ac06:	f003 f8d9 	bl	800ddbc <__lshift>
 800ac0a:	9005      	str	r0, [sp, #20]
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	f43f ae8f 	beq.w	800a930 <_strtod_l+0x488>
 800ac12:	f1ba 0f00 	cmp.w	sl, #0
 800ac16:	dd08      	ble.n	800ac2a <_strtod_l+0x782>
 800ac18:	4659      	mov	r1, fp
 800ac1a:	4652      	mov	r2, sl
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f003 f8cd 	bl	800ddbc <__lshift>
 800ac22:	4683      	mov	fp, r0
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f43f ae83 	beq.w	800a930 <_strtod_l+0x488>
 800ac2a:	9a05      	ldr	r2, [sp, #20]
 800ac2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f003 f94c 	bl	800decc <__mdiff>
 800ac34:	4605      	mov	r5, r0
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f43f ae7a 	beq.w	800a930 <_strtod_l+0x488>
 800ac3c:	68c3      	ldr	r3, [r0, #12]
 800ac3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac40:	2300      	movs	r3, #0
 800ac42:	60c3      	str	r3, [r0, #12]
 800ac44:	4659      	mov	r1, fp
 800ac46:	f003 f925 	bl	800de94 <__mcmp>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	da60      	bge.n	800ad10 <_strtod_l+0x868>
 800ac4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac50:	ea53 0308 	orrs.w	r3, r3, r8
 800ac54:	f040 8084 	bne.w	800ad60 <_strtod_l+0x8b8>
 800ac58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d17f      	bne.n	800ad60 <_strtod_l+0x8b8>
 800ac60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac64:	0d1b      	lsrs	r3, r3, #20
 800ac66:	051b      	lsls	r3, r3, #20
 800ac68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac6c:	d978      	bls.n	800ad60 <_strtod_l+0x8b8>
 800ac6e:	696b      	ldr	r3, [r5, #20]
 800ac70:	b913      	cbnz	r3, 800ac78 <_strtod_l+0x7d0>
 800ac72:	692b      	ldr	r3, [r5, #16]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	dd73      	ble.n	800ad60 <_strtod_l+0x8b8>
 800ac78:	4629      	mov	r1, r5
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f003 f89d 	bl	800ddbc <__lshift>
 800ac82:	4659      	mov	r1, fp
 800ac84:	4605      	mov	r5, r0
 800ac86:	f003 f905 	bl	800de94 <__mcmp>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	dd68      	ble.n	800ad60 <_strtod_l+0x8b8>
 800ac8e:	9904      	ldr	r1, [sp, #16]
 800ac90:	4a54      	ldr	r2, [pc, #336]	; (800ade4 <_strtod_l+0x93c>)
 800ac92:	464b      	mov	r3, r9
 800ac94:	2900      	cmp	r1, #0
 800ac96:	f000 8084 	beq.w	800ada2 <_strtod_l+0x8fa>
 800ac9a:	ea02 0109 	and.w	r1, r2, r9
 800ac9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aca2:	dc7e      	bgt.n	800ada2 <_strtod_l+0x8fa>
 800aca4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aca8:	f77f aeb3 	ble.w	800aa12 <_strtod_l+0x56a>
 800acac:	4b4e      	ldr	r3, [pc, #312]	; (800ade8 <_strtod_l+0x940>)
 800acae:	4640      	mov	r0, r8
 800acb0:	4649      	mov	r1, r9
 800acb2:	2200      	movs	r2, #0
 800acb4:	f7f5 fcb0 	bl	8000618 <__aeabi_dmul>
 800acb8:	4b4a      	ldr	r3, [pc, #296]	; (800ade4 <_strtod_l+0x93c>)
 800acba:	400b      	ands	r3, r1
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f47f ae3f 	bne.w	800a944 <_strtod_l+0x49c>
 800acc6:	2322      	movs	r3, #34	; 0x22
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	e63b      	b.n	800a944 <_strtod_l+0x49c>
 800accc:	f04f 32ff 	mov.w	r2, #4294967295
 800acd0:	fa02 f303 	lsl.w	r3, r2, r3
 800acd4:	ea03 0808 	and.w	r8, r3, r8
 800acd8:	e6e8      	b.n	800aaac <_strtod_l+0x604>
 800acda:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800acde:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ace2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ace6:	36e2      	adds	r6, #226	; 0xe2
 800ace8:	fa01 f306 	lsl.w	r3, r1, r6
 800acec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800acf0:	e748      	b.n	800ab84 <_strtod_l+0x6dc>
 800acf2:	2100      	movs	r1, #0
 800acf4:	2301      	movs	r3, #1
 800acf6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800acfa:	e743      	b.n	800ab84 <_strtod_l+0x6dc>
 800acfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acfe:	4632      	mov	r2, r6
 800ad00:	4620      	mov	r0, r4
 800ad02:	f003 f85b 	bl	800ddbc <__lshift>
 800ad06:	9016      	str	r0, [sp, #88]	; 0x58
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f47f af6b 	bne.w	800abe4 <_strtod_l+0x73c>
 800ad0e:	e60f      	b.n	800a930 <_strtod_l+0x488>
 800ad10:	46ca      	mov	sl, r9
 800ad12:	d171      	bne.n	800adf8 <_strtod_l+0x950>
 800ad14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad1a:	b352      	cbz	r2, 800ad72 <_strtod_l+0x8ca>
 800ad1c:	4a33      	ldr	r2, [pc, #204]	; (800adec <_strtod_l+0x944>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d12a      	bne.n	800ad78 <_strtod_l+0x8d0>
 800ad22:	9b04      	ldr	r3, [sp, #16]
 800ad24:	4641      	mov	r1, r8
 800ad26:	b1fb      	cbz	r3, 800ad68 <_strtod_l+0x8c0>
 800ad28:	4b2e      	ldr	r3, [pc, #184]	; (800ade4 <_strtod_l+0x93c>)
 800ad2a:	ea09 0303 	and.w	r3, r9, r3
 800ad2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad32:	f04f 32ff 	mov.w	r2, #4294967295
 800ad36:	d81a      	bhi.n	800ad6e <_strtod_l+0x8c6>
 800ad38:	0d1b      	lsrs	r3, r3, #20
 800ad3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad42:	4299      	cmp	r1, r3
 800ad44:	d118      	bne.n	800ad78 <_strtod_l+0x8d0>
 800ad46:	4b2a      	ldr	r3, [pc, #168]	; (800adf0 <_strtod_l+0x948>)
 800ad48:	459a      	cmp	sl, r3
 800ad4a:	d102      	bne.n	800ad52 <_strtod_l+0x8aa>
 800ad4c:	3101      	adds	r1, #1
 800ad4e:	f43f adef 	beq.w	800a930 <_strtod_l+0x488>
 800ad52:	4b24      	ldr	r3, [pc, #144]	; (800ade4 <_strtod_l+0x93c>)
 800ad54:	ea0a 0303 	and.w	r3, sl, r3
 800ad58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ad5c:	f04f 0800 	mov.w	r8, #0
 800ad60:	9b04      	ldr	r3, [sp, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1a2      	bne.n	800acac <_strtod_l+0x804>
 800ad66:	e5ed      	b.n	800a944 <_strtod_l+0x49c>
 800ad68:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6c:	e7e9      	b.n	800ad42 <_strtod_l+0x89a>
 800ad6e:	4613      	mov	r3, r2
 800ad70:	e7e7      	b.n	800ad42 <_strtod_l+0x89a>
 800ad72:	ea53 0308 	orrs.w	r3, r3, r8
 800ad76:	d08a      	beq.n	800ac8e <_strtod_l+0x7e6>
 800ad78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7a:	b1e3      	cbz	r3, 800adb6 <_strtod_l+0x90e>
 800ad7c:	ea13 0f0a 	tst.w	r3, sl
 800ad80:	d0ee      	beq.n	800ad60 <_strtod_l+0x8b8>
 800ad82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	4640      	mov	r0, r8
 800ad88:	4649      	mov	r1, r9
 800ad8a:	b1c3      	cbz	r3, 800adbe <_strtod_l+0x916>
 800ad8c:	f7ff fb6e 	bl	800a46c <sulp>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	ec51 0b18 	vmov	r0, r1, d8
 800ad98:	f7f5 fa88 	bl	80002ac <__adddf3>
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4689      	mov	r9, r1
 800ada0:	e7de      	b.n	800ad60 <_strtod_l+0x8b8>
 800ada2:	4013      	ands	r3, r2
 800ada4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ada8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800adac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800adb0:	f04f 38ff 	mov.w	r8, #4294967295
 800adb4:	e7d4      	b.n	800ad60 <_strtod_l+0x8b8>
 800adb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adb8:	ea13 0f08 	tst.w	r3, r8
 800adbc:	e7e0      	b.n	800ad80 <_strtod_l+0x8d8>
 800adbe:	f7ff fb55 	bl	800a46c <sulp>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	ec51 0b18 	vmov	r0, r1, d8
 800adca:	f7f5 fa6d 	bl	80002a8 <__aeabi_dsub>
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
 800add2:	4680      	mov	r8, r0
 800add4:	4689      	mov	r9, r1
 800add6:	f7f5 fe87 	bl	8000ae8 <__aeabi_dcmpeq>
 800adda:	2800      	cmp	r0, #0
 800addc:	d0c0      	beq.n	800ad60 <_strtod_l+0x8b8>
 800adde:	e618      	b.n	800aa12 <_strtod_l+0x56a>
 800ade0:	fffffc02 	.word	0xfffffc02
 800ade4:	7ff00000 	.word	0x7ff00000
 800ade8:	39500000 	.word	0x39500000
 800adec:	000fffff 	.word	0x000fffff
 800adf0:	7fefffff 	.word	0x7fefffff
 800adf4:	080124a0 	.word	0x080124a0
 800adf8:	4659      	mov	r1, fp
 800adfa:	4628      	mov	r0, r5
 800adfc:	f003 f9ba 	bl	800e174 <__ratio>
 800ae00:	ec57 6b10 	vmov	r6, r7, d0
 800ae04:	ee10 0a10 	vmov	r0, s0
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae0e:	4639      	mov	r1, r7
 800ae10:	f7f5 fe7e 	bl	8000b10 <__aeabi_dcmple>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d071      	beq.n	800aefc <_strtod_l+0xa54>
 800ae18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d17c      	bne.n	800af18 <_strtod_l+0xa70>
 800ae1e:	f1b8 0f00 	cmp.w	r8, #0
 800ae22:	d15a      	bne.n	800aeda <_strtod_l+0xa32>
 800ae24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d15d      	bne.n	800aee8 <_strtod_l+0xa40>
 800ae2c:	4b90      	ldr	r3, [pc, #576]	; (800b070 <_strtod_l+0xbc8>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fe62 	bl	8000afc <__aeabi_dcmplt>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d15c      	bne.n	800aef6 <_strtod_l+0xa4e>
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	4639      	mov	r1, r7
 800ae40:	4b8c      	ldr	r3, [pc, #560]	; (800b074 <_strtod_l+0xbcc>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	f7f5 fbe8 	bl	8000618 <__aeabi_dmul>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	460f      	mov	r7, r1
 800ae4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ae50:	9606      	str	r6, [sp, #24]
 800ae52:	9307      	str	r3, [sp, #28]
 800ae54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae5c:	4b86      	ldr	r3, [pc, #536]	; (800b078 <_strtod_l+0xbd0>)
 800ae5e:	ea0a 0303 	and.w	r3, sl, r3
 800ae62:	930d      	str	r3, [sp, #52]	; 0x34
 800ae64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae66:	4b85      	ldr	r3, [pc, #532]	; (800b07c <_strtod_l+0xbd4>)
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	f040 8090 	bne.w	800af8e <_strtod_l+0xae6>
 800ae6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ae72:	ec49 8b10 	vmov	d0, r8, r9
 800ae76:	f003 f8b3 	bl	800dfe0 <__ulp>
 800ae7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae7e:	ec51 0b10 	vmov	r0, r1, d0
 800ae82:	f7f5 fbc9 	bl	8000618 <__aeabi_dmul>
 800ae86:	4642      	mov	r2, r8
 800ae88:	464b      	mov	r3, r9
 800ae8a:	f7f5 fa0f 	bl	80002ac <__adddf3>
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4979      	ldr	r1, [pc, #484]	; (800b078 <_strtod_l+0xbd0>)
 800ae92:	4a7b      	ldr	r2, [pc, #492]	; (800b080 <_strtod_l+0xbd8>)
 800ae94:	4019      	ands	r1, r3
 800ae96:	4291      	cmp	r1, r2
 800ae98:	4680      	mov	r8, r0
 800ae9a:	d944      	bls.n	800af26 <_strtod_l+0xa7e>
 800ae9c:	ee18 2a90 	vmov	r2, s17
 800aea0:	4b78      	ldr	r3, [pc, #480]	; (800b084 <_strtod_l+0xbdc>)
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d104      	bne.n	800aeb0 <_strtod_l+0xa08>
 800aea6:	ee18 3a10 	vmov	r3, s16
 800aeaa:	3301      	adds	r3, #1
 800aeac:	f43f ad40 	beq.w	800a930 <_strtod_l+0x488>
 800aeb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b084 <_strtod_l+0xbdc>
 800aeb4:	f04f 38ff 	mov.w	r8, #4294967295
 800aeb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aeba:	4620      	mov	r0, r4
 800aebc:	f002 fd64 	bl	800d988 <_Bfree>
 800aec0:	9905      	ldr	r1, [sp, #20]
 800aec2:	4620      	mov	r0, r4
 800aec4:	f002 fd60 	bl	800d988 <_Bfree>
 800aec8:	4659      	mov	r1, fp
 800aeca:	4620      	mov	r0, r4
 800aecc:	f002 fd5c 	bl	800d988 <_Bfree>
 800aed0:	4629      	mov	r1, r5
 800aed2:	4620      	mov	r0, r4
 800aed4:	f002 fd58 	bl	800d988 <_Bfree>
 800aed8:	e609      	b.n	800aaee <_strtod_l+0x646>
 800aeda:	f1b8 0f01 	cmp.w	r8, #1
 800aede:	d103      	bne.n	800aee8 <_strtod_l+0xa40>
 800aee0:	f1b9 0f00 	cmp.w	r9, #0
 800aee4:	f43f ad95 	beq.w	800aa12 <_strtod_l+0x56a>
 800aee8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b040 <_strtod_l+0xb98>
 800aeec:	4f60      	ldr	r7, [pc, #384]	; (800b070 <_strtod_l+0xbc8>)
 800aeee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aef2:	2600      	movs	r6, #0
 800aef4:	e7ae      	b.n	800ae54 <_strtod_l+0x9ac>
 800aef6:	4f5f      	ldr	r7, [pc, #380]	; (800b074 <_strtod_l+0xbcc>)
 800aef8:	2600      	movs	r6, #0
 800aefa:	e7a7      	b.n	800ae4c <_strtod_l+0x9a4>
 800aefc:	4b5d      	ldr	r3, [pc, #372]	; (800b074 <_strtod_l+0xbcc>)
 800aefe:	4630      	mov	r0, r6
 800af00:	4639      	mov	r1, r7
 800af02:	2200      	movs	r2, #0
 800af04:	f7f5 fb88 	bl	8000618 <__aeabi_dmul>
 800af08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d09c      	beq.n	800ae4c <_strtod_l+0x9a4>
 800af12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af16:	e79d      	b.n	800ae54 <_strtod_l+0x9ac>
 800af18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b048 <_strtod_l+0xba0>
 800af1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af20:	ec57 6b17 	vmov	r6, r7, d7
 800af24:	e796      	b.n	800ae54 <_strtod_l+0x9ac>
 800af26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	46ca      	mov	sl, r9
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1c2      	bne.n	800aeb8 <_strtod_l+0xa10>
 800af32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af38:	0d1b      	lsrs	r3, r3, #20
 800af3a:	051b      	lsls	r3, r3, #20
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d1bb      	bne.n	800aeb8 <_strtod_l+0xa10>
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 fec8 	bl	8000cd8 <__aeabi_d2lz>
 800af48:	f7f5 fb38 	bl	80005bc <__aeabi_l2d>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4630      	mov	r0, r6
 800af52:	4639      	mov	r1, r7
 800af54:	f7f5 f9a8 	bl	80002a8 <__aeabi_dsub>
 800af58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af5e:	ea43 0308 	orr.w	r3, r3, r8
 800af62:	4313      	orrs	r3, r2
 800af64:	4606      	mov	r6, r0
 800af66:	460f      	mov	r7, r1
 800af68:	d054      	beq.n	800b014 <_strtod_l+0xb6c>
 800af6a:	a339      	add	r3, pc, #228	; (adr r3, 800b050 <_strtod_l+0xba8>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 fdc4 	bl	8000afc <__aeabi_dcmplt>
 800af74:	2800      	cmp	r0, #0
 800af76:	f47f ace5 	bne.w	800a944 <_strtod_l+0x49c>
 800af7a:	a337      	add	r3, pc, #220	; (adr r3, 800b058 <_strtod_l+0xbb0>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 fdd8 	bl	8000b38 <__aeabi_dcmpgt>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d095      	beq.n	800aeb8 <_strtod_l+0xa10>
 800af8c:	e4da      	b.n	800a944 <_strtod_l+0x49c>
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	b333      	cbz	r3, 800afe0 <_strtod_l+0xb38>
 800af92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af98:	d822      	bhi.n	800afe0 <_strtod_l+0xb38>
 800af9a:	a331      	add	r3, pc, #196	; (adr r3, 800b060 <_strtod_l+0xbb8>)
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fdb4 	bl	8000b10 <__aeabi_dcmple>
 800afa8:	b1a0      	cbz	r0, 800afd4 <_strtod_l+0xb2c>
 800afaa:	4639      	mov	r1, r7
 800afac:	4630      	mov	r0, r6
 800afae:	f7f5 fe0b 	bl	8000bc8 <__aeabi_d2uiz>
 800afb2:	2801      	cmp	r0, #1
 800afb4:	bf38      	it	cc
 800afb6:	2001      	movcc	r0, #1
 800afb8:	f7f5 fab4 	bl	8000524 <__aeabi_ui2d>
 800afbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afbe:	4606      	mov	r6, r0
 800afc0:	460f      	mov	r7, r1
 800afc2:	bb23      	cbnz	r3, 800b00e <_strtod_l+0xb66>
 800afc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afc8:	9010      	str	r0, [sp, #64]	; 0x40
 800afca:	9311      	str	r3, [sp, #68]	; 0x44
 800afcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800afd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800afdc:	1a9b      	subs	r3, r3, r2
 800afde:	930f      	str	r3, [sp, #60]	; 0x3c
 800afe0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800afe4:	eeb0 0a48 	vmov.f32	s0, s16
 800afe8:	eef0 0a68 	vmov.f32	s1, s17
 800afec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aff0:	f002 fff6 	bl	800dfe0 <__ulp>
 800aff4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aff8:	ec53 2b10 	vmov	r2, r3, d0
 800affc:	f7f5 fb0c 	bl	8000618 <__aeabi_dmul>
 800b000:	ec53 2b18 	vmov	r2, r3, d8
 800b004:	f7f5 f952 	bl	80002ac <__adddf3>
 800b008:	4680      	mov	r8, r0
 800b00a:	4689      	mov	r9, r1
 800b00c:	e78d      	b.n	800af2a <_strtod_l+0xa82>
 800b00e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b012:	e7db      	b.n	800afcc <_strtod_l+0xb24>
 800b014:	a314      	add	r3, pc, #80	; (adr r3, 800b068 <_strtod_l+0xbc0>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 fd6f 	bl	8000afc <__aeabi_dcmplt>
 800b01e:	e7b3      	b.n	800af88 <_strtod_l+0xae0>
 800b020:	2300      	movs	r3, #0
 800b022:	930a      	str	r3, [sp, #40]	; 0x28
 800b024:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	f7ff ba7c 	b.w	800a526 <_strtod_l+0x7e>
 800b02e:	2a65      	cmp	r2, #101	; 0x65
 800b030:	f43f ab75 	beq.w	800a71e <_strtod_l+0x276>
 800b034:	2a45      	cmp	r2, #69	; 0x45
 800b036:	f43f ab72 	beq.w	800a71e <_strtod_l+0x276>
 800b03a:	2301      	movs	r3, #1
 800b03c:	f7ff bbaa 	b.w	800a794 <_strtod_l+0x2ec>
 800b040:	00000000 	.word	0x00000000
 800b044:	bff00000 	.word	0xbff00000
 800b048:	00000000 	.word	0x00000000
 800b04c:	3ff00000 	.word	0x3ff00000
 800b050:	94a03595 	.word	0x94a03595
 800b054:	3fdfffff 	.word	0x3fdfffff
 800b058:	35afe535 	.word	0x35afe535
 800b05c:	3fe00000 	.word	0x3fe00000
 800b060:	ffc00000 	.word	0xffc00000
 800b064:	41dfffff 	.word	0x41dfffff
 800b068:	94a03595 	.word	0x94a03595
 800b06c:	3fcfffff 	.word	0x3fcfffff
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	3fe00000 	.word	0x3fe00000
 800b078:	7ff00000 	.word	0x7ff00000
 800b07c:	7fe00000 	.word	0x7fe00000
 800b080:	7c9fffff 	.word	0x7c9fffff
 800b084:	7fefffff 	.word	0x7fefffff

0800b088 <_strtod_r>:
 800b088:	4b01      	ldr	r3, [pc, #4]	; (800b090 <_strtod_r+0x8>)
 800b08a:	f7ff ba0d 	b.w	800a4a8 <_strtod_l>
 800b08e:	bf00      	nop
 800b090:	20000040 	.word	0x20000040

0800b094 <strtod>:
 800b094:	460a      	mov	r2, r1
 800b096:	4601      	mov	r1, r0
 800b098:	4802      	ldr	r0, [pc, #8]	; (800b0a4 <strtod+0x10>)
 800b09a:	4b03      	ldr	r3, [pc, #12]	; (800b0a8 <strtod+0x14>)
 800b09c:	6800      	ldr	r0, [r0, #0]
 800b09e:	f7ff ba03 	b.w	800a4a8 <_strtod_l>
 800b0a2:	bf00      	nop
 800b0a4:	200001f8 	.word	0x200001f8
 800b0a8:	20000040 	.word	0x20000040

0800b0ac <__utoa>:
 800b0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ae:	4c1f      	ldr	r4, [pc, #124]	; (800b12c <__utoa+0x80>)
 800b0b0:	b08b      	sub	sp, #44	; 0x2c
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	466e      	mov	r6, sp
 800b0b8:	f104 0c20 	add.w	ip, r4, #32
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	6861      	ldr	r1, [r4, #4]
 800b0c0:	4637      	mov	r7, r6
 800b0c2:	c703      	stmia	r7!, {r0, r1}
 800b0c4:	3408      	adds	r4, #8
 800b0c6:	4564      	cmp	r4, ip
 800b0c8:	463e      	mov	r6, r7
 800b0ca:	d1f7      	bne.n	800b0bc <__utoa+0x10>
 800b0cc:	7921      	ldrb	r1, [r4, #4]
 800b0ce:	7139      	strb	r1, [r7, #4]
 800b0d0:	1e91      	subs	r1, r2, #2
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	6038      	str	r0, [r7, #0]
 800b0d6:	2922      	cmp	r1, #34	; 0x22
 800b0d8:	f04f 0100 	mov.w	r1, #0
 800b0dc:	d904      	bls.n	800b0e8 <__utoa+0x3c>
 800b0de:	7019      	strb	r1, [r3, #0]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	b00b      	add	sp, #44	; 0x2c
 800b0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e8:	1e58      	subs	r0, r3, #1
 800b0ea:	4684      	mov	ip, r0
 800b0ec:	fbb5 f7f2 	udiv	r7, r5, r2
 800b0f0:	fb02 5617 	mls	r6, r2, r7, r5
 800b0f4:	3628      	adds	r6, #40	; 0x28
 800b0f6:	446e      	add	r6, sp
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b0fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b102:	462e      	mov	r6, r5
 800b104:	42b2      	cmp	r2, r6
 800b106:	f101 0101 	add.w	r1, r1, #1
 800b10a:	463d      	mov	r5, r7
 800b10c:	d9ee      	bls.n	800b0ec <__utoa+0x40>
 800b10e:	2200      	movs	r2, #0
 800b110:	545a      	strb	r2, [r3, r1]
 800b112:	1919      	adds	r1, r3, r4
 800b114:	1aa5      	subs	r5, r4, r2
 800b116:	42aa      	cmp	r2, r5
 800b118:	dae3      	bge.n	800b0e2 <__utoa+0x36>
 800b11a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b11e:	780e      	ldrb	r6, [r1, #0]
 800b120:	7006      	strb	r6, [r0, #0]
 800b122:	3201      	adds	r2, #1
 800b124:	f801 5901 	strb.w	r5, [r1], #-1
 800b128:	e7f4      	b.n	800b114 <__utoa+0x68>
 800b12a:	bf00      	nop
 800b12c:	080124c8 	.word	0x080124c8

0800b130 <__cvt>:
 800b130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b134:	ec55 4b10 	vmov	r4, r5, d0
 800b138:	2d00      	cmp	r5, #0
 800b13a:	460e      	mov	r6, r1
 800b13c:	4619      	mov	r1, r3
 800b13e:	462b      	mov	r3, r5
 800b140:	bfbb      	ittet	lt
 800b142:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b146:	461d      	movlt	r5, r3
 800b148:	2300      	movge	r3, #0
 800b14a:	232d      	movlt	r3, #45	; 0x2d
 800b14c:	700b      	strb	r3, [r1, #0]
 800b14e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b150:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b154:	4691      	mov	r9, r2
 800b156:	f023 0820 	bic.w	r8, r3, #32
 800b15a:	bfbc      	itt	lt
 800b15c:	4622      	movlt	r2, r4
 800b15e:	4614      	movlt	r4, r2
 800b160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b164:	d005      	beq.n	800b172 <__cvt+0x42>
 800b166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b16a:	d100      	bne.n	800b16e <__cvt+0x3e>
 800b16c:	3601      	adds	r6, #1
 800b16e:	2102      	movs	r1, #2
 800b170:	e000      	b.n	800b174 <__cvt+0x44>
 800b172:	2103      	movs	r1, #3
 800b174:	ab03      	add	r3, sp, #12
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	ab02      	add	r3, sp, #8
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	ec45 4b10 	vmov	d0, r4, r5
 800b180:	4653      	mov	r3, sl
 800b182:	4632      	mov	r2, r6
 800b184:	f001 f964 	bl	800c450 <_dtoa_r>
 800b188:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b18c:	4607      	mov	r7, r0
 800b18e:	d102      	bne.n	800b196 <__cvt+0x66>
 800b190:	f019 0f01 	tst.w	r9, #1
 800b194:	d022      	beq.n	800b1dc <__cvt+0xac>
 800b196:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b19a:	eb07 0906 	add.w	r9, r7, r6
 800b19e:	d110      	bne.n	800b1c2 <__cvt+0x92>
 800b1a0:	783b      	ldrb	r3, [r7, #0]
 800b1a2:	2b30      	cmp	r3, #48	; 0x30
 800b1a4:	d10a      	bne.n	800b1bc <__cvt+0x8c>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	f7f5 fc9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1b2:	b918      	cbnz	r0, 800b1bc <__cvt+0x8c>
 800b1b4:	f1c6 0601 	rsb	r6, r6, #1
 800b1b8:	f8ca 6000 	str.w	r6, [sl]
 800b1bc:	f8da 3000 	ldr.w	r3, [sl]
 800b1c0:	4499      	add	r9, r3
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7f5 fc8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1ce:	b108      	cbz	r0, 800b1d4 <__cvt+0xa4>
 800b1d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1d4:	2230      	movs	r2, #48	; 0x30
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	454b      	cmp	r3, r9
 800b1da:	d307      	bcc.n	800b1ec <__cvt+0xbc>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1e0:	1bdb      	subs	r3, r3, r7
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	b004      	add	sp, #16
 800b1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ec:	1c59      	adds	r1, r3, #1
 800b1ee:	9103      	str	r1, [sp, #12]
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	e7f0      	b.n	800b1d6 <__cvt+0xa6>

0800b1f4 <__exponent>:
 800b1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	bfb8      	it	lt
 800b1fc:	4249      	neglt	r1, r1
 800b1fe:	f803 2b02 	strb.w	r2, [r3], #2
 800b202:	bfb4      	ite	lt
 800b204:	222d      	movlt	r2, #45	; 0x2d
 800b206:	222b      	movge	r2, #43	; 0x2b
 800b208:	2909      	cmp	r1, #9
 800b20a:	7042      	strb	r2, [r0, #1]
 800b20c:	dd2a      	ble.n	800b264 <__exponent+0x70>
 800b20e:	f10d 0207 	add.w	r2, sp, #7
 800b212:	4617      	mov	r7, r2
 800b214:	260a      	movs	r6, #10
 800b216:	4694      	mov	ip, r2
 800b218:	fb91 f5f6 	sdiv	r5, r1, r6
 800b21c:	fb06 1415 	mls	r4, r6, r5, r1
 800b220:	3430      	adds	r4, #48	; 0x30
 800b222:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b226:	460c      	mov	r4, r1
 800b228:	2c63      	cmp	r4, #99	; 0x63
 800b22a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b22e:	4629      	mov	r1, r5
 800b230:	dcf1      	bgt.n	800b216 <__exponent+0x22>
 800b232:	3130      	adds	r1, #48	; 0x30
 800b234:	f1ac 0402 	sub.w	r4, ip, #2
 800b238:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b23c:	1c41      	adds	r1, r0, #1
 800b23e:	4622      	mov	r2, r4
 800b240:	42ba      	cmp	r2, r7
 800b242:	d30a      	bcc.n	800b25a <__exponent+0x66>
 800b244:	f10d 0209 	add.w	r2, sp, #9
 800b248:	eba2 020c 	sub.w	r2, r2, ip
 800b24c:	42bc      	cmp	r4, r7
 800b24e:	bf88      	it	hi
 800b250:	2200      	movhi	r2, #0
 800b252:	4413      	add	r3, r2
 800b254:	1a18      	subs	r0, r3, r0
 800b256:	b003      	add	sp, #12
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b25e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b262:	e7ed      	b.n	800b240 <__exponent+0x4c>
 800b264:	2330      	movs	r3, #48	; 0x30
 800b266:	3130      	adds	r1, #48	; 0x30
 800b268:	7083      	strb	r3, [r0, #2]
 800b26a:	70c1      	strb	r1, [r0, #3]
 800b26c:	1d03      	adds	r3, r0, #4
 800b26e:	e7f1      	b.n	800b254 <__exponent+0x60>

0800b270 <_printf_float>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	ed2d 8b02 	vpush	{d8}
 800b278:	b08d      	sub	sp, #52	; 0x34
 800b27a:	460c      	mov	r4, r1
 800b27c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b280:	4616      	mov	r6, r2
 800b282:	461f      	mov	r7, r3
 800b284:	4605      	mov	r5, r0
 800b286:	f000 ffa1 	bl	800c1cc <_localeconv_r>
 800b28a:	f8d0 a000 	ldr.w	sl, [r0]
 800b28e:	4650      	mov	r0, sl
 800b290:	f7f4 fffe 	bl	8000290 <strlen>
 800b294:	2300      	movs	r3, #0
 800b296:	930a      	str	r3, [sp, #40]	; 0x28
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	f103 0208 	add.w	r2, r3, #8
 800b2ae:	f8c8 2000 	str.w	r2, [r8]
 800b2b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2ba:	9307      	str	r3, [sp, #28]
 800b2bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2c0:	ee08 0a10 	vmov	s16, r0
 800b2c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b2c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2cc:	4b9e      	ldr	r3, [pc, #632]	; (800b548 <_printf_float+0x2d8>)
 800b2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d2:	f7f5 fc3b 	bl	8000b4c <__aeabi_dcmpun>
 800b2d6:	bb88      	cbnz	r0, 800b33c <_printf_float+0xcc>
 800b2d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2dc:	4b9a      	ldr	r3, [pc, #616]	; (800b548 <_printf_float+0x2d8>)
 800b2de:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e2:	f7f5 fc15 	bl	8000b10 <__aeabi_dcmple>
 800b2e6:	bb48      	cbnz	r0, 800b33c <_printf_float+0xcc>
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	f7f5 fc04 	bl	8000afc <__aeabi_dcmplt>
 800b2f4:	b110      	cbz	r0, 800b2fc <_printf_float+0x8c>
 800b2f6:	232d      	movs	r3, #45	; 0x2d
 800b2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fc:	4a93      	ldr	r2, [pc, #588]	; (800b54c <_printf_float+0x2dc>)
 800b2fe:	4b94      	ldr	r3, [pc, #592]	; (800b550 <_printf_float+0x2e0>)
 800b300:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b304:	bf94      	ite	ls
 800b306:	4690      	movls	r8, r2
 800b308:	4698      	movhi	r8, r3
 800b30a:	2303      	movs	r3, #3
 800b30c:	6123      	str	r3, [r4, #16]
 800b30e:	9b05      	ldr	r3, [sp, #20]
 800b310:	f023 0304 	bic.w	r3, r3, #4
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	f04f 0900 	mov.w	r9, #0
 800b31a:	9700      	str	r7, [sp, #0]
 800b31c:	4633      	mov	r3, r6
 800b31e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b320:	4621      	mov	r1, r4
 800b322:	4628      	mov	r0, r5
 800b324:	f000 f9da 	bl	800b6dc <_printf_common>
 800b328:	3001      	adds	r0, #1
 800b32a:	f040 8090 	bne.w	800b44e <_printf_float+0x1de>
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295
 800b332:	b00d      	add	sp, #52	; 0x34
 800b334:	ecbd 8b02 	vpop	{d8}
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	4642      	mov	r2, r8
 800b33e:	464b      	mov	r3, r9
 800b340:	4640      	mov	r0, r8
 800b342:	4649      	mov	r1, r9
 800b344:	f7f5 fc02 	bl	8000b4c <__aeabi_dcmpun>
 800b348:	b140      	cbz	r0, 800b35c <_printf_float+0xec>
 800b34a:	464b      	mov	r3, r9
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bfbc      	itt	lt
 800b350:	232d      	movlt	r3, #45	; 0x2d
 800b352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b356:	4a7f      	ldr	r2, [pc, #508]	; (800b554 <_printf_float+0x2e4>)
 800b358:	4b7f      	ldr	r3, [pc, #508]	; (800b558 <_printf_float+0x2e8>)
 800b35a:	e7d1      	b.n	800b300 <_printf_float+0x90>
 800b35c:	6863      	ldr	r3, [r4, #4]
 800b35e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b362:	9206      	str	r2, [sp, #24]
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	d13f      	bne.n	800b3e8 <_printf_float+0x178>
 800b368:	2306      	movs	r3, #6
 800b36a:	6063      	str	r3, [r4, #4]
 800b36c:	9b05      	ldr	r3, [sp, #20]
 800b36e:	6861      	ldr	r1, [r4, #4]
 800b370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b374:	2300      	movs	r3, #0
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	ab0a      	add	r3, sp, #40	; 0x28
 800b37a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b37e:	ab09      	add	r3, sp, #36	; 0x24
 800b380:	ec49 8b10 	vmov	d0, r8, r9
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b38c:	4628      	mov	r0, r5
 800b38e:	f7ff fecf 	bl	800b130 <__cvt>
 800b392:	9b06      	ldr	r3, [sp, #24]
 800b394:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b396:	2b47      	cmp	r3, #71	; 0x47
 800b398:	4680      	mov	r8, r0
 800b39a:	d108      	bne.n	800b3ae <_printf_float+0x13e>
 800b39c:	1cc8      	adds	r0, r1, #3
 800b39e:	db02      	blt.n	800b3a6 <_printf_float+0x136>
 800b3a0:	6863      	ldr	r3, [r4, #4]
 800b3a2:	4299      	cmp	r1, r3
 800b3a4:	dd41      	ble.n	800b42a <_printf_float+0x1ba>
 800b3a6:	f1ab 0302 	sub.w	r3, fp, #2
 800b3aa:	fa5f fb83 	uxtb.w	fp, r3
 800b3ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b3b2:	d820      	bhi.n	800b3f6 <_printf_float+0x186>
 800b3b4:	3901      	subs	r1, #1
 800b3b6:	465a      	mov	r2, fp
 800b3b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3bc:	9109      	str	r1, [sp, #36]	; 0x24
 800b3be:	f7ff ff19 	bl	800b1f4 <__exponent>
 800b3c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3c4:	1813      	adds	r3, r2, r0
 800b3c6:	2a01      	cmp	r2, #1
 800b3c8:	4681      	mov	r9, r0
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	dc02      	bgt.n	800b3d4 <_printf_float+0x164>
 800b3ce:	6822      	ldr	r2, [r4, #0]
 800b3d0:	07d2      	lsls	r2, r2, #31
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_float+0x168>
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d09c      	beq.n	800b31a <_printf_float+0xaa>
 800b3e0:	232d      	movs	r3, #45	; 0x2d
 800b3e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3e6:	e798      	b.n	800b31a <_printf_float+0xaa>
 800b3e8:	9a06      	ldr	r2, [sp, #24]
 800b3ea:	2a47      	cmp	r2, #71	; 0x47
 800b3ec:	d1be      	bne.n	800b36c <_printf_float+0xfc>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1bc      	bne.n	800b36c <_printf_float+0xfc>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e7b9      	b.n	800b36a <_printf_float+0xfa>
 800b3f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b3fa:	d118      	bne.n	800b42e <_printf_float+0x1be>
 800b3fc:	2900      	cmp	r1, #0
 800b3fe:	6863      	ldr	r3, [r4, #4]
 800b400:	dd0b      	ble.n	800b41a <_printf_float+0x1aa>
 800b402:	6121      	str	r1, [r4, #16]
 800b404:	b913      	cbnz	r3, 800b40c <_printf_float+0x19c>
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	07d0      	lsls	r0, r2, #31
 800b40a:	d502      	bpl.n	800b412 <_printf_float+0x1a2>
 800b40c:	3301      	adds	r3, #1
 800b40e:	440b      	add	r3, r1
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	65a1      	str	r1, [r4, #88]	; 0x58
 800b414:	f04f 0900 	mov.w	r9, #0
 800b418:	e7de      	b.n	800b3d8 <_printf_float+0x168>
 800b41a:	b913      	cbnz	r3, 800b422 <_printf_float+0x1b2>
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	07d2      	lsls	r2, r2, #31
 800b420:	d501      	bpl.n	800b426 <_printf_float+0x1b6>
 800b422:	3302      	adds	r3, #2
 800b424:	e7f4      	b.n	800b410 <_printf_float+0x1a0>
 800b426:	2301      	movs	r3, #1
 800b428:	e7f2      	b.n	800b410 <_printf_float+0x1a0>
 800b42a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b430:	4299      	cmp	r1, r3
 800b432:	db05      	blt.n	800b440 <_printf_float+0x1d0>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	6121      	str	r1, [r4, #16]
 800b438:	07d8      	lsls	r0, r3, #31
 800b43a:	d5ea      	bpl.n	800b412 <_printf_float+0x1a2>
 800b43c:	1c4b      	adds	r3, r1, #1
 800b43e:	e7e7      	b.n	800b410 <_printf_float+0x1a0>
 800b440:	2900      	cmp	r1, #0
 800b442:	bfd4      	ite	le
 800b444:	f1c1 0202 	rsble	r2, r1, #2
 800b448:	2201      	movgt	r2, #1
 800b44a:	4413      	add	r3, r2
 800b44c:	e7e0      	b.n	800b410 <_printf_float+0x1a0>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	055a      	lsls	r2, r3, #21
 800b452:	d407      	bmi.n	800b464 <_printf_float+0x1f4>
 800b454:	6923      	ldr	r3, [r4, #16]
 800b456:	4642      	mov	r2, r8
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	47b8      	blx	r7
 800b45e:	3001      	adds	r0, #1
 800b460:	d12c      	bne.n	800b4bc <_printf_float+0x24c>
 800b462:	e764      	b.n	800b32e <_printf_float+0xbe>
 800b464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b468:	f240 80e0 	bls.w	800b62c <_printf_float+0x3bc>
 800b46c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b470:	2200      	movs	r2, #0
 800b472:	2300      	movs	r3, #0
 800b474:	f7f5 fb38 	bl	8000ae8 <__aeabi_dcmpeq>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d034      	beq.n	800b4e6 <_printf_float+0x276>
 800b47c:	4a37      	ldr	r2, [pc, #220]	; (800b55c <_printf_float+0x2ec>)
 800b47e:	2301      	movs	r3, #1
 800b480:	4631      	mov	r1, r6
 800b482:	4628      	mov	r0, r5
 800b484:	47b8      	blx	r7
 800b486:	3001      	adds	r0, #1
 800b488:	f43f af51 	beq.w	800b32e <_printf_float+0xbe>
 800b48c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b490:	429a      	cmp	r2, r3
 800b492:	db02      	blt.n	800b49a <_printf_float+0x22a>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	07d8      	lsls	r0, r3, #31
 800b498:	d510      	bpl.n	800b4bc <_printf_float+0x24c>
 800b49a:	ee18 3a10 	vmov	r3, s16
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f af41 	beq.w	800b32e <_printf_float+0xbe>
 800b4ac:	f04f 0800 	mov.w	r8, #0
 800b4b0:	f104 091a 	add.w	r9, r4, #26
 800b4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	4543      	cmp	r3, r8
 800b4ba:	dc09      	bgt.n	800b4d0 <_printf_float+0x260>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	079b      	lsls	r3, r3, #30
 800b4c0:	f100 8107 	bmi.w	800b6d2 <_printf_float+0x462>
 800b4c4:	68e0      	ldr	r0, [r4, #12]
 800b4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c8:	4298      	cmp	r0, r3
 800b4ca:	bfb8      	it	lt
 800b4cc:	4618      	movlt	r0, r3
 800b4ce:	e730      	b.n	800b332 <_printf_float+0xc2>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	464a      	mov	r2, r9
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	f43f af27 	beq.w	800b32e <_printf_float+0xbe>
 800b4e0:	f108 0801 	add.w	r8, r8, #1
 800b4e4:	e7e6      	b.n	800b4b4 <_printf_float+0x244>
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dc39      	bgt.n	800b560 <_printf_float+0x2f0>
 800b4ec:	4a1b      	ldr	r2, [pc, #108]	; (800b55c <_printf_float+0x2ec>)
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f43f af19 	beq.w	800b32e <_printf_float+0xbe>
 800b4fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b500:	4313      	orrs	r3, r2
 800b502:	d102      	bne.n	800b50a <_printf_float+0x29a>
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	07d9      	lsls	r1, r3, #31
 800b508:	d5d8      	bpl.n	800b4bc <_printf_float+0x24c>
 800b50a:	ee18 3a10 	vmov	r3, s16
 800b50e:	4652      	mov	r2, sl
 800b510:	4631      	mov	r1, r6
 800b512:	4628      	mov	r0, r5
 800b514:	47b8      	blx	r7
 800b516:	3001      	adds	r0, #1
 800b518:	f43f af09 	beq.w	800b32e <_printf_float+0xbe>
 800b51c:	f04f 0900 	mov.w	r9, #0
 800b520:	f104 0a1a 	add.w	sl, r4, #26
 800b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b526:	425b      	negs	r3, r3
 800b528:	454b      	cmp	r3, r9
 800b52a:	dc01      	bgt.n	800b530 <_printf_float+0x2c0>
 800b52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b52e:	e792      	b.n	800b456 <_printf_float+0x1e6>
 800b530:	2301      	movs	r3, #1
 800b532:	4652      	mov	r2, sl
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	f43f aef7 	beq.w	800b32e <_printf_float+0xbe>
 800b540:	f109 0901 	add.w	r9, r9, #1
 800b544:	e7ee      	b.n	800b524 <_printf_float+0x2b4>
 800b546:	bf00      	nop
 800b548:	7fefffff 	.word	0x7fefffff
 800b54c:	080124ed 	.word	0x080124ed
 800b550:	080124f1 	.word	0x080124f1
 800b554:	080124f5 	.word	0x080124f5
 800b558:	080124f9 	.word	0x080124f9
 800b55c:	0801292c 	.word	0x0801292c
 800b560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b564:	429a      	cmp	r2, r3
 800b566:	bfa8      	it	ge
 800b568:	461a      	movge	r2, r3
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	4691      	mov	r9, r2
 800b56e:	dc37      	bgt.n	800b5e0 <_printf_float+0x370>
 800b570:	f04f 0b00 	mov.w	fp, #0
 800b574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b578:	f104 021a 	add.w	r2, r4, #26
 800b57c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b57e:	9305      	str	r3, [sp, #20]
 800b580:	eba3 0309 	sub.w	r3, r3, r9
 800b584:	455b      	cmp	r3, fp
 800b586:	dc33      	bgt.n	800b5f0 <_printf_float+0x380>
 800b588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b58c:	429a      	cmp	r2, r3
 800b58e:	db3b      	blt.n	800b608 <_printf_float+0x398>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	07da      	lsls	r2, r3, #31
 800b594:	d438      	bmi.n	800b608 <_printf_float+0x398>
 800b596:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b59a:	eba2 0903 	sub.w	r9, r2, r3
 800b59e:	9b05      	ldr	r3, [sp, #20]
 800b5a0:	1ad2      	subs	r2, r2, r3
 800b5a2:	4591      	cmp	r9, r2
 800b5a4:	bfa8      	it	ge
 800b5a6:	4691      	movge	r9, r2
 800b5a8:	f1b9 0f00 	cmp.w	r9, #0
 800b5ac:	dc35      	bgt.n	800b61a <_printf_float+0x3aa>
 800b5ae:	f04f 0800 	mov.w	r8, #0
 800b5b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5b6:	f104 0a1a 	add.w	sl, r4, #26
 800b5ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5be:	1a9b      	subs	r3, r3, r2
 800b5c0:	eba3 0309 	sub.w	r3, r3, r9
 800b5c4:	4543      	cmp	r3, r8
 800b5c6:	f77f af79 	ble.w	800b4bc <_printf_float+0x24c>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4652      	mov	r2, sl
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b8      	blx	r7
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	f43f aeaa 	beq.w	800b32e <_printf_float+0xbe>
 800b5da:	f108 0801 	add.w	r8, r8, #1
 800b5de:	e7ec      	b.n	800b5ba <_printf_float+0x34a>
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b8      	blx	r7
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d1c0      	bne.n	800b570 <_printf_float+0x300>
 800b5ee:	e69e      	b.n	800b32e <_printf_float+0xbe>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	9205      	str	r2, [sp, #20]
 800b5f8:	47b8      	blx	r7
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	f43f ae97 	beq.w	800b32e <_printf_float+0xbe>
 800b600:	9a05      	ldr	r2, [sp, #20]
 800b602:	f10b 0b01 	add.w	fp, fp, #1
 800b606:	e7b9      	b.n	800b57c <_printf_float+0x30c>
 800b608:	ee18 3a10 	vmov	r3, s16
 800b60c:	4652      	mov	r2, sl
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	d1be      	bne.n	800b596 <_printf_float+0x326>
 800b618:	e689      	b.n	800b32e <_printf_float+0xbe>
 800b61a:	9a05      	ldr	r2, [sp, #20]
 800b61c:	464b      	mov	r3, r9
 800b61e:	4442      	add	r2, r8
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	d1c1      	bne.n	800b5ae <_printf_float+0x33e>
 800b62a:	e680      	b.n	800b32e <_printf_float+0xbe>
 800b62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b62e:	2a01      	cmp	r2, #1
 800b630:	dc01      	bgt.n	800b636 <_printf_float+0x3c6>
 800b632:	07db      	lsls	r3, r3, #31
 800b634:	d53a      	bpl.n	800b6ac <_printf_float+0x43c>
 800b636:	2301      	movs	r3, #1
 800b638:	4642      	mov	r2, r8
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	f43f ae74 	beq.w	800b32e <_printf_float+0xbe>
 800b646:	ee18 3a10 	vmov	r3, s16
 800b64a:	4652      	mov	r2, sl
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	f43f ae6b 	beq.w	800b32e <_printf_float+0xbe>
 800b658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b664:	f7f5 fa40 	bl	8000ae8 <__aeabi_dcmpeq>
 800b668:	b9d8      	cbnz	r0, 800b6a2 <_printf_float+0x432>
 800b66a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b66e:	f108 0201 	add.w	r2, r8, #1
 800b672:	4631      	mov	r1, r6
 800b674:	4628      	mov	r0, r5
 800b676:	47b8      	blx	r7
 800b678:	3001      	adds	r0, #1
 800b67a:	d10e      	bne.n	800b69a <_printf_float+0x42a>
 800b67c:	e657      	b.n	800b32e <_printf_float+0xbe>
 800b67e:	2301      	movs	r3, #1
 800b680:	4652      	mov	r2, sl
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	47b8      	blx	r7
 800b688:	3001      	adds	r0, #1
 800b68a:	f43f ae50 	beq.w	800b32e <_printf_float+0xbe>
 800b68e:	f108 0801 	add.w	r8, r8, #1
 800b692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b694:	3b01      	subs	r3, #1
 800b696:	4543      	cmp	r3, r8
 800b698:	dcf1      	bgt.n	800b67e <_printf_float+0x40e>
 800b69a:	464b      	mov	r3, r9
 800b69c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6a0:	e6da      	b.n	800b458 <_printf_float+0x1e8>
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	f104 0a1a 	add.w	sl, r4, #26
 800b6aa:	e7f2      	b.n	800b692 <_printf_float+0x422>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	e7df      	b.n	800b672 <_printf_float+0x402>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	464a      	mov	r2, r9
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	47b8      	blx	r7
 800b6bc:	3001      	adds	r0, #1
 800b6be:	f43f ae36 	beq.w	800b32e <_printf_float+0xbe>
 800b6c2:	f108 0801 	add.w	r8, r8, #1
 800b6c6:	68e3      	ldr	r3, [r4, #12]
 800b6c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6ca:	1a5b      	subs	r3, r3, r1
 800b6cc:	4543      	cmp	r3, r8
 800b6ce:	dcf0      	bgt.n	800b6b2 <_printf_float+0x442>
 800b6d0:	e6f8      	b.n	800b4c4 <_printf_float+0x254>
 800b6d2:	f04f 0800 	mov.w	r8, #0
 800b6d6:	f104 0919 	add.w	r9, r4, #25
 800b6da:	e7f4      	b.n	800b6c6 <_printf_float+0x456>

0800b6dc <_printf_common>:
 800b6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e0:	4616      	mov	r6, r2
 800b6e2:	4699      	mov	r9, r3
 800b6e4:	688a      	ldr	r2, [r1, #8]
 800b6e6:	690b      	ldr	r3, [r1, #16]
 800b6e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bfb8      	it	lt
 800b6f0:	4613      	movlt	r3, r2
 800b6f2:	6033      	str	r3, [r6, #0]
 800b6f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	b10a      	cbz	r2, 800b702 <_printf_common+0x26>
 800b6fe:	3301      	adds	r3, #1
 800b700:	6033      	str	r3, [r6, #0]
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	0699      	lsls	r1, r3, #26
 800b706:	bf42      	ittt	mi
 800b708:	6833      	ldrmi	r3, [r6, #0]
 800b70a:	3302      	addmi	r3, #2
 800b70c:	6033      	strmi	r3, [r6, #0]
 800b70e:	6825      	ldr	r5, [r4, #0]
 800b710:	f015 0506 	ands.w	r5, r5, #6
 800b714:	d106      	bne.n	800b724 <_printf_common+0x48>
 800b716:	f104 0a19 	add.w	sl, r4, #25
 800b71a:	68e3      	ldr	r3, [r4, #12]
 800b71c:	6832      	ldr	r2, [r6, #0]
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	42ab      	cmp	r3, r5
 800b722:	dc26      	bgt.n	800b772 <_printf_common+0x96>
 800b724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b728:	1e13      	subs	r3, r2, #0
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	bf18      	it	ne
 800b72e:	2301      	movne	r3, #1
 800b730:	0692      	lsls	r2, r2, #26
 800b732:	d42b      	bmi.n	800b78c <_printf_common+0xb0>
 800b734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b738:	4649      	mov	r1, r9
 800b73a:	4638      	mov	r0, r7
 800b73c:	47c0      	blx	r8
 800b73e:	3001      	adds	r0, #1
 800b740:	d01e      	beq.n	800b780 <_printf_common+0xa4>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	6922      	ldr	r2, [r4, #16]
 800b746:	f003 0306 	and.w	r3, r3, #6
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	bf02      	ittt	eq
 800b74e:	68e5      	ldreq	r5, [r4, #12]
 800b750:	6833      	ldreq	r3, [r6, #0]
 800b752:	1aed      	subeq	r5, r5, r3
 800b754:	68a3      	ldr	r3, [r4, #8]
 800b756:	bf0c      	ite	eq
 800b758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b75c:	2500      	movne	r5, #0
 800b75e:	4293      	cmp	r3, r2
 800b760:	bfc4      	itt	gt
 800b762:	1a9b      	subgt	r3, r3, r2
 800b764:	18ed      	addgt	r5, r5, r3
 800b766:	2600      	movs	r6, #0
 800b768:	341a      	adds	r4, #26
 800b76a:	42b5      	cmp	r5, r6
 800b76c:	d11a      	bne.n	800b7a4 <_printf_common+0xc8>
 800b76e:	2000      	movs	r0, #0
 800b770:	e008      	b.n	800b784 <_printf_common+0xa8>
 800b772:	2301      	movs	r3, #1
 800b774:	4652      	mov	r2, sl
 800b776:	4649      	mov	r1, r9
 800b778:	4638      	mov	r0, r7
 800b77a:	47c0      	blx	r8
 800b77c:	3001      	adds	r0, #1
 800b77e:	d103      	bne.n	800b788 <_printf_common+0xac>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b788:	3501      	adds	r5, #1
 800b78a:	e7c6      	b.n	800b71a <_printf_common+0x3e>
 800b78c:	18e1      	adds	r1, r4, r3
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	2030      	movs	r0, #48	; 0x30
 800b792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b796:	4422      	add	r2, r4
 800b798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b79c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	e7c7      	b.n	800b734 <_printf_common+0x58>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	47c0      	blx	r8
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d0e6      	beq.n	800b780 <_printf_common+0xa4>
 800b7b2:	3601      	adds	r6, #1
 800b7b4:	e7d9      	b.n	800b76a <_printf_common+0x8e>
	...

0800b7b8 <_printf_i>:
 800b7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7bc:	7e0f      	ldrb	r7, [r1, #24]
 800b7be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7c0:	2f78      	cmp	r7, #120	; 0x78
 800b7c2:	4691      	mov	r9, r2
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	469a      	mov	sl, r3
 800b7ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7ce:	d807      	bhi.n	800b7e0 <_printf_i+0x28>
 800b7d0:	2f62      	cmp	r7, #98	; 0x62
 800b7d2:	d80a      	bhi.n	800b7ea <_printf_i+0x32>
 800b7d4:	2f00      	cmp	r7, #0
 800b7d6:	f000 80d4 	beq.w	800b982 <_printf_i+0x1ca>
 800b7da:	2f58      	cmp	r7, #88	; 0x58
 800b7dc:	f000 80c0 	beq.w	800b960 <_printf_i+0x1a8>
 800b7e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7e8:	e03a      	b.n	800b860 <_printf_i+0xa8>
 800b7ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7ee:	2b15      	cmp	r3, #21
 800b7f0:	d8f6      	bhi.n	800b7e0 <_printf_i+0x28>
 800b7f2:	a101      	add	r1, pc, #4	; (adr r1, 800b7f8 <_printf_i+0x40>)
 800b7f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7f8:	0800b851 	.word	0x0800b851
 800b7fc:	0800b865 	.word	0x0800b865
 800b800:	0800b7e1 	.word	0x0800b7e1
 800b804:	0800b7e1 	.word	0x0800b7e1
 800b808:	0800b7e1 	.word	0x0800b7e1
 800b80c:	0800b7e1 	.word	0x0800b7e1
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b7e1 	.word	0x0800b7e1
 800b818:	0800b7e1 	.word	0x0800b7e1
 800b81c:	0800b7e1 	.word	0x0800b7e1
 800b820:	0800b7e1 	.word	0x0800b7e1
 800b824:	0800b969 	.word	0x0800b969
 800b828:	0800b891 	.word	0x0800b891
 800b82c:	0800b923 	.word	0x0800b923
 800b830:	0800b7e1 	.word	0x0800b7e1
 800b834:	0800b7e1 	.word	0x0800b7e1
 800b838:	0800b98b 	.word	0x0800b98b
 800b83c:	0800b7e1 	.word	0x0800b7e1
 800b840:	0800b891 	.word	0x0800b891
 800b844:	0800b7e1 	.word	0x0800b7e1
 800b848:	0800b7e1 	.word	0x0800b7e1
 800b84c:	0800b92b 	.word	0x0800b92b
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	1d1a      	adds	r2, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	602a      	str	r2, [r5, #0]
 800b858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b85c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b860:	2301      	movs	r3, #1
 800b862:	e09f      	b.n	800b9a4 <_printf_i+0x1ec>
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	682b      	ldr	r3, [r5, #0]
 800b868:	0607      	lsls	r7, r0, #24
 800b86a:	f103 0104 	add.w	r1, r3, #4
 800b86e:	6029      	str	r1, [r5, #0]
 800b870:	d501      	bpl.n	800b876 <_printf_i+0xbe>
 800b872:	681e      	ldr	r6, [r3, #0]
 800b874:	e003      	b.n	800b87e <_printf_i+0xc6>
 800b876:	0646      	lsls	r6, r0, #25
 800b878:	d5fb      	bpl.n	800b872 <_printf_i+0xba>
 800b87a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b87e:	2e00      	cmp	r6, #0
 800b880:	da03      	bge.n	800b88a <_printf_i+0xd2>
 800b882:	232d      	movs	r3, #45	; 0x2d
 800b884:	4276      	negs	r6, r6
 800b886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b88a:	485a      	ldr	r0, [pc, #360]	; (800b9f4 <_printf_i+0x23c>)
 800b88c:	230a      	movs	r3, #10
 800b88e:	e012      	b.n	800b8b6 <_printf_i+0xfe>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	6820      	ldr	r0, [r4, #0]
 800b894:	1d19      	adds	r1, r3, #4
 800b896:	6029      	str	r1, [r5, #0]
 800b898:	0605      	lsls	r5, r0, #24
 800b89a:	d501      	bpl.n	800b8a0 <_printf_i+0xe8>
 800b89c:	681e      	ldr	r6, [r3, #0]
 800b89e:	e002      	b.n	800b8a6 <_printf_i+0xee>
 800b8a0:	0641      	lsls	r1, r0, #25
 800b8a2:	d5fb      	bpl.n	800b89c <_printf_i+0xe4>
 800b8a4:	881e      	ldrh	r6, [r3, #0]
 800b8a6:	4853      	ldr	r0, [pc, #332]	; (800b9f4 <_printf_i+0x23c>)
 800b8a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b8aa:	bf0c      	ite	eq
 800b8ac:	2308      	moveq	r3, #8
 800b8ae:	230a      	movne	r3, #10
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8b6:	6865      	ldr	r5, [r4, #4]
 800b8b8:	60a5      	str	r5, [r4, #8]
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	bfa2      	ittt	ge
 800b8be:	6821      	ldrge	r1, [r4, #0]
 800b8c0:	f021 0104 	bicge.w	r1, r1, #4
 800b8c4:	6021      	strge	r1, [r4, #0]
 800b8c6:	b90e      	cbnz	r6, 800b8cc <_printf_i+0x114>
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	d04b      	beq.n	800b964 <_printf_i+0x1ac>
 800b8cc:	4615      	mov	r5, r2
 800b8ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8d2:	fb03 6711 	mls	r7, r3, r1, r6
 800b8d6:	5dc7      	ldrb	r7, [r0, r7]
 800b8d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8dc:	4637      	mov	r7, r6
 800b8de:	42bb      	cmp	r3, r7
 800b8e0:	460e      	mov	r6, r1
 800b8e2:	d9f4      	bls.n	800b8ce <_printf_i+0x116>
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d10b      	bne.n	800b900 <_printf_i+0x148>
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	07de      	lsls	r6, r3, #31
 800b8ec:	d508      	bpl.n	800b900 <_printf_i+0x148>
 800b8ee:	6923      	ldr	r3, [r4, #16]
 800b8f0:	6861      	ldr	r1, [r4, #4]
 800b8f2:	4299      	cmp	r1, r3
 800b8f4:	bfde      	ittt	le
 800b8f6:	2330      	movle	r3, #48	; 0x30
 800b8f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b900:	1b52      	subs	r2, r2, r5
 800b902:	6122      	str	r2, [r4, #16]
 800b904:	f8cd a000 	str.w	sl, [sp]
 800b908:	464b      	mov	r3, r9
 800b90a:	aa03      	add	r2, sp, #12
 800b90c:	4621      	mov	r1, r4
 800b90e:	4640      	mov	r0, r8
 800b910:	f7ff fee4 	bl	800b6dc <_printf_common>
 800b914:	3001      	adds	r0, #1
 800b916:	d14a      	bne.n	800b9ae <_printf_i+0x1f6>
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	b004      	add	sp, #16
 800b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f043 0320 	orr.w	r3, r3, #32
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	4833      	ldr	r0, [pc, #204]	; (800b9f8 <_printf_i+0x240>)
 800b92c:	2778      	movs	r7, #120	; 0x78
 800b92e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	6829      	ldr	r1, [r5, #0]
 800b936:	061f      	lsls	r7, r3, #24
 800b938:	f851 6b04 	ldr.w	r6, [r1], #4
 800b93c:	d402      	bmi.n	800b944 <_printf_i+0x18c>
 800b93e:	065f      	lsls	r7, r3, #25
 800b940:	bf48      	it	mi
 800b942:	b2b6      	uxthmi	r6, r6
 800b944:	07df      	lsls	r7, r3, #31
 800b946:	bf48      	it	mi
 800b948:	f043 0320 	orrmi.w	r3, r3, #32
 800b94c:	6029      	str	r1, [r5, #0]
 800b94e:	bf48      	it	mi
 800b950:	6023      	strmi	r3, [r4, #0]
 800b952:	b91e      	cbnz	r6, 800b95c <_printf_i+0x1a4>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	f023 0320 	bic.w	r3, r3, #32
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	2310      	movs	r3, #16
 800b95e:	e7a7      	b.n	800b8b0 <_printf_i+0xf8>
 800b960:	4824      	ldr	r0, [pc, #144]	; (800b9f4 <_printf_i+0x23c>)
 800b962:	e7e4      	b.n	800b92e <_printf_i+0x176>
 800b964:	4615      	mov	r5, r2
 800b966:	e7bd      	b.n	800b8e4 <_printf_i+0x12c>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	6826      	ldr	r6, [r4, #0]
 800b96c:	6961      	ldr	r1, [r4, #20]
 800b96e:	1d18      	adds	r0, r3, #4
 800b970:	6028      	str	r0, [r5, #0]
 800b972:	0635      	lsls	r5, r6, #24
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	d501      	bpl.n	800b97c <_printf_i+0x1c4>
 800b978:	6019      	str	r1, [r3, #0]
 800b97a:	e002      	b.n	800b982 <_printf_i+0x1ca>
 800b97c:	0670      	lsls	r0, r6, #25
 800b97e:	d5fb      	bpl.n	800b978 <_printf_i+0x1c0>
 800b980:	8019      	strh	r1, [r3, #0]
 800b982:	2300      	movs	r3, #0
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	4615      	mov	r5, r2
 800b988:	e7bc      	b.n	800b904 <_printf_i+0x14c>
 800b98a:	682b      	ldr	r3, [r5, #0]
 800b98c:	1d1a      	adds	r2, r3, #4
 800b98e:	602a      	str	r2, [r5, #0]
 800b990:	681d      	ldr	r5, [r3, #0]
 800b992:	6862      	ldr	r2, [r4, #4]
 800b994:	2100      	movs	r1, #0
 800b996:	4628      	mov	r0, r5
 800b998:	f7f4 fc2a 	bl	80001f0 <memchr>
 800b99c:	b108      	cbz	r0, 800b9a2 <_printf_i+0x1ea>
 800b99e:	1b40      	subs	r0, r0, r5
 800b9a0:	6060      	str	r0, [r4, #4]
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	6123      	str	r3, [r4, #16]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ac:	e7aa      	b.n	800b904 <_printf_i+0x14c>
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	47d0      	blx	sl
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d0ad      	beq.n	800b918 <_printf_i+0x160>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	079b      	lsls	r3, r3, #30
 800b9c0:	d413      	bmi.n	800b9ea <_printf_i+0x232>
 800b9c2:	68e0      	ldr	r0, [r4, #12]
 800b9c4:	9b03      	ldr	r3, [sp, #12]
 800b9c6:	4298      	cmp	r0, r3
 800b9c8:	bfb8      	it	lt
 800b9ca:	4618      	movlt	r0, r3
 800b9cc:	e7a6      	b.n	800b91c <_printf_i+0x164>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4632      	mov	r2, r6
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	47d0      	blx	sl
 800b9d8:	3001      	adds	r0, #1
 800b9da:	d09d      	beq.n	800b918 <_printf_i+0x160>
 800b9dc:	3501      	adds	r5, #1
 800b9de:	68e3      	ldr	r3, [r4, #12]
 800b9e0:	9903      	ldr	r1, [sp, #12]
 800b9e2:	1a5b      	subs	r3, r3, r1
 800b9e4:	42ab      	cmp	r3, r5
 800b9e6:	dcf2      	bgt.n	800b9ce <_printf_i+0x216>
 800b9e8:	e7eb      	b.n	800b9c2 <_printf_i+0x20a>
 800b9ea:	2500      	movs	r5, #0
 800b9ec:	f104 0619 	add.w	r6, r4, #25
 800b9f0:	e7f5      	b.n	800b9de <_printf_i+0x226>
 800b9f2:	bf00      	nop
 800b9f4:	080124fd 	.word	0x080124fd
 800b9f8:	0801250e 	.word	0x0801250e

0800b9fc <_scanf_float>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	b087      	sub	sp, #28
 800ba02:	4617      	mov	r7, r2
 800ba04:	9303      	str	r3, [sp, #12]
 800ba06:	688b      	ldr	r3, [r1, #8]
 800ba08:	1e5a      	subs	r2, r3, #1
 800ba0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba0e:	bf83      	ittte	hi
 800ba10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba14:	195b      	addhi	r3, r3, r5
 800ba16:	9302      	strhi	r3, [sp, #8]
 800ba18:	2300      	movls	r3, #0
 800ba1a:	bf86      	itte	hi
 800ba1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba20:	608b      	strhi	r3, [r1, #8]
 800ba22:	9302      	strls	r3, [sp, #8]
 800ba24:	680b      	ldr	r3, [r1, #0]
 800ba26:	468b      	mov	fp, r1
 800ba28:	2500      	movs	r5, #0
 800ba2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ba2e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ba32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba36:	4680      	mov	r8, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	465e      	mov	r6, fp
 800ba3c:	46aa      	mov	sl, r5
 800ba3e:	46a9      	mov	r9, r5
 800ba40:	9501      	str	r5, [sp, #4]
 800ba42:	68a2      	ldr	r2, [r4, #8]
 800ba44:	b152      	cbz	r2, 800ba5c <_scanf_float+0x60>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b4e      	cmp	r3, #78	; 0x4e
 800ba4c:	d864      	bhi.n	800bb18 <_scanf_float+0x11c>
 800ba4e:	2b40      	cmp	r3, #64	; 0x40
 800ba50:	d83c      	bhi.n	800bacc <_scanf_float+0xd0>
 800ba52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ba56:	b2c8      	uxtb	r0, r1
 800ba58:	280e      	cmp	r0, #14
 800ba5a:	d93a      	bls.n	800bad2 <_scanf_float+0xd6>
 800ba5c:	f1b9 0f00 	cmp.w	r9, #0
 800ba60:	d003      	beq.n	800ba6a <_scanf_float+0x6e>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba6e:	f1ba 0f01 	cmp.w	sl, #1
 800ba72:	f200 8113 	bhi.w	800bc9c <_scanf_float+0x2a0>
 800ba76:	455e      	cmp	r6, fp
 800ba78:	f200 8105 	bhi.w	800bc86 <_scanf_float+0x28a>
 800ba7c:	2501      	movs	r5, #1
 800ba7e:	4628      	mov	r0, r5
 800ba80:	b007      	add	sp, #28
 800ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ba8a:	2a0d      	cmp	r2, #13
 800ba8c:	d8e6      	bhi.n	800ba5c <_scanf_float+0x60>
 800ba8e:	a101      	add	r1, pc, #4	; (adr r1, 800ba94 <_scanf_float+0x98>)
 800ba90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba94:	0800bbd3 	.word	0x0800bbd3
 800ba98:	0800ba5d 	.word	0x0800ba5d
 800ba9c:	0800ba5d 	.word	0x0800ba5d
 800baa0:	0800ba5d 	.word	0x0800ba5d
 800baa4:	0800bc33 	.word	0x0800bc33
 800baa8:	0800bc0b 	.word	0x0800bc0b
 800baac:	0800ba5d 	.word	0x0800ba5d
 800bab0:	0800ba5d 	.word	0x0800ba5d
 800bab4:	0800bbe1 	.word	0x0800bbe1
 800bab8:	0800ba5d 	.word	0x0800ba5d
 800babc:	0800ba5d 	.word	0x0800ba5d
 800bac0:	0800ba5d 	.word	0x0800ba5d
 800bac4:	0800ba5d 	.word	0x0800ba5d
 800bac8:	0800bb99 	.word	0x0800bb99
 800bacc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bad0:	e7db      	b.n	800ba8a <_scanf_float+0x8e>
 800bad2:	290e      	cmp	r1, #14
 800bad4:	d8c2      	bhi.n	800ba5c <_scanf_float+0x60>
 800bad6:	a001      	add	r0, pc, #4	; (adr r0, 800badc <_scanf_float+0xe0>)
 800bad8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800badc:	0800bb8b 	.word	0x0800bb8b
 800bae0:	0800ba5d 	.word	0x0800ba5d
 800bae4:	0800bb8b 	.word	0x0800bb8b
 800bae8:	0800bc1f 	.word	0x0800bc1f
 800baec:	0800ba5d 	.word	0x0800ba5d
 800baf0:	0800bb39 	.word	0x0800bb39
 800baf4:	0800bb75 	.word	0x0800bb75
 800baf8:	0800bb75 	.word	0x0800bb75
 800bafc:	0800bb75 	.word	0x0800bb75
 800bb00:	0800bb75 	.word	0x0800bb75
 800bb04:	0800bb75 	.word	0x0800bb75
 800bb08:	0800bb75 	.word	0x0800bb75
 800bb0c:	0800bb75 	.word	0x0800bb75
 800bb10:	0800bb75 	.word	0x0800bb75
 800bb14:	0800bb75 	.word	0x0800bb75
 800bb18:	2b6e      	cmp	r3, #110	; 0x6e
 800bb1a:	d809      	bhi.n	800bb30 <_scanf_float+0x134>
 800bb1c:	2b60      	cmp	r3, #96	; 0x60
 800bb1e:	d8b2      	bhi.n	800ba86 <_scanf_float+0x8a>
 800bb20:	2b54      	cmp	r3, #84	; 0x54
 800bb22:	d077      	beq.n	800bc14 <_scanf_float+0x218>
 800bb24:	2b59      	cmp	r3, #89	; 0x59
 800bb26:	d199      	bne.n	800ba5c <_scanf_float+0x60>
 800bb28:	2d07      	cmp	r5, #7
 800bb2a:	d197      	bne.n	800ba5c <_scanf_float+0x60>
 800bb2c:	2508      	movs	r5, #8
 800bb2e:	e029      	b.n	800bb84 <_scanf_float+0x188>
 800bb30:	2b74      	cmp	r3, #116	; 0x74
 800bb32:	d06f      	beq.n	800bc14 <_scanf_float+0x218>
 800bb34:	2b79      	cmp	r3, #121	; 0x79
 800bb36:	e7f6      	b.n	800bb26 <_scanf_float+0x12a>
 800bb38:	6821      	ldr	r1, [r4, #0]
 800bb3a:	05c8      	lsls	r0, r1, #23
 800bb3c:	d51a      	bpl.n	800bb74 <_scanf_float+0x178>
 800bb3e:	9b02      	ldr	r3, [sp, #8]
 800bb40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb44:	6021      	str	r1, [r4, #0]
 800bb46:	f109 0901 	add.w	r9, r9, #1
 800bb4a:	b11b      	cbz	r3, 800bb54 <_scanf_float+0x158>
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	3201      	adds	r2, #1
 800bb50:	9302      	str	r3, [sp, #8]
 800bb52:	60a2      	str	r2, [r4, #8]
 800bb54:	68a3      	ldr	r3, [r4, #8]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	60a3      	str	r3, [r4, #8]
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	607b      	str	r3, [r7, #4]
 800bb68:	f340 8084 	ble.w	800bc74 <_scanf_float+0x278>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	603b      	str	r3, [r7, #0]
 800bb72:	e766      	b.n	800ba42 <_scanf_float+0x46>
 800bb74:	eb1a 0f05 	cmn.w	sl, r5
 800bb78:	f47f af70 	bne.w	800ba5c <_scanf_float+0x60>
 800bb7c:	6822      	ldr	r2, [r4, #0]
 800bb7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bb82:	6022      	str	r2, [r4, #0]
 800bb84:	f806 3b01 	strb.w	r3, [r6], #1
 800bb88:	e7e4      	b.n	800bb54 <_scanf_float+0x158>
 800bb8a:	6822      	ldr	r2, [r4, #0]
 800bb8c:	0610      	lsls	r0, r2, #24
 800bb8e:	f57f af65 	bpl.w	800ba5c <_scanf_float+0x60>
 800bb92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb96:	e7f4      	b.n	800bb82 <_scanf_float+0x186>
 800bb98:	f1ba 0f00 	cmp.w	sl, #0
 800bb9c:	d10e      	bne.n	800bbbc <_scanf_float+0x1c0>
 800bb9e:	f1b9 0f00 	cmp.w	r9, #0
 800bba2:	d10e      	bne.n	800bbc2 <_scanf_float+0x1c6>
 800bba4:	6822      	ldr	r2, [r4, #0]
 800bba6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bbaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bbae:	d108      	bne.n	800bbc2 <_scanf_float+0x1c6>
 800bbb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bbb4:	6022      	str	r2, [r4, #0]
 800bbb6:	f04f 0a01 	mov.w	sl, #1
 800bbba:	e7e3      	b.n	800bb84 <_scanf_float+0x188>
 800bbbc:	f1ba 0f02 	cmp.w	sl, #2
 800bbc0:	d055      	beq.n	800bc6e <_scanf_float+0x272>
 800bbc2:	2d01      	cmp	r5, #1
 800bbc4:	d002      	beq.n	800bbcc <_scanf_float+0x1d0>
 800bbc6:	2d04      	cmp	r5, #4
 800bbc8:	f47f af48 	bne.w	800ba5c <_scanf_float+0x60>
 800bbcc:	3501      	adds	r5, #1
 800bbce:	b2ed      	uxtb	r5, r5
 800bbd0:	e7d8      	b.n	800bb84 <_scanf_float+0x188>
 800bbd2:	f1ba 0f01 	cmp.w	sl, #1
 800bbd6:	f47f af41 	bne.w	800ba5c <_scanf_float+0x60>
 800bbda:	f04f 0a02 	mov.w	sl, #2
 800bbde:	e7d1      	b.n	800bb84 <_scanf_float+0x188>
 800bbe0:	b97d      	cbnz	r5, 800bc02 <_scanf_float+0x206>
 800bbe2:	f1b9 0f00 	cmp.w	r9, #0
 800bbe6:	f47f af3c 	bne.w	800ba62 <_scanf_float+0x66>
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bbf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bbf4:	f47f af39 	bne.w	800ba6a <_scanf_float+0x6e>
 800bbf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bbfc:	6022      	str	r2, [r4, #0]
 800bbfe:	2501      	movs	r5, #1
 800bc00:	e7c0      	b.n	800bb84 <_scanf_float+0x188>
 800bc02:	2d03      	cmp	r5, #3
 800bc04:	d0e2      	beq.n	800bbcc <_scanf_float+0x1d0>
 800bc06:	2d05      	cmp	r5, #5
 800bc08:	e7de      	b.n	800bbc8 <_scanf_float+0x1cc>
 800bc0a:	2d02      	cmp	r5, #2
 800bc0c:	f47f af26 	bne.w	800ba5c <_scanf_float+0x60>
 800bc10:	2503      	movs	r5, #3
 800bc12:	e7b7      	b.n	800bb84 <_scanf_float+0x188>
 800bc14:	2d06      	cmp	r5, #6
 800bc16:	f47f af21 	bne.w	800ba5c <_scanf_float+0x60>
 800bc1a:	2507      	movs	r5, #7
 800bc1c:	e7b2      	b.n	800bb84 <_scanf_float+0x188>
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	0591      	lsls	r1, r2, #22
 800bc22:	f57f af1b 	bpl.w	800ba5c <_scanf_float+0x60>
 800bc26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bc2a:	6022      	str	r2, [r4, #0]
 800bc2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc30:	e7a8      	b.n	800bb84 <_scanf_float+0x188>
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bc38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bc3c:	d006      	beq.n	800bc4c <_scanf_float+0x250>
 800bc3e:	0550      	lsls	r0, r2, #21
 800bc40:	f57f af0c 	bpl.w	800ba5c <_scanf_float+0x60>
 800bc44:	f1b9 0f00 	cmp.w	r9, #0
 800bc48:	f43f af0f 	beq.w	800ba6a <_scanf_float+0x6e>
 800bc4c:	0591      	lsls	r1, r2, #22
 800bc4e:	bf58      	it	pl
 800bc50:	9901      	ldrpl	r1, [sp, #4]
 800bc52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc56:	bf58      	it	pl
 800bc58:	eba9 0101 	subpl.w	r1, r9, r1
 800bc5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bc60:	bf58      	it	pl
 800bc62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc66:	6022      	str	r2, [r4, #0]
 800bc68:	f04f 0900 	mov.w	r9, #0
 800bc6c:	e78a      	b.n	800bb84 <_scanf_float+0x188>
 800bc6e:	f04f 0a03 	mov.w	sl, #3
 800bc72:	e787      	b.n	800bb84 <_scanf_float+0x188>
 800bc74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc78:	4639      	mov	r1, r7
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	4798      	blx	r3
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	f43f aedf 	beq.w	800ba42 <_scanf_float+0x46>
 800bc84:	e6ea      	b.n	800ba5c <_scanf_float+0x60>
 800bc86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc8e:	463a      	mov	r2, r7
 800bc90:	4640      	mov	r0, r8
 800bc92:	4798      	blx	r3
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	6123      	str	r3, [r4, #16]
 800bc9a:	e6ec      	b.n	800ba76 <_scanf_float+0x7a>
 800bc9c:	1e6b      	subs	r3, r5, #1
 800bc9e:	2b06      	cmp	r3, #6
 800bca0:	d825      	bhi.n	800bcee <_scanf_float+0x2f2>
 800bca2:	2d02      	cmp	r5, #2
 800bca4:	d836      	bhi.n	800bd14 <_scanf_float+0x318>
 800bca6:	455e      	cmp	r6, fp
 800bca8:	f67f aee8 	bls.w	800ba7c <_scanf_float+0x80>
 800bcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4798      	blx	r3
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	e7f1      	b.n	800bca6 <_scanf_float+0x2aa>
 800bcc2:	9802      	ldr	r0, [sp, #8]
 800bcc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bccc:	9002      	str	r0, [sp, #8]
 800bcce:	463a      	mov	r2, r7
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4798      	blx	r3
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	6123      	str	r3, [r4, #16]
 800bcda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcde:	fa5f fa8a 	uxtb.w	sl, sl
 800bce2:	f1ba 0f02 	cmp.w	sl, #2
 800bce6:	d1ec      	bne.n	800bcc2 <_scanf_float+0x2c6>
 800bce8:	3d03      	subs	r5, #3
 800bcea:	b2ed      	uxtb	r5, r5
 800bcec:	1b76      	subs	r6, r6, r5
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	05da      	lsls	r2, r3, #23
 800bcf2:	d52f      	bpl.n	800bd54 <_scanf_float+0x358>
 800bcf4:	055b      	lsls	r3, r3, #21
 800bcf6:	d510      	bpl.n	800bd1a <_scanf_float+0x31e>
 800bcf8:	455e      	cmp	r6, fp
 800bcfa:	f67f aebf 	bls.w	800ba7c <_scanf_float+0x80>
 800bcfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd06:	463a      	mov	r2, r7
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4798      	blx	r3
 800bd0c:	6923      	ldr	r3, [r4, #16]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	6123      	str	r3, [r4, #16]
 800bd12:	e7f1      	b.n	800bcf8 <_scanf_float+0x2fc>
 800bd14:	46aa      	mov	sl, r5
 800bd16:	9602      	str	r6, [sp, #8]
 800bd18:	e7df      	b.n	800bcda <_scanf_float+0x2de>
 800bd1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd1e:	6923      	ldr	r3, [r4, #16]
 800bd20:	2965      	cmp	r1, #101	; 0x65
 800bd22:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd26:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd2a:	6123      	str	r3, [r4, #16]
 800bd2c:	d00c      	beq.n	800bd48 <_scanf_float+0x34c>
 800bd2e:	2945      	cmp	r1, #69	; 0x45
 800bd30:	d00a      	beq.n	800bd48 <_scanf_float+0x34c>
 800bd32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd36:	463a      	mov	r2, r7
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4798      	blx	r3
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	1eb5      	subs	r5, r6, #2
 800bd46:	6123      	str	r3, [r4, #16]
 800bd48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd4c:	463a      	mov	r2, r7
 800bd4e:	4640      	mov	r0, r8
 800bd50:	4798      	blx	r3
 800bd52:	462e      	mov	r6, r5
 800bd54:	6825      	ldr	r5, [r4, #0]
 800bd56:	f015 0510 	ands.w	r5, r5, #16
 800bd5a:	d158      	bne.n	800be0e <_scanf_float+0x412>
 800bd5c:	7035      	strb	r5, [r6, #0]
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd68:	d11c      	bne.n	800bda4 <_scanf_float+0x3a8>
 800bd6a:	9b01      	ldr	r3, [sp, #4]
 800bd6c:	454b      	cmp	r3, r9
 800bd6e:	eba3 0209 	sub.w	r2, r3, r9
 800bd72:	d124      	bne.n	800bdbe <_scanf_float+0x3c2>
 800bd74:	2200      	movs	r2, #0
 800bd76:	4659      	mov	r1, fp
 800bd78:	4640      	mov	r0, r8
 800bd7a:	f7ff f985 	bl	800b088 <_strtod_r>
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	6821      	ldr	r1, [r4, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f011 0f02 	tst.w	r1, #2
 800bd88:	ec57 6b10 	vmov	r6, r7, d0
 800bd8c:	f103 0204 	add.w	r2, r3, #4
 800bd90:	d020      	beq.n	800bdd4 <_scanf_float+0x3d8>
 800bd92:	9903      	ldr	r1, [sp, #12]
 800bd94:	600a      	str	r2, [r1, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	e9c3 6700 	strd	r6, r7, [r3]
 800bd9c:	68e3      	ldr	r3, [r4, #12]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60e3      	str	r3, [r4, #12]
 800bda2:	e66c      	b.n	800ba7e <_scanf_float+0x82>
 800bda4:	9b04      	ldr	r3, [sp, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0e4      	beq.n	800bd74 <_scanf_float+0x378>
 800bdaa:	9905      	ldr	r1, [sp, #20]
 800bdac:	230a      	movs	r3, #10
 800bdae:	462a      	mov	r2, r5
 800bdb0:	3101      	adds	r1, #1
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	f002 fad8 	bl	800e368 <_strtol_r>
 800bdb8:	9b04      	ldr	r3, [sp, #16]
 800bdba:	9e05      	ldr	r6, [sp, #20]
 800bdbc:	1ac2      	subs	r2, r0, r3
 800bdbe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bdc2:	429e      	cmp	r6, r3
 800bdc4:	bf28      	it	cs
 800bdc6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bdca:	4912      	ldr	r1, [pc, #72]	; (800be14 <_scanf_float+0x418>)
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f000 f8d5 	bl	800bf7c <siprintf>
 800bdd2:	e7cf      	b.n	800bd74 <_scanf_float+0x378>
 800bdd4:	f011 0f04 	tst.w	r1, #4
 800bdd8:	9903      	ldr	r1, [sp, #12]
 800bdda:	600a      	str	r2, [r1, #0]
 800bddc:	d1db      	bne.n	800bd96 <_scanf_float+0x39a>
 800bdde:	f8d3 8000 	ldr.w	r8, [r3]
 800bde2:	ee10 2a10 	vmov	r2, s0
 800bde6:	ee10 0a10 	vmov	r0, s0
 800bdea:	463b      	mov	r3, r7
 800bdec:	4639      	mov	r1, r7
 800bdee:	f7f4 fead 	bl	8000b4c <__aeabi_dcmpun>
 800bdf2:	b128      	cbz	r0, 800be00 <_scanf_float+0x404>
 800bdf4:	4808      	ldr	r0, [pc, #32]	; (800be18 <_scanf_float+0x41c>)
 800bdf6:	f000 fa7f 	bl	800c2f8 <nanf>
 800bdfa:	ed88 0a00 	vstr	s0, [r8]
 800bdfe:	e7cd      	b.n	800bd9c <_scanf_float+0x3a0>
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 ff00 	bl	8000c08 <__aeabi_d2f>
 800be08:	f8c8 0000 	str.w	r0, [r8]
 800be0c:	e7c6      	b.n	800bd9c <_scanf_float+0x3a0>
 800be0e:	2500      	movs	r5, #0
 800be10:	e635      	b.n	800ba7e <_scanf_float+0x82>
 800be12:	bf00      	nop
 800be14:	0801251f 	.word	0x0801251f
 800be18:	080125d8 	.word	0x080125d8

0800be1c <std>:
 800be1c:	2300      	movs	r3, #0
 800be1e:	b510      	push	{r4, lr}
 800be20:	4604      	mov	r4, r0
 800be22:	e9c0 3300 	strd	r3, r3, [r0]
 800be26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be2a:	6083      	str	r3, [r0, #8]
 800be2c:	8181      	strh	r1, [r0, #12]
 800be2e:	6643      	str	r3, [r0, #100]	; 0x64
 800be30:	81c2      	strh	r2, [r0, #14]
 800be32:	6183      	str	r3, [r0, #24]
 800be34:	4619      	mov	r1, r3
 800be36:	2208      	movs	r2, #8
 800be38:	305c      	adds	r0, #92	; 0x5c
 800be3a:	f000 f930 	bl	800c09e <memset>
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <std+0x38>)
 800be40:	6263      	str	r3, [r4, #36]	; 0x24
 800be42:	4b05      	ldr	r3, [pc, #20]	; (800be58 <std+0x3c>)
 800be44:	62a3      	str	r3, [r4, #40]	; 0x28
 800be46:	4b05      	ldr	r3, [pc, #20]	; (800be5c <std+0x40>)
 800be48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be4a:	4b05      	ldr	r3, [pc, #20]	; (800be60 <std+0x44>)
 800be4c:	6224      	str	r4, [r4, #32]
 800be4e:	6323      	str	r3, [r4, #48]	; 0x30
 800be50:	bd10      	pop	{r4, pc}
 800be52:	bf00      	nop
 800be54:	0800c015 	.word	0x0800c015
 800be58:	0800c03b 	.word	0x0800c03b
 800be5c:	0800c073 	.word	0x0800c073
 800be60:	0800c097 	.word	0x0800c097

0800be64 <stdio_exit_handler>:
 800be64:	4a02      	ldr	r2, [pc, #8]	; (800be70 <stdio_exit_handler+0xc>)
 800be66:	4903      	ldr	r1, [pc, #12]	; (800be74 <stdio_exit_handler+0x10>)
 800be68:	4803      	ldr	r0, [pc, #12]	; (800be78 <stdio_exit_handler+0x14>)
 800be6a:	f000 b869 	b.w	800bf40 <_fwalk_sglue>
 800be6e:	bf00      	nop
 800be70:	20000034 	.word	0x20000034
 800be74:	0800ed85 	.word	0x0800ed85
 800be78:	200001ac 	.word	0x200001ac

0800be7c <cleanup_stdio>:
 800be7c:	6841      	ldr	r1, [r0, #4]
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <cleanup_stdio+0x34>)
 800be80:	4299      	cmp	r1, r3
 800be82:	b510      	push	{r4, lr}
 800be84:	4604      	mov	r4, r0
 800be86:	d001      	beq.n	800be8c <cleanup_stdio+0x10>
 800be88:	f002 ff7c 	bl	800ed84 <_fflush_r>
 800be8c:	68a1      	ldr	r1, [r4, #8]
 800be8e:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <cleanup_stdio+0x38>)
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <cleanup_stdio+0x1e>
 800be94:	4620      	mov	r0, r4
 800be96:	f002 ff75 	bl	800ed84 <_fflush_r>
 800be9a:	68e1      	ldr	r1, [r4, #12]
 800be9c:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <cleanup_stdio+0x3c>)
 800be9e:	4299      	cmp	r1, r3
 800bea0:	d004      	beq.n	800beac <cleanup_stdio+0x30>
 800bea2:	4620      	mov	r0, r4
 800bea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea8:	f002 bf6c 	b.w	800ed84 <_fflush_r>
 800beac:	bd10      	pop	{r4, pc}
 800beae:	bf00      	nop
 800beb0:	20000a88 	.word	0x20000a88
 800beb4:	20000af0 	.word	0x20000af0
 800beb8:	20000b58 	.word	0x20000b58

0800bebc <global_stdio_init.part.0>:
 800bebc:	b510      	push	{r4, lr}
 800bebe:	4b0b      	ldr	r3, [pc, #44]	; (800beec <global_stdio_init.part.0+0x30>)
 800bec0:	4c0b      	ldr	r4, [pc, #44]	; (800bef0 <global_stdio_init.part.0+0x34>)
 800bec2:	4a0c      	ldr	r2, [pc, #48]	; (800bef4 <global_stdio_init.part.0+0x38>)
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	4620      	mov	r0, r4
 800bec8:	2200      	movs	r2, #0
 800beca:	2104      	movs	r1, #4
 800becc:	f7ff ffa6 	bl	800be1c <std>
 800bed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bed4:	2201      	movs	r2, #1
 800bed6:	2109      	movs	r1, #9
 800bed8:	f7ff ffa0 	bl	800be1c <std>
 800bedc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bee0:	2202      	movs	r2, #2
 800bee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee6:	2112      	movs	r1, #18
 800bee8:	f7ff bf98 	b.w	800be1c <std>
 800beec:	20000bc0 	.word	0x20000bc0
 800bef0:	20000a88 	.word	0x20000a88
 800bef4:	0800be65 	.word	0x0800be65

0800bef8 <__sfp_lock_acquire>:
 800bef8:	4801      	ldr	r0, [pc, #4]	; (800bf00 <__sfp_lock_acquire+0x8>)
 800befa:	f000 b9db 	b.w	800c2b4 <__retarget_lock_acquire_recursive>
 800befe:	bf00      	nop
 800bf00:	20000bc9 	.word	0x20000bc9

0800bf04 <__sfp_lock_release>:
 800bf04:	4801      	ldr	r0, [pc, #4]	; (800bf0c <__sfp_lock_release+0x8>)
 800bf06:	f000 b9d6 	b.w	800c2b6 <__retarget_lock_release_recursive>
 800bf0a:	bf00      	nop
 800bf0c:	20000bc9 	.word	0x20000bc9

0800bf10 <__sinit>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4604      	mov	r4, r0
 800bf14:	f7ff fff0 	bl	800bef8 <__sfp_lock_acquire>
 800bf18:	6a23      	ldr	r3, [r4, #32]
 800bf1a:	b11b      	cbz	r3, 800bf24 <__sinit+0x14>
 800bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf20:	f7ff bff0 	b.w	800bf04 <__sfp_lock_release>
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <__sinit+0x28>)
 800bf26:	6223      	str	r3, [r4, #32]
 800bf28:	4b04      	ldr	r3, [pc, #16]	; (800bf3c <__sinit+0x2c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1f5      	bne.n	800bf1c <__sinit+0xc>
 800bf30:	f7ff ffc4 	bl	800bebc <global_stdio_init.part.0>
 800bf34:	e7f2      	b.n	800bf1c <__sinit+0xc>
 800bf36:	bf00      	nop
 800bf38:	0800be7d 	.word	0x0800be7d
 800bf3c:	20000bc0 	.word	0x20000bc0

0800bf40 <_fwalk_sglue>:
 800bf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf44:	4607      	mov	r7, r0
 800bf46:	4688      	mov	r8, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf50:	f1b9 0901 	subs.w	r9, r9, #1
 800bf54:	d505      	bpl.n	800bf62 <_fwalk_sglue+0x22>
 800bf56:	6824      	ldr	r4, [r4, #0]
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	d1f7      	bne.n	800bf4c <_fwalk_sglue+0xc>
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d907      	bls.n	800bf78 <_fwalk_sglue+0x38>
 800bf68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	d003      	beq.n	800bf78 <_fwalk_sglue+0x38>
 800bf70:	4629      	mov	r1, r5
 800bf72:	4638      	mov	r0, r7
 800bf74:	47c0      	blx	r8
 800bf76:	4306      	orrs	r6, r0
 800bf78:	3568      	adds	r5, #104	; 0x68
 800bf7a:	e7e9      	b.n	800bf50 <_fwalk_sglue+0x10>

0800bf7c <siprintf>:
 800bf7c:	b40e      	push	{r1, r2, r3}
 800bf7e:	b500      	push	{lr}
 800bf80:	b09c      	sub	sp, #112	; 0x70
 800bf82:	ab1d      	add	r3, sp, #116	; 0x74
 800bf84:	9002      	str	r0, [sp, #8]
 800bf86:	9006      	str	r0, [sp, #24]
 800bf88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf8c:	4809      	ldr	r0, [pc, #36]	; (800bfb4 <siprintf+0x38>)
 800bf8e:	9107      	str	r1, [sp, #28]
 800bf90:	9104      	str	r1, [sp, #16]
 800bf92:	4909      	ldr	r1, [pc, #36]	; (800bfb8 <siprintf+0x3c>)
 800bf94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf98:	9105      	str	r1, [sp, #20]
 800bf9a:	6800      	ldr	r0, [r0, #0]
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	a902      	add	r1, sp, #8
 800bfa0:	f002 fa4c 	bl	800e43c <_svfiprintf_r>
 800bfa4:	9b02      	ldr	r3, [sp, #8]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	701a      	strb	r2, [r3, #0]
 800bfaa:	b01c      	add	sp, #112	; 0x70
 800bfac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfb0:	b003      	add	sp, #12
 800bfb2:	4770      	bx	lr
 800bfb4:	200001f8 	.word	0x200001f8
 800bfb8:	ffff0208 	.word	0xffff0208

0800bfbc <siscanf>:
 800bfbc:	b40e      	push	{r1, r2, r3}
 800bfbe:	b510      	push	{r4, lr}
 800bfc0:	b09f      	sub	sp, #124	; 0x7c
 800bfc2:	ac21      	add	r4, sp, #132	; 0x84
 800bfc4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bfc8:	f854 2b04 	ldr.w	r2, [r4], #4
 800bfcc:	9201      	str	r2, [sp, #4]
 800bfce:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bfd2:	9004      	str	r0, [sp, #16]
 800bfd4:	9008      	str	r0, [sp, #32]
 800bfd6:	f7f4 f95b 	bl	8000290 <strlen>
 800bfda:	4b0c      	ldr	r3, [pc, #48]	; (800c00c <siscanf+0x50>)
 800bfdc:	9005      	str	r0, [sp, #20]
 800bfde:	9009      	str	r0, [sp, #36]	; 0x24
 800bfe0:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe2:	480b      	ldr	r0, [pc, #44]	; (800c010 <siscanf+0x54>)
 800bfe4:	9a01      	ldr	r2, [sp, #4]
 800bfe6:	6800      	ldr	r0, [r0, #0]
 800bfe8:	9403      	str	r4, [sp, #12]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9311      	str	r3, [sp, #68]	; 0x44
 800bfee:	9316      	str	r3, [sp, #88]	; 0x58
 800bff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4623      	mov	r3, r4
 800bffc:	f002 fb76 	bl	800e6ec <__ssvfiscanf_r>
 800c000:	b01f      	add	sp, #124	; 0x7c
 800c002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c006:	b003      	add	sp, #12
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	0800c037 	.word	0x0800c037
 800c010:	200001f8 	.word	0x200001f8

0800c014 <__sread>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	f000 f8fc 	bl	800c218 <_read_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	bfab      	itete	ge
 800c024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c026:	89a3      	ldrhlt	r3, [r4, #12]
 800c028:	181b      	addge	r3, r3, r0
 800c02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c02e:	bfac      	ite	ge
 800c030:	6563      	strge	r3, [r4, #84]	; 0x54
 800c032:	81a3      	strhlt	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__seofread>:
 800c036:	2000      	movs	r0, #0
 800c038:	4770      	bx	lr

0800c03a <__swrite>:
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	461f      	mov	r7, r3
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	05db      	lsls	r3, r3, #23
 800c044:	4605      	mov	r5, r0
 800c046:	460c      	mov	r4, r1
 800c048:	4616      	mov	r6, r2
 800c04a:	d505      	bpl.n	800c058 <__swrite+0x1e>
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	2302      	movs	r3, #2
 800c052:	2200      	movs	r2, #0
 800c054:	f000 f8ce 	bl	800c1f4 <_lseek_r>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4628      	mov	r0, r5
 800c06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	f000 b8e5 	b.w	800c23c <_write_r>

0800c072 <__sseek>:
 800c072:	b510      	push	{r4, lr}
 800c074:	460c      	mov	r4, r1
 800c076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07a:	f000 f8bb 	bl	800c1f4 <_lseek_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	bf15      	itete	ne
 800c084:	6560      	strne	r0, [r4, #84]	; 0x54
 800c086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08e:	81a3      	strheq	r3, [r4, #12]
 800c090:	bf18      	it	ne
 800c092:	81a3      	strhne	r3, [r4, #12]
 800c094:	bd10      	pop	{r4, pc}

0800c096 <__sclose>:
 800c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09a:	f000 b89b 	b.w	800c1d4 <_close_r>

0800c09e <memset>:
 800c09e:	4402      	add	r2, r0
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d100      	bne.n	800c0a8 <memset+0xa>
 800c0a6:	4770      	bx	lr
 800c0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ac:	e7f9      	b.n	800c0a2 <memset+0x4>

0800c0ae <strchr>:
 800c0ae:	b2c9      	uxtb	r1, r1
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b6:	b11a      	cbz	r2, 800c0c0 <strchr+0x12>
 800c0b8:	428a      	cmp	r2, r1
 800c0ba:	d1f9      	bne.n	800c0b0 <strchr+0x2>
 800c0bc:	4618      	mov	r0, r3
 800c0be:	4770      	bx	lr
 800c0c0:	2900      	cmp	r1, #0
 800c0c2:	bf18      	it	ne
 800c0c4:	2300      	movne	r3, #0
 800c0c6:	e7f9      	b.n	800c0bc <strchr+0xe>

0800c0c8 <strncmp>:
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	b16a      	cbz	r2, 800c0e8 <strncmp+0x20>
 800c0cc:	3901      	subs	r1, #1
 800c0ce:	1884      	adds	r4, r0, r2
 800c0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d103      	bne.n	800c0e4 <strncmp+0x1c>
 800c0dc:	42a0      	cmp	r0, r4
 800c0de:	d001      	beq.n	800c0e4 <strncmp+0x1c>
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	d1f5      	bne.n	800c0d0 <strncmp+0x8>
 800c0e4:	1ad0      	subs	r0, r2, r3
 800c0e6:	bd10      	pop	{r4, pc}
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	e7fc      	b.n	800c0e6 <strncmp+0x1e>

0800c0ec <strncpy>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	3901      	subs	r1, #1
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	b132      	cbz	r2, 800c102 <strncpy+0x16>
 800c0f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0f8:	f803 4b01 	strb.w	r4, [r3], #1
 800c0fc:	3a01      	subs	r2, #1
 800c0fe:	2c00      	cmp	r4, #0
 800c100:	d1f7      	bne.n	800c0f2 <strncpy+0x6>
 800c102:	441a      	add	r2, r3
 800c104:	2100      	movs	r1, #0
 800c106:	4293      	cmp	r3, r2
 800c108:	d100      	bne.n	800c10c <strncpy+0x20>
 800c10a:	bd10      	pop	{r4, pc}
 800c10c:	f803 1b01 	strb.w	r1, [r3], #1
 800c110:	e7f9      	b.n	800c106 <strncpy+0x1a>
	...

0800c114 <strtok>:
 800c114:	4b16      	ldr	r3, [pc, #88]	; (800c170 <strtok+0x5c>)
 800c116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c118:	681e      	ldr	r6, [r3, #0]
 800c11a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c11c:	4605      	mov	r5, r0
 800c11e:	b9fc      	cbnz	r4, 800c160 <strtok+0x4c>
 800c120:	2050      	movs	r0, #80	; 0x50
 800c122:	9101      	str	r1, [sp, #4]
 800c124:	f001 fb2a 	bl	800d77c <malloc>
 800c128:	9901      	ldr	r1, [sp, #4]
 800c12a:	6470      	str	r0, [r6, #68]	; 0x44
 800c12c:	4602      	mov	r2, r0
 800c12e:	b920      	cbnz	r0, 800c13a <strtok+0x26>
 800c130:	4b10      	ldr	r3, [pc, #64]	; (800c174 <strtok+0x60>)
 800c132:	4811      	ldr	r0, [pc, #68]	; (800c178 <strtok+0x64>)
 800c134:	215b      	movs	r1, #91	; 0x5b
 800c136:	f000 f8e5 	bl	800c304 <__assert_func>
 800c13a:	e9c0 4400 	strd	r4, r4, [r0]
 800c13e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c142:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c146:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c14a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c14e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c152:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c156:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c15a:	6184      	str	r4, [r0, #24]
 800c15c:	7704      	strb	r4, [r0, #28]
 800c15e:	6244      	str	r4, [r0, #36]	; 0x24
 800c160:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c162:	2301      	movs	r3, #1
 800c164:	4628      	mov	r0, r5
 800c166:	b002      	add	sp, #8
 800c168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c16c:	f000 b806 	b.w	800c17c <__strtok_r>
 800c170:	200001f8 	.word	0x200001f8
 800c174:	08012524 	.word	0x08012524
 800c178:	0801253b 	.word	0x0801253b

0800c17c <__strtok_r>:
 800c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c17e:	b908      	cbnz	r0, 800c184 <__strtok_r+0x8>
 800c180:	6810      	ldr	r0, [r2, #0]
 800c182:	b188      	cbz	r0, 800c1a8 <__strtok_r+0x2c>
 800c184:	4604      	mov	r4, r0
 800c186:	4620      	mov	r0, r4
 800c188:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c18c:	460f      	mov	r7, r1
 800c18e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c192:	b91e      	cbnz	r6, 800c19c <__strtok_r+0x20>
 800c194:	b965      	cbnz	r5, 800c1b0 <__strtok_r+0x34>
 800c196:	6015      	str	r5, [r2, #0]
 800c198:	4628      	mov	r0, r5
 800c19a:	e005      	b.n	800c1a8 <__strtok_r+0x2c>
 800c19c:	42b5      	cmp	r5, r6
 800c19e:	d1f6      	bne.n	800c18e <__strtok_r+0x12>
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1f0      	bne.n	800c186 <__strtok_r+0xa>
 800c1a4:	6014      	str	r4, [r2, #0]
 800c1a6:	7003      	strb	r3, [r0, #0]
 800c1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1aa:	461c      	mov	r4, r3
 800c1ac:	e00c      	b.n	800c1c8 <__strtok_r+0x4c>
 800c1ae:	b915      	cbnz	r5, 800c1b6 <__strtok_r+0x3a>
 800c1b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c1ba:	42ab      	cmp	r3, r5
 800c1bc:	d1f7      	bne.n	800c1ae <__strtok_r+0x32>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0f3      	beq.n	800c1aa <__strtok_r+0x2e>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c1c8:	6014      	str	r4, [r2, #0]
 800c1ca:	e7ed      	b.n	800c1a8 <__strtok_r+0x2c>

0800c1cc <_localeconv_r>:
 800c1cc:	4800      	ldr	r0, [pc, #0]	; (800c1d0 <_localeconv_r+0x4>)
 800c1ce:	4770      	bx	lr
 800c1d0:	20000130 	.word	0x20000130

0800c1d4 <_close_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d06      	ldr	r5, [pc, #24]	; (800c1f0 <_close_r+0x1c>)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4608      	mov	r0, r1
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	f7f6 fcbb 	bl	8002b5a <_close>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_close_r+0x1a>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_close_r+0x1a>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	20000bc4 	.word	0x20000bc4

0800c1f4 <_lseek_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	; (800c214 <_lseek_r+0x20>)
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	602a      	str	r2, [r5, #0]
 800c202:	461a      	mov	r2, r3
 800c204:	f7f6 fcd0 	bl	8002ba8 <_lseek>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_lseek_r+0x1e>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_lseek_r+0x1e>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	20000bc4 	.word	0x20000bc4

0800c218 <_read_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d07      	ldr	r5, [pc, #28]	; (800c238 <_read_r+0x20>)
 800c21c:	4604      	mov	r4, r0
 800c21e:	4608      	mov	r0, r1
 800c220:	4611      	mov	r1, r2
 800c222:	2200      	movs	r2, #0
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	f7f6 fc5e 	bl	8002ae8 <_read>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_read_r+0x1e>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_read_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20000bc4 	.word	0x20000bc4

0800c23c <_write_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	; (800c25c <_write_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f6 fc69 	bl	8002b22 <_write>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_write_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_write_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	20000bc4 	.word	0x20000bc4

0800c260 <__errno>:
 800c260:	4b01      	ldr	r3, [pc, #4]	; (800c268 <__errno+0x8>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	200001f8 	.word	0x200001f8

0800c26c <__libc_init_array>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4d0d      	ldr	r5, [pc, #52]	; (800c2a4 <__libc_init_array+0x38>)
 800c270:	4c0d      	ldr	r4, [pc, #52]	; (800c2a8 <__libc_init_array+0x3c>)
 800c272:	1b64      	subs	r4, r4, r5
 800c274:	10a4      	asrs	r4, r4, #2
 800c276:	2600      	movs	r6, #0
 800c278:	42a6      	cmp	r6, r4
 800c27a:	d109      	bne.n	800c290 <__libc_init_array+0x24>
 800c27c:	4d0b      	ldr	r5, [pc, #44]	; (800c2ac <__libc_init_array+0x40>)
 800c27e:	4c0c      	ldr	r4, [pc, #48]	; (800c2b0 <__libc_init_array+0x44>)
 800c280:	f004 fdcc 	bl	8010e1c <_init>
 800c284:	1b64      	subs	r4, r4, r5
 800c286:	10a4      	asrs	r4, r4, #2
 800c288:	2600      	movs	r6, #0
 800c28a:	42a6      	cmp	r6, r4
 800c28c:	d105      	bne.n	800c29a <__libc_init_array+0x2e>
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	f855 3b04 	ldr.w	r3, [r5], #4
 800c294:	4798      	blx	r3
 800c296:	3601      	adds	r6, #1
 800c298:	e7ee      	b.n	800c278 <__libc_init_array+0xc>
 800c29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29e:	4798      	blx	r3
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	e7f2      	b.n	800c28a <__libc_init_array+0x1e>
 800c2a4:	08012b88 	.word	0x08012b88
 800c2a8:	08012b88 	.word	0x08012b88
 800c2ac:	08012b88 	.word	0x08012b88
 800c2b0:	08012b8c 	.word	0x08012b8c

0800c2b4 <__retarget_lock_acquire_recursive>:
 800c2b4:	4770      	bx	lr

0800c2b6 <__retarget_lock_release_recursive>:
 800c2b6:	4770      	bx	lr

0800c2b8 <strcpy>:
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2be:	f803 2b01 	strb.w	r2, [r3], #1
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d1f9      	bne.n	800c2ba <strcpy+0x2>
 800c2c6:	4770      	bx	lr

0800c2c8 <memcpy>:
 800c2c8:	440a      	add	r2, r1
 800c2ca:	4291      	cmp	r1, r2
 800c2cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2d0:	d100      	bne.n	800c2d4 <memcpy+0xc>
 800c2d2:	4770      	bx	lr
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2de:	4291      	cmp	r1, r2
 800c2e0:	d1f9      	bne.n	800c2d6 <memcpy+0xe>
 800c2e2:	bd10      	pop	{r4, pc}
 800c2e4:	0000      	movs	r0, r0
	...

0800c2e8 <nan>:
 800c2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2f0 <nan+0x8>
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	00000000 	.word	0x00000000
 800c2f4:	7ff80000 	.word	0x7ff80000

0800c2f8 <nanf>:
 800c2f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c300 <nanf+0x8>
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	7fc00000 	.word	0x7fc00000

0800c304 <__assert_func>:
 800c304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c306:	4614      	mov	r4, r2
 800c308:	461a      	mov	r2, r3
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <__assert_func+0x2c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4605      	mov	r5, r0
 800c310:	68d8      	ldr	r0, [r3, #12]
 800c312:	b14c      	cbz	r4, 800c328 <__assert_func+0x24>
 800c314:	4b07      	ldr	r3, [pc, #28]	; (800c334 <__assert_func+0x30>)
 800c316:	9100      	str	r1, [sp, #0]
 800c318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c31c:	4906      	ldr	r1, [pc, #24]	; (800c338 <__assert_func+0x34>)
 800c31e:	462b      	mov	r3, r5
 800c320:	f002 fd58 	bl	800edd4 <fiprintf>
 800c324:	f002 fe06 	bl	800ef34 <abort>
 800c328:	4b04      	ldr	r3, [pc, #16]	; (800c33c <__assert_func+0x38>)
 800c32a:	461c      	mov	r4, r3
 800c32c:	e7f3      	b.n	800c316 <__assert_func+0x12>
 800c32e:	bf00      	nop
 800c330:	200001f8 	.word	0x200001f8
 800c334:	0801259d 	.word	0x0801259d
 800c338:	080125aa 	.word	0x080125aa
 800c33c:	080125d8 	.word	0x080125d8

0800c340 <quorem>:
 800c340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	6903      	ldr	r3, [r0, #16]
 800c346:	690c      	ldr	r4, [r1, #16]
 800c348:	42a3      	cmp	r3, r4
 800c34a:	4607      	mov	r7, r0
 800c34c:	db7e      	blt.n	800c44c <quorem+0x10c>
 800c34e:	3c01      	subs	r4, #1
 800c350:	f101 0814 	add.w	r8, r1, #20
 800c354:	f100 0514 	add.w	r5, r0, #20
 800c358:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c366:	3301      	adds	r3, #1
 800c368:	429a      	cmp	r2, r3
 800c36a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c36e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c372:	fbb2 f6f3 	udiv	r6, r2, r3
 800c376:	d331      	bcc.n	800c3dc <quorem+0x9c>
 800c378:	f04f 0e00 	mov.w	lr, #0
 800c37c:	4640      	mov	r0, r8
 800c37e:	46ac      	mov	ip, r5
 800c380:	46f2      	mov	sl, lr
 800c382:	f850 2b04 	ldr.w	r2, [r0], #4
 800c386:	b293      	uxth	r3, r2
 800c388:	fb06 e303 	mla	r3, r6, r3, lr
 800c38c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c390:	0c1a      	lsrs	r2, r3, #16
 800c392:	b29b      	uxth	r3, r3
 800c394:	ebaa 0303 	sub.w	r3, sl, r3
 800c398:	f8dc a000 	ldr.w	sl, [ip]
 800c39c:	fa13 f38a 	uxtah	r3, r3, sl
 800c3a0:	fb06 220e 	mla	r2, r6, lr, r2
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	9b00      	ldr	r3, [sp, #0]
 800c3a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c3b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800c3ba:	4581      	cmp	r9, r0
 800c3bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3c0:	f84c 3b04 	str.w	r3, [ip], #4
 800c3c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3c8:	d2db      	bcs.n	800c382 <quorem+0x42>
 800c3ca:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3ce:	b92b      	cbnz	r3, 800c3dc <quorem+0x9c>
 800c3d0:	9b01      	ldr	r3, [sp, #4]
 800c3d2:	3b04      	subs	r3, #4
 800c3d4:	429d      	cmp	r5, r3
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	d32c      	bcc.n	800c434 <quorem+0xf4>
 800c3da:	613c      	str	r4, [r7, #16]
 800c3dc:	4638      	mov	r0, r7
 800c3de:	f001 fd59 	bl	800de94 <__mcmp>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	db22      	blt.n	800c42c <quorem+0xec>
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3f0:	f8d1 c000 	ldr.w	ip, [r1]
 800c3f4:	b293      	uxth	r3, r2
 800c3f6:	1ac3      	subs	r3, r0, r3
 800c3f8:	0c12      	lsrs	r2, r2, #16
 800c3fa:	fa13 f38c 	uxtah	r3, r3, ip
 800c3fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c402:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c406:	b29b      	uxth	r3, r3
 800c408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c40c:	45c1      	cmp	r9, r8
 800c40e:	f841 3b04 	str.w	r3, [r1], #4
 800c412:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c416:	d2e9      	bcs.n	800c3ec <quorem+0xac>
 800c418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c41c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c420:	b922      	cbnz	r2, 800c42c <quorem+0xec>
 800c422:	3b04      	subs	r3, #4
 800c424:	429d      	cmp	r5, r3
 800c426:	461a      	mov	r2, r3
 800c428:	d30a      	bcc.n	800c440 <quorem+0x100>
 800c42a:	613c      	str	r4, [r7, #16]
 800c42c:	4630      	mov	r0, r6
 800c42e:	b003      	add	sp, #12
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	6812      	ldr	r2, [r2, #0]
 800c436:	3b04      	subs	r3, #4
 800c438:	2a00      	cmp	r2, #0
 800c43a:	d1ce      	bne.n	800c3da <quorem+0x9a>
 800c43c:	3c01      	subs	r4, #1
 800c43e:	e7c9      	b.n	800c3d4 <quorem+0x94>
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	3b04      	subs	r3, #4
 800c444:	2a00      	cmp	r2, #0
 800c446:	d1f0      	bne.n	800c42a <quorem+0xea>
 800c448:	3c01      	subs	r4, #1
 800c44a:	e7eb      	b.n	800c424 <quorem+0xe4>
 800c44c:	2000      	movs	r0, #0
 800c44e:	e7ee      	b.n	800c42e <quorem+0xee>

0800c450 <_dtoa_r>:
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	ed2d 8b04 	vpush	{d8-d9}
 800c458:	69c5      	ldr	r5, [r0, #28]
 800c45a:	b093      	sub	sp, #76	; 0x4c
 800c45c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c460:	ec57 6b10 	vmov	r6, r7, d0
 800c464:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c468:	9107      	str	r1, [sp, #28]
 800c46a:	4604      	mov	r4, r0
 800c46c:	920a      	str	r2, [sp, #40]	; 0x28
 800c46e:	930d      	str	r3, [sp, #52]	; 0x34
 800c470:	b975      	cbnz	r5, 800c490 <_dtoa_r+0x40>
 800c472:	2010      	movs	r0, #16
 800c474:	f001 f982 	bl	800d77c <malloc>
 800c478:	4602      	mov	r2, r0
 800c47a:	61e0      	str	r0, [r4, #28]
 800c47c:	b920      	cbnz	r0, 800c488 <_dtoa_r+0x38>
 800c47e:	4bae      	ldr	r3, [pc, #696]	; (800c738 <_dtoa_r+0x2e8>)
 800c480:	21ef      	movs	r1, #239	; 0xef
 800c482:	48ae      	ldr	r0, [pc, #696]	; (800c73c <_dtoa_r+0x2ec>)
 800c484:	f7ff ff3e 	bl	800c304 <__assert_func>
 800c488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c48c:	6005      	str	r5, [r0, #0]
 800c48e:	60c5      	str	r5, [r0, #12]
 800c490:	69e3      	ldr	r3, [r4, #28]
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	b151      	cbz	r1, 800c4ac <_dtoa_r+0x5c>
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	604a      	str	r2, [r1, #4]
 800c49a:	2301      	movs	r3, #1
 800c49c:	4093      	lsls	r3, r2
 800c49e:	608b      	str	r3, [r1, #8]
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f001 fa71 	bl	800d988 <_Bfree>
 800c4a6:	69e3      	ldr	r3, [r4, #28]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	1e3b      	subs	r3, r7, #0
 800c4ae:	bfbb      	ittet	lt
 800c4b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c4b4:	9303      	strlt	r3, [sp, #12]
 800c4b6:	2300      	movge	r3, #0
 800c4b8:	2201      	movlt	r2, #1
 800c4ba:	bfac      	ite	ge
 800c4bc:	f8c8 3000 	strge.w	r3, [r8]
 800c4c0:	f8c8 2000 	strlt.w	r2, [r8]
 800c4c4:	4b9e      	ldr	r3, [pc, #632]	; (800c740 <_dtoa_r+0x2f0>)
 800c4c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c4ca:	ea33 0308 	bics.w	r3, r3, r8
 800c4ce:	d11b      	bne.n	800c508 <_dtoa_r+0xb8>
 800c4d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c4dc:	4333      	orrs	r3, r6
 800c4de:	f000 8593 	beq.w	800d008 <_dtoa_r+0xbb8>
 800c4e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4e4:	b963      	cbnz	r3, 800c500 <_dtoa_r+0xb0>
 800c4e6:	4b97      	ldr	r3, [pc, #604]	; (800c744 <_dtoa_r+0x2f4>)
 800c4e8:	e027      	b.n	800c53a <_dtoa_r+0xea>
 800c4ea:	4b97      	ldr	r3, [pc, #604]	; (800c748 <_dtoa_r+0x2f8>)
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	9800      	ldr	r0, [sp, #0]
 800c4f6:	b013      	add	sp, #76	; 0x4c
 800c4f8:	ecbd 8b04 	vpop	{d8-d9}
 800c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c500:	4b90      	ldr	r3, [pc, #576]	; (800c744 <_dtoa_r+0x2f4>)
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	3303      	adds	r3, #3
 800c506:	e7f3      	b.n	800c4f0 <_dtoa_r+0xa0>
 800c508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c50c:	2200      	movs	r2, #0
 800c50e:	ec51 0b17 	vmov	r0, r1, d7
 800c512:	eeb0 8a47 	vmov.f32	s16, s14
 800c516:	eef0 8a67 	vmov.f32	s17, s15
 800c51a:	2300      	movs	r3, #0
 800c51c:	f7f4 fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c520:	4681      	mov	r9, r0
 800c522:	b160      	cbz	r0, 800c53e <_dtoa_r+0xee>
 800c524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c526:	2301      	movs	r3, #1
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 8568 	beq.w	800d002 <_dtoa_r+0xbb2>
 800c532:	4b86      	ldr	r3, [pc, #536]	; (800c74c <_dtoa_r+0x2fc>)
 800c534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	3b01      	subs	r3, #1
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	e7da      	b.n	800c4f4 <_dtoa_r+0xa4>
 800c53e:	aa10      	add	r2, sp, #64	; 0x40
 800c540:	a911      	add	r1, sp, #68	; 0x44
 800c542:	4620      	mov	r0, r4
 800c544:	eeb0 0a48 	vmov.f32	s0, s16
 800c548:	eef0 0a68 	vmov.f32	s1, s17
 800c54c:	f001 fdb8 	bl	800e0c0 <__d2b>
 800c550:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c554:	4682      	mov	sl, r0
 800c556:	2d00      	cmp	r5, #0
 800c558:	d07f      	beq.n	800c65a <_dtoa_r+0x20a>
 800c55a:	ee18 3a90 	vmov	r3, s17
 800c55e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c562:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c566:	ec51 0b18 	vmov	r0, r1, d8
 800c56a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c56e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c572:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c576:	4619      	mov	r1, r3
 800c578:	2200      	movs	r2, #0
 800c57a:	4b75      	ldr	r3, [pc, #468]	; (800c750 <_dtoa_r+0x300>)
 800c57c:	f7f3 fe94 	bl	80002a8 <__aeabi_dsub>
 800c580:	a367      	add	r3, pc, #412	; (adr r3, 800c720 <_dtoa_r+0x2d0>)
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	f7f4 f847 	bl	8000618 <__aeabi_dmul>
 800c58a:	a367      	add	r3, pc, #412	; (adr r3, 800c728 <_dtoa_r+0x2d8>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe8c 	bl	80002ac <__adddf3>
 800c594:	4606      	mov	r6, r0
 800c596:	4628      	mov	r0, r5
 800c598:	460f      	mov	r7, r1
 800c59a:	f7f3 ffd3 	bl	8000544 <__aeabi_i2d>
 800c59e:	a364      	add	r3, pc, #400	; (adr r3, 800c730 <_dtoa_r+0x2e0>)
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	f7f4 f838 	bl	8000618 <__aeabi_dmul>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	f7f3 fe7c 	bl	80002ac <__adddf3>
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	f7f4 fade 	bl	8000b78 <__aeabi_d2iz>
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4683      	mov	fp, r0
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	f7f4 fa99 	bl	8000afc <__aeabi_dcmplt>
 800c5ca:	b148      	cbz	r0, 800c5e0 <_dtoa_r+0x190>
 800c5cc:	4658      	mov	r0, fp
 800c5ce:	f7f3 ffb9 	bl	8000544 <__aeabi_i2d>
 800c5d2:	4632      	mov	r2, r6
 800c5d4:	463b      	mov	r3, r7
 800c5d6:	f7f4 fa87 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5da:	b908      	cbnz	r0, 800c5e0 <_dtoa_r+0x190>
 800c5dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5e0:	f1bb 0f16 	cmp.w	fp, #22
 800c5e4:	d857      	bhi.n	800c696 <_dtoa_r+0x246>
 800c5e6:	4b5b      	ldr	r3, [pc, #364]	; (800c754 <_dtoa_r+0x304>)
 800c5e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	ec51 0b18 	vmov	r0, r1, d8
 800c5f4:	f7f4 fa82 	bl	8000afc <__aeabi_dcmplt>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d04e      	beq.n	800c69a <_dtoa_r+0x24a>
 800c5fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c600:	2300      	movs	r3, #0
 800c602:	930c      	str	r3, [sp, #48]	; 0x30
 800c604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c606:	1b5b      	subs	r3, r3, r5
 800c608:	1e5a      	subs	r2, r3, #1
 800c60a:	bf45      	ittet	mi
 800c60c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c610:	9305      	strmi	r3, [sp, #20]
 800c612:	2300      	movpl	r3, #0
 800c614:	2300      	movmi	r3, #0
 800c616:	9206      	str	r2, [sp, #24]
 800c618:	bf54      	ite	pl
 800c61a:	9305      	strpl	r3, [sp, #20]
 800c61c:	9306      	strmi	r3, [sp, #24]
 800c61e:	f1bb 0f00 	cmp.w	fp, #0
 800c622:	db3c      	blt.n	800c69e <_dtoa_r+0x24e>
 800c624:	9b06      	ldr	r3, [sp, #24]
 800c626:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c62a:	445b      	add	r3, fp
 800c62c:	9306      	str	r3, [sp, #24]
 800c62e:	2300      	movs	r3, #0
 800c630:	9308      	str	r3, [sp, #32]
 800c632:	9b07      	ldr	r3, [sp, #28]
 800c634:	2b09      	cmp	r3, #9
 800c636:	d868      	bhi.n	800c70a <_dtoa_r+0x2ba>
 800c638:	2b05      	cmp	r3, #5
 800c63a:	bfc4      	itt	gt
 800c63c:	3b04      	subgt	r3, #4
 800c63e:	9307      	strgt	r3, [sp, #28]
 800c640:	9b07      	ldr	r3, [sp, #28]
 800c642:	f1a3 0302 	sub.w	r3, r3, #2
 800c646:	bfcc      	ite	gt
 800c648:	2500      	movgt	r5, #0
 800c64a:	2501      	movle	r5, #1
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	f200 8085 	bhi.w	800c75c <_dtoa_r+0x30c>
 800c652:	e8df f003 	tbb	[pc, r3]
 800c656:	3b2e      	.short	0x3b2e
 800c658:	5839      	.short	0x5839
 800c65a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c65e:	441d      	add	r5, r3
 800c660:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c664:	2b20      	cmp	r3, #32
 800c666:	bfc1      	itttt	gt
 800c668:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c66c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c670:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c674:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c678:	bfd6      	itet	le
 800c67a:	f1c3 0320 	rsble	r3, r3, #32
 800c67e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c682:	fa06 f003 	lslle.w	r0, r6, r3
 800c686:	f7f3 ff4d 	bl	8000524 <__aeabi_ui2d>
 800c68a:	2201      	movs	r2, #1
 800c68c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c690:	3d01      	subs	r5, #1
 800c692:	920e      	str	r2, [sp, #56]	; 0x38
 800c694:	e76f      	b.n	800c576 <_dtoa_r+0x126>
 800c696:	2301      	movs	r3, #1
 800c698:	e7b3      	b.n	800c602 <_dtoa_r+0x1b2>
 800c69a:	900c      	str	r0, [sp, #48]	; 0x30
 800c69c:	e7b2      	b.n	800c604 <_dtoa_r+0x1b4>
 800c69e:	9b05      	ldr	r3, [sp, #20]
 800c6a0:	eba3 030b 	sub.w	r3, r3, fp
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	f1cb 0300 	rsb	r3, fp, #0
 800c6aa:	9308      	str	r3, [sp, #32]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6b0:	e7bf      	b.n	800c632 <_dtoa_r+0x1e2>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dc52      	bgt.n	800c762 <_dtoa_r+0x312>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	920a      	str	r2, [sp, #40]	; 0x28
 800c6c6:	e00b      	b.n	800c6e0 <_dtoa_r+0x290>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e7f3      	b.n	800c6b4 <_dtoa_r+0x264>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d2:	445b      	add	r3, fp
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	bfb8      	it	lt
 800c6de:	2301      	movlt	r3, #1
 800c6e0:	69e0      	ldr	r0, [r4, #28]
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	2204      	movs	r2, #4
 800c6e6:	f102 0614 	add.w	r6, r2, #20
 800c6ea:	429e      	cmp	r6, r3
 800c6ec:	d93d      	bls.n	800c76a <_dtoa_r+0x31a>
 800c6ee:	6041      	str	r1, [r0, #4]
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 f909 	bl	800d908 <_Balloc>
 800c6f6:	9000      	str	r0, [sp, #0]
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d139      	bne.n	800c770 <_dtoa_r+0x320>
 800c6fc:	4b16      	ldr	r3, [pc, #88]	; (800c758 <_dtoa_r+0x308>)
 800c6fe:	4602      	mov	r2, r0
 800c700:	f240 11af 	movw	r1, #431	; 0x1af
 800c704:	e6bd      	b.n	800c482 <_dtoa_r+0x32>
 800c706:	2301      	movs	r3, #1
 800c708:	e7e1      	b.n	800c6ce <_dtoa_r+0x27e>
 800c70a:	2501      	movs	r5, #1
 800c70c:	2300      	movs	r3, #0
 800c70e:	9307      	str	r3, [sp, #28]
 800c710:	9509      	str	r5, [sp, #36]	; 0x24
 800c712:	f04f 33ff 	mov.w	r3, #4294967295
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	9304      	str	r3, [sp, #16]
 800c71a:	2200      	movs	r2, #0
 800c71c:	2312      	movs	r3, #18
 800c71e:	e7d1      	b.n	800c6c4 <_dtoa_r+0x274>
 800c720:	636f4361 	.word	0x636f4361
 800c724:	3fd287a7 	.word	0x3fd287a7
 800c728:	8b60c8b3 	.word	0x8b60c8b3
 800c72c:	3fc68a28 	.word	0x3fc68a28
 800c730:	509f79fb 	.word	0x509f79fb
 800c734:	3fd34413 	.word	0x3fd34413
 800c738:	08012524 	.word	0x08012524
 800c73c:	080125e6 	.word	0x080125e6
 800c740:	7ff00000 	.word	0x7ff00000
 800c744:	080125e2 	.word	0x080125e2
 800c748:	080125d9 	.word	0x080125d9
 800c74c:	0801292d 	.word	0x0801292d
 800c750:	3ff80000 	.word	0x3ff80000
 800c754:	08012730 	.word	0x08012730
 800c758:	0801263e 	.word	0x0801263e
 800c75c:	2301      	movs	r3, #1
 800c75e:	9309      	str	r3, [sp, #36]	; 0x24
 800c760:	e7d7      	b.n	800c712 <_dtoa_r+0x2c2>
 800c762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	e7ba      	b.n	800c6e0 <_dtoa_r+0x290>
 800c76a:	3101      	adds	r1, #1
 800c76c:	0052      	lsls	r2, r2, #1
 800c76e:	e7ba      	b.n	800c6e6 <_dtoa_r+0x296>
 800c770:	69e3      	ldr	r3, [r4, #28]
 800c772:	9a00      	ldr	r2, [sp, #0]
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	2b0e      	cmp	r3, #14
 800c77a:	f200 80a8 	bhi.w	800c8ce <_dtoa_r+0x47e>
 800c77e:	2d00      	cmp	r5, #0
 800c780:	f000 80a5 	beq.w	800c8ce <_dtoa_r+0x47e>
 800c784:	f1bb 0f00 	cmp.w	fp, #0
 800c788:	dd38      	ble.n	800c7fc <_dtoa_r+0x3ac>
 800c78a:	4bc0      	ldr	r3, [pc, #768]	; (800ca8c <_dtoa_r+0x63c>)
 800c78c:	f00b 020f 	and.w	r2, fp, #15
 800c790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c794:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c798:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c79c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c7a0:	d019      	beq.n	800c7d6 <_dtoa_r+0x386>
 800c7a2:	4bbb      	ldr	r3, [pc, #748]	; (800ca90 <_dtoa_r+0x640>)
 800c7a4:	ec51 0b18 	vmov	r0, r1, d8
 800c7a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7ac:	f7f4 f85e 	bl	800086c <__aeabi_ddiv>
 800c7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7b4:	f008 080f 	and.w	r8, r8, #15
 800c7b8:	2503      	movs	r5, #3
 800c7ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca90 <_dtoa_r+0x640>
 800c7be:	f1b8 0f00 	cmp.w	r8, #0
 800c7c2:	d10a      	bne.n	800c7da <_dtoa_r+0x38a>
 800c7c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	f7f4 f84e 	bl	800086c <__aeabi_ddiv>
 800c7d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7d4:	e02b      	b.n	800c82e <_dtoa_r+0x3de>
 800c7d6:	2502      	movs	r5, #2
 800c7d8:	e7ef      	b.n	800c7ba <_dtoa_r+0x36a>
 800c7da:	f018 0f01 	tst.w	r8, #1
 800c7de:	d008      	beq.n	800c7f2 <_dtoa_r+0x3a2>
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c7e8:	f7f3 ff16 	bl	8000618 <__aeabi_dmul>
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	460f      	mov	r7, r1
 800c7f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7f6:	f109 0908 	add.w	r9, r9, #8
 800c7fa:	e7e0      	b.n	800c7be <_dtoa_r+0x36e>
 800c7fc:	f000 809f 	beq.w	800c93e <_dtoa_r+0x4ee>
 800c800:	f1cb 0600 	rsb	r6, fp, #0
 800c804:	4ba1      	ldr	r3, [pc, #644]	; (800ca8c <_dtoa_r+0x63c>)
 800c806:	4fa2      	ldr	r7, [pc, #648]	; (800ca90 <_dtoa_r+0x640>)
 800c808:	f006 020f 	and.w	r2, r6, #15
 800c80c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	ec51 0b18 	vmov	r0, r1, d8
 800c818:	f7f3 fefe 	bl	8000618 <__aeabi_dmul>
 800c81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c820:	1136      	asrs	r6, r6, #4
 800c822:	2300      	movs	r3, #0
 800c824:	2502      	movs	r5, #2
 800c826:	2e00      	cmp	r6, #0
 800c828:	d17e      	bne.n	800c928 <_dtoa_r+0x4d8>
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1d0      	bne.n	800c7d0 <_dtoa_r+0x380>
 800c82e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c830:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 8084 	beq.w	800c942 <_dtoa_r+0x4f2>
 800c83a:	4b96      	ldr	r3, [pc, #600]	; (800ca94 <_dtoa_r+0x644>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	4640      	mov	r0, r8
 800c840:	4649      	mov	r1, r9
 800c842:	f7f4 f95b 	bl	8000afc <__aeabi_dcmplt>
 800c846:	2800      	cmp	r0, #0
 800c848:	d07b      	beq.n	800c942 <_dtoa_r+0x4f2>
 800c84a:	9b04      	ldr	r3, [sp, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d078      	beq.n	800c942 <_dtoa_r+0x4f2>
 800c850:	9b01      	ldr	r3, [sp, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	dd39      	ble.n	800c8ca <_dtoa_r+0x47a>
 800c856:	4b90      	ldr	r3, [pc, #576]	; (800ca98 <_dtoa_r+0x648>)
 800c858:	2200      	movs	r2, #0
 800c85a:	4640      	mov	r0, r8
 800c85c:	4649      	mov	r1, r9
 800c85e:	f7f3 fedb 	bl	8000618 <__aeabi_dmul>
 800c862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c866:	9e01      	ldr	r6, [sp, #4]
 800c868:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c86c:	3501      	adds	r5, #1
 800c86e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c872:	4628      	mov	r0, r5
 800c874:	f7f3 fe66 	bl	8000544 <__aeabi_i2d>
 800c878:	4642      	mov	r2, r8
 800c87a:	464b      	mov	r3, r9
 800c87c:	f7f3 fecc 	bl	8000618 <__aeabi_dmul>
 800c880:	4b86      	ldr	r3, [pc, #536]	; (800ca9c <_dtoa_r+0x64c>)
 800c882:	2200      	movs	r2, #0
 800c884:	f7f3 fd12 	bl	80002ac <__adddf3>
 800c888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c88c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c890:	9303      	str	r3, [sp, #12]
 800c892:	2e00      	cmp	r6, #0
 800c894:	d158      	bne.n	800c948 <_dtoa_r+0x4f8>
 800c896:	4b82      	ldr	r3, [pc, #520]	; (800caa0 <_dtoa_r+0x650>)
 800c898:	2200      	movs	r2, #0
 800c89a:	4640      	mov	r0, r8
 800c89c:	4649      	mov	r1, r9
 800c89e:	f7f3 fd03 	bl	80002a8 <__aeabi_dsub>
 800c8a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8a6:	4680      	mov	r8, r0
 800c8a8:	4689      	mov	r9, r1
 800c8aa:	f7f4 f945 	bl	8000b38 <__aeabi_dcmpgt>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	f040 8296 	bne.w	800cde0 <_dtoa_r+0x990>
 800c8b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c8b8:	4640      	mov	r0, r8
 800c8ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8be:	4649      	mov	r1, r9
 800c8c0:	f7f4 f91c 	bl	8000afc <__aeabi_dcmplt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f040 8289 	bne.w	800cddc <_dtoa_r+0x98c>
 800c8ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c8ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f2c0 814e 	blt.w	800cb72 <_dtoa_r+0x722>
 800c8d6:	f1bb 0f0e 	cmp.w	fp, #14
 800c8da:	f300 814a 	bgt.w	800cb72 <_dtoa_r+0x722>
 800c8de:	4b6b      	ldr	r3, [pc, #428]	; (800ca8c <_dtoa_r+0x63c>)
 800c8e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f280 80dc 	bge.w	800caa8 <_dtoa_r+0x658>
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f300 80d8 	bgt.w	800caa8 <_dtoa_r+0x658>
 800c8f8:	f040 826f 	bne.w	800cdda <_dtoa_r+0x98a>
 800c8fc:	4b68      	ldr	r3, [pc, #416]	; (800caa0 <_dtoa_r+0x650>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f3 fe88 	bl	8000618 <__aeabi_dmul>
 800c908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c90c:	f7f4 f90a 	bl	8000b24 <__aeabi_dcmpge>
 800c910:	9e04      	ldr	r6, [sp, #16]
 800c912:	4637      	mov	r7, r6
 800c914:	2800      	cmp	r0, #0
 800c916:	f040 8245 	bne.w	800cda4 <_dtoa_r+0x954>
 800c91a:	9d00      	ldr	r5, [sp, #0]
 800c91c:	2331      	movs	r3, #49	; 0x31
 800c91e:	f805 3b01 	strb.w	r3, [r5], #1
 800c922:	f10b 0b01 	add.w	fp, fp, #1
 800c926:	e241      	b.n	800cdac <_dtoa_r+0x95c>
 800c928:	07f2      	lsls	r2, r6, #31
 800c92a:	d505      	bpl.n	800c938 <_dtoa_r+0x4e8>
 800c92c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c930:	f7f3 fe72 	bl	8000618 <__aeabi_dmul>
 800c934:	3501      	adds	r5, #1
 800c936:	2301      	movs	r3, #1
 800c938:	1076      	asrs	r6, r6, #1
 800c93a:	3708      	adds	r7, #8
 800c93c:	e773      	b.n	800c826 <_dtoa_r+0x3d6>
 800c93e:	2502      	movs	r5, #2
 800c940:	e775      	b.n	800c82e <_dtoa_r+0x3de>
 800c942:	9e04      	ldr	r6, [sp, #16]
 800c944:	465f      	mov	r7, fp
 800c946:	e792      	b.n	800c86e <_dtoa_r+0x41e>
 800c948:	9900      	ldr	r1, [sp, #0]
 800c94a:	4b50      	ldr	r3, [pc, #320]	; (800ca8c <_dtoa_r+0x63c>)
 800c94c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c950:	4431      	add	r1, r6
 800c952:	9102      	str	r1, [sp, #8]
 800c954:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c956:	eeb0 9a47 	vmov.f32	s18, s14
 800c95a:	eef0 9a67 	vmov.f32	s19, s15
 800c95e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c966:	2900      	cmp	r1, #0
 800c968:	d044      	beq.n	800c9f4 <_dtoa_r+0x5a4>
 800c96a:	494e      	ldr	r1, [pc, #312]	; (800caa4 <_dtoa_r+0x654>)
 800c96c:	2000      	movs	r0, #0
 800c96e:	f7f3 ff7d 	bl	800086c <__aeabi_ddiv>
 800c972:	ec53 2b19 	vmov	r2, r3, d9
 800c976:	f7f3 fc97 	bl	80002a8 <__aeabi_dsub>
 800c97a:	9d00      	ldr	r5, [sp, #0]
 800c97c:	ec41 0b19 	vmov	d9, r0, r1
 800c980:	4649      	mov	r1, r9
 800c982:	4640      	mov	r0, r8
 800c984:	f7f4 f8f8 	bl	8000b78 <__aeabi_d2iz>
 800c988:	4606      	mov	r6, r0
 800c98a:	f7f3 fddb 	bl	8000544 <__aeabi_i2d>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fc87 	bl	80002a8 <__aeabi_dsub>
 800c99a:	3630      	adds	r6, #48	; 0x30
 800c99c:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a0:	ec53 2b19 	vmov	r2, r3, d9
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4689      	mov	r9, r1
 800c9a8:	f7f4 f8a8 	bl	8000afc <__aeabi_dcmplt>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d164      	bne.n	800ca7a <_dtoa_r+0x62a>
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	4937      	ldr	r1, [pc, #220]	; (800ca94 <_dtoa_r+0x644>)
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	f7f3 fc76 	bl	80002a8 <__aeabi_dsub>
 800c9bc:	ec53 2b19 	vmov	r2, r3, d9
 800c9c0:	f7f4 f89c 	bl	8000afc <__aeabi_dcmplt>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f040 80b6 	bne.w	800cb36 <_dtoa_r+0x6e6>
 800c9ca:	9b02      	ldr	r3, [sp, #8]
 800c9cc:	429d      	cmp	r5, r3
 800c9ce:	f43f af7c 	beq.w	800c8ca <_dtoa_r+0x47a>
 800c9d2:	4b31      	ldr	r3, [pc, #196]	; (800ca98 <_dtoa_r+0x648>)
 800c9d4:	ec51 0b19 	vmov	r0, r1, d9
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f7f3 fe1d 	bl	8000618 <__aeabi_dmul>
 800c9de:	4b2e      	ldr	r3, [pc, #184]	; (800ca98 <_dtoa_r+0x648>)
 800c9e0:	ec41 0b19 	vmov	d9, r0, r1
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	f7f3 fe15 	bl	8000618 <__aeabi_dmul>
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4689      	mov	r9, r1
 800c9f2:	e7c5      	b.n	800c980 <_dtoa_r+0x530>
 800c9f4:	ec51 0b17 	vmov	r0, r1, d7
 800c9f8:	f7f3 fe0e 	bl	8000618 <__aeabi_dmul>
 800c9fc:	9b02      	ldr	r3, [sp, #8]
 800c9fe:	9d00      	ldr	r5, [sp, #0]
 800ca00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca02:	ec41 0b19 	vmov	d9, r0, r1
 800ca06:	4649      	mov	r1, r9
 800ca08:	4640      	mov	r0, r8
 800ca0a:	f7f4 f8b5 	bl	8000b78 <__aeabi_d2iz>
 800ca0e:	4606      	mov	r6, r0
 800ca10:	f7f3 fd98 	bl	8000544 <__aeabi_i2d>
 800ca14:	3630      	adds	r6, #48	; 0x30
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f3 fc43 	bl	80002a8 <__aeabi_dsub>
 800ca22:	f805 6b01 	strb.w	r6, [r5], #1
 800ca26:	9b02      	ldr	r3, [sp, #8]
 800ca28:	429d      	cmp	r5, r3
 800ca2a:	4680      	mov	r8, r0
 800ca2c:	4689      	mov	r9, r1
 800ca2e:	f04f 0200 	mov.w	r2, #0
 800ca32:	d124      	bne.n	800ca7e <_dtoa_r+0x62e>
 800ca34:	4b1b      	ldr	r3, [pc, #108]	; (800caa4 <_dtoa_r+0x654>)
 800ca36:	ec51 0b19 	vmov	r0, r1, d9
 800ca3a:	f7f3 fc37 	bl	80002ac <__adddf3>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4640      	mov	r0, r8
 800ca44:	4649      	mov	r1, r9
 800ca46:	f7f4 f877 	bl	8000b38 <__aeabi_dcmpgt>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d173      	bne.n	800cb36 <_dtoa_r+0x6e6>
 800ca4e:	ec53 2b19 	vmov	r2, r3, d9
 800ca52:	4914      	ldr	r1, [pc, #80]	; (800caa4 <_dtoa_r+0x654>)
 800ca54:	2000      	movs	r0, #0
 800ca56:	f7f3 fc27 	bl	80002a8 <__aeabi_dsub>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	4640      	mov	r0, r8
 800ca60:	4649      	mov	r1, r9
 800ca62:	f7f4 f84b 	bl	8000afc <__aeabi_dcmplt>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f43f af2f 	beq.w	800c8ca <_dtoa_r+0x47a>
 800ca6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca6e:	1e6b      	subs	r3, r5, #1
 800ca70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca76:	2b30      	cmp	r3, #48	; 0x30
 800ca78:	d0f8      	beq.n	800ca6c <_dtoa_r+0x61c>
 800ca7a:	46bb      	mov	fp, r7
 800ca7c:	e04a      	b.n	800cb14 <_dtoa_r+0x6c4>
 800ca7e:	4b06      	ldr	r3, [pc, #24]	; (800ca98 <_dtoa_r+0x648>)
 800ca80:	f7f3 fdca 	bl	8000618 <__aeabi_dmul>
 800ca84:	4680      	mov	r8, r0
 800ca86:	4689      	mov	r9, r1
 800ca88:	e7bd      	b.n	800ca06 <_dtoa_r+0x5b6>
 800ca8a:	bf00      	nop
 800ca8c:	08012730 	.word	0x08012730
 800ca90:	08012708 	.word	0x08012708
 800ca94:	3ff00000 	.word	0x3ff00000
 800ca98:	40240000 	.word	0x40240000
 800ca9c:	401c0000 	.word	0x401c0000
 800caa0:	40140000 	.word	0x40140000
 800caa4:	3fe00000 	.word	0x3fe00000
 800caa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800caac:	9d00      	ldr	r5, [sp, #0]
 800caae:	4642      	mov	r2, r8
 800cab0:	464b      	mov	r3, r9
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f3 fed9 	bl	800086c <__aeabi_ddiv>
 800caba:	f7f4 f85d 	bl	8000b78 <__aeabi_d2iz>
 800cabe:	9001      	str	r0, [sp, #4]
 800cac0:	f7f3 fd40 	bl	8000544 <__aeabi_i2d>
 800cac4:	4642      	mov	r2, r8
 800cac6:	464b      	mov	r3, r9
 800cac8:	f7f3 fda6 	bl	8000618 <__aeabi_dmul>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4630      	mov	r0, r6
 800cad2:	4639      	mov	r1, r7
 800cad4:	f7f3 fbe8 	bl	80002a8 <__aeabi_dsub>
 800cad8:	9e01      	ldr	r6, [sp, #4]
 800cada:	9f04      	ldr	r7, [sp, #16]
 800cadc:	3630      	adds	r6, #48	; 0x30
 800cade:	f805 6b01 	strb.w	r6, [r5], #1
 800cae2:	9e00      	ldr	r6, [sp, #0]
 800cae4:	1bae      	subs	r6, r5, r6
 800cae6:	42b7      	cmp	r7, r6
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	d134      	bne.n	800cb58 <_dtoa_r+0x708>
 800caee:	f7f3 fbdd 	bl	80002ac <__adddf3>
 800caf2:	4642      	mov	r2, r8
 800caf4:	464b      	mov	r3, r9
 800caf6:	4606      	mov	r6, r0
 800caf8:	460f      	mov	r7, r1
 800cafa:	f7f4 f81d 	bl	8000b38 <__aeabi_dcmpgt>
 800cafe:	b9c8      	cbnz	r0, 800cb34 <_dtoa_r+0x6e4>
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 ffee 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb0c:	b110      	cbz	r0, 800cb14 <_dtoa_r+0x6c4>
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	07db      	lsls	r3, r3, #31
 800cb12:	d40f      	bmi.n	800cb34 <_dtoa_r+0x6e4>
 800cb14:	4651      	mov	r1, sl
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 ff36 	bl	800d988 <_Bfree>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb20:	702b      	strb	r3, [r5, #0]
 800cb22:	f10b 0301 	add.w	r3, fp, #1
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f43f ace2 	beq.w	800c4f4 <_dtoa_r+0xa4>
 800cb30:	601d      	str	r5, [r3, #0]
 800cb32:	e4df      	b.n	800c4f4 <_dtoa_r+0xa4>
 800cb34:	465f      	mov	r7, fp
 800cb36:	462b      	mov	r3, r5
 800cb38:	461d      	mov	r5, r3
 800cb3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb3e:	2a39      	cmp	r2, #57	; 0x39
 800cb40:	d106      	bne.n	800cb50 <_dtoa_r+0x700>
 800cb42:	9a00      	ldr	r2, [sp, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d1f7      	bne.n	800cb38 <_dtoa_r+0x6e8>
 800cb48:	9900      	ldr	r1, [sp, #0]
 800cb4a:	2230      	movs	r2, #48	; 0x30
 800cb4c:	3701      	adds	r7, #1
 800cb4e:	700a      	strb	r2, [r1, #0]
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	3201      	adds	r2, #1
 800cb54:	701a      	strb	r2, [r3, #0]
 800cb56:	e790      	b.n	800ca7a <_dtoa_r+0x62a>
 800cb58:	4ba3      	ldr	r3, [pc, #652]	; (800cde8 <_dtoa_r+0x998>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f7f3 fd5c 	bl	8000618 <__aeabi_dmul>
 800cb60:	2200      	movs	r2, #0
 800cb62:	2300      	movs	r3, #0
 800cb64:	4606      	mov	r6, r0
 800cb66:	460f      	mov	r7, r1
 800cb68:	f7f3 ffbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d09e      	beq.n	800caae <_dtoa_r+0x65e>
 800cb70:	e7d0      	b.n	800cb14 <_dtoa_r+0x6c4>
 800cb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb74:	2a00      	cmp	r2, #0
 800cb76:	f000 80ca 	beq.w	800cd0e <_dtoa_r+0x8be>
 800cb7a:	9a07      	ldr	r2, [sp, #28]
 800cb7c:	2a01      	cmp	r2, #1
 800cb7e:	f300 80ad 	bgt.w	800ccdc <_dtoa_r+0x88c>
 800cb82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	f000 80a5 	beq.w	800ccd4 <_dtoa_r+0x884>
 800cb8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb8e:	9e08      	ldr	r6, [sp, #32]
 800cb90:	9d05      	ldr	r5, [sp, #20]
 800cb92:	9a05      	ldr	r2, [sp, #20]
 800cb94:	441a      	add	r2, r3
 800cb96:	9205      	str	r2, [sp, #20]
 800cb98:	9a06      	ldr	r2, [sp, #24]
 800cb9a:	2101      	movs	r1, #1
 800cb9c:	441a      	add	r2, r3
 800cb9e:	4620      	mov	r0, r4
 800cba0:	9206      	str	r2, [sp, #24]
 800cba2:	f000 fff1 	bl	800db88 <__i2b>
 800cba6:	4607      	mov	r7, r0
 800cba8:	b165      	cbz	r5, 800cbc4 <_dtoa_r+0x774>
 800cbaa:	9b06      	ldr	r3, [sp, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	dd09      	ble.n	800cbc4 <_dtoa_r+0x774>
 800cbb0:	42ab      	cmp	r3, r5
 800cbb2:	9a05      	ldr	r2, [sp, #20]
 800cbb4:	bfa8      	it	ge
 800cbb6:	462b      	movge	r3, r5
 800cbb8:	1ad2      	subs	r2, r2, r3
 800cbba:	9205      	str	r2, [sp, #20]
 800cbbc:	9a06      	ldr	r2, [sp, #24]
 800cbbe:	1aed      	subs	r5, r5, r3
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	9306      	str	r3, [sp, #24]
 800cbc4:	9b08      	ldr	r3, [sp, #32]
 800cbc6:	b1f3      	cbz	r3, 800cc06 <_dtoa_r+0x7b6>
 800cbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 80a3 	beq.w	800cd16 <_dtoa_r+0x8c6>
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	dd10      	ble.n	800cbf6 <_dtoa_r+0x7a6>
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f001 f895 	bl	800dd08 <__pow5mult>
 800cbde:	4652      	mov	r2, sl
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f000 ffe5 	bl	800dbb4 <__multiply>
 800cbea:	4651      	mov	r1, sl
 800cbec:	4680      	mov	r8, r0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 feca 	bl	800d988 <_Bfree>
 800cbf4:	46c2      	mov	sl, r8
 800cbf6:	9b08      	ldr	r3, [sp, #32]
 800cbf8:	1b9a      	subs	r2, r3, r6
 800cbfa:	d004      	beq.n	800cc06 <_dtoa_r+0x7b6>
 800cbfc:	4651      	mov	r1, sl
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f001 f882 	bl	800dd08 <__pow5mult>
 800cc04:	4682      	mov	sl, r0
 800cc06:	2101      	movs	r1, #1
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 ffbd 	bl	800db88 <__i2b>
 800cc0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	4606      	mov	r6, r0
 800cc14:	f340 8081 	ble.w	800cd1a <_dtoa_r+0x8ca>
 800cc18:	461a      	mov	r2, r3
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f001 f873 	bl	800dd08 <__pow5mult>
 800cc22:	9b07      	ldr	r3, [sp, #28]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	4606      	mov	r6, r0
 800cc28:	dd7a      	ble.n	800cd20 <_dtoa_r+0x8d0>
 800cc2a:	f04f 0800 	mov.w	r8, #0
 800cc2e:	6933      	ldr	r3, [r6, #16]
 800cc30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc34:	6918      	ldr	r0, [r3, #16]
 800cc36:	f000 ff59 	bl	800daec <__hi0bits>
 800cc3a:	f1c0 0020 	rsb	r0, r0, #32
 800cc3e:	9b06      	ldr	r3, [sp, #24]
 800cc40:	4418      	add	r0, r3
 800cc42:	f010 001f 	ands.w	r0, r0, #31
 800cc46:	f000 8094 	beq.w	800cd72 <_dtoa_r+0x922>
 800cc4a:	f1c0 0320 	rsb	r3, r0, #32
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	f340 8085 	ble.w	800cd5e <_dtoa_r+0x90e>
 800cc54:	9b05      	ldr	r3, [sp, #20]
 800cc56:	f1c0 001c 	rsb	r0, r0, #28
 800cc5a:	4403      	add	r3, r0
 800cc5c:	9305      	str	r3, [sp, #20]
 800cc5e:	9b06      	ldr	r3, [sp, #24]
 800cc60:	4403      	add	r3, r0
 800cc62:	4405      	add	r5, r0
 800cc64:	9306      	str	r3, [sp, #24]
 800cc66:	9b05      	ldr	r3, [sp, #20]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dd05      	ble.n	800cc78 <_dtoa_r+0x828>
 800cc6c:	4651      	mov	r1, sl
 800cc6e:	461a      	mov	r2, r3
 800cc70:	4620      	mov	r0, r4
 800cc72:	f001 f8a3 	bl	800ddbc <__lshift>
 800cc76:	4682      	mov	sl, r0
 800cc78:	9b06      	ldr	r3, [sp, #24]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	dd05      	ble.n	800cc8a <_dtoa_r+0x83a>
 800cc7e:	4631      	mov	r1, r6
 800cc80:	461a      	mov	r2, r3
 800cc82:	4620      	mov	r0, r4
 800cc84:	f001 f89a 	bl	800ddbc <__lshift>
 800cc88:	4606      	mov	r6, r0
 800cc8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d072      	beq.n	800cd76 <_dtoa_r+0x926>
 800cc90:	4631      	mov	r1, r6
 800cc92:	4650      	mov	r0, sl
 800cc94:	f001 f8fe 	bl	800de94 <__mcmp>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	da6c      	bge.n	800cd76 <_dtoa_r+0x926>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4651      	mov	r1, sl
 800cca0:	220a      	movs	r2, #10
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fe92 	bl	800d9cc <__multadd>
 800cca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccae:	4682      	mov	sl, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 81b0 	beq.w	800d016 <_dtoa_r+0xbc6>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	4639      	mov	r1, r7
 800ccba:	220a      	movs	r2, #10
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fe85 	bl	800d9cc <__multadd>
 800ccc2:	9b01      	ldr	r3, [sp, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	f300 8096 	bgt.w	800cdf8 <_dtoa_r+0x9a8>
 800cccc:	9b07      	ldr	r3, [sp, #28]
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	dc59      	bgt.n	800cd86 <_dtoa_r+0x936>
 800ccd2:	e091      	b.n	800cdf8 <_dtoa_r+0x9a8>
 800ccd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccda:	e758      	b.n	800cb8e <_dtoa_r+0x73e>
 800ccdc:	9b04      	ldr	r3, [sp, #16]
 800ccde:	1e5e      	subs	r6, r3, #1
 800cce0:	9b08      	ldr	r3, [sp, #32]
 800cce2:	42b3      	cmp	r3, r6
 800cce4:	bfbf      	itttt	lt
 800cce6:	9b08      	ldrlt	r3, [sp, #32]
 800cce8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ccea:	9608      	strlt	r6, [sp, #32]
 800ccec:	1af3      	sublt	r3, r6, r3
 800ccee:	bfb4      	ite	lt
 800ccf0:	18d2      	addlt	r2, r2, r3
 800ccf2:	1b9e      	subge	r6, r3, r6
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	bfbc      	itt	lt
 800ccf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ccfa:	2600      	movlt	r6, #0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	bfb7      	itett	lt
 800cd00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cd04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cd08:	1a9d      	sublt	r5, r3, r2
 800cd0a:	2300      	movlt	r3, #0
 800cd0c:	e741      	b.n	800cb92 <_dtoa_r+0x742>
 800cd0e:	9e08      	ldr	r6, [sp, #32]
 800cd10:	9d05      	ldr	r5, [sp, #20]
 800cd12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd14:	e748      	b.n	800cba8 <_dtoa_r+0x758>
 800cd16:	9a08      	ldr	r2, [sp, #32]
 800cd18:	e770      	b.n	800cbfc <_dtoa_r+0x7ac>
 800cd1a:	9b07      	ldr	r3, [sp, #28]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	dc19      	bgt.n	800cd54 <_dtoa_r+0x904>
 800cd20:	9b02      	ldr	r3, [sp, #8]
 800cd22:	b9bb      	cbnz	r3, 800cd54 <_dtoa_r+0x904>
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd2a:	b99b      	cbnz	r3, 800cd54 <_dtoa_r+0x904>
 800cd2c:	9b03      	ldr	r3, [sp, #12]
 800cd2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd32:	0d1b      	lsrs	r3, r3, #20
 800cd34:	051b      	lsls	r3, r3, #20
 800cd36:	b183      	cbz	r3, 800cd5a <_dtoa_r+0x90a>
 800cd38:	9b05      	ldr	r3, [sp, #20]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	9305      	str	r3, [sp, #20]
 800cd3e:	9b06      	ldr	r3, [sp, #24]
 800cd40:	3301      	adds	r3, #1
 800cd42:	9306      	str	r3, [sp, #24]
 800cd44:	f04f 0801 	mov.w	r8, #1
 800cd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f47f af6f 	bne.w	800cc2e <_dtoa_r+0x7de>
 800cd50:	2001      	movs	r0, #1
 800cd52:	e774      	b.n	800cc3e <_dtoa_r+0x7ee>
 800cd54:	f04f 0800 	mov.w	r8, #0
 800cd58:	e7f6      	b.n	800cd48 <_dtoa_r+0x8f8>
 800cd5a:	4698      	mov	r8, r3
 800cd5c:	e7f4      	b.n	800cd48 <_dtoa_r+0x8f8>
 800cd5e:	d082      	beq.n	800cc66 <_dtoa_r+0x816>
 800cd60:	9a05      	ldr	r2, [sp, #20]
 800cd62:	331c      	adds	r3, #28
 800cd64:	441a      	add	r2, r3
 800cd66:	9205      	str	r2, [sp, #20]
 800cd68:	9a06      	ldr	r2, [sp, #24]
 800cd6a:	441a      	add	r2, r3
 800cd6c:	441d      	add	r5, r3
 800cd6e:	9206      	str	r2, [sp, #24]
 800cd70:	e779      	b.n	800cc66 <_dtoa_r+0x816>
 800cd72:	4603      	mov	r3, r0
 800cd74:	e7f4      	b.n	800cd60 <_dtoa_r+0x910>
 800cd76:	9b04      	ldr	r3, [sp, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	dc37      	bgt.n	800cdec <_dtoa_r+0x99c>
 800cd7c:	9b07      	ldr	r3, [sp, #28]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	dd34      	ble.n	800cdec <_dtoa_r+0x99c>
 800cd82:	9b04      	ldr	r3, [sp, #16]
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	9b01      	ldr	r3, [sp, #4]
 800cd88:	b963      	cbnz	r3, 800cda4 <_dtoa_r+0x954>
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	2205      	movs	r2, #5
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 fe1c 	bl	800d9cc <__multadd>
 800cd94:	4601      	mov	r1, r0
 800cd96:	4606      	mov	r6, r0
 800cd98:	4650      	mov	r0, sl
 800cd9a:	f001 f87b 	bl	800de94 <__mcmp>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	f73f adbb 	bgt.w	800c91a <_dtoa_r+0x4ca>
 800cda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda6:	9d00      	ldr	r5, [sp, #0]
 800cda8:	ea6f 0b03 	mvn.w	fp, r3
 800cdac:	f04f 0800 	mov.w	r8, #0
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 fde8 	bl	800d988 <_Bfree>
 800cdb8:	2f00      	cmp	r7, #0
 800cdba:	f43f aeab 	beq.w	800cb14 <_dtoa_r+0x6c4>
 800cdbe:	f1b8 0f00 	cmp.w	r8, #0
 800cdc2:	d005      	beq.n	800cdd0 <_dtoa_r+0x980>
 800cdc4:	45b8      	cmp	r8, r7
 800cdc6:	d003      	beq.n	800cdd0 <_dtoa_r+0x980>
 800cdc8:	4641      	mov	r1, r8
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f000 fddc 	bl	800d988 <_Bfree>
 800cdd0:	4639      	mov	r1, r7
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f000 fdd8 	bl	800d988 <_Bfree>
 800cdd8:	e69c      	b.n	800cb14 <_dtoa_r+0x6c4>
 800cdda:	2600      	movs	r6, #0
 800cddc:	4637      	mov	r7, r6
 800cdde:	e7e1      	b.n	800cda4 <_dtoa_r+0x954>
 800cde0:	46bb      	mov	fp, r7
 800cde2:	4637      	mov	r7, r6
 800cde4:	e599      	b.n	800c91a <_dtoa_r+0x4ca>
 800cde6:	bf00      	nop
 800cde8:	40240000 	.word	0x40240000
 800cdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f000 80c8 	beq.w	800cf84 <_dtoa_r+0xb34>
 800cdf4:	9b04      	ldr	r3, [sp, #16]
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	2d00      	cmp	r5, #0
 800cdfa:	dd05      	ble.n	800ce08 <_dtoa_r+0x9b8>
 800cdfc:	4639      	mov	r1, r7
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 ffdb 	bl	800ddbc <__lshift>
 800ce06:	4607      	mov	r7, r0
 800ce08:	f1b8 0f00 	cmp.w	r8, #0
 800ce0c:	d05b      	beq.n	800cec6 <_dtoa_r+0xa76>
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 fd79 	bl	800d908 <_Balloc>
 800ce16:	4605      	mov	r5, r0
 800ce18:	b928      	cbnz	r0, 800ce26 <_dtoa_r+0x9d6>
 800ce1a:	4b83      	ldr	r3, [pc, #524]	; (800d028 <_dtoa_r+0xbd8>)
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ce22:	f7ff bb2e 	b.w	800c482 <_dtoa_r+0x32>
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	3202      	adds	r2, #2
 800ce2a:	0092      	lsls	r2, r2, #2
 800ce2c:	f107 010c 	add.w	r1, r7, #12
 800ce30:	300c      	adds	r0, #12
 800ce32:	f7ff fa49 	bl	800c2c8 <memcpy>
 800ce36:	2201      	movs	r2, #1
 800ce38:	4629      	mov	r1, r5
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 ffbe 	bl	800ddbc <__lshift>
 800ce40:	9b00      	ldr	r3, [sp, #0]
 800ce42:	3301      	adds	r3, #1
 800ce44:	9304      	str	r3, [sp, #16]
 800ce46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	9308      	str	r3, [sp, #32]
 800ce4e:	9b02      	ldr	r3, [sp, #8]
 800ce50:	f003 0301 	and.w	r3, r3, #1
 800ce54:	46b8      	mov	r8, r7
 800ce56:	9306      	str	r3, [sp, #24]
 800ce58:	4607      	mov	r7, r0
 800ce5a:	9b04      	ldr	r3, [sp, #16]
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	4650      	mov	r0, sl
 800ce62:	9301      	str	r3, [sp, #4]
 800ce64:	f7ff fa6c 	bl	800c340 <quorem>
 800ce68:	4641      	mov	r1, r8
 800ce6a:	9002      	str	r0, [sp, #8]
 800ce6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce70:	4650      	mov	r0, sl
 800ce72:	f001 f80f 	bl	800de94 <__mcmp>
 800ce76:	463a      	mov	r2, r7
 800ce78:	9005      	str	r0, [sp, #20]
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f001 f825 	bl	800decc <__mdiff>
 800ce82:	68c2      	ldr	r2, [r0, #12]
 800ce84:	4605      	mov	r5, r0
 800ce86:	bb02      	cbnz	r2, 800ceca <_dtoa_r+0xa7a>
 800ce88:	4601      	mov	r1, r0
 800ce8a:	4650      	mov	r0, sl
 800ce8c:	f001 f802 	bl	800de94 <__mcmp>
 800ce90:	4602      	mov	r2, r0
 800ce92:	4629      	mov	r1, r5
 800ce94:	4620      	mov	r0, r4
 800ce96:	9209      	str	r2, [sp, #36]	; 0x24
 800ce98:	f000 fd76 	bl	800d988 <_Bfree>
 800ce9c:	9b07      	ldr	r3, [sp, #28]
 800ce9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cea0:	9d04      	ldr	r5, [sp, #16]
 800cea2:	ea43 0102 	orr.w	r1, r3, r2
 800cea6:	9b06      	ldr	r3, [sp, #24]
 800cea8:	4319      	orrs	r1, r3
 800ceaa:	d110      	bne.n	800cece <_dtoa_r+0xa7e>
 800ceac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ceb0:	d029      	beq.n	800cf06 <_dtoa_r+0xab6>
 800ceb2:	9b05      	ldr	r3, [sp, #20]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dd02      	ble.n	800cebe <_dtoa_r+0xa6e>
 800ceb8:	9b02      	ldr	r3, [sp, #8]
 800ceba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cebe:	9b01      	ldr	r3, [sp, #4]
 800cec0:	f883 9000 	strb.w	r9, [r3]
 800cec4:	e774      	b.n	800cdb0 <_dtoa_r+0x960>
 800cec6:	4638      	mov	r0, r7
 800cec8:	e7ba      	b.n	800ce40 <_dtoa_r+0x9f0>
 800ceca:	2201      	movs	r2, #1
 800cecc:	e7e1      	b.n	800ce92 <_dtoa_r+0xa42>
 800cece:	9b05      	ldr	r3, [sp, #20]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	db04      	blt.n	800cede <_dtoa_r+0xa8e>
 800ced4:	9907      	ldr	r1, [sp, #28]
 800ced6:	430b      	orrs	r3, r1
 800ced8:	9906      	ldr	r1, [sp, #24]
 800ceda:	430b      	orrs	r3, r1
 800cedc:	d120      	bne.n	800cf20 <_dtoa_r+0xad0>
 800cede:	2a00      	cmp	r2, #0
 800cee0:	dded      	ble.n	800cebe <_dtoa_r+0xa6e>
 800cee2:	4651      	mov	r1, sl
 800cee4:	2201      	movs	r2, #1
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 ff68 	bl	800ddbc <__lshift>
 800ceec:	4631      	mov	r1, r6
 800ceee:	4682      	mov	sl, r0
 800cef0:	f000 ffd0 	bl	800de94 <__mcmp>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	dc03      	bgt.n	800cf00 <_dtoa_r+0xab0>
 800cef8:	d1e1      	bne.n	800cebe <_dtoa_r+0xa6e>
 800cefa:	f019 0f01 	tst.w	r9, #1
 800cefe:	d0de      	beq.n	800cebe <_dtoa_r+0xa6e>
 800cf00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf04:	d1d8      	bne.n	800ceb8 <_dtoa_r+0xa68>
 800cf06:	9a01      	ldr	r2, [sp, #4]
 800cf08:	2339      	movs	r3, #57	; 0x39
 800cf0a:	7013      	strb	r3, [r2, #0]
 800cf0c:	462b      	mov	r3, r5
 800cf0e:	461d      	mov	r5, r3
 800cf10:	3b01      	subs	r3, #1
 800cf12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf16:	2a39      	cmp	r2, #57	; 0x39
 800cf18:	d06c      	beq.n	800cff4 <_dtoa_r+0xba4>
 800cf1a:	3201      	adds	r2, #1
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	e747      	b.n	800cdb0 <_dtoa_r+0x960>
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	dd07      	ble.n	800cf34 <_dtoa_r+0xae4>
 800cf24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf28:	d0ed      	beq.n	800cf06 <_dtoa_r+0xab6>
 800cf2a:	9a01      	ldr	r2, [sp, #4]
 800cf2c:	f109 0301 	add.w	r3, r9, #1
 800cf30:	7013      	strb	r3, [r2, #0]
 800cf32:	e73d      	b.n	800cdb0 <_dtoa_r+0x960>
 800cf34:	9b04      	ldr	r3, [sp, #16]
 800cf36:	9a08      	ldr	r2, [sp, #32]
 800cf38:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d043      	beq.n	800cfc8 <_dtoa_r+0xb78>
 800cf40:	4651      	mov	r1, sl
 800cf42:	2300      	movs	r3, #0
 800cf44:	220a      	movs	r2, #10
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 fd40 	bl	800d9cc <__multadd>
 800cf4c:	45b8      	cmp	r8, r7
 800cf4e:	4682      	mov	sl, r0
 800cf50:	f04f 0300 	mov.w	r3, #0
 800cf54:	f04f 020a 	mov.w	r2, #10
 800cf58:	4641      	mov	r1, r8
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	d107      	bne.n	800cf6e <_dtoa_r+0xb1e>
 800cf5e:	f000 fd35 	bl	800d9cc <__multadd>
 800cf62:	4680      	mov	r8, r0
 800cf64:	4607      	mov	r7, r0
 800cf66:	9b04      	ldr	r3, [sp, #16]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	9304      	str	r3, [sp, #16]
 800cf6c:	e775      	b.n	800ce5a <_dtoa_r+0xa0a>
 800cf6e:	f000 fd2d 	bl	800d9cc <__multadd>
 800cf72:	4639      	mov	r1, r7
 800cf74:	4680      	mov	r8, r0
 800cf76:	2300      	movs	r3, #0
 800cf78:	220a      	movs	r2, #10
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 fd26 	bl	800d9cc <__multadd>
 800cf80:	4607      	mov	r7, r0
 800cf82:	e7f0      	b.n	800cf66 <_dtoa_r+0xb16>
 800cf84:	9b04      	ldr	r3, [sp, #16]
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	9d00      	ldr	r5, [sp, #0]
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4650      	mov	r0, sl
 800cf8e:	f7ff f9d7 	bl	800c340 <quorem>
 800cf92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf96:	9b00      	ldr	r3, [sp, #0]
 800cf98:	f805 9b01 	strb.w	r9, [r5], #1
 800cf9c:	1aea      	subs	r2, r5, r3
 800cf9e:	9b01      	ldr	r3, [sp, #4]
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	dd07      	ble.n	800cfb4 <_dtoa_r+0xb64>
 800cfa4:	4651      	mov	r1, sl
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	220a      	movs	r2, #10
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 fd0e 	bl	800d9cc <__multadd>
 800cfb0:	4682      	mov	sl, r0
 800cfb2:	e7ea      	b.n	800cf8a <_dtoa_r+0xb3a>
 800cfb4:	9b01      	ldr	r3, [sp, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bfc8      	it	gt
 800cfba:	461d      	movgt	r5, r3
 800cfbc:	9b00      	ldr	r3, [sp, #0]
 800cfbe:	bfd8      	it	le
 800cfc0:	2501      	movle	r5, #1
 800cfc2:	441d      	add	r5, r3
 800cfc4:	f04f 0800 	mov.w	r8, #0
 800cfc8:	4651      	mov	r1, sl
 800cfca:	2201      	movs	r2, #1
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 fef5 	bl	800ddbc <__lshift>
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4682      	mov	sl, r0
 800cfd6:	f000 ff5d 	bl	800de94 <__mcmp>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	dc96      	bgt.n	800cf0c <_dtoa_r+0xabc>
 800cfde:	d102      	bne.n	800cfe6 <_dtoa_r+0xb96>
 800cfe0:	f019 0f01 	tst.w	r9, #1
 800cfe4:	d192      	bne.n	800cf0c <_dtoa_r+0xabc>
 800cfe6:	462b      	mov	r3, r5
 800cfe8:	461d      	mov	r5, r3
 800cfea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfee:	2a30      	cmp	r2, #48	; 0x30
 800cff0:	d0fa      	beq.n	800cfe8 <_dtoa_r+0xb98>
 800cff2:	e6dd      	b.n	800cdb0 <_dtoa_r+0x960>
 800cff4:	9a00      	ldr	r2, [sp, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d189      	bne.n	800cf0e <_dtoa_r+0xabe>
 800cffa:	f10b 0b01 	add.w	fp, fp, #1
 800cffe:	2331      	movs	r3, #49	; 0x31
 800d000:	e796      	b.n	800cf30 <_dtoa_r+0xae0>
 800d002:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <_dtoa_r+0xbdc>)
 800d004:	f7ff ba99 	b.w	800c53a <_dtoa_r+0xea>
 800d008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f47f aa6d 	bne.w	800c4ea <_dtoa_r+0x9a>
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <_dtoa_r+0xbe0>)
 800d012:	f7ff ba92 	b.w	800c53a <_dtoa_r+0xea>
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	dcb5      	bgt.n	800cf88 <_dtoa_r+0xb38>
 800d01c:	9b07      	ldr	r3, [sp, #28]
 800d01e:	2b02      	cmp	r3, #2
 800d020:	f73f aeb1 	bgt.w	800cd86 <_dtoa_r+0x936>
 800d024:	e7b0      	b.n	800cf88 <_dtoa_r+0xb38>
 800d026:	bf00      	nop
 800d028:	0801263e 	.word	0x0801263e
 800d02c:	0801292c 	.word	0x0801292c
 800d030:	080125d9 	.word	0x080125d9

0800d034 <_free_r>:
 800d034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d036:	2900      	cmp	r1, #0
 800d038:	d044      	beq.n	800d0c4 <_free_r+0x90>
 800d03a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d03e:	9001      	str	r0, [sp, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f1a1 0404 	sub.w	r4, r1, #4
 800d046:	bfb8      	it	lt
 800d048:	18e4      	addlt	r4, r4, r3
 800d04a:	f000 fc51 	bl	800d8f0 <__malloc_lock>
 800d04e:	4a1e      	ldr	r2, [pc, #120]	; (800d0c8 <_free_r+0x94>)
 800d050:	9801      	ldr	r0, [sp, #4]
 800d052:	6813      	ldr	r3, [r2, #0]
 800d054:	b933      	cbnz	r3, 800d064 <_free_r+0x30>
 800d056:	6063      	str	r3, [r4, #4]
 800d058:	6014      	str	r4, [r2, #0]
 800d05a:	b003      	add	sp, #12
 800d05c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d060:	f000 bc4c 	b.w	800d8fc <__malloc_unlock>
 800d064:	42a3      	cmp	r3, r4
 800d066:	d908      	bls.n	800d07a <_free_r+0x46>
 800d068:	6825      	ldr	r5, [r4, #0]
 800d06a:	1961      	adds	r1, r4, r5
 800d06c:	428b      	cmp	r3, r1
 800d06e:	bf01      	itttt	eq
 800d070:	6819      	ldreq	r1, [r3, #0]
 800d072:	685b      	ldreq	r3, [r3, #4]
 800d074:	1949      	addeq	r1, r1, r5
 800d076:	6021      	streq	r1, [r4, #0]
 800d078:	e7ed      	b.n	800d056 <_free_r+0x22>
 800d07a:	461a      	mov	r2, r3
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	b10b      	cbz	r3, 800d084 <_free_r+0x50>
 800d080:	42a3      	cmp	r3, r4
 800d082:	d9fa      	bls.n	800d07a <_free_r+0x46>
 800d084:	6811      	ldr	r1, [r2, #0]
 800d086:	1855      	adds	r5, r2, r1
 800d088:	42a5      	cmp	r5, r4
 800d08a:	d10b      	bne.n	800d0a4 <_free_r+0x70>
 800d08c:	6824      	ldr	r4, [r4, #0]
 800d08e:	4421      	add	r1, r4
 800d090:	1854      	adds	r4, r2, r1
 800d092:	42a3      	cmp	r3, r4
 800d094:	6011      	str	r1, [r2, #0]
 800d096:	d1e0      	bne.n	800d05a <_free_r+0x26>
 800d098:	681c      	ldr	r4, [r3, #0]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	6053      	str	r3, [r2, #4]
 800d09e:	440c      	add	r4, r1
 800d0a0:	6014      	str	r4, [r2, #0]
 800d0a2:	e7da      	b.n	800d05a <_free_r+0x26>
 800d0a4:	d902      	bls.n	800d0ac <_free_r+0x78>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	6003      	str	r3, [r0, #0]
 800d0aa:	e7d6      	b.n	800d05a <_free_r+0x26>
 800d0ac:	6825      	ldr	r5, [r4, #0]
 800d0ae:	1961      	adds	r1, r4, r5
 800d0b0:	428b      	cmp	r3, r1
 800d0b2:	bf04      	itt	eq
 800d0b4:	6819      	ldreq	r1, [r3, #0]
 800d0b6:	685b      	ldreq	r3, [r3, #4]
 800d0b8:	6063      	str	r3, [r4, #4]
 800d0ba:	bf04      	itt	eq
 800d0bc:	1949      	addeq	r1, r1, r5
 800d0be:	6021      	streq	r1, [r4, #0]
 800d0c0:	6054      	str	r4, [r2, #4]
 800d0c2:	e7ca      	b.n	800d05a <_free_r+0x26>
 800d0c4:	b003      	add	sp, #12
 800d0c6:	bd30      	pop	{r4, r5, pc}
 800d0c8:	20000bcc 	.word	0x20000bcc

0800d0cc <rshift>:
 800d0cc:	6903      	ldr	r3, [r0, #16]
 800d0ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d0d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d0da:	f100 0414 	add.w	r4, r0, #20
 800d0de:	dd45      	ble.n	800d16c <rshift+0xa0>
 800d0e0:	f011 011f 	ands.w	r1, r1, #31
 800d0e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d0e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d0ec:	d10c      	bne.n	800d108 <rshift+0x3c>
 800d0ee:	f100 0710 	add.w	r7, r0, #16
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	42b1      	cmp	r1, r6
 800d0f6:	d334      	bcc.n	800d162 <rshift+0x96>
 800d0f8:	1a9b      	subs	r3, r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	1eea      	subs	r2, r5, #3
 800d0fe:	4296      	cmp	r6, r2
 800d100:	bf38      	it	cc
 800d102:	2300      	movcc	r3, #0
 800d104:	4423      	add	r3, r4
 800d106:	e015      	b.n	800d134 <rshift+0x68>
 800d108:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d10c:	f1c1 0820 	rsb	r8, r1, #32
 800d110:	40cf      	lsrs	r7, r1
 800d112:	f105 0e04 	add.w	lr, r5, #4
 800d116:	46a1      	mov	r9, r4
 800d118:	4576      	cmp	r6, lr
 800d11a:	46f4      	mov	ip, lr
 800d11c:	d815      	bhi.n	800d14a <rshift+0x7e>
 800d11e:	1a9a      	subs	r2, r3, r2
 800d120:	0092      	lsls	r2, r2, #2
 800d122:	3a04      	subs	r2, #4
 800d124:	3501      	adds	r5, #1
 800d126:	42ae      	cmp	r6, r5
 800d128:	bf38      	it	cc
 800d12a:	2200      	movcc	r2, #0
 800d12c:	18a3      	adds	r3, r4, r2
 800d12e:	50a7      	str	r7, [r4, r2]
 800d130:	b107      	cbz	r7, 800d134 <rshift+0x68>
 800d132:	3304      	adds	r3, #4
 800d134:	1b1a      	subs	r2, r3, r4
 800d136:	42a3      	cmp	r3, r4
 800d138:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d13c:	bf08      	it	eq
 800d13e:	2300      	moveq	r3, #0
 800d140:	6102      	str	r2, [r0, #16]
 800d142:	bf08      	it	eq
 800d144:	6143      	streq	r3, [r0, #20]
 800d146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d14a:	f8dc c000 	ldr.w	ip, [ip]
 800d14e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d152:	ea4c 0707 	orr.w	r7, ip, r7
 800d156:	f849 7b04 	str.w	r7, [r9], #4
 800d15a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d15e:	40cf      	lsrs	r7, r1
 800d160:	e7da      	b.n	800d118 <rshift+0x4c>
 800d162:	f851 cb04 	ldr.w	ip, [r1], #4
 800d166:	f847 cf04 	str.w	ip, [r7, #4]!
 800d16a:	e7c3      	b.n	800d0f4 <rshift+0x28>
 800d16c:	4623      	mov	r3, r4
 800d16e:	e7e1      	b.n	800d134 <rshift+0x68>

0800d170 <__hexdig_fun>:
 800d170:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d174:	2b09      	cmp	r3, #9
 800d176:	d802      	bhi.n	800d17e <__hexdig_fun+0xe>
 800d178:	3820      	subs	r0, #32
 800d17a:	b2c0      	uxtb	r0, r0
 800d17c:	4770      	bx	lr
 800d17e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d182:	2b05      	cmp	r3, #5
 800d184:	d801      	bhi.n	800d18a <__hexdig_fun+0x1a>
 800d186:	3847      	subs	r0, #71	; 0x47
 800d188:	e7f7      	b.n	800d17a <__hexdig_fun+0xa>
 800d18a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d18e:	2b05      	cmp	r3, #5
 800d190:	d801      	bhi.n	800d196 <__hexdig_fun+0x26>
 800d192:	3827      	subs	r0, #39	; 0x27
 800d194:	e7f1      	b.n	800d17a <__hexdig_fun+0xa>
 800d196:	2000      	movs	r0, #0
 800d198:	4770      	bx	lr
	...

0800d19c <__gethex>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	4617      	mov	r7, r2
 800d1a2:	680a      	ldr	r2, [r1, #0]
 800d1a4:	b085      	sub	sp, #20
 800d1a6:	f102 0b02 	add.w	fp, r2, #2
 800d1aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d1ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d1b2:	4681      	mov	r9, r0
 800d1b4:	468a      	mov	sl, r1
 800d1b6:	9302      	str	r3, [sp, #8]
 800d1b8:	32fe      	adds	r2, #254	; 0xfe
 800d1ba:	eb02 030b 	add.w	r3, r2, fp
 800d1be:	46d8      	mov	r8, fp
 800d1c0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d1c4:	9301      	str	r3, [sp, #4]
 800d1c6:	2830      	cmp	r0, #48	; 0x30
 800d1c8:	d0f7      	beq.n	800d1ba <__gethex+0x1e>
 800d1ca:	f7ff ffd1 	bl	800d170 <__hexdig_fun>
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d138      	bne.n	800d246 <__gethex+0xaa>
 800d1d4:	49a7      	ldr	r1, [pc, #668]	; (800d474 <__gethex+0x2d8>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4640      	mov	r0, r8
 800d1da:	f7fe ff75 	bl	800c0c8 <strncmp>
 800d1de:	4606      	mov	r6, r0
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d169      	bne.n	800d2b8 <__gethex+0x11c>
 800d1e4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d1e8:	465d      	mov	r5, fp
 800d1ea:	f7ff ffc1 	bl	800d170 <__hexdig_fun>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	d064      	beq.n	800d2bc <__gethex+0x120>
 800d1f2:	465a      	mov	r2, fp
 800d1f4:	7810      	ldrb	r0, [r2, #0]
 800d1f6:	2830      	cmp	r0, #48	; 0x30
 800d1f8:	4690      	mov	r8, r2
 800d1fa:	f102 0201 	add.w	r2, r2, #1
 800d1fe:	d0f9      	beq.n	800d1f4 <__gethex+0x58>
 800d200:	f7ff ffb6 	bl	800d170 <__hexdig_fun>
 800d204:	2301      	movs	r3, #1
 800d206:	fab0 f480 	clz	r4, r0
 800d20a:	0964      	lsrs	r4, r4, #5
 800d20c:	465e      	mov	r6, fp
 800d20e:	9301      	str	r3, [sp, #4]
 800d210:	4642      	mov	r2, r8
 800d212:	4615      	mov	r5, r2
 800d214:	3201      	adds	r2, #1
 800d216:	7828      	ldrb	r0, [r5, #0]
 800d218:	f7ff ffaa 	bl	800d170 <__hexdig_fun>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d1f8      	bne.n	800d212 <__gethex+0x76>
 800d220:	4994      	ldr	r1, [pc, #592]	; (800d474 <__gethex+0x2d8>)
 800d222:	2201      	movs	r2, #1
 800d224:	4628      	mov	r0, r5
 800d226:	f7fe ff4f 	bl	800c0c8 <strncmp>
 800d22a:	b978      	cbnz	r0, 800d24c <__gethex+0xb0>
 800d22c:	b946      	cbnz	r6, 800d240 <__gethex+0xa4>
 800d22e:	1c6e      	adds	r6, r5, #1
 800d230:	4632      	mov	r2, r6
 800d232:	4615      	mov	r5, r2
 800d234:	3201      	adds	r2, #1
 800d236:	7828      	ldrb	r0, [r5, #0]
 800d238:	f7ff ff9a 	bl	800d170 <__hexdig_fun>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d1f8      	bne.n	800d232 <__gethex+0x96>
 800d240:	1b73      	subs	r3, r6, r5
 800d242:	009e      	lsls	r6, r3, #2
 800d244:	e004      	b.n	800d250 <__gethex+0xb4>
 800d246:	2400      	movs	r4, #0
 800d248:	4626      	mov	r6, r4
 800d24a:	e7e1      	b.n	800d210 <__gethex+0x74>
 800d24c:	2e00      	cmp	r6, #0
 800d24e:	d1f7      	bne.n	800d240 <__gethex+0xa4>
 800d250:	782b      	ldrb	r3, [r5, #0]
 800d252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d256:	2b50      	cmp	r3, #80	; 0x50
 800d258:	d13d      	bne.n	800d2d6 <__gethex+0x13a>
 800d25a:	786b      	ldrb	r3, [r5, #1]
 800d25c:	2b2b      	cmp	r3, #43	; 0x2b
 800d25e:	d02f      	beq.n	800d2c0 <__gethex+0x124>
 800d260:	2b2d      	cmp	r3, #45	; 0x2d
 800d262:	d031      	beq.n	800d2c8 <__gethex+0x12c>
 800d264:	1c69      	adds	r1, r5, #1
 800d266:	f04f 0b00 	mov.w	fp, #0
 800d26a:	7808      	ldrb	r0, [r1, #0]
 800d26c:	f7ff ff80 	bl	800d170 <__hexdig_fun>
 800d270:	1e42      	subs	r2, r0, #1
 800d272:	b2d2      	uxtb	r2, r2
 800d274:	2a18      	cmp	r2, #24
 800d276:	d82e      	bhi.n	800d2d6 <__gethex+0x13a>
 800d278:	f1a0 0210 	sub.w	r2, r0, #16
 800d27c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d280:	f7ff ff76 	bl	800d170 <__hexdig_fun>
 800d284:	f100 3cff 	add.w	ip, r0, #4294967295
 800d288:	fa5f fc8c 	uxtb.w	ip, ip
 800d28c:	f1bc 0f18 	cmp.w	ip, #24
 800d290:	d91d      	bls.n	800d2ce <__gethex+0x132>
 800d292:	f1bb 0f00 	cmp.w	fp, #0
 800d296:	d000      	beq.n	800d29a <__gethex+0xfe>
 800d298:	4252      	negs	r2, r2
 800d29a:	4416      	add	r6, r2
 800d29c:	f8ca 1000 	str.w	r1, [sl]
 800d2a0:	b1dc      	cbz	r4, 800d2da <__gethex+0x13e>
 800d2a2:	9b01      	ldr	r3, [sp, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	bf14      	ite	ne
 800d2a8:	f04f 0800 	movne.w	r8, #0
 800d2ac:	f04f 0806 	moveq.w	r8, #6
 800d2b0:	4640      	mov	r0, r8
 800d2b2:	b005      	add	sp, #20
 800d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b8:	4645      	mov	r5, r8
 800d2ba:	4626      	mov	r6, r4
 800d2bc:	2401      	movs	r4, #1
 800d2be:	e7c7      	b.n	800d250 <__gethex+0xb4>
 800d2c0:	f04f 0b00 	mov.w	fp, #0
 800d2c4:	1ca9      	adds	r1, r5, #2
 800d2c6:	e7d0      	b.n	800d26a <__gethex+0xce>
 800d2c8:	f04f 0b01 	mov.w	fp, #1
 800d2cc:	e7fa      	b.n	800d2c4 <__gethex+0x128>
 800d2ce:	230a      	movs	r3, #10
 800d2d0:	fb03 0002 	mla	r0, r3, r2, r0
 800d2d4:	e7d0      	b.n	800d278 <__gethex+0xdc>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	e7e0      	b.n	800d29c <__gethex+0x100>
 800d2da:	eba5 0308 	sub.w	r3, r5, r8
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	2b07      	cmp	r3, #7
 800d2e4:	dc0a      	bgt.n	800d2fc <__gethex+0x160>
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	f000 fb0e 	bl	800d908 <_Balloc>
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	b940      	cbnz	r0, 800d302 <__gethex+0x166>
 800d2f0:	4b61      	ldr	r3, [pc, #388]	; (800d478 <__gethex+0x2dc>)
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	21e4      	movs	r1, #228	; 0xe4
 800d2f6:	4861      	ldr	r0, [pc, #388]	; (800d47c <__gethex+0x2e0>)
 800d2f8:	f7ff f804 	bl	800c304 <__assert_func>
 800d2fc:	3101      	adds	r1, #1
 800d2fe:	105b      	asrs	r3, r3, #1
 800d300:	e7ef      	b.n	800d2e2 <__gethex+0x146>
 800d302:	f100 0a14 	add.w	sl, r0, #20
 800d306:	2300      	movs	r3, #0
 800d308:	495a      	ldr	r1, [pc, #360]	; (800d474 <__gethex+0x2d8>)
 800d30a:	f8cd a004 	str.w	sl, [sp, #4]
 800d30e:	469b      	mov	fp, r3
 800d310:	45a8      	cmp	r8, r5
 800d312:	d342      	bcc.n	800d39a <__gethex+0x1fe>
 800d314:	9801      	ldr	r0, [sp, #4]
 800d316:	f840 bb04 	str.w	fp, [r0], #4
 800d31a:	eba0 000a 	sub.w	r0, r0, sl
 800d31e:	1080      	asrs	r0, r0, #2
 800d320:	6120      	str	r0, [r4, #16]
 800d322:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d326:	4658      	mov	r0, fp
 800d328:	f000 fbe0 	bl	800daec <__hi0bits>
 800d32c:	683d      	ldr	r5, [r7, #0]
 800d32e:	eba8 0000 	sub.w	r0, r8, r0
 800d332:	42a8      	cmp	r0, r5
 800d334:	dd59      	ble.n	800d3ea <__gethex+0x24e>
 800d336:	eba0 0805 	sub.w	r8, r0, r5
 800d33a:	4641      	mov	r1, r8
 800d33c:	4620      	mov	r0, r4
 800d33e:	f000 ff6f 	bl	800e220 <__any_on>
 800d342:	4683      	mov	fp, r0
 800d344:	b1b8      	cbz	r0, 800d376 <__gethex+0x1da>
 800d346:	f108 33ff 	add.w	r3, r8, #4294967295
 800d34a:	1159      	asrs	r1, r3, #5
 800d34c:	f003 021f 	and.w	r2, r3, #31
 800d350:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d354:	f04f 0b01 	mov.w	fp, #1
 800d358:	fa0b f202 	lsl.w	r2, fp, r2
 800d35c:	420a      	tst	r2, r1
 800d35e:	d00a      	beq.n	800d376 <__gethex+0x1da>
 800d360:	455b      	cmp	r3, fp
 800d362:	dd06      	ble.n	800d372 <__gethex+0x1d6>
 800d364:	f1a8 0102 	sub.w	r1, r8, #2
 800d368:	4620      	mov	r0, r4
 800d36a:	f000 ff59 	bl	800e220 <__any_on>
 800d36e:	2800      	cmp	r0, #0
 800d370:	d138      	bne.n	800d3e4 <__gethex+0x248>
 800d372:	f04f 0b02 	mov.w	fp, #2
 800d376:	4641      	mov	r1, r8
 800d378:	4620      	mov	r0, r4
 800d37a:	f7ff fea7 	bl	800d0cc <rshift>
 800d37e:	4446      	add	r6, r8
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	42b3      	cmp	r3, r6
 800d384:	da41      	bge.n	800d40a <__gethex+0x26e>
 800d386:	4621      	mov	r1, r4
 800d388:	4648      	mov	r0, r9
 800d38a:	f000 fafd 	bl	800d988 <_Bfree>
 800d38e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d390:	2300      	movs	r3, #0
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d398:	e78a      	b.n	800d2b0 <__gethex+0x114>
 800d39a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d39e:	2a2e      	cmp	r2, #46	; 0x2e
 800d3a0:	d014      	beq.n	800d3cc <__gethex+0x230>
 800d3a2:	2b20      	cmp	r3, #32
 800d3a4:	d106      	bne.n	800d3b4 <__gethex+0x218>
 800d3a6:	9b01      	ldr	r3, [sp, #4]
 800d3a8:	f843 bb04 	str.w	fp, [r3], #4
 800d3ac:	f04f 0b00 	mov.w	fp, #0
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	465b      	mov	r3, fp
 800d3b4:	7828      	ldrb	r0, [r5, #0]
 800d3b6:	9303      	str	r3, [sp, #12]
 800d3b8:	f7ff feda 	bl	800d170 <__hexdig_fun>
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	f000 000f 	and.w	r0, r0, #15
 800d3c2:	4098      	lsls	r0, r3
 800d3c4:	ea4b 0b00 	orr.w	fp, fp, r0
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	e7a1      	b.n	800d310 <__gethex+0x174>
 800d3cc:	45a8      	cmp	r8, r5
 800d3ce:	d8e8      	bhi.n	800d3a2 <__gethex+0x206>
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	9303      	str	r3, [sp, #12]
 800d3d6:	f7fe fe77 	bl	800c0c8 <strncmp>
 800d3da:	4926      	ldr	r1, [pc, #152]	; (800d474 <__gethex+0x2d8>)
 800d3dc:	9b03      	ldr	r3, [sp, #12]
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d1df      	bne.n	800d3a2 <__gethex+0x206>
 800d3e2:	e795      	b.n	800d310 <__gethex+0x174>
 800d3e4:	f04f 0b03 	mov.w	fp, #3
 800d3e8:	e7c5      	b.n	800d376 <__gethex+0x1da>
 800d3ea:	da0b      	bge.n	800d404 <__gethex+0x268>
 800d3ec:	eba5 0800 	sub.w	r8, r5, r0
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4642      	mov	r2, r8
 800d3f4:	4648      	mov	r0, r9
 800d3f6:	f000 fce1 	bl	800ddbc <__lshift>
 800d3fa:	eba6 0608 	sub.w	r6, r6, r8
 800d3fe:	4604      	mov	r4, r0
 800d400:	f100 0a14 	add.w	sl, r0, #20
 800d404:	f04f 0b00 	mov.w	fp, #0
 800d408:	e7ba      	b.n	800d380 <__gethex+0x1e4>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	42b3      	cmp	r3, r6
 800d40e:	dd73      	ble.n	800d4f8 <__gethex+0x35c>
 800d410:	1b9e      	subs	r6, r3, r6
 800d412:	42b5      	cmp	r5, r6
 800d414:	dc34      	bgt.n	800d480 <__gethex+0x2e4>
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d023      	beq.n	800d464 <__gethex+0x2c8>
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d025      	beq.n	800d46c <__gethex+0x2d0>
 800d420:	2b01      	cmp	r3, #1
 800d422:	d115      	bne.n	800d450 <__gethex+0x2b4>
 800d424:	42b5      	cmp	r5, r6
 800d426:	d113      	bne.n	800d450 <__gethex+0x2b4>
 800d428:	2d01      	cmp	r5, #1
 800d42a:	d10b      	bne.n	800d444 <__gethex+0x2a8>
 800d42c:	9a02      	ldr	r2, [sp, #8]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	2301      	movs	r3, #1
 800d434:	6123      	str	r3, [r4, #16]
 800d436:	f8ca 3000 	str.w	r3, [sl]
 800d43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d43c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d440:	601c      	str	r4, [r3, #0]
 800d442:	e735      	b.n	800d2b0 <__gethex+0x114>
 800d444:	1e69      	subs	r1, r5, #1
 800d446:	4620      	mov	r0, r4
 800d448:	f000 feea 	bl	800e220 <__any_on>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d1ed      	bne.n	800d42c <__gethex+0x290>
 800d450:	4621      	mov	r1, r4
 800d452:	4648      	mov	r0, r9
 800d454:	f000 fa98 	bl	800d988 <_Bfree>
 800d458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d45a:	2300      	movs	r3, #0
 800d45c:	6013      	str	r3, [r2, #0]
 800d45e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d462:	e725      	b.n	800d2b0 <__gethex+0x114>
 800d464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1f2      	bne.n	800d450 <__gethex+0x2b4>
 800d46a:	e7df      	b.n	800d42c <__gethex+0x290>
 800d46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1dc      	bne.n	800d42c <__gethex+0x290>
 800d472:	e7ed      	b.n	800d450 <__gethex+0x2b4>
 800d474:	08012474 	.word	0x08012474
 800d478:	0801263e 	.word	0x0801263e
 800d47c:	0801264f 	.word	0x0801264f
 800d480:	f106 38ff 	add.w	r8, r6, #4294967295
 800d484:	f1bb 0f00 	cmp.w	fp, #0
 800d488:	d133      	bne.n	800d4f2 <__gethex+0x356>
 800d48a:	f1b8 0f00 	cmp.w	r8, #0
 800d48e:	d004      	beq.n	800d49a <__gethex+0x2fe>
 800d490:	4641      	mov	r1, r8
 800d492:	4620      	mov	r0, r4
 800d494:	f000 fec4 	bl	800e220 <__any_on>
 800d498:	4683      	mov	fp, r0
 800d49a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d49e:	2301      	movs	r3, #1
 800d4a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d4a4:	f008 081f 	and.w	r8, r8, #31
 800d4a8:	fa03 f308 	lsl.w	r3, r3, r8
 800d4ac:	4213      	tst	r3, r2
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	bf18      	it	ne
 800d4b4:	f04b 0b02 	orrne.w	fp, fp, #2
 800d4b8:	1bad      	subs	r5, r5, r6
 800d4ba:	f7ff fe07 	bl	800d0cc <rshift>
 800d4be:	687e      	ldr	r6, [r7, #4]
 800d4c0:	f04f 0802 	mov.w	r8, #2
 800d4c4:	f1bb 0f00 	cmp.w	fp, #0
 800d4c8:	d04a      	beq.n	800d560 <__gethex+0x3c4>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d016      	beq.n	800d4fe <__gethex+0x362>
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d018      	beq.n	800d506 <__gethex+0x36a>
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d109      	bne.n	800d4ec <__gethex+0x350>
 800d4d8:	f01b 0f02 	tst.w	fp, #2
 800d4dc:	d006      	beq.n	800d4ec <__gethex+0x350>
 800d4de:	f8da 3000 	ldr.w	r3, [sl]
 800d4e2:	ea4b 0b03 	orr.w	fp, fp, r3
 800d4e6:	f01b 0f01 	tst.w	fp, #1
 800d4ea:	d10f      	bne.n	800d50c <__gethex+0x370>
 800d4ec:	f048 0810 	orr.w	r8, r8, #16
 800d4f0:	e036      	b.n	800d560 <__gethex+0x3c4>
 800d4f2:	f04f 0b01 	mov.w	fp, #1
 800d4f6:	e7d0      	b.n	800d49a <__gethex+0x2fe>
 800d4f8:	f04f 0801 	mov.w	r8, #1
 800d4fc:	e7e2      	b.n	800d4c4 <__gethex+0x328>
 800d4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d500:	f1c3 0301 	rsb	r3, r3, #1
 800d504:	930f      	str	r3, [sp, #60]	; 0x3c
 800d506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d0ef      	beq.n	800d4ec <__gethex+0x350>
 800d50c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d510:	f104 0214 	add.w	r2, r4, #20
 800d514:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d51e:	2300      	movs	r3, #0
 800d520:	4694      	mov	ip, r2
 800d522:	f852 1b04 	ldr.w	r1, [r2], #4
 800d526:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d52a:	d01e      	beq.n	800d56a <__gethex+0x3ce>
 800d52c:	3101      	adds	r1, #1
 800d52e:	f8cc 1000 	str.w	r1, [ip]
 800d532:	f1b8 0f02 	cmp.w	r8, #2
 800d536:	f104 0214 	add.w	r2, r4, #20
 800d53a:	d13d      	bne.n	800d5b8 <__gethex+0x41c>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	3b01      	subs	r3, #1
 800d540:	42ab      	cmp	r3, r5
 800d542:	d10b      	bne.n	800d55c <__gethex+0x3c0>
 800d544:	1169      	asrs	r1, r5, #5
 800d546:	2301      	movs	r3, #1
 800d548:	f005 051f 	and.w	r5, r5, #31
 800d54c:	fa03 f505 	lsl.w	r5, r3, r5
 800d550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d554:	421d      	tst	r5, r3
 800d556:	bf18      	it	ne
 800d558:	f04f 0801 	movne.w	r8, #1
 800d55c:	f048 0820 	orr.w	r8, r8, #32
 800d560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d562:	601c      	str	r4, [r3, #0]
 800d564:	9b02      	ldr	r3, [sp, #8]
 800d566:	601e      	str	r6, [r3, #0]
 800d568:	e6a2      	b.n	800d2b0 <__gethex+0x114>
 800d56a:	4290      	cmp	r0, r2
 800d56c:	f842 3c04 	str.w	r3, [r2, #-4]
 800d570:	d8d6      	bhi.n	800d520 <__gethex+0x384>
 800d572:	68a2      	ldr	r2, [r4, #8]
 800d574:	4593      	cmp	fp, r2
 800d576:	db17      	blt.n	800d5a8 <__gethex+0x40c>
 800d578:	6861      	ldr	r1, [r4, #4]
 800d57a:	4648      	mov	r0, r9
 800d57c:	3101      	adds	r1, #1
 800d57e:	f000 f9c3 	bl	800d908 <_Balloc>
 800d582:	4682      	mov	sl, r0
 800d584:	b918      	cbnz	r0, 800d58e <__gethex+0x3f2>
 800d586:	4b1b      	ldr	r3, [pc, #108]	; (800d5f4 <__gethex+0x458>)
 800d588:	4602      	mov	r2, r0
 800d58a:	2184      	movs	r1, #132	; 0x84
 800d58c:	e6b3      	b.n	800d2f6 <__gethex+0x15a>
 800d58e:	6922      	ldr	r2, [r4, #16]
 800d590:	3202      	adds	r2, #2
 800d592:	f104 010c 	add.w	r1, r4, #12
 800d596:	0092      	lsls	r2, r2, #2
 800d598:	300c      	adds	r0, #12
 800d59a:	f7fe fe95 	bl	800c2c8 <memcpy>
 800d59e:	4621      	mov	r1, r4
 800d5a0:	4648      	mov	r0, r9
 800d5a2:	f000 f9f1 	bl	800d988 <_Bfree>
 800d5a6:	4654      	mov	r4, sl
 800d5a8:	6922      	ldr	r2, [r4, #16]
 800d5aa:	1c51      	adds	r1, r2, #1
 800d5ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d5b0:	6121      	str	r1, [r4, #16]
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	6151      	str	r1, [r2, #20]
 800d5b6:	e7bc      	b.n	800d532 <__gethex+0x396>
 800d5b8:	6921      	ldr	r1, [r4, #16]
 800d5ba:	4559      	cmp	r1, fp
 800d5bc:	dd0b      	ble.n	800d5d6 <__gethex+0x43a>
 800d5be:	2101      	movs	r1, #1
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f7ff fd83 	bl	800d0cc <rshift>
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	3601      	adds	r6, #1
 800d5ca:	42b3      	cmp	r3, r6
 800d5cc:	f6ff aedb 	blt.w	800d386 <__gethex+0x1ea>
 800d5d0:	f04f 0801 	mov.w	r8, #1
 800d5d4:	e7c2      	b.n	800d55c <__gethex+0x3c0>
 800d5d6:	f015 051f 	ands.w	r5, r5, #31
 800d5da:	d0f9      	beq.n	800d5d0 <__gethex+0x434>
 800d5dc:	9b01      	ldr	r3, [sp, #4]
 800d5de:	441a      	add	r2, r3
 800d5e0:	f1c5 0520 	rsb	r5, r5, #32
 800d5e4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d5e8:	f000 fa80 	bl	800daec <__hi0bits>
 800d5ec:	42a8      	cmp	r0, r5
 800d5ee:	dbe6      	blt.n	800d5be <__gethex+0x422>
 800d5f0:	e7ee      	b.n	800d5d0 <__gethex+0x434>
 800d5f2:	bf00      	nop
 800d5f4:	0801263e 	.word	0x0801263e

0800d5f8 <L_shift>:
 800d5f8:	f1c2 0208 	rsb	r2, r2, #8
 800d5fc:	0092      	lsls	r2, r2, #2
 800d5fe:	b570      	push	{r4, r5, r6, lr}
 800d600:	f1c2 0620 	rsb	r6, r2, #32
 800d604:	6843      	ldr	r3, [r0, #4]
 800d606:	6804      	ldr	r4, [r0, #0]
 800d608:	fa03 f506 	lsl.w	r5, r3, r6
 800d60c:	432c      	orrs	r4, r5
 800d60e:	40d3      	lsrs	r3, r2
 800d610:	6004      	str	r4, [r0, #0]
 800d612:	f840 3f04 	str.w	r3, [r0, #4]!
 800d616:	4288      	cmp	r0, r1
 800d618:	d3f4      	bcc.n	800d604 <L_shift+0xc>
 800d61a:	bd70      	pop	{r4, r5, r6, pc}

0800d61c <__match>:
 800d61c:	b530      	push	{r4, r5, lr}
 800d61e:	6803      	ldr	r3, [r0, #0]
 800d620:	3301      	adds	r3, #1
 800d622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d626:	b914      	cbnz	r4, 800d62e <__match+0x12>
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	2001      	movs	r0, #1
 800d62c:	bd30      	pop	{r4, r5, pc}
 800d62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d632:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d636:	2d19      	cmp	r5, #25
 800d638:	bf98      	it	ls
 800d63a:	3220      	addls	r2, #32
 800d63c:	42a2      	cmp	r2, r4
 800d63e:	d0f0      	beq.n	800d622 <__match+0x6>
 800d640:	2000      	movs	r0, #0
 800d642:	e7f3      	b.n	800d62c <__match+0x10>

0800d644 <__hexnan>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	680b      	ldr	r3, [r1, #0]
 800d64a:	6801      	ldr	r1, [r0, #0]
 800d64c:	115e      	asrs	r6, r3, #5
 800d64e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d652:	f013 031f 	ands.w	r3, r3, #31
 800d656:	b087      	sub	sp, #28
 800d658:	bf18      	it	ne
 800d65a:	3604      	addne	r6, #4
 800d65c:	2500      	movs	r5, #0
 800d65e:	1f37      	subs	r7, r6, #4
 800d660:	4682      	mov	sl, r0
 800d662:	4690      	mov	r8, r2
 800d664:	9301      	str	r3, [sp, #4]
 800d666:	f846 5c04 	str.w	r5, [r6, #-4]
 800d66a:	46b9      	mov	r9, r7
 800d66c:	463c      	mov	r4, r7
 800d66e:	9502      	str	r5, [sp, #8]
 800d670:	46ab      	mov	fp, r5
 800d672:	784a      	ldrb	r2, [r1, #1]
 800d674:	1c4b      	adds	r3, r1, #1
 800d676:	9303      	str	r3, [sp, #12]
 800d678:	b342      	cbz	r2, 800d6cc <__hexnan+0x88>
 800d67a:	4610      	mov	r0, r2
 800d67c:	9105      	str	r1, [sp, #20]
 800d67e:	9204      	str	r2, [sp, #16]
 800d680:	f7ff fd76 	bl	800d170 <__hexdig_fun>
 800d684:	2800      	cmp	r0, #0
 800d686:	d14f      	bne.n	800d728 <__hexnan+0xe4>
 800d688:	9a04      	ldr	r2, [sp, #16]
 800d68a:	9905      	ldr	r1, [sp, #20]
 800d68c:	2a20      	cmp	r2, #32
 800d68e:	d818      	bhi.n	800d6c2 <__hexnan+0x7e>
 800d690:	9b02      	ldr	r3, [sp, #8]
 800d692:	459b      	cmp	fp, r3
 800d694:	dd13      	ble.n	800d6be <__hexnan+0x7a>
 800d696:	454c      	cmp	r4, r9
 800d698:	d206      	bcs.n	800d6a8 <__hexnan+0x64>
 800d69a:	2d07      	cmp	r5, #7
 800d69c:	dc04      	bgt.n	800d6a8 <__hexnan+0x64>
 800d69e:	462a      	mov	r2, r5
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f7ff ffa8 	bl	800d5f8 <L_shift>
 800d6a8:	4544      	cmp	r4, r8
 800d6aa:	d950      	bls.n	800d74e <__hexnan+0x10a>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f1a4 0904 	sub.w	r9, r4, #4
 800d6b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6b6:	f8cd b008 	str.w	fp, [sp, #8]
 800d6ba:	464c      	mov	r4, r9
 800d6bc:	461d      	mov	r5, r3
 800d6be:	9903      	ldr	r1, [sp, #12]
 800d6c0:	e7d7      	b.n	800d672 <__hexnan+0x2e>
 800d6c2:	2a29      	cmp	r2, #41	; 0x29
 800d6c4:	d155      	bne.n	800d772 <__hexnan+0x12e>
 800d6c6:	3102      	adds	r1, #2
 800d6c8:	f8ca 1000 	str.w	r1, [sl]
 800d6cc:	f1bb 0f00 	cmp.w	fp, #0
 800d6d0:	d04f      	beq.n	800d772 <__hexnan+0x12e>
 800d6d2:	454c      	cmp	r4, r9
 800d6d4:	d206      	bcs.n	800d6e4 <__hexnan+0xa0>
 800d6d6:	2d07      	cmp	r5, #7
 800d6d8:	dc04      	bgt.n	800d6e4 <__hexnan+0xa0>
 800d6da:	462a      	mov	r2, r5
 800d6dc:	4649      	mov	r1, r9
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f7ff ff8a 	bl	800d5f8 <L_shift>
 800d6e4:	4544      	cmp	r4, r8
 800d6e6:	d934      	bls.n	800d752 <__hexnan+0x10e>
 800d6e8:	f1a8 0204 	sub.w	r2, r8, #4
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6f6:	429f      	cmp	r7, r3
 800d6f8:	d2f9      	bcs.n	800d6ee <__hexnan+0xaa>
 800d6fa:	1b3b      	subs	r3, r7, r4
 800d6fc:	f023 0303 	bic.w	r3, r3, #3
 800d700:	3304      	adds	r3, #4
 800d702:	3e03      	subs	r6, #3
 800d704:	3401      	adds	r4, #1
 800d706:	42a6      	cmp	r6, r4
 800d708:	bf38      	it	cc
 800d70a:	2304      	movcc	r3, #4
 800d70c:	4443      	add	r3, r8
 800d70e:	2200      	movs	r2, #0
 800d710:	f843 2b04 	str.w	r2, [r3], #4
 800d714:	429f      	cmp	r7, r3
 800d716:	d2fb      	bcs.n	800d710 <__hexnan+0xcc>
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	b91b      	cbnz	r3, 800d724 <__hexnan+0xe0>
 800d71c:	4547      	cmp	r7, r8
 800d71e:	d126      	bne.n	800d76e <__hexnan+0x12a>
 800d720:	2301      	movs	r3, #1
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	2005      	movs	r0, #5
 800d726:	e025      	b.n	800d774 <__hexnan+0x130>
 800d728:	3501      	adds	r5, #1
 800d72a:	2d08      	cmp	r5, #8
 800d72c:	f10b 0b01 	add.w	fp, fp, #1
 800d730:	dd06      	ble.n	800d740 <__hexnan+0xfc>
 800d732:	4544      	cmp	r4, r8
 800d734:	d9c3      	bls.n	800d6be <__hexnan+0x7a>
 800d736:	2300      	movs	r3, #0
 800d738:	f844 3c04 	str.w	r3, [r4, #-4]
 800d73c:	2501      	movs	r5, #1
 800d73e:	3c04      	subs	r4, #4
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	f000 000f 	and.w	r0, r0, #15
 800d746:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d74a:	6020      	str	r0, [r4, #0]
 800d74c:	e7b7      	b.n	800d6be <__hexnan+0x7a>
 800d74e:	2508      	movs	r5, #8
 800d750:	e7b5      	b.n	800d6be <__hexnan+0x7a>
 800d752:	9b01      	ldr	r3, [sp, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0df      	beq.n	800d718 <__hexnan+0xd4>
 800d758:	f1c3 0320 	rsb	r3, r3, #32
 800d75c:	f04f 32ff 	mov.w	r2, #4294967295
 800d760:	40da      	lsrs	r2, r3
 800d762:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d766:	4013      	ands	r3, r2
 800d768:	f846 3c04 	str.w	r3, [r6, #-4]
 800d76c:	e7d4      	b.n	800d718 <__hexnan+0xd4>
 800d76e:	3f04      	subs	r7, #4
 800d770:	e7d2      	b.n	800d718 <__hexnan+0xd4>
 800d772:	2004      	movs	r0, #4
 800d774:	b007      	add	sp, #28
 800d776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d77c <malloc>:
 800d77c:	4b02      	ldr	r3, [pc, #8]	; (800d788 <malloc+0xc>)
 800d77e:	4601      	mov	r1, r0
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	f000 b823 	b.w	800d7cc <_malloc_r>
 800d786:	bf00      	nop
 800d788:	200001f8 	.word	0x200001f8

0800d78c <sbrk_aligned>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	4e0e      	ldr	r6, [pc, #56]	; (800d7c8 <sbrk_aligned+0x3c>)
 800d790:	460c      	mov	r4, r1
 800d792:	6831      	ldr	r1, [r6, #0]
 800d794:	4605      	mov	r5, r0
 800d796:	b911      	cbnz	r1, 800d79e <sbrk_aligned+0x12>
 800d798:	f001 fbbc 	bl	800ef14 <_sbrk_r>
 800d79c:	6030      	str	r0, [r6, #0]
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f001 fbb7 	bl	800ef14 <_sbrk_r>
 800d7a6:	1c43      	adds	r3, r0, #1
 800d7a8:	d00a      	beq.n	800d7c0 <sbrk_aligned+0x34>
 800d7aa:	1cc4      	adds	r4, r0, #3
 800d7ac:	f024 0403 	bic.w	r4, r4, #3
 800d7b0:	42a0      	cmp	r0, r4
 800d7b2:	d007      	beq.n	800d7c4 <sbrk_aligned+0x38>
 800d7b4:	1a21      	subs	r1, r4, r0
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f001 fbac 	bl	800ef14 <_sbrk_r>
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d101      	bne.n	800d7c4 <sbrk_aligned+0x38>
 800d7c0:	f04f 34ff 	mov.w	r4, #4294967295
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	20000bd0 	.word	0x20000bd0

0800d7cc <_malloc_r>:
 800d7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7d0:	1ccd      	adds	r5, r1, #3
 800d7d2:	f025 0503 	bic.w	r5, r5, #3
 800d7d6:	3508      	adds	r5, #8
 800d7d8:	2d0c      	cmp	r5, #12
 800d7da:	bf38      	it	cc
 800d7dc:	250c      	movcc	r5, #12
 800d7de:	2d00      	cmp	r5, #0
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	db01      	blt.n	800d7e8 <_malloc_r+0x1c>
 800d7e4:	42a9      	cmp	r1, r5
 800d7e6:	d905      	bls.n	800d7f4 <_malloc_r+0x28>
 800d7e8:	230c      	movs	r3, #12
 800d7ea:	603b      	str	r3, [r7, #0]
 800d7ec:	2600      	movs	r6, #0
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d8c8 <_malloc_r+0xfc>
 800d7f8:	f000 f87a 	bl	800d8f0 <__malloc_lock>
 800d7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d800:	461c      	mov	r4, r3
 800d802:	bb5c      	cbnz	r4, 800d85c <_malloc_r+0x90>
 800d804:	4629      	mov	r1, r5
 800d806:	4638      	mov	r0, r7
 800d808:	f7ff ffc0 	bl	800d78c <sbrk_aligned>
 800d80c:	1c43      	adds	r3, r0, #1
 800d80e:	4604      	mov	r4, r0
 800d810:	d155      	bne.n	800d8be <_malloc_r+0xf2>
 800d812:	f8d8 4000 	ldr.w	r4, [r8]
 800d816:	4626      	mov	r6, r4
 800d818:	2e00      	cmp	r6, #0
 800d81a:	d145      	bne.n	800d8a8 <_malloc_r+0xdc>
 800d81c:	2c00      	cmp	r4, #0
 800d81e:	d048      	beq.n	800d8b2 <_malloc_r+0xe6>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	4631      	mov	r1, r6
 800d824:	4638      	mov	r0, r7
 800d826:	eb04 0903 	add.w	r9, r4, r3
 800d82a:	f001 fb73 	bl	800ef14 <_sbrk_r>
 800d82e:	4581      	cmp	r9, r0
 800d830:	d13f      	bne.n	800d8b2 <_malloc_r+0xe6>
 800d832:	6821      	ldr	r1, [r4, #0]
 800d834:	1a6d      	subs	r5, r5, r1
 800d836:	4629      	mov	r1, r5
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ffa7 	bl	800d78c <sbrk_aligned>
 800d83e:	3001      	adds	r0, #1
 800d840:	d037      	beq.n	800d8b2 <_malloc_r+0xe6>
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	442b      	add	r3, r5
 800d846:	6023      	str	r3, [r4, #0]
 800d848:	f8d8 3000 	ldr.w	r3, [r8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d038      	beq.n	800d8c2 <_malloc_r+0xf6>
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	42a2      	cmp	r2, r4
 800d854:	d12b      	bne.n	800d8ae <_malloc_r+0xe2>
 800d856:	2200      	movs	r2, #0
 800d858:	605a      	str	r2, [r3, #4]
 800d85a:	e00f      	b.n	800d87c <_malloc_r+0xb0>
 800d85c:	6822      	ldr	r2, [r4, #0]
 800d85e:	1b52      	subs	r2, r2, r5
 800d860:	d41f      	bmi.n	800d8a2 <_malloc_r+0xd6>
 800d862:	2a0b      	cmp	r2, #11
 800d864:	d917      	bls.n	800d896 <_malloc_r+0xca>
 800d866:	1961      	adds	r1, r4, r5
 800d868:	42a3      	cmp	r3, r4
 800d86a:	6025      	str	r5, [r4, #0]
 800d86c:	bf18      	it	ne
 800d86e:	6059      	strne	r1, [r3, #4]
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	bf08      	it	eq
 800d874:	f8c8 1000 	streq.w	r1, [r8]
 800d878:	5162      	str	r2, [r4, r5]
 800d87a:	604b      	str	r3, [r1, #4]
 800d87c:	4638      	mov	r0, r7
 800d87e:	f104 060b 	add.w	r6, r4, #11
 800d882:	f000 f83b 	bl	800d8fc <__malloc_unlock>
 800d886:	f026 0607 	bic.w	r6, r6, #7
 800d88a:	1d23      	adds	r3, r4, #4
 800d88c:	1af2      	subs	r2, r6, r3
 800d88e:	d0ae      	beq.n	800d7ee <_malloc_r+0x22>
 800d890:	1b9b      	subs	r3, r3, r6
 800d892:	50a3      	str	r3, [r4, r2]
 800d894:	e7ab      	b.n	800d7ee <_malloc_r+0x22>
 800d896:	42a3      	cmp	r3, r4
 800d898:	6862      	ldr	r2, [r4, #4]
 800d89a:	d1dd      	bne.n	800d858 <_malloc_r+0x8c>
 800d89c:	f8c8 2000 	str.w	r2, [r8]
 800d8a0:	e7ec      	b.n	800d87c <_malloc_r+0xb0>
 800d8a2:	4623      	mov	r3, r4
 800d8a4:	6864      	ldr	r4, [r4, #4]
 800d8a6:	e7ac      	b.n	800d802 <_malloc_r+0x36>
 800d8a8:	4634      	mov	r4, r6
 800d8aa:	6876      	ldr	r6, [r6, #4]
 800d8ac:	e7b4      	b.n	800d818 <_malloc_r+0x4c>
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	e7cc      	b.n	800d84c <_malloc_r+0x80>
 800d8b2:	230c      	movs	r3, #12
 800d8b4:	603b      	str	r3, [r7, #0]
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	f000 f820 	bl	800d8fc <__malloc_unlock>
 800d8bc:	e797      	b.n	800d7ee <_malloc_r+0x22>
 800d8be:	6025      	str	r5, [r4, #0]
 800d8c0:	e7dc      	b.n	800d87c <_malloc_r+0xb0>
 800d8c2:	605b      	str	r3, [r3, #4]
 800d8c4:	deff      	udf	#255	; 0xff
 800d8c6:	bf00      	nop
 800d8c8:	20000bcc 	.word	0x20000bcc

0800d8cc <__ascii_mbtowc>:
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	b901      	cbnz	r1, 800d8d2 <__ascii_mbtowc+0x6>
 800d8d0:	a901      	add	r1, sp, #4
 800d8d2:	b142      	cbz	r2, 800d8e6 <__ascii_mbtowc+0x1a>
 800d8d4:	b14b      	cbz	r3, 800d8ea <__ascii_mbtowc+0x1e>
 800d8d6:	7813      	ldrb	r3, [r2, #0]
 800d8d8:	600b      	str	r3, [r1, #0]
 800d8da:	7812      	ldrb	r2, [r2, #0]
 800d8dc:	1e10      	subs	r0, r2, #0
 800d8de:	bf18      	it	ne
 800d8e0:	2001      	movne	r0, #1
 800d8e2:	b002      	add	sp, #8
 800d8e4:	4770      	bx	lr
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	e7fb      	b.n	800d8e2 <__ascii_mbtowc+0x16>
 800d8ea:	f06f 0001 	mvn.w	r0, #1
 800d8ee:	e7f8      	b.n	800d8e2 <__ascii_mbtowc+0x16>

0800d8f0 <__malloc_lock>:
 800d8f0:	4801      	ldr	r0, [pc, #4]	; (800d8f8 <__malloc_lock+0x8>)
 800d8f2:	f7fe bcdf 	b.w	800c2b4 <__retarget_lock_acquire_recursive>
 800d8f6:	bf00      	nop
 800d8f8:	20000bc8 	.word	0x20000bc8

0800d8fc <__malloc_unlock>:
 800d8fc:	4801      	ldr	r0, [pc, #4]	; (800d904 <__malloc_unlock+0x8>)
 800d8fe:	f7fe bcda 	b.w	800c2b6 <__retarget_lock_release_recursive>
 800d902:	bf00      	nop
 800d904:	20000bc8 	.word	0x20000bc8

0800d908 <_Balloc>:
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	69c6      	ldr	r6, [r0, #28]
 800d90c:	4604      	mov	r4, r0
 800d90e:	460d      	mov	r5, r1
 800d910:	b976      	cbnz	r6, 800d930 <_Balloc+0x28>
 800d912:	2010      	movs	r0, #16
 800d914:	f7ff ff32 	bl	800d77c <malloc>
 800d918:	4602      	mov	r2, r0
 800d91a:	61e0      	str	r0, [r4, #28]
 800d91c:	b920      	cbnz	r0, 800d928 <_Balloc+0x20>
 800d91e:	4b18      	ldr	r3, [pc, #96]	; (800d980 <_Balloc+0x78>)
 800d920:	4818      	ldr	r0, [pc, #96]	; (800d984 <_Balloc+0x7c>)
 800d922:	216b      	movs	r1, #107	; 0x6b
 800d924:	f7fe fcee 	bl	800c304 <__assert_func>
 800d928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d92c:	6006      	str	r6, [r0, #0]
 800d92e:	60c6      	str	r6, [r0, #12]
 800d930:	69e6      	ldr	r6, [r4, #28]
 800d932:	68f3      	ldr	r3, [r6, #12]
 800d934:	b183      	cbz	r3, 800d958 <_Balloc+0x50>
 800d936:	69e3      	ldr	r3, [r4, #28]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d93e:	b9b8      	cbnz	r0, 800d970 <_Balloc+0x68>
 800d940:	2101      	movs	r1, #1
 800d942:	fa01 f605 	lsl.w	r6, r1, r5
 800d946:	1d72      	adds	r2, r6, #5
 800d948:	0092      	lsls	r2, r2, #2
 800d94a:	4620      	mov	r0, r4
 800d94c:	f001 faf9 	bl	800ef42 <_calloc_r>
 800d950:	b160      	cbz	r0, 800d96c <_Balloc+0x64>
 800d952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d956:	e00e      	b.n	800d976 <_Balloc+0x6e>
 800d958:	2221      	movs	r2, #33	; 0x21
 800d95a:	2104      	movs	r1, #4
 800d95c:	4620      	mov	r0, r4
 800d95e:	f001 faf0 	bl	800ef42 <_calloc_r>
 800d962:	69e3      	ldr	r3, [r4, #28]
 800d964:	60f0      	str	r0, [r6, #12]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1e4      	bne.n	800d936 <_Balloc+0x2e>
 800d96c:	2000      	movs	r0, #0
 800d96e:	bd70      	pop	{r4, r5, r6, pc}
 800d970:	6802      	ldr	r2, [r0, #0]
 800d972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d976:	2300      	movs	r3, #0
 800d978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d97c:	e7f7      	b.n	800d96e <_Balloc+0x66>
 800d97e:	bf00      	nop
 800d980:	08012524 	.word	0x08012524
 800d984:	080126af 	.word	0x080126af

0800d988 <_Bfree>:
 800d988:	b570      	push	{r4, r5, r6, lr}
 800d98a:	69c6      	ldr	r6, [r0, #28]
 800d98c:	4605      	mov	r5, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	b976      	cbnz	r6, 800d9b0 <_Bfree+0x28>
 800d992:	2010      	movs	r0, #16
 800d994:	f7ff fef2 	bl	800d77c <malloc>
 800d998:	4602      	mov	r2, r0
 800d99a:	61e8      	str	r0, [r5, #28]
 800d99c:	b920      	cbnz	r0, 800d9a8 <_Bfree+0x20>
 800d99e:	4b09      	ldr	r3, [pc, #36]	; (800d9c4 <_Bfree+0x3c>)
 800d9a0:	4809      	ldr	r0, [pc, #36]	; (800d9c8 <_Bfree+0x40>)
 800d9a2:	218f      	movs	r1, #143	; 0x8f
 800d9a4:	f7fe fcae 	bl	800c304 <__assert_func>
 800d9a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9ac:	6006      	str	r6, [r0, #0]
 800d9ae:	60c6      	str	r6, [r0, #12]
 800d9b0:	b13c      	cbz	r4, 800d9c2 <_Bfree+0x3a>
 800d9b2:	69eb      	ldr	r3, [r5, #28]
 800d9b4:	6862      	ldr	r2, [r4, #4]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d9bc:	6021      	str	r1, [r4, #0]
 800d9be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d9c2:	bd70      	pop	{r4, r5, r6, pc}
 800d9c4:	08012524 	.word	0x08012524
 800d9c8:	080126af 	.word	0x080126af

0800d9cc <__multadd>:
 800d9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	690d      	ldr	r5, [r1, #16]
 800d9d2:	4607      	mov	r7, r0
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	461e      	mov	r6, r3
 800d9d8:	f101 0c14 	add.w	ip, r1, #20
 800d9dc:	2000      	movs	r0, #0
 800d9de:	f8dc 3000 	ldr.w	r3, [ip]
 800d9e2:	b299      	uxth	r1, r3
 800d9e4:	fb02 6101 	mla	r1, r2, r1, r6
 800d9e8:	0c1e      	lsrs	r6, r3, #16
 800d9ea:	0c0b      	lsrs	r3, r1, #16
 800d9ec:	fb02 3306 	mla	r3, r2, r6, r3
 800d9f0:	b289      	uxth	r1, r1
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9f8:	4285      	cmp	r5, r0
 800d9fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d9fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da02:	dcec      	bgt.n	800d9de <__multadd+0x12>
 800da04:	b30e      	cbz	r6, 800da4a <__multadd+0x7e>
 800da06:	68a3      	ldr	r3, [r4, #8]
 800da08:	42ab      	cmp	r3, r5
 800da0a:	dc19      	bgt.n	800da40 <__multadd+0x74>
 800da0c:	6861      	ldr	r1, [r4, #4]
 800da0e:	4638      	mov	r0, r7
 800da10:	3101      	adds	r1, #1
 800da12:	f7ff ff79 	bl	800d908 <_Balloc>
 800da16:	4680      	mov	r8, r0
 800da18:	b928      	cbnz	r0, 800da26 <__multadd+0x5a>
 800da1a:	4602      	mov	r2, r0
 800da1c:	4b0c      	ldr	r3, [pc, #48]	; (800da50 <__multadd+0x84>)
 800da1e:	480d      	ldr	r0, [pc, #52]	; (800da54 <__multadd+0x88>)
 800da20:	21ba      	movs	r1, #186	; 0xba
 800da22:	f7fe fc6f 	bl	800c304 <__assert_func>
 800da26:	6922      	ldr	r2, [r4, #16]
 800da28:	3202      	adds	r2, #2
 800da2a:	f104 010c 	add.w	r1, r4, #12
 800da2e:	0092      	lsls	r2, r2, #2
 800da30:	300c      	adds	r0, #12
 800da32:	f7fe fc49 	bl	800c2c8 <memcpy>
 800da36:	4621      	mov	r1, r4
 800da38:	4638      	mov	r0, r7
 800da3a:	f7ff ffa5 	bl	800d988 <_Bfree>
 800da3e:	4644      	mov	r4, r8
 800da40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da44:	3501      	adds	r5, #1
 800da46:	615e      	str	r6, [r3, #20]
 800da48:	6125      	str	r5, [r4, #16]
 800da4a:	4620      	mov	r0, r4
 800da4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da50:	0801263e 	.word	0x0801263e
 800da54:	080126af 	.word	0x080126af

0800da58 <__s2b>:
 800da58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da5c:	460c      	mov	r4, r1
 800da5e:	4615      	mov	r5, r2
 800da60:	461f      	mov	r7, r3
 800da62:	2209      	movs	r2, #9
 800da64:	3308      	adds	r3, #8
 800da66:	4606      	mov	r6, r0
 800da68:	fb93 f3f2 	sdiv	r3, r3, r2
 800da6c:	2100      	movs	r1, #0
 800da6e:	2201      	movs	r2, #1
 800da70:	429a      	cmp	r2, r3
 800da72:	db09      	blt.n	800da88 <__s2b+0x30>
 800da74:	4630      	mov	r0, r6
 800da76:	f7ff ff47 	bl	800d908 <_Balloc>
 800da7a:	b940      	cbnz	r0, 800da8e <__s2b+0x36>
 800da7c:	4602      	mov	r2, r0
 800da7e:	4b19      	ldr	r3, [pc, #100]	; (800dae4 <__s2b+0x8c>)
 800da80:	4819      	ldr	r0, [pc, #100]	; (800dae8 <__s2b+0x90>)
 800da82:	21d3      	movs	r1, #211	; 0xd3
 800da84:	f7fe fc3e 	bl	800c304 <__assert_func>
 800da88:	0052      	lsls	r2, r2, #1
 800da8a:	3101      	adds	r1, #1
 800da8c:	e7f0      	b.n	800da70 <__s2b+0x18>
 800da8e:	9b08      	ldr	r3, [sp, #32]
 800da90:	6143      	str	r3, [r0, #20]
 800da92:	2d09      	cmp	r5, #9
 800da94:	f04f 0301 	mov.w	r3, #1
 800da98:	6103      	str	r3, [r0, #16]
 800da9a:	dd16      	ble.n	800daca <__s2b+0x72>
 800da9c:	f104 0909 	add.w	r9, r4, #9
 800daa0:	46c8      	mov	r8, r9
 800daa2:	442c      	add	r4, r5
 800daa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800daa8:	4601      	mov	r1, r0
 800daaa:	3b30      	subs	r3, #48	; 0x30
 800daac:	220a      	movs	r2, #10
 800daae:	4630      	mov	r0, r6
 800dab0:	f7ff ff8c 	bl	800d9cc <__multadd>
 800dab4:	45a0      	cmp	r8, r4
 800dab6:	d1f5      	bne.n	800daa4 <__s2b+0x4c>
 800dab8:	f1a5 0408 	sub.w	r4, r5, #8
 800dabc:	444c      	add	r4, r9
 800dabe:	1b2d      	subs	r5, r5, r4
 800dac0:	1963      	adds	r3, r4, r5
 800dac2:	42bb      	cmp	r3, r7
 800dac4:	db04      	blt.n	800dad0 <__s2b+0x78>
 800dac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daca:	340a      	adds	r4, #10
 800dacc:	2509      	movs	r5, #9
 800dace:	e7f6      	b.n	800dabe <__s2b+0x66>
 800dad0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dad4:	4601      	mov	r1, r0
 800dad6:	3b30      	subs	r3, #48	; 0x30
 800dad8:	220a      	movs	r2, #10
 800dada:	4630      	mov	r0, r6
 800dadc:	f7ff ff76 	bl	800d9cc <__multadd>
 800dae0:	e7ee      	b.n	800dac0 <__s2b+0x68>
 800dae2:	bf00      	nop
 800dae4:	0801263e 	.word	0x0801263e
 800dae8:	080126af 	.word	0x080126af

0800daec <__hi0bits>:
 800daec:	0c03      	lsrs	r3, r0, #16
 800daee:	041b      	lsls	r3, r3, #16
 800daf0:	b9d3      	cbnz	r3, 800db28 <__hi0bits+0x3c>
 800daf2:	0400      	lsls	r0, r0, #16
 800daf4:	2310      	movs	r3, #16
 800daf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dafa:	bf04      	itt	eq
 800dafc:	0200      	lsleq	r0, r0, #8
 800dafe:	3308      	addeq	r3, #8
 800db00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db04:	bf04      	itt	eq
 800db06:	0100      	lsleq	r0, r0, #4
 800db08:	3304      	addeq	r3, #4
 800db0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db0e:	bf04      	itt	eq
 800db10:	0080      	lsleq	r0, r0, #2
 800db12:	3302      	addeq	r3, #2
 800db14:	2800      	cmp	r0, #0
 800db16:	db05      	blt.n	800db24 <__hi0bits+0x38>
 800db18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db1c:	f103 0301 	add.w	r3, r3, #1
 800db20:	bf08      	it	eq
 800db22:	2320      	moveq	r3, #32
 800db24:	4618      	mov	r0, r3
 800db26:	4770      	bx	lr
 800db28:	2300      	movs	r3, #0
 800db2a:	e7e4      	b.n	800daf6 <__hi0bits+0xa>

0800db2c <__lo0bits>:
 800db2c:	6803      	ldr	r3, [r0, #0]
 800db2e:	f013 0207 	ands.w	r2, r3, #7
 800db32:	d00c      	beq.n	800db4e <__lo0bits+0x22>
 800db34:	07d9      	lsls	r1, r3, #31
 800db36:	d422      	bmi.n	800db7e <__lo0bits+0x52>
 800db38:	079a      	lsls	r2, r3, #30
 800db3a:	bf49      	itett	mi
 800db3c:	085b      	lsrmi	r3, r3, #1
 800db3e:	089b      	lsrpl	r3, r3, #2
 800db40:	6003      	strmi	r3, [r0, #0]
 800db42:	2201      	movmi	r2, #1
 800db44:	bf5c      	itt	pl
 800db46:	6003      	strpl	r3, [r0, #0]
 800db48:	2202      	movpl	r2, #2
 800db4a:	4610      	mov	r0, r2
 800db4c:	4770      	bx	lr
 800db4e:	b299      	uxth	r1, r3
 800db50:	b909      	cbnz	r1, 800db56 <__lo0bits+0x2a>
 800db52:	0c1b      	lsrs	r3, r3, #16
 800db54:	2210      	movs	r2, #16
 800db56:	b2d9      	uxtb	r1, r3
 800db58:	b909      	cbnz	r1, 800db5e <__lo0bits+0x32>
 800db5a:	3208      	adds	r2, #8
 800db5c:	0a1b      	lsrs	r3, r3, #8
 800db5e:	0719      	lsls	r1, r3, #28
 800db60:	bf04      	itt	eq
 800db62:	091b      	lsreq	r3, r3, #4
 800db64:	3204      	addeq	r2, #4
 800db66:	0799      	lsls	r1, r3, #30
 800db68:	bf04      	itt	eq
 800db6a:	089b      	lsreq	r3, r3, #2
 800db6c:	3202      	addeq	r2, #2
 800db6e:	07d9      	lsls	r1, r3, #31
 800db70:	d403      	bmi.n	800db7a <__lo0bits+0x4e>
 800db72:	085b      	lsrs	r3, r3, #1
 800db74:	f102 0201 	add.w	r2, r2, #1
 800db78:	d003      	beq.n	800db82 <__lo0bits+0x56>
 800db7a:	6003      	str	r3, [r0, #0]
 800db7c:	e7e5      	b.n	800db4a <__lo0bits+0x1e>
 800db7e:	2200      	movs	r2, #0
 800db80:	e7e3      	b.n	800db4a <__lo0bits+0x1e>
 800db82:	2220      	movs	r2, #32
 800db84:	e7e1      	b.n	800db4a <__lo0bits+0x1e>
	...

0800db88 <__i2b>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	460c      	mov	r4, r1
 800db8c:	2101      	movs	r1, #1
 800db8e:	f7ff febb 	bl	800d908 <_Balloc>
 800db92:	4602      	mov	r2, r0
 800db94:	b928      	cbnz	r0, 800dba2 <__i2b+0x1a>
 800db96:	4b05      	ldr	r3, [pc, #20]	; (800dbac <__i2b+0x24>)
 800db98:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <__i2b+0x28>)
 800db9a:	f240 1145 	movw	r1, #325	; 0x145
 800db9e:	f7fe fbb1 	bl	800c304 <__assert_func>
 800dba2:	2301      	movs	r3, #1
 800dba4:	6144      	str	r4, [r0, #20]
 800dba6:	6103      	str	r3, [r0, #16]
 800dba8:	bd10      	pop	{r4, pc}
 800dbaa:	bf00      	nop
 800dbac:	0801263e 	.word	0x0801263e
 800dbb0:	080126af 	.word	0x080126af

0800dbb4 <__multiply>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	4691      	mov	r9, r2
 800dbba:	690a      	ldr	r2, [r1, #16]
 800dbbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	bfb8      	it	lt
 800dbc4:	460b      	movlt	r3, r1
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	bfbc      	itt	lt
 800dbca:	464c      	movlt	r4, r9
 800dbcc:	4699      	movlt	r9, r3
 800dbce:	6927      	ldr	r7, [r4, #16]
 800dbd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbd4:	68a3      	ldr	r3, [r4, #8]
 800dbd6:	6861      	ldr	r1, [r4, #4]
 800dbd8:	eb07 060a 	add.w	r6, r7, sl
 800dbdc:	42b3      	cmp	r3, r6
 800dbde:	b085      	sub	sp, #20
 800dbe0:	bfb8      	it	lt
 800dbe2:	3101      	addlt	r1, #1
 800dbe4:	f7ff fe90 	bl	800d908 <_Balloc>
 800dbe8:	b930      	cbnz	r0, 800dbf8 <__multiply+0x44>
 800dbea:	4602      	mov	r2, r0
 800dbec:	4b44      	ldr	r3, [pc, #272]	; (800dd00 <__multiply+0x14c>)
 800dbee:	4845      	ldr	r0, [pc, #276]	; (800dd04 <__multiply+0x150>)
 800dbf0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dbf4:	f7fe fb86 	bl	800c304 <__assert_func>
 800dbf8:	f100 0514 	add.w	r5, r0, #20
 800dbfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc00:	462b      	mov	r3, r5
 800dc02:	2200      	movs	r2, #0
 800dc04:	4543      	cmp	r3, r8
 800dc06:	d321      	bcc.n	800dc4c <__multiply+0x98>
 800dc08:	f104 0314 	add.w	r3, r4, #20
 800dc0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc10:	f109 0314 	add.w	r3, r9, #20
 800dc14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc18:	9202      	str	r2, [sp, #8]
 800dc1a:	1b3a      	subs	r2, r7, r4
 800dc1c:	3a15      	subs	r2, #21
 800dc1e:	f022 0203 	bic.w	r2, r2, #3
 800dc22:	3204      	adds	r2, #4
 800dc24:	f104 0115 	add.w	r1, r4, #21
 800dc28:	428f      	cmp	r7, r1
 800dc2a:	bf38      	it	cc
 800dc2c:	2204      	movcc	r2, #4
 800dc2e:	9201      	str	r2, [sp, #4]
 800dc30:	9a02      	ldr	r2, [sp, #8]
 800dc32:	9303      	str	r3, [sp, #12]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d80c      	bhi.n	800dc52 <__multiply+0x9e>
 800dc38:	2e00      	cmp	r6, #0
 800dc3a:	dd03      	ble.n	800dc44 <__multiply+0x90>
 800dc3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d05b      	beq.n	800dcfc <__multiply+0x148>
 800dc44:	6106      	str	r6, [r0, #16]
 800dc46:	b005      	add	sp, #20
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	f843 2b04 	str.w	r2, [r3], #4
 800dc50:	e7d8      	b.n	800dc04 <__multiply+0x50>
 800dc52:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc56:	f1ba 0f00 	cmp.w	sl, #0
 800dc5a:	d024      	beq.n	800dca6 <__multiply+0xf2>
 800dc5c:	f104 0e14 	add.w	lr, r4, #20
 800dc60:	46a9      	mov	r9, r5
 800dc62:	f04f 0c00 	mov.w	ip, #0
 800dc66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc6a:	f8d9 1000 	ldr.w	r1, [r9]
 800dc6e:	fa1f fb82 	uxth.w	fp, r2
 800dc72:	b289      	uxth	r1, r1
 800dc74:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc7c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc80:	4461      	add	r1, ip
 800dc82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc86:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc8e:	b289      	uxth	r1, r1
 800dc90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc94:	4577      	cmp	r7, lr
 800dc96:	f849 1b04 	str.w	r1, [r9], #4
 800dc9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc9e:	d8e2      	bhi.n	800dc66 <__multiply+0xb2>
 800dca0:	9a01      	ldr	r2, [sp, #4]
 800dca2:	f845 c002 	str.w	ip, [r5, r2]
 800dca6:	9a03      	ldr	r2, [sp, #12]
 800dca8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcac:	3304      	adds	r3, #4
 800dcae:	f1b9 0f00 	cmp.w	r9, #0
 800dcb2:	d021      	beq.n	800dcf8 <__multiply+0x144>
 800dcb4:	6829      	ldr	r1, [r5, #0]
 800dcb6:	f104 0c14 	add.w	ip, r4, #20
 800dcba:	46ae      	mov	lr, r5
 800dcbc:	f04f 0a00 	mov.w	sl, #0
 800dcc0:	f8bc b000 	ldrh.w	fp, [ip]
 800dcc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dcc8:	fb09 220b 	mla	r2, r9, fp, r2
 800dccc:	4452      	add	r2, sl
 800dcce:	b289      	uxth	r1, r1
 800dcd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcd4:	f84e 1b04 	str.w	r1, [lr], #4
 800dcd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dcdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dce0:	f8be 1000 	ldrh.w	r1, [lr]
 800dce4:	fb09 110a 	mla	r1, r9, sl, r1
 800dce8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dcec:	4567      	cmp	r7, ip
 800dcee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcf2:	d8e5      	bhi.n	800dcc0 <__multiply+0x10c>
 800dcf4:	9a01      	ldr	r2, [sp, #4]
 800dcf6:	50a9      	str	r1, [r5, r2]
 800dcf8:	3504      	adds	r5, #4
 800dcfa:	e799      	b.n	800dc30 <__multiply+0x7c>
 800dcfc:	3e01      	subs	r6, #1
 800dcfe:	e79b      	b.n	800dc38 <__multiply+0x84>
 800dd00:	0801263e 	.word	0x0801263e
 800dd04:	080126af 	.word	0x080126af

0800dd08 <__pow5mult>:
 800dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd0c:	4615      	mov	r5, r2
 800dd0e:	f012 0203 	ands.w	r2, r2, #3
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	d007      	beq.n	800dd28 <__pow5mult+0x20>
 800dd18:	4c25      	ldr	r4, [pc, #148]	; (800ddb0 <__pow5mult+0xa8>)
 800dd1a:	3a01      	subs	r2, #1
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd22:	f7ff fe53 	bl	800d9cc <__multadd>
 800dd26:	4607      	mov	r7, r0
 800dd28:	10ad      	asrs	r5, r5, #2
 800dd2a:	d03d      	beq.n	800dda8 <__pow5mult+0xa0>
 800dd2c:	69f4      	ldr	r4, [r6, #28]
 800dd2e:	b97c      	cbnz	r4, 800dd50 <__pow5mult+0x48>
 800dd30:	2010      	movs	r0, #16
 800dd32:	f7ff fd23 	bl	800d77c <malloc>
 800dd36:	4602      	mov	r2, r0
 800dd38:	61f0      	str	r0, [r6, #28]
 800dd3a:	b928      	cbnz	r0, 800dd48 <__pow5mult+0x40>
 800dd3c:	4b1d      	ldr	r3, [pc, #116]	; (800ddb4 <__pow5mult+0xac>)
 800dd3e:	481e      	ldr	r0, [pc, #120]	; (800ddb8 <__pow5mult+0xb0>)
 800dd40:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dd44:	f7fe fade 	bl	800c304 <__assert_func>
 800dd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd4c:	6004      	str	r4, [r0, #0]
 800dd4e:	60c4      	str	r4, [r0, #12]
 800dd50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd58:	b94c      	cbnz	r4, 800dd6e <__pow5mult+0x66>
 800dd5a:	f240 2171 	movw	r1, #625	; 0x271
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f7ff ff12 	bl	800db88 <__i2b>
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	6003      	str	r3, [r0, #0]
 800dd6e:	f04f 0900 	mov.w	r9, #0
 800dd72:	07eb      	lsls	r3, r5, #31
 800dd74:	d50a      	bpl.n	800dd8c <__pow5mult+0x84>
 800dd76:	4639      	mov	r1, r7
 800dd78:	4622      	mov	r2, r4
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f7ff ff1a 	bl	800dbb4 <__multiply>
 800dd80:	4639      	mov	r1, r7
 800dd82:	4680      	mov	r8, r0
 800dd84:	4630      	mov	r0, r6
 800dd86:	f7ff fdff 	bl	800d988 <_Bfree>
 800dd8a:	4647      	mov	r7, r8
 800dd8c:	106d      	asrs	r5, r5, #1
 800dd8e:	d00b      	beq.n	800dda8 <__pow5mult+0xa0>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	b938      	cbnz	r0, 800dda4 <__pow5mult+0x9c>
 800dd94:	4622      	mov	r2, r4
 800dd96:	4621      	mov	r1, r4
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7ff ff0b 	bl	800dbb4 <__multiply>
 800dd9e:	6020      	str	r0, [r4, #0]
 800dda0:	f8c0 9000 	str.w	r9, [r0]
 800dda4:	4604      	mov	r4, r0
 800dda6:	e7e4      	b.n	800dd72 <__pow5mult+0x6a>
 800dda8:	4638      	mov	r0, r7
 800ddaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddae:	bf00      	nop
 800ddb0:	080127f8 	.word	0x080127f8
 800ddb4:	08012524 	.word	0x08012524
 800ddb8:	080126af 	.word	0x080126af

0800ddbc <__lshift>:
 800ddbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	6849      	ldr	r1, [r1, #4]
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddca:	68a3      	ldr	r3, [r4, #8]
 800ddcc:	4607      	mov	r7, r0
 800ddce:	4691      	mov	r9, r2
 800ddd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ddd4:	f108 0601 	add.w	r6, r8, #1
 800ddd8:	42b3      	cmp	r3, r6
 800ddda:	db0b      	blt.n	800ddf4 <__lshift+0x38>
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7ff fd93 	bl	800d908 <_Balloc>
 800dde2:	4605      	mov	r5, r0
 800dde4:	b948      	cbnz	r0, 800ddfa <__lshift+0x3e>
 800dde6:	4602      	mov	r2, r0
 800dde8:	4b28      	ldr	r3, [pc, #160]	; (800de8c <__lshift+0xd0>)
 800ddea:	4829      	ldr	r0, [pc, #164]	; (800de90 <__lshift+0xd4>)
 800ddec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ddf0:	f7fe fa88 	bl	800c304 <__assert_func>
 800ddf4:	3101      	adds	r1, #1
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	e7ee      	b.n	800ddd8 <__lshift+0x1c>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f100 0114 	add.w	r1, r0, #20
 800de00:	f100 0210 	add.w	r2, r0, #16
 800de04:	4618      	mov	r0, r3
 800de06:	4553      	cmp	r3, sl
 800de08:	db33      	blt.n	800de72 <__lshift+0xb6>
 800de0a:	6920      	ldr	r0, [r4, #16]
 800de0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de10:	f104 0314 	add.w	r3, r4, #20
 800de14:	f019 091f 	ands.w	r9, r9, #31
 800de18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de20:	d02b      	beq.n	800de7a <__lshift+0xbe>
 800de22:	f1c9 0e20 	rsb	lr, r9, #32
 800de26:	468a      	mov	sl, r1
 800de28:	2200      	movs	r2, #0
 800de2a:	6818      	ldr	r0, [r3, #0]
 800de2c:	fa00 f009 	lsl.w	r0, r0, r9
 800de30:	4310      	orrs	r0, r2
 800de32:	f84a 0b04 	str.w	r0, [sl], #4
 800de36:	f853 2b04 	ldr.w	r2, [r3], #4
 800de3a:	459c      	cmp	ip, r3
 800de3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800de40:	d8f3      	bhi.n	800de2a <__lshift+0x6e>
 800de42:	ebac 0304 	sub.w	r3, ip, r4
 800de46:	3b15      	subs	r3, #21
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	3304      	adds	r3, #4
 800de4e:	f104 0015 	add.w	r0, r4, #21
 800de52:	4584      	cmp	ip, r0
 800de54:	bf38      	it	cc
 800de56:	2304      	movcc	r3, #4
 800de58:	50ca      	str	r2, [r1, r3]
 800de5a:	b10a      	cbz	r2, 800de60 <__lshift+0xa4>
 800de5c:	f108 0602 	add.w	r6, r8, #2
 800de60:	3e01      	subs	r6, #1
 800de62:	4638      	mov	r0, r7
 800de64:	612e      	str	r6, [r5, #16]
 800de66:	4621      	mov	r1, r4
 800de68:	f7ff fd8e 	bl	800d988 <_Bfree>
 800de6c:	4628      	mov	r0, r5
 800de6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de72:	f842 0f04 	str.w	r0, [r2, #4]!
 800de76:	3301      	adds	r3, #1
 800de78:	e7c5      	b.n	800de06 <__lshift+0x4a>
 800de7a:	3904      	subs	r1, #4
 800de7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de80:	f841 2f04 	str.w	r2, [r1, #4]!
 800de84:	459c      	cmp	ip, r3
 800de86:	d8f9      	bhi.n	800de7c <__lshift+0xc0>
 800de88:	e7ea      	b.n	800de60 <__lshift+0xa4>
 800de8a:	bf00      	nop
 800de8c:	0801263e 	.word	0x0801263e
 800de90:	080126af 	.word	0x080126af

0800de94 <__mcmp>:
 800de94:	b530      	push	{r4, r5, lr}
 800de96:	6902      	ldr	r2, [r0, #16]
 800de98:	690c      	ldr	r4, [r1, #16]
 800de9a:	1b12      	subs	r2, r2, r4
 800de9c:	d10e      	bne.n	800debc <__mcmp+0x28>
 800de9e:	f100 0314 	add.w	r3, r0, #20
 800dea2:	3114      	adds	r1, #20
 800dea4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800deac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800deb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800deb4:	42a5      	cmp	r5, r4
 800deb6:	d003      	beq.n	800dec0 <__mcmp+0x2c>
 800deb8:	d305      	bcc.n	800dec6 <__mcmp+0x32>
 800deba:	2201      	movs	r2, #1
 800debc:	4610      	mov	r0, r2
 800debe:	bd30      	pop	{r4, r5, pc}
 800dec0:	4283      	cmp	r3, r0
 800dec2:	d3f3      	bcc.n	800deac <__mcmp+0x18>
 800dec4:	e7fa      	b.n	800debc <__mcmp+0x28>
 800dec6:	f04f 32ff 	mov.w	r2, #4294967295
 800deca:	e7f7      	b.n	800debc <__mcmp+0x28>

0800decc <__mdiff>:
 800decc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	460c      	mov	r4, r1
 800ded2:	4606      	mov	r6, r0
 800ded4:	4611      	mov	r1, r2
 800ded6:	4620      	mov	r0, r4
 800ded8:	4690      	mov	r8, r2
 800deda:	f7ff ffdb 	bl	800de94 <__mcmp>
 800dede:	1e05      	subs	r5, r0, #0
 800dee0:	d110      	bne.n	800df04 <__mdiff+0x38>
 800dee2:	4629      	mov	r1, r5
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7ff fd0f 	bl	800d908 <_Balloc>
 800deea:	b930      	cbnz	r0, 800defa <__mdiff+0x2e>
 800deec:	4b3a      	ldr	r3, [pc, #232]	; (800dfd8 <__mdiff+0x10c>)
 800deee:	4602      	mov	r2, r0
 800def0:	f240 2137 	movw	r1, #567	; 0x237
 800def4:	4839      	ldr	r0, [pc, #228]	; (800dfdc <__mdiff+0x110>)
 800def6:	f7fe fa05 	bl	800c304 <__assert_func>
 800defa:	2301      	movs	r3, #1
 800defc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df04:	bfa4      	itt	ge
 800df06:	4643      	movge	r3, r8
 800df08:	46a0      	movge	r8, r4
 800df0a:	4630      	mov	r0, r6
 800df0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df10:	bfa6      	itte	ge
 800df12:	461c      	movge	r4, r3
 800df14:	2500      	movge	r5, #0
 800df16:	2501      	movlt	r5, #1
 800df18:	f7ff fcf6 	bl	800d908 <_Balloc>
 800df1c:	b920      	cbnz	r0, 800df28 <__mdiff+0x5c>
 800df1e:	4b2e      	ldr	r3, [pc, #184]	; (800dfd8 <__mdiff+0x10c>)
 800df20:	4602      	mov	r2, r0
 800df22:	f240 2145 	movw	r1, #581	; 0x245
 800df26:	e7e5      	b.n	800def4 <__mdiff+0x28>
 800df28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df2c:	6926      	ldr	r6, [r4, #16]
 800df2e:	60c5      	str	r5, [r0, #12]
 800df30:	f104 0914 	add.w	r9, r4, #20
 800df34:	f108 0514 	add.w	r5, r8, #20
 800df38:	f100 0e14 	add.w	lr, r0, #20
 800df3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df44:	f108 0210 	add.w	r2, r8, #16
 800df48:	46f2      	mov	sl, lr
 800df4a:	2100      	movs	r1, #0
 800df4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800df50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df54:	fa11 f88b 	uxtah	r8, r1, fp
 800df58:	b299      	uxth	r1, r3
 800df5a:	0c1b      	lsrs	r3, r3, #16
 800df5c:	eba8 0801 	sub.w	r8, r8, r1
 800df60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df68:	fa1f f888 	uxth.w	r8, r8
 800df6c:	1419      	asrs	r1, r3, #16
 800df6e:	454e      	cmp	r6, r9
 800df70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df74:	f84a 3b04 	str.w	r3, [sl], #4
 800df78:	d8e8      	bhi.n	800df4c <__mdiff+0x80>
 800df7a:	1b33      	subs	r3, r6, r4
 800df7c:	3b15      	subs	r3, #21
 800df7e:	f023 0303 	bic.w	r3, r3, #3
 800df82:	3304      	adds	r3, #4
 800df84:	3415      	adds	r4, #21
 800df86:	42a6      	cmp	r6, r4
 800df88:	bf38      	it	cc
 800df8a:	2304      	movcc	r3, #4
 800df8c:	441d      	add	r5, r3
 800df8e:	4473      	add	r3, lr
 800df90:	469e      	mov	lr, r3
 800df92:	462e      	mov	r6, r5
 800df94:	4566      	cmp	r6, ip
 800df96:	d30e      	bcc.n	800dfb6 <__mdiff+0xea>
 800df98:	f10c 0203 	add.w	r2, ip, #3
 800df9c:	1b52      	subs	r2, r2, r5
 800df9e:	f022 0203 	bic.w	r2, r2, #3
 800dfa2:	3d03      	subs	r5, #3
 800dfa4:	45ac      	cmp	ip, r5
 800dfa6:	bf38      	it	cc
 800dfa8:	2200      	movcc	r2, #0
 800dfaa:	4413      	add	r3, r2
 800dfac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dfb0:	b17a      	cbz	r2, 800dfd2 <__mdiff+0x106>
 800dfb2:	6107      	str	r7, [r0, #16]
 800dfb4:	e7a4      	b.n	800df00 <__mdiff+0x34>
 800dfb6:	f856 8b04 	ldr.w	r8, [r6], #4
 800dfba:	fa11 f288 	uxtah	r2, r1, r8
 800dfbe:	1414      	asrs	r4, r2, #16
 800dfc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dfc4:	b292      	uxth	r2, r2
 800dfc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dfca:	f84e 2b04 	str.w	r2, [lr], #4
 800dfce:	1421      	asrs	r1, r4, #16
 800dfd0:	e7e0      	b.n	800df94 <__mdiff+0xc8>
 800dfd2:	3f01      	subs	r7, #1
 800dfd4:	e7ea      	b.n	800dfac <__mdiff+0xe0>
 800dfd6:	bf00      	nop
 800dfd8:	0801263e 	.word	0x0801263e
 800dfdc:	080126af 	.word	0x080126af

0800dfe0 <__ulp>:
 800dfe0:	b082      	sub	sp, #8
 800dfe2:	ed8d 0b00 	vstr	d0, [sp]
 800dfe6:	9a01      	ldr	r2, [sp, #4]
 800dfe8:	4b0f      	ldr	r3, [pc, #60]	; (800e028 <__ulp+0x48>)
 800dfea:	4013      	ands	r3, r2
 800dfec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dc08      	bgt.n	800e006 <__ulp+0x26>
 800dff4:	425b      	negs	r3, r3
 800dff6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dffa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dffe:	da04      	bge.n	800e00a <__ulp+0x2a>
 800e000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e004:	4113      	asrs	r3, r2
 800e006:	2200      	movs	r2, #0
 800e008:	e008      	b.n	800e01c <__ulp+0x3c>
 800e00a:	f1a2 0314 	sub.w	r3, r2, #20
 800e00e:	2b1e      	cmp	r3, #30
 800e010:	bfda      	itte	le
 800e012:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e016:	40da      	lsrle	r2, r3
 800e018:	2201      	movgt	r2, #1
 800e01a:	2300      	movs	r3, #0
 800e01c:	4619      	mov	r1, r3
 800e01e:	4610      	mov	r0, r2
 800e020:	ec41 0b10 	vmov	d0, r0, r1
 800e024:	b002      	add	sp, #8
 800e026:	4770      	bx	lr
 800e028:	7ff00000 	.word	0x7ff00000

0800e02c <__b2d>:
 800e02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e030:	6906      	ldr	r6, [r0, #16]
 800e032:	f100 0814 	add.w	r8, r0, #20
 800e036:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e03a:	1f37      	subs	r7, r6, #4
 800e03c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e040:	4610      	mov	r0, r2
 800e042:	f7ff fd53 	bl	800daec <__hi0bits>
 800e046:	f1c0 0320 	rsb	r3, r0, #32
 800e04a:	280a      	cmp	r0, #10
 800e04c:	600b      	str	r3, [r1, #0]
 800e04e:	491b      	ldr	r1, [pc, #108]	; (800e0bc <__b2d+0x90>)
 800e050:	dc15      	bgt.n	800e07e <__b2d+0x52>
 800e052:	f1c0 0c0b 	rsb	ip, r0, #11
 800e056:	fa22 f30c 	lsr.w	r3, r2, ip
 800e05a:	45b8      	cmp	r8, r7
 800e05c:	ea43 0501 	orr.w	r5, r3, r1
 800e060:	bf34      	ite	cc
 800e062:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e066:	2300      	movcs	r3, #0
 800e068:	3015      	adds	r0, #21
 800e06a:	fa02 f000 	lsl.w	r0, r2, r0
 800e06e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e072:	4303      	orrs	r3, r0
 800e074:	461c      	mov	r4, r3
 800e076:	ec45 4b10 	vmov	d0, r4, r5
 800e07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e07e:	45b8      	cmp	r8, r7
 800e080:	bf3a      	itte	cc
 800e082:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e086:	f1a6 0708 	subcc.w	r7, r6, #8
 800e08a:	2300      	movcs	r3, #0
 800e08c:	380b      	subs	r0, #11
 800e08e:	d012      	beq.n	800e0b6 <__b2d+0x8a>
 800e090:	f1c0 0120 	rsb	r1, r0, #32
 800e094:	fa23 f401 	lsr.w	r4, r3, r1
 800e098:	4082      	lsls	r2, r0
 800e09a:	4322      	orrs	r2, r4
 800e09c:	4547      	cmp	r7, r8
 800e09e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e0a2:	bf8c      	ite	hi
 800e0a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e0a8:	2200      	movls	r2, #0
 800e0aa:	4083      	lsls	r3, r0
 800e0ac:	40ca      	lsrs	r2, r1
 800e0ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	e7de      	b.n	800e074 <__b2d+0x48>
 800e0b6:	ea42 0501 	orr.w	r5, r2, r1
 800e0ba:	e7db      	b.n	800e074 <__b2d+0x48>
 800e0bc:	3ff00000 	.word	0x3ff00000

0800e0c0 <__d2b>:
 800e0c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0c4:	460f      	mov	r7, r1
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	ec59 8b10 	vmov	r8, r9, d0
 800e0cc:	4616      	mov	r6, r2
 800e0ce:	f7ff fc1b 	bl	800d908 <_Balloc>
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	b930      	cbnz	r0, 800e0e4 <__d2b+0x24>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	4b24      	ldr	r3, [pc, #144]	; (800e16c <__d2b+0xac>)
 800e0da:	4825      	ldr	r0, [pc, #148]	; (800e170 <__d2b+0xb0>)
 800e0dc:	f240 310f 	movw	r1, #783	; 0x30f
 800e0e0:	f7fe f910 	bl	800c304 <__assert_func>
 800e0e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0ec:	bb2d      	cbnz	r5, 800e13a <__d2b+0x7a>
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	f1b8 0300 	subs.w	r3, r8, #0
 800e0f4:	d026      	beq.n	800e144 <__d2b+0x84>
 800e0f6:	4668      	mov	r0, sp
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	f7ff fd17 	bl	800db2c <__lo0bits>
 800e0fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e102:	b1e8      	cbz	r0, 800e140 <__d2b+0x80>
 800e104:	f1c0 0320 	rsb	r3, r0, #32
 800e108:	fa02 f303 	lsl.w	r3, r2, r3
 800e10c:	430b      	orrs	r3, r1
 800e10e:	40c2      	lsrs	r2, r0
 800e110:	6163      	str	r3, [r4, #20]
 800e112:	9201      	str	r2, [sp, #4]
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	61a3      	str	r3, [r4, #24]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	bf14      	ite	ne
 800e11c:	2202      	movne	r2, #2
 800e11e:	2201      	moveq	r2, #1
 800e120:	6122      	str	r2, [r4, #16]
 800e122:	b1bd      	cbz	r5, 800e154 <__d2b+0x94>
 800e124:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e128:	4405      	add	r5, r0
 800e12a:	603d      	str	r5, [r7, #0]
 800e12c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e130:	6030      	str	r0, [r6, #0]
 800e132:	4620      	mov	r0, r4
 800e134:	b003      	add	sp, #12
 800e136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e13a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e13e:	e7d6      	b.n	800e0ee <__d2b+0x2e>
 800e140:	6161      	str	r1, [r4, #20]
 800e142:	e7e7      	b.n	800e114 <__d2b+0x54>
 800e144:	a801      	add	r0, sp, #4
 800e146:	f7ff fcf1 	bl	800db2c <__lo0bits>
 800e14a:	9b01      	ldr	r3, [sp, #4]
 800e14c:	6163      	str	r3, [r4, #20]
 800e14e:	3020      	adds	r0, #32
 800e150:	2201      	movs	r2, #1
 800e152:	e7e5      	b.n	800e120 <__d2b+0x60>
 800e154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e15c:	6038      	str	r0, [r7, #0]
 800e15e:	6918      	ldr	r0, [r3, #16]
 800e160:	f7ff fcc4 	bl	800daec <__hi0bits>
 800e164:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e168:	e7e2      	b.n	800e130 <__d2b+0x70>
 800e16a:	bf00      	nop
 800e16c:	0801263e 	.word	0x0801263e
 800e170:	080126af 	.word	0x080126af

0800e174 <__ratio>:
 800e174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	4688      	mov	r8, r1
 800e17a:	4669      	mov	r1, sp
 800e17c:	4681      	mov	r9, r0
 800e17e:	f7ff ff55 	bl	800e02c <__b2d>
 800e182:	a901      	add	r1, sp, #4
 800e184:	4640      	mov	r0, r8
 800e186:	ec55 4b10 	vmov	r4, r5, d0
 800e18a:	f7ff ff4f 	bl	800e02c <__b2d>
 800e18e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e192:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e196:	eba3 0c02 	sub.w	ip, r3, r2
 800e19a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e19e:	1a9b      	subs	r3, r3, r2
 800e1a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e1a4:	ec51 0b10 	vmov	r0, r1, d0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bfd6      	itet	le
 800e1ac:	460a      	movle	r2, r1
 800e1ae:	462a      	movgt	r2, r5
 800e1b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e1b4:	468b      	mov	fp, r1
 800e1b6:	462f      	mov	r7, r5
 800e1b8:	bfd4      	ite	le
 800e1ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e1be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	ee10 2a10 	vmov	r2, s0
 800e1c8:	465b      	mov	r3, fp
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	f7f2 fb4e 	bl	800086c <__aeabi_ddiv>
 800e1d0:	ec41 0b10 	vmov	d0, r0, r1
 800e1d4:	b003      	add	sp, #12
 800e1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1da <__copybits>:
 800e1da:	3901      	subs	r1, #1
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	1149      	asrs	r1, r1, #5
 800e1e0:	6914      	ldr	r4, [r2, #16]
 800e1e2:	3101      	adds	r1, #1
 800e1e4:	f102 0314 	add.w	r3, r2, #20
 800e1e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1f0:	1f05      	subs	r5, r0, #4
 800e1f2:	42a3      	cmp	r3, r4
 800e1f4:	d30c      	bcc.n	800e210 <__copybits+0x36>
 800e1f6:	1aa3      	subs	r3, r4, r2
 800e1f8:	3b11      	subs	r3, #17
 800e1fa:	f023 0303 	bic.w	r3, r3, #3
 800e1fe:	3211      	adds	r2, #17
 800e200:	42a2      	cmp	r2, r4
 800e202:	bf88      	it	hi
 800e204:	2300      	movhi	r3, #0
 800e206:	4418      	add	r0, r3
 800e208:	2300      	movs	r3, #0
 800e20a:	4288      	cmp	r0, r1
 800e20c:	d305      	bcc.n	800e21a <__copybits+0x40>
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
 800e210:	f853 6b04 	ldr.w	r6, [r3], #4
 800e214:	f845 6f04 	str.w	r6, [r5, #4]!
 800e218:	e7eb      	b.n	800e1f2 <__copybits+0x18>
 800e21a:	f840 3b04 	str.w	r3, [r0], #4
 800e21e:	e7f4      	b.n	800e20a <__copybits+0x30>

0800e220 <__any_on>:
 800e220:	f100 0214 	add.w	r2, r0, #20
 800e224:	6900      	ldr	r0, [r0, #16]
 800e226:	114b      	asrs	r3, r1, #5
 800e228:	4298      	cmp	r0, r3
 800e22a:	b510      	push	{r4, lr}
 800e22c:	db11      	blt.n	800e252 <__any_on+0x32>
 800e22e:	dd0a      	ble.n	800e246 <__any_on+0x26>
 800e230:	f011 011f 	ands.w	r1, r1, #31
 800e234:	d007      	beq.n	800e246 <__any_on+0x26>
 800e236:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e23a:	fa24 f001 	lsr.w	r0, r4, r1
 800e23e:	fa00 f101 	lsl.w	r1, r0, r1
 800e242:	428c      	cmp	r4, r1
 800e244:	d10b      	bne.n	800e25e <__any_on+0x3e>
 800e246:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d803      	bhi.n	800e256 <__any_on+0x36>
 800e24e:	2000      	movs	r0, #0
 800e250:	bd10      	pop	{r4, pc}
 800e252:	4603      	mov	r3, r0
 800e254:	e7f7      	b.n	800e246 <__any_on+0x26>
 800e256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e25a:	2900      	cmp	r1, #0
 800e25c:	d0f5      	beq.n	800e24a <__any_on+0x2a>
 800e25e:	2001      	movs	r0, #1
 800e260:	e7f6      	b.n	800e250 <__any_on+0x30>
	...

0800e264 <_strtol_l.constprop.0>:
 800e264:	2b01      	cmp	r3, #1
 800e266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e26a:	d001      	beq.n	800e270 <_strtol_l.constprop.0+0xc>
 800e26c:	2b24      	cmp	r3, #36	; 0x24
 800e26e:	d906      	bls.n	800e27e <_strtol_l.constprop.0+0x1a>
 800e270:	f7fd fff6 	bl	800c260 <__errno>
 800e274:	2316      	movs	r3, #22
 800e276:	6003      	str	r3, [r0, #0]
 800e278:	2000      	movs	r0, #0
 800e27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e364 <_strtol_l.constprop.0+0x100>
 800e282:	460d      	mov	r5, r1
 800e284:	462e      	mov	r6, r5
 800e286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e28a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e28e:	f017 0708 	ands.w	r7, r7, #8
 800e292:	d1f7      	bne.n	800e284 <_strtol_l.constprop.0+0x20>
 800e294:	2c2d      	cmp	r4, #45	; 0x2d
 800e296:	d132      	bne.n	800e2fe <_strtol_l.constprop.0+0x9a>
 800e298:	782c      	ldrb	r4, [r5, #0]
 800e29a:	2701      	movs	r7, #1
 800e29c:	1cb5      	adds	r5, r6, #2
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d05b      	beq.n	800e35a <_strtol_l.constprop.0+0xf6>
 800e2a2:	2b10      	cmp	r3, #16
 800e2a4:	d109      	bne.n	800e2ba <_strtol_l.constprop.0+0x56>
 800e2a6:	2c30      	cmp	r4, #48	; 0x30
 800e2a8:	d107      	bne.n	800e2ba <_strtol_l.constprop.0+0x56>
 800e2aa:	782c      	ldrb	r4, [r5, #0]
 800e2ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e2b0:	2c58      	cmp	r4, #88	; 0x58
 800e2b2:	d14d      	bne.n	800e350 <_strtol_l.constprop.0+0xec>
 800e2b4:	786c      	ldrb	r4, [r5, #1]
 800e2b6:	2310      	movs	r3, #16
 800e2b8:	3502      	adds	r5, #2
 800e2ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e2be:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2c2:	f04f 0e00 	mov.w	lr, #0
 800e2c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e2ca:	4676      	mov	r6, lr
 800e2cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800e2d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e2d4:	f1bc 0f09 	cmp.w	ip, #9
 800e2d8:	d816      	bhi.n	800e308 <_strtol_l.constprop.0+0xa4>
 800e2da:	4664      	mov	r4, ip
 800e2dc:	42a3      	cmp	r3, r4
 800e2de:	dd24      	ble.n	800e32a <_strtol_l.constprop.0+0xc6>
 800e2e0:	f1be 3fff 	cmp.w	lr, #4294967295
 800e2e4:	d008      	beq.n	800e2f8 <_strtol_l.constprop.0+0x94>
 800e2e6:	45b1      	cmp	r9, r6
 800e2e8:	d31c      	bcc.n	800e324 <_strtol_l.constprop.0+0xc0>
 800e2ea:	d101      	bne.n	800e2f0 <_strtol_l.constprop.0+0x8c>
 800e2ec:	45a2      	cmp	sl, r4
 800e2ee:	db19      	blt.n	800e324 <_strtol_l.constprop.0+0xc0>
 800e2f0:	fb06 4603 	mla	r6, r6, r3, r4
 800e2f4:	f04f 0e01 	mov.w	lr, #1
 800e2f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2fc:	e7e8      	b.n	800e2d0 <_strtol_l.constprop.0+0x6c>
 800e2fe:	2c2b      	cmp	r4, #43	; 0x2b
 800e300:	bf04      	itt	eq
 800e302:	782c      	ldrbeq	r4, [r5, #0]
 800e304:	1cb5      	addeq	r5, r6, #2
 800e306:	e7ca      	b.n	800e29e <_strtol_l.constprop.0+0x3a>
 800e308:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e30c:	f1bc 0f19 	cmp.w	ip, #25
 800e310:	d801      	bhi.n	800e316 <_strtol_l.constprop.0+0xb2>
 800e312:	3c37      	subs	r4, #55	; 0x37
 800e314:	e7e2      	b.n	800e2dc <_strtol_l.constprop.0+0x78>
 800e316:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e31a:	f1bc 0f19 	cmp.w	ip, #25
 800e31e:	d804      	bhi.n	800e32a <_strtol_l.constprop.0+0xc6>
 800e320:	3c57      	subs	r4, #87	; 0x57
 800e322:	e7db      	b.n	800e2dc <_strtol_l.constprop.0+0x78>
 800e324:	f04f 3eff 	mov.w	lr, #4294967295
 800e328:	e7e6      	b.n	800e2f8 <_strtol_l.constprop.0+0x94>
 800e32a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e32e:	d105      	bne.n	800e33c <_strtol_l.constprop.0+0xd8>
 800e330:	2322      	movs	r3, #34	; 0x22
 800e332:	6003      	str	r3, [r0, #0]
 800e334:	4646      	mov	r6, r8
 800e336:	b942      	cbnz	r2, 800e34a <_strtol_l.constprop.0+0xe6>
 800e338:	4630      	mov	r0, r6
 800e33a:	e79e      	b.n	800e27a <_strtol_l.constprop.0+0x16>
 800e33c:	b107      	cbz	r7, 800e340 <_strtol_l.constprop.0+0xdc>
 800e33e:	4276      	negs	r6, r6
 800e340:	2a00      	cmp	r2, #0
 800e342:	d0f9      	beq.n	800e338 <_strtol_l.constprop.0+0xd4>
 800e344:	f1be 0f00 	cmp.w	lr, #0
 800e348:	d000      	beq.n	800e34c <_strtol_l.constprop.0+0xe8>
 800e34a:	1e69      	subs	r1, r5, #1
 800e34c:	6011      	str	r1, [r2, #0]
 800e34e:	e7f3      	b.n	800e338 <_strtol_l.constprop.0+0xd4>
 800e350:	2430      	movs	r4, #48	; 0x30
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1b1      	bne.n	800e2ba <_strtol_l.constprop.0+0x56>
 800e356:	2308      	movs	r3, #8
 800e358:	e7af      	b.n	800e2ba <_strtol_l.constprop.0+0x56>
 800e35a:	2c30      	cmp	r4, #48	; 0x30
 800e35c:	d0a5      	beq.n	800e2aa <_strtol_l.constprop.0+0x46>
 800e35e:	230a      	movs	r3, #10
 800e360:	e7ab      	b.n	800e2ba <_strtol_l.constprop.0+0x56>
 800e362:	bf00      	nop
 800e364:	08012805 	.word	0x08012805

0800e368 <_strtol_r>:
 800e368:	f7ff bf7c 	b.w	800e264 <_strtol_l.constprop.0>

0800e36c <__ascii_wctomb>:
 800e36c:	b149      	cbz	r1, 800e382 <__ascii_wctomb+0x16>
 800e36e:	2aff      	cmp	r2, #255	; 0xff
 800e370:	bf85      	ittet	hi
 800e372:	238a      	movhi	r3, #138	; 0x8a
 800e374:	6003      	strhi	r3, [r0, #0]
 800e376:	700a      	strbls	r2, [r1, #0]
 800e378:	f04f 30ff 	movhi.w	r0, #4294967295
 800e37c:	bf98      	it	ls
 800e37e:	2001      	movls	r0, #1
 800e380:	4770      	bx	lr
 800e382:	4608      	mov	r0, r1
 800e384:	4770      	bx	lr

0800e386 <__ssputs_r>:
 800e386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e38a:	688e      	ldr	r6, [r1, #8]
 800e38c:	461f      	mov	r7, r3
 800e38e:	42be      	cmp	r6, r7
 800e390:	680b      	ldr	r3, [r1, #0]
 800e392:	4682      	mov	sl, r0
 800e394:	460c      	mov	r4, r1
 800e396:	4690      	mov	r8, r2
 800e398:	d82c      	bhi.n	800e3f4 <__ssputs_r+0x6e>
 800e39a:	898a      	ldrh	r2, [r1, #12]
 800e39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3a0:	d026      	beq.n	800e3f0 <__ssputs_r+0x6a>
 800e3a2:	6965      	ldr	r5, [r4, #20]
 800e3a4:	6909      	ldr	r1, [r1, #16]
 800e3a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3aa:	eba3 0901 	sub.w	r9, r3, r1
 800e3ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3b2:	1c7b      	adds	r3, r7, #1
 800e3b4:	444b      	add	r3, r9
 800e3b6:	106d      	asrs	r5, r5, #1
 800e3b8:	429d      	cmp	r5, r3
 800e3ba:	bf38      	it	cc
 800e3bc:	461d      	movcc	r5, r3
 800e3be:	0553      	lsls	r3, r2, #21
 800e3c0:	d527      	bpl.n	800e412 <__ssputs_r+0x8c>
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	f7ff fa02 	bl	800d7cc <_malloc_r>
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	b360      	cbz	r0, 800e426 <__ssputs_r+0xa0>
 800e3cc:	6921      	ldr	r1, [r4, #16]
 800e3ce:	464a      	mov	r2, r9
 800e3d0:	f7fd ff7a 	bl	800c2c8 <memcpy>
 800e3d4:	89a3      	ldrh	r3, [r4, #12]
 800e3d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3de:	81a3      	strh	r3, [r4, #12]
 800e3e0:	6126      	str	r6, [r4, #16]
 800e3e2:	6165      	str	r5, [r4, #20]
 800e3e4:	444e      	add	r6, r9
 800e3e6:	eba5 0509 	sub.w	r5, r5, r9
 800e3ea:	6026      	str	r6, [r4, #0]
 800e3ec:	60a5      	str	r5, [r4, #8]
 800e3ee:	463e      	mov	r6, r7
 800e3f0:	42be      	cmp	r6, r7
 800e3f2:	d900      	bls.n	800e3f6 <__ssputs_r+0x70>
 800e3f4:	463e      	mov	r6, r7
 800e3f6:	6820      	ldr	r0, [r4, #0]
 800e3f8:	4632      	mov	r2, r6
 800e3fa:	4641      	mov	r1, r8
 800e3fc:	f000 fd6f 	bl	800eede <memmove>
 800e400:	68a3      	ldr	r3, [r4, #8]
 800e402:	1b9b      	subs	r3, r3, r6
 800e404:	60a3      	str	r3, [r4, #8]
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	4433      	add	r3, r6
 800e40a:	6023      	str	r3, [r4, #0]
 800e40c:	2000      	movs	r0, #0
 800e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e412:	462a      	mov	r2, r5
 800e414:	f000 fdab 	bl	800ef6e <_realloc_r>
 800e418:	4606      	mov	r6, r0
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d1e0      	bne.n	800e3e0 <__ssputs_r+0x5a>
 800e41e:	6921      	ldr	r1, [r4, #16]
 800e420:	4650      	mov	r0, sl
 800e422:	f7fe fe07 	bl	800d034 <_free_r>
 800e426:	230c      	movs	r3, #12
 800e428:	f8ca 3000 	str.w	r3, [sl]
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	f04f 30ff 	mov.w	r0, #4294967295
 800e438:	e7e9      	b.n	800e40e <__ssputs_r+0x88>
	...

0800e43c <_svfiprintf_r>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	4698      	mov	r8, r3
 800e442:	898b      	ldrh	r3, [r1, #12]
 800e444:	061b      	lsls	r3, r3, #24
 800e446:	b09d      	sub	sp, #116	; 0x74
 800e448:	4607      	mov	r7, r0
 800e44a:	460d      	mov	r5, r1
 800e44c:	4614      	mov	r4, r2
 800e44e:	d50e      	bpl.n	800e46e <_svfiprintf_r+0x32>
 800e450:	690b      	ldr	r3, [r1, #16]
 800e452:	b963      	cbnz	r3, 800e46e <_svfiprintf_r+0x32>
 800e454:	2140      	movs	r1, #64	; 0x40
 800e456:	f7ff f9b9 	bl	800d7cc <_malloc_r>
 800e45a:	6028      	str	r0, [r5, #0]
 800e45c:	6128      	str	r0, [r5, #16]
 800e45e:	b920      	cbnz	r0, 800e46a <_svfiprintf_r+0x2e>
 800e460:	230c      	movs	r3, #12
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	f04f 30ff 	mov.w	r0, #4294967295
 800e468:	e0d0      	b.n	800e60c <_svfiprintf_r+0x1d0>
 800e46a:	2340      	movs	r3, #64	; 0x40
 800e46c:	616b      	str	r3, [r5, #20]
 800e46e:	2300      	movs	r3, #0
 800e470:	9309      	str	r3, [sp, #36]	; 0x24
 800e472:	2320      	movs	r3, #32
 800e474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e478:	f8cd 800c 	str.w	r8, [sp, #12]
 800e47c:	2330      	movs	r3, #48	; 0x30
 800e47e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e624 <_svfiprintf_r+0x1e8>
 800e482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e486:	f04f 0901 	mov.w	r9, #1
 800e48a:	4623      	mov	r3, r4
 800e48c:	469a      	mov	sl, r3
 800e48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e492:	b10a      	cbz	r2, 800e498 <_svfiprintf_r+0x5c>
 800e494:	2a25      	cmp	r2, #37	; 0x25
 800e496:	d1f9      	bne.n	800e48c <_svfiprintf_r+0x50>
 800e498:	ebba 0b04 	subs.w	fp, sl, r4
 800e49c:	d00b      	beq.n	800e4b6 <_svfiprintf_r+0x7a>
 800e49e:	465b      	mov	r3, fp
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f7ff ff6e 	bl	800e386 <__ssputs_r>
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	f000 80a9 	beq.w	800e602 <_svfiprintf_r+0x1c6>
 800e4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4b2:	445a      	add	r2, fp
 800e4b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f000 80a1 	beq.w	800e602 <_svfiprintf_r+0x1c6>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4ca:	f10a 0a01 	add.w	sl, sl, #1
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	9307      	str	r3, [sp, #28]
 800e4d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4d6:	931a      	str	r3, [sp, #104]	; 0x68
 800e4d8:	4654      	mov	r4, sl
 800e4da:	2205      	movs	r2, #5
 800e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e0:	4850      	ldr	r0, [pc, #320]	; (800e624 <_svfiprintf_r+0x1e8>)
 800e4e2:	f7f1 fe85 	bl	80001f0 <memchr>
 800e4e6:	9a04      	ldr	r2, [sp, #16]
 800e4e8:	b9d8      	cbnz	r0, 800e522 <_svfiprintf_r+0xe6>
 800e4ea:	06d0      	lsls	r0, r2, #27
 800e4ec:	bf44      	itt	mi
 800e4ee:	2320      	movmi	r3, #32
 800e4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4f4:	0711      	lsls	r1, r2, #28
 800e4f6:	bf44      	itt	mi
 800e4f8:	232b      	movmi	r3, #43	; 0x2b
 800e4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e502:	2b2a      	cmp	r3, #42	; 0x2a
 800e504:	d015      	beq.n	800e532 <_svfiprintf_r+0xf6>
 800e506:	9a07      	ldr	r2, [sp, #28]
 800e508:	4654      	mov	r4, sl
 800e50a:	2000      	movs	r0, #0
 800e50c:	f04f 0c0a 	mov.w	ip, #10
 800e510:	4621      	mov	r1, r4
 800e512:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e516:	3b30      	subs	r3, #48	; 0x30
 800e518:	2b09      	cmp	r3, #9
 800e51a:	d94d      	bls.n	800e5b8 <_svfiprintf_r+0x17c>
 800e51c:	b1b0      	cbz	r0, 800e54c <_svfiprintf_r+0x110>
 800e51e:	9207      	str	r2, [sp, #28]
 800e520:	e014      	b.n	800e54c <_svfiprintf_r+0x110>
 800e522:	eba0 0308 	sub.w	r3, r0, r8
 800e526:	fa09 f303 	lsl.w	r3, r9, r3
 800e52a:	4313      	orrs	r3, r2
 800e52c:	9304      	str	r3, [sp, #16]
 800e52e:	46a2      	mov	sl, r4
 800e530:	e7d2      	b.n	800e4d8 <_svfiprintf_r+0x9c>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	1d19      	adds	r1, r3, #4
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	9103      	str	r1, [sp, #12]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	bfbb      	ittet	lt
 800e53e:	425b      	neglt	r3, r3
 800e540:	f042 0202 	orrlt.w	r2, r2, #2
 800e544:	9307      	strge	r3, [sp, #28]
 800e546:	9307      	strlt	r3, [sp, #28]
 800e548:	bfb8      	it	lt
 800e54a:	9204      	strlt	r2, [sp, #16]
 800e54c:	7823      	ldrb	r3, [r4, #0]
 800e54e:	2b2e      	cmp	r3, #46	; 0x2e
 800e550:	d10c      	bne.n	800e56c <_svfiprintf_r+0x130>
 800e552:	7863      	ldrb	r3, [r4, #1]
 800e554:	2b2a      	cmp	r3, #42	; 0x2a
 800e556:	d134      	bne.n	800e5c2 <_svfiprintf_r+0x186>
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	1d1a      	adds	r2, r3, #4
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	9203      	str	r2, [sp, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	bfb8      	it	lt
 800e564:	f04f 33ff 	movlt.w	r3, #4294967295
 800e568:	3402      	adds	r4, #2
 800e56a:	9305      	str	r3, [sp, #20]
 800e56c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e634 <_svfiprintf_r+0x1f8>
 800e570:	7821      	ldrb	r1, [r4, #0]
 800e572:	2203      	movs	r2, #3
 800e574:	4650      	mov	r0, sl
 800e576:	f7f1 fe3b 	bl	80001f0 <memchr>
 800e57a:	b138      	cbz	r0, 800e58c <_svfiprintf_r+0x150>
 800e57c:	9b04      	ldr	r3, [sp, #16]
 800e57e:	eba0 000a 	sub.w	r0, r0, sl
 800e582:	2240      	movs	r2, #64	; 0x40
 800e584:	4082      	lsls	r2, r0
 800e586:	4313      	orrs	r3, r2
 800e588:	3401      	adds	r4, #1
 800e58a:	9304      	str	r3, [sp, #16]
 800e58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e590:	4825      	ldr	r0, [pc, #148]	; (800e628 <_svfiprintf_r+0x1ec>)
 800e592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e596:	2206      	movs	r2, #6
 800e598:	f7f1 fe2a 	bl	80001f0 <memchr>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d038      	beq.n	800e612 <_svfiprintf_r+0x1d6>
 800e5a0:	4b22      	ldr	r3, [pc, #136]	; (800e62c <_svfiprintf_r+0x1f0>)
 800e5a2:	bb1b      	cbnz	r3, 800e5ec <_svfiprintf_r+0x1b0>
 800e5a4:	9b03      	ldr	r3, [sp, #12]
 800e5a6:	3307      	adds	r3, #7
 800e5a8:	f023 0307 	bic.w	r3, r3, #7
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	9303      	str	r3, [sp, #12]
 800e5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b2:	4433      	add	r3, r6
 800e5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5b6:	e768      	b.n	800e48a <_svfiprintf_r+0x4e>
 800e5b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5bc:	460c      	mov	r4, r1
 800e5be:	2001      	movs	r0, #1
 800e5c0:	e7a6      	b.n	800e510 <_svfiprintf_r+0xd4>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	3401      	adds	r4, #1
 800e5c6:	9305      	str	r3, [sp, #20]
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	f04f 0c0a 	mov.w	ip, #10
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5d4:	3a30      	subs	r2, #48	; 0x30
 800e5d6:	2a09      	cmp	r2, #9
 800e5d8:	d903      	bls.n	800e5e2 <_svfiprintf_r+0x1a6>
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0c6      	beq.n	800e56c <_svfiprintf_r+0x130>
 800e5de:	9105      	str	r1, [sp, #20]
 800e5e0:	e7c4      	b.n	800e56c <_svfiprintf_r+0x130>
 800e5e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e7f0      	b.n	800e5ce <_svfiprintf_r+0x192>
 800e5ec:	ab03      	add	r3, sp, #12
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	462a      	mov	r2, r5
 800e5f2:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <_svfiprintf_r+0x1f4>)
 800e5f4:	a904      	add	r1, sp, #16
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f7fc fe3a 	bl	800b270 <_printf_float>
 800e5fc:	1c42      	adds	r2, r0, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	d1d6      	bne.n	800e5b0 <_svfiprintf_r+0x174>
 800e602:	89ab      	ldrh	r3, [r5, #12]
 800e604:	065b      	lsls	r3, r3, #25
 800e606:	f53f af2d 	bmi.w	800e464 <_svfiprintf_r+0x28>
 800e60a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e60c:	b01d      	add	sp, #116	; 0x74
 800e60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e612:	ab03      	add	r3, sp, #12
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	462a      	mov	r2, r5
 800e618:	4b05      	ldr	r3, [pc, #20]	; (800e630 <_svfiprintf_r+0x1f4>)
 800e61a:	a904      	add	r1, sp, #16
 800e61c:	4638      	mov	r0, r7
 800e61e:	f7fd f8cb 	bl	800b7b8 <_printf_i>
 800e622:	e7eb      	b.n	800e5fc <_svfiprintf_r+0x1c0>
 800e624:	08012905 	.word	0x08012905
 800e628:	0801290f 	.word	0x0801290f
 800e62c:	0800b271 	.word	0x0800b271
 800e630:	0800e387 	.word	0x0800e387
 800e634:	0801290b 	.word	0x0801290b

0800e638 <_sungetc_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	1c4b      	adds	r3, r1, #1
 800e63c:	4614      	mov	r4, r2
 800e63e:	d103      	bne.n	800e648 <_sungetc_r+0x10>
 800e640:	f04f 35ff 	mov.w	r5, #4294967295
 800e644:	4628      	mov	r0, r5
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	8993      	ldrh	r3, [r2, #12]
 800e64a:	f023 0320 	bic.w	r3, r3, #32
 800e64e:	8193      	strh	r3, [r2, #12]
 800e650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e652:	6852      	ldr	r2, [r2, #4]
 800e654:	b2cd      	uxtb	r5, r1
 800e656:	b18b      	cbz	r3, 800e67c <_sungetc_r+0x44>
 800e658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e65a:	4293      	cmp	r3, r2
 800e65c:	dd08      	ble.n	800e670 <_sungetc_r+0x38>
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	1e5a      	subs	r2, r3, #1
 800e662:	6022      	str	r2, [r4, #0]
 800e664:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e668:	6863      	ldr	r3, [r4, #4]
 800e66a:	3301      	adds	r3, #1
 800e66c:	6063      	str	r3, [r4, #4]
 800e66e:	e7e9      	b.n	800e644 <_sungetc_r+0xc>
 800e670:	4621      	mov	r1, r4
 800e672:	f000 fbfa 	bl	800ee6a <__submore>
 800e676:	2800      	cmp	r0, #0
 800e678:	d0f1      	beq.n	800e65e <_sungetc_r+0x26>
 800e67a:	e7e1      	b.n	800e640 <_sungetc_r+0x8>
 800e67c:	6921      	ldr	r1, [r4, #16]
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	b151      	cbz	r1, 800e698 <_sungetc_r+0x60>
 800e682:	4299      	cmp	r1, r3
 800e684:	d208      	bcs.n	800e698 <_sungetc_r+0x60>
 800e686:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e68a:	42a9      	cmp	r1, r5
 800e68c:	d104      	bne.n	800e698 <_sungetc_r+0x60>
 800e68e:	3b01      	subs	r3, #1
 800e690:	3201      	adds	r2, #1
 800e692:	6023      	str	r3, [r4, #0]
 800e694:	6062      	str	r2, [r4, #4]
 800e696:	e7d5      	b.n	800e644 <_sungetc_r+0xc>
 800e698:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e6a6:	4623      	mov	r3, r4
 800e6a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e7dc      	b.n	800e66c <_sungetc_r+0x34>

0800e6b2 <__ssrefill_r>:
 800e6b2:	b510      	push	{r4, lr}
 800e6b4:	460c      	mov	r4, r1
 800e6b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e6b8:	b169      	cbz	r1, 800e6d6 <__ssrefill_r+0x24>
 800e6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6be:	4299      	cmp	r1, r3
 800e6c0:	d001      	beq.n	800e6c6 <__ssrefill_r+0x14>
 800e6c2:	f7fe fcb7 	bl	800d034 <_free_r>
 800e6c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6c8:	6063      	str	r3, [r4, #4]
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	6360      	str	r0, [r4, #52]	; 0x34
 800e6ce:	b113      	cbz	r3, 800e6d6 <__ssrefill_r+0x24>
 800e6d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	bd10      	pop	{r4, pc}
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	2300      	movs	r3, #0
 800e6dc:	6063      	str	r3, [r4, #4]
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f043 0320 	orr.w	r3, r3, #32
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ea:	e7f3      	b.n	800e6d4 <__ssrefill_r+0x22>

0800e6ec <__ssvfiscanf_r>:
 800e6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e6fc:	49a6      	ldr	r1, [pc, #664]	; (800e998 <__ssvfiscanf_r+0x2ac>)
 800e6fe:	91a0      	str	r1, [sp, #640]	; 0x280
 800e700:	f10d 0804 	add.w	r8, sp, #4
 800e704:	49a5      	ldr	r1, [pc, #660]	; (800e99c <__ssvfiscanf_r+0x2b0>)
 800e706:	4fa6      	ldr	r7, [pc, #664]	; (800e9a0 <__ssvfiscanf_r+0x2b4>)
 800e708:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e9a4 <__ssvfiscanf_r+0x2b8>
 800e70c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e710:	4606      	mov	r6, r0
 800e712:	91a1      	str	r1, [sp, #644]	; 0x284
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	7813      	ldrb	r3, [r2, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 815a 	beq.w	800e9d2 <__ssvfiscanf_r+0x2e6>
 800e71e:	5cf9      	ldrb	r1, [r7, r3]
 800e720:	f011 0108 	ands.w	r1, r1, #8
 800e724:	f102 0501 	add.w	r5, r2, #1
 800e728:	d019      	beq.n	800e75e <__ssvfiscanf_r+0x72>
 800e72a:	6863      	ldr	r3, [r4, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	dd0f      	ble.n	800e750 <__ssvfiscanf_r+0x64>
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	781a      	ldrb	r2, [r3, #0]
 800e734:	5cba      	ldrb	r2, [r7, r2]
 800e736:	0712      	lsls	r2, r2, #28
 800e738:	d401      	bmi.n	800e73e <__ssvfiscanf_r+0x52>
 800e73a:	462a      	mov	r2, r5
 800e73c:	e7eb      	b.n	800e716 <__ssvfiscanf_r+0x2a>
 800e73e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e740:	3201      	adds	r2, #1
 800e742:	9245      	str	r2, [sp, #276]	; 0x114
 800e744:	6862      	ldr	r2, [r4, #4]
 800e746:	3301      	adds	r3, #1
 800e748:	3a01      	subs	r2, #1
 800e74a:	6062      	str	r2, [r4, #4]
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	e7ec      	b.n	800e72a <__ssvfiscanf_r+0x3e>
 800e750:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e752:	4621      	mov	r1, r4
 800e754:	4630      	mov	r0, r6
 800e756:	4798      	blx	r3
 800e758:	2800      	cmp	r0, #0
 800e75a:	d0e9      	beq.n	800e730 <__ssvfiscanf_r+0x44>
 800e75c:	e7ed      	b.n	800e73a <__ssvfiscanf_r+0x4e>
 800e75e:	2b25      	cmp	r3, #37	; 0x25
 800e760:	d012      	beq.n	800e788 <__ssvfiscanf_r+0x9c>
 800e762:	469a      	mov	sl, r3
 800e764:	6863      	ldr	r3, [r4, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	f340 8091 	ble.w	800e88e <__ssvfiscanf_r+0x1a2>
 800e76c:	6822      	ldr	r2, [r4, #0]
 800e76e:	7813      	ldrb	r3, [r2, #0]
 800e770:	4553      	cmp	r3, sl
 800e772:	f040 812e 	bne.w	800e9d2 <__ssvfiscanf_r+0x2e6>
 800e776:	6863      	ldr	r3, [r4, #4]
 800e778:	3b01      	subs	r3, #1
 800e77a:	6063      	str	r3, [r4, #4]
 800e77c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e77e:	3201      	adds	r2, #1
 800e780:	3301      	adds	r3, #1
 800e782:	6022      	str	r2, [r4, #0]
 800e784:	9345      	str	r3, [sp, #276]	; 0x114
 800e786:	e7d8      	b.n	800e73a <__ssvfiscanf_r+0x4e>
 800e788:	9141      	str	r1, [sp, #260]	; 0x104
 800e78a:	9143      	str	r1, [sp, #268]	; 0x10c
 800e78c:	7853      	ldrb	r3, [r2, #1]
 800e78e:	2b2a      	cmp	r3, #42	; 0x2a
 800e790:	bf02      	ittt	eq
 800e792:	2310      	moveq	r3, #16
 800e794:	1c95      	addeq	r5, r2, #2
 800e796:	9341      	streq	r3, [sp, #260]	; 0x104
 800e798:	220a      	movs	r2, #10
 800e79a:	46aa      	mov	sl, r5
 800e79c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e7a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e7a4:	2b09      	cmp	r3, #9
 800e7a6:	d91c      	bls.n	800e7e2 <__ssvfiscanf_r+0xf6>
 800e7a8:	487e      	ldr	r0, [pc, #504]	; (800e9a4 <__ssvfiscanf_r+0x2b8>)
 800e7aa:	2203      	movs	r2, #3
 800e7ac:	f7f1 fd20 	bl	80001f0 <memchr>
 800e7b0:	b138      	cbz	r0, 800e7c2 <__ssvfiscanf_r+0xd6>
 800e7b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e7b4:	eba0 0009 	sub.w	r0, r0, r9
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	4083      	lsls	r3, r0
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	9341      	str	r3, [sp, #260]	; 0x104
 800e7c0:	4655      	mov	r5, sl
 800e7c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e7c6:	2b78      	cmp	r3, #120	; 0x78
 800e7c8:	d806      	bhi.n	800e7d8 <__ssvfiscanf_r+0xec>
 800e7ca:	2b57      	cmp	r3, #87	; 0x57
 800e7cc:	d810      	bhi.n	800e7f0 <__ssvfiscanf_r+0x104>
 800e7ce:	2b25      	cmp	r3, #37	; 0x25
 800e7d0:	d0c7      	beq.n	800e762 <__ssvfiscanf_r+0x76>
 800e7d2:	d857      	bhi.n	800e884 <__ssvfiscanf_r+0x198>
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d065      	beq.n	800e8a4 <__ssvfiscanf_r+0x1b8>
 800e7d8:	2303      	movs	r3, #3
 800e7da:	9347      	str	r3, [sp, #284]	; 0x11c
 800e7dc:	230a      	movs	r3, #10
 800e7de:	9342      	str	r3, [sp, #264]	; 0x108
 800e7e0:	e076      	b.n	800e8d0 <__ssvfiscanf_r+0x1e4>
 800e7e2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e7e4:	fb02 1103 	mla	r1, r2, r3, r1
 800e7e8:	3930      	subs	r1, #48	; 0x30
 800e7ea:	9143      	str	r1, [sp, #268]	; 0x10c
 800e7ec:	4655      	mov	r5, sl
 800e7ee:	e7d4      	b.n	800e79a <__ssvfiscanf_r+0xae>
 800e7f0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e7f4:	2a20      	cmp	r2, #32
 800e7f6:	d8ef      	bhi.n	800e7d8 <__ssvfiscanf_r+0xec>
 800e7f8:	a101      	add	r1, pc, #4	; (adr r1, 800e800 <__ssvfiscanf_r+0x114>)
 800e7fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e7fe:	bf00      	nop
 800e800:	0800e8b3 	.word	0x0800e8b3
 800e804:	0800e7d9 	.word	0x0800e7d9
 800e808:	0800e7d9 	.word	0x0800e7d9
 800e80c:	0800e911 	.word	0x0800e911
 800e810:	0800e7d9 	.word	0x0800e7d9
 800e814:	0800e7d9 	.word	0x0800e7d9
 800e818:	0800e7d9 	.word	0x0800e7d9
 800e81c:	0800e7d9 	.word	0x0800e7d9
 800e820:	0800e7d9 	.word	0x0800e7d9
 800e824:	0800e7d9 	.word	0x0800e7d9
 800e828:	0800e7d9 	.word	0x0800e7d9
 800e82c:	0800e927 	.word	0x0800e927
 800e830:	0800e90d 	.word	0x0800e90d
 800e834:	0800e88b 	.word	0x0800e88b
 800e838:	0800e88b 	.word	0x0800e88b
 800e83c:	0800e88b 	.word	0x0800e88b
 800e840:	0800e7d9 	.word	0x0800e7d9
 800e844:	0800e8c9 	.word	0x0800e8c9
 800e848:	0800e7d9 	.word	0x0800e7d9
 800e84c:	0800e7d9 	.word	0x0800e7d9
 800e850:	0800e7d9 	.word	0x0800e7d9
 800e854:	0800e7d9 	.word	0x0800e7d9
 800e858:	0800e937 	.word	0x0800e937
 800e85c:	0800e905 	.word	0x0800e905
 800e860:	0800e8ab 	.word	0x0800e8ab
 800e864:	0800e7d9 	.word	0x0800e7d9
 800e868:	0800e7d9 	.word	0x0800e7d9
 800e86c:	0800e933 	.word	0x0800e933
 800e870:	0800e7d9 	.word	0x0800e7d9
 800e874:	0800e90d 	.word	0x0800e90d
 800e878:	0800e7d9 	.word	0x0800e7d9
 800e87c:	0800e7d9 	.word	0x0800e7d9
 800e880:	0800e8b3 	.word	0x0800e8b3
 800e884:	3b45      	subs	r3, #69	; 0x45
 800e886:	2b02      	cmp	r3, #2
 800e888:	d8a6      	bhi.n	800e7d8 <__ssvfiscanf_r+0xec>
 800e88a:	2305      	movs	r3, #5
 800e88c:	e01f      	b.n	800e8ce <__ssvfiscanf_r+0x1e2>
 800e88e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e890:	4621      	mov	r1, r4
 800e892:	4630      	mov	r0, r6
 800e894:	4798      	blx	r3
 800e896:	2800      	cmp	r0, #0
 800e898:	f43f af68 	beq.w	800e76c <__ssvfiscanf_r+0x80>
 800e89c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f040 808d 	bne.w	800e9be <__ssvfiscanf_r+0x2d2>
 800e8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a8:	e08f      	b.n	800e9ca <__ssvfiscanf_r+0x2de>
 800e8aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e8ac:	f042 0220 	orr.w	r2, r2, #32
 800e8b0:	9241      	str	r2, [sp, #260]	; 0x104
 800e8b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e8b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8b8:	9241      	str	r2, [sp, #260]	; 0x104
 800e8ba:	2210      	movs	r2, #16
 800e8bc:	2b6f      	cmp	r3, #111	; 0x6f
 800e8be:	9242      	str	r2, [sp, #264]	; 0x108
 800e8c0:	bf34      	ite	cc
 800e8c2:	2303      	movcc	r3, #3
 800e8c4:	2304      	movcs	r3, #4
 800e8c6:	e002      	b.n	800e8ce <__ssvfiscanf_r+0x1e2>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	9342      	str	r3, [sp, #264]	; 0x108
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800e8d0:	6863      	ldr	r3, [r4, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	dd3d      	ble.n	800e952 <__ssvfiscanf_r+0x266>
 800e8d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e8d8:	0659      	lsls	r1, r3, #25
 800e8da:	d404      	bmi.n	800e8e6 <__ssvfiscanf_r+0x1fa>
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	781a      	ldrb	r2, [r3, #0]
 800e8e0:	5cba      	ldrb	r2, [r7, r2]
 800e8e2:	0712      	lsls	r2, r2, #28
 800e8e4:	d43c      	bmi.n	800e960 <__ssvfiscanf_r+0x274>
 800e8e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	dc4b      	bgt.n	800e984 <__ssvfiscanf_r+0x298>
 800e8ec:	466b      	mov	r3, sp
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	a941      	add	r1, sp, #260	; 0x104
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f000 f872 	bl	800e9dc <_scanf_chars>
 800e8f8:	2801      	cmp	r0, #1
 800e8fa:	d06a      	beq.n	800e9d2 <__ssvfiscanf_r+0x2e6>
 800e8fc:	2802      	cmp	r0, #2
 800e8fe:	f47f af1c 	bne.w	800e73a <__ssvfiscanf_r+0x4e>
 800e902:	e7cb      	b.n	800e89c <__ssvfiscanf_r+0x1b0>
 800e904:	2308      	movs	r3, #8
 800e906:	9342      	str	r3, [sp, #264]	; 0x108
 800e908:	2304      	movs	r3, #4
 800e90a:	e7e0      	b.n	800e8ce <__ssvfiscanf_r+0x1e2>
 800e90c:	220a      	movs	r2, #10
 800e90e:	e7d5      	b.n	800e8bc <__ssvfiscanf_r+0x1d0>
 800e910:	4629      	mov	r1, r5
 800e912:	4640      	mov	r0, r8
 800e914:	f000 fa70 	bl	800edf8 <__sccl>
 800e918:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e91e:	9341      	str	r3, [sp, #260]	; 0x104
 800e920:	4605      	mov	r5, r0
 800e922:	2301      	movs	r3, #1
 800e924:	e7d3      	b.n	800e8ce <__ssvfiscanf_r+0x1e2>
 800e926:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e92c:	9341      	str	r3, [sp, #260]	; 0x104
 800e92e:	2300      	movs	r3, #0
 800e930:	e7cd      	b.n	800e8ce <__ssvfiscanf_r+0x1e2>
 800e932:	2302      	movs	r3, #2
 800e934:	e7cb      	b.n	800e8ce <__ssvfiscanf_r+0x1e2>
 800e936:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e938:	06c3      	lsls	r3, r0, #27
 800e93a:	f53f aefe 	bmi.w	800e73a <__ssvfiscanf_r+0x4e>
 800e93e:	9b00      	ldr	r3, [sp, #0]
 800e940:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e942:	1d19      	adds	r1, r3, #4
 800e944:	9100      	str	r1, [sp, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	07c0      	lsls	r0, r0, #31
 800e94a:	bf4c      	ite	mi
 800e94c:	801a      	strhmi	r2, [r3, #0]
 800e94e:	601a      	strpl	r2, [r3, #0]
 800e950:	e6f3      	b.n	800e73a <__ssvfiscanf_r+0x4e>
 800e952:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e954:	4621      	mov	r1, r4
 800e956:	4630      	mov	r0, r6
 800e958:	4798      	blx	r3
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0bb      	beq.n	800e8d6 <__ssvfiscanf_r+0x1ea>
 800e95e:	e79d      	b.n	800e89c <__ssvfiscanf_r+0x1b0>
 800e960:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e962:	3201      	adds	r2, #1
 800e964:	9245      	str	r2, [sp, #276]	; 0x114
 800e966:	6862      	ldr	r2, [r4, #4]
 800e968:	3a01      	subs	r2, #1
 800e96a:	2a00      	cmp	r2, #0
 800e96c:	6062      	str	r2, [r4, #4]
 800e96e:	dd02      	ble.n	800e976 <__ssvfiscanf_r+0x28a>
 800e970:	3301      	adds	r3, #1
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	e7b2      	b.n	800e8dc <__ssvfiscanf_r+0x1f0>
 800e976:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e978:	4621      	mov	r1, r4
 800e97a:	4630      	mov	r0, r6
 800e97c:	4798      	blx	r3
 800e97e:	2800      	cmp	r0, #0
 800e980:	d0ac      	beq.n	800e8dc <__ssvfiscanf_r+0x1f0>
 800e982:	e78b      	b.n	800e89c <__ssvfiscanf_r+0x1b0>
 800e984:	2b04      	cmp	r3, #4
 800e986:	dc0f      	bgt.n	800e9a8 <__ssvfiscanf_r+0x2bc>
 800e988:	466b      	mov	r3, sp
 800e98a:	4622      	mov	r2, r4
 800e98c:	a941      	add	r1, sp, #260	; 0x104
 800e98e:	4630      	mov	r0, r6
 800e990:	f000 f87e 	bl	800ea90 <_scanf_i>
 800e994:	e7b0      	b.n	800e8f8 <__ssvfiscanf_r+0x20c>
 800e996:	bf00      	nop
 800e998:	0800e639 	.word	0x0800e639
 800e99c:	0800e6b3 	.word	0x0800e6b3
 800e9a0:	08012805 	.word	0x08012805
 800e9a4:	0801290b 	.word	0x0801290b
 800e9a8:	4b0b      	ldr	r3, [pc, #44]	; (800e9d8 <__ssvfiscanf_r+0x2ec>)
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f43f aec5 	beq.w	800e73a <__ssvfiscanf_r+0x4e>
 800e9b0:	466b      	mov	r3, sp
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	a941      	add	r1, sp, #260	; 0x104
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f7fd f820 	bl	800b9fc <_scanf_float>
 800e9bc:	e79c      	b.n	800e8f8 <__ssvfiscanf_r+0x20c>
 800e9be:	89a3      	ldrh	r3, [r4, #12]
 800e9c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e9c4:	bf18      	it	ne
 800e9c6:	f04f 30ff 	movne.w	r0, #4294967295
 800e9ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e9d4:	e7f9      	b.n	800e9ca <__ssvfiscanf_r+0x2de>
 800e9d6:	bf00      	nop
 800e9d8:	0800b9fd 	.word	0x0800b9fd

0800e9dc <_scanf_chars>:
 800e9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	688a      	ldr	r2, [r1, #8]
 800e9e4:	4680      	mov	r8, r0
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	b932      	cbnz	r2, 800e9f8 <_scanf_chars+0x1c>
 800e9ea:	698a      	ldr	r2, [r1, #24]
 800e9ec:	2a00      	cmp	r2, #0
 800e9ee:	bf0c      	ite	eq
 800e9f0:	2201      	moveq	r2, #1
 800e9f2:	f04f 32ff 	movne.w	r2, #4294967295
 800e9f6:	608a      	str	r2, [r1, #8]
 800e9f8:	6822      	ldr	r2, [r4, #0]
 800e9fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ea8c <_scanf_chars+0xb0>
 800e9fe:	06d1      	lsls	r1, r2, #27
 800ea00:	bf5f      	itttt	pl
 800ea02:	681a      	ldrpl	r2, [r3, #0]
 800ea04:	1d11      	addpl	r1, r2, #4
 800ea06:	6019      	strpl	r1, [r3, #0]
 800ea08:	6816      	ldrpl	r6, [r2, #0]
 800ea0a:	2700      	movs	r7, #0
 800ea0c:	69a0      	ldr	r0, [r4, #24]
 800ea0e:	b188      	cbz	r0, 800ea34 <_scanf_chars+0x58>
 800ea10:	2801      	cmp	r0, #1
 800ea12:	d107      	bne.n	800ea24 <_scanf_chars+0x48>
 800ea14:	682a      	ldr	r2, [r5, #0]
 800ea16:	7811      	ldrb	r1, [r2, #0]
 800ea18:	6962      	ldr	r2, [r4, #20]
 800ea1a:	5c52      	ldrb	r2, [r2, r1]
 800ea1c:	b952      	cbnz	r2, 800ea34 <_scanf_chars+0x58>
 800ea1e:	2f00      	cmp	r7, #0
 800ea20:	d031      	beq.n	800ea86 <_scanf_chars+0xaa>
 800ea22:	e022      	b.n	800ea6a <_scanf_chars+0x8e>
 800ea24:	2802      	cmp	r0, #2
 800ea26:	d120      	bne.n	800ea6a <_scanf_chars+0x8e>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ea30:	071b      	lsls	r3, r3, #28
 800ea32:	d41a      	bmi.n	800ea6a <_scanf_chars+0x8e>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	06da      	lsls	r2, r3, #27
 800ea38:	bf5e      	ittt	pl
 800ea3a:	682b      	ldrpl	r3, [r5, #0]
 800ea3c:	781b      	ldrbpl	r3, [r3, #0]
 800ea3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ea42:	682a      	ldr	r2, [r5, #0]
 800ea44:	686b      	ldr	r3, [r5, #4]
 800ea46:	3201      	adds	r2, #1
 800ea48:	602a      	str	r2, [r5, #0]
 800ea4a:	68a2      	ldr	r2, [r4, #8]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	3a01      	subs	r2, #1
 800ea50:	606b      	str	r3, [r5, #4]
 800ea52:	3701      	adds	r7, #1
 800ea54:	60a2      	str	r2, [r4, #8]
 800ea56:	b142      	cbz	r2, 800ea6a <_scanf_chars+0x8e>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	dcd7      	bgt.n	800ea0c <_scanf_chars+0x30>
 800ea5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea60:	4629      	mov	r1, r5
 800ea62:	4640      	mov	r0, r8
 800ea64:	4798      	blx	r3
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d0d0      	beq.n	800ea0c <_scanf_chars+0x30>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	f013 0310 	ands.w	r3, r3, #16
 800ea70:	d105      	bne.n	800ea7e <_scanf_chars+0xa2>
 800ea72:	68e2      	ldr	r2, [r4, #12]
 800ea74:	3201      	adds	r2, #1
 800ea76:	60e2      	str	r2, [r4, #12]
 800ea78:	69a2      	ldr	r2, [r4, #24]
 800ea7a:	b102      	cbz	r2, 800ea7e <_scanf_chars+0xa2>
 800ea7c:	7033      	strb	r3, [r6, #0]
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	443b      	add	r3, r7
 800ea82:	6123      	str	r3, [r4, #16]
 800ea84:	2000      	movs	r0, #0
 800ea86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea8a:	bf00      	nop
 800ea8c:	08012805 	.word	0x08012805

0800ea90 <_scanf_i>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	4698      	mov	r8, r3
 800ea96:	4b74      	ldr	r3, [pc, #464]	; (800ec68 <_scanf_i+0x1d8>)
 800ea98:	460c      	mov	r4, r1
 800ea9a:	4682      	mov	sl, r0
 800ea9c:	4616      	mov	r6, r2
 800ea9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eaa2:	b087      	sub	sp, #28
 800eaa4:	ab03      	add	r3, sp, #12
 800eaa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eaaa:	4b70      	ldr	r3, [pc, #448]	; (800ec6c <_scanf_i+0x1dc>)
 800eaac:	69a1      	ldr	r1, [r4, #24]
 800eaae:	4a70      	ldr	r2, [pc, #448]	; (800ec70 <_scanf_i+0x1e0>)
 800eab0:	2903      	cmp	r1, #3
 800eab2:	bf18      	it	ne
 800eab4:	461a      	movne	r2, r3
 800eab6:	68a3      	ldr	r3, [r4, #8]
 800eab8:	9201      	str	r2, [sp, #4]
 800eaba:	1e5a      	subs	r2, r3, #1
 800eabc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eac0:	bf88      	it	hi
 800eac2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eac6:	4627      	mov	r7, r4
 800eac8:	bf82      	ittt	hi
 800eaca:	eb03 0905 	addhi.w	r9, r3, r5
 800eace:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ead2:	60a3      	strhi	r3, [r4, #8]
 800ead4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ead8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800eadc:	bf98      	it	ls
 800eade:	f04f 0900 	movls.w	r9, #0
 800eae2:	6023      	str	r3, [r4, #0]
 800eae4:	463d      	mov	r5, r7
 800eae6:	f04f 0b00 	mov.w	fp, #0
 800eaea:	6831      	ldr	r1, [r6, #0]
 800eaec:	ab03      	add	r3, sp, #12
 800eaee:	7809      	ldrb	r1, [r1, #0]
 800eaf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	f7f1 fb7b 	bl	80001f0 <memchr>
 800eafa:	b328      	cbz	r0, 800eb48 <_scanf_i+0xb8>
 800eafc:	f1bb 0f01 	cmp.w	fp, #1
 800eb00:	d159      	bne.n	800ebb6 <_scanf_i+0x126>
 800eb02:	6862      	ldr	r2, [r4, #4]
 800eb04:	b92a      	cbnz	r2, 800eb12 <_scanf_i+0x82>
 800eb06:	6822      	ldr	r2, [r4, #0]
 800eb08:	2308      	movs	r3, #8
 800eb0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb0e:	6063      	str	r3, [r4, #4]
 800eb10:	6022      	str	r2, [r4, #0]
 800eb12:	6822      	ldr	r2, [r4, #0]
 800eb14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800eb18:	6022      	str	r2, [r4, #0]
 800eb1a:	68a2      	ldr	r2, [r4, #8]
 800eb1c:	1e51      	subs	r1, r2, #1
 800eb1e:	60a1      	str	r1, [r4, #8]
 800eb20:	b192      	cbz	r2, 800eb48 <_scanf_i+0xb8>
 800eb22:	6832      	ldr	r2, [r6, #0]
 800eb24:	1c51      	adds	r1, r2, #1
 800eb26:	6031      	str	r1, [r6, #0]
 800eb28:	7812      	ldrb	r2, [r2, #0]
 800eb2a:	f805 2b01 	strb.w	r2, [r5], #1
 800eb2e:	6872      	ldr	r2, [r6, #4]
 800eb30:	3a01      	subs	r2, #1
 800eb32:	2a00      	cmp	r2, #0
 800eb34:	6072      	str	r2, [r6, #4]
 800eb36:	dc07      	bgt.n	800eb48 <_scanf_i+0xb8>
 800eb38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	4650      	mov	r0, sl
 800eb40:	4790      	blx	r2
 800eb42:	2800      	cmp	r0, #0
 800eb44:	f040 8085 	bne.w	800ec52 <_scanf_i+0x1c2>
 800eb48:	f10b 0b01 	add.w	fp, fp, #1
 800eb4c:	f1bb 0f03 	cmp.w	fp, #3
 800eb50:	d1cb      	bne.n	800eaea <_scanf_i+0x5a>
 800eb52:	6863      	ldr	r3, [r4, #4]
 800eb54:	b90b      	cbnz	r3, 800eb5a <_scanf_i+0xca>
 800eb56:	230a      	movs	r3, #10
 800eb58:	6063      	str	r3, [r4, #4]
 800eb5a:	6863      	ldr	r3, [r4, #4]
 800eb5c:	4945      	ldr	r1, [pc, #276]	; (800ec74 <_scanf_i+0x1e4>)
 800eb5e:	6960      	ldr	r0, [r4, #20]
 800eb60:	1ac9      	subs	r1, r1, r3
 800eb62:	f000 f949 	bl	800edf8 <__sccl>
 800eb66:	f04f 0b00 	mov.w	fp, #0
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	6822      	ldr	r2, [r4, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d03d      	beq.n	800ebee <_scanf_i+0x15e>
 800eb72:	6831      	ldr	r1, [r6, #0]
 800eb74:	6960      	ldr	r0, [r4, #20]
 800eb76:	f891 c000 	ldrb.w	ip, [r1]
 800eb7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d035      	beq.n	800ebee <_scanf_i+0x15e>
 800eb82:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eb86:	d124      	bne.n	800ebd2 <_scanf_i+0x142>
 800eb88:	0510      	lsls	r0, r2, #20
 800eb8a:	d522      	bpl.n	800ebd2 <_scanf_i+0x142>
 800eb8c:	f10b 0b01 	add.w	fp, fp, #1
 800eb90:	f1b9 0f00 	cmp.w	r9, #0
 800eb94:	d003      	beq.n	800eb9e <_scanf_i+0x10e>
 800eb96:	3301      	adds	r3, #1
 800eb98:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb9c:	60a3      	str	r3, [r4, #8]
 800eb9e:	6873      	ldr	r3, [r6, #4]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	6073      	str	r3, [r6, #4]
 800eba6:	dd1b      	ble.n	800ebe0 <_scanf_i+0x150>
 800eba8:	6833      	ldr	r3, [r6, #0]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	6033      	str	r3, [r6, #0]
 800ebae:	68a3      	ldr	r3, [r4, #8]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	60a3      	str	r3, [r4, #8]
 800ebb4:	e7d9      	b.n	800eb6a <_scanf_i+0xda>
 800ebb6:	f1bb 0f02 	cmp.w	fp, #2
 800ebba:	d1ae      	bne.n	800eb1a <_scanf_i+0x8a>
 800ebbc:	6822      	ldr	r2, [r4, #0]
 800ebbe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ebc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ebc6:	d1bf      	bne.n	800eb48 <_scanf_i+0xb8>
 800ebc8:	2310      	movs	r3, #16
 800ebca:	6063      	str	r3, [r4, #4]
 800ebcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ebd0:	e7a2      	b.n	800eb18 <_scanf_i+0x88>
 800ebd2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ebd6:	6022      	str	r2, [r4, #0]
 800ebd8:	780b      	ldrb	r3, [r1, #0]
 800ebda:	f805 3b01 	strb.w	r3, [r5], #1
 800ebde:	e7de      	b.n	800eb9e <_scanf_i+0x10e>
 800ebe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ebe4:	4631      	mov	r1, r6
 800ebe6:	4650      	mov	r0, sl
 800ebe8:	4798      	blx	r3
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d0df      	beq.n	800ebae <_scanf_i+0x11e>
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	05d9      	lsls	r1, r3, #23
 800ebf2:	d50d      	bpl.n	800ec10 <_scanf_i+0x180>
 800ebf4:	42bd      	cmp	r5, r7
 800ebf6:	d909      	bls.n	800ec0c <_scanf_i+0x17c>
 800ebf8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ebfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec00:	4632      	mov	r2, r6
 800ec02:	4650      	mov	r0, sl
 800ec04:	4798      	blx	r3
 800ec06:	f105 39ff 	add.w	r9, r5, #4294967295
 800ec0a:	464d      	mov	r5, r9
 800ec0c:	42bd      	cmp	r5, r7
 800ec0e:	d028      	beq.n	800ec62 <_scanf_i+0x1d2>
 800ec10:	6822      	ldr	r2, [r4, #0]
 800ec12:	f012 0210 	ands.w	r2, r2, #16
 800ec16:	d113      	bne.n	800ec40 <_scanf_i+0x1b0>
 800ec18:	702a      	strb	r2, [r5, #0]
 800ec1a:	6863      	ldr	r3, [r4, #4]
 800ec1c:	9e01      	ldr	r6, [sp, #4]
 800ec1e:	4639      	mov	r1, r7
 800ec20:	4650      	mov	r0, sl
 800ec22:	47b0      	blx	r6
 800ec24:	f8d8 3000 	ldr.w	r3, [r8]
 800ec28:	6821      	ldr	r1, [r4, #0]
 800ec2a:	1d1a      	adds	r2, r3, #4
 800ec2c:	f8c8 2000 	str.w	r2, [r8]
 800ec30:	f011 0f20 	tst.w	r1, #32
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	d00f      	beq.n	800ec58 <_scanf_i+0x1c8>
 800ec38:	6018      	str	r0, [r3, #0]
 800ec3a:	68e3      	ldr	r3, [r4, #12]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	60e3      	str	r3, [r4, #12]
 800ec40:	6923      	ldr	r3, [r4, #16]
 800ec42:	1bed      	subs	r5, r5, r7
 800ec44:	445d      	add	r5, fp
 800ec46:	442b      	add	r3, r5
 800ec48:	6123      	str	r3, [r4, #16]
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	b007      	add	sp, #28
 800ec4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec52:	f04f 0b00 	mov.w	fp, #0
 800ec56:	e7ca      	b.n	800ebee <_scanf_i+0x15e>
 800ec58:	07ca      	lsls	r2, r1, #31
 800ec5a:	bf4c      	ite	mi
 800ec5c:	8018      	strhmi	r0, [r3, #0]
 800ec5e:	6018      	strpl	r0, [r3, #0]
 800ec60:	e7eb      	b.n	800ec3a <_scanf_i+0x1aa>
 800ec62:	2001      	movs	r0, #1
 800ec64:	e7f2      	b.n	800ec4c <_scanf_i+0x1bc>
 800ec66:	bf00      	nop
 800ec68:	08010ed8 	.word	0x08010ed8
 800ec6c:	0800f0b1 	.word	0x0800f0b1
 800ec70:	0800e369 	.word	0x0800e369
 800ec74:	08012926 	.word	0x08012926

0800ec78 <__sflush_r>:
 800ec78:	898a      	ldrh	r2, [r1, #12]
 800ec7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7e:	4605      	mov	r5, r0
 800ec80:	0710      	lsls	r0, r2, #28
 800ec82:	460c      	mov	r4, r1
 800ec84:	d458      	bmi.n	800ed38 <__sflush_r+0xc0>
 800ec86:	684b      	ldr	r3, [r1, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc05      	bgt.n	800ec98 <__sflush_r+0x20>
 800ec8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	dc02      	bgt.n	800ec98 <__sflush_r+0x20>
 800ec92:	2000      	movs	r0, #0
 800ec94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec9a:	2e00      	cmp	r6, #0
 800ec9c:	d0f9      	beq.n	800ec92 <__sflush_r+0x1a>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eca4:	682f      	ldr	r7, [r5, #0]
 800eca6:	6a21      	ldr	r1, [r4, #32]
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	d032      	beq.n	800ed12 <__sflush_r+0x9a>
 800ecac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecae:	89a3      	ldrh	r3, [r4, #12]
 800ecb0:	075a      	lsls	r2, r3, #29
 800ecb2:	d505      	bpl.n	800ecc0 <__sflush_r+0x48>
 800ecb4:	6863      	ldr	r3, [r4, #4]
 800ecb6:	1ac0      	subs	r0, r0, r3
 800ecb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecba:	b10b      	cbz	r3, 800ecc0 <__sflush_r+0x48>
 800ecbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecbe:	1ac0      	subs	r0, r0, r3
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecc6:	6a21      	ldr	r1, [r4, #32]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	47b0      	blx	r6
 800eccc:	1c43      	adds	r3, r0, #1
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	d106      	bne.n	800ece0 <__sflush_r+0x68>
 800ecd2:	6829      	ldr	r1, [r5, #0]
 800ecd4:	291d      	cmp	r1, #29
 800ecd6:	d82b      	bhi.n	800ed30 <__sflush_r+0xb8>
 800ecd8:	4a29      	ldr	r2, [pc, #164]	; (800ed80 <__sflush_r+0x108>)
 800ecda:	410a      	asrs	r2, r1
 800ecdc:	07d6      	lsls	r6, r2, #31
 800ecde:	d427      	bmi.n	800ed30 <__sflush_r+0xb8>
 800ece0:	2200      	movs	r2, #0
 800ece2:	6062      	str	r2, [r4, #4]
 800ece4:	04d9      	lsls	r1, r3, #19
 800ece6:	6922      	ldr	r2, [r4, #16]
 800ece8:	6022      	str	r2, [r4, #0]
 800ecea:	d504      	bpl.n	800ecf6 <__sflush_r+0x7e>
 800ecec:	1c42      	adds	r2, r0, #1
 800ecee:	d101      	bne.n	800ecf4 <__sflush_r+0x7c>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	b903      	cbnz	r3, 800ecf6 <__sflush_r+0x7e>
 800ecf4:	6560      	str	r0, [r4, #84]	; 0x54
 800ecf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecf8:	602f      	str	r7, [r5, #0]
 800ecfa:	2900      	cmp	r1, #0
 800ecfc:	d0c9      	beq.n	800ec92 <__sflush_r+0x1a>
 800ecfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed02:	4299      	cmp	r1, r3
 800ed04:	d002      	beq.n	800ed0c <__sflush_r+0x94>
 800ed06:	4628      	mov	r0, r5
 800ed08:	f7fe f994 	bl	800d034 <_free_r>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	6360      	str	r0, [r4, #52]	; 0x34
 800ed10:	e7c0      	b.n	800ec94 <__sflush_r+0x1c>
 800ed12:	2301      	movs	r3, #1
 800ed14:	4628      	mov	r0, r5
 800ed16:	47b0      	blx	r6
 800ed18:	1c41      	adds	r1, r0, #1
 800ed1a:	d1c8      	bne.n	800ecae <__sflush_r+0x36>
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d0c5      	beq.n	800ecae <__sflush_r+0x36>
 800ed22:	2b1d      	cmp	r3, #29
 800ed24:	d001      	beq.n	800ed2a <__sflush_r+0xb2>
 800ed26:	2b16      	cmp	r3, #22
 800ed28:	d101      	bne.n	800ed2e <__sflush_r+0xb6>
 800ed2a:	602f      	str	r7, [r5, #0]
 800ed2c:	e7b1      	b.n	800ec92 <__sflush_r+0x1a>
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed34:	81a3      	strh	r3, [r4, #12]
 800ed36:	e7ad      	b.n	800ec94 <__sflush_r+0x1c>
 800ed38:	690f      	ldr	r7, [r1, #16]
 800ed3a:	2f00      	cmp	r7, #0
 800ed3c:	d0a9      	beq.n	800ec92 <__sflush_r+0x1a>
 800ed3e:	0793      	lsls	r3, r2, #30
 800ed40:	680e      	ldr	r6, [r1, #0]
 800ed42:	bf08      	it	eq
 800ed44:	694b      	ldreq	r3, [r1, #20]
 800ed46:	600f      	str	r7, [r1, #0]
 800ed48:	bf18      	it	ne
 800ed4a:	2300      	movne	r3, #0
 800ed4c:	eba6 0807 	sub.w	r8, r6, r7
 800ed50:	608b      	str	r3, [r1, #8]
 800ed52:	f1b8 0f00 	cmp.w	r8, #0
 800ed56:	dd9c      	ble.n	800ec92 <__sflush_r+0x1a>
 800ed58:	6a21      	ldr	r1, [r4, #32]
 800ed5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed5c:	4643      	mov	r3, r8
 800ed5e:	463a      	mov	r2, r7
 800ed60:	4628      	mov	r0, r5
 800ed62:	47b0      	blx	r6
 800ed64:	2800      	cmp	r0, #0
 800ed66:	dc06      	bgt.n	800ed76 <__sflush_r+0xfe>
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed6e:	81a3      	strh	r3, [r4, #12]
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	e78e      	b.n	800ec94 <__sflush_r+0x1c>
 800ed76:	4407      	add	r7, r0
 800ed78:	eba8 0800 	sub.w	r8, r8, r0
 800ed7c:	e7e9      	b.n	800ed52 <__sflush_r+0xda>
 800ed7e:	bf00      	nop
 800ed80:	dfbffffe 	.word	0xdfbffffe

0800ed84 <_fflush_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	690b      	ldr	r3, [r1, #16]
 800ed88:	4605      	mov	r5, r0
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	b913      	cbnz	r3, 800ed94 <_fflush_r+0x10>
 800ed8e:	2500      	movs	r5, #0
 800ed90:	4628      	mov	r0, r5
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	b118      	cbz	r0, 800ed9e <_fflush_r+0x1a>
 800ed96:	6a03      	ldr	r3, [r0, #32]
 800ed98:	b90b      	cbnz	r3, 800ed9e <_fflush_r+0x1a>
 800ed9a:	f7fd f8b9 	bl	800bf10 <__sinit>
 800ed9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d0f3      	beq.n	800ed8e <_fflush_r+0xa>
 800eda6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eda8:	07d0      	lsls	r0, r2, #31
 800edaa:	d404      	bmi.n	800edb6 <_fflush_r+0x32>
 800edac:	0599      	lsls	r1, r3, #22
 800edae:	d402      	bmi.n	800edb6 <_fflush_r+0x32>
 800edb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edb2:	f7fd fa7f 	bl	800c2b4 <__retarget_lock_acquire_recursive>
 800edb6:	4628      	mov	r0, r5
 800edb8:	4621      	mov	r1, r4
 800edba:	f7ff ff5d 	bl	800ec78 <__sflush_r>
 800edbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edc0:	07da      	lsls	r2, r3, #31
 800edc2:	4605      	mov	r5, r0
 800edc4:	d4e4      	bmi.n	800ed90 <_fflush_r+0xc>
 800edc6:	89a3      	ldrh	r3, [r4, #12]
 800edc8:	059b      	lsls	r3, r3, #22
 800edca:	d4e1      	bmi.n	800ed90 <_fflush_r+0xc>
 800edcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edce:	f7fd fa72 	bl	800c2b6 <__retarget_lock_release_recursive>
 800edd2:	e7dd      	b.n	800ed90 <_fflush_r+0xc>

0800edd4 <fiprintf>:
 800edd4:	b40e      	push	{r1, r2, r3}
 800edd6:	b503      	push	{r0, r1, lr}
 800edd8:	4601      	mov	r1, r0
 800edda:	ab03      	add	r3, sp, #12
 800eddc:	4805      	ldr	r0, [pc, #20]	; (800edf4 <fiprintf+0x20>)
 800edde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ede2:	6800      	ldr	r0, [r0, #0]
 800ede4:	9301      	str	r3, [sp, #4]
 800ede6:	f000 f98f 	bl	800f108 <_vfiprintf_r>
 800edea:	b002      	add	sp, #8
 800edec:	f85d eb04 	ldr.w	lr, [sp], #4
 800edf0:	b003      	add	sp, #12
 800edf2:	4770      	bx	lr
 800edf4:	200001f8 	.word	0x200001f8

0800edf8 <__sccl>:
 800edf8:	b570      	push	{r4, r5, r6, lr}
 800edfa:	780b      	ldrb	r3, [r1, #0]
 800edfc:	4604      	mov	r4, r0
 800edfe:	2b5e      	cmp	r3, #94	; 0x5e
 800ee00:	bf0b      	itete	eq
 800ee02:	784b      	ldrbeq	r3, [r1, #1]
 800ee04:	1c4a      	addne	r2, r1, #1
 800ee06:	1c8a      	addeq	r2, r1, #2
 800ee08:	2100      	movne	r1, #0
 800ee0a:	bf08      	it	eq
 800ee0c:	2101      	moveq	r1, #1
 800ee0e:	3801      	subs	r0, #1
 800ee10:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ee14:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ee18:	42a8      	cmp	r0, r5
 800ee1a:	d1fb      	bne.n	800ee14 <__sccl+0x1c>
 800ee1c:	b90b      	cbnz	r3, 800ee22 <__sccl+0x2a>
 800ee1e:	1e50      	subs	r0, r2, #1
 800ee20:	bd70      	pop	{r4, r5, r6, pc}
 800ee22:	f081 0101 	eor.w	r1, r1, #1
 800ee26:	54e1      	strb	r1, [r4, r3]
 800ee28:	4610      	mov	r0, r2
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ee30:	2d2d      	cmp	r5, #45	; 0x2d
 800ee32:	d005      	beq.n	800ee40 <__sccl+0x48>
 800ee34:	2d5d      	cmp	r5, #93	; 0x5d
 800ee36:	d016      	beq.n	800ee66 <__sccl+0x6e>
 800ee38:	2d00      	cmp	r5, #0
 800ee3a:	d0f1      	beq.n	800ee20 <__sccl+0x28>
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	e7f2      	b.n	800ee26 <__sccl+0x2e>
 800ee40:	7846      	ldrb	r6, [r0, #1]
 800ee42:	2e5d      	cmp	r6, #93	; 0x5d
 800ee44:	d0fa      	beq.n	800ee3c <__sccl+0x44>
 800ee46:	42b3      	cmp	r3, r6
 800ee48:	dcf8      	bgt.n	800ee3c <__sccl+0x44>
 800ee4a:	3002      	adds	r0, #2
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	3201      	adds	r2, #1
 800ee50:	4296      	cmp	r6, r2
 800ee52:	54a1      	strb	r1, [r4, r2]
 800ee54:	dcfb      	bgt.n	800ee4e <__sccl+0x56>
 800ee56:	1af2      	subs	r2, r6, r3
 800ee58:	3a01      	subs	r2, #1
 800ee5a:	1c5d      	adds	r5, r3, #1
 800ee5c:	42b3      	cmp	r3, r6
 800ee5e:	bfa8      	it	ge
 800ee60:	2200      	movge	r2, #0
 800ee62:	18ab      	adds	r3, r5, r2
 800ee64:	e7e1      	b.n	800ee2a <__sccl+0x32>
 800ee66:	4610      	mov	r0, r2
 800ee68:	e7da      	b.n	800ee20 <__sccl+0x28>

0800ee6a <__submore>:
 800ee6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6e:	460c      	mov	r4, r1
 800ee70:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ee72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee76:	4299      	cmp	r1, r3
 800ee78:	d11d      	bne.n	800eeb6 <__submore+0x4c>
 800ee7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee7e:	f7fe fca5 	bl	800d7cc <_malloc_r>
 800ee82:	b918      	cbnz	r0, 800ee8c <__submore+0x22>
 800ee84:	f04f 30ff 	mov.w	r0, #4294967295
 800ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee90:	63a3      	str	r3, [r4, #56]	; 0x38
 800ee92:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee96:	6360      	str	r0, [r4, #52]	; 0x34
 800ee98:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ee9c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eea0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800eea4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eea8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800eeac:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800eeb0:	6020      	str	r0, [r4, #0]
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	e7e8      	b.n	800ee88 <__submore+0x1e>
 800eeb6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eeb8:	0077      	lsls	r7, r6, #1
 800eeba:	463a      	mov	r2, r7
 800eebc:	f000 f857 	bl	800ef6e <_realloc_r>
 800eec0:	4605      	mov	r5, r0
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d0de      	beq.n	800ee84 <__submore+0x1a>
 800eec6:	eb00 0806 	add.w	r8, r0, r6
 800eeca:	4601      	mov	r1, r0
 800eecc:	4632      	mov	r2, r6
 800eece:	4640      	mov	r0, r8
 800eed0:	f7fd f9fa 	bl	800c2c8 <memcpy>
 800eed4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eed8:	f8c4 8000 	str.w	r8, [r4]
 800eedc:	e7e9      	b.n	800eeb2 <__submore+0x48>

0800eede <memmove>:
 800eede:	4288      	cmp	r0, r1
 800eee0:	b510      	push	{r4, lr}
 800eee2:	eb01 0402 	add.w	r4, r1, r2
 800eee6:	d902      	bls.n	800eeee <memmove+0x10>
 800eee8:	4284      	cmp	r4, r0
 800eeea:	4623      	mov	r3, r4
 800eeec:	d807      	bhi.n	800eefe <memmove+0x20>
 800eeee:	1e43      	subs	r3, r0, #1
 800eef0:	42a1      	cmp	r1, r4
 800eef2:	d008      	beq.n	800ef06 <memmove+0x28>
 800eef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eef8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eefc:	e7f8      	b.n	800eef0 <memmove+0x12>
 800eefe:	4402      	add	r2, r0
 800ef00:	4601      	mov	r1, r0
 800ef02:	428a      	cmp	r2, r1
 800ef04:	d100      	bne.n	800ef08 <memmove+0x2a>
 800ef06:	bd10      	pop	{r4, pc}
 800ef08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef10:	e7f7      	b.n	800ef02 <memmove+0x24>
	...

0800ef14 <_sbrk_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4d06      	ldr	r5, [pc, #24]	; (800ef30 <_sbrk_r+0x1c>)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	602b      	str	r3, [r5, #0]
 800ef20:	f7f3 fe50 	bl	8002bc4 <_sbrk>
 800ef24:	1c43      	adds	r3, r0, #1
 800ef26:	d102      	bne.n	800ef2e <_sbrk_r+0x1a>
 800ef28:	682b      	ldr	r3, [r5, #0]
 800ef2a:	b103      	cbz	r3, 800ef2e <_sbrk_r+0x1a>
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	20000bc4 	.word	0x20000bc4

0800ef34 <abort>:
 800ef34:	b508      	push	{r3, lr}
 800ef36:	2006      	movs	r0, #6
 800ef38:	f000 fabe 	bl	800f4b8 <raise>
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	f7f3 fdc9 	bl	8002ad4 <_exit>

0800ef42 <_calloc_r>:
 800ef42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef44:	fba1 2402 	umull	r2, r4, r1, r2
 800ef48:	b94c      	cbnz	r4, 800ef5e <_calloc_r+0x1c>
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	9201      	str	r2, [sp, #4]
 800ef4e:	f7fe fc3d 	bl	800d7cc <_malloc_r>
 800ef52:	9a01      	ldr	r2, [sp, #4]
 800ef54:	4605      	mov	r5, r0
 800ef56:	b930      	cbnz	r0, 800ef66 <_calloc_r+0x24>
 800ef58:	4628      	mov	r0, r5
 800ef5a:	b003      	add	sp, #12
 800ef5c:	bd30      	pop	{r4, r5, pc}
 800ef5e:	220c      	movs	r2, #12
 800ef60:	6002      	str	r2, [r0, #0]
 800ef62:	2500      	movs	r5, #0
 800ef64:	e7f8      	b.n	800ef58 <_calloc_r+0x16>
 800ef66:	4621      	mov	r1, r4
 800ef68:	f7fd f899 	bl	800c09e <memset>
 800ef6c:	e7f4      	b.n	800ef58 <_calloc_r+0x16>

0800ef6e <_realloc_r>:
 800ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	4680      	mov	r8, r0
 800ef74:	4614      	mov	r4, r2
 800ef76:	460e      	mov	r6, r1
 800ef78:	b921      	cbnz	r1, 800ef84 <_realloc_r+0x16>
 800ef7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7e:	4611      	mov	r1, r2
 800ef80:	f7fe bc24 	b.w	800d7cc <_malloc_r>
 800ef84:	b92a      	cbnz	r2, 800ef92 <_realloc_r+0x24>
 800ef86:	f7fe f855 	bl	800d034 <_free_r>
 800ef8a:	4625      	mov	r5, r4
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef92:	f000 faad 	bl	800f4f0 <_malloc_usable_size_r>
 800ef96:	4284      	cmp	r4, r0
 800ef98:	4607      	mov	r7, r0
 800ef9a:	d802      	bhi.n	800efa2 <_realloc_r+0x34>
 800ef9c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efa0:	d812      	bhi.n	800efc8 <_realloc_r+0x5a>
 800efa2:	4621      	mov	r1, r4
 800efa4:	4640      	mov	r0, r8
 800efa6:	f7fe fc11 	bl	800d7cc <_malloc_r>
 800efaa:	4605      	mov	r5, r0
 800efac:	2800      	cmp	r0, #0
 800efae:	d0ed      	beq.n	800ef8c <_realloc_r+0x1e>
 800efb0:	42bc      	cmp	r4, r7
 800efb2:	4622      	mov	r2, r4
 800efb4:	4631      	mov	r1, r6
 800efb6:	bf28      	it	cs
 800efb8:	463a      	movcs	r2, r7
 800efba:	f7fd f985 	bl	800c2c8 <memcpy>
 800efbe:	4631      	mov	r1, r6
 800efc0:	4640      	mov	r0, r8
 800efc2:	f7fe f837 	bl	800d034 <_free_r>
 800efc6:	e7e1      	b.n	800ef8c <_realloc_r+0x1e>
 800efc8:	4635      	mov	r5, r6
 800efca:	e7df      	b.n	800ef8c <_realloc_r+0x1e>

0800efcc <_strtoul_l.constprop.0>:
 800efcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efd0:	4f36      	ldr	r7, [pc, #216]	; (800f0ac <_strtoul_l.constprop.0+0xe0>)
 800efd2:	4686      	mov	lr, r0
 800efd4:	460d      	mov	r5, r1
 800efd6:	4628      	mov	r0, r5
 800efd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efdc:	5d3e      	ldrb	r6, [r7, r4]
 800efde:	f016 0608 	ands.w	r6, r6, #8
 800efe2:	d1f8      	bne.n	800efd6 <_strtoul_l.constprop.0+0xa>
 800efe4:	2c2d      	cmp	r4, #45	; 0x2d
 800efe6:	d130      	bne.n	800f04a <_strtoul_l.constprop.0+0x7e>
 800efe8:	782c      	ldrb	r4, [r5, #0]
 800efea:	2601      	movs	r6, #1
 800efec:	1c85      	adds	r5, r0, #2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d057      	beq.n	800f0a2 <_strtoul_l.constprop.0+0xd6>
 800eff2:	2b10      	cmp	r3, #16
 800eff4:	d109      	bne.n	800f00a <_strtoul_l.constprop.0+0x3e>
 800eff6:	2c30      	cmp	r4, #48	; 0x30
 800eff8:	d107      	bne.n	800f00a <_strtoul_l.constprop.0+0x3e>
 800effa:	7828      	ldrb	r0, [r5, #0]
 800effc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f000:	2858      	cmp	r0, #88	; 0x58
 800f002:	d149      	bne.n	800f098 <_strtoul_l.constprop.0+0xcc>
 800f004:	786c      	ldrb	r4, [r5, #1]
 800f006:	2310      	movs	r3, #16
 800f008:	3502      	adds	r5, #2
 800f00a:	f04f 38ff 	mov.w	r8, #4294967295
 800f00e:	2700      	movs	r7, #0
 800f010:	fbb8 f8f3 	udiv	r8, r8, r3
 800f014:	fb03 f908 	mul.w	r9, r3, r8
 800f018:	ea6f 0909 	mvn.w	r9, r9
 800f01c:	4638      	mov	r0, r7
 800f01e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f022:	f1bc 0f09 	cmp.w	ip, #9
 800f026:	d815      	bhi.n	800f054 <_strtoul_l.constprop.0+0x88>
 800f028:	4664      	mov	r4, ip
 800f02a:	42a3      	cmp	r3, r4
 800f02c:	dd23      	ble.n	800f076 <_strtoul_l.constprop.0+0xaa>
 800f02e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f032:	d007      	beq.n	800f044 <_strtoul_l.constprop.0+0x78>
 800f034:	4580      	cmp	r8, r0
 800f036:	d31b      	bcc.n	800f070 <_strtoul_l.constprop.0+0xa4>
 800f038:	d101      	bne.n	800f03e <_strtoul_l.constprop.0+0x72>
 800f03a:	45a1      	cmp	r9, r4
 800f03c:	db18      	blt.n	800f070 <_strtoul_l.constprop.0+0xa4>
 800f03e:	fb00 4003 	mla	r0, r0, r3, r4
 800f042:	2701      	movs	r7, #1
 800f044:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f048:	e7e9      	b.n	800f01e <_strtoul_l.constprop.0+0x52>
 800f04a:	2c2b      	cmp	r4, #43	; 0x2b
 800f04c:	bf04      	itt	eq
 800f04e:	782c      	ldrbeq	r4, [r5, #0]
 800f050:	1c85      	addeq	r5, r0, #2
 800f052:	e7cc      	b.n	800efee <_strtoul_l.constprop.0+0x22>
 800f054:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f058:	f1bc 0f19 	cmp.w	ip, #25
 800f05c:	d801      	bhi.n	800f062 <_strtoul_l.constprop.0+0x96>
 800f05e:	3c37      	subs	r4, #55	; 0x37
 800f060:	e7e3      	b.n	800f02a <_strtoul_l.constprop.0+0x5e>
 800f062:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f066:	f1bc 0f19 	cmp.w	ip, #25
 800f06a:	d804      	bhi.n	800f076 <_strtoul_l.constprop.0+0xaa>
 800f06c:	3c57      	subs	r4, #87	; 0x57
 800f06e:	e7dc      	b.n	800f02a <_strtoul_l.constprop.0+0x5e>
 800f070:	f04f 37ff 	mov.w	r7, #4294967295
 800f074:	e7e6      	b.n	800f044 <_strtoul_l.constprop.0+0x78>
 800f076:	1c7b      	adds	r3, r7, #1
 800f078:	d106      	bne.n	800f088 <_strtoul_l.constprop.0+0xbc>
 800f07a:	2322      	movs	r3, #34	; 0x22
 800f07c:	f8ce 3000 	str.w	r3, [lr]
 800f080:	4638      	mov	r0, r7
 800f082:	b932      	cbnz	r2, 800f092 <_strtoul_l.constprop.0+0xc6>
 800f084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f088:	b106      	cbz	r6, 800f08c <_strtoul_l.constprop.0+0xc0>
 800f08a:	4240      	negs	r0, r0
 800f08c:	2a00      	cmp	r2, #0
 800f08e:	d0f9      	beq.n	800f084 <_strtoul_l.constprop.0+0xb8>
 800f090:	b107      	cbz	r7, 800f094 <_strtoul_l.constprop.0+0xc8>
 800f092:	1e69      	subs	r1, r5, #1
 800f094:	6011      	str	r1, [r2, #0]
 800f096:	e7f5      	b.n	800f084 <_strtoul_l.constprop.0+0xb8>
 800f098:	2430      	movs	r4, #48	; 0x30
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1b5      	bne.n	800f00a <_strtoul_l.constprop.0+0x3e>
 800f09e:	2308      	movs	r3, #8
 800f0a0:	e7b3      	b.n	800f00a <_strtoul_l.constprop.0+0x3e>
 800f0a2:	2c30      	cmp	r4, #48	; 0x30
 800f0a4:	d0a9      	beq.n	800effa <_strtoul_l.constprop.0+0x2e>
 800f0a6:	230a      	movs	r3, #10
 800f0a8:	e7af      	b.n	800f00a <_strtoul_l.constprop.0+0x3e>
 800f0aa:	bf00      	nop
 800f0ac:	08012805 	.word	0x08012805

0800f0b0 <_strtoul_r>:
 800f0b0:	f7ff bf8c 	b.w	800efcc <_strtoul_l.constprop.0>

0800f0b4 <__sfputc_r>:
 800f0b4:	6893      	ldr	r3, [r2, #8]
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	b410      	push	{r4}
 800f0bc:	6093      	str	r3, [r2, #8]
 800f0be:	da08      	bge.n	800f0d2 <__sfputc_r+0x1e>
 800f0c0:	6994      	ldr	r4, [r2, #24]
 800f0c2:	42a3      	cmp	r3, r4
 800f0c4:	db01      	blt.n	800f0ca <__sfputc_r+0x16>
 800f0c6:	290a      	cmp	r1, #10
 800f0c8:	d103      	bne.n	800f0d2 <__sfputc_r+0x1e>
 800f0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ce:	f000 b935 	b.w	800f33c <__swbuf_r>
 800f0d2:	6813      	ldr	r3, [r2, #0]
 800f0d4:	1c58      	adds	r0, r3, #1
 800f0d6:	6010      	str	r0, [r2, #0]
 800f0d8:	7019      	strb	r1, [r3, #0]
 800f0da:	4608      	mov	r0, r1
 800f0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <__sfputs_r>:
 800f0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	460f      	mov	r7, r1
 800f0e8:	4614      	mov	r4, r2
 800f0ea:	18d5      	adds	r5, r2, r3
 800f0ec:	42ac      	cmp	r4, r5
 800f0ee:	d101      	bne.n	800f0f4 <__sfputs_r+0x12>
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	e007      	b.n	800f104 <__sfputs_r+0x22>
 800f0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0f8:	463a      	mov	r2, r7
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f7ff ffda 	bl	800f0b4 <__sfputc_r>
 800f100:	1c43      	adds	r3, r0, #1
 800f102:	d1f3      	bne.n	800f0ec <__sfputs_r+0xa>
 800f104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f108 <_vfiprintf_r>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	460d      	mov	r5, r1
 800f10e:	b09d      	sub	sp, #116	; 0x74
 800f110:	4614      	mov	r4, r2
 800f112:	4698      	mov	r8, r3
 800f114:	4606      	mov	r6, r0
 800f116:	b118      	cbz	r0, 800f120 <_vfiprintf_r+0x18>
 800f118:	6a03      	ldr	r3, [r0, #32]
 800f11a:	b90b      	cbnz	r3, 800f120 <_vfiprintf_r+0x18>
 800f11c:	f7fc fef8 	bl	800bf10 <__sinit>
 800f120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f122:	07d9      	lsls	r1, r3, #31
 800f124:	d405      	bmi.n	800f132 <_vfiprintf_r+0x2a>
 800f126:	89ab      	ldrh	r3, [r5, #12]
 800f128:	059a      	lsls	r2, r3, #22
 800f12a:	d402      	bmi.n	800f132 <_vfiprintf_r+0x2a>
 800f12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f12e:	f7fd f8c1 	bl	800c2b4 <__retarget_lock_acquire_recursive>
 800f132:	89ab      	ldrh	r3, [r5, #12]
 800f134:	071b      	lsls	r3, r3, #28
 800f136:	d501      	bpl.n	800f13c <_vfiprintf_r+0x34>
 800f138:	692b      	ldr	r3, [r5, #16]
 800f13a:	b99b      	cbnz	r3, 800f164 <_vfiprintf_r+0x5c>
 800f13c:	4629      	mov	r1, r5
 800f13e:	4630      	mov	r0, r6
 800f140:	f000 f93a 	bl	800f3b8 <__swsetup_r>
 800f144:	b170      	cbz	r0, 800f164 <_vfiprintf_r+0x5c>
 800f146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f148:	07dc      	lsls	r4, r3, #31
 800f14a:	d504      	bpl.n	800f156 <_vfiprintf_r+0x4e>
 800f14c:	f04f 30ff 	mov.w	r0, #4294967295
 800f150:	b01d      	add	sp, #116	; 0x74
 800f152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f156:	89ab      	ldrh	r3, [r5, #12]
 800f158:	0598      	lsls	r0, r3, #22
 800f15a:	d4f7      	bmi.n	800f14c <_vfiprintf_r+0x44>
 800f15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f15e:	f7fd f8aa 	bl	800c2b6 <__retarget_lock_release_recursive>
 800f162:	e7f3      	b.n	800f14c <_vfiprintf_r+0x44>
 800f164:	2300      	movs	r3, #0
 800f166:	9309      	str	r3, [sp, #36]	; 0x24
 800f168:	2320      	movs	r3, #32
 800f16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f172:	2330      	movs	r3, #48	; 0x30
 800f174:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f328 <_vfiprintf_r+0x220>
 800f178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f17c:	f04f 0901 	mov.w	r9, #1
 800f180:	4623      	mov	r3, r4
 800f182:	469a      	mov	sl, r3
 800f184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f188:	b10a      	cbz	r2, 800f18e <_vfiprintf_r+0x86>
 800f18a:	2a25      	cmp	r2, #37	; 0x25
 800f18c:	d1f9      	bne.n	800f182 <_vfiprintf_r+0x7a>
 800f18e:	ebba 0b04 	subs.w	fp, sl, r4
 800f192:	d00b      	beq.n	800f1ac <_vfiprintf_r+0xa4>
 800f194:	465b      	mov	r3, fp
 800f196:	4622      	mov	r2, r4
 800f198:	4629      	mov	r1, r5
 800f19a:	4630      	mov	r0, r6
 800f19c:	f7ff ffa1 	bl	800f0e2 <__sfputs_r>
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	f000 80a9 	beq.w	800f2f8 <_vfiprintf_r+0x1f0>
 800f1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a8:	445a      	add	r2, fp
 800f1aa:	9209      	str	r2, [sp, #36]	; 0x24
 800f1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f000 80a1 	beq.w	800f2f8 <_vfiprintf_r+0x1f0>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c0:	f10a 0a01 	add.w	sl, sl, #1
 800f1c4:	9304      	str	r3, [sp, #16]
 800f1c6:	9307      	str	r3, [sp, #28]
 800f1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800f1ce:	4654      	mov	r4, sl
 800f1d0:	2205      	movs	r2, #5
 800f1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d6:	4854      	ldr	r0, [pc, #336]	; (800f328 <_vfiprintf_r+0x220>)
 800f1d8:	f7f1 f80a 	bl	80001f0 <memchr>
 800f1dc:	9a04      	ldr	r2, [sp, #16]
 800f1de:	b9d8      	cbnz	r0, 800f218 <_vfiprintf_r+0x110>
 800f1e0:	06d1      	lsls	r1, r2, #27
 800f1e2:	bf44      	itt	mi
 800f1e4:	2320      	movmi	r3, #32
 800f1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ea:	0713      	lsls	r3, r2, #28
 800f1ec:	bf44      	itt	mi
 800f1ee:	232b      	movmi	r3, #43	; 0x2b
 800f1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800f1fa:	d015      	beq.n	800f228 <_vfiprintf_r+0x120>
 800f1fc:	9a07      	ldr	r2, [sp, #28]
 800f1fe:	4654      	mov	r4, sl
 800f200:	2000      	movs	r0, #0
 800f202:	f04f 0c0a 	mov.w	ip, #10
 800f206:	4621      	mov	r1, r4
 800f208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f20c:	3b30      	subs	r3, #48	; 0x30
 800f20e:	2b09      	cmp	r3, #9
 800f210:	d94d      	bls.n	800f2ae <_vfiprintf_r+0x1a6>
 800f212:	b1b0      	cbz	r0, 800f242 <_vfiprintf_r+0x13a>
 800f214:	9207      	str	r2, [sp, #28]
 800f216:	e014      	b.n	800f242 <_vfiprintf_r+0x13a>
 800f218:	eba0 0308 	sub.w	r3, r0, r8
 800f21c:	fa09 f303 	lsl.w	r3, r9, r3
 800f220:	4313      	orrs	r3, r2
 800f222:	9304      	str	r3, [sp, #16]
 800f224:	46a2      	mov	sl, r4
 800f226:	e7d2      	b.n	800f1ce <_vfiprintf_r+0xc6>
 800f228:	9b03      	ldr	r3, [sp, #12]
 800f22a:	1d19      	adds	r1, r3, #4
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	9103      	str	r1, [sp, #12]
 800f230:	2b00      	cmp	r3, #0
 800f232:	bfbb      	ittet	lt
 800f234:	425b      	neglt	r3, r3
 800f236:	f042 0202 	orrlt.w	r2, r2, #2
 800f23a:	9307      	strge	r3, [sp, #28]
 800f23c:	9307      	strlt	r3, [sp, #28]
 800f23e:	bfb8      	it	lt
 800f240:	9204      	strlt	r2, [sp, #16]
 800f242:	7823      	ldrb	r3, [r4, #0]
 800f244:	2b2e      	cmp	r3, #46	; 0x2e
 800f246:	d10c      	bne.n	800f262 <_vfiprintf_r+0x15a>
 800f248:	7863      	ldrb	r3, [r4, #1]
 800f24a:	2b2a      	cmp	r3, #42	; 0x2a
 800f24c:	d134      	bne.n	800f2b8 <_vfiprintf_r+0x1b0>
 800f24e:	9b03      	ldr	r3, [sp, #12]
 800f250:	1d1a      	adds	r2, r3, #4
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	9203      	str	r2, [sp, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	bfb8      	it	lt
 800f25a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f25e:	3402      	adds	r4, #2
 800f260:	9305      	str	r3, [sp, #20]
 800f262:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f338 <_vfiprintf_r+0x230>
 800f266:	7821      	ldrb	r1, [r4, #0]
 800f268:	2203      	movs	r2, #3
 800f26a:	4650      	mov	r0, sl
 800f26c:	f7f0 ffc0 	bl	80001f0 <memchr>
 800f270:	b138      	cbz	r0, 800f282 <_vfiprintf_r+0x17a>
 800f272:	9b04      	ldr	r3, [sp, #16]
 800f274:	eba0 000a 	sub.w	r0, r0, sl
 800f278:	2240      	movs	r2, #64	; 0x40
 800f27a:	4082      	lsls	r2, r0
 800f27c:	4313      	orrs	r3, r2
 800f27e:	3401      	adds	r4, #1
 800f280:	9304      	str	r3, [sp, #16]
 800f282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f286:	4829      	ldr	r0, [pc, #164]	; (800f32c <_vfiprintf_r+0x224>)
 800f288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f28c:	2206      	movs	r2, #6
 800f28e:	f7f0 ffaf 	bl	80001f0 <memchr>
 800f292:	2800      	cmp	r0, #0
 800f294:	d03f      	beq.n	800f316 <_vfiprintf_r+0x20e>
 800f296:	4b26      	ldr	r3, [pc, #152]	; (800f330 <_vfiprintf_r+0x228>)
 800f298:	bb1b      	cbnz	r3, 800f2e2 <_vfiprintf_r+0x1da>
 800f29a:	9b03      	ldr	r3, [sp, #12]
 800f29c:	3307      	adds	r3, #7
 800f29e:	f023 0307 	bic.w	r3, r3, #7
 800f2a2:	3308      	adds	r3, #8
 800f2a4:	9303      	str	r3, [sp, #12]
 800f2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a8:	443b      	add	r3, r7
 800f2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ac:	e768      	b.n	800f180 <_vfiprintf_r+0x78>
 800f2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	2001      	movs	r0, #1
 800f2b6:	e7a6      	b.n	800f206 <_vfiprintf_r+0xfe>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	3401      	adds	r4, #1
 800f2bc:	9305      	str	r3, [sp, #20]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	f04f 0c0a 	mov.w	ip, #10
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ca:	3a30      	subs	r2, #48	; 0x30
 800f2cc:	2a09      	cmp	r2, #9
 800f2ce:	d903      	bls.n	800f2d8 <_vfiprintf_r+0x1d0>
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d0c6      	beq.n	800f262 <_vfiprintf_r+0x15a>
 800f2d4:	9105      	str	r1, [sp, #20]
 800f2d6:	e7c4      	b.n	800f262 <_vfiprintf_r+0x15a>
 800f2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2dc:	4604      	mov	r4, r0
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e7f0      	b.n	800f2c4 <_vfiprintf_r+0x1bc>
 800f2e2:	ab03      	add	r3, sp, #12
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	462a      	mov	r2, r5
 800f2e8:	4b12      	ldr	r3, [pc, #72]	; (800f334 <_vfiprintf_r+0x22c>)
 800f2ea:	a904      	add	r1, sp, #16
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	f7fb ffbf 	bl	800b270 <_printf_float>
 800f2f2:	4607      	mov	r7, r0
 800f2f4:	1c78      	adds	r0, r7, #1
 800f2f6:	d1d6      	bne.n	800f2a6 <_vfiprintf_r+0x19e>
 800f2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2fa:	07d9      	lsls	r1, r3, #31
 800f2fc:	d405      	bmi.n	800f30a <_vfiprintf_r+0x202>
 800f2fe:	89ab      	ldrh	r3, [r5, #12]
 800f300:	059a      	lsls	r2, r3, #22
 800f302:	d402      	bmi.n	800f30a <_vfiprintf_r+0x202>
 800f304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f306:	f7fc ffd6 	bl	800c2b6 <__retarget_lock_release_recursive>
 800f30a:	89ab      	ldrh	r3, [r5, #12]
 800f30c:	065b      	lsls	r3, r3, #25
 800f30e:	f53f af1d 	bmi.w	800f14c <_vfiprintf_r+0x44>
 800f312:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f314:	e71c      	b.n	800f150 <_vfiprintf_r+0x48>
 800f316:	ab03      	add	r3, sp, #12
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	462a      	mov	r2, r5
 800f31c:	4b05      	ldr	r3, [pc, #20]	; (800f334 <_vfiprintf_r+0x22c>)
 800f31e:	a904      	add	r1, sp, #16
 800f320:	4630      	mov	r0, r6
 800f322:	f7fc fa49 	bl	800b7b8 <_printf_i>
 800f326:	e7e4      	b.n	800f2f2 <_vfiprintf_r+0x1ea>
 800f328:	08012905 	.word	0x08012905
 800f32c:	0801290f 	.word	0x0801290f
 800f330:	0800b271 	.word	0x0800b271
 800f334:	0800f0e3 	.word	0x0800f0e3
 800f338:	0801290b 	.word	0x0801290b

0800f33c <__swbuf_r>:
 800f33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33e:	460e      	mov	r6, r1
 800f340:	4614      	mov	r4, r2
 800f342:	4605      	mov	r5, r0
 800f344:	b118      	cbz	r0, 800f34e <__swbuf_r+0x12>
 800f346:	6a03      	ldr	r3, [r0, #32]
 800f348:	b90b      	cbnz	r3, 800f34e <__swbuf_r+0x12>
 800f34a:	f7fc fde1 	bl	800bf10 <__sinit>
 800f34e:	69a3      	ldr	r3, [r4, #24]
 800f350:	60a3      	str	r3, [r4, #8]
 800f352:	89a3      	ldrh	r3, [r4, #12]
 800f354:	071a      	lsls	r2, r3, #28
 800f356:	d525      	bpl.n	800f3a4 <__swbuf_r+0x68>
 800f358:	6923      	ldr	r3, [r4, #16]
 800f35a:	b31b      	cbz	r3, 800f3a4 <__swbuf_r+0x68>
 800f35c:	6823      	ldr	r3, [r4, #0]
 800f35e:	6922      	ldr	r2, [r4, #16]
 800f360:	1a98      	subs	r0, r3, r2
 800f362:	6963      	ldr	r3, [r4, #20]
 800f364:	b2f6      	uxtb	r6, r6
 800f366:	4283      	cmp	r3, r0
 800f368:	4637      	mov	r7, r6
 800f36a:	dc04      	bgt.n	800f376 <__swbuf_r+0x3a>
 800f36c:	4621      	mov	r1, r4
 800f36e:	4628      	mov	r0, r5
 800f370:	f7ff fd08 	bl	800ed84 <_fflush_r>
 800f374:	b9e0      	cbnz	r0, 800f3b0 <__swbuf_r+0x74>
 800f376:	68a3      	ldr	r3, [r4, #8]
 800f378:	3b01      	subs	r3, #1
 800f37a:	60a3      	str	r3, [r4, #8]
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	1c5a      	adds	r2, r3, #1
 800f380:	6022      	str	r2, [r4, #0]
 800f382:	701e      	strb	r6, [r3, #0]
 800f384:	6962      	ldr	r2, [r4, #20]
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	429a      	cmp	r2, r3
 800f38a:	d004      	beq.n	800f396 <__swbuf_r+0x5a>
 800f38c:	89a3      	ldrh	r3, [r4, #12]
 800f38e:	07db      	lsls	r3, r3, #31
 800f390:	d506      	bpl.n	800f3a0 <__swbuf_r+0x64>
 800f392:	2e0a      	cmp	r6, #10
 800f394:	d104      	bne.n	800f3a0 <__swbuf_r+0x64>
 800f396:	4621      	mov	r1, r4
 800f398:	4628      	mov	r0, r5
 800f39a:	f7ff fcf3 	bl	800ed84 <_fflush_r>
 800f39e:	b938      	cbnz	r0, 800f3b0 <__swbuf_r+0x74>
 800f3a0:	4638      	mov	r0, r7
 800f3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f000 f806 	bl	800f3b8 <__swsetup_r>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d0d5      	beq.n	800f35c <__swbuf_r+0x20>
 800f3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800f3b4:	e7f4      	b.n	800f3a0 <__swbuf_r+0x64>
	...

0800f3b8 <__swsetup_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4b2a      	ldr	r3, [pc, #168]	; (800f464 <__swsetup_r+0xac>)
 800f3bc:	4605      	mov	r5, r0
 800f3be:	6818      	ldr	r0, [r3, #0]
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	b118      	cbz	r0, 800f3cc <__swsetup_r+0x14>
 800f3c4:	6a03      	ldr	r3, [r0, #32]
 800f3c6:	b90b      	cbnz	r3, 800f3cc <__swsetup_r+0x14>
 800f3c8:	f7fc fda2 	bl	800bf10 <__sinit>
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3d2:	0718      	lsls	r0, r3, #28
 800f3d4:	d422      	bmi.n	800f41c <__swsetup_r+0x64>
 800f3d6:	06d9      	lsls	r1, r3, #27
 800f3d8:	d407      	bmi.n	800f3ea <__swsetup_r+0x32>
 800f3da:	2309      	movs	r3, #9
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3e2:	81a3      	strh	r3, [r4, #12]
 800f3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e8:	e034      	b.n	800f454 <__swsetup_r+0x9c>
 800f3ea:	0758      	lsls	r0, r3, #29
 800f3ec:	d512      	bpl.n	800f414 <__swsetup_r+0x5c>
 800f3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3f0:	b141      	cbz	r1, 800f404 <__swsetup_r+0x4c>
 800f3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3f6:	4299      	cmp	r1, r3
 800f3f8:	d002      	beq.n	800f400 <__swsetup_r+0x48>
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	f7fd fe1a 	bl	800d034 <_free_r>
 800f400:	2300      	movs	r3, #0
 800f402:	6363      	str	r3, [r4, #52]	; 0x34
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f40a:	81a3      	strh	r3, [r4, #12]
 800f40c:	2300      	movs	r3, #0
 800f40e:	6063      	str	r3, [r4, #4]
 800f410:	6923      	ldr	r3, [r4, #16]
 800f412:	6023      	str	r3, [r4, #0]
 800f414:	89a3      	ldrh	r3, [r4, #12]
 800f416:	f043 0308 	orr.w	r3, r3, #8
 800f41a:	81a3      	strh	r3, [r4, #12]
 800f41c:	6923      	ldr	r3, [r4, #16]
 800f41e:	b94b      	cbnz	r3, 800f434 <__swsetup_r+0x7c>
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f42a:	d003      	beq.n	800f434 <__swsetup_r+0x7c>
 800f42c:	4621      	mov	r1, r4
 800f42e:	4628      	mov	r0, r5
 800f430:	f000 f88c 	bl	800f54c <__smakebuf_r>
 800f434:	89a0      	ldrh	r0, [r4, #12]
 800f436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f43a:	f010 0301 	ands.w	r3, r0, #1
 800f43e:	d00a      	beq.n	800f456 <__swsetup_r+0x9e>
 800f440:	2300      	movs	r3, #0
 800f442:	60a3      	str	r3, [r4, #8]
 800f444:	6963      	ldr	r3, [r4, #20]
 800f446:	425b      	negs	r3, r3
 800f448:	61a3      	str	r3, [r4, #24]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	b943      	cbnz	r3, 800f460 <__swsetup_r+0xa8>
 800f44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f452:	d1c4      	bne.n	800f3de <__swsetup_r+0x26>
 800f454:	bd38      	pop	{r3, r4, r5, pc}
 800f456:	0781      	lsls	r1, r0, #30
 800f458:	bf58      	it	pl
 800f45a:	6963      	ldrpl	r3, [r4, #20]
 800f45c:	60a3      	str	r3, [r4, #8]
 800f45e:	e7f4      	b.n	800f44a <__swsetup_r+0x92>
 800f460:	2000      	movs	r0, #0
 800f462:	e7f7      	b.n	800f454 <__swsetup_r+0x9c>
 800f464:	200001f8 	.word	0x200001f8

0800f468 <_raise_r>:
 800f468:	291f      	cmp	r1, #31
 800f46a:	b538      	push	{r3, r4, r5, lr}
 800f46c:	4604      	mov	r4, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	d904      	bls.n	800f47c <_raise_r+0x14>
 800f472:	2316      	movs	r3, #22
 800f474:	6003      	str	r3, [r0, #0]
 800f476:	f04f 30ff 	mov.w	r0, #4294967295
 800f47a:	bd38      	pop	{r3, r4, r5, pc}
 800f47c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f47e:	b112      	cbz	r2, 800f486 <_raise_r+0x1e>
 800f480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f484:	b94b      	cbnz	r3, 800f49a <_raise_r+0x32>
 800f486:	4620      	mov	r0, r4
 800f488:	f000 f830 	bl	800f4ec <_getpid_r>
 800f48c:	462a      	mov	r2, r5
 800f48e:	4601      	mov	r1, r0
 800f490:	4620      	mov	r0, r4
 800f492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f496:	f000 b817 	b.w	800f4c8 <_kill_r>
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d00a      	beq.n	800f4b4 <_raise_r+0x4c>
 800f49e:	1c59      	adds	r1, r3, #1
 800f4a0:	d103      	bne.n	800f4aa <_raise_r+0x42>
 800f4a2:	2316      	movs	r3, #22
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	2001      	movs	r0, #1
 800f4a8:	e7e7      	b.n	800f47a <_raise_r+0x12>
 800f4aa:	2400      	movs	r4, #0
 800f4ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	4798      	blx	r3
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	e7e0      	b.n	800f47a <_raise_r+0x12>

0800f4b8 <raise>:
 800f4b8:	4b02      	ldr	r3, [pc, #8]	; (800f4c4 <raise+0xc>)
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	6818      	ldr	r0, [r3, #0]
 800f4be:	f7ff bfd3 	b.w	800f468 <_raise_r>
 800f4c2:	bf00      	nop
 800f4c4:	200001f8 	.word	0x200001f8

0800f4c8 <_kill_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4d07      	ldr	r5, [pc, #28]	; (800f4e8 <_kill_r+0x20>)
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	4608      	mov	r0, r1
 800f4d2:	4611      	mov	r1, r2
 800f4d4:	602b      	str	r3, [r5, #0]
 800f4d6:	f7f3 faed 	bl	8002ab4 <_kill>
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	d102      	bne.n	800f4e4 <_kill_r+0x1c>
 800f4de:	682b      	ldr	r3, [r5, #0]
 800f4e0:	b103      	cbz	r3, 800f4e4 <_kill_r+0x1c>
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	bd38      	pop	{r3, r4, r5, pc}
 800f4e6:	bf00      	nop
 800f4e8:	20000bc4 	.word	0x20000bc4

0800f4ec <_getpid_r>:
 800f4ec:	f7f3 bada 	b.w	8002aa4 <_getpid>

0800f4f0 <_malloc_usable_size_r>:
 800f4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4f4:	1f18      	subs	r0, r3, #4
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	bfbc      	itt	lt
 800f4fa:	580b      	ldrlt	r3, [r1, r0]
 800f4fc:	18c0      	addlt	r0, r0, r3
 800f4fe:	4770      	bx	lr

0800f500 <__swhatbuf_r>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	460c      	mov	r4, r1
 800f504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f508:	2900      	cmp	r1, #0
 800f50a:	b096      	sub	sp, #88	; 0x58
 800f50c:	4615      	mov	r5, r2
 800f50e:	461e      	mov	r6, r3
 800f510:	da0d      	bge.n	800f52e <__swhatbuf_r+0x2e>
 800f512:	89a3      	ldrh	r3, [r4, #12]
 800f514:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f518:	f04f 0100 	mov.w	r1, #0
 800f51c:	bf0c      	ite	eq
 800f51e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f522:	2340      	movne	r3, #64	; 0x40
 800f524:	2000      	movs	r0, #0
 800f526:	6031      	str	r1, [r6, #0]
 800f528:	602b      	str	r3, [r5, #0]
 800f52a:	b016      	add	sp, #88	; 0x58
 800f52c:	bd70      	pop	{r4, r5, r6, pc}
 800f52e:	466a      	mov	r2, sp
 800f530:	f000 f848 	bl	800f5c4 <_fstat_r>
 800f534:	2800      	cmp	r0, #0
 800f536:	dbec      	blt.n	800f512 <__swhatbuf_r+0x12>
 800f538:	9901      	ldr	r1, [sp, #4]
 800f53a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f53e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f542:	4259      	negs	r1, r3
 800f544:	4159      	adcs	r1, r3
 800f546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f54a:	e7eb      	b.n	800f524 <__swhatbuf_r+0x24>

0800f54c <__smakebuf_r>:
 800f54c:	898b      	ldrh	r3, [r1, #12]
 800f54e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f550:	079d      	lsls	r5, r3, #30
 800f552:	4606      	mov	r6, r0
 800f554:	460c      	mov	r4, r1
 800f556:	d507      	bpl.n	800f568 <__smakebuf_r+0x1c>
 800f558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	6123      	str	r3, [r4, #16]
 800f560:	2301      	movs	r3, #1
 800f562:	6163      	str	r3, [r4, #20]
 800f564:	b002      	add	sp, #8
 800f566:	bd70      	pop	{r4, r5, r6, pc}
 800f568:	ab01      	add	r3, sp, #4
 800f56a:	466a      	mov	r2, sp
 800f56c:	f7ff ffc8 	bl	800f500 <__swhatbuf_r>
 800f570:	9900      	ldr	r1, [sp, #0]
 800f572:	4605      	mov	r5, r0
 800f574:	4630      	mov	r0, r6
 800f576:	f7fe f929 	bl	800d7cc <_malloc_r>
 800f57a:	b948      	cbnz	r0, 800f590 <__smakebuf_r+0x44>
 800f57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f580:	059a      	lsls	r2, r3, #22
 800f582:	d4ef      	bmi.n	800f564 <__smakebuf_r+0x18>
 800f584:	f023 0303 	bic.w	r3, r3, #3
 800f588:	f043 0302 	orr.w	r3, r3, #2
 800f58c:	81a3      	strh	r3, [r4, #12]
 800f58e:	e7e3      	b.n	800f558 <__smakebuf_r+0xc>
 800f590:	89a3      	ldrh	r3, [r4, #12]
 800f592:	6020      	str	r0, [r4, #0]
 800f594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f598:	81a3      	strh	r3, [r4, #12]
 800f59a:	9b00      	ldr	r3, [sp, #0]
 800f59c:	6163      	str	r3, [r4, #20]
 800f59e:	9b01      	ldr	r3, [sp, #4]
 800f5a0:	6120      	str	r0, [r4, #16]
 800f5a2:	b15b      	cbz	r3, 800f5bc <__smakebuf_r+0x70>
 800f5a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f000 f81d 	bl	800f5e8 <_isatty_r>
 800f5ae:	b128      	cbz	r0, 800f5bc <__smakebuf_r+0x70>
 800f5b0:	89a3      	ldrh	r3, [r4, #12]
 800f5b2:	f023 0303 	bic.w	r3, r3, #3
 800f5b6:	f043 0301 	orr.w	r3, r3, #1
 800f5ba:	81a3      	strh	r3, [r4, #12]
 800f5bc:	89a3      	ldrh	r3, [r4, #12]
 800f5be:	431d      	orrs	r5, r3
 800f5c0:	81a5      	strh	r5, [r4, #12]
 800f5c2:	e7cf      	b.n	800f564 <__smakebuf_r+0x18>

0800f5c4 <_fstat_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	4d07      	ldr	r5, [pc, #28]	; (800f5e4 <_fstat_r+0x20>)
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4608      	mov	r0, r1
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	602b      	str	r3, [r5, #0]
 800f5d2:	f7f3 face 	bl	8002b72 <_fstat>
 800f5d6:	1c43      	adds	r3, r0, #1
 800f5d8:	d102      	bne.n	800f5e0 <_fstat_r+0x1c>
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	b103      	cbz	r3, 800f5e0 <_fstat_r+0x1c>
 800f5de:	6023      	str	r3, [r4, #0]
 800f5e0:	bd38      	pop	{r3, r4, r5, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20000bc4 	.word	0x20000bc4

0800f5e8 <_isatty_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4d06      	ldr	r5, [pc, #24]	; (800f604 <_isatty_r+0x1c>)
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	602b      	str	r3, [r5, #0]
 800f5f4:	f7f3 facd 	bl	8002b92 <_isatty>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	d102      	bne.n	800f602 <_isatty_r+0x1a>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	b103      	cbz	r3, 800f602 <_isatty_r+0x1a>
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	bd38      	pop	{r3, r4, r5, pc}
 800f604:	20000bc4 	.word	0x20000bc4

0800f608 <atan2>:
 800f608:	f000 bbbe 	b.w	800fd88 <__ieee754_atan2>

0800f60c <sqrt>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	ed2d 8b02 	vpush	{d8}
 800f612:	ec55 4b10 	vmov	r4, r5, d0
 800f616:	f000 f8d3 	bl	800f7c0 <__ieee754_sqrt>
 800f61a:	4622      	mov	r2, r4
 800f61c:	462b      	mov	r3, r5
 800f61e:	4620      	mov	r0, r4
 800f620:	4629      	mov	r1, r5
 800f622:	eeb0 8a40 	vmov.f32	s16, s0
 800f626:	eef0 8a60 	vmov.f32	s17, s1
 800f62a:	f7f1 fa8f 	bl	8000b4c <__aeabi_dcmpun>
 800f62e:	b990      	cbnz	r0, 800f656 <sqrt+0x4a>
 800f630:	2200      	movs	r2, #0
 800f632:	2300      	movs	r3, #0
 800f634:	4620      	mov	r0, r4
 800f636:	4629      	mov	r1, r5
 800f638:	f7f1 fa60 	bl	8000afc <__aeabi_dcmplt>
 800f63c:	b158      	cbz	r0, 800f656 <sqrt+0x4a>
 800f63e:	f7fc fe0f 	bl	800c260 <__errno>
 800f642:	2321      	movs	r3, #33	; 0x21
 800f644:	6003      	str	r3, [r0, #0]
 800f646:	2200      	movs	r2, #0
 800f648:	2300      	movs	r3, #0
 800f64a:	4610      	mov	r0, r2
 800f64c:	4619      	mov	r1, r3
 800f64e:	f7f1 f90d 	bl	800086c <__aeabi_ddiv>
 800f652:	ec41 0b18 	vmov	d8, r0, r1
 800f656:	eeb0 0a48 	vmov.f32	s0, s16
 800f65a:	eef0 0a68 	vmov.f32	s1, s17
 800f65e:	ecbd 8b02 	vpop	{d8}
 800f662:	bd38      	pop	{r3, r4, r5, pc}
 800f664:	0000      	movs	r0, r0
	...

0800f668 <cos>:
 800f668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f66a:	ec53 2b10 	vmov	r2, r3, d0
 800f66e:	4826      	ldr	r0, [pc, #152]	; (800f708 <cos+0xa0>)
 800f670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f674:	4281      	cmp	r1, r0
 800f676:	dc06      	bgt.n	800f686 <cos+0x1e>
 800f678:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f700 <cos+0x98>
 800f67c:	b005      	add	sp, #20
 800f67e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f682:	f000 b9f9 	b.w	800fa78 <__kernel_cos>
 800f686:	4821      	ldr	r0, [pc, #132]	; (800f70c <cos+0xa4>)
 800f688:	4281      	cmp	r1, r0
 800f68a:	dd09      	ble.n	800f6a0 <cos+0x38>
 800f68c:	ee10 0a10 	vmov	r0, s0
 800f690:	4619      	mov	r1, r3
 800f692:	f7f0 fe09 	bl	80002a8 <__aeabi_dsub>
 800f696:	ec41 0b10 	vmov	d0, r0, r1
 800f69a:	b005      	add	sp, #20
 800f69c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6a0:	4668      	mov	r0, sp
 800f6a2:	f000 fc39 	bl	800ff18 <__ieee754_rem_pio2>
 800f6a6:	f000 0003 	and.w	r0, r0, #3
 800f6aa:	2801      	cmp	r0, #1
 800f6ac:	d00b      	beq.n	800f6c6 <cos+0x5e>
 800f6ae:	2802      	cmp	r0, #2
 800f6b0:	d016      	beq.n	800f6e0 <cos+0x78>
 800f6b2:	b9e0      	cbnz	r0, 800f6ee <cos+0x86>
 800f6b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6b8:	ed9d 0b00 	vldr	d0, [sp]
 800f6bc:	f000 f9dc 	bl	800fa78 <__kernel_cos>
 800f6c0:	ec51 0b10 	vmov	r0, r1, d0
 800f6c4:	e7e7      	b.n	800f696 <cos+0x2e>
 800f6c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6ca:	ed9d 0b00 	vldr	d0, [sp]
 800f6ce:	f000 fa9b 	bl	800fc08 <__kernel_sin>
 800f6d2:	ec53 2b10 	vmov	r2, r3, d0
 800f6d6:	ee10 0a10 	vmov	r0, s0
 800f6da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6de:	e7da      	b.n	800f696 <cos+0x2e>
 800f6e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6e4:	ed9d 0b00 	vldr	d0, [sp]
 800f6e8:	f000 f9c6 	bl	800fa78 <__kernel_cos>
 800f6ec:	e7f1      	b.n	800f6d2 <cos+0x6a>
 800f6ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6f2:	ed9d 0b00 	vldr	d0, [sp]
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	f000 fa86 	bl	800fc08 <__kernel_sin>
 800f6fc:	e7e0      	b.n	800f6c0 <cos+0x58>
 800f6fe:	bf00      	nop
	...
 800f708:	3fe921fb 	.word	0x3fe921fb
 800f70c:	7fefffff 	.word	0x7fefffff

0800f710 <sin>:
 800f710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f712:	ec53 2b10 	vmov	r2, r3, d0
 800f716:	4828      	ldr	r0, [pc, #160]	; (800f7b8 <sin+0xa8>)
 800f718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f71c:	4281      	cmp	r1, r0
 800f71e:	dc07      	bgt.n	800f730 <sin+0x20>
 800f720:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f7b0 <sin+0xa0>
 800f724:	2000      	movs	r0, #0
 800f726:	b005      	add	sp, #20
 800f728:	f85d eb04 	ldr.w	lr, [sp], #4
 800f72c:	f000 ba6c 	b.w	800fc08 <__kernel_sin>
 800f730:	4822      	ldr	r0, [pc, #136]	; (800f7bc <sin+0xac>)
 800f732:	4281      	cmp	r1, r0
 800f734:	dd09      	ble.n	800f74a <sin+0x3a>
 800f736:	ee10 0a10 	vmov	r0, s0
 800f73a:	4619      	mov	r1, r3
 800f73c:	f7f0 fdb4 	bl	80002a8 <__aeabi_dsub>
 800f740:	ec41 0b10 	vmov	d0, r0, r1
 800f744:	b005      	add	sp, #20
 800f746:	f85d fb04 	ldr.w	pc, [sp], #4
 800f74a:	4668      	mov	r0, sp
 800f74c:	f000 fbe4 	bl	800ff18 <__ieee754_rem_pio2>
 800f750:	f000 0003 	and.w	r0, r0, #3
 800f754:	2801      	cmp	r0, #1
 800f756:	d00c      	beq.n	800f772 <sin+0x62>
 800f758:	2802      	cmp	r0, #2
 800f75a:	d011      	beq.n	800f780 <sin+0x70>
 800f75c:	b9f0      	cbnz	r0, 800f79c <sin+0x8c>
 800f75e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f762:	ed9d 0b00 	vldr	d0, [sp]
 800f766:	2001      	movs	r0, #1
 800f768:	f000 fa4e 	bl	800fc08 <__kernel_sin>
 800f76c:	ec51 0b10 	vmov	r0, r1, d0
 800f770:	e7e6      	b.n	800f740 <sin+0x30>
 800f772:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f776:	ed9d 0b00 	vldr	d0, [sp]
 800f77a:	f000 f97d 	bl	800fa78 <__kernel_cos>
 800f77e:	e7f5      	b.n	800f76c <sin+0x5c>
 800f780:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f784:	ed9d 0b00 	vldr	d0, [sp]
 800f788:	2001      	movs	r0, #1
 800f78a:	f000 fa3d 	bl	800fc08 <__kernel_sin>
 800f78e:	ec53 2b10 	vmov	r2, r3, d0
 800f792:	ee10 0a10 	vmov	r0, s0
 800f796:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f79a:	e7d1      	b.n	800f740 <sin+0x30>
 800f79c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7a0:	ed9d 0b00 	vldr	d0, [sp]
 800f7a4:	f000 f968 	bl	800fa78 <__kernel_cos>
 800f7a8:	e7f1      	b.n	800f78e <sin+0x7e>
 800f7aa:	bf00      	nop
 800f7ac:	f3af 8000 	nop.w
	...
 800f7b8:	3fe921fb 	.word	0x3fe921fb
 800f7bc:	7fefffff 	.word	0x7fefffff

0800f7c0 <__ieee754_sqrt>:
 800f7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c4:	ec55 4b10 	vmov	r4, r5, d0
 800f7c8:	4e67      	ldr	r6, [pc, #412]	; (800f968 <__ieee754_sqrt+0x1a8>)
 800f7ca:	43ae      	bics	r6, r5
 800f7cc:	ee10 0a10 	vmov	r0, s0
 800f7d0:	ee10 2a10 	vmov	r2, s0
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	462b      	mov	r3, r5
 800f7d8:	d10d      	bne.n	800f7f6 <__ieee754_sqrt+0x36>
 800f7da:	f7f0 ff1d 	bl	8000618 <__aeabi_dmul>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	f7f0 fd61 	bl	80002ac <__adddf3>
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	460d      	mov	r5, r1
 800f7ee:	ec45 4b10 	vmov	d0, r4, r5
 800f7f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f6:	2d00      	cmp	r5, #0
 800f7f8:	dc0b      	bgt.n	800f812 <__ieee754_sqrt+0x52>
 800f7fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f7fe:	4326      	orrs	r6, r4
 800f800:	d0f5      	beq.n	800f7ee <__ieee754_sqrt+0x2e>
 800f802:	b135      	cbz	r5, 800f812 <__ieee754_sqrt+0x52>
 800f804:	f7f0 fd50 	bl	80002a8 <__aeabi_dsub>
 800f808:	4602      	mov	r2, r0
 800f80a:	460b      	mov	r3, r1
 800f80c:	f7f1 f82e 	bl	800086c <__aeabi_ddiv>
 800f810:	e7eb      	b.n	800f7ea <__ieee754_sqrt+0x2a>
 800f812:	1509      	asrs	r1, r1, #20
 800f814:	f000 808d 	beq.w	800f932 <__ieee754_sqrt+0x172>
 800f818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f81c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f824:	07c9      	lsls	r1, r1, #31
 800f826:	bf5c      	itt	pl
 800f828:	005b      	lslpl	r3, r3, #1
 800f82a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f82e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f832:	bf58      	it	pl
 800f834:	0052      	lslpl	r2, r2, #1
 800f836:	2500      	movs	r5, #0
 800f838:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f83c:	1076      	asrs	r6, r6, #1
 800f83e:	0052      	lsls	r2, r2, #1
 800f840:	f04f 0e16 	mov.w	lr, #22
 800f844:	46ac      	mov	ip, r5
 800f846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f84a:	eb0c 0001 	add.w	r0, ip, r1
 800f84e:	4298      	cmp	r0, r3
 800f850:	bfde      	ittt	le
 800f852:	1a1b      	suble	r3, r3, r0
 800f854:	eb00 0c01 	addle.w	ip, r0, r1
 800f858:	186d      	addle	r5, r5, r1
 800f85a:	005b      	lsls	r3, r3, #1
 800f85c:	f1be 0e01 	subs.w	lr, lr, #1
 800f860:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f864:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f868:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f86c:	d1ed      	bne.n	800f84a <__ieee754_sqrt+0x8a>
 800f86e:	4674      	mov	r4, lr
 800f870:	2720      	movs	r7, #32
 800f872:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f876:	4563      	cmp	r3, ip
 800f878:	eb01 000e 	add.w	r0, r1, lr
 800f87c:	dc02      	bgt.n	800f884 <__ieee754_sqrt+0xc4>
 800f87e:	d113      	bne.n	800f8a8 <__ieee754_sqrt+0xe8>
 800f880:	4290      	cmp	r0, r2
 800f882:	d811      	bhi.n	800f8a8 <__ieee754_sqrt+0xe8>
 800f884:	2800      	cmp	r0, #0
 800f886:	eb00 0e01 	add.w	lr, r0, r1
 800f88a:	da57      	bge.n	800f93c <__ieee754_sqrt+0x17c>
 800f88c:	f1be 0f00 	cmp.w	lr, #0
 800f890:	db54      	blt.n	800f93c <__ieee754_sqrt+0x17c>
 800f892:	f10c 0801 	add.w	r8, ip, #1
 800f896:	eba3 030c 	sub.w	r3, r3, ip
 800f89a:	4290      	cmp	r0, r2
 800f89c:	bf88      	it	hi
 800f89e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f8a2:	1a12      	subs	r2, r2, r0
 800f8a4:	440c      	add	r4, r1
 800f8a6:	46c4      	mov	ip, r8
 800f8a8:	005b      	lsls	r3, r3, #1
 800f8aa:	3f01      	subs	r7, #1
 800f8ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f8b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f8b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f8b8:	d1dd      	bne.n	800f876 <__ieee754_sqrt+0xb6>
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	d01b      	beq.n	800f8f6 <__ieee754_sqrt+0x136>
 800f8be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f96c <__ieee754_sqrt+0x1ac>
 800f8c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f970 <__ieee754_sqrt+0x1b0>
 800f8c6:	e9da 0100 	ldrd	r0, r1, [sl]
 800f8ca:	e9db 2300 	ldrd	r2, r3, [fp]
 800f8ce:	f7f0 fceb 	bl	80002a8 <__aeabi_dsub>
 800f8d2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	460b      	mov	r3, r1
 800f8da:	4640      	mov	r0, r8
 800f8dc:	4649      	mov	r1, r9
 800f8de:	f7f1 f917 	bl	8000b10 <__aeabi_dcmple>
 800f8e2:	b140      	cbz	r0, 800f8f6 <__ieee754_sqrt+0x136>
 800f8e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f8e8:	e9da 0100 	ldrd	r0, r1, [sl]
 800f8ec:	e9db 2300 	ldrd	r2, r3, [fp]
 800f8f0:	d126      	bne.n	800f940 <__ieee754_sqrt+0x180>
 800f8f2:	3501      	adds	r5, #1
 800f8f4:	463c      	mov	r4, r7
 800f8f6:	106a      	asrs	r2, r5, #1
 800f8f8:	0863      	lsrs	r3, r4, #1
 800f8fa:	07e9      	lsls	r1, r5, #31
 800f8fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f900:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f904:	bf48      	it	mi
 800f906:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f90a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f90e:	461c      	mov	r4, r3
 800f910:	e76d      	b.n	800f7ee <__ieee754_sqrt+0x2e>
 800f912:	0ad3      	lsrs	r3, r2, #11
 800f914:	3815      	subs	r0, #21
 800f916:	0552      	lsls	r2, r2, #21
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d0fa      	beq.n	800f912 <__ieee754_sqrt+0x152>
 800f91c:	02dc      	lsls	r4, r3, #11
 800f91e:	d50a      	bpl.n	800f936 <__ieee754_sqrt+0x176>
 800f920:	f1c1 0420 	rsb	r4, r1, #32
 800f924:	fa22 f404 	lsr.w	r4, r2, r4
 800f928:	1e4d      	subs	r5, r1, #1
 800f92a:	408a      	lsls	r2, r1
 800f92c:	4323      	orrs	r3, r4
 800f92e:	1b41      	subs	r1, r0, r5
 800f930:	e772      	b.n	800f818 <__ieee754_sqrt+0x58>
 800f932:	4608      	mov	r0, r1
 800f934:	e7f0      	b.n	800f918 <__ieee754_sqrt+0x158>
 800f936:	005b      	lsls	r3, r3, #1
 800f938:	3101      	adds	r1, #1
 800f93a:	e7ef      	b.n	800f91c <__ieee754_sqrt+0x15c>
 800f93c:	46e0      	mov	r8, ip
 800f93e:	e7aa      	b.n	800f896 <__ieee754_sqrt+0xd6>
 800f940:	f7f0 fcb4 	bl	80002ac <__adddf3>
 800f944:	e9da 8900 	ldrd	r8, r9, [sl]
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	4640      	mov	r0, r8
 800f94e:	4649      	mov	r1, r9
 800f950:	f7f1 f8d4 	bl	8000afc <__aeabi_dcmplt>
 800f954:	b120      	cbz	r0, 800f960 <__ieee754_sqrt+0x1a0>
 800f956:	1ca0      	adds	r0, r4, #2
 800f958:	bf08      	it	eq
 800f95a:	3501      	addeq	r5, #1
 800f95c:	3402      	adds	r4, #2
 800f95e:	e7ca      	b.n	800f8f6 <__ieee754_sqrt+0x136>
 800f960:	3401      	adds	r4, #1
 800f962:	f024 0401 	bic.w	r4, r4, #1
 800f966:	e7c6      	b.n	800f8f6 <__ieee754_sqrt+0x136>
 800f968:	7ff00000 	.word	0x7ff00000
 800f96c:	20000200 	.word	0x20000200
 800f970:	20000208 	.word	0x20000208
 800f974:	00000000 	.word	0x00000000

0800f978 <floor>:
 800f978:	ec51 0b10 	vmov	r0, r1, d0
 800f97c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f984:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f988:	2e13      	cmp	r6, #19
 800f98a:	ee10 5a10 	vmov	r5, s0
 800f98e:	ee10 8a10 	vmov	r8, s0
 800f992:	460c      	mov	r4, r1
 800f994:	dc31      	bgt.n	800f9fa <floor+0x82>
 800f996:	2e00      	cmp	r6, #0
 800f998:	da14      	bge.n	800f9c4 <floor+0x4c>
 800f99a:	a333      	add	r3, pc, #204	; (adr r3, 800fa68 <floor+0xf0>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	f7f0 fc84 	bl	80002ac <__adddf3>
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	f7f1 f8c6 	bl	8000b38 <__aeabi_dcmpgt>
 800f9ac:	b138      	cbz	r0, 800f9be <floor+0x46>
 800f9ae:	2c00      	cmp	r4, #0
 800f9b0:	da53      	bge.n	800fa5a <floor+0xe2>
 800f9b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f9b6:	4325      	orrs	r5, r4
 800f9b8:	d052      	beq.n	800fa60 <floor+0xe8>
 800f9ba:	4c2d      	ldr	r4, [pc, #180]	; (800fa70 <floor+0xf8>)
 800f9bc:	2500      	movs	r5, #0
 800f9be:	4621      	mov	r1, r4
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	e024      	b.n	800fa0e <floor+0x96>
 800f9c4:	4f2b      	ldr	r7, [pc, #172]	; (800fa74 <floor+0xfc>)
 800f9c6:	4137      	asrs	r7, r6
 800f9c8:	ea01 0307 	and.w	r3, r1, r7
 800f9cc:	4303      	orrs	r3, r0
 800f9ce:	d01e      	beq.n	800fa0e <floor+0x96>
 800f9d0:	a325      	add	r3, pc, #148	; (adr r3, 800fa68 <floor+0xf0>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	f7f0 fc69 	bl	80002ac <__adddf3>
 800f9da:	2200      	movs	r2, #0
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f7f1 f8ab 	bl	8000b38 <__aeabi_dcmpgt>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	d0eb      	beq.n	800f9be <floor+0x46>
 800f9e6:	2c00      	cmp	r4, #0
 800f9e8:	bfbe      	ittt	lt
 800f9ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f9ee:	4133      	asrlt	r3, r6
 800f9f0:	18e4      	addlt	r4, r4, r3
 800f9f2:	ea24 0407 	bic.w	r4, r4, r7
 800f9f6:	2500      	movs	r5, #0
 800f9f8:	e7e1      	b.n	800f9be <floor+0x46>
 800f9fa:	2e33      	cmp	r6, #51	; 0x33
 800f9fc:	dd0b      	ble.n	800fa16 <floor+0x9e>
 800f9fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fa02:	d104      	bne.n	800fa0e <floor+0x96>
 800fa04:	ee10 2a10 	vmov	r2, s0
 800fa08:	460b      	mov	r3, r1
 800fa0a:	f7f0 fc4f 	bl	80002ac <__adddf3>
 800fa0e:	ec41 0b10 	vmov	d0, r0, r1
 800fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa16:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800fa1a:	f04f 37ff 	mov.w	r7, #4294967295
 800fa1e:	40df      	lsrs	r7, r3
 800fa20:	4238      	tst	r0, r7
 800fa22:	d0f4      	beq.n	800fa0e <floor+0x96>
 800fa24:	a310      	add	r3, pc, #64	; (adr r3, 800fa68 <floor+0xf0>)
 800fa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2a:	f7f0 fc3f 	bl	80002ac <__adddf3>
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2300      	movs	r3, #0
 800fa32:	f7f1 f881 	bl	8000b38 <__aeabi_dcmpgt>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	d0c1      	beq.n	800f9be <floor+0x46>
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	da0a      	bge.n	800fa54 <floor+0xdc>
 800fa3e:	2e14      	cmp	r6, #20
 800fa40:	d101      	bne.n	800fa46 <floor+0xce>
 800fa42:	3401      	adds	r4, #1
 800fa44:	e006      	b.n	800fa54 <floor+0xdc>
 800fa46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	40b3      	lsls	r3, r6
 800fa4e:	441d      	add	r5, r3
 800fa50:	45a8      	cmp	r8, r5
 800fa52:	d8f6      	bhi.n	800fa42 <floor+0xca>
 800fa54:	ea25 0507 	bic.w	r5, r5, r7
 800fa58:	e7b1      	b.n	800f9be <floor+0x46>
 800fa5a:	2500      	movs	r5, #0
 800fa5c:	462c      	mov	r4, r5
 800fa5e:	e7ae      	b.n	800f9be <floor+0x46>
 800fa60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fa64:	e7ab      	b.n	800f9be <floor+0x46>
 800fa66:	bf00      	nop
 800fa68:	8800759c 	.word	0x8800759c
 800fa6c:	7e37e43c 	.word	0x7e37e43c
 800fa70:	bff00000 	.word	0xbff00000
 800fa74:	000fffff 	.word	0x000fffff

0800fa78 <__kernel_cos>:
 800fa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	ec57 6b10 	vmov	r6, r7, d0
 800fa80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fa84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fa88:	ed8d 1b00 	vstr	d1, [sp]
 800fa8c:	da07      	bge.n	800fa9e <__kernel_cos+0x26>
 800fa8e:	ee10 0a10 	vmov	r0, s0
 800fa92:	4639      	mov	r1, r7
 800fa94:	f7f1 f870 	bl	8000b78 <__aeabi_d2iz>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	f000 8088 	beq.w	800fbae <__kernel_cos+0x136>
 800fa9e:	4632      	mov	r2, r6
 800faa0:	463b      	mov	r3, r7
 800faa2:	4630      	mov	r0, r6
 800faa4:	4639      	mov	r1, r7
 800faa6:	f7f0 fdb7 	bl	8000618 <__aeabi_dmul>
 800faaa:	4b51      	ldr	r3, [pc, #324]	; (800fbf0 <__kernel_cos+0x178>)
 800faac:	2200      	movs	r2, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	460d      	mov	r5, r1
 800fab2:	f7f0 fdb1 	bl	8000618 <__aeabi_dmul>
 800fab6:	a340      	add	r3, pc, #256	; (adr r3, 800fbb8 <__kernel_cos+0x140>)
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	4682      	mov	sl, r0
 800fabe:	468b      	mov	fp, r1
 800fac0:	4620      	mov	r0, r4
 800fac2:	4629      	mov	r1, r5
 800fac4:	f7f0 fda8 	bl	8000618 <__aeabi_dmul>
 800fac8:	a33d      	add	r3, pc, #244	; (adr r3, 800fbc0 <__kernel_cos+0x148>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fbed 	bl	80002ac <__adddf3>
 800fad2:	4622      	mov	r2, r4
 800fad4:	462b      	mov	r3, r5
 800fad6:	f7f0 fd9f 	bl	8000618 <__aeabi_dmul>
 800fada:	a33b      	add	r3, pc, #236	; (adr r3, 800fbc8 <__kernel_cos+0x150>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fbe2 	bl	80002a8 <__aeabi_dsub>
 800fae4:	4622      	mov	r2, r4
 800fae6:	462b      	mov	r3, r5
 800fae8:	f7f0 fd96 	bl	8000618 <__aeabi_dmul>
 800faec:	a338      	add	r3, pc, #224	; (adr r3, 800fbd0 <__kernel_cos+0x158>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	f7f0 fbdb 	bl	80002ac <__adddf3>
 800faf6:	4622      	mov	r2, r4
 800faf8:	462b      	mov	r3, r5
 800fafa:	f7f0 fd8d 	bl	8000618 <__aeabi_dmul>
 800fafe:	a336      	add	r3, pc, #216	; (adr r3, 800fbd8 <__kernel_cos+0x160>)
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f7f0 fbd0 	bl	80002a8 <__aeabi_dsub>
 800fb08:	4622      	mov	r2, r4
 800fb0a:	462b      	mov	r3, r5
 800fb0c:	f7f0 fd84 	bl	8000618 <__aeabi_dmul>
 800fb10:	a333      	add	r3, pc, #204	; (adr r3, 800fbe0 <__kernel_cos+0x168>)
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	f7f0 fbc9 	bl	80002ac <__adddf3>
 800fb1a:	4622      	mov	r2, r4
 800fb1c:	462b      	mov	r3, r5
 800fb1e:	f7f0 fd7b 	bl	8000618 <__aeabi_dmul>
 800fb22:	4622      	mov	r2, r4
 800fb24:	462b      	mov	r3, r5
 800fb26:	f7f0 fd77 	bl	8000618 <__aeabi_dmul>
 800fb2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb2e:	4604      	mov	r4, r0
 800fb30:	460d      	mov	r5, r1
 800fb32:	4630      	mov	r0, r6
 800fb34:	4639      	mov	r1, r7
 800fb36:	f7f0 fd6f 	bl	8000618 <__aeabi_dmul>
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	4629      	mov	r1, r5
 800fb40:	4620      	mov	r0, r4
 800fb42:	f7f0 fbb1 	bl	80002a8 <__aeabi_dsub>
 800fb46:	4b2b      	ldr	r3, [pc, #172]	; (800fbf4 <__kernel_cos+0x17c>)
 800fb48:	4598      	cmp	r8, r3
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	460f      	mov	r7, r1
 800fb4e:	dc10      	bgt.n	800fb72 <__kernel_cos+0xfa>
 800fb50:	4602      	mov	r2, r0
 800fb52:	460b      	mov	r3, r1
 800fb54:	4650      	mov	r0, sl
 800fb56:	4659      	mov	r1, fp
 800fb58:	f7f0 fba6 	bl	80002a8 <__aeabi_dsub>
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	4926      	ldr	r1, [pc, #152]	; (800fbf8 <__kernel_cos+0x180>)
 800fb60:	4602      	mov	r2, r0
 800fb62:	2000      	movs	r0, #0
 800fb64:	f7f0 fba0 	bl	80002a8 <__aeabi_dsub>
 800fb68:	ec41 0b10 	vmov	d0, r0, r1
 800fb6c:	b003      	add	sp, #12
 800fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb72:	4b22      	ldr	r3, [pc, #136]	; (800fbfc <__kernel_cos+0x184>)
 800fb74:	4920      	ldr	r1, [pc, #128]	; (800fbf8 <__kernel_cos+0x180>)
 800fb76:	4598      	cmp	r8, r3
 800fb78:	bfcc      	ite	gt
 800fb7a:	4d21      	ldrgt	r5, [pc, #132]	; (800fc00 <__kernel_cos+0x188>)
 800fb7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fb80:	2400      	movs	r4, #0
 800fb82:	4622      	mov	r2, r4
 800fb84:	462b      	mov	r3, r5
 800fb86:	2000      	movs	r0, #0
 800fb88:	f7f0 fb8e 	bl	80002a8 <__aeabi_dsub>
 800fb8c:	4622      	mov	r2, r4
 800fb8e:	4680      	mov	r8, r0
 800fb90:	4689      	mov	r9, r1
 800fb92:	462b      	mov	r3, r5
 800fb94:	4650      	mov	r0, sl
 800fb96:	4659      	mov	r1, fp
 800fb98:	f7f0 fb86 	bl	80002a8 <__aeabi_dsub>
 800fb9c:	4632      	mov	r2, r6
 800fb9e:	463b      	mov	r3, r7
 800fba0:	f7f0 fb82 	bl	80002a8 <__aeabi_dsub>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4640      	mov	r0, r8
 800fbaa:	4649      	mov	r1, r9
 800fbac:	e7da      	b.n	800fb64 <__kernel_cos+0xec>
 800fbae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fbe8 <__kernel_cos+0x170>
 800fbb2:	e7db      	b.n	800fb6c <__kernel_cos+0xf4>
 800fbb4:	f3af 8000 	nop.w
 800fbb8:	be8838d4 	.word	0xbe8838d4
 800fbbc:	bda8fae9 	.word	0xbda8fae9
 800fbc0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fbc4:	3e21ee9e 	.word	0x3e21ee9e
 800fbc8:	809c52ad 	.word	0x809c52ad
 800fbcc:	3e927e4f 	.word	0x3e927e4f
 800fbd0:	19cb1590 	.word	0x19cb1590
 800fbd4:	3efa01a0 	.word	0x3efa01a0
 800fbd8:	16c15177 	.word	0x16c15177
 800fbdc:	3f56c16c 	.word	0x3f56c16c
 800fbe0:	5555554c 	.word	0x5555554c
 800fbe4:	3fa55555 	.word	0x3fa55555
 800fbe8:	00000000 	.word	0x00000000
 800fbec:	3ff00000 	.word	0x3ff00000
 800fbf0:	3fe00000 	.word	0x3fe00000
 800fbf4:	3fd33332 	.word	0x3fd33332
 800fbf8:	3ff00000 	.word	0x3ff00000
 800fbfc:	3fe90000 	.word	0x3fe90000
 800fc00:	3fd20000 	.word	0x3fd20000
 800fc04:	00000000 	.word	0x00000000

0800fc08 <__kernel_sin>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	ed2d 8b04 	vpush	{d8-d9}
 800fc10:	eeb0 8a41 	vmov.f32	s16, s2
 800fc14:	eef0 8a61 	vmov.f32	s17, s3
 800fc18:	ec55 4b10 	vmov	r4, r5, d0
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fc26:	9001      	str	r0, [sp, #4]
 800fc28:	da06      	bge.n	800fc38 <__kernel_sin+0x30>
 800fc2a:	ee10 0a10 	vmov	r0, s0
 800fc2e:	4629      	mov	r1, r5
 800fc30:	f7f0 ffa2 	bl	8000b78 <__aeabi_d2iz>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d051      	beq.n	800fcdc <__kernel_sin+0xd4>
 800fc38:	4622      	mov	r2, r4
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	4629      	mov	r1, r5
 800fc40:	f7f0 fcea 	bl	8000618 <__aeabi_dmul>
 800fc44:	4682      	mov	sl, r0
 800fc46:	468b      	mov	fp, r1
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f7f0 fce2 	bl	8000618 <__aeabi_dmul>
 800fc54:	a341      	add	r3, pc, #260	; (adr r3, 800fd5c <__kernel_sin+0x154>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	4680      	mov	r8, r0
 800fc5c:	4689      	mov	r9, r1
 800fc5e:	4650      	mov	r0, sl
 800fc60:	4659      	mov	r1, fp
 800fc62:	f7f0 fcd9 	bl	8000618 <__aeabi_dmul>
 800fc66:	a33f      	add	r3, pc, #252	; (adr r3, 800fd64 <__kernel_sin+0x15c>)
 800fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6c:	f7f0 fb1c 	bl	80002a8 <__aeabi_dsub>
 800fc70:	4652      	mov	r2, sl
 800fc72:	465b      	mov	r3, fp
 800fc74:	f7f0 fcd0 	bl	8000618 <__aeabi_dmul>
 800fc78:	a33c      	add	r3, pc, #240	; (adr r3, 800fd6c <__kernel_sin+0x164>)
 800fc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7e:	f7f0 fb15 	bl	80002ac <__adddf3>
 800fc82:	4652      	mov	r2, sl
 800fc84:	465b      	mov	r3, fp
 800fc86:	f7f0 fcc7 	bl	8000618 <__aeabi_dmul>
 800fc8a:	a33a      	add	r3, pc, #232	; (adr r3, 800fd74 <__kernel_sin+0x16c>)
 800fc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc90:	f7f0 fb0a 	bl	80002a8 <__aeabi_dsub>
 800fc94:	4652      	mov	r2, sl
 800fc96:	465b      	mov	r3, fp
 800fc98:	f7f0 fcbe 	bl	8000618 <__aeabi_dmul>
 800fc9c:	a337      	add	r3, pc, #220	; (adr r3, 800fd7c <__kernel_sin+0x174>)
 800fc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca2:	f7f0 fb03 	bl	80002ac <__adddf3>
 800fca6:	9b01      	ldr	r3, [sp, #4]
 800fca8:	4606      	mov	r6, r0
 800fcaa:	460f      	mov	r7, r1
 800fcac:	b9eb      	cbnz	r3, 800fcea <__kernel_sin+0xe2>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	4659      	mov	r1, fp
 800fcb6:	f7f0 fcaf 	bl	8000618 <__aeabi_dmul>
 800fcba:	a325      	add	r3, pc, #148	; (adr r3, 800fd50 <__kernel_sin+0x148>)
 800fcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc0:	f7f0 faf2 	bl	80002a8 <__aeabi_dsub>
 800fcc4:	4642      	mov	r2, r8
 800fcc6:	464b      	mov	r3, r9
 800fcc8:	f7f0 fca6 	bl	8000618 <__aeabi_dmul>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	f7f0 faea 	bl	80002ac <__adddf3>
 800fcd8:	4604      	mov	r4, r0
 800fcda:	460d      	mov	r5, r1
 800fcdc:	ec45 4b10 	vmov	d0, r4, r5
 800fce0:	b003      	add	sp, #12
 800fce2:	ecbd 8b04 	vpop	{d8-d9}
 800fce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcea:	4b1b      	ldr	r3, [pc, #108]	; (800fd58 <__kernel_sin+0x150>)
 800fcec:	ec51 0b18 	vmov	r0, r1, d8
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f7f0 fc91 	bl	8000618 <__aeabi_dmul>
 800fcf6:	4632      	mov	r2, r6
 800fcf8:	ec41 0b19 	vmov	d9, r0, r1
 800fcfc:	463b      	mov	r3, r7
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 fc89 	bl	8000618 <__aeabi_dmul>
 800fd06:	4602      	mov	r2, r0
 800fd08:	460b      	mov	r3, r1
 800fd0a:	ec51 0b19 	vmov	r0, r1, d9
 800fd0e:	f7f0 facb 	bl	80002a8 <__aeabi_dsub>
 800fd12:	4652      	mov	r2, sl
 800fd14:	465b      	mov	r3, fp
 800fd16:	f7f0 fc7f 	bl	8000618 <__aeabi_dmul>
 800fd1a:	ec53 2b18 	vmov	r2, r3, d8
 800fd1e:	f7f0 fac3 	bl	80002a8 <__aeabi_dsub>
 800fd22:	a30b      	add	r3, pc, #44	; (adr r3, 800fd50 <__kernel_sin+0x148>)
 800fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd28:	4606      	mov	r6, r0
 800fd2a:	460f      	mov	r7, r1
 800fd2c:	4640      	mov	r0, r8
 800fd2e:	4649      	mov	r1, r9
 800fd30:	f7f0 fc72 	bl	8000618 <__aeabi_dmul>
 800fd34:	4602      	mov	r2, r0
 800fd36:	460b      	mov	r3, r1
 800fd38:	4630      	mov	r0, r6
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	f7f0 fab6 	bl	80002ac <__adddf3>
 800fd40:	4602      	mov	r2, r0
 800fd42:	460b      	mov	r3, r1
 800fd44:	4620      	mov	r0, r4
 800fd46:	4629      	mov	r1, r5
 800fd48:	f7f0 faae 	bl	80002a8 <__aeabi_dsub>
 800fd4c:	e7c4      	b.n	800fcd8 <__kernel_sin+0xd0>
 800fd4e:	bf00      	nop
 800fd50:	55555549 	.word	0x55555549
 800fd54:	3fc55555 	.word	0x3fc55555
 800fd58:	3fe00000 	.word	0x3fe00000
 800fd5c:	5acfd57c 	.word	0x5acfd57c
 800fd60:	3de5d93a 	.word	0x3de5d93a
 800fd64:	8a2b9ceb 	.word	0x8a2b9ceb
 800fd68:	3e5ae5e6 	.word	0x3e5ae5e6
 800fd6c:	57b1fe7d 	.word	0x57b1fe7d
 800fd70:	3ec71de3 	.word	0x3ec71de3
 800fd74:	19c161d5 	.word	0x19c161d5
 800fd78:	3f2a01a0 	.word	0x3f2a01a0
 800fd7c:	1110f8a6 	.word	0x1110f8a6
 800fd80:	3f811111 	.word	0x3f811111
 800fd84:	00000000 	.word	0x00000000

0800fd88 <__ieee754_atan2>:
 800fd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd8c:	ec57 6b11 	vmov	r6, r7, d1
 800fd90:	4273      	negs	r3, r6
 800fd92:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ff10 <__ieee754_atan2+0x188>
 800fd96:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fd9a:	4333      	orrs	r3, r6
 800fd9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fda0:	4543      	cmp	r3, r8
 800fda2:	ec51 0b10 	vmov	r0, r1, d0
 800fda6:	ee11 5a10 	vmov	r5, s2
 800fdaa:	d80a      	bhi.n	800fdc2 <__ieee754_atan2+0x3a>
 800fdac:	4244      	negs	r4, r0
 800fdae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdb2:	4304      	orrs	r4, r0
 800fdb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fdb8:	4544      	cmp	r4, r8
 800fdba:	ee10 9a10 	vmov	r9, s0
 800fdbe:	468e      	mov	lr, r1
 800fdc0:	d907      	bls.n	800fdd2 <__ieee754_atan2+0x4a>
 800fdc2:	4632      	mov	r2, r6
 800fdc4:	463b      	mov	r3, r7
 800fdc6:	f7f0 fa71 	bl	80002ac <__adddf3>
 800fdca:	ec41 0b10 	vmov	d0, r0, r1
 800fdce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fdd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fdda:	4334      	orrs	r4, r6
 800fddc:	d103      	bne.n	800fde6 <__ieee754_atan2+0x5e>
 800fdde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fde2:	f000 baa1 	b.w	8010328 <atan>
 800fde6:	17bc      	asrs	r4, r7, #30
 800fde8:	f004 0402 	and.w	r4, r4, #2
 800fdec:	ea53 0909 	orrs.w	r9, r3, r9
 800fdf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fdf4:	d107      	bne.n	800fe06 <__ieee754_atan2+0x7e>
 800fdf6:	2c02      	cmp	r4, #2
 800fdf8:	d05f      	beq.n	800feba <__ieee754_atan2+0x132>
 800fdfa:	2c03      	cmp	r4, #3
 800fdfc:	d1e5      	bne.n	800fdca <__ieee754_atan2+0x42>
 800fdfe:	a140      	add	r1, pc, #256	; (adr r1, 800ff00 <__ieee754_atan2+0x178>)
 800fe00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe04:	e7e1      	b.n	800fdca <__ieee754_atan2+0x42>
 800fe06:	4315      	orrs	r5, r2
 800fe08:	d106      	bne.n	800fe18 <__ieee754_atan2+0x90>
 800fe0a:	f1be 0f00 	cmp.w	lr, #0
 800fe0e:	da5f      	bge.n	800fed0 <__ieee754_atan2+0x148>
 800fe10:	a13d      	add	r1, pc, #244	; (adr r1, 800ff08 <__ieee754_atan2+0x180>)
 800fe12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe16:	e7d8      	b.n	800fdca <__ieee754_atan2+0x42>
 800fe18:	4542      	cmp	r2, r8
 800fe1a:	d10f      	bne.n	800fe3c <__ieee754_atan2+0xb4>
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe22:	d107      	bne.n	800fe34 <__ieee754_atan2+0xac>
 800fe24:	2c02      	cmp	r4, #2
 800fe26:	d84c      	bhi.n	800fec2 <__ieee754_atan2+0x13a>
 800fe28:	4b33      	ldr	r3, [pc, #204]	; (800fef8 <__ieee754_atan2+0x170>)
 800fe2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe32:	e7ca      	b.n	800fdca <__ieee754_atan2+0x42>
 800fe34:	2c02      	cmp	r4, #2
 800fe36:	d848      	bhi.n	800feca <__ieee754_atan2+0x142>
 800fe38:	4b30      	ldr	r3, [pc, #192]	; (800fefc <__ieee754_atan2+0x174>)
 800fe3a:	e7f6      	b.n	800fe2a <__ieee754_atan2+0xa2>
 800fe3c:	4543      	cmp	r3, r8
 800fe3e:	d0e4      	beq.n	800fe0a <__ieee754_atan2+0x82>
 800fe40:	1a9b      	subs	r3, r3, r2
 800fe42:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fe46:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fe4a:	da1e      	bge.n	800fe8a <__ieee754_atan2+0x102>
 800fe4c:	2f00      	cmp	r7, #0
 800fe4e:	da01      	bge.n	800fe54 <__ieee754_atan2+0xcc>
 800fe50:	323c      	adds	r2, #60	; 0x3c
 800fe52:	db1e      	blt.n	800fe92 <__ieee754_atan2+0x10a>
 800fe54:	4632      	mov	r2, r6
 800fe56:	463b      	mov	r3, r7
 800fe58:	f7f0 fd08 	bl	800086c <__aeabi_ddiv>
 800fe5c:	ec41 0b10 	vmov	d0, r0, r1
 800fe60:	f000 fc02 	bl	8010668 <fabs>
 800fe64:	f000 fa60 	bl	8010328 <atan>
 800fe68:	ec51 0b10 	vmov	r0, r1, d0
 800fe6c:	2c01      	cmp	r4, #1
 800fe6e:	d013      	beq.n	800fe98 <__ieee754_atan2+0x110>
 800fe70:	2c02      	cmp	r4, #2
 800fe72:	d015      	beq.n	800fea0 <__ieee754_atan2+0x118>
 800fe74:	2c00      	cmp	r4, #0
 800fe76:	d0a8      	beq.n	800fdca <__ieee754_atan2+0x42>
 800fe78:	a317      	add	r3, pc, #92	; (adr r3, 800fed8 <__ieee754_atan2+0x150>)
 800fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7e:	f7f0 fa13 	bl	80002a8 <__aeabi_dsub>
 800fe82:	a317      	add	r3, pc, #92	; (adr r3, 800fee0 <__ieee754_atan2+0x158>)
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	e014      	b.n	800feb4 <__ieee754_atan2+0x12c>
 800fe8a:	a117      	add	r1, pc, #92	; (adr r1, 800fee8 <__ieee754_atan2+0x160>)
 800fe8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe90:	e7ec      	b.n	800fe6c <__ieee754_atan2+0xe4>
 800fe92:	2000      	movs	r0, #0
 800fe94:	2100      	movs	r1, #0
 800fe96:	e7e9      	b.n	800fe6c <__ieee754_atan2+0xe4>
 800fe98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	e794      	b.n	800fdca <__ieee754_atan2+0x42>
 800fea0:	a30d      	add	r3, pc, #52	; (adr r3, 800fed8 <__ieee754_atan2+0x150>)
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	f7f0 f9ff 	bl	80002a8 <__aeabi_dsub>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	a10c      	add	r1, pc, #48	; (adr r1, 800fee0 <__ieee754_atan2+0x158>)
 800feb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feb4:	f7f0 f9f8 	bl	80002a8 <__aeabi_dsub>
 800feb8:	e787      	b.n	800fdca <__ieee754_atan2+0x42>
 800feba:	a109      	add	r1, pc, #36	; (adr r1, 800fee0 <__ieee754_atan2+0x158>)
 800febc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec0:	e783      	b.n	800fdca <__ieee754_atan2+0x42>
 800fec2:	a10b      	add	r1, pc, #44	; (adr r1, 800fef0 <__ieee754_atan2+0x168>)
 800fec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec8:	e77f      	b.n	800fdca <__ieee754_atan2+0x42>
 800feca:	2000      	movs	r0, #0
 800fecc:	2100      	movs	r1, #0
 800fece:	e77c      	b.n	800fdca <__ieee754_atan2+0x42>
 800fed0:	a105      	add	r1, pc, #20	; (adr r1, 800fee8 <__ieee754_atan2+0x160>)
 800fed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fed6:	e778      	b.n	800fdca <__ieee754_atan2+0x42>
 800fed8:	33145c07 	.word	0x33145c07
 800fedc:	3ca1a626 	.word	0x3ca1a626
 800fee0:	54442d18 	.word	0x54442d18
 800fee4:	400921fb 	.word	0x400921fb
 800fee8:	54442d18 	.word	0x54442d18
 800feec:	3ff921fb 	.word	0x3ff921fb
 800fef0:	54442d18 	.word	0x54442d18
 800fef4:	3fe921fb 	.word	0x3fe921fb
 800fef8:	08012938 	.word	0x08012938
 800fefc:	08012950 	.word	0x08012950
 800ff00:	54442d18 	.word	0x54442d18
 800ff04:	c00921fb 	.word	0xc00921fb
 800ff08:	54442d18 	.word	0x54442d18
 800ff0c:	bff921fb 	.word	0xbff921fb
 800ff10:	7ff00000 	.word	0x7ff00000
 800ff14:	00000000 	.word	0x00000000

0800ff18 <__ieee754_rem_pio2>:
 800ff18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1c:	ed2d 8b02 	vpush	{d8}
 800ff20:	ec55 4b10 	vmov	r4, r5, d0
 800ff24:	4bca      	ldr	r3, [pc, #808]	; (8010250 <__ieee754_rem_pio2+0x338>)
 800ff26:	b08b      	sub	sp, #44	; 0x2c
 800ff28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ff2c:	4598      	cmp	r8, r3
 800ff2e:	4682      	mov	sl, r0
 800ff30:	9502      	str	r5, [sp, #8]
 800ff32:	dc08      	bgt.n	800ff46 <__ieee754_rem_pio2+0x2e>
 800ff34:	2200      	movs	r2, #0
 800ff36:	2300      	movs	r3, #0
 800ff38:	ed80 0b00 	vstr	d0, [r0]
 800ff3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ff40:	f04f 0b00 	mov.w	fp, #0
 800ff44:	e028      	b.n	800ff98 <__ieee754_rem_pio2+0x80>
 800ff46:	4bc3      	ldr	r3, [pc, #780]	; (8010254 <__ieee754_rem_pio2+0x33c>)
 800ff48:	4598      	cmp	r8, r3
 800ff4a:	dc78      	bgt.n	801003e <__ieee754_rem_pio2+0x126>
 800ff4c:	9b02      	ldr	r3, [sp, #8]
 800ff4e:	4ec2      	ldr	r6, [pc, #776]	; (8010258 <__ieee754_rem_pio2+0x340>)
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	ee10 0a10 	vmov	r0, s0
 800ff56:	a3b0      	add	r3, pc, #704	; (adr r3, 8010218 <__ieee754_rem_pio2+0x300>)
 800ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	dd39      	ble.n	800ffd4 <__ieee754_rem_pio2+0xbc>
 800ff60:	f7f0 f9a2 	bl	80002a8 <__aeabi_dsub>
 800ff64:	45b0      	cmp	r8, r6
 800ff66:	4604      	mov	r4, r0
 800ff68:	460d      	mov	r5, r1
 800ff6a:	d01b      	beq.n	800ffa4 <__ieee754_rem_pio2+0x8c>
 800ff6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010220 <__ieee754_rem_pio2+0x308>)
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	f7f0 f999 	bl	80002a8 <__aeabi_dsub>
 800ff76:	4602      	mov	r2, r0
 800ff78:	460b      	mov	r3, r1
 800ff7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ff7e:	4620      	mov	r0, r4
 800ff80:	4629      	mov	r1, r5
 800ff82:	f7f0 f991 	bl	80002a8 <__aeabi_dsub>
 800ff86:	a3a6      	add	r3, pc, #664	; (adr r3, 8010220 <__ieee754_rem_pio2+0x308>)
 800ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8c:	f7f0 f98c 	bl	80002a8 <__aeabi_dsub>
 800ff90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff94:	f04f 0b01 	mov.w	fp, #1
 800ff98:	4658      	mov	r0, fp
 800ff9a:	b00b      	add	sp, #44	; 0x2c
 800ff9c:	ecbd 8b02 	vpop	{d8}
 800ffa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa4:	a3a0      	add	r3, pc, #640	; (adr r3, 8010228 <__ieee754_rem_pio2+0x310>)
 800ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffaa:	f7f0 f97d 	bl	80002a8 <__aeabi_dsub>
 800ffae:	a3a0      	add	r3, pc, #640	; (adr r3, 8010230 <__ieee754_rem_pio2+0x318>)
 800ffb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	460d      	mov	r5, r1
 800ffb8:	f7f0 f976 	bl	80002a8 <__aeabi_dsub>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	460b      	mov	r3, r1
 800ffc0:	e9ca 2300 	strd	r2, r3, [sl]
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	f7f0 f96e 	bl	80002a8 <__aeabi_dsub>
 800ffcc:	a398      	add	r3, pc, #608	; (adr r3, 8010230 <__ieee754_rem_pio2+0x318>)
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	e7db      	b.n	800ff8c <__ieee754_rem_pio2+0x74>
 800ffd4:	f7f0 f96a 	bl	80002ac <__adddf3>
 800ffd8:	45b0      	cmp	r8, r6
 800ffda:	4604      	mov	r4, r0
 800ffdc:	460d      	mov	r5, r1
 800ffde:	d016      	beq.n	801000e <__ieee754_rem_pio2+0xf6>
 800ffe0:	a38f      	add	r3, pc, #572	; (adr r3, 8010220 <__ieee754_rem_pio2+0x308>)
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	f7f0 f961 	bl	80002ac <__adddf3>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	e9ca 2300 	strd	r2, r3, [sl]
 800fff2:	4620      	mov	r0, r4
 800fff4:	4629      	mov	r1, r5
 800fff6:	f7f0 f957 	bl	80002a8 <__aeabi_dsub>
 800fffa:	a389      	add	r3, pc, #548	; (adr r3, 8010220 <__ieee754_rem_pio2+0x308>)
 800fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010000:	f7f0 f954 	bl	80002ac <__adddf3>
 8010004:	f04f 3bff 	mov.w	fp, #4294967295
 8010008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801000c:	e7c4      	b.n	800ff98 <__ieee754_rem_pio2+0x80>
 801000e:	a386      	add	r3, pc, #536	; (adr r3, 8010228 <__ieee754_rem_pio2+0x310>)
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	f7f0 f94a 	bl	80002ac <__adddf3>
 8010018:	a385      	add	r3, pc, #532	; (adr r3, 8010230 <__ieee754_rem_pio2+0x318>)
 801001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001e:	4604      	mov	r4, r0
 8010020:	460d      	mov	r5, r1
 8010022:	f7f0 f943 	bl	80002ac <__adddf3>
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	e9ca 2300 	strd	r2, r3, [sl]
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 f939 	bl	80002a8 <__aeabi_dsub>
 8010036:	a37e      	add	r3, pc, #504	; (adr r3, 8010230 <__ieee754_rem_pio2+0x318>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	e7e0      	b.n	8010000 <__ieee754_rem_pio2+0xe8>
 801003e:	4b87      	ldr	r3, [pc, #540]	; (801025c <__ieee754_rem_pio2+0x344>)
 8010040:	4598      	cmp	r8, r3
 8010042:	f300 80d8 	bgt.w	80101f6 <__ieee754_rem_pio2+0x2de>
 8010046:	f000 fb0f 	bl	8010668 <fabs>
 801004a:	ec55 4b10 	vmov	r4, r5, d0
 801004e:	ee10 0a10 	vmov	r0, s0
 8010052:	a379      	add	r3, pc, #484	; (adr r3, 8010238 <__ieee754_rem_pio2+0x320>)
 8010054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 fadd 	bl	8000618 <__aeabi_dmul>
 801005e:	4b80      	ldr	r3, [pc, #512]	; (8010260 <__ieee754_rem_pio2+0x348>)
 8010060:	2200      	movs	r2, #0
 8010062:	f7f0 f923 	bl	80002ac <__adddf3>
 8010066:	f7f0 fd87 	bl	8000b78 <__aeabi_d2iz>
 801006a:	4683      	mov	fp, r0
 801006c:	f7f0 fa6a 	bl	8000544 <__aeabi_i2d>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	ec43 2b18 	vmov	d8, r2, r3
 8010078:	a367      	add	r3, pc, #412	; (adr r3, 8010218 <__ieee754_rem_pio2+0x300>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	f7f0 facb 	bl	8000618 <__aeabi_dmul>
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	4620      	mov	r0, r4
 8010088:	4629      	mov	r1, r5
 801008a:	f7f0 f90d 	bl	80002a8 <__aeabi_dsub>
 801008e:	a364      	add	r3, pc, #400	; (adr r3, 8010220 <__ieee754_rem_pio2+0x308>)
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	4606      	mov	r6, r0
 8010096:	460f      	mov	r7, r1
 8010098:	ec51 0b18 	vmov	r0, r1, d8
 801009c:	f7f0 fabc 	bl	8000618 <__aeabi_dmul>
 80100a0:	f1bb 0f1f 	cmp.w	fp, #31
 80100a4:	4604      	mov	r4, r0
 80100a6:	460d      	mov	r5, r1
 80100a8:	dc0d      	bgt.n	80100c6 <__ieee754_rem_pio2+0x1ae>
 80100aa:	4b6e      	ldr	r3, [pc, #440]	; (8010264 <__ieee754_rem_pio2+0x34c>)
 80100ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80100b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b4:	4543      	cmp	r3, r8
 80100b6:	d006      	beq.n	80100c6 <__ieee754_rem_pio2+0x1ae>
 80100b8:	4622      	mov	r2, r4
 80100ba:	462b      	mov	r3, r5
 80100bc:	4630      	mov	r0, r6
 80100be:	4639      	mov	r1, r7
 80100c0:	f7f0 f8f2 	bl	80002a8 <__aeabi_dsub>
 80100c4:	e00e      	b.n	80100e4 <__ieee754_rem_pio2+0x1cc>
 80100c6:	462b      	mov	r3, r5
 80100c8:	4622      	mov	r2, r4
 80100ca:	4630      	mov	r0, r6
 80100cc:	4639      	mov	r1, r7
 80100ce:	f7f0 f8eb 	bl	80002a8 <__aeabi_dsub>
 80100d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80100d6:	9303      	str	r3, [sp, #12]
 80100d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80100dc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80100e0:	2b10      	cmp	r3, #16
 80100e2:	dc02      	bgt.n	80100ea <__ieee754_rem_pio2+0x1d2>
 80100e4:	e9ca 0100 	strd	r0, r1, [sl]
 80100e8:	e039      	b.n	801015e <__ieee754_rem_pio2+0x246>
 80100ea:	a34f      	add	r3, pc, #316	; (adr r3, 8010228 <__ieee754_rem_pio2+0x310>)
 80100ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f0:	ec51 0b18 	vmov	r0, r1, d8
 80100f4:	f7f0 fa90 	bl	8000618 <__aeabi_dmul>
 80100f8:	4604      	mov	r4, r0
 80100fa:	460d      	mov	r5, r1
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	4630      	mov	r0, r6
 8010102:	4639      	mov	r1, r7
 8010104:	f7f0 f8d0 	bl	80002a8 <__aeabi_dsub>
 8010108:	4602      	mov	r2, r0
 801010a:	460b      	mov	r3, r1
 801010c:	4680      	mov	r8, r0
 801010e:	4689      	mov	r9, r1
 8010110:	4630      	mov	r0, r6
 8010112:	4639      	mov	r1, r7
 8010114:	f7f0 f8c8 	bl	80002a8 <__aeabi_dsub>
 8010118:	4622      	mov	r2, r4
 801011a:	462b      	mov	r3, r5
 801011c:	f7f0 f8c4 	bl	80002a8 <__aeabi_dsub>
 8010120:	a343      	add	r3, pc, #268	; (adr r3, 8010230 <__ieee754_rem_pio2+0x318>)
 8010122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010126:	4604      	mov	r4, r0
 8010128:	460d      	mov	r5, r1
 801012a:	ec51 0b18 	vmov	r0, r1, d8
 801012e:	f7f0 fa73 	bl	8000618 <__aeabi_dmul>
 8010132:	4622      	mov	r2, r4
 8010134:	462b      	mov	r3, r5
 8010136:	f7f0 f8b7 	bl	80002a8 <__aeabi_dsub>
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	4604      	mov	r4, r0
 8010140:	460d      	mov	r5, r1
 8010142:	4640      	mov	r0, r8
 8010144:	4649      	mov	r1, r9
 8010146:	f7f0 f8af 	bl	80002a8 <__aeabi_dsub>
 801014a:	9a03      	ldr	r2, [sp, #12]
 801014c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	2b31      	cmp	r3, #49	; 0x31
 8010154:	dc24      	bgt.n	80101a0 <__ieee754_rem_pio2+0x288>
 8010156:	e9ca 0100 	strd	r0, r1, [sl]
 801015a:	4646      	mov	r6, r8
 801015c:	464f      	mov	r7, r9
 801015e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010162:	4630      	mov	r0, r6
 8010164:	4642      	mov	r2, r8
 8010166:	464b      	mov	r3, r9
 8010168:	4639      	mov	r1, r7
 801016a:	f7f0 f89d 	bl	80002a8 <__aeabi_dsub>
 801016e:	462b      	mov	r3, r5
 8010170:	4622      	mov	r2, r4
 8010172:	f7f0 f899 	bl	80002a8 <__aeabi_dsub>
 8010176:	9b02      	ldr	r3, [sp, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801017e:	f6bf af0b 	bge.w	800ff98 <__ieee754_rem_pio2+0x80>
 8010182:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010186:	f8ca 3004 	str.w	r3, [sl, #4]
 801018a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801018e:	f8ca 8000 	str.w	r8, [sl]
 8010192:	f8ca 0008 	str.w	r0, [sl, #8]
 8010196:	f8ca 300c 	str.w	r3, [sl, #12]
 801019a:	f1cb 0b00 	rsb	fp, fp, #0
 801019e:	e6fb      	b.n	800ff98 <__ieee754_rem_pio2+0x80>
 80101a0:	a327      	add	r3, pc, #156	; (adr r3, 8010240 <__ieee754_rem_pio2+0x328>)
 80101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a6:	ec51 0b18 	vmov	r0, r1, d8
 80101aa:	f7f0 fa35 	bl	8000618 <__aeabi_dmul>
 80101ae:	4604      	mov	r4, r0
 80101b0:	460d      	mov	r5, r1
 80101b2:	4602      	mov	r2, r0
 80101b4:	460b      	mov	r3, r1
 80101b6:	4640      	mov	r0, r8
 80101b8:	4649      	mov	r1, r9
 80101ba:	f7f0 f875 	bl	80002a8 <__aeabi_dsub>
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	4606      	mov	r6, r0
 80101c4:	460f      	mov	r7, r1
 80101c6:	4640      	mov	r0, r8
 80101c8:	4649      	mov	r1, r9
 80101ca:	f7f0 f86d 	bl	80002a8 <__aeabi_dsub>
 80101ce:	4622      	mov	r2, r4
 80101d0:	462b      	mov	r3, r5
 80101d2:	f7f0 f869 	bl	80002a8 <__aeabi_dsub>
 80101d6:	a31c      	add	r3, pc, #112	; (adr r3, 8010248 <__ieee754_rem_pio2+0x330>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	4604      	mov	r4, r0
 80101de:	460d      	mov	r5, r1
 80101e0:	ec51 0b18 	vmov	r0, r1, d8
 80101e4:	f7f0 fa18 	bl	8000618 <__aeabi_dmul>
 80101e8:	4622      	mov	r2, r4
 80101ea:	462b      	mov	r3, r5
 80101ec:	f7f0 f85c 	bl	80002a8 <__aeabi_dsub>
 80101f0:	4604      	mov	r4, r0
 80101f2:	460d      	mov	r5, r1
 80101f4:	e760      	b.n	80100b8 <__ieee754_rem_pio2+0x1a0>
 80101f6:	4b1c      	ldr	r3, [pc, #112]	; (8010268 <__ieee754_rem_pio2+0x350>)
 80101f8:	4598      	cmp	r8, r3
 80101fa:	dd37      	ble.n	801026c <__ieee754_rem_pio2+0x354>
 80101fc:	ee10 2a10 	vmov	r2, s0
 8010200:	462b      	mov	r3, r5
 8010202:	4620      	mov	r0, r4
 8010204:	4629      	mov	r1, r5
 8010206:	f7f0 f84f 	bl	80002a8 <__aeabi_dsub>
 801020a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801020e:	e9ca 0100 	strd	r0, r1, [sl]
 8010212:	e695      	b.n	800ff40 <__ieee754_rem_pio2+0x28>
 8010214:	f3af 8000 	nop.w
 8010218:	54400000 	.word	0x54400000
 801021c:	3ff921fb 	.word	0x3ff921fb
 8010220:	1a626331 	.word	0x1a626331
 8010224:	3dd0b461 	.word	0x3dd0b461
 8010228:	1a600000 	.word	0x1a600000
 801022c:	3dd0b461 	.word	0x3dd0b461
 8010230:	2e037073 	.word	0x2e037073
 8010234:	3ba3198a 	.word	0x3ba3198a
 8010238:	6dc9c883 	.word	0x6dc9c883
 801023c:	3fe45f30 	.word	0x3fe45f30
 8010240:	2e000000 	.word	0x2e000000
 8010244:	3ba3198a 	.word	0x3ba3198a
 8010248:	252049c1 	.word	0x252049c1
 801024c:	397b839a 	.word	0x397b839a
 8010250:	3fe921fb 	.word	0x3fe921fb
 8010254:	4002d97b 	.word	0x4002d97b
 8010258:	3ff921fb 	.word	0x3ff921fb
 801025c:	413921fb 	.word	0x413921fb
 8010260:	3fe00000 	.word	0x3fe00000
 8010264:	08012968 	.word	0x08012968
 8010268:	7fefffff 	.word	0x7fefffff
 801026c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010270:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010274:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010278:	4620      	mov	r0, r4
 801027a:	460d      	mov	r5, r1
 801027c:	f7f0 fc7c 	bl	8000b78 <__aeabi_d2iz>
 8010280:	f7f0 f960 	bl	8000544 <__aeabi_i2d>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4620      	mov	r0, r4
 801028a:	4629      	mov	r1, r5
 801028c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010290:	f7f0 f80a 	bl	80002a8 <__aeabi_dsub>
 8010294:	4b21      	ldr	r3, [pc, #132]	; (801031c <__ieee754_rem_pio2+0x404>)
 8010296:	2200      	movs	r2, #0
 8010298:	f7f0 f9be 	bl	8000618 <__aeabi_dmul>
 801029c:	460d      	mov	r5, r1
 801029e:	4604      	mov	r4, r0
 80102a0:	f7f0 fc6a 	bl	8000b78 <__aeabi_d2iz>
 80102a4:	f7f0 f94e 	bl	8000544 <__aeabi_i2d>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4620      	mov	r0, r4
 80102ae:	4629      	mov	r1, r5
 80102b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80102b4:	f7ef fff8 	bl	80002a8 <__aeabi_dsub>
 80102b8:	4b18      	ldr	r3, [pc, #96]	; (801031c <__ieee754_rem_pio2+0x404>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	f7f0 f9ac 	bl	8000618 <__aeabi_dmul>
 80102c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102c4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80102c8:	2703      	movs	r7, #3
 80102ca:	2400      	movs	r4, #0
 80102cc:	2500      	movs	r5, #0
 80102ce:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80102d2:	4622      	mov	r2, r4
 80102d4:	462b      	mov	r3, r5
 80102d6:	46b9      	mov	r9, r7
 80102d8:	3f01      	subs	r7, #1
 80102da:	f7f0 fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 80102de:	2800      	cmp	r0, #0
 80102e0:	d1f5      	bne.n	80102ce <__ieee754_rem_pio2+0x3b6>
 80102e2:	4b0f      	ldr	r3, [pc, #60]	; (8010320 <__ieee754_rem_pio2+0x408>)
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	2302      	movs	r3, #2
 80102e8:	9300      	str	r3, [sp, #0]
 80102ea:	4632      	mov	r2, r6
 80102ec:	464b      	mov	r3, r9
 80102ee:	4651      	mov	r1, sl
 80102f0:	a804      	add	r0, sp, #16
 80102f2:	f000 f9c5 	bl	8010680 <__kernel_rem_pio2>
 80102f6:	9b02      	ldr	r3, [sp, #8]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	4683      	mov	fp, r0
 80102fc:	f6bf ae4c 	bge.w	800ff98 <__ieee754_rem_pio2+0x80>
 8010300:	e9da 2100 	ldrd	r2, r1, [sl]
 8010304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010308:	e9ca 2300 	strd	r2, r3, [sl]
 801030c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010314:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010318:	e73f      	b.n	801019a <__ieee754_rem_pio2+0x282>
 801031a:	bf00      	nop
 801031c:	41700000 	.word	0x41700000
 8010320:	080129e8 	.word	0x080129e8
 8010324:	00000000 	.word	0x00000000

08010328 <atan>:
 8010328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	ec55 4b10 	vmov	r4, r5, d0
 8010330:	4bc3      	ldr	r3, [pc, #780]	; (8010640 <atan+0x318>)
 8010332:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010336:	429e      	cmp	r6, r3
 8010338:	46ab      	mov	fp, r5
 801033a:	dd18      	ble.n	801036e <atan+0x46>
 801033c:	4bc1      	ldr	r3, [pc, #772]	; (8010644 <atan+0x31c>)
 801033e:	429e      	cmp	r6, r3
 8010340:	dc01      	bgt.n	8010346 <atan+0x1e>
 8010342:	d109      	bne.n	8010358 <atan+0x30>
 8010344:	b144      	cbz	r4, 8010358 <atan+0x30>
 8010346:	4622      	mov	r2, r4
 8010348:	462b      	mov	r3, r5
 801034a:	4620      	mov	r0, r4
 801034c:	4629      	mov	r1, r5
 801034e:	f7ef ffad 	bl	80002ac <__adddf3>
 8010352:	4604      	mov	r4, r0
 8010354:	460d      	mov	r5, r1
 8010356:	e006      	b.n	8010366 <atan+0x3e>
 8010358:	f1bb 0f00 	cmp.w	fp, #0
 801035c:	f300 8131 	bgt.w	80105c2 <atan+0x29a>
 8010360:	a59b      	add	r5, pc, #620	; (adr r5, 80105d0 <atan+0x2a8>)
 8010362:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010366:	ec45 4b10 	vmov	d0, r4, r5
 801036a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801036e:	4bb6      	ldr	r3, [pc, #728]	; (8010648 <atan+0x320>)
 8010370:	429e      	cmp	r6, r3
 8010372:	dc14      	bgt.n	801039e <atan+0x76>
 8010374:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010378:	429e      	cmp	r6, r3
 801037a:	dc0d      	bgt.n	8010398 <atan+0x70>
 801037c:	a396      	add	r3, pc, #600	; (adr r3, 80105d8 <atan+0x2b0>)
 801037e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010382:	ee10 0a10 	vmov	r0, s0
 8010386:	4629      	mov	r1, r5
 8010388:	f7ef ff90 	bl	80002ac <__adddf3>
 801038c:	4baf      	ldr	r3, [pc, #700]	; (801064c <atan+0x324>)
 801038e:	2200      	movs	r2, #0
 8010390:	f7f0 fbd2 	bl	8000b38 <__aeabi_dcmpgt>
 8010394:	2800      	cmp	r0, #0
 8010396:	d1e6      	bne.n	8010366 <atan+0x3e>
 8010398:	f04f 3aff 	mov.w	sl, #4294967295
 801039c:	e02b      	b.n	80103f6 <atan+0xce>
 801039e:	f000 f963 	bl	8010668 <fabs>
 80103a2:	4bab      	ldr	r3, [pc, #684]	; (8010650 <atan+0x328>)
 80103a4:	429e      	cmp	r6, r3
 80103a6:	ec55 4b10 	vmov	r4, r5, d0
 80103aa:	f300 80bf 	bgt.w	801052c <atan+0x204>
 80103ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80103b2:	429e      	cmp	r6, r3
 80103b4:	f300 80a0 	bgt.w	80104f8 <atan+0x1d0>
 80103b8:	ee10 2a10 	vmov	r2, s0
 80103bc:	ee10 0a10 	vmov	r0, s0
 80103c0:	462b      	mov	r3, r5
 80103c2:	4629      	mov	r1, r5
 80103c4:	f7ef ff72 	bl	80002ac <__adddf3>
 80103c8:	4ba0      	ldr	r3, [pc, #640]	; (801064c <atan+0x324>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	f7ef ff6c 	bl	80002a8 <__aeabi_dsub>
 80103d0:	2200      	movs	r2, #0
 80103d2:	4606      	mov	r6, r0
 80103d4:	460f      	mov	r7, r1
 80103d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103da:	4620      	mov	r0, r4
 80103dc:	4629      	mov	r1, r5
 80103de:	f7ef ff65 	bl	80002ac <__adddf3>
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	4630      	mov	r0, r6
 80103e8:	4639      	mov	r1, r7
 80103ea:	f7f0 fa3f 	bl	800086c <__aeabi_ddiv>
 80103ee:	f04f 0a00 	mov.w	sl, #0
 80103f2:	4604      	mov	r4, r0
 80103f4:	460d      	mov	r5, r1
 80103f6:	4622      	mov	r2, r4
 80103f8:	462b      	mov	r3, r5
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7f0 f90b 	bl	8000618 <__aeabi_dmul>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	4680      	mov	r8, r0
 8010408:	4689      	mov	r9, r1
 801040a:	f7f0 f905 	bl	8000618 <__aeabi_dmul>
 801040e:	a374      	add	r3, pc, #464	; (adr r3, 80105e0 <atan+0x2b8>)
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	4606      	mov	r6, r0
 8010416:	460f      	mov	r7, r1
 8010418:	f7f0 f8fe 	bl	8000618 <__aeabi_dmul>
 801041c:	a372      	add	r3, pc, #456	; (adr r3, 80105e8 <atan+0x2c0>)
 801041e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010422:	f7ef ff43 	bl	80002ac <__adddf3>
 8010426:	4632      	mov	r2, r6
 8010428:	463b      	mov	r3, r7
 801042a:	f7f0 f8f5 	bl	8000618 <__aeabi_dmul>
 801042e:	a370      	add	r3, pc, #448	; (adr r3, 80105f0 <atan+0x2c8>)
 8010430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010434:	f7ef ff3a 	bl	80002ac <__adddf3>
 8010438:	4632      	mov	r2, r6
 801043a:	463b      	mov	r3, r7
 801043c:	f7f0 f8ec 	bl	8000618 <__aeabi_dmul>
 8010440:	a36d      	add	r3, pc, #436	; (adr r3, 80105f8 <atan+0x2d0>)
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	f7ef ff31 	bl	80002ac <__adddf3>
 801044a:	4632      	mov	r2, r6
 801044c:	463b      	mov	r3, r7
 801044e:	f7f0 f8e3 	bl	8000618 <__aeabi_dmul>
 8010452:	a36b      	add	r3, pc, #428	; (adr r3, 8010600 <atan+0x2d8>)
 8010454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010458:	f7ef ff28 	bl	80002ac <__adddf3>
 801045c:	4632      	mov	r2, r6
 801045e:	463b      	mov	r3, r7
 8010460:	f7f0 f8da 	bl	8000618 <__aeabi_dmul>
 8010464:	a368      	add	r3, pc, #416	; (adr r3, 8010608 <atan+0x2e0>)
 8010466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046a:	f7ef ff1f 	bl	80002ac <__adddf3>
 801046e:	4642      	mov	r2, r8
 8010470:	464b      	mov	r3, r9
 8010472:	f7f0 f8d1 	bl	8000618 <__aeabi_dmul>
 8010476:	a366      	add	r3, pc, #408	; (adr r3, 8010610 <atan+0x2e8>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	4680      	mov	r8, r0
 801047e:	4689      	mov	r9, r1
 8010480:	4630      	mov	r0, r6
 8010482:	4639      	mov	r1, r7
 8010484:	f7f0 f8c8 	bl	8000618 <__aeabi_dmul>
 8010488:	a363      	add	r3, pc, #396	; (adr r3, 8010618 <atan+0x2f0>)
 801048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048e:	f7ef ff0b 	bl	80002a8 <__aeabi_dsub>
 8010492:	4632      	mov	r2, r6
 8010494:	463b      	mov	r3, r7
 8010496:	f7f0 f8bf 	bl	8000618 <__aeabi_dmul>
 801049a:	a361      	add	r3, pc, #388	; (adr r3, 8010620 <atan+0x2f8>)
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	f7ef ff02 	bl	80002a8 <__aeabi_dsub>
 80104a4:	4632      	mov	r2, r6
 80104a6:	463b      	mov	r3, r7
 80104a8:	f7f0 f8b6 	bl	8000618 <__aeabi_dmul>
 80104ac:	a35e      	add	r3, pc, #376	; (adr r3, 8010628 <atan+0x300>)
 80104ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b2:	f7ef fef9 	bl	80002a8 <__aeabi_dsub>
 80104b6:	4632      	mov	r2, r6
 80104b8:	463b      	mov	r3, r7
 80104ba:	f7f0 f8ad 	bl	8000618 <__aeabi_dmul>
 80104be:	a35c      	add	r3, pc, #368	; (adr r3, 8010630 <atan+0x308>)
 80104c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c4:	f7ef fef0 	bl	80002a8 <__aeabi_dsub>
 80104c8:	4632      	mov	r2, r6
 80104ca:	463b      	mov	r3, r7
 80104cc:	f7f0 f8a4 	bl	8000618 <__aeabi_dmul>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	4640      	mov	r0, r8
 80104d6:	4649      	mov	r1, r9
 80104d8:	f7ef fee8 	bl	80002ac <__adddf3>
 80104dc:	4622      	mov	r2, r4
 80104de:	462b      	mov	r3, r5
 80104e0:	f7f0 f89a 	bl	8000618 <__aeabi_dmul>
 80104e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	d14b      	bne.n	8010586 <atan+0x25e>
 80104ee:	4620      	mov	r0, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	f7ef fed9 	bl	80002a8 <__aeabi_dsub>
 80104f6:	e72c      	b.n	8010352 <atan+0x2a>
 80104f8:	ee10 0a10 	vmov	r0, s0
 80104fc:	4b53      	ldr	r3, [pc, #332]	; (801064c <atan+0x324>)
 80104fe:	2200      	movs	r2, #0
 8010500:	4629      	mov	r1, r5
 8010502:	f7ef fed1 	bl	80002a8 <__aeabi_dsub>
 8010506:	4b51      	ldr	r3, [pc, #324]	; (801064c <atan+0x324>)
 8010508:	4606      	mov	r6, r0
 801050a:	460f      	mov	r7, r1
 801050c:	2200      	movs	r2, #0
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	f7ef fecb 	bl	80002ac <__adddf3>
 8010516:	4602      	mov	r2, r0
 8010518:	460b      	mov	r3, r1
 801051a:	4630      	mov	r0, r6
 801051c:	4639      	mov	r1, r7
 801051e:	f7f0 f9a5 	bl	800086c <__aeabi_ddiv>
 8010522:	f04f 0a01 	mov.w	sl, #1
 8010526:	4604      	mov	r4, r0
 8010528:	460d      	mov	r5, r1
 801052a:	e764      	b.n	80103f6 <atan+0xce>
 801052c:	4b49      	ldr	r3, [pc, #292]	; (8010654 <atan+0x32c>)
 801052e:	429e      	cmp	r6, r3
 8010530:	da1d      	bge.n	801056e <atan+0x246>
 8010532:	ee10 0a10 	vmov	r0, s0
 8010536:	4b48      	ldr	r3, [pc, #288]	; (8010658 <atan+0x330>)
 8010538:	2200      	movs	r2, #0
 801053a:	4629      	mov	r1, r5
 801053c:	f7ef feb4 	bl	80002a8 <__aeabi_dsub>
 8010540:	4b45      	ldr	r3, [pc, #276]	; (8010658 <atan+0x330>)
 8010542:	4606      	mov	r6, r0
 8010544:	460f      	mov	r7, r1
 8010546:	2200      	movs	r2, #0
 8010548:	4620      	mov	r0, r4
 801054a:	4629      	mov	r1, r5
 801054c:	f7f0 f864 	bl	8000618 <__aeabi_dmul>
 8010550:	4b3e      	ldr	r3, [pc, #248]	; (801064c <atan+0x324>)
 8010552:	2200      	movs	r2, #0
 8010554:	f7ef feaa 	bl	80002ac <__adddf3>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	4630      	mov	r0, r6
 801055e:	4639      	mov	r1, r7
 8010560:	f7f0 f984 	bl	800086c <__aeabi_ddiv>
 8010564:	f04f 0a02 	mov.w	sl, #2
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	e743      	b.n	80103f6 <atan+0xce>
 801056e:	462b      	mov	r3, r5
 8010570:	ee10 2a10 	vmov	r2, s0
 8010574:	4939      	ldr	r1, [pc, #228]	; (801065c <atan+0x334>)
 8010576:	2000      	movs	r0, #0
 8010578:	f7f0 f978 	bl	800086c <__aeabi_ddiv>
 801057c:	f04f 0a03 	mov.w	sl, #3
 8010580:	4604      	mov	r4, r0
 8010582:	460d      	mov	r5, r1
 8010584:	e737      	b.n	80103f6 <atan+0xce>
 8010586:	4b36      	ldr	r3, [pc, #216]	; (8010660 <atan+0x338>)
 8010588:	4e36      	ldr	r6, [pc, #216]	; (8010664 <atan+0x33c>)
 801058a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010592:	f7ef fe89 	bl	80002a8 <__aeabi_dsub>
 8010596:	4622      	mov	r2, r4
 8010598:	462b      	mov	r3, r5
 801059a:	f7ef fe85 	bl	80002a8 <__aeabi_dsub>
 801059e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80105a2:	4602      	mov	r2, r0
 80105a4:	460b      	mov	r3, r1
 80105a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80105aa:	f7ef fe7d 	bl	80002a8 <__aeabi_dsub>
 80105ae:	f1bb 0f00 	cmp.w	fp, #0
 80105b2:	4604      	mov	r4, r0
 80105b4:	460d      	mov	r5, r1
 80105b6:	f6bf aed6 	bge.w	8010366 <atan+0x3e>
 80105ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105be:	461d      	mov	r5, r3
 80105c0:	e6d1      	b.n	8010366 <atan+0x3e>
 80105c2:	a51d      	add	r5, pc, #116	; (adr r5, 8010638 <atan+0x310>)
 80105c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80105c8:	e6cd      	b.n	8010366 <atan+0x3e>
 80105ca:	bf00      	nop
 80105cc:	f3af 8000 	nop.w
 80105d0:	54442d18 	.word	0x54442d18
 80105d4:	bff921fb 	.word	0xbff921fb
 80105d8:	8800759c 	.word	0x8800759c
 80105dc:	7e37e43c 	.word	0x7e37e43c
 80105e0:	e322da11 	.word	0xe322da11
 80105e4:	3f90ad3a 	.word	0x3f90ad3a
 80105e8:	24760deb 	.word	0x24760deb
 80105ec:	3fa97b4b 	.word	0x3fa97b4b
 80105f0:	a0d03d51 	.word	0xa0d03d51
 80105f4:	3fb10d66 	.word	0x3fb10d66
 80105f8:	c54c206e 	.word	0xc54c206e
 80105fc:	3fb745cd 	.word	0x3fb745cd
 8010600:	920083ff 	.word	0x920083ff
 8010604:	3fc24924 	.word	0x3fc24924
 8010608:	5555550d 	.word	0x5555550d
 801060c:	3fd55555 	.word	0x3fd55555
 8010610:	2c6a6c2f 	.word	0x2c6a6c2f
 8010614:	bfa2b444 	.word	0xbfa2b444
 8010618:	52defd9a 	.word	0x52defd9a
 801061c:	3fadde2d 	.word	0x3fadde2d
 8010620:	af749a6d 	.word	0xaf749a6d
 8010624:	3fb3b0f2 	.word	0x3fb3b0f2
 8010628:	fe231671 	.word	0xfe231671
 801062c:	3fbc71c6 	.word	0x3fbc71c6
 8010630:	9998ebc4 	.word	0x9998ebc4
 8010634:	3fc99999 	.word	0x3fc99999
 8010638:	54442d18 	.word	0x54442d18
 801063c:	3ff921fb 	.word	0x3ff921fb
 8010640:	440fffff 	.word	0x440fffff
 8010644:	7ff00000 	.word	0x7ff00000
 8010648:	3fdbffff 	.word	0x3fdbffff
 801064c:	3ff00000 	.word	0x3ff00000
 8010650:	3ff2ffff 	.word	0x3ff2ffff
 8010654:	40038000 	.word	0x40038000
 8010658:	3ff80000 	.word	0x3ff80000
 801065c:	bff00000 	.word	0xbff00000
 8010660:	08012b10 	.word	0x08012b10
 8010664:	08012af0 	.word	0x08012af0

08010668 <fabs>:
 8010668:	ec51 0b10 	vmov	r0, r1, d0
 801066c:	ee10 2a10 	vmov	r2, s0
 8010670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010674:	ec43 2b10 	vmov	d0, r2, r3
 8010678:	4770      	bx	lr
 801067a:	0000      	movs	r0, r0
 801067c:	0000      	movs	r0, r0
	...

08010680 <__kernel_rem_pio2>:
 8010680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010684:	ed2d 8b02 	vpush	{d8}
 8010688:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801068c:	f112 0f14 	cmn.w	r2, #20
 8010690:	9306      	str	r3, [sp, #24]
 8010692:	9104      	str	r1, [sp, #16]
 8010694:	4bc2      	ldr	r3, [pc, #776]	; (80109a0 <__kernel_rem_pio2+0x320>)
 8010696:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010698:	9009      	str	r0, [sp, #36]	; 0x24
 801069a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	9b06      	ldr	r3, [sp, #24]
 80106a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80106a6:	bfa8      	it	ge
 80106a8:	1ed4      	subge	r4, r2, #3
 80106aa:	9305      	str	r3, [sp, #20]
 80106ac:	bfb2      	itee	lt
 80106ae:	2400      	movlt	r4, #0
 80106b0:	2318      	movge	r3, #24
 80106b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80106b6:	f06f 0317 	mvn.w	r3, #23
 80106ba:	fb04 3303 	mla	r3, r4, r3, r3
 80106be:	eb03 0a02 	add.w	sl, r3, r2
 80106c2:	9b00      	ldr	r3, [sp, #0]
 80106c4:	9a05      	ldr	r2, [sp, #20]
 80106c6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010990 <__kernel_rem_pio2+0x310>
 80106ca:	eb03 0802 	add.w	r8, r3, r2
 80106ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80106d0:	1aa7      	subs	r7, r4, r2
 80106d2:	ae20      	add	r6, sp, #128	; 0x80
 80106d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80106d8:	2500      	movs	r5, #0
 80106da:	4545      	cmp	r5, r8
 80106dc:	dd13      	ble.n	8010706 <__kernel_rem_pio2+0x86>
 80106de:	9b06      	ldr	r3, [sp, #24]
 80106e0:	aa20      	add	r2, sp, #128	; 0x80
 80106e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80106e6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80106ea:	f04f 0800 	mov.w	r8, #0
 80106ee:	9b00      	ldr	r3, [sp, #0]
 80106f0:	4598      	cmp	r8, r3
 80106f2:	dc31      	bgt.n	8010758 <__kernel_rem_pio2+0xd8>
 80106f4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010990 <__kernel_rem_pio2+0x310>
 80106f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80106fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010700:	462f      	mov	r7, r5
 8010702:	2600      	movs	r6, #0
 8010704:	e01b      	b.n	801073e <__kernel_rem_pio2+0xbe>
 8010706:	42ef      	cmn	r7, r5
 8010708:	d407      	bmi.n	801071a <__kernel_rem_pio2+0x9a>
 801070a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801070e:	f7ef ff19 	bl	8000544 <__aeabi_i2d>
 8010712:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010716:	3501      	adds	r5, #1
 8010718:	e7df      	b.n	80106da <__kernel_rem_pio2+0x5a>
 801071a:	ec51 0b18 	vmov	r0, r1, d8
 801071e:	e7f8      	b.n	8010712 <__kernel_rem_pio2+0x92>
 8010720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010724:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010728:	f7ef ff76 	bl	8000618 <__aeabi_dmul>
 801072c:	4602      	mov	r2, r0
 801072e:	460b      	mov	r3, r1
 8010730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010734:	f7ef fdba 	bl	80002ac <__adddf3>
 8010738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801073c:	3601      	adds	r6, #1
 801073e:	9b05      	ldr	r3, [sp, #20]
 8010740:	429e      	cmp	r6, r3
 8010742:	f1a7 0708 	sub.w	r7, r7, #8
 8010746:	ddeb      	ble.n	8010720 <__kernel_rem_pio2+0xa0>
 8010748:	ed9d 7b02 	vldr	d7, [sp, #8]
 801074c:	f108 0801 	add.w	r8, r8, #1
 8010750:	ecab 7b02 	vstmia	fp!, {d7}
 8010754:	3508      	adds	r5, #8
 8010756:	e7ca      	b.n	80106ee <__kernel_rem_pio2+0x6e>
 8010758:	9b00      	ldr	r3, [sp, #0]
 801075a:	aa0c      	add	r2, sp, #48	; 0x30
 801075c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010760:	930b      	str	r3, [sp, #44]	; 0x2c
 8010762:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010764:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010768:	9c00      	ldr	r4, [sp, #0]
 801076a:	930a      	str	r3, [sp, #40]	; 0x28
 801076c:	00e3      	lsls	r3, r4, #3
 801076e:	9308      	str	r3, [sp, #32]
 8010770:	ab98      	add	r3, sp, #608	; 0x260
 8010772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010776:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801077a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801077e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010780:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010784:	46c3      	mov	fp, r8
 8010786:	46a1      	mov	r9, r4
 8010788:	f1b9 0f00 	cmp.w	r9, #0
 801078c:	f1a5 0508 	sub.w	r5, r5, #8
 8010790:	dc77      	bgt.n	8010882 <__kernel_rem_pio2+0x202>
 8010792:	ec47 6b10 	vmov	d0, r6, r7
 8010796:	4650      	mov	r0, sl
 8010798:	f000 fac2 	bl	8010d20 <scalbn>
 801079c:	ec57 6b10 	vmov	r6, r7, d0
 80107a0:	2200      	movs	r2, #0
 80107a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80107a6:	ee10 0a10 	vmov	r0, s0
 80107aa:	4639      	mov	r1, r7
 80107ac:	f7ef ff34 	bl	8000618 <__aeabi_dmul>
 80107b0:	ec41 0b10 	vmov	d0, r0, r1
 80107b4:	f7ff f8e0 	bl	800f978 <floor>
 80107b8:	4b7a      	ldr	r3, [pc, #488]	; (80109a4 <__kernel_rem_pio2+0x324>)
 80107ba:	ec51 0b10 	vmov	r0, r1, d0
 80107be:	2200      	movs	r2, #0
 80107c0:	f7ef ff2a 	bl	8000618 <__aeabi_dmul>
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	4630      	mov	r0, r6
 80107ca:	4639      	mov	r1, r7
 80107cc:	f7ef fd6c 	bl	80002a8 <__aeabi_dsub>
 80107d0:	460f      	mov	r7, r1
 80107d2:	4606      	mov	r6, r0
 80107d4:	f7f0 f9d0 	bl	8000b78 <__aeabi_d2iz>
 80107d8:	9002      	str	r0, [sp, #8]
 80107da:	f7ef feb3 	bl	8000544 <__aeabi_i2d>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4630      	mov	r0, r6
 80107e4:	4639      	mov	r1, r7
 80107e6:	f7ef fd5f 	bl	80002a8 <__aeabi_dsub>
 80107ea:	f1ba 0f00 	cmp.w	sl, #0
 80107ee:	4606      	mov	r6, r0
 80107f0:	460f      	mov	r7, r1
 80107f2:	dd6d      	ble.n	80108d0 <__kernel_rem_pio2+0x250>
 80107f4:	1e61      	subs	r1, r4, #1
 80107f6:	ab0c      	add	r3, sp, #48	; 0x30
 80107f8:	9d02      	ldr	r5, [sp, #8]
 80107fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107fe:	f1ca 0018 	rsb	r0, sl, #24
 8010802:	fa43 f200 	asr.w	r2, r3, r0
 8010806:	4415      	add	r5, r2
 8010808:	4082      	lsls	r2, r0
 801080a:	1a9b      	subs	r3, r3, r2
 801080c:	aa0c      	add	r2, sp, #48	; 0x30
 801080e:	9502      	str	r5, [sp, #8]
 8010810:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010814:	f1ca 0217 	rsb	r2, sl, #23
 8010818:	fa43 fb02 	asr.w	fp, r3, r2
 801081c:	f1bb 0f00 	cmp.w	fp, #0
 8010820:	dd65      	ble.n	80108ee <__kernel_rem_pio2+0x26e>
 8010822:	9b02      	ldr	r3, [sp, #8]
 8010824:	2200      	movs	r2, #0
 8010826:	3301      	adds	r3, #1
 8010828:	9302      	str	r3, [sp, #8]
 801082a:	4615      	mov	r5, r2
 801082c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010830:	4294      	cmp	r4, r2
 8010832:	f300 809f 	bgt.w	8010974 <__kernel_rem_pio2+0x2f4>
 8010836:	f1ba 0f00 	cmp.w	sl, #0
 801083a:	dd07      	ble.n	801084c <__kernel_rem_pio2+0x1cc>
 801083c:	f1ba 0f01 	cmp.w	sl, #1
 8010840:	f000 80c1 	beq.w	80109c6 <__kernel_rem_pio2+0x346>
 8010844:	f1ba 0f02 	cmp.w	sl, #2
 8010848:	f000 80c7 	beq.w	80109da <__kernel_rem_pio2+0x35a>
 801084c:	f1bb 0f02 	cmp.w	fp, #2
 8010850:	d14d      	bne.n	80108ee <__kernel_rem_pio2+0x26e>
 8010852:	4632      	mov	r2, r6
 8010854:	463b      	mov	r3, r7
 8010856:	4954      	ldr	r1, [pc, #336]	; (80109a8 <__kernel_rem_pio2+0x328>)
 8010858:	2000      	movs	r0, #0
 801085a:	f7ef fd25 	bl	80002a8 <__aeabi_dsub>
 801085e:	4606      	mov	r6, r0
 8010860:	460f      	mov	r7, r1
 8010862:	2d00      	cmp	r5, #0
 8010864:	d043      	beq.n	80108ee <__kernel_rem_pio2+0x26e>
 8010866:	4650      	mov	r0, sl
 8010868:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010998 <__kernel_rem_pio2+0x318>
 801086c:	f000 fa58 	bl	8010d20 <scalbn>
 8010870:	4630      	mov	r0, r6
 8010872:	4639      	mov	r1, r7
 8010874:	ec53 2b10 	vmov	r2, r3, d0
 8010878:	f7ef fd16 	bl	80002a8 <__aeabi_dsub>
 801087c:	4606      	mov	r6, r0
 801087e:	460f      	mov	r7, r1
 8010880:	e035      	b.n	80108ee <__kernel_rem_pio2+0x26e>
 8010882:	4b4a      	ldr	r3, [pc, #296]	; (80109ac <__kernel_rem_pio2+0x32c>)
 8010884:	2200      	movs	r2, #0
 8010886:	4630      	mov	r0, r6
 8010888:	4639      	mov	r1, r7
 801088a:	f7ef fec5 	bl	8000618 <__aeabi_dmul>
 801088e:	f7f0 f973 	bl	8000b78 <__aeabi_d2iz>
 8010892:	f7ef fe57 	bl	8000544 <__aeabi_i2d>
 8010896:	4602      	mov	r2, r0
 8010898:	460b      	mov	r3, r1
 801089a:	ec43 2b18 	vmov	d8, r2, r3
 801089e:	4b44      	ldr	r3, [pc, #272]	; (80109b0 <__kernel_rem_pio2+0x330>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	f7ef feb9 	bl	8000618 <__aeabi_dmul>
 80108a6:	4602      	mov	r2, r0
 80108a8:	460b      	mov	r3, r1
 80108aa:	4630      	mov	r0, r6
 80108ac:	4639      	mov	r1, r7
 80108ae:	f7ef fcfb 	bl	80002a8 <__aeabi_dsub>
 80108b2:	f7f0 f961 	bl	8000b78 <__aeabi_d2iz>
 80108b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80108ba:	f84b 0b04 	str.w	r0, [fp], #4
 80108be:	ec51 0b18 	vmov	r0, r1, d8
 80108c2:	f7ef fcf3 	bl	80002ac <__adddf3>
 80108c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80108ca:	4606      	mov	r6, r0
 80108cc:	460f      	mov	r7, r1
 80108ce:	e75b      	b.n	8010788 <__kernel_rem_pio2+0x108>
 80108d0:	d106      	bne.n	80108e0 <__kernel_rem_pio2+0x260>
 80108d2:	1e63      	subs	r3, r4, #1
 80108d4:	aa0c      	add	r2, sp, #48	; 0x30
 80108d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108da:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80108de:	e79d      	b.n	801081c <__kernel_rem_pio2+0x19c>
 80108e0:	4b34      	ldr	r3, [pc, #208]	; (80109b4 <__kernel_rem_pio2+0x334>)
 80108e2:	2200      	movs	r2, #0
 80108e4:	f7f0 f91e 	bl	8000b24 <__aeabi_dcmpge>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d140      	bne.n	801096e <__kernel_rem_pio2+0x2ee>
 80108ec:	4683      	mov	fp, r0
 80108ee:	2200      	movs	r2, #0
 80108f0:	2300      	movs	r3, #0
 80108f2:	4630      	mov	r0, r6
 80108f4:	4639      	mov	r1, r7
 80108f6:	f7f0 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	f000 80c1 	beq.w	8010a82 <__kernel_rem_pio2+0x402>
 8010900:	1e65      	subs	r5, r4, #1
 8010902:	462b      	mov	r3, r5
 8010904:	2200      	movs	r2, #0
 8010906:	9900      	ldr	r1, [sp, #0]
 8010908:	428b      	cmp	r3, r1
 801090a:	da6d      	bge.n	80109e8 <__kernel_rem_pio2+0x368>
 801090c:	2a00      	cmp	r2, #0
 801090e:	f000 808a 	beq.w	8010a26 <__kernel_rem_pio2+0x3a6>
 8010912:	ab0c      	add	r3, sp, #48	; 0x30
 8010914:	f1aa 0a18 	sub.w	sl, sl, #24
 8010918:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801091c:	2b00      	cmp	r3, #0
 801091e:	f000 80ae 	beq.w	8010a7e <__kernel_rem_pio2+0x3fe>
 8010922:	4650      	mov	r0, sl
 8010924:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010998 <__kernel_rem_pio2+0x318>
 8010928:	f000 f9fa 	bl	8010d20 <scalbn>
 801092c:	1c6b      	adds	r3, r5, #1
 801092e:	00da      	lsls	r2, r3, #3
 8010930:	9205      	str	r2, [sp, #20]
 8010932:	ec57 6b10 	vmov	r6, r7, d0
 8010936:	aa70      	add	r2, sp, #448	; 0x1c0
 8010938:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80109ac <__kernel_rem_pio2+0x32c>
 801093c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010940:	462c      	mov	r4, r5
 8010942:	f04f 0800 	mov.w	r8, #0
 8010946:	2c00      	cmp	r4, #0
 8010948:	f280 80d4 	bge.w	8010af4 <__kernel_rem_pio2+0x474>
 801094c:	462c      	mov	r4, r5
 801094e:	2c00      	cmp	r4, #0
 8010950:	f2c0 8102 	blt.w	8010b58 <__kernel_rem_pio2+0x4d8>
 8010954:	4b18      	ldr	r3, [pc, #96]	; (80109b8 <__kernel_rem_pio2+0x338>)
 8010956:	461e      	mov	r6, r3
 8010958:	ab70      	add	r3, sp, #448	; 0x1c0
 801095a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801095e:	1b2b      	subs	r3, r5, r4
 8010960:	f04f 0900 	mov.w	r9, #0
 8010964:	f04f 0a00 	mov.w	sl, #0
 8010968:	2700      	movs	r7, #0
 801096a:	9306      	str	r3, [sp, #24]
 801096c:	e0e6      	b.n	8010b3c <__kernel_rem_pio2+0x4bc>
 801096e:	f04f 0b02 	mov.w	fp, #2
 8010972:	e756      	b.n	8010822 <__kernel_rem_pio2+0x1a2>
 8010974:	f8d8 3000 	ldr.w	r3, [r8]
 8010978:	bb05      	cbnz	r5, 80109bc <__kernel_rem_pio2+0x33c>
 801097a:	b123      	cbz	r3, 8010986 <__kernel_rem_pio2+0x306>
 801097c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010980:	f8c8 3000 	str.w	r3, [r8]
 8010984:	2301      	movs	r3, #1
 8010986:	3201      	adds	r2, #1
 8010988:	f108 0804 	add.w	r8, r8, #4
 801098c:	461d      	mov	r5, r3
 801098e:	e74f      	b.n	8010830 <__kernel_rem_pio2+0x1b0>
	...
 801099c:	3ff00000 	.word	0x3ff00000
 80109a0:	08012b70 	.word	0x08012b70
 80109a4:	40200000 	.word	0x40200000
 80109a8:	3ff00000 	.word	0x3ff00000
 80109ac:	3e700000 	.word	0x3e700000
 80109b0:	41700000 	.word	0x41700000
 80109b4:	3fe00000 	.word	0x3fe00000
 80109b8:	08012b30 	.word	0x08012b30
 80109bc:	1acb      	subs	r3, r1, r3
 80109be:	f8c8 3000 	str.w	r3, [r8]
 80109c2:	462b      	mov	r3, r5
 80109c4:	e7df      	b.n	8010986 <__kernel_rem_pio2+0x306>
 80109c6:	1e62      	subs	r2, r4, #1
 80109c8:	ab0c      	add	r3, sp, #48	; 0x30
 80109ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80109d2:	a90c      	add	r1, sp, #48	; 0x30
 80109d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80109d8:	e738      	b.n	801084c <__kernel_rem_pio2+0x1cc>
 80109da:	1e62      	subs	r2, r4, #1
 80109dc:	ab0c      	add	r3, sp, #48	; 0x30
 80109de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80109e6:	e7f4      	b.n	80109d2 <__kernel_rem_pio2+0x352>
 80109e8:	a90c      	add	r1, sp, #48	; 0x30
 80109ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80109ee:	3b01      	subs	r3, #1
 80109f0:	430a      	orrs	r2, r1
 80109f2:	e788      	b.n	8010906 <__kernel_rem_pio2+0x286>
 80109f4:	3301      	adds	r3, #1
 80109f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80109fa:	2900      	cmp	r1, #0
 80109fc:	d0fa      	beq.n	80109f4 <__kernel_rem_pio2+0x374>
 80109fe:	9a08      	ldr	r2, [sp, #32]
 8010a00:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010a04:	446a      	add	r2, sp
 8010a06:	3a98      	subs	r2, #152	; 0x98
 8010a08:	9208      	str	r2, [sp, #32]
 8010a0a:	9a06      	ldr	r2, [sp, #24]
 8010a0c:	a920      	add	r1, sp, #128	; 0x80
 8010a0e:	18a2      	adds	r2, r4, r2
 8010a10:	18e3      	adds	r3, r4, r3
 8010a12:	f104 0801 	add.w	r8, r4, #1
 8010a16:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010a1a:	9302      	str	r3, [sp, #8]
 8010a1c:	9b02      	ldr	r3, [sp, #8]
 8010a1e:	4543      	cmp	r3, r8
 8010a20:	da04      	bge.n	8010a2c <__kernel_rem_pio2+0x3ac>
 8010a22:	461c      	mov	r4, r3
 8010a24:	e6a2      	b.n	801076c <__kernel_rem_pio2+0xec>
 8010a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e7e4      	b.n	80109f6 <__kernel_rem_pio2+0x376>
 8010a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a2e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010a32:	f7ef fd87 	bl	8000544 <__aeabi_i2d>
 8010a36:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a3c:	46ab      	mov	fp, r5
 8010a3e:	461c      	mov	r4, r3
 8010a40:	f04f 0900 	mov.w	r9, #0
 8010a44:	2600      	movs	r6, #0
 8010a46:	2700      	movs	r7, #0
 8010a48:	9b05      	ldr	r3, [sp, #20]
 8010a4a:	4599      	cmp	r9, r3
 8010a4c:	dd06      	ble.n	8010a5c <__kernel_rem_pio2+0x3dc>
 8010a4e:	9b08      	ldr	r3, [sp, #32]
 8010a50:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010a54:	f108 0801 	add.w	r8, r8, #1
 8010a58:	9308      	str	r3, [sp, #32]
 8010a5a:	e7df      	b.n	8010a1c <__kernel_rem_pio2+0x39c>
 8010a5c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010a60:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010a64:	f7ef fdd8 	bl	8000618 <__aeabi_dmul>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	4639      	mov	r1, r7
 8010a70:	f7ef fc1c 	bl	80002ac <__adddf3>
 8010a74:	f109 0901 	add.w	r9, r9, #1
 8010a78:	4606      	mov	r6, r0
 8010a7a:	460f      	mov	r7, r1
 8010a7c:	e7e4      	b.n	8010a48 <__kernel_rem_pio2+0x3c8>
 8010a7e:	3d01      	subs	r5, #1
 8010a80:	e747      	b.n	8010912 <__kernel_rem_pio2+0x292>
 8010a82:	ec47 6b10 	vmov	d0, r6, r7
 8010a86:	f1ca 0000 	rsb	r0, sl, #0
 8010a8a:	f000 f949 	bl	8010d20 <scalbn>
 8010a8e:	ec57 6b10 	vmov	r6, r7, d0
 8010a92:	4ba0      	ldr	r3, [pc, #640]	; (8010d14 <__kernel_rem_pio2+0x694>)
 8010a94:	ee10 0a10 	vmov	r0, s0
 8010a98:	2200      	movs	r2, #0
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	f7f0 f842 	bl	8000b24 <__aeabi_dcmpge>
 8010aa0:	b1f8      	cbz	r0, 8010ae2 <__kernel_rem_pio2+0x462>
 8010aa2:	4b9d      	ldr	r3, [pc, #628]	; (8010d18 <__kernel_rem_pio2+0x698>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	4639      	mov	r1, r7
 8010aaa:	f7ef fdb5 	bl	8000618 <__aeabi_dmul>
 8010aae:	f7f0 f863 	bl	8000b78 <__aeabi_d2iz>
 8010ab2:	4680      	mov	r8, r0
 8010ab4:	f7ef fd46 	bl	8000544 <__aeabi_i2d>
 8010ab8:	4b96      	ldr	r3, [pc, #600]	; (8010d14 <__kernel_rem_pio2+0x694>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	f7ef fdac 	bl	8000618 <__aeabi_dmul>
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f7ef fbee 	bl	80002a8 <__aeabi_dsub>
 8010acc:	f7f0 f854 	bl	8000b78 <__aeabi_d2iz>
 8010ad0:	1c65      	adds	r5, r4, #1
 8010ad2:	ab0c      	add	r3, sp, #48	; 0x30
 8010ad4:	f10a 0a18 	add.w	sl, sl, #24
 8010ad8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010adc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010ae0:	e71f      	b.n	8010922 <__kernel_rem_pio2+0x2a2>
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	4639      	mov	r1, r7
 8010ae6:	f7f0 f847 	bl	8000b78 <__aeabi_d2iz>
 8010aea:	ab0c      	add	r3, sp, #48	; 0x30
 8010aec:	4625      	mov	r5, r4
 8010aee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010af2:	e716      	b.n	8010922 <__kernel_rem_pio2+0x2a2>
 8010af4:	ab0c      	add	r3, sp, #48	; 0x30
 8010af6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010afa:	f7ef fd23 	bl	8000544 <__aeabi_i2d>
 8010afe:	4632      	mov	r2, r6
 8010b00:	463b      	mov	r3, r7
 8010b02:	f7ef fd89 	bl	8000618 <__aeabi_dmul>
 8010b06:	4642      	mov	r2, r8
 8010b08:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010b0c:	464b      	mov	r3, r9
 8010b0e:	4630      	mov	r0, r6
 8010b10:	4639      	mov	r1, r7
 8010b12:	f7ef fd81 	bl	8000618 <__aeabi_dmul>
 8010b16:	3c01      	subs	r4, #1
 8010b18:	4606      	mov	r6, r0
 8010b1a:	460f      	mov	r7, r1
 8010b1c:	e713      	b.n	8010946 <__kernel_rem_pio2+0x2c6>
 8010b1e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010b22:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010b26:	f7ef fd77 	bl	8000618 <__aeabi_dmul>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	4648      	mov	r0, r9
 8010b30:	4651      	mov	r1, sl
 8010b32:	f7ef fbbb 	bl	80002ac <__adddf3>
 8010b36:	3701      	adds	r7, #1
 8010b38:	4681      	mov	r9, r0
 8010b3a:	468a      	mov	sl, r1
 8010b3c:	9b00      	ldr	r3, [sp, #0]
 8010b3e:	429f      	cmp	r7, r3
 8010b40:	dc02      	bgt.n	8010b48 <__kernel_rem_pio2+0x4c8>
 8010b42:	9b06      	ldr	r3, [sp, #24]
 8010b44:	429f      	cmp	r7, r3
 8010b46:	ddea      	ble.n	8010b1e <__kernel_rem_pio2+0x49e>
 8010b48:	9a06      	ldr	r2, [sp, #24]
 8010b4a:	ab48      	add	r3, sp, #288	; 0x120
 8010b4c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010b50:	e9c6 9a00 	strd	r9, sl, [r6]
 8010b54:	3c01      	subs	r4, #1
 8010b56:	e6fa      	b.n	801094e <__kernel_rem_pio2+0x2ce>
 8010b58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	dc0b      	bgt.n	8010b76 <__kernel_rem_pio2+0x4f6>
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	dc39      	bgt.n	8010bd6 <__kernel_rem_pio2+0x556>
 8010b62:	d05d      	beq.n	8010c20 <__kernel_rem_pio2+0x5a0>
 8010b64:	9b02      	ldr	r3, [sp, #8]
 8010b66:	f003 0007 	and.w	r0, r3, #7
 8010b6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010b6e:	ecbd 8b02 	vpop	{d8}
 8010b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010b78:	2b03      	cmp	r3, #3
 8010b7a:	d1f3      	bne.n	8010b64 <__kernel_rem_pio2+0x4e4>
 8010b7c:	9b05      	ldr	r3, [sp, #20]
 8010b7e:	9500      	str	r5, [sp, #0]
 8010b80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010b84:	eb0d 0403 	add.w	r4, sp, r3
 8010b88:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010b8c:	46a2      	mov	sl, r4
 8010b8e:	9b00      	ldr	r3, [sp, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f1aa 0a08 	sub.w	sl, sl, #8
 8010b96:	dc69      	bgt.n	8010c6c <__kernel_rem_pio2+0x5ec>
 8010b98:	46aa      	mov	sl, r5
 8010b9a:	f1ba 0f01 	cmp.w	sl, #1
 8010b9e:	f1a4 0408 	sub.w	r4, r4, #8
 8010ba2:	f300 8083 	bgt.w	8010cac <__kernel_rem_pio2+0x62c>
 8010ba6:	9c05      	ldr	r4, [sp, #20]
 8010ba8:	ab48      	add	r3, sp, #288	; 0x120
 8010baa:	441c      	add	r4, r3
 8010bac:	2000      	movs	r0, #0
 8010bae:	2100      	movs	r1, #0
 8010bb0:	2d01      	cmp	r5, #1
 8010bb2:	f300 809a 	bgt.w	8010cea <__kernel_rem_pio2+0x66a>
 8010bb6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010bba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010bbe:	f1bb 0f00 	cmp.w	fp, #0
 8010bc2:	f040 8098 	bne.w	8010cf6 <__kernel_rem_pio2+0x676>
 8010bc6:	9b04      	ldr	r3, [sp, #16]
 8010bc8:	e9c3 7800 	strd	r7, r8, [r3]
 8010bcc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010bd0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010bd4:	e7c6      	b.n	8010b64 <__kernel_rem_pio2+0x4e4>
 8010bd6:	9e05      	ldr	r6, [sp, #20]
 8010bd8:	ab48      	add	r3, sp, #288	; 0x120
 8010bda:	441e      	add	r6, r3
 8010bdc:	462c      	mov	r4, r5
 8010bde:	2000      	movs	r0, #0
 8010be0:	2100      	movs	r1, #0
 8010be2:	2c00      	cmp	r4, #0
 8010be4:	da33      	bge.n	8010c4e <__kernel_rem_pio2+0x5ce>
 8010be6:	f1bb 0f00 	cmp.w	fp, #0
 8010bea:	d036      	beq.n	8010c5a <__kernel_rem_pio2+0x5da>
 8010bec:	4602      	mov	r2, r0
 8010bee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bf2:	9c04      	ldr	r4, [sp, #16]
 8010bf4:	e9c4 2300 	strd	r2, r3, [r4]
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010c00:	f7ef fb52 	bl	80002a8 <__aeabi_dsub>
 8010c04:	ae4a      	add	r6, sp, #296	; 0x128
 8010c06:	2401      	movs	r4, #1
 8010c08:	42a5      	cmp	r5, r4
 8010c0a:	da29      	bge.n	8010c60 <__kernel_rem_pio2+0x5e0>
 8010c0c:	f1bb 0f00 	cmp.w	fp, #0
 8010c10:	d002      	beq.n	8010c18 <__kernel_rem_pio2+0x598>
 8010c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c16:	4619      	mov	r1, r3
 8010c18:	9b04      	ldr	r3, [sp, #16]
 8010c1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010c1e:	e7a1      	b.n	8010b64 <__kernel_rem_pio2+0x4e4>
 8010c20:	9c05      	ldr	r4, [sp, #20]
 8010c22:	ab48      	add	r3, sp, #288	; 0x120
 8010c24:	441c      	add	r4, r3
 8010c26:	2000      	movs	r0, #0
 8010c28:	2100      	movs	r1, #0
 8010c2a:	2d00      	cmp	r5, #0
 8010c2c:	da09      	bge.n	8010c42 <__kernel_rem_pio2+0x5c2>
 8010c2e:	f1bb 0f00 	cmp.w	fp, #0
 8010c32:	d002      	beq.n	8010c3a <__kernel_rem_pio2+0x5ba>
 8010c34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c38:	4619      	mov	r1, r3
 8010c3a:	9b04      	ldr	r3, [sp, #16]
 8010c3c:	e9c3 0100 	strd	r0, r1, [r3]
 8010c40:	e790      	b.n	8010b64 <__kernel_rem_pio2+0x4e4>
 8010c42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c46:	f7ef fb31 	bl	80002ac <__adddf3>
 8010c4a:	3d01      	subs	r5, #1
 8010c4c:	e7ed      	b.n	8010c2a <__kernel_rem_pio2+0x5aa>
 8010c4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010c52:	f7ef fb2b 	bl	80002ac <__adddf3>
 8010c56:	3c01      	subs	r4, #1
 8010c58:	e7c3      	b.n	8010be2 <__kernel_rem_pio2+0x562>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	e7c8      	b.n	8010bf2 <__kernel_rem_pio2+0x572>
 8010c60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010c64:	f7ef fb22 	bl	80002ac <__adddf3>
 8010c68:	3401      	adds	r4, #1
 8010c6a:	e7cd      	b.n	8010c08 <__kernel_rem_pio2+0x588>
 8010c6c:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010c74:	9b00      	ldr	r3, [sp, #0]
 8010c76:	3b01      	subs	r3, #1
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	4632      	mov	r2, r6
 8010c7c:	463b      	mov	r3, r7
 8010c7e:	4640      	mov	r0, r8
 8010c80:	4649      	mov	r1, r9
 8010c82:	f7ef fb13 	bl	80002ac <__adddf3>
 8010c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4640      	mov	r0, r8
 8010c90:	4649      	mov	r1, r9
 8010c92:	f7ef fb09 	bl	80002a8 <__aeabi_dsub>
 8010c96:	4632      	mov	r2, r6
 8010c98:	463b      	mov	r3, r7
 8010c9a:	f7ef fb07 	bl	80002ac <__adddf3>
 8010c9e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010ca2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010ca6:	ed8a 7b00 	vstr	d7, [sl]
 8010caa:	e770      	b.n	8010b8e <__kernel_rem_pio2+0x50e>
 8010cac:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010cb0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	4632      	mov	r2, r6
 8010cb8:	463b      	mov	r3, r7
 8010cba:	4649      	mov	r1, r9
 8010cbc:	f7ef faf6 	bl	80002ac <__adddf3>
 8010cc0:	e9cd 0100 	strd	r0, r1, [sp]
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4640      	mov	r0, r8
 8010cca:	4649      	mov	r1, r9
 8010ccc:	f7ef faec 	bl	80002a8 <__aeabi_dsub>
 8010cd0:	4632      	mov	r2, r6
 8010cd2:	463b      	mov	r3, r7
 8010cd4:	f7ef faea 	bl	80002ac <__adddf3>
 8010cd8:	ed9d 7b00 	vldr	d7, [sp]
 8010cdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ce0:	ed84 7b00 	vstr	d7, [r4]
 8010ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ce8:	e757      	b.n	8010b9a <__kernel_rem_pio2+0x51a>
 8010cea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010cee:	f7ef fadd 	bl	80002ac <__adddf3>
 8010cf2:	3d01      	subs	r5, #1
 8010cf4:	e75c      	b.n	8010bb0 <__kernel_rem_pio2+0x530>
 8010cf6:	9b04      	ldr	r3, [sp, #16]
 8010cf8:	9a04      	ldr	r2, [sp, #16]
 8010cfa:	601f      	str	r7, [r3, #0]
 8010cfc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010d00:	605c      	str	r4, [r3, #4]
 8010d02:	609d      	str	r5, [r3, #8]
 8010d04:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010d08:	60d3      	str	r3, [r2, #12]
 8010d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d0e:	6110      	str	r0, [r2, #16]
 8010d10:	6153      	str	r3, [r2, #20]
 8010d12:	e727      	b.n	8010b64 <__kernel_rem_pio2+0x4e4>
 8010d14:	41700000 	.word	0x41700000
 8010d18:	3e700000 	.word	0x3e700000
 8010d1c:	00000000 	.word	0x00000000

08010d20 <scalbn>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	ec55 4b10 	vmov	r4, r5, d0
 8010d26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	b999      	cbnz	r1, 8010d58 <scalbn+0x38>
 8010d30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d34:	4323      	orrs	r3, r4
 8010d36:	d03f      	beq.n	8010db8 <scalbn+0x98>
 8010d38:	4b35      	ldr	r3, [pc, #212]	; (8010e10 <scalbn+0xf0>)
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	ee10 0a10 	vmov	r0, s0
 8010d40:	2200      	movs	r2, #0
 8010d42:	f7ef fc69 	bl	8000618 <__aeabi_dmul>
 8010d46:	4b33      	ldr	r3, [pc, #204]	; (8010e14 <scalbn+0xf4>)
 8010d48:	429e      	cmp	r6, r3
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	460d      	mov	r5, r1
 8010d4e:	da10      	bge.n	8010d72 <scalbn+0x52>
 8010d50:	a327      	add	r3, pc, #156	; (adr r3, 8010df0 <scalbn+0xd0>)
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	e01f      	b.n	8010d98 <scalbn+0x78>
 8010d58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010d5c:	4291      	cmp	r1, r2
 8010d5e:	d10c      	bne.n	8010d7a <scalbn+0x5a>
 8010d60:	ee10 2a10 	vmov	r2, s0
 8010d64:	4620      	mov	r0, r4
 8010d66:	4629      	mov	r1, r5
 8010d68:	f7ef faa0 	bl	80002ac <__adddf3>
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	460d      	mov	r5, r1
 8010d70:	e022      	b.n	8010db8 <scalbn+0x98>
 8010d72:	460b      	mov	r3, r1
 8010d74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010d78:	3936      	subs	r1, #54	; 0x36
 8010d7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010d7e:	4296      	cmp	r6, r2
 8010d80:	dd0d      	ble.n	8010d9e <scalbn+0x7e>
 8010d82:	2d00      	cmp	r5, #0
 8010d84:	a11c      	add	r1, pc, #112	; (adr r1, 8010df8 <scalbn+0xd8>)
 8010d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d8a:	da02      	bge.n	8010d92 <scalbn+0x72>
 8010d8c:	a11c      	add	r1, pc, #112	; (adr r1, 8010e00 <scalbn+0xe0>)
 8010d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d92:	a319      	add	r3, pc, #100	; (adr r3, 8010df8 <scalbn+0xd8>)
 8010d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d98:	f7ef fc3e 	bl	8000618 <__aeabi_dmul>
 8010d9c:	e7e6      	b.n	8010d6c <scalbn+0x4c>
 8010d9e:	1872      	adds	r2, r6, r1
 8010da0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010da4:	428a      	cmp	r2, r1
 8010da6:	dcec      	bgt.n	8010d82 <scalbn+0x62>
 8010da8:	2a00      	cmp	r2, #0
 8010daa:	dd08      	ble.n	8010dbe <scalbn+0x9e>
 8010dac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010db0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010db4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010db8:	ec45 4b10 	vmov	d0, r4, r5
 8010dbc:	bd70      	pop	{r4, r5, r6, pc}
 8010dbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010dc2:	da08      	bge.n	8010dd6 <scalbn+0xb6>
 8010dc4:	2d00      	cmp	r5, #0
 8010dc6:	a10a      	add	r1, pc, #40	; (adr r1, 8010df0 <scalbn+0xd0>)
 8010dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dcc:	dac0      	bge.n	8010d50 <scalbn+0x30>
 8010dce:	a10e      	add	r1, pc, #56	; (adr r1, 8010e08 <scalbn+0xe8>)
 8010dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dd4:	e7bc      	b.n	8010d50 <scalbn+0x30>
 8010dd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010dda:	3236      	adds	r2, #54	; 0x36
 8010ddc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010de0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010de4:	4620      	mov	r0, r4
 8010de6:	4b0c      	ldr	r3, [pc, #48]	; (8010e18 <scalbn+0xf8>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	e7d5      	b.n	8010d98 <scalbn+0x78>
 8010dec:	f3af 8000 	nop.w
 8010df0:	c2f8f359 	.word	0xc2f8f359
 8010df4:	01a56e1f 	.word	0x01a56e1f
 8010df8:	8800759c 	.word	0x8800759c
 8010dfc:	7e37e43c 	.word	0x7e37e43c
 8010e00:	8800759c 	.word	0x8800759c
 8010e04:	fe37e43c 	.word	0xfe37e43c
 8010e08:	c2f8f359 	.word	0xc2f8f359
 8010e0c:	81a56e1f 	.word	0x81a56e1f
 8010e10:	43500000 	.word	0x43500000
 8010e14:	ffff3cb0 	.word	0xffff3cb0
 8010e18:	3c900000 	.word	0x3c900000

08010e1c <_init>:
 8010e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e1e:	bf00      	nop
 8010e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e22:	bc08      	pop	{r3}
 8010e24:	469e      	mov	lr, r3
 8010e26:	4770      	bx	lr

08010e28 <_fini>:
 8010e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e2a:	bf00      	nop
 8010e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e2e:	bc08      	pop	{r3}
 8010e30:	469e      	mov	lr, r3
 8010e32:	4770      	bx	lr
