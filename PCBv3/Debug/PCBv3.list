
PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08010e98  08010e98  00020e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012be0  08012be0  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08012be0  08012be0  00022be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012be8  08012be8  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012be8  08012be8  00022be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bec  08012bec  00022bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08012bf0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000210  08012e00  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20000ac8  08012e00  00030ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015eb0  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038db  00000000  00000000  00046133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00049a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f05  00000000  00000000  0004adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df18  00000000  00000000  0004bcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b967  00000000  00000000  00069bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8d33  00000000  00000000  00085534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bc0  00000000  00000000  0012e268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00134e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e7c 	.word	0x08010e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010e7c 	.word	0x08010e7c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <get_lat>:

/*
 * Function to extract latitude from a NMEA GGA sentence
 */
double get_lat(char *gga)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0a6      	sub	sp, #152	; 0x98
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	double latitude = 0.0;
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	// Create a copy of the input string to avoid modifying the original
	char gga_cpy[128];
	strncpy(gga_cpy, gga, 128);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	f00b f88d 	bl	800c14c <strncpy>

	// Use strtok to tokenize the copied string using ","
	char *token = strtok(gga_cpy, ",");
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4919      	ldr	r1, [pc, #100]	; (800109c <get_lat+0x8c>)
 8001038:	4618      	mov	r0, r3
 800103a:	f00b f89b 	bl	800c174 <strtok>
 800103e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	// Iterate through the tokens
	while (token != NULL)
 8001042:	e01b      	b.n	800107c <get_lat+0x6c>
	{
		// Check if the token is "N" (North) or "S" (South)
		if ((strcmp(token, "N") == 0) || (strcmp(token, "S") == 0))
 8001044:	4916      	ldr	r1, [pc, #88]	; (80010a0 <get_lat+0x90>)
 8001046:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800104a:	f7ff f8c1 	bl	80001d0 <strcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <get_lat+0x74>
 8001054:	4913      	ldr	r1, [pc, #76]	; (80010a4 <get_lat+0x94>)
 8001056:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800105a:	f7ff f8b9 	bl	80001d0 <strcmp>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00f      	beq.n	8001084 <get_lat+0x74>
			break;
		}
		else
		{
			// Convert the token to a floating-point number
			latitude = atof(token);
 8001064:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001068:	f009 fa13 	bl	800a492 <atof>
 800106c:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
		}
		// Move to the next token
		token = strtok(NULL, ",");
 8001070:	490a      	ldr	r1, [pc, #40]	; (800109c <get_lat+0x8c>)
 8001072:	2000      	movs	r0, #0
 8001074:	f00b f87e 	bl	800c174 <strtok>
 8001078:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	while (token != NULL)
 800107c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1df      	bne.n	8001044 <get_lat+0x34>
	}

		return latitude;
 8001084:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001088:	ec43 2b17 	vmov	d7, r2, r3
}
 800108c:	eeb0 0a47 	vmov.f32	s0, s14
 8001090:	eef0 0a67 	vmov.f32	s1, s15
 8001094:	3798      	adds	r7, #152	; 0x98
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08010e98 	.word	0x08010e98
 80010a0:	08010e9c 	.word	0x08010e9c
 80010a4:	08010ea0 	.word	0x08010ea0

080010a8 <get_lon>:

/*
 * Function to extract longitude from a NMEA GGA sentence
 */
double get_lon(char *gga)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0a6      	sub	sp, #152	; 0x98
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	double longitude = 0.0;
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	// Create a copy of the input string to avoid modifying the original
	char gga_cpy[128];
	strncpy(gga_cpy, gga, 128);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00b f841 	bl	800c14c <strncpy>

	// Use strtok to tokenize the copied string using ","
	char *token = strtok(gga_cpy, ",");
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4919      	ldr	r1, [pc, #100]	; (8001134 <get_lon+0x8c>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00b f84f 	bl	800c174 <strtok>
 80010d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	// Iterate through the tokens
	while (token != NULL)
 80010da:	e01b      	b.n	8001114 <get_lon+0x6c>
	{
		// Check if the token is "W" (West) or "E" (East)
		if ((strcmp(token, "W") == 0) || (strcmp(token, "E") == 0))
 80010dc:	4916      	ldr	r1, [pc, #88]	; (8001138 <get_lon+0x90>)
 80010de:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80010e2:	f7ff f875 	bl	80001d0 <strcmp>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d017      	beq.n	800111c <get_lon+0x74>
 80010ec:	4913      	ldr	r1, [pc, #76]	; (800113c <get_lon+0x94>)
 80010ee:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80010f2:	f7ff f86d 	bl	80001d0 <strcmp>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <get_lon+0x74>
			break;
		}
		else
		{
			// Convert the token to a floating-point number
			longitude = atof(token);
 80010fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001100:	f009 f9c7 	bl	800a492 <atof>
 8001104:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
		}
		// Move to the next token
		token = strtok(NULL, ",");
 8001108:	490a      	ldr	r1, [pc, #40]	; (8001134 <get_lon+0x8c>)
 800110a:	2000      	movs	r0, #0
 800110c:	f00b f832 	bl	800c174 <strtok>
 8001110:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	while (token != NULL)
 8001114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1df      	bne.n	80010dc <get_lon+0x34>
	}

		return longitude;
 800111c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001120:	ec43 2b17 	vmov	d7, r2, r3
}
 8001124:	eeb0 0a47 	vmov.f32	s0, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	3798      	adds	r7, #152	; 0x98
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	08010e98 	.word	0x08010e98
 8001138:	08010ea4 	.word	0x08010ea4
 800113c:	08010ea8 	.word	0x08010ea8

08001140 <get_time>:

void get_time(char *gga, char *time)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af02      	add	r7, sp, #8
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	int hours, minutes, seconds;
	char *comma1 = strchr(gga, ',');
 800114a:	212c      	movs	r1, #44	; 0x2c
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f00a ffde 	bl	800c10e <strchr>
 8001152:	61f8      	str	r0, [r7, #28]
	char *comma2 = strchr(comma1 + 1, ',');
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	212c      	movs	r1, #44	; 0x2c
 800115a:	4618      	mov	r0, r3
 800115c:	f00a ffd7 	bl	800c10e <strchr>
 8001160:	61b8      	str	r0, [r7, #24]

	size_t length = comma2 - (comma1 + 1);
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]

	strncpy(time, comma1 + 1, length);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	3301      	adds	r3, #1
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4619      	mov	r1, r3
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f00a ffe9 	bl	800c14c <strncpy>
	time[length] = '\0';
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

	sscanf(time, "%2d%2d%2d", &hours, &minutes, &seconds);
 8001184:	f107 010c 	add.w	r1, r7, #12
 8001188:	f107 0210 	add.w	r2, r7, #16
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	460b      	mov	r3, r1
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <get_time+0x88>)
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f00a ff40 	bl	800c01c <siscanf>

	hours -= 5;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	3b05      	subs	r3, #5
 80011a0:	613b      	str	r3, [r7, #16]

	if (hours < 0) {
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	da02      	bge.n	80011ae <get_time+0x6e>
		hours += 24;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3318      	adds	r3, #24
 80011ac:	613b      	str	r3, [r7, #16]
	}

	sprintf(time, "%02d:%02d:%02d\n", hours, minutes, seconds);
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68f9      	ldr	r1, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	460b      	mov	r3, r1
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <get_time+0x8c>)
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f00a ff0e 	bl	800bfdc <siprintf>
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	08010eac 	.word	0x08010eac
 80011cc:	08010eb8 	.word	0x08010eb8

080011d0 <get_alt>:

double get_alt(char *gga)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a6      	sub	sp, #152	; 0x98
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	double altitude = 0.0;
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	char gga_cpy[128];
	strncpy(gga_cpy, gga, 128);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00a ffad 	bl	800c14c <strncpy>

	char *token = strtok(gga_cpy, ",");
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	4916      	ldr	r1, [pc, #88]	; (8001250 <get_alt+0x80>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00a ffbb 	bl	800c174 <strtok>
 80011fe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	while (token != NULL)
 8001202:	e013      	b.n	800122c <get_alt+0x5c>
	{
		if (strcmp(token, "M") == 0)
 8001204:	4913      	ldr	r1, [pc, #76]	; (8001254 <get_alt+0x84>)
 8001206:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800120a:	f7fe ffe1 	bl	80001d0 <strcmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d010      	beq.n	8001236 <get_alt+0x66>
		{
			break;
		}
		else
		{
			altitude = atof(token);
 8001214:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001218:	f009 f93b 	bl	800a492 <atof>
 800121c:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
		}
			token = strtok(NULL, ",");
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <get_alt+0x80>)
 8001222:	2000      	movs	r0, #0
 8001224:	f00a ffa6 	bl	800c174 <strtok>
 8001228:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	while (token != NULL)
 800122c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1e7      	bne.n	8001204 <get_alt+0x34>
 8001234:	e000      	b.n	8001238 <get_alt+0x68>
			break;
 8001236:	bf00      	nop
	}

		return altitude;
 8001238:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800123c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001240:	eeb0 0a47 	vmov.f32	s0, s14
 8001244:	eef0 0a67 	vmov.f32	s1, s15
 8001248:	3798      	adds	r7, #152	; 0x98
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	08010e98 	.word	0x08010e98
 8001254:	08010ec8 	.word	0x08010ec8

08001258 <ddm2dd>:

double ddm2dd(double ddm) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	ed87 0b00 	vstr	d0, [r7]
    double degrees = floor(ddm / 100.0);
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <ddm2dd+0x8c>)
 8001268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800126c:	f7ff fafe 	bl	800086c <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	ec43 2b17 	vmov	d7, r2, r3
 8001278:	eeb0 0a47 	vmov.f32	s0, s14
 800127c:	eef0 0a67 	vmov.f32	s1, s15
 8001280:	f00e fbaa 	bl	800f9d8 <floor>
 8001284:	ed87 0b06 	vstr	d0, [r7, #24]
    double minutes = ddm - degrees * 100.0;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <ddm2dd+0x8c>)
 800128e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001292:	f7ff f9c1 	bl	8000618 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129e:	f7ff f803 	bl	80002a8 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double dd = degrees + minutes / 60.0;
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <ddm2dd+0x90>)
 80012b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b4:	f7ff fada 	bl	800086c <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c0:	f7fe fff4 	bl	80002ac <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return dd;
 80012cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80012d4:	eeb0 0a47 	vmov.f32	s0, s14
 80012d8:	eef0 0a67 	vmov.f32	s1, s15
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40590000 	.word	0x40590000
 80012e8:	404e0000 	.word	0x404e0000
 80012ec:	00000000 	.word	0x00000000

080012f0 <degreesToRadians>:

// Function to convert degrees to radians
double degreesToRadians(double degrees) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	ed87 0b00 	vstr	d0, [r7]
    return degrees * M_PI / 180.0;
 80012fa:	a30e      	add	r3, pc, #56	; (adr r3, 8001334 <degreesToRadians+0x44>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001304:	f7ff f988 	bl	8000618 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <degreesToRadians+0x40>)
 8001316:	f7ff faa9 	bl	800086c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001322:	eeb0 0a47 	vmov.f32	s0, s14
 8001326:	eef0 0a67 	vmov.f32	s1, s15
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40668000 	.word	0x40668000
 8001334:	54442d18 	.word	0x54442d18
 8001338:	400921fb 	.word	0x400921fb
 800133c:	00000000 	.word	0x00000000

08001340 <calculateDistance>:

// Function to calculate the distance between two coordinates using Haversine formula
double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
 8001340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001344:	ed2d 8b02 	vpush	{d8}
 8001348:	b092      	sub	sp, #72	; 0x48
 800134a:	af00      	add	r7, sp, #0
 800134c:	ed87 0b06 	vstr	d0, [r7, #24]
 8001350:	ed87 1b04 	vstr	d1, [r7, #16]
 8001354:	ed87 2b02 	vstr	d2, [r7, #8]
 8001358:	ed87 3b00 	vstr	d3, [r7]
    // Convert latitude and longitude from degrees to radians
    lat1 = degreesToRadians(ddm2dd(lat1));
 800135c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001360:	f7ff ff7a 	bl	8001258 <ddm2dd>
 8001364:	eeb0 7a40 	vmov.f32	s14, s0
 8001368:	eef0 7a60 	vmov.f32	s15, s1
 800136c:	eeb0 0a47 	vmov.f32	s0, s14
 8001370:	eef0 0a67 	vmov.f32	s1, s15
 8001374:	f7ff ffbc 	bl	80012f0 <degreesToRadians>
 8001378:	ed87 0b06 	vstr	d0, [r7, #24]
    lon1 = degreesToRadians(ddm2dd(lon1));
 800137c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001380:	f7ff ff6a 	bl	8001258 <ddm2dd>
 8001384:	eeb0 7a40 	vmov.f32	s14, s0
 8001388:	eef0 7a60 	vmov.f32	s15, s1
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	f7ff ffac 	bl	80012f0 <degreesToRadians>
 8001398:	ed87 0b04 	vstr	d0, [r7, #16]
    lat2 = degreesToRadians(ddm2dd(lat2));
 800139c:	ed97 0b02 	vldr	d0, [r7, #8]
 80013a0:	f7ff ff5a 	bl	8001258 <ddm2dd>
 80013a4:	eeb0 7a40 	vmov.f32	s14, s0
 80013a8:	eef0 7a60 	vmov.f32	s15, s1
 80013ac:	eeb0 0a47 	vmov.f32	s0, s14
 80013b0:	eef0 0a67 	vmov.f32	s1, s15
 80013b4:	f7ff ff9c 	bl	80012f0 <degreesToRadians>
 80013b8:	ed87 0b02 	vstr	d0, [r7, #8]
    lon2 = degreesToRadians(ddm2dd(lon2));
 80013bc:	ed97 0b00 	vldr	d0, [r7]
 80013c0:	f7ff ff4a 	bl	8001258 <ddm2dd>
 80013c4:	eeb0 7a40 	vmov.f32	s14, s0
 80013c8:	eef0 7a60 	vmov.f32	s15, s1
 80013cc:	eeb0 0a47 	vmov.f32	s0, s14
 80013d0:	eef0 0a67 	vmov.f32	s1, s15
 80013d4:	f7ff ff8c 	bl	80012f0 <degreesToRadians>
 80013d8:	ed87 0b00 	vstr	d0, [r7]

    // Haversine formula
    double dlat = lat2 - lat1;
 80013dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e4:	f7fe ff60 	bl	80002a8 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double dlon = lon2 - lon1;
 80013f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f8:	f7fe ff56 	bl	80002a8 <__aeabi_dsub>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double a = sin(dlat/2) * sin(dlat/2) + cos(lat1) * cos(lat2) * sin(dlon/2) * sin(dlon/2);
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001410:	f7ff fa2c 	bl	800086c <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	ec43 2b17 	vmov	d7, r2, r3
 800141c:	eeb0 0a47 	vmov.f32	s0, s14
 8001420:	eef0 0a67 	vmov.f32	s1, s15
 8001424:	f00e f9a4 	bl	800f770 <sin>
 8001428:	ec55 4b10 	vmov	r4, r5, d0
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001434:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001438:	f7ff fa18 	bl	800086c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b17 	vmov	d7, r2, r3
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	f00e f990 	bl	800f770 <sin>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff f8de 	bl	8000618 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	ed97 0b06 	vldr	d0, [r7, #24]
 8001468:	f00e f92e 	bl	800f6c8 <cos>
 800146c:	ec59 8b10 	vmov	r8, r9, d0
 8001470:	ed97 0b02 	vldr	d0, [r7, #8]
 8001474:	f00e f928 	bl	800f6c8 <cos>
 8001478:	ec53 2b10 	vmov	r2, r3, d0
 800147c:	4640      	mov	r0, r8
 800147e:	4649      	mov	r1, r9
 8001480:	f7ff f8ca 	bl	8000618 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4690      	mov	r8, r2
 800148a:	4699      	mov	r9, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001494:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001498:	f7ff f9e8 	bl	800086c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	ec43 2b17 	vmov	d7, r2, r3
 80014a4:	eeb0 0a47 	vmov.f32	s0, s14
 80014a8:	eef0 0a67 	vmov.f32	s1, s15
 80014ac:	f00e f960 	bl	800f770 <sin>
 80014b0:	ec53 2b10 	vmov	r2, r3, d0
 80014b4:	4640      	mov	r0, r8
 80014b6:	4649      	mov	r1, r9
 80014b8:	f7ff f8ae 	bl	8000618 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4690      	mov	r8, r2
 80014c2:	4699      	mov	r9, r3
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014d0:	f7ff f9cc 	bl	800086c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b17 	vmov	d7, r2, r3
 80014dc:	eeb0 0a47 	vmov.f32	s0, s14
 80014e0:	eef0 0a67 	vmov.f32	s1, s15
 80014e4:	f00e f944 	bl	800f770 <sin>
 80014e8:	ec53 2b10 	vmov	r2, r3, d0
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7ff f892 	bl	8000618 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fed6 	bl	80002ac <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8001508:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800150c:	f00e f8ae 	bl	800f66c <sqrt>
 8001510:	eeb0 8a40 	vmov.f32	s16, s0
 8001514:	eef0 8a60 	vmov.f32	s17, s1
 8001518:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	4921      	ldr	r1, [pc, #132]	; (80015a8 <calculateDistance+0x268>)
 8001522:	f7fe fec1 	bl	80002a8 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	ec43 2b17 	vmov	d7, r2, r3
 800152e:	eeb0 0a47 	vmov.f32	s0, s14
 8001532:	eef0 0a67 	vmov.f32	s1, s15
 8001536:	f00e f899 	bl	800f66c <sqrt>
 800153a:	eeb0 7a40 	vmov.f32	s14, s0
 800153e:	eef0 7a60 	vmov.f32	s15, s1
 8001542:	eeb0 1a47 	vmov.f32	s2, s14
 8001546:	eef0 1a67 	vmov.f32	s3, s15
 800154a:	eeb0 0a48 	vmov.f32	s0, s16
 800154e:	eef0 0a68 	vmov.f32	s1, s17
 8001552:	f00e f889 	bl	800f668 <atan2>
 8001556:	ec51 0b10 	vmov	r0, r1, d0
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	f7fe fea5 	bl	80002ac <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double distance = RADIUS_OF_EARTH * c;
 800156a:	a30d      	add	r3, pc, #52	; (adr r3, 80015a0 <calculateDistance+0x260>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001574:	f7ff f850 	bl	8000618 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return distance;
 8001580:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001584:	ec43 2b17 	vmov	d7, r2, r3
}
 8001588:	eeb0 0a47 	vmov.f32	s0, s14
 800158c:	eef0 0a67 	vmov.f32	s1, s15
 8001590:	3748      	adds	r7, #72	; 0x48
 8001592:	46bd      	mov	sp, r7
 8001594:	ecbd 8b02 	vpop	{d8}
 8001598:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800159c:	f3af 8000 	nop.w
 80015a0:	00000000 	.word	0x00000000
 80015a4:	41584dae 	.word	0x41584dae
 80015a8:	3ff00000 	.word	0x3ff00000

080015ac <I2C_Start>:
//    -- Automatically generate a STOP condition after all bytes have been transmitted 
// Direction = 0: Master requests a write transfer
// Direction = 1: Master requests a read transfer
//=============================================================================== 

int8_t I2C_Start(I2C_TypeDef * I2Cx, uint32_t DevAddress, uint8_t Size, uint8_t Direction) {	
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	460b      	mov	r3, r1
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	4613      	mov	r3, r2
 80015c0:	71bb      	strb	r3, [r7, #6]
	
	// Direction = 0: Master requests a write transfer
	// Direction = 1: Master requests a read transfer
	
	uint32_t tmpreg = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
	
	// This bit is set by software, and cleared by hardware after the Start followed by the address
	// sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0.
	tmpreg = I2Cx->CR2;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	617b      	str	r3, [r7, #20]
	
	tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <I2C_Start+0x74>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
	
	if (Direction == READ_FROM_SLAVE)
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d104      	bne.n	80015e4 <I2C_Start+0x38>
		tmpreg |= I2C_CR2_RD_WRN;  // Read from Slave
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e003      	b.n	80015ec <I2C_Start+0x40>
	else
		tmpreg &= ~I2C_CR2_RD_WRN; // Write to Slave
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ea:	617b      	str	r3, [r7, #20]
		
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES));
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015fa:	4313      	orrs	r3, r2
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4313      	orrs	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
	
	tmpreg |= I2C_CR2_START;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001608:	617b      	str	r3, [r7, #20]
	// RELOAD
	// 0: The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow).
	// 1: The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded).
	// tmpreg |= I2C_CR2_RELOAD;
	
	I2Cx->CR2 = tmpreg; 
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	605a      	str	r2, [r3, #4]
	
   	return 0;  // Success
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	fc009800 	.word	0xfc009800

08001624 <I2C_Stop>:

//===============================================================================
//                           I2C Stop
//=============================================================================== 
void I2C_Stop(I2C_TypeDef * I2Cx){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	// Master: Generate STOP bit after the current byte has been transferred 
	I2Cx->CR2 |= I2C_CR2_STOP;								
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	605a      	str	r2, [r3, #4]
	// Wait until STOPF flag is reset
	while( (I2Cx->ISR & I2C_ISR_STOPF) == 0 ); 
 8001638:	bf00      	nop
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f9      	beq.n	800163a <I2C_Stop+0x16>
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <I2C_WaitLineIdle>:

//===============================================================================
//                           Wait for the bus is ready
//=============================================================================== 
void I2C_WaitLineIdle(I2C_TypeDef * I2Cx){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	// Wait until I2C bus is ready
	while( (I2Cx->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY );	// If busy, wait
 800165c:	bf00      	nop
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166a:	d0f8      	beq.n	800165e <I2C_WaitLineIdle+0xa>
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <I2C_SendData>:

//===============================================================================
//                           I2C Send Data
//=============================================================================== 
int8_t I2C_SendData(I2C_TypeDef * I2Cx, uint8_t DeviceAddress, uint8_t *pData, uint8_t Size) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	461a      	mov	r2, r3
 8001686:	460b      	mov	r3, r1
 8001688:	72fb      	strb	r3, [r7, #11]
 800168a:	4613      	mov	r3, r2
 800168c:	72bb      	strb	r3, [r7, #10]
	int i;
	
	if (Size <= 0 || pData == NULL) 
 800168e:	7abb      	ldrb	r3, [r7, #10]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <I2C_SendData+0x20>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <I2C_SendData+0x26>
		return -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e040      	b.n	8001722 <I2C_SendData+0xa8>
	
	I2C_WaitLineIdle(I2Cx);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff ffd7 	bl	8001654 <I2C_WaitLineIdle>
	
	if (I2C_Start(I2Cx, DeviceAddress, Size, WRITE_TO_SLAVE) < 0 )
 80016a6:	7af9      	ldrb	r1, [r7, #11]
 80016a8:	7aba      	ldrb	r2, [r7, #10]
 80016aa:	2300      	movs	r3, #0
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7ff ff7d 	bl	80015ac <I2C_Start>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da02      	bge.n	80016be <I2C_SendData+0x44>
		return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	e031      	b.n	8001722 <I2C_SendData+0xa8>
	// Send Data
	// Write the first data in DR register
	// while((I2Cx->ISR & I2C_ISR_TXE) == 0);
	// I2Cx->TXDR = pData[0] & I2C_TXDR_TXDATA;  

	for (i = 0; i < Size; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e010      	b.n	80016e6 <I2C_SendData+0x6c>
		// TXE is set by hardware when the I2C_TXDR register is empty. It is cleared when the next
		// data to be sent is written in the I2C_TXDR register.
		while( (I2Cx->ISR & I2C_ISR_TXE) == 0 ); 
 80016c4:	bf00      	nop
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f9      	beq.n	80016c6 <I2C_SendData+0x4c>
		// TXIS bit is set by hardware when the I2C_TXDR register is empty and the data to be
		// transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be
		// sent is written in the I2C_TXDR register.
		// The TXIS flag is not set when a NACK is received.
		// while((I2Cx->ISR & I2C_ISR_TXIS) == 0 );
		I2Cx->TXDR = pData[i] & I2C_TXDR_TXDATA;  // TXE is cleared by writing to the TXDR register.
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < Size; i++) {
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	7abb      	ldrb	r3, [r7, #10]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbea      	blt.n	80016c4 <I2C_SendData+0x4a>
	}
	
	// Wait until TC flag is set 
	while((I2Cx->ISR & I2C_ISR_TC) == 0 && (I2Cx->ISR & I2C_ISR_NACKF) == 0);
 80016ee:	bf00      	nop
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <I2C_SendData+0x8e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f3      	beq.n	80016f0 <I2C_SendData+0x76>
	
	if ( (I2Cx->ISR & I2C_ISR_NACKF) != 0 )
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <I2C_SendData+0xa0>
		return -1;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	e003      	b.n	8001722 <I2C_SendData+0xa8>

	I2C_Stop(I2Cx);
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff ff82 	bl	8001624 <I2C_Stop>
	return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <I2C1_EV_IRQHandler>:
	
	return 0;
}


void I2C1_EV_IRQHandler(void){
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
	// I2C1->ICR |= 
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <lis3dh_init>:

#define I2C_READ_BIT   (1)
#define I2C_WRITE_BIT  (0)
#define TIMEOUT_MS     (50)

HAL_StatusTypeDef lis3dh_init(lis3dh_t *lis3dh, I2C_HandleTypeDef *i2c, uint8_t *buf, uint16_t bufsize) {
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	lis3dh->i2c = i2c;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	601a      	str	r2, [r3, #0]
	lis3dh->i2c_addr = LIS3DH_ADDR << 1;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2230      	movs	r2, #48	; 0x30
 800175e:	809a      	strh	r2, [r3, #4]
	lis3dh->buf = buf;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
	lis3dh->bufsize = bufsize;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	887a      	ldrh	r2, [r7, #2]
 800176a:	829a      	strh	r2, [r3, #20]

	/* Let device wake up. */
	HAL_Delay(LID3DH_POWER_UP_MS);
 800176c:	200a      	movs	r0, #10
 800176e:	f001 fb3f 	bl	8002df0 <HAL_Delay>

	/* Check if device is ready */
	status = HAL_I2C_IsDeviceReady(lis3dh->i2c, lis3dh->i2c_addr, 1, TIMEOUT_MS);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8899      	ldrh	r1, [r3, #4]
 800177a:	2332      	movs	r3, #50	; 0x32
 800177c:	2201      	movs	r2, #1
 800177e:	f002 f959 	bl	8003a34 <HAL_I2C_IsDeviceReady>
 8001782:	4603      	mov	r3, r0
 8001784:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <lis3dh_init+0x4a>
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	e02b      	b.n	80017e8 <lis3dh_init+0xa2>

    /* Confirm the device identifies itself as expected. */
	status = lis3dh_read(lis3dh, REG_WHO_AM_I, 1);
 8001790:	2201      	movs	r2, #1
 8001792:	210f      	movs	r1, #15
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f849 	bl	800182c <lis3dh_read>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <lis3dh_init+0x62>
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	e01f      	b.n	80017e8 <lis3dh_init+0xa2>
	if (lis3dh->buf[0] != LIS3DH_DEVICE_ID) return HAL_ERROR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b33      	cmp	r3, #51	; 0x33
 80017b0:	d001      	beq.n	80017b6 <lis3dh_init+0x70>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e018      	b.n	80017e8 <lis3dh_init+0xa2>

	// Set power mode to operational; Enable all axes; Normal operation.
	status = lis3dh_write(lis3dh, REG_CTRL_REG1, DATA_RATE_NORM_1kHz344 | 0x07);
 80017b6:	2297      	movs	r2, #151	; 0x97
 80017b8:	2120      	movs	r1, #32
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f85d 	bl	800187a <lis3dh_write>
 80017c0:	4603      	mov	r3, r0
 80017c2:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <lis3dh_init+0x88>
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	e00c      	b.n	80017e8 <lis3dh_init+0xa2>

	// High resolution; BDU enabled.
	status = lis3dh_write(lis3dh, REG_CTRL_REG4, 0x88);
 80017ce:	2288      	movs	r2, #136	; 0x88
 80017d0:	2123      	movs	r1, #35	; 0x23
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f851 	bl	800187a <lis3dh_write>
 80017d8:	4603      	mov	r3, r0
 80017da:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <lis3dh_init+0xa0>
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	e000      	b.n	80017e8 <lis3dh_init+0xa2>

	return status;
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <lis3dh_xyz_available>:

bool lis3dh_xyz_available(lis3dh_t *lis3dh) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	/*
	 * Read STATUS_REG bit 2 (ZYXDA): New X, Y, Z data available.
	 */
	HAL_StatusTypeDef status;
	status = lis3dh_read(lis3dh, REG_STATUS_REG, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2127      	movs	r1, #39	; 0x27
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f815 	bl	800182c <lis3dh_read>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return false;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <lis3dh_xyz_available+0x20>
 800180c:	2300      	movs	r3, #0
 800180e:	e009      	b.n	8001824 <lis3dh_xyz_available+0x34>

	return (lis3dh->buf[0] & 2) > 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	bfcc      	ite	gt
 800181e:	2301      	movgt	r3, #1
 8001820:	2300      	movle	r3, #0
 8001822:	b2db      	uxtb	r3, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <lis3dh_read>:

HAL_StatusTypeDef lis3dh_read(lis3dh_t* lis3dh, uint16_t reg, uint16_t bufsize) {
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b087      	sub	sp, #28
 8001830:	af04      	add	r7, sp, #16
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	803b      	strh	r3, [r7, #0]
	if (bufsize > lis3dh->bufsize) return HAL_ERROR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8a9b      	ldrh	r3, [r3, #20]
 8001840:	883a      	ldrh	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d901      	bls.n	800184a <lis3dh_read+0x1e>
 8001846:	2301      	movs	r3, #1
 8001848:	e013      	b.n	8001872 <lis3dh_read+0x46>

	return HAL_I2C_Mem_Read(lis3dh->i2c, lis3dh->i2c_addr | I2C_READ_BIT, reg, 1, lis3dh->buf, bufsize, TIMEOUT_MS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	b299      	uxth	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	887c      	ldrh	r4, [r7, #2]
 800185e:	2232      	movs	r2, #50	; 0x32
 8001860:	9202      	str	r2, [sp, #8]
 8001862:	883a      	ldrh	r2, [r7, #0]
 8001864:	9201      	str	r2, [sp, #4]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	4622      	mov	r2, r4
 800186c:	f001 ffc8 	bl	8003800 <HAL_I2C_Mem_Read>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}

0800187a <lis3dh_write>:

HAL_StatusTypeDef lis3dh_write(lis3dh_t* lis3dh, uint16_t reg, uint8_t data) {
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af04      	add	r7, sp, #16
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]
 8001886:	4613      	mov	r3, r2
 8001888:	707b      	strb	r3, [r7, #1]
	return HAL_I2C_Mem_Write(lis3dh->i2c, lis3dh->i2c_addr, reg, 1, &data, 1, TIMEOUT_MS);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	8899      	ldrh	r1, [r3, #4]
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	2332      	movs	r3, #50	; 0x32
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2301      	movs	r3, #1
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	1c7b      	adds	r3, r7, #1
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	f001 fe99 	bl	80035d8 <HAL_I2C_Mem_Write>
 80018a6:	4603      	mov	r3, r0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <lis3dh_get_xyz>:

HAL_StatusTypeDef lis3dh_get_xyz(lis3dh_t* lis3dh) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af04      	add	r7, sp, #16
 80018b6:	6078      	str	r0, [r7, #4]
	if (lis3dh->bufsize < 2) return HAL_ERROR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8a9b      	ldrh	r3, [r3, #20]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d801      	bhi.n	80018c4 <lis3dh_get_xyz+0x14>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04b      	b.n	800195c <lis3dh_get_xyz+0xac>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
			lis3dh->i2c,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
			lis3dh->i2c_addr | I2C_READ_BIT,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	889b      	ldrh	r3, [r3, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	b299      	uxth	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2232      	movs	r2, #50	; 0x32
 80018d8:	9202      	str	r2, [sp, #8]
 80018da:	2202      	movs	r2, #2
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	22a8      	movs	r2, #168	; 0xa8
 80018e4:	f001 ff8c 	bl	8003800 <HAL_I2C_Mem_Read>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
			1,
			lis3dh->buf,
			2,
			TIMEOUT_MS);

	if (status != HAL_OK) {
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <lis3dh_get_xyz+0x5e>
		lis3dh->x = -1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	609a      	str	r2, [r3, #8]
		lis3dh->y = -1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	60da      	str	r2, [r3, #12]
		lis3dh->z = -1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	611a      	str	r2, [r3, #16]
		return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	e026      	b.n	800195c <lis3dh_get_xyz+0xac>
	}

	lis3dh->x = (int) (((int8_t) lis3dh->buf[1]) << 8) | lis3dh->buf[0];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6992      	ldr	r2, [r2, #24]
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]
	lis3dh->y = (int) (((int8_t) lis3dh->buf[3]) << 8) | lis3dh->buf[2];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	3303      	adds	r3, #3
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6992      	ldr	r2, [r2, #24]
 8001936:	3202      	adds	r2, #2
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
	lis3dh->z = (int) (((int8_t) lis3dh->buf[5]) << 8) | lis3dh->buf[4];
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	3305      	adds	r3, #5
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b25b      	sxtb	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6992      	ldr	r2, [r2, #24]
 8001950:	3204      	adds	r2, #4
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]

	return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_UART_RxCpltCallback>:
 * occurs, this function is called. It stores ASCII (integer representation)
 * into buffer. Once GGA sentence is found, latitude, longitude and time are
 * stored to global variables. Start another interrupt reception
 * once function is complete.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <HAL_UART_RxCpltCallback+0xd8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d15f      	bne.n	8001a34 <HAL_UART_RxCpltCallback+0xd0>

        nmea_buf[i++] = nmea; //store character
 8001974:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <HAL_UART_RxCpltCallback+0xdc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	b2d1      	uxtb	r1, r2
 800197c:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_UART_RxCpltCallback+0xdc>)
 800197e:	7011      	strb	r1, [r2, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_UART_RxCpltCallback+0xe0>)
 8001984:	7819      	ldrb	r1, [r3, #0]
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_UART_RxCpltCallback+0xe4>)
 8001988:	5499      	strb	r1, [r3, r2]

        //check if sentence is complete or if buffer overflow occurs
        if (nmea == '\n' || i >= sizeof(nmea_buf) - 1) {
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_UART_RxCpltCallback+0xe0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d003      	beq.n	800199a <HAL_UART_RxCpltCallback+0x36>
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_UART_RxCpltCallback+0xdc>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b7e      	cmp	r3, #126	; 0x7e
 8001998:	d93d      	bls.n	8001a16 <HAL_UART_RxCpltCallback+0xb2>
        	if(nmea_buf[3]=='G' && nmea_buf[4]=='G' && nmea_buf[5] == 'A') //check for GGA sentence
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_UART_RxCpltCallback+0xe4>)
 800199c:	78db      	ldrb	r3, [r3, #3]
 800199e:	2b47      	cmp	r3, #71	; 0x47
 80019a0:	d131      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0xa2>
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_UART_RxCpltCallback+0xe4>)
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	2b47      	cmp	r3, #71	; 0x47
 80019a8:	d12d      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0xa2>
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_UART_RxCpltCallback+0xe4>)
 80019ac:	795b      	ldrb	r3, [r3, #5]
 80019ae:	2b41      	cmp	r3, #65	; 0x41
 80019b0:	d129      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0xa2>
        	{
        		memcpy(nmea_gga, nmea_buf, 128); //copy general buffer to GGA buffer
 80019b2:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <HAL_UART_RxCpltCallback+0xe8>)
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_UART_RxCpltCallback+0xe4>)
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	461a      	mov	r2, r3
 80019be:	f00a fcb3 	bl	800c328 <memcpy>
        		cur_lat = get_lat(nmea_gga);
 80019c2:	4822      	ldr	r0, [pc, #136]	; (8001a4c <HAL_UART_RxCpltCallback+0xe8>)
 80019c4:	f7ff fb24 	bl	8001010 <get_lat>
 80019c8:	eeb0 7a40 	vmov.f32	s14, s0
 80019cc:	eef0 7a60 	vmov.f32	s15, s1
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_UART_RxCpltCallback+0xec>)
 80019d2:	ed83 7b00 	vstr	d7, [r3]
        		cur_lon = get_lon(nmea_gga);
 80019d6:	481d      	ldr	r0, [pc, #116]	; (8001a4c <HAL_UART_RxCpltCallback+0xe8>)
 80019d8:	f7ff fb66 	bl	80010a8 <get_lon>
 80019dc:	eeb0 7a40 	vmov.f32	s14, s0
 80019e0:	eef0 7a60 	vmov.f32	s15, s1
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_UART_RxCpltCallback+0xf0>)
 80019e6:	ed83 7b00 	vstr	d7, [r3]
        		get_time(nmea_gga, pre_time);
 80019ea:	491b      	ldr	r1, [pc, #108]	; (8001a58 <HAL_UART_RxCpltCallback+0xf4>)
 80019ec:	4817      	ldr	r0, [pc, #92]	; (8001a4c <HAL_UART_RxCpltCallback+0xe8>)
 80019ee:	f7ff fba7 	bl	8001140 <get_time>
        		alt = get_alt(nmea_gga);
 80019f2:	4816      	ldr	r0, [pc, #88]	; (8001a4c <HAL_UART_RxCpltCallback+0xe8>)
 80019f4:	f7ff fbec 	bl	80011d0 <get_alt>
 80019f8:	eeb0 7a40 	vmov.f32	s14, s0
 80019fc:	eef0 7a60 	vmov.f32	s15, s1
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_UART_RxCpltCallback+0xf8>)
 8001a02:	ed83 7b00 	vstr	d7, [r3]
        	}

            memset(nmea_buf, 0, sizeof(nmea_buf)); //clear general buffer
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	2100      	movs	r1, #0
 8001a0a:	480f      	ldr	r0, [pc, #60]	; (8001a48 <HAL_UART_RxCpltCallback+0xe4>)
 8001a0c:	f00a fb77 	bl	800c0fe <memset>
            i = 0; //reset index
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_UART_RxCpltCallback+0xdc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
        }

        // Start next UART character reception
        HAL_UART_Receive_IT(&huart1, &nmea, 1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	490a      	ldr	r1, [pc, #40]	; (8001a44 <HAL_UART_RxCpltCallback+0xe0>)
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <HAL_UART_RxCpltCallback+0xd8>)
 8001a1c:	f004 fac0 	bl	8005fa0 <HAL_UART_Receive_IT>
        if(status != HAL_OK)
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_UART_RxCpltCallback+0xfc>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_UART_RxCpltCallback+0xd0>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <HAL_UART_RxCpltCallback+0x100>)
 8001a2e:	f001 fd1d 	bl	800346c <HAL_GPIO_TogglePin>
			while(1);
 8001a32:	e7fe      	b.n	8001a32 <HAL_UART_RxCpltCallback+0xce>
		}
    }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000338 	.word	0x20000338
 8001a40:	20000521 	.word	0x20000521
 8001a44:	20000520 	.word	0x20000520
 8001a48:	20000420 	.word	0x20000420
 8001a4c:	200004a0 	.word	0x200004a0
 8001a50:	200003e0 	.word	0x200003e0
 8001a54:	200003e8 	.word	0x200003e8
 8001a58:	2000040c 	.word	0x2000040c
 8001a5c:	20000418 	.word	0x20000418
 8001a60:	200003c0 	.word	0x200003c0
 8001a64:	48000400 	.word	0x48000400

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 8001a6e:	af04      	add	r7, sp, #16
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a70:	f001 f949 	bl	8002d06 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001a74:	f000 fa6a 	bl	8001f4c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a78:	f000 fba8 	bl	80021cc <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a7c:	f000 fab4 	bl	8001fe8 <MX_I2C1_Init>
	MX_I2C2_Init();
 8001a80:	f000 faf2 	bl	8002068 <MX_I2C2_Init>
	MX_SPI1_Init();
 8001a84:	f000 fb30 	bl	80020e8 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001a88:	f000 fb6c 	bl	8002164 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8001a8c:	f005 fd1a 	bl	80074c4 <MX_FATFS_Init>

	// Allocate a buffer for reading data from the sensor.
	// Two bytes required to read X accelerometer data.
	uint8_t x_accel_buf[2] = { 0 };
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8a7 34bc 	strh.w	r3, [r7, #1212]	; 0x4bc

	/* Buffer to write variables to display */
	char display_buf[16];

	/* Variables for state machine */
	uint8_t state = BELOW; //arbitrary starting point
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
	uint16_t steps = 0; //total steps
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8a7 34d4 	strh.w	r3, [r7, #1236]	; 0x4d4
	UINT bytesWrote;
	FRESULT fres;
	BYTE writedisplay_buf[35];
	char sd1[35]; //buffer for SD write, 35 characters always

	float total_distance = 0;
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8001aaa:	6013      	str	r3, [r2, #0]
	float new_distance;
	float miles;

	HAL_Delay(1000); //Allow for microSD to settle (initialize everything)
 8001aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab0:	f001 f99e 	bl	8002df0 <HAL_Delay>

	/* Create new file on MicroSD */
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001ab4:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001ab8:	2201      	movs	r2, #1
 8001aba:	49b4      	ldr	r1, [pc, #720]	; (8001d8c <main+0x324>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 ff49 	bl	8009954 <f_mount>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
	if(fres != FR_OK) {
 8001ac8:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <main+0x72>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001ad0:	2140      	movs	r1, #64	; 0x40
 8001ad2:	48af      	ldr	r0, [pc, #700]	; (8001d90 <main+0x328>)
 8001ad4:	f001 fcca 	bl	800346c <HAL_GPIO_TogglePin>
		while(1);
 8001ad8:	e7fe      	b.n	8001ad8 <main+0x70>
	}
	fres = f_open(&fil, "crds.txt", FA_CREATE_ALWAYS | FA_OPEN_ALWAYS);
 8001ada:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ade:	2218      	movs	r2, #24
 8001ae0:	49ac      	ldr	r1, [pc, #688]	; (8001d94 <main+0x32c>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f007 ff7c 	bl	80099e0 <f_open>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
	if(fres != FR_OK) {
 8001aee:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <main+0x98>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	48a5      	ldr	r0, [pc, #660]	; (8001d90 <main+0x328>)
 8001afa:	f001 fcb7 	bl	800346c <HAL_GPIO_TogglePin>
		while(1);
 8001afe:	e7fe      	b.n	8001afe <main+0x96>
	}
	fres = f_close(&fil);
 8001b00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 fb11 	bl	800a12c <f_close>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
	if(fres != FR_OK) {
 8001b10:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <main+0xba>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	489d      	ldr	r0, [pc, #628]	; (8001d90 <main+0x328>)
 8001b1c:	f001 fca6 	bl	800346c <HAL_GPIO_TogglePin>
		while(1);
 8001b20:	e7fe      	b.n	8001b20 <main+0xb8>
	}
	fres = f_mount(NULL, "", 0); //0=demount
 8001b22:	2200      	movs	r2, #0
 8001b24:	4999      	ldr	r1, [pc, #612]	; (8001d8c <main+0x324>)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f007 ff14 	bl	8009954 <f_mount>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
	if(fres != FR_OK) {
 8001b32:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d004      	beq.n	8001b44 <main+0xdc>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	4894      	ldr	r0, [pc, #592]	; (8001d90 <main+0x328>)
 8001b3e:	f001 fc95 	bl	800346c <HAL_GPIO_TogglePin>
		while(1);
 8001b42:	e7fe      	b.n	8001b42 <main+0xda>
	}

	/* Initialize accelerometer */
	status = lis3dh_init(&lis3dh, &hi2c1, x_accel_buf, 2);
 8001b44:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 8001b48:	2302      	movs	r3, #2
 8001b4a:	4993      	ldr	r1, [pc, #588]	; (8001d98 <main+0x330>)
 8001b4c:	4893      	ldr	r0, [pc, #588]	; (8001d9c <main+0x334>)
 8001b4e:	f7ff fdfa 	bl	8001746 <lis3dh_init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <main+0x338>)
 8001b58:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001b5a:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <main+0x338>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <main+0x106>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	488f      	ldr	r0, [pc, #572]	; (8001da4 <main+0x33c>)
 8001b68:	f001 fc80 	bl	800346c <HAL_GPIO_TogglePin>
		while(1);
 8001b6c:	e7fe      	b.n	8001b6c <main+0x104>
	}

	/* Preliminary display of Steps and distance */
	ssd1306_Init();
 8001b6e:	f000 fc1d 	bl	80023ac <ssd1306_Init>
	ssd1306_SetCursor(2,0);
 8001b72:	2100      	movs	r1, #0
 8001b74:	2002      	movs	r0, #2
 8001b76:	f000 fde7 	bl	8002748 <ssd1306_SetCursor>
	ssd1306_WriteString("Steps:", Font_11x18, White);
 8001b7a:	4a8b      	ldr	r2, [pc, #556]	; (8001da8 <main+0x340>)
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	ca06      	ldmia	r2, {r1, r2}
 8001b80:	488a      	ldr	r0, [pc, #552]	; (8001dac <main+0x344>)
 8001b82:	f000 fdbb 	bl	80026fc <ssd1306_WriteString>
	ssd1306_SetCursor(2,20);
 8001b86:	2114      	movs	r1, #20
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f000 fddd 	bl	8002748 <ssd1306_SetCursor>
	ssd1306_WriteString("Distance:", Font_11x18, White);
 8001b8e:	4a86      	ldr	r2, [pc, #536]	; (8001da8 <main+0x340>)
 8001b90:	2301      	movs	r3, #1
 8001b92:	ca06      	ldmia	r2, {r1, r2}
 8001b94:	4886      	ldr	r0, [pc, #536]	; (8001db0 <main+0x348>)
 8001b96:	f000 fdb1 	bl	80026fc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b9a:	f000 fc9f 	bl	80024dc <ssd1306_UpdateScreen>

	/* Start character interrupt interrupt */
	status = HAL_UART_Receive_IT(&huart1, &nmea, 1);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4984      	ldr	r1, [pc, #528]	; (8001db4 <main+0x34c>)
 8001ba2:	4885      	ldr	r0, [pc, #532]	; (8001db8 <main+0x350>)
 8001ba4:	f004 f9fc 	bl	8005fa0 <HAL_UART_Receive_IT>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <main+0x338>)
 8001bae:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <main+0x338>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <main+0x15c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbc:	4879      	ldr	r0, [pc, #484]	; (8001da4 <main+0x33c>)
 8001bbe:	f001 fc55 	bl	800346c <HAL_GPIO_TogglePin>
		while(1);
 8001bc2:	e7fe      	b.n	8001bc2 <main+0x15a>
	}

	while (1)
	{
		/* Waits predetermined number of samples, then updates screen */
		for(int i = 0; i < NUM_SAMPLES; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8001bca:	e045      	b.n	8001c58 <main+0x1f0>
		{
			HAL_Delay(50); //20Hz sampling rate
 8001bcc:	2032      	movs	r0, #50	; 0x32
 8001bce:	f001 f90f 	bl	8002df0 <HAL_Delay>

			/* State machine  */
			if(lis3dh_xyz_available(&lis3dh)) {
 8001bd2:	4872      	ldr	r0, [pc, #456]	; (8001d9c <main+0x334>)
 8001bd4:	f7ff fe0c 	bl	80017f0 <lis3dh_xyz_available>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d037      	beq.n	8001c4e <main+0x1e6>
				status = lis3dh_get_xyz(&lis3dh);
 8001bde:	486f      	ldr	r0, [pc, #444]	; (8001d9c <main+0x334>)
 8001be0:	f7ff fe66 	bl	80018b0 <lis3dh_get_xyz>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <main+0x338>)
 8001bea:	701a      	strb	r2, [r3, #0]
				if(status != HAL_OK)
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <main+0x338>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <main+0x198>
				{
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf8:	486a      	ldr	r0, [pc, #424]	; (8001da4 <main+0x33c>)
 8001bfa:	f001 fc37 	bl	800346c <HAL_GPIO_TogglePin>
					while(1);
 8001bfe:	e7fe      	b.n	8001bfe <main+0x196>
				}

				x_accel = lis3dh.x; //get x acceleration
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <main+0x334>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f8a7 34be 	strh.w	r3, [r7, #1214]	; 0x4be

				switch(state) {
 8001c08:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <main+0x1ae>
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d00f      	beq.n	8001c34 <main+0x1cc>
 8001c14:	e01b      	b.n	8001c4e <main+0x1e6>
					case TOP: //if in TOP state
						if(x_accel < THRESH) { //if acceleration drops below threshold
 8001c16:	f8b7 34be 	ldrh.w	r3, [r7, #1214]	; 0x4be
 8001c1a:	f243 4202 	movw	r2, #13314	; 0x3402
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d812      	bhi.n	8001c48 <main+0x1e0>
							steps += 1; //add one step
 8001c22:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 8001c26:	3301      	adds	r3, #1
 8001c28:	f8a7 34d4 	strh.w	r3, [r7, #1236]	; 0x4d4
							state = BELOW; //change state
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
						}
						break;
 8001c32:	e009      	b.n	8001c48 <main+0x1e0>
					case BELOW: //if in BOTTOM state
						if(x_accel > THRESH) { //if acceleration surpasses threshold
 8001c34:	f8b7 34be 	ldrh.w	r3, [r7, #1214]	; 0x4be
 8001c38:	f243 4203 	movw	r2, #13315	; 0x3403
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d905      	bls.n	8001c4c <main+0x1e4>
							state = TOP; //change states
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
						}
						break;
 8001c46:	e001      	b.n	8001c4c <main+0x1e4>
						break;
 8001c48:	bf00      	nop
 8001c4a:	e000      	b.n	8001c4e <main+0x1e6>
						break;
 8001c4c:	bf00      	nop
		for(int i = 0; i < NUM_SAMPLES; i++)
 8001c4e:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8001c52:	3301      	adds	r3, #1
 8001c54:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8001c58:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8001c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c60:	dbb4      	blt.n	8001bcc <main+0x164>
				}
			}
		}

		/* Write Steps to display */
		ssd1306_SetCursor(70,0);
 8001c62:	2100      	movs	r1, #0
 8001c64:	2046      	movs	r0, #70	; 0x46
 8001c66:	f000 fd6f 	bl	8002748 <ssd1306_SetCursor>
		ssd1306_WriteString(itoa(steps,display_buf,10), Font_11x18, White);
 8001c6a:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 8001c6e:	f207 41ac 	addw	r1, r7, #1196	; 0x4ac
 8001c72:	220a      	movs	r2, #10
 8001c74:	4618      	mov	r0, r3
 8001c76:	f008 fc27 	bl	800a4c8 <itoa>
 8001c7a:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <main+0x340>)
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	ca06      	ldmia	r2, {r1, r2}
 8001c80:	f000 fd3c 	bl	80026fc <ssd1306_WriteString>

		/* Chacks for GPS lock, lat and long will be zero in this case*/
		if((pre_lat == 0) && (pre_lon == 0)) {
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <main+0x354>)
 8001c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	f7fe ff29 	bl	8000ae8 <__aeabi_dcmpeq>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d018      	beq.n	8001cce <main+0x266>
 8001c9c:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <main+0x358>)
 8001c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	f7fe ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <main+0x266>
		  ssd1306_SetCursor(2,50);
 8001cb4:	2132      	movs	r1, #50	; 0x32
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f000 fd46 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("Need GPS Lock", Font_7x10, White);
 8001cbc:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <main+0x35c>)
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	ca06      	ldmia	r2, {r1, r2}
 8001cc2:	4841      	ldr	r0, [pc, #260]	; (8001dc8 <main+0x360>)
 8001cc4:	f000 fd1a 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8001cc8:	f000 fc08 	bl	80024dc <ssd1306_UpdateScreen>
 8001ccc:	e112      	b.n	8001ef4 <main+0x48c>
		}
		else {
			sprintf(sd1,"%fN,%fW,%s",pre_lat,pre_lon,pre_time); //write lat,long,time to sd card buffer
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <main+0x354>)
 8001cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <main+0x358>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	1d3c      	adds	r4, r7, #4
 8001cdc:	4d3b      	ldr	r5, [pc, #236]	; (8001dcc <main+0x364>)
 8001cde:	9502      	str	r5, [sp, #8]
 8001ce0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4939      	ldr	r1, [pc, #228]	; (8001dd0 <main+0x368>)
 8001cea:	4620      	mov	r0, r4
 8001cec:	f00a f976 	bl	800bfdc <siprintf>

			fres = f_mount(&FatFs, "", 1); //1=mount now
 8001cf0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4925      	ldr	r1, [pc, #148]	; (8001d8c <main+0x324>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 fe2b 	bl	8009954 <f_mount>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
			if(fres != FR_OK) {
 8001d04:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <main+0x2ae>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	4820      	ldr	r0, [pc, #128]	; (8001d90 <main+0x328>)
 8001d10:	f001 fbac 	bl	800346c <HAL_GPIO_TogglePin>
				while(1);
 8001d14:	e7fe      	b.n	8001d14 <main+0x2ac>
			}

			fres = f_open(&fil, "crds.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8001d16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d1a:	2212      	movs	r2, #18
 8001d1c:	491d      	ldr	r1, [pc, #116]	; (8001d94 <main+0x32c>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f007 fe5e 	bl	80099e0 <f_open>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
			if(fres == FR_OK) {
 8001d2a:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d126      	bne.n	8001d80 <main+0x318>
				f_lseek(&fil, f_size(&fil)); //seek through file to find next line
 8001d32:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8001d36:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f008 fa1c 	bl	800a180 <f_lseek>
				strncpy((char*)writedisplay_buf, sd1, 35); //copy general string to required sd card buffer
 8001d48:	1d39      	adds	r1, r7, #4
 8001d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4e:	2223      	movs	r2, #35	; 0x23
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00a f9fb 	bl	800c14c <strncpy>
				fres = f_write(&fil, writedisplay_buf, 35, &bytesWrote);
 8001d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d5a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d5e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001d62:	2223      	movs	r2, #35	; 0x23
 8001d64:	f007 fff8 	bl	8009d58 <f_write>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f887 34cb 	strb.w	r3, [r7, #1227]	; 0x4cb
				if(fres != FR_OK) {
 8001d6e:	f897 34cb 	ldrb.w	r3, [r7, #1227]	; 0x4cb
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d02e      	beq.n	8001dd4 <main+0x36c>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001d76:	2140      	movs	r1, #64	; 0x40
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <main+0x328>)
 8001d7a:	f001 fb77 	bl	800346c <HAL_GPIO_TogglePin>
					while(1);
 8001d7e:	e7fe      	b.n	8001d7e <main+0x316>
				}
			}
			else {
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001d80:	2140      	movs	r1, #64	; 0x40
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <main+0x328>)
 8001d84:	f001 fb72 	bl	800346c <HAL_GPIO_TogglePin>
				while(1);
 8001d88:	e7fe      	b.n	8001d88 <main+0x320>
 8001d8a:	bf00      	nop
 8001d8c:	08010ecc 	.word	0x08010ecc
 8001d90:	48000800 	.word	0x48000800
 8001d94:	08010ed0 	.word	0x08010ed0
 8001d98:	2000022c 	.word	0x2000022c
 8001d9c:	200003c4 	.word	0x200003c4
 8001da0:	200003c0 	.word	0x200003c0
 8001da4:	48000400 	.word	0x48000400
 8001da8:	20000008 	.word	0x20000008
 8001dac:	08010edc 	.word	0x08010edc
 8001db0:	08010ee4 	.word	0x08010ee4
 8001db4:	20000520 	.word	0x20000520
 8001db8:	20000338 	.word	0x20000338
 8001dbc:	200003f0 	.word	0x200003f0
 8001dc0:	200003f8 	.word	0x200003f8
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	08010ef0 	.word	0x08010ef0
 8001dcc:	2000040c 	.word	0x2000040c
 8001dd0:	08010f00 	.word	0x08010f00
			}

			f_close(&fil); //close file
 8001dd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f008 f9a7 	bl	800a12c <f_close>

			f_mount(NULL, "", 0); //dismout file
 8001dde:	2200      	movs	r2, #0
 8001de0:	494f      	ldr	r1, [pc, #316]	; (8001f20 <main+0x4b8>)
 8001de2:	2000      	movs	r0, #0
 8001de4:	f007 fdb6 	bl	8009954 <f_mount>

			new_distance = calculateDistance(pre_lat, pre_lon, cur_lat, cur_lon);
 8001de8:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <main+0x4bc>)
 8001dea:	ed93 7b00 	vldr	d7, [r3]
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <main+0x4c0>)
 8001df0:	ed93 6b00 	vldr	d6, [r3]
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <main+0x4c4>)
 8001df6:	ed93 5b00 	vldr	d5, [r3]
 8001dfa:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <main+0x4c8>)
 8001dfc:	ed93 4b00 	vldr	d4, [r3]
 8001e00:	eeb0 3a44 	vmov.f32	s6, s8
 8001e04:	eef0 3a64 	vmov.f32	s7, s9
 8001e08:	eeb0 2a45 	vmov.f32	s4, s10
 8001e0c:	eef0 2a65 	vmov.f32	s5, s11
 8001e10:	eeb0 1a46 	vmov.f32	s2, s12
 8001e14:	eef0 1a66 	vmov.f32	s3, s13
 8001e18:	eeb0 0a47 	vmov.f32	s0, s14
 8001e1c:	eef0 0a67 	vmov.f32	s1, s15
 8001e20:	f7ff fa8e 	bl	8001340 <calculateDistance>
 8001e24:	ec53 2b10 	vmov	r2, r3, d0
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe feec 	bl	8000c08 <__aeabi_d2f>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8001e36:	6013      	str	r3, [r2, #0]
			if(new_distance > MIN_GPS_DISTANCE){ //prevent GPS drift when still
 8001e38:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	dd0d      	ble.n	8001e6a <main+0x402>
			  total_distance += new_distance;
 8001e4e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001e66:	edc3 7a00 	vstr	s15, [r3]
			}
			if(total_distance < 400) //display meters
 8001e6a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001f34 <main+0x4cc>
 8001e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d50c      	bpl.n	8001e9a <main+0x432>
			{
			  sprintf(display_buf,"%0.2f meters",total_distance);
 8001e80:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f7fe fb6f 	bl	8000568 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	f207 40ac 	addw	r0, r7, #1196	; 0x4ac
 8001e92:	4929      	ldr	r1, [pc, #164]	; (8001f38 <main+0x4d0>)
 8001e94:	f00a f8a2 	bl	800bfdc <siprintf>
 8001e98:	e01f      	b.n	8001eda <main+0x472>
			}
			else{ //change from meters to miles
			  miles = total_distance / METERS_TO_MILES;
 8001e9a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f7fe fb62 	bl	8000568 <__aeabi_f2d>
 8001ea4:	a31c      	add	r3, pc, #112	; (adr r3, 8001f18 <main+0x4b0>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fcdf 	bl	800086c <__aeabi_ddiv>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7fe fea7 	bl	8000c08 <__aeabi_d2f>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001ec0:	6013      	str	r3, [r2, #0]
			  sprintf(display_buf,"%0.2f miles",miles);
 8001ec2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f7fe fb4e 	bl	8000568 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	f207 40ac 	addw	r0, r7, #1196	; 0x4ac
 8001ed4:	4919      	ldr	r1, [pc, #100]	; (8001f3c <main+0x4d4>)
 8001ed6:	f00a f881 	bl	800bfdc <siprintf>
			}
			ssd1306_SetCursor(2,40);
 8001eda:	2128      	movs	r1, #40	; 0x28
 8001edc:	2002      	movs	r0, #2
 8001ede:	f000 fc33 	bl	8002748 <ssd1306_SetCursor>
			ssd1306_WriteString(display_buf, Font_11x18, White);
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <main+0x4d8>)
 8001ee4:	f207 40ac 	addw	r0, r7, #1196	; 0x4ac
 8001ee8:	2301      	movs	r3, #1
 8001eea:	ca06      	ldmia	r2, {r1, r2}
 8001eec:	f000 fc06 	bl	80026fc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001ef0:	f000 faf4 	bl	80024dc <ssd1306_UpdateScreen>

		}
			/* update present values to past */
			pre_lat = cur_lat;
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <main+0x4c4>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <main+0x4bc>)
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
			pre_lon = cur_lon;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <main+0x4c8>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <main+0x4c0>)
 8001f08:	e9c1 2300 	strd	r2, r3, [r1]
			strcpy(pre_time, cur_time);
 8001f0c:	490d      	ldr	r1, [pc, #52]	; (8001f44 <main+0x4dc>)
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <main+0x4e0>)
 8001f10:	f00a fa02 	bl	800c318 <strcpy>
		for(int i = 0; i < NUM_SAMPLES; i++)
 8001f14:	e656      	b.n	8001bc4 <main+0x15c>
 8001f16:	bf00      	nop
 8001f18:	28f5c28f 	.word	0x28f5c28f
 8001f1c:	4099255c 	.word	0x4099255c
 8001f20:	08010ecc 	.word	0x08010ecc
 8001f24:	200003f0 	.word	0x200003f0
 8001f28:	200003f8 	.word	0x200003f8
 8001f2c:	200003e0 	.word	0x200003e0
 8001f30:	200003e8 	.word	0x200003e8
 8001f34:	43c80000 	.word	0x43c80000
 8001f38:	08010f0c 	.word	0x08010f0c
 8001f3c:	08010f1c 	.word	0x08010f1c
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000400 	.word	0x20000400
 8001f48:	2000040c 	.word	0x2000040c

08001f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	; 0x58
 8001f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2244      	movs	r2, #68	; 0x44
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00a f8cf 	bl	800c0fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f72:	f002 f9c7 	bl	8004304 <HAL_PWREx_ControlVoltageScaling>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f7c:	f000 f9a8 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001f96:	2314      	movs	r3, #20
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 fa02 	bl	80043b0 <HAL_RCC_OscConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001fb2:	f000 f98d 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fe50 	bl	8004c74 <HAL_RCC_ClockConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001fda:	f000 f979 	bl	80022d0 <Error_Handler>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3758      	adds	r7, #88	; 0x58
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_I2C1_Init+0x74>)
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <MX_I2C1_Init+0x78>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_I2C1_Init+0x74>)
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <MX_I2C1_Init+0x7c>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_I2C1_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_I2C1_Init+0x74>)
 8002000:	2201      	movs	r2, #1
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <MX_I2C1_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_I2C1_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_I2C1_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_I2C1_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_I2C1_Init+0x74>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002022:	480e      	ldr	r0, [pc, #56]	; (800205c <MX_I2C1_Init+0x74>)
 8002024:	f001 fa3c 	bl	80034a0 <HAL_I2C_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800202e:	f000 f94f 	bl	80022d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002032:	2100      	movs	r1, #0
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <MX_I2C1_Init+0x74>)
 8002036:	f002 f8bf 	bl	80041b8 <HAL_I2CEx_ConfigAnalogFilter>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002040:	f000 f946 	bl	80022d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_I2C1_Init+0x74>)
 8002048:	f002 f901 	bl	800424e <HAL_I2CEx_ConfigDigitalFilter>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002052:	f000 f93d 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000022c 	.word	0x2000022c
 8002060:	40005400 	.word	0x40005400
 8002064:	10909cec 	.word	0x10909cec

08002068 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <MX_I2C2_Init+0x74>)
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <MX_I2C2_Init+0x78>)
 8002070:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MX_I2C2_Init+0x74>)
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <MX_I2C2_Init+0x7c>)
 8002076:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <MX_I2C2_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <MX_I2C2_Init+0x74>)
 8002080:	2201      	movs	r2, #1
 8002082:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <MX_I2C2_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_I2C2_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_I2C2_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_I2C2_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_I2C2_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020a2:	480e      	ldr	r0, [pc, #56]	; (80020dc <MX_I2C2_Init+0x74>)
 80020a4:	f001 f9fc 	bl	80034a0 <HAL_I2C_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020ae:	f000 f90f 	bl	80022d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020b2:	2100      	movs	r1, #0
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <MX_I2C2_Init+0x74>)
 80020b6:	f002 f87f 	bl	80041b8 <HAL_I2CEx_ConfigAnalogFilter>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020c0:	f000 f906 	bl	80022d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020c4:	2100      	movs	r1, #0
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_I2C2_Init+0x74>)
 80020c8:	f002 f8c1 	bl	800424e <HAL_I2CEx_ConfigDigitalFilter>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020d2:	f000 f8fd 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000280 	.word	0x20000280
 80020e0:	40005800 	.word	0x40005800
 80020e4:	10909cec 	.word	0x10909cec

080020e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_SPI1_Init+0x74>)
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <MX_SPI1_Init+0x78>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_SPI1_Init+0x74>)
 80020f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_SPI1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_SPI1_Init+0x74>)
 8002102:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002106:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_SPI1_Init+0x74>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_SPI1_Init+0x74>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_SPI1_Init+0x74>)
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_SPI1_Init+0x74>)
 800211e:	2238      	movs	r2, #56	; 0x38
 8002120:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_SPI1_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_SPI1_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_SPI1_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_SPI1_Init+0x74>)
 8002136:	2207      	movs	r2, #7
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_SPI1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_SPI1_Init+0x74>)
 8002142:	2208      	movs	r2, #8
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_SPI1_Init+0x74>)
 8002148:	f003 f93e 	bl	80053c8 <HAL_SPI_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002152:	f000 f8bd 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002d4 	.word	0x200002d4
 8002160:	40013000 	.word	0x40013000

08002164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <MX_USART1_UART_Init+0x64>)
 800216c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 8002170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 80021a2:	2210      	movs	r2, #16
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 80021a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_USART1_UART_Init+0x60>)
 80021b0:	f003 fea8 	bl	8005f04 <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80021ba:	f000 f889 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000338 	.word	0x20000338
 80021c8:	40013800 	.word	0x40013800

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <MX_GPIO_Init+0xf8>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a37      	ldr	r2, [pc, #220]	; (80022c4 <MX_GPIO_Init+0xf8>)
 80021e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <MX_GPIO_Init+0xf8>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <MX_GPIO_Init+0xf8>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <MX_GPIO_Init+0xf8>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <MX_GPIO_Init+0xf8>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	2110      	movs	r1, #16
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f001 f8f7 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <MX_GPIO_Init+0xfc>)
 8002256:	f001 f8f1 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	481b      	ldr	r0, [pc, #108]	; (80022cc <MX_GPIO_Init+0x100>)
 8002260:	f001 f8ec 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002264:	2310      	movs	r3, #16
 8002266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227e:	f000 ff6b 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	480b      	ldr	r0, [pc, #44]	; (80022c8 <MX_GPIO_Init+0xfc>)
 800229c:	f000 ff5c 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a0:	2340      	movs	r3, #64	; 0x40
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_GPIO_Init+0x100>)
 80022b8:	f000 ff4e 	bl	8003158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	48000400 	.word	0x48000400
 80022cc:	48000800 	.word	0x48000800

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
}
 80022d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <Error_Handler+0x8>

080022da <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "I2C.h"

void ssd1306_Reset(void) {
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
		uint8_t buffer[2];
		buffer[0] = 0x00;
 80022f2:	2300      	movs	r3, #0
 80022f4:	733b      	strb	r3, [r7, #12]
		buffer[1] = byte;
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	737b      	strb	r3, [r7, #13]
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
 80022fa:	f107 020c 	add.w	r2, r7, #12
 80022fe:	2302      	movs	r3, #2
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <ssd1306_WriteCommand+0x28>)
 8002304:	f7ff f9b9 	bl	800167a <I2C_SendData>
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40005800 	.word	0x40005800

08002314 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002314:	b580      	push	{r7, lr}
 8002316:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800231a:	af00      	add	r7, sp, #0
 800231c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002320:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002324:	6018      	str	r0, [r3, #0]
 8002326:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800232a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800232e:	6019      	str	r1, [r3, #0]
		int i;
		uint8_t buffer2[SSD1306_BUFFER_SIZE+1];
		buffer2[0] = 0x40;
 8002330:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002334:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<buff_size;  i++)
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8002342:	e015      	b.n	8002370 <ssd1306_WriteData+0x5c>
			buffer2[i+1] = buffer[i];
 8002344:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002348:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800234c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	441a      	add	r2, r3
 8002354:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002358:	3301      	adds	r3, #1
 800235a:	7811      	ldrb	r1, [r2, #0]
 800235c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002360:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8002364:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<buff_size;  i++)
 8002366:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800236a:	3301      	adds	r3, #1
 800236c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8002370:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002374:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002378:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d8e0      	bhi.n	8002344 <ssd1306_WriteData+0x30>
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer2, buff_size+1);
 8002382:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002386:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f107 0208 	add.w	r2, r7, #8
 8002396:	2178      	movs	r1, #120	; 0x78
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <ssd1306_WriteData+0x94>)
 800239a:	f7ff f96e 	bl	800167a <I2C_SendData>
}
 800239e:	bf00      	nop
 80023a0:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40005800 	.word	0x40005800

080023ac <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
		volatile uint32_t i;
	
    // Reset OLED
    ssd1306_Reset();
 80023b2:	f7ff ff92 	bl	80022da <ssd1306_Reset>

    // Wait for the screen to boot
	  for(i=0; i<100000; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e002      	b.n	80023c2 <ssd1306_Init+0x16>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3301      	adds	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <ssd1306_Init+0xe0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d9f8      	bls.n	80023bc <ssd1306_Init+0x10>
			;

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f9e8 	bl	80027a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80023d0:	2020      	movs	r0, #32
 80023d2:	f7ff ff89 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff ff86 	bl	80022e8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023dc:	20b0      	movs	r0, #176	; 0xb0
 80023de:	f7ff ff83 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80023e2:	20c8      	movs	r0, #200	; 0xc8
 80023e4:	f7ff ff80 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x00); //---set low column address
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff7d 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff ff7a 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80023f4:	2040      	movs	r0, #64	; 0x40
 80023f6:	f7ff ff77 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80023fa:	20ff      	movs	r0, #255	; 0xff
 80023fc:	f000 f9bc 	bl	8002778 <ssd1306_SetContrast>

    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002400:	20a1      	movs	r0, #161	; 0xa1
 8002402:	f7ff ff71 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA6); //--set normal color
 8002406:	20a6      	movs	r0, #166	; 0xa6
 8002408:	f7ff ff6e 	bl	80022e8 <ssd1306_WriteCommand>

    // Set multiplex ratio.
    ssd1306_WriteCommand(0x3F); //for 64 height display
 800240c:	203f      	movs	r0, #63	; 0x3f
 800240e:	f7ff ff6b 	bl	80022e8 <ssd1306_WriteCommand>


    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002412:	20a4      	movs	r0, #164	; 0xa4
 8002414:	f7ff ff68 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002418:	20d3      	movs	r0, #211	; 0xd3
 800241a:	f7ff ff65 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff ff62 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002424:	20d5      	movs	r0, #213	; 0xd5
 8002426:	f7ff ff5f 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800242a:	20f0      	movs	r0, #240	; 0xf0
 800242c:	f7ff ff5c 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002430:	20d9      	movs	r0, #217	; 0xd9
 8002432:	f7ff ff59 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002436:	2022      	movs	r0, #34	; 0x22
 8002438:	f7ff ff56 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800243c:	20da      	movs	r0, #218	; 0xda
 800243e:	f7ff ff53 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);// for 64 height display
 8002442:	2012      	movs	r0, #18
 8002444:	f7ff ff50 	bl	80022e8 <ssd1306_WriteCommand>


    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002448:	20db      	movs	r0, #219	; 0xdb
 800244a:	f7ff ff4d 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800244e:	2020      	movs	r0, #32
 8002450:	f7ff ff4a 	bl	80022e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002454:	208d      	movs	r0, #141	; 0x8d
 8002456:	f7ff ff47 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800245a:	2014      	movs	r0, #20
 800245c:	f7ff ff44 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002460:	2001      	movs	r0, #1
 8002462:	f000 f99d 	bl	80027a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f814 	bl	8002494 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800246c:	f000 f836 	bl	80024dc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <ssd1306_Init+0xe4>)
 8002472:	2200      	movs	r2, #0
 8002474:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <ssd1306_Init+0xe4>)
 8002478:	2200      	movs	r2, #0
 800247a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <ssd1306_Init+0xe4>)
 800247e:	2201      	movs	r2, #1
 8002480:	715a      	strb	r2, [r3, #5]
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	0001869f 	.word	0x0001869f
 8002490:	20000924 	.word	0x20000924

08002494 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e00d      	b.n	80024c0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <ssd1306_Fill+0x1a>
 80024aa:	2100      	movs	r1, #0
 80024ac:	e000      	b.n	80024b0 <ssd1306_Fill+0x1c>
 80024ae:	21ff      	movs	r1, #255	; 0xff
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <ssd1306_Fill+0x44>)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	460a      	mov	r2, r1
 80024b8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d3ed      	bcc.n	80024a4 <ssd1306_Fill+0x10>
    }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000524 	.word	0x20000524

080024dc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
		uint8_t i;
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 80024e2:	2300      	movs	r3, #0
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	e016      	b.n	8002516 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	3b50      	subs	r3, #80	; 0x50
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fefa 	bl	80022e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fef7 	bl	80022e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80024fa:	2010      	movs	r0, #16
 80024fc:	f7ff fef4 	bl	80022e8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	01db      	lsls	r3, r3, #7
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <ssd1306_UpdateScreen+0x4c>)
 8002506:	4413      	add	r3, r2
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff02 	bl	8002314 <ssd1306_WriteData>
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	3301      	adds	r3, #1
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b07      	cmp	r3, #7
 800251a:	d9e5      	bls.n	80024e8 <ssd1306_UpdateScreen+0xc>
    }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000524 	.word	0x20000524

0800252c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	460b      	mov	r3, r1
 8002538:	71bb      	strb	r3, [r7, #6]
 800253a:	4613      	mov	r3, r2
 800253c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db48      	blt.n	80025d8 <ssd1306_DrawPixel+0xac>
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	2b3f      	cmp	r3, #63	; 0x3f
 800254a:	d845      	bhi.n	80025d8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <ssd1306_DrawPixel+0xb8>)
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002554:	797b      	ldrb	r3, [r7, #5]
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002562:	797b      	ldrb	r3, [r7, #5]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d11a      	bne.n	800259e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	b2d8      	uxtb	r0, r3
 8002570:	4603      	mov	r3, r0
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	4413      	add	r3, r2
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	b25a      	sxtb	r2, r3
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	b25b      	sxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b259      	sxtb	r1, r3
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	4603      	mov	r3, r0
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	4413      	add	r3, r2
 8002596:	b2c9      	uxtb	r1, r1
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 800259a:	54d1      	strb	r1, [r2, r3]
 800259c:	e01d      	b.n	80025da <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800259e:	79fa      	ldrb	r2, [r7, #7]
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2d8      	uxtb	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4413      	add	r3, r2
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	b25a      	sxtb	r2, r3
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	b259      	sxtb	r1, r3
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4603      	mov	r3, r0
 80025cc:	01db      	lsls	r3, r3, #7
 80025ce:	4413      	add	r3, r2
 80025d0:	b2c9      	uxtb	r1, r1
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <ssd1306_DrawPixel+0xbc>)
 80025d4:	54d1      	strb	r1, [r2, r3]
 80025d6:	e000      	b.n	80025da <ssd1306_DrawPixel+0xae>
        return;
 80025d8:	bf00      	nop
    }
}
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20000924 	.word	0x20000924
 80025e8:	20000524 	.word	0x20000524

080025ec <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4604      	mov	r4, r0
 80025f4:	1d38      	adds	r0, r7, #4
 80025f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	4613      	mov	r3, r2
 8002602:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b1f      	cmp	r3, #31
 8002608:	d902      	bls.n	8002610 <ssd1306_WriteChar+0x24>
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b7e      	cmp	r3, #126	; 0x7e
 800260e:	d901      	bls.n	8002614 <ssd1306_WriteChar+0x28>
        return 0;
 8002610:	2300      	movs	r3, #0
 8002612:	e06d      	b.n	80026f0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002614:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	793b      	ldrb	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	dc06      	bgt.n	8002630 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 8002624:	885b      	ldrh	r3, [r3, #2]
 8002626:	461a      	mov	r2, r3
 8002628:	797b      	ldrb	r3, [r7, #5]
 800262a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	dd01      	ble.n	8002634 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002630:	2300      	movs	r3, #0
 8002632:	e05d      	b.n	80026f0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	e04c      	b.n	80026d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3b20      	subs	r3, #32
 8002640:	7979      	ldrb	r1, [r7, #5]
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4619      	mov	r1, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	440b      	add	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e034      	b.n	80026c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4413      	add	r3, r2
 8002676:	b2d8      	uxtb	r0, r3
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 800267a:	885b      	ldrh	r3, [r3, #2]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4413      	add	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	7bba      	ldrb	r2, [r7, #14]
 8002688:	4619      	mov	r1, r3
 800268a:	f7ff ff4f 	bl	800252c <ssd1306_DrawPixel>
 800268e:	e016      	b.n	80026be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4413      	add	r3, r2
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 80026a0:	885b      	ldrh	r3, [r3, #2]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b2d9      	uxtb	r1, r3
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	f7ff ff37 	bl	800252c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	793b      	ldrb	r3, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d3c5      	bcc.n	800265a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	797b      	ldrb	r3, [r7, #5]
 80026d6:	461a      	mov	r2, r3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d3ad      	bcc.n	800263a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	793b      	ldrb	r3, [r7, #4]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <ssd1306_WriteChar+0x10c>)
 80026ec:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3724      	adds	r7, #36	; 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	20000924 	.word	0x20000924

080026fc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	1d38      	adds	r0, r7, #4
 8002706:	e880 0006 	stmia.w	r0, {r1, r2}
 800270a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800270c:	e012      	b.n	8002734 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	7818      	ldrb	r0, [r3, #0]
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	1d3a      	adds	r2, r7, #4
 8002716:	ca06      	ldmia	r2, {r1, r2}
 8002718:	f7ff ff68 	bl	80025ec <ssd1306_WriteChar>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d002      	beq.n	800272e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	e008      	b.n	8002740 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e8      	bne.n	800270e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <ssd1306_SetCursor+0x2c>)
 800275e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <ssd1306_SetCursor+0x2c>)
 8002766:	805a      	strh	r2, [r3, #2]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000924 	.word	0x20000924

08002778 <ssd1306_SetContrast>:


void ssd1306_SetContrast(const uint8_t value) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002782:	2381      	movs	r3, #129	; 0x81
 8002784:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fdad 	bl	80022e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fda9 	bl	80022e8 <ssd1306_WriteCommand>
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027b0:	23af      	movs	r3, #175	; 0xaf
 80027b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <ssd1306_SetDisplayOn+0x38>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	719a      	strb	r2, [r3, #6]
 80027ba:	e004      	b.n	80027c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027bc:	23ae      	movs	r3, #174	; 0xae
 80027be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <ssd1306_SetDisplayOn+0x38>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fd8d 	bl	80022e8 <ssd1306_WriteCommand>
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000924 	.word	0x20000924

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_MspInit+0x44>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_MspInit+0x44>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6613      	str	r3, [r2, #96]	; 0x60
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_MspInit+0x44>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_MspInit+0x44>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_MspInit+0x44>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6593      	str	r3, [r2, #88]	; 0x58
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_MspInit+0x44>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b098      	sub	sp, #96	; 0x60
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	2234      	movs	r2, #52	; 0x34
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f009 fc5a 	bl	800c0fe <memset>
  if(hi2c->Instance==I2C1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <HAL_I2C_MspInit+0x124>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d138      	bne.n	80028c6 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002854:	2340      	movs	r3, #64	; 0x40
 8002856:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fc2b 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800286c:	f7ff fd30 	bl	80022d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_I2C_MspInit+0x128>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	4a35      	ldr	r2, [pc, #212]	; (800294c <HAL_I2C_MspInit+0x128>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_I2C_MspInit+0x128>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 8002888:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800288c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288e:	2312      	movs	r3, #18
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800289a:	2304      	movs	r3, #4
 800289c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a8:	f000 fc56 	bl	8003158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_I2C_MspInit+0x128>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <HAL_I2C_MspInit+0x128>)
 80028b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b6:	6593      	str	r3, [r2, #88]	; 0x58
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_I2C_MspInit+0x128>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028c4:	e03b      	b.n	800293e <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_I2C_MspInit+0x12c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d136      	bne.n	800293e <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d8:	f107 0318 	add.w	r3, r7, #24
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 fbed 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80028e8:	f7ff fcf2 	bl	80022d0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_I2C_MspInit+0x128>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_I2C_MspInit+0x128>)
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_I2C_MspInit+0x128>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 8002904:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002908:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290a:	2312      	movs	r3, #18
 800290c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002916:	2304      	movs	r3, #4
 8002918:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800291e:	4619      	mov	r1, r3
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <HAL_I2C_MspInit+0x130>)
 8002922:	f000 fc19 	bl	8003158 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_I2C_MspInit+0x128>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_I2C_MspInit+0x128>)
 800292c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_I2C_MspInit+0x128>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
}
 800293e:	bf00      	nop
 8002940:	3760      	adds	r7, #96	; 0x60
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40005400 	.word	0x40005400
 800294c:	40021000 	.word	0x40021000
 8002950:	40005800 	.word	0x40005800
 8002954:	48000400 	.word	0x48000400

08002958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <HAL_SPI_MspInit+0x7c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d128      	bne.n	80029cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 800297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297e:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 8002980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002984:	6613      	str	r3, [r2, #96]	; 0x60
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_SPI_MspInit+0x80>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80029aa:	23c2      	movs	r3, #194	; 0xc2
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ba:	2305      	movs	r3, #5
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c8:	f000 fbc6 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40013000 	.word	0x40013000
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b096      	sub	sp, #88	; 0x58
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	2234      	movs	r2, #52	; 0x34
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f009 fb7e 	bl	800c0fe <memset>
  if(huart->Instance==USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_UART_MspInit+0xb4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d13d      	bne.n	8002a88 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fb4f 	bl	80050bc <HAL_RCCEx_PeriphCLKConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a24:	f7ff fc54 	bl	80022d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_UART_MspInit+0xb8>)
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_UART_MspInit+0xb8>)
 8002a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a32:	6613      	str	r3, [r2, #96]	; 0x60
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_UART_MspInit+0xb8>)
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_UART_MspInit+0xb8>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_UART_MspInit+0xb8>)
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_UART_MspInit+0xb8>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002a58:	23c0      	movs	r3, #192	; 0xc0
 8002a5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a70:	4619      	mov	r1, r3
 8002a72:	4809      	ldr	r0, [pc, #36]	; (8002a98 <HAL_UART_MspInit+0xbc>)
 8002a74:	f000 fb70 	bl	8003158 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2025      	movs	r0, #37	; 0x25
 8002a7e:	f000 fab6 	bl	8002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a82:	2025      	movs	r0, #37	; 0x25
 8002a84:	f000 facf 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a88:	bf00      	nop
 8002a8a:	3758      	adds	r7, #88	; 0x58
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	48000400 	.word	0x48000400

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 f962 	bl	8002db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <USART1_IRQHandler+0x10>)
 8002af6:	f003 fa9f 	bl	8006038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000338 	.word	0x20000338

08002b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return 1;
 8002b08:	2301      	movs	r3, #1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_kill>:

int _kill(int pid, int sig)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b1e:	f009 fbcf 	bl	800c2c0 <__errno>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2216      	movs	r2, #22
 8002b26:	601a      	str	r2, [r3, #0]
  return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_exit>:

void _exit (int status)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffe7 	bl	8002b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b46:	e7fe      	b.n	8002b46 <_exit+0x12>

08002b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e00a      	b.n	8002b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b5a:	f3af 8000 	nop.w
 8002b5e:	4601      	mov	r1, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	60ba      	str	r2, [r7, #8]
 8002b66:	b2ca      	uxtb	r2, r1
 8002b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	dbf0      	blt.n	8002b5a <_read+0x12>
  }

  return len;
 8002b78:	687b      	ldr	r3, [r7, #4]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e009      	b.n	8002ba8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	60ba      	str	r2, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbf1      	blt.n	8002b94 <_write+0x12>
  }
  return len;
 8002bb0:	687b      	ldr	r3, [r7, #4]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_close>:

int _close(int file)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002be2:	605a      	str	r2, [r3, #4]
  return 0;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_isatty>:

int _isatty(int file)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <_sbrk+0x5c>)
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <_sbrk+0x60>)
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <_sbrk+0x64>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <_sbrk+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <_sbrk+0x64>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c54:	f009 fb34 	bl	800c2c0 <__errno>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	e009      	b.n	8002c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <_sbrk+0x64>)
 8002c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	2000a000 	.word	0x2000a000
 8002c84:	00004000 	.word	0x00004000
 8002c88:	2000092c 	.word	0x2000092c
 8002c8c:	20000ac8 	.word	0x20000ac8

08002c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <SystemInit+0x20>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <SystemInit+0x20>)
 8002c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cb8:	f7ff ffea 	bl	8002c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cbe:	490d      	ldr	r1, [pc, #52]	; (8002cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <LoopForever+0xe>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc4:	e002      	b.n	8002ccc <LoopCopyDataInit>

08002cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cca:	3304      	adds	r3, #4

08002ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd0:	d3f9      	bcc.n	8002cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	; (8002d00 <LoopForever+0x16>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd8:	e001      	b.n	8002cde <LoopFillZerobss>

08002cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cdc:	3204      	adds	r2, #4

08002cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce0:	d3fb      	bcc.n	8002cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ce2:	f009 faf3 	bl	800c2cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ce6:	f7fe febf 	bl	8001a68 <main>

08002cea <LoopForever>:

LoopForever:
    b LoopForever
 8002cea:	e7fe      	b.n	8002cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002cf8:	08012bf0 	.word	0x08012bf0
  ldr r2, =_sbss
 8002cfc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002d00:	20000ac8 	.word	0x20000ac8

08002d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC1_2_IRQHandler>

08002d06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 f961 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d16:	200f      	movs	r0, #15
 8002d18:	f000 f80e 	bl	8002d38 <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	71fb      	strb	r3, [r7, #7]
 8002d26:	e001      	b.n	8002d2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d28:	f7ff fd58 	bl	80027dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_InitTick+0x6c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d023      	beq.n	8002d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_InitTick+0x70>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_InitTick+0x6c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f96d 	bl	8003042 <HAL_SYSTICK_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d809      	bhi.n	8002d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 f937 	bl	8002fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_InitTick+0x74>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e007      	b.n	8002d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e004      	b.n	8002d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e001      	b.n	8002d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000018 	.word	0x20000018
 8002da8:	20000010 	.word	0x20000010
 8002dac:	20000014 	.word	0x20000014

08002db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x20>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_IncTick+0x24>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_IncTick+0x24>)
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000018 	.word	0x20000018
 8002dd4:	20000930 	.word	0x20000930

08002dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return uwTick;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_GetTick+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000930 	.word	0x20000930

08002df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff ffee 	bl	8002dd8 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d005      	beq.n	8002e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_Delay+0x44>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e16:	bf00      	nop
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d8f7      	bhi.n	8002e18 <HAL_Delay+0x28>
  {
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000018 	.word	0x20000018

08002e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6a:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60d3      	str	r3, [r2, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <__NVIC_GetPriorityGrouping+0x18>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 0307 	and.w	r3, r3, #7
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db0b      	blt.n	8002ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	4907      	ldr	r1, [pc, #28]	; (8002ed4 <__NVIC_EnableIRQ+0x38>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f7ff ff8e 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff29 	bl	8002e38 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003000:	f7ff ff3e 	bl	8002e80 <__NVIC_GetPriorityGrouping>
 8003004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff ff8e 	bl	8002f2c <NVIC_EncodePriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff5d 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff31 	bl	8002e9c <__NVIC_EnableIRQ>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffa2 	bl	8002f94 <SysTick_Config>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d008      	beq.n	8003084 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e022      	b.n	80030ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 020e 	bic.w	r2, r2, #14
 8003092:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f003 021c 	and.w	r2, r3, #28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f202 	lsl.w	r2, r1, r2
 80030b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d005      	beq.n	80030fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2204      	movs	r2, #4
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e029      	b.n	800314e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 020e 	bic.w	r2, r2, #14
 8003108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f003 021c 	and.w	r2, r3, #28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2101      	movs	r1, #1
 8003128:	fa01 f202 	lsl.w	r2, r1, r2
 800312c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
    }
  }
  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003166:	e14e      	b.n	8003406 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8140 	beq.w	8003400 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d005      	beq.n	8003198 <HAL_GPIO_Init+0x40>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d130      	bne.n	80031fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ce:	2201      	movs	r2, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 0201 	and.w	r2, r3, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b03      	cmp	r3, #3
 8003204:	d017      	beq.n	8003236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2203      	movs	r2, #3
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d123      	bne.n	800328a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	6939      	ldr	r1, [r7, #16]
 8003286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0203 	and.w	r2, r3, #3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 809a 	beq.w	8003400 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_GPIO_Init+0x2cc>)
 80032ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_GPIO_Init+0x2cc>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6613      	str	r3, [r2, #96]	; 0x60
 80032d8:	4b52      	ldr	r3, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x2cc>)
 80032da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032e4:	4a50      	ldr	r2, [pc, #320]	; (8003428 <HAL_GPIO_Init+0x2d0>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	220f      	movs	r2, #15
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800330e:	d013      	beq.n	8003338 <HAL_GPIO_Init+0x1e0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a46      	ldr	r2, [pc, #280]	; (800342c <HAL_GPIO_Init+0x2d4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00d      	beq.n	8003334 <HAL_GPIO_Init+0x1dc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a45      	ldr	r2, [pc, #276]	; (8003430 <HAL_GPIO_Init+0x2d8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <HAL_GPIO_Init+0x1d8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a44      	ldr	r2, [pc, #272]	; (8003434 <HAL_GPIO_Init+0x2dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_GPIO_Init+0x1d4>
 8003328:	2303      	movs	r3, #3
 800332a:	e006      	b.n	800333a <HAL_GPIO_Init+0x1e2>
 800332c:	2307      	movs	r3, #7
 800332e:	e004      	b.n	800333a <HAL_GPIO_Init+0x1e2>
 8003330:	2302      	movs	r3, #2
 8003332:	e002      	b.n	800333a <HAL_GPIO_Init+0x1e2>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_GPIO_Init+0x1e2>
 8003338:	2300      	movs	r3, #0
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	f002 0203 	and.w	r2, r2, #3
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	4093      	lsls	r3, r2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800334a:	4937      	ldr	r1, [pc, #220]	; (8003428 <HAL_GPIO_Init+0x2d0>)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003358:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800337c:	4a2e      	ldr	r2, [pc, #184]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003382:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a6:	4a24      	ldr	r2, [pc, #144]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033fa:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_GPIO_Init+0x2e0>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f aea9 	bne.w	8003168 <HAL_GPIO_Init+0x10>
  }
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40021000 	.word	0x40021000
 8003428:	40010000 	.word	0x40010000
 800342c:	48000400 	.word	0x48000400
 8003430:	48000800 	.word	0x48000800
 8003434:	48000c00 	.word	0x48000c00
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003458:	e002      	b.n	8003460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	041a      	lsls	r2, r3, #16
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	43d9      	mvns	r1, r3
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	400b      	ands	r3, r1
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	619a      	str	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e08d      	b.n	80035ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff f9ac 	bl	8002824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e006      	b.n	8003528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d108      	bne.n	8003542 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	e007      	b.n	8003552 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	817b      	strh	r3, [r7, #10]
 80035ea:	460b      	mov	r3, r1
 80035ec:	813b      	strh	r3, [r7, #8]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	f040 80f9 	bne.w	80037f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_I2C_Mem_Write+0x34>
 8003606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0ed      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_I2C_Mem_Write+0x4e>
 8003622:	2302      	movs	r3, #2
 8003624:	e0e6      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800362e:	f7ff fbd3 	bl	8002dd8 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2319      	movs	r3, #25
 800363a:	2201      	movs	r2, #1
 800363c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fbcd 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0d1      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2221      	movs	r2, #33	; 0x21
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003678:	88f8      	ldrh	r0, [r7, #6]
 800367a:	893a      	ldrh	r2, [r7, #8]
 800367c:	8979      	ldrh	r1, [r7, #10]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4603      	mov	r3, r0
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fadd 	bl	8003c48 <I2C_RequestMemoryWrite>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0a9      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2bff      	cmp	r3, #255	; 0xff
 80036a8:	d90e      	bls.n	80036c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	22ff      	movs	r2, #255	; 0xff
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	8979      	ldrh	r1, [r7, #10]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fd47 	bl	8004154 <I2C_TransferConfig>
 80036c6:	e00f      	b.n	80036e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	8979      	ldrh	r1, [r7, #10]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fd36 	bl	8004154 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fbc6 	bl	8003e7e <I2C_WaitOnTXISFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e07b      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d034      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x1c8>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d130      	bne.n	80037a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fb49 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04d      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d90e      	bls.n	8003780 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fceb 	bl	8004154 <I2C_TransferConfig>
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	b2da      	uxtb	r2, r3
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fcda 	bl	8004154 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d19e      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fbac 	bl	8003f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e01a      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2220      	movs	r2, #32
 80037c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_I2C_Mem_Write+0x224>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
  }
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	fe00e800 	.word	0xfe00e800

08003800 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 80fd 	bne.w	8003a22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_I2C_Mem_Read+0x34>
 800382e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0f1      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2C_Mem_Read+0x4e>
 800384a:	2302      	movs	r3, #2
 800384c:	e0ea      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003856:	f7ff fabf 	bl	8002dd8 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2319      	movs	r3, #25
 8003862:	2201      	movs	r2, #1
 8003864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fab9 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0d5      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a0:	88f8      	ldrh	r0, [r7, #6]
 80038a2:	893a      	ldrh	r2, [r7, #8]
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4603      	mov	r3, r0
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fa1d 	bl	8003cf0 <I2C_RequestMemoryRead>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0ad      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2bff      	cmp	r3, #255	; 0xff
 80038d0:	d90e      	bls.n	80038f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <HAL_I2C_Mem_Read+0x22c>)
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fc33 	bl	8004154 <I2C_TransferConfig>
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_I2C_Mem_Read+0x22c>)
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fc22 	bl	8004154 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2200      	movs	r2, #0
 8003918:	2104      	movs	r1, #4
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fa60 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07c      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d034      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x1d0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d130      	bne.n	80039d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fa31 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e04d      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2bff      	cmp	r3, #255	; 0xff
 8003990:	d90e      	bls.n	80039b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fbd3 	bl	8004154 <I2C_TransferConfig>
 80039ae:	e00f      	b.n	80039d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	8979      	ldrh	r1, [r7, #10]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fbc2 	bl	8004154 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d19a      	bne.n	8003910 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fa94 	bl	8003f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e01a      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2220      	movs	r2, #32
 80039f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_I2C_Mem_Read+0x230>)
 8003a02:	400b      	ands	r3, r1
 8003a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	80002400 	.word	0x80002400
 8003a30:	fe00e800 	.word	0xfe00e800

08003a34 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	460b      	mov	r3, r1
 8003a42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	f040 80f3 	bne.w	8003c3c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0e9      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2C_IsDeviceReady+0x44>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e0e2      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_IsDeviceReady+0x72>
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aa4:	e006      	b.n	8003ab4 <HAL_I2C_IsDeviceReady+0x80>
 8003aa6:	897b      	ldrh	r3, [r7, #10]
 8003aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003aba:	f7ff f98d 	bl	8002dd8 <HAL_GetTick>
 8003abe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003aec:	e034      	b.n	8003b58 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d01a      	beq.n	8003b2c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7ff f96f 	bl	8002dd8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <HAL_I2C_IsDeviceReady+0xd8>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e088      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_I2C_IsDeviceReady+0x130>
 8003b5e:	7fbb      	ldrb	r3, [r7, #30]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0c4      	beq.n	8003aee <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d01a      	beq.n	8003ba8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f92f 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e058      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2220      	movs	r2, #32
 8003b92:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e04a      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f914 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03d      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d118      	bne.n	8003c0c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f8f3 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e01c      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f63f af39 	bhi.w	8003a8e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	4608      	mov	r0, r1
 8003c52:	4611      	mov	r1, r2
 8003c54:	461a      	mov	r2, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	817b      	strh	r3, [r7, #10]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	813b      	strh	r3, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	8979      	ldrh	r1, [r7, #10]
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <I2C_RequestMemoryWrite+0xa4>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa6f 	bl	8004154 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8ff 	bl	8003e7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02c      	b.n	8003ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c90:	893b      	ldrh	r3, [r7, #8]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
 8003c9a:	e015      	b.n	8003cc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c9c:	893b      	ldrh	r3, [r7, #8]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	69b9      	ldr	r1, [r7, #24]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8e5 	bl	8003e7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e012      	b.n	8003ce4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbe:	893b      	ldrh	r3, [r7, #8]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f884 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	80002000 	.word	0x80002000

08003cf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	8979      	ldrh	r1, [r7, #10]
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <I2C_RequestMemoryRead+0xa4>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fa1c 	bl	8004154 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	69b9      	ldr	r1, [r7, #24]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8ac 	bl	8003e7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e02c      	b.n	8003d8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d36:	893b      	ldrh	r3, [r7, #8]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d40:	e015      	b.n	8003d6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f892 	bl	8003e7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e012      	b.n	8003d8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2140      	movs	r1, #64	; 0x40
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f831 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	80002000 	.word	0x80002000

08003d98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d103      	bne.n	8003db6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d007      	beq.n	8003dd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	619a      	str	r2, [r3, #24]
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df0:	e031      	b.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d02d      	beq.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7fe ffed 	bl	8002dd8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d122      	bne.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d113      	bne.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e00f      	b.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d0be      	beq.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e8a:	e033      	b.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f87f 	bl	8003f94 <I2C_IsErrorOccurred>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e031      	b.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d025      	beq.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fe ff96 	bl	8002dd8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11a      	bne.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d013      	beq.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e007      	b.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d1c4      	bne.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f18:	e02f      	b.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f838 	bl	8003f94 <I2C_IsErrorOccurred>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e02d      	b.n	8003f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2e:	f7fe ff53 	bl	8002dd8 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d302      	bcc.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11a      	bne.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d013      	beq.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e007      	b.n	8003f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d1c8      	bne.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d068      	beq.n	8004092 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc8:	e049      	b.n	800405e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d045      	beq.n	800405e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fe ff01 	bl	8002dd8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_IsErrorOccurred+0x54>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d13a      	bne.n	800405e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ffa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400a:	d121      	bne.n	8004050 <I2C_IsErrorOccurred+0xbc>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004012:	d01d      	beq.n	8004050 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b20      	cmp	r3, #32
 8004018:	d01a      	beq.n	8004050 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004028:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800402a:	f7fe fed5 	bl	8002dd8 <HAL_GetTick>
 800402e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004030:	e00e      	b.n	8004050 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004032:	f7fe fed1 	bl	8002dd8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b19      	cmp	r3, #25
 800403e:	d907      	bls.n	8004050 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f043 0320 	orr.w	r3, r3, #32
 8004046:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800404e:	e006      	b.n	800405e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d1e9      	bne.n	8004032 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d003      	beq.n	8004074 <I2C_IsErrorOccurred+0xe0>
 800406c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0aa      	beq.n	8003fca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2220      	movs	r2, #32
 8004082:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f043 0302 	orr.w	r3, r3, #2
 80040ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01c      	beq.n	8004142 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7ff fe45 	bl	8003d98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <I2C_IsErrorOccurred+0x1bc>)
 800411a:	400b      	ands	r3, r1
 800411c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004146:	4618      	mov	r0, r3
 8004148:	3728      	adds	r7, #40	; 0x28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	fe00e800 	.word	0xfe00e800

08004154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	4613      	mov	r3, r2
 8004164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800416c:	7a7b      	ldrb	r3, [r7, #9]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004174:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4313      	orrs	r3, r2
 800417e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004182:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	0d5b      	lsrs	r3, r3, #21
 800418e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <I2C_TransferConfig+0x60>)
 8004194:	430b      	orrs	r3, r1
 8004196:	43db      	mvns	r3, r3
 8004198:	ea02 0103 	and.w	r1, r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	03ff63ff 	.word	0x03ff63ff

080041b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d138      	bne.n	8004240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041d8:	2302      	movs	r3, #2
 80041da:	e032      	b.n	8004242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800420a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b20      	cmp	r3, #32
 8004262:	d139      	bne.n	80042d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800426e:	2302      	movs	r3, #2
 8004270:	e033      	b.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2224      	movs	r2, #36	; 0x24
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_PWREx_GetVoltageRange+0x18>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40007000 	.word	0x40007000

08004304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004312:	d130      	bne.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004320:	d038      	beq.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004332:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2232      	movs	r2, #50	; 0x32
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0c9b      	lsrs	r3, r3, #18
 8004344:	3301      	adds	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004348:	e002      	b.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b01      	subs	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004350:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d102      	bne.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f2      	bne.n	800434a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d110      	bne.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e00f      	b.n	8004396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004382:	d007      	beq.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800438c:	4a05      	ldr	r2, [pc, #20]	; (80043a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800438e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40007000 	.word	0x40007000
 80043a8:	20000010 	.word	0x20000010
 80043ac:	431bde83 	.word	0x431bde83

080043b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f000 bc4f 	b.w	8004c62 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c4:	4b97      	ldr	r3, [pc, #604]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ce:	4b95      	ldr	r3, [pc, #596]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80e6 	beq.w	80045b2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HAL_RCC_OscConfig+0x4c>
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	f040 808d 	bne.w	800450e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	f040 8089 	bne.w	800450e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fc:	4b89      	ldr	r3, [pc, #548]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <HAL_RCC_OscConfig+0x66>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f000 bc26 	b.w	8004c62 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441a:	4b82      	ldr	r3, [pc, #520]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_RCC_OscConfig+0x80>
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442e:	e005      	b.n	800443c <HAL_RCC_OscConfig+0x8c>
 8004430:	4b7c      	ldr	r3, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	4293      	cmp	r3, r2
 800443e:	d224      	bcs.n	800448a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fdd9 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f000 bc06 	b.w	8004c62 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004456:	4b73      	ldr	r3, [pc, #460]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a72      	ldr	r2, [pc, #456]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800445c:	f043 0308 	orr.w	r3, r3, #8
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	496d      	ldr	r1, [pc, #436]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004474:	4b6b      	ldr	r3, [pc, #428]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4968      	ldr	r1, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
 8004488:	e025      	b.n	80044d6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800448a:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a65      	ldr	r2, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004490:	f043 0308 	orr.w	r3, r3, #8
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b63      	ldr	r3, [pc, #396]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	4960      	ldr	r1, [pc, #384]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a8:	4b5e      	ldr	r3, [pc, #376]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	495b      	ldr	r1, [pc, #364]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fd98 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e3c5      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d6:	f000 fccd 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80044da:	4602      	mov	r2, r0
 80044dc:	4b51      	ldr	r3, [pc, #324]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	4950      	ldr	r1, [pc, #320]	; (8004628 <HAL_RCC_OscConfig+0x278>)
 80044e8:	5ccb      	ldrb	r3, [r1, r3]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	fa22 f303 	lsr.w	r3, r2, r3
 80044f2:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_RCC_OscConfig+0x27c>)
 80044f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044f6:	4b4e      	ldr	r3, [pc, #312]	; (8004630 <HAL_RCC_OscConfig+0x280>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fc1c 	bl	8002d38 <HAL_InitTick>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d052      	beq.n	80045b0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	e3a9      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d032      	beq.n	800457c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004516:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a42      	ldr	r2, [pc, #264]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004522:	f7fe fc59 	bl	8002dd8 <HAL_GetTick>
 8004526:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800452a:	f7fe fc55 	bl	8002dd8 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e392      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800453c:	4b39      	ldr	r3, [pc, #228]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004548:	4b36      	ldr	r3, [pc, #216]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a35      	ldr	r2, [pc, #212]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800454e:	f043 0308 	orr.w	r3, r3, #8
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	4930      	ldr	r1, [pc, #192]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004566:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	492b      	ldr	r1, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
 800457a:	e01a      	b.n	80045b2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800457c:	4b29      	ldr	r3, [pc, #164]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a28      	ldr	r2, [pc, #160]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004588:	f7fe fc26 	bl	8002dd8 <HAL_GetTick>
 800458c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004590:	f7fe fc22 	bl	8002dd8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e35f      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045a2:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x1e0>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d073      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_OscConfig+0x220>
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d10e      	bne.n	80045e8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d063      	beq.n	80046a4 <HAL_RCC_OscConfig+0x2f4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d15f      	bne.n	80046a4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e33c      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x250>
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e025      	b.n	800464c <HAL_RCC_OscConfig+0x29c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004608:	d114      	bne.n	8004634 <HAL_RCC_OscConfig+0x284>
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a05      	ldr	r2, [pc, #20]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a02      	ldr	r2, [pc, #8]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e013      	b.n	800464c <HAL_RCC_OscConfig+0x29c>
 8004624:	40021000 	.word	0x40021000
 8004628:	0801240c 	.word	0x0801240c
 800462c:	20000010 	.word	0x20000010
 8004630:	20000014 	.word	0x20000014
 8004634:	4b8f      	ldr	r3, [pc, #572]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a8e      	ldr	r2, [pc, #568]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	4b8c      	ldr	r3, [pc, #560]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a8b      	ldr	r2, [pc, #556]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d013      	beq.n	800467c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe fbc0 	bl	8002dd8 <HAL_GetTick>
 8004658:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fe fbbc 	bl	8002dd8 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e2f9      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466e:	4b81      	ldr	r3, [pc, #516]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x2ac>
 800467a:	e014      	b.n	80046a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fe fbac 	bl	8002dd8 <HAL_GetTick>
 8004680:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fe fba8 	bl	8002dd8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e2e5      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004696:	4b77      	ldr	r3, [pc, #476]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x2d4>
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d060      	beq.n	8004774 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_OscConfig+0x314>
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b0c      	cmp	r3, #12
 80046bc:	d119      	bne.n	80046f2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d116      	bne.n	80046f2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c4:	4b6b      	ldr	r3, [pc, #428]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_OscConfig+0x32c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e2c2      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046dc:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	4962      	ldr	r1, [pc, #392]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f0:	e040      	b.n	8004774 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d023      	beq.n	8004742 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046fa:	4b5e      	ldr	r3, [pc, #376]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5d      	ldr	r2, [pc, #372]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fe fb67 	bl	8002dd8 <HAL_GetTick>
 800470a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470e:	f7fe fb63 	bl	8002dd8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e2a0      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004720:	4b54      	ldr	r3, [pc, #336]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4b51      	ldr	r3, [pc, #324]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	494e      	ldr	r1, [pc, #312]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
 8004740:	e018      	b.n	8004774 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004742:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a4b      	ldr	r2, [pc, #300]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800474c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fe fb43 	bl	8002dd8 <HAL_GetTick>
 8004752:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004756:	f7fe fb3f 	bl	8002dd8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e27c      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004768:	4b42      	ldr	r3, [pc, #264]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8082 	beq.w	8004886 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d05f      	beq.n	800484a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800478a:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	429a      	cmp	r2, r3
 800479e:	d037      	beq.n	8004810 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d006      	beq.n	80047b8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e254      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01b      	beq.n	80047fa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80047c2:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d2:	f7fe fb01 	bl	8002dd8 <HAL_GetTick>
 80047d6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047da:	f7fe fafd 	bl	8002dd8 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b11      	cmp	r3, #17
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e23a      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ef      	bne.n	80047da <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004800:	f023 0210 	bic.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	491a      	ldr	r1, [pc, #104]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004816:	4a17      	ldr	r2, [pc, #92]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fe fada 	bl	8002dd8 <HAL_GetTick>
 8004824:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004828:	f7fe fad6 	bl	8002dd8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b11      	cmp	r3, #17
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e213      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ef      	beq.n	8004828 <HAL_RCC_OscConfig+0x478>
 8004848:	e01d      	b.n	8004886 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004850:	4a08      	ldr	r2, [pc, #32]	; (8004874 <HAL_RCC_OscConfig+0x4c4>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485a:	f7fe fabd 	bl	8002dd8 <HAL_GetTick>
 800485e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004862:	f7fe fab9 	bl	8002dd8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b11      	cmp	r3, #17
 800486e:	d903      	bls.n	8004878 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e1f6      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
 8004874:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004878:	4ba9      	ldr	r3, [pc, #676]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ed      	bne.n	8004862 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80bd 	beq.w	8004a0e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800489a:	4ba1      	ldr	r3, [pc, #644]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10e      	bne.n	80048c4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b9e      	ldr	r3, [pc, #632]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	4a9d      	ldr	r2, [pc, #628]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
 80048b2:	4b9b      	ldr	r3, [pc, #620]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c4:	4b97      	ldr	r3, [pc, #604]	; (8004b24 <HAL_RCC_OscConfig+0x774>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d118      	bne.n	8004902 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d0:	4b94      	ldr	r3, [pc, #592]	; (8004b24 <HAL_RCC_OscConfig+0x774>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a93      	ldr	r2, [pc, #588]	; (8004b24 <HAL_RCC_OscConfig+0x774>)
 80048d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048dc:	f7fe fa7c 	bl	8002dd8 <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e4:	f7fe fa78 	bl	8002dd8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e1b5      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f6:	4b8b      	ldr	r3, [pc, #556]	; (8004b24 <HAL_RCC_OscConfig+0x774>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02c      	beq.n	8004968 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800490e:	4b84      	ldr	r3, [pc, #528]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	497f      	ldr	r1, [pc, #508]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004934:	4b7a      	ldr	r3, [pc, #488]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	4a79      	ldr	r2, [pc, #484]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004944:	4b76      	ldr	r3, [pc, #472]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	4a75      	ldr	r2, [pc, #468]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004954:	e018      	b.n	8004988 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004956:	4b72      	ldr	r3, [pc, #456]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	4a70      	ldr	r2, [pc, #448]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004966:	e00f      	b.n	8004988 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004968:	4b6d      	ldr	r3, [pc, #436]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	4a6c      	ldr	r2, [pc, #432]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004978:	4b69      	ldr	r3, [pc, #420]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	4a68      	ldr	r2, [pc, #416]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fe fa22 	bl	8002dd8 <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004996:	e00a      	b.n	80049ae <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fe fa1e 	bl	8002dd8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e159      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ae:	4b5c      	ldr	r3, [pc, #368]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ed      	beq.n	8004998 <HAL_RCC_OscConfig+0x5e8>
 80049bc:	e01d      	b.n	80049fa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7fe fa0b 	bl	8002dd8 <HAL_GetTick>
 80049c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c6:	f7fe fa07 	bl	8002dd8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e142      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049dc:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ed      	bne.n	80049c6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80049ea:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 80049f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d105      	bne.n	8004a0e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a02:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	4a46      	ldr	r2, [pc, #280]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d03c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a22:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a28:	4a3d      	ldr	r2, [pc, #244]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fe f9d1 	bl	8002dd8 <HAL_GetTick>
 8004a36:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3a:	f7fe f9cd 	bl	8002dd8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e10a      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a4c:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ef      	beq.n	8004a3a <HAL_RCC_OscConfig+0x68a>
 8004a5a:	e01b      	b.n	8004a94 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a5c:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a62:	4a2f      	ldr	r2, [pc, #188]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fe f9b4 	bl	8002dd8 <HAL_GetTick>
 8004a70:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a74:	f7fe f9b0 	bl	8002dd8 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e0ed      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a86:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ef      	bne.n	8004a74 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80e1 	beq.w	8004c60 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	f040 80b5 	bne.w	8004c12 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0203 	and.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d124      	bne.n	8004b06 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d11b      	bne.n	8004b06 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d113      	bne.n	8004b06 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d05f      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d05a      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a03      	ldr	r2, [pc, #12]	; (8004b20 <HAL_RCC_OscConfig+0x770>)
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b18:	f7fe f95e 	bl	8002dd8 <HAL_GetTick>
 8004b1c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1e:	e00c      	b.n	8004b3a <HAL_RCC_OscConfig+0x78a>
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fe f956 	bl	8002dd8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e093      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b46:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <HAL_RCC_OscConfig+0x8c0>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b56:	3a01      	subs	r2, #1
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b60:	0212      	lsls	r2, r2, #8
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b68:	0852      	lsrs	r2, r2, #1
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	0552      	lsls	r2, r2, #21
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0652      	lsls	r2, r2, #25
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	493b      	ldr	r1, [pc, #236]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a39      	ldr	r2, [pc, #228]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b8e:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4a36      	ldr	r2, [pc, #216]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b98:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b9a:	f7fe f91d 	bl	8002dd8 <HAL_GetTick>
 8004b9e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba2:	f7fe f919 	bl	8002dd8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e056      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc0:	e04e      	b.n	8004c60 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e04d      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d146      	bne.n	8004c60 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bdc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bde:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bea:	f7fe f8f5 	bl	8002dd8 <HAL_GetTick>
 8004bee:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fe f8f1 	bl	8002dd8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e02e      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x842>
 8004c10:	e026      	b.n	8004c60 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	d021      	beq.n	8004c5c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fe f8d8 	bl	8002dd8 <HAL_GetTick>
 8004c28:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fe f8d4 	bl	8002dd8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e011      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_RCC_OscConfig+0x8bc>)
 8004c50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c54:	f023 0303 	bic.w	r3, r3, #3
 8004c58:	60d3      	str	r3, [r2, #12]
 8004c5a:	e001      	b.n	8004c60 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	f99f808c 	.word	0xf99f808c

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0e7      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0207 	bic.w	r2, r3, #7
 8004c9e:	4970      	ldr	r1, [pc, #448]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b6e      	ldr	r3, [pc, #440]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0cf      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d908      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b63      	ldr	r3, [pc, #396]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4960      	ldr	r1, [pc, #384]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04c      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	4b5a      	ldr	r3, [pc, #360]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d121      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0a6      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d12:	4b54      	ldr	r3, [pc, #336]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d115      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e09a      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d2a:	4b4e      	ldr	r3, [pc, #312]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e08e      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e086      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4943      	ldr	r1, [pc, #268]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5c:	f7fe f83c 	bl	8002dd8 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fe f838 	bl	8002dd8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e06e      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d208      	bcs.n	8004dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	492b      	ldr	r1, [pc, #172]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d210      	bcs.n	8004dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 0207 	bic.w	r2, r3, #7
 8004dd0:	4923      	ldr	r1, [pc, #140]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e036      	b.n	8004e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df6:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4918      	ldr	r1, [pc, #96]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4910      	ldr	r1, [pc, #64]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e28:	f000 f824 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	490b      	ldr	r1, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x1f4>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1f8>)
 8004e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_ClockConfig+0x1fc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd ff73 	bl	8002d38 <HAL_InitTick>
 8004e52:	4603      	mov	r3, r0
 8004e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40022000 	.word	0x40022000
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0801240c 	.word	0x0801240c
 8004e6c:	20000010 	.word	0x20000010
 8004e70:	20000014 	.word	0x20000014

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d121      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d11e      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ea8:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eb4:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e004      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d134      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d003      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d003      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0xac>
 8004f18:	e005      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f1a:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f1c:	617b      	str	r3, [r7, #20]
      break;
 8004f1e:	e005      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f22:	617b      	str	r3, [r7, #20]
      break;
 8004f24:	e002      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	617b      	str	r3, [r7, #20]
      break;
 8004f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f2c:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	3301      	adds	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	0a1b      	lsrs	r3, r3, #8
 8004f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	fb03 f202 	mul.w	r2, r3, r2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	0e5b      	lsrs	r3, r3, #25
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08012424 	.word	0x08012424
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000010 	.word	0x20000010

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fa8:	f7ff fff0 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4904      	ldr	r1, [pc, #16]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	0801241c 	.word	0x0801241c

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fd4:	f7ff ffda 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0adb      	lsrs	r3, r3, #11
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	0801241c 	.word	0x0801241c

08004ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005014:	f7ff f968 	bl	80042e8 <HAL_PWREx_GetVoltageRange>
 8005018:	6178      	str	r0, [r7, #20]
 800501a:	e014      	b.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800501c:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005026:	6593      	str	r3, [r2, #88]	; 0x58
 8005028:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005034:	f7ff f958 	bl	80042e8 <HAL_PWREx_GetVoltageRange>
 8005038:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d10b      	bne.n	8005066 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d919      	bls.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2ba0      	cmp	r3, #160	; 0xa0
 8005058:	d902      	bls.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800505a:	2302      	movs	r3, #2
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	e013      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005060:	2301      	movs	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e010      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d902      	bls.n	8005072 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800506c:	2303      	movs	r3, #3
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e00a      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b80      	cmp	r3, #128	; 0x80
 8005076:	d102      	bne.n	800507e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005078:	2302      	movs	r3, #2
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e004      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d101      	bne.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005084:	2301      	movs	r3, #1
 8005086:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 0207 	bic.w	r2, r3, #7
 8005090:	4909      	ldr	r1, [pc, #36]	; (80050b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40022000 	.word	0x40022000

080050bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c4:	2300      	movs	r3, #0
 80050c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050c8:	2300      	movs	r3, #0
 80050ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 809e 	beq.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050da:	2300      	movs	r3, #0
 80050dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050de:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f4:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	4a3f      	ldr	r2, [pc, #252]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510c:	2301      	movs	r3, #1
 800510e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005110:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a39      	ldr	r2, [pc, #228]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511c:	f7fd fe5c 	bl	8002dd8 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005122:	e009      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005124:	f7fd fe58 	bl	8002dd8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d902      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	74fb      	strb	r3, [r7, #19]
        break;
 8005136:	e005      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005138:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ef      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d15a      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800514a:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005154:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01e      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	429a      	cmp	r2, r3
 8005164:	d019      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005172:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800517a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	4a1b      	ldr	r2, [pc, #108]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005192:	4a19      	ldr	r2, [pc, #100]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d016      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd fe18 	bl	8002dd8 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051aa:	e00b      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ac:	f7fd fe14 	bl	8002dd8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d902      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	74fb      	strb	r3, [r7, #19]
            break;
 80051c2:	e006      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ec      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d8:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4904      	ldr	r1, [pc, #16]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051ee:	e009      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005204:	7c7b      	ldrb	r3, [r7, #17]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4b6e      	ldr	r3, [pc, #440]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	4a6d      	ldr	r2, [pc, #436]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005222:	4b68      	ldr	r3, [pc, #416]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f023 0203 	bic.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4964      	ldr	r1, [pc, #400]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005244:	4b5f      	ldr	r3, [pc, #380]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f023 020c 	bic.w	r2, r3, #12
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	495c      	ldr	r1, [pc, #368]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005266:	4b57      	ldr	r3, [pc, #348]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4953      	ldr	r1, [pc, #332]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005288:	4b4e      	ldr	r3, [pc, #312]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	494b      	ldr	r1, [pc, #300]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052aa:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4942      	ldr	r1, [pc, #264]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052cc:	4b3d      	ldr	r3, [pc, #244]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	493a      	ldr	r1, [pc, #232]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ee:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	4931      	ldr	r1, [pc, #196]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005310:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	4929      	ldr	r1, [pc, #164]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	4920      	ldr	r1, [pc, #128]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005354:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	4918      	ldr	r1, [pc, #96]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005372:	d105      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800538c:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	490a      	ldr	r1, [pc, #40]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000

080053c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e095      	b.n	8005506 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ea:	d009      	beq.n	8005400 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	61da      	str	r2, [r3, #28]
 80053f2:	e005      	b.n	8005400 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd fa9c 	bl	8002958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005436:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005440:	d902      	bls.n	8005448 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e002      	b.n	800544e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800544c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005456:	d007      	beq.n	8005468 <HAL_SPI_Init+0xa0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	ea42 0103 	orr.w	r1, r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	0c1b      	lsrs	r3, r3, #16
 80054c4:	f003 0204 	and.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054e4:	ea42 0103 	orr.w	r1, r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b088      	sub	sp, #32
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_Transmit+0x22>
 800552c:	2302      	movs	r3, #2
 800552e:	e15f      	b.n	80057f0 <HAL_SPI_Transmit+0x2e2>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fd fc4e 	bl	8002dd8 <HAL_GetTick>
 800553c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d002      	beq.n	8005554 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800554e:	2302      	movs	r3, #2
 8005550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005552:	e148      	b.n	80057e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Transmit+0x52>
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005564:	e13f      	b.n	80057e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2203      	movs	r2, #3
 800556a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b0:	d10f      	bne.n	80055d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d007      	beq.n	80055f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f8:	d94f      	bls.n	800569a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_SPI_Transmit+0xfa>
 8005602:	8afb      	ldrh	r3, [r7, #22]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d142      	bne.n	800568e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800562c:	e02f      	b.n	800568e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	d112      	bne.n	8005662 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	1c9a      	adds	r2, r3, #2
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005660:	e015      	b.n	800568e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005662:	f7fd fbb9 	bl	8002dd8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d803      	bhi.n	800567a <HAL_SPI_Transmit+0x16c>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d102      	bne.n	8005680 <HAL_SPI_Transmit+0x172>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800568c:	e0ab      	b.n	80057e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1ca      	bne.n	800562e <HAL_SPI_Transmit+0x120>
 8005698:	e080      	b.n	800579c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0x19a>
 80056a2:	8afb      	ldrh	r3, [r7, #22]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d174      	bne.n	8005792 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d912      	bls.n	80056d8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	881a      	ldrh	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b02      	subs	r3, #2
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d6:	e05c      	b.n	8005792 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056fe:	e048      	b.n	8005792 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d12b      	bne.n	8005766 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	d912      	bls.n	800573e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b02      	subs	r3, #2
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800573c:	e029      	b.n	8005792 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005764:	e015      	b.n	8005792 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005766:	f7fd fb37 	bl	8002dd8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d803      	bhi.n	800577e <HAL_SPI_Transmit+0x270>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d102      	bne.n	8005784 <HAL_SPI_Transmit+0x276>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005790:	e029      	b.n	80057e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1b1      	bne.n	8005700 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fb69 	bl	8005e78 <SPI_EndRxTxTransaction>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e003      	b.n	80057e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005806:	2301      	movs	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_SPI_TransmitReceive+0x26>
 800581a:	2302      	movs	r3, #2
 800581c:	e20a      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x43c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005826:	f7fd fad7 	bl	8002dd8 <HAL_GetTick>
 800582a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005832:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800583a:	887b      	ldrh	r3, [r7, #2]
 800583c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800583e:	887b      	ldrh	r3, [r7, #2]
 8005840:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005842:	7efb      	ldrb	r3, [r7, #27]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d00e      	beq.n	8005866 <HAL_SPI_TransmitReceive+0x6e>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d106      	bne.n	800585e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <HAL_SPI_TransmitReceive+0x66>
 8005858:	7efb      	ldrb	r3, [r7, #27]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d003      	beq.n	8005866 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800585e:	2302      	movs	r3, #2
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005864:	e1e0      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x80>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x80>
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d103      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800587e:	e1d3      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b04      	cmp	r3, #4
 800588a:	d003      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2205      	movs	r2, #5
 8005890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	887a      	ldrh	r2, [r7, #2]
 80058a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	887a      	ldrh	r2, [r7, #2]
 80058ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058d6:	d802      	bhi.n	80058de <HAL_SPI_TransmitReceive+0xe6>
 80058d8:	8a3b      	ldrh	r3, [r7, #16]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d908      	bls.n	80058f0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	e007      	b.n	8005900 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d007      	beq.n	800591e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005926:	f240 8081 	bls.w	8005a2c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x140>
 8005932:	8a7b      	ldrh	r3, [r7, #18]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d16d      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595c:	e05a      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11b      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x1ac>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x1ac>
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	2b01      	cmp	r3, #1
 800597a:	d113      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d11c      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x1f4>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	b292      	uxth	r2, r2
 80059ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e8:	2301      	movs	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ec:	f7fd f9f4 	bl	8002dd8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d80b      	bhi.n	8005a14 <HAL_SPI_TransmitReceive+0x21c>
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005a12:	e109      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19f      	bne.n	800595e <HAL_SPI_TransmitReceive+0x166>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d199      	bne.n	800595e <HAL_SPI_TransmitReceive+0x166>
 8005a2a:	e0e3      	b.n	8005bf4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x244>
 8005a34:	8a7b      	ldrh	r3, [r7, #18]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	f040 80cf 	bne.w	8005bda <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d912      	bls.n	8005a6c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	881a      	ldrh	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	1c9a      	adds	r2, r3, #2
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b02      	subs	r3, #2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a6a:	e0b6      	b.n	8005bda <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a92:	e0a2      	b.n	8005bda <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d134      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x314>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d02f      	beq.n	8005b0c <HAL_SPI_TransmitReceive+0x314>
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d12c      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d912      	bls.n	8005ae2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b02      	subs	r3, #2
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae0:	e012      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d148      	bne.n	8005bac <HAL_SPI_TransmitReceive+0x3b4>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d042      	beq.n	8005bac <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d923      	bls.n	8005b7a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b02      	subs	r3, #2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d81f      	bhi.n	8005ba8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	e016      	b.n	8005ba8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f103 020c 	add.w	r2, r3, #12
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	7812      	ldrb	r2, [r2, #0]
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bac:	f7fd f914 	bl	8002dd8 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d803      	bhi.n	8005bc4 <HAL_SPI_TransmitReceive+0x3cc>
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d102      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x3d2>
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005bd8:	e026      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f af57 	bne.w	8005a94 <HAL_SPI_TransmitReceive+0x29c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f47f af50 	bne.w	8005a94 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f93d 	bl	8005e78 <SPI_EndRxTxTransaction>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1e:	e003      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3728      	adds	r7, #40	; 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c4c:	f7fd f8c4 	bl	8002dd8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c5c:	f7fd f8bc 	bl	8002dd8 <HAL_GetTick>
 8005c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c62:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	0d1b      	lsrs	r3, r3, #20
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c72:	e054      	b.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7a:	d050      	beq.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c7c:	f7fd f8ac 	bl	8002dd8 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d902      	bls.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d13d      	bne.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005caa:	d111      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	d004      	beq.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbe:	d107      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd8:	d10f      	bne.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e017      	b.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d19b      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000010 	.word	0x20000010

08005d4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d5e:	f7fd f83b 	bl	8002dd8 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d6e:	f7fd f833 	bl	8002dd8 <HAL_GetTick>
 8005d72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d7c:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00da      	lsls	r2, r3, #3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	0d1b      	lsrs	r3, r3, #20
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d94:	e060      	b.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d9c:	d107      	bne.n	8005dae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d050      	beq.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005db6:	f7fd f80f 	bl	8002dd8 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d902      	bls.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d13d      	bne.n	8005e48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de4:	d111      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dee:	d004      	beq.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d107      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d10f      	bne.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e010      	b.n	8005e6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d196      	bne.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3728      	adds	r7, #40	; 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000010 	.word	0x20000010

08005e78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff ff5b 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e027      	b.n	8005efc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff fec0 	bl	8005c3c <SPI_WaitFlagStateUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	f043 0220 	orr.w	r2, r3, #32
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e014      	b.n	8005efc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff ff34 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e000      	b.n	8005efc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e040      	b.n	8005f98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fc fd58 	bl	80029dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fdd8 	bl	8006b00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fb7b 	bl	800664c <UART_SetConfig>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e01b      	b.n	8005f98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fe57 	bl	8006c44 <UART_CheckIdleState>
 8005f96:	4603      	mov	r3, r0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d137      	bne.n	8006028 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Receive_IT+0x24>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e030      	b.n	800602a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a18      	ldr	r2, [pc, #96]	; (8006034 <HAL_UART_Receive_IT+0x94>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d01f      	beq.n	8006018 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	61bb      	str	r3, [r7, #24]
   return(result);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e6      	bne.n	8005fe6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	461a      	mov	r2, r3
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 ff20 	bl	8006e64 <UART_Start_Receive_IT>
 8006024:	4603      	mov	r3, r0
 8006026:	e000      	b.n	800602a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
  }
}
 800602a:	4618      	mov	r0, r3
 800602c:	3728      	adds	r7, #40	; 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40008000 	.word	0x40008000

08006038 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b0ba      	sub	sp, #232	; 0xe8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800605e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006062:	f640 030f 	movw	r3, #2063	; 0x80f
 8006066:	4013      	ands	r3, r2
 8006068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800606c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d115      	bne.n	80060a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 82ae 	beq.w	80065f2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      }
      return;
 800609e:	e2a8      	b.n	80065f2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80060a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8117 	beq.w	80062d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060ba:	4b85      	ldr	r3, [pc, #532]	; (80062d0 <HAL_UART_IRQHandler+0x298>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 810a 	beq.w	80062d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0xbc>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <HAL_UART_IRQHandler+0xec>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2202      	movs	r2, #2
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d011      	beq.n	8006154 <HAL_UART_IRQHandler+0x11c>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2204      	movs	r2, #4
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800616c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006170:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_UART_IRQHandler+0x18a>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8214 	beq.w	80065f6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800620e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006212:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006216:	2b00      	cmp	r3, #0
 8006218:	d04f      	beq.n	80062ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fee8 	bl	8006ff0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d141      	bne.n	80062b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800625a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800625e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1d9      	bne.n	800622e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627e:	2b00      	cmp	r3, #0
 8006280:	d013      	beq.n	80062aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006286:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <HAL_UART_IRQHandler+0x29c>)
 8006288:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628e:	4618      	mov	r0, r3
 8006290:	f7fc ff21 	bl	80030d6 <HAL_DMA_Abort_IT>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d017      	beq.n	80062ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	e00f      	b.n	80062ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f9b8 	bl	8006620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	e00b      	b.n	80062ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9b4 	bl	8006620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	e007      	b.n	80062ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9b0 	bl	8006620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80062c8:	e195      	b.n	80065f6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ca:	bf00      	nop
    return;
 80062cc:	e193      	b.n	80065f6 <HAL_UART_IRQHandler+0x5be>
 80062ce:	bf00      	nop
 80062d0:	04000120 	.word	0x04000120
 80062d4:	080070b9 	.word	0x080070b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f040 814e 	bne.w	800657e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8147 	beq.w	800657e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8140 	beq.w	800657e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2210      	movs	r2, #16
 8006304:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	f040 80b8 	bne.w	8006486 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006322:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8167 	beq.w	80065fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006336:	429a      	cmp	r2, r3
 8006338:	f080 815f 	bcs.w	80065fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 8086 	bne.w	8006464 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800636c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006386:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800638e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800639a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1da      	bne.n	8006358 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e1      	bne.n	80063a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006402:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006404:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e3      	bne.n	80063de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006434:	f023 0310 	bic.w	r3, r3, #16
 8006438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006446:	65bb      	str	r3, [r7, #88]	; 0x58
 8006448:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800644c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e4      	bne.n	8006424 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645e:	4618      	mov	r0, r3
 8006460:	f7fc fdfb 	bl	800305a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006476:	b29b      	uxth	r3, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	b29b      	uxth	r3, r3
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8d8 	bl	8006634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006484:	e0b9      	b.n	80065fa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006492:	b29b      	uxth	r3, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80ab 	beq.w	80065fe <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80064a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80a6 	beq.w	80065fe <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e4      	bne.n	80064b2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	623b      	str	r3, [r7, #32]
   return(result);
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800650c:	633a      	str	r2, [r7, #48]	; 0x30
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	60fb      	str	r3, [r7, #12]
   return(result);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	69b9      	ldr	r1, [r7, #24]
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	617b      	str	r3, [r7, #20]
   return(result);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e4      	bne.n	8006534 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f85c 	bl	8006634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800657c:	e03f      	b.n	80065fe <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <HAL_UART_IRQHandler+0x570>
 800658a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800659e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 ff85 	bl	80074b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065a6:	e02d      	b.n	8006604 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00e      	beq.n	80065d2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01c      	beq.n	8006602 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
    }
    return;
 80065d0:	e017      	b.n	8006602 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d012      	beq.n	8006604 <HAL_UART_IRQHandler+0x5cc>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00c      	beq.n	8006604 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fd7a 	bl	80070e4 <UART_EndTransmit_IT>
    return;
 80065f0:	e008      	b.n	8006604 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065f2:	bf00      	nop
 80065f4:	e006      	b.n	8006604 <HAL_UART_IRQHandler+0x5cc>
    return;
 80065f6:	bf00      	nop
 80065f8:	e004      	b.n	8006604 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006602:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006604:	37e8      	adds	r7, #232	; 0xe8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop

0800660c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006650:	b08a      	sub	sp, #40	; 0x28
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	431a      	orrs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	4313      	orrs	r3, r2
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b9e      	ldr	r3, [pc, #632]	; (80068f4 <UART_SetConfig+0x2a8>)
 800667c:	4013      	ands	r3, r2
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006684:	430b      	orrs	r3, r1
 8006686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a93      	ldr	r2, [pc, #588]	; (80068f8 <UART_SetConfig+0x2ac>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	4313      	orrs	r3, r2
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	430a      	orrs	r2, r1
 80066ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a8a      	ldr	r2, [pc, #552]	; (80068fc <UART_SetConfig+0x2b0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d126      	bne.n	8006724 <UART_SetConfig+0xd8>
 80066d6:	4b8a      	ldr	r3, [pc, #552]	; (8006900 <UART_SetConfig+0x2b4>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d81b      	bhi.n	800671c <UART_SetConfig+0xd0>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0xa0>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	080066fd 	.word	0x080066fd
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	08006705 	.word	0x08006705
 80066f8:	08006715 	.word	0x08006715
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e0ab      	b.n	800685c <UART_SetConfig+0x210>
 8006704:	2302      	movs	r3, #2
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670a:	e0a7      	b.n	800685c <UART_SetConfig+0x210>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e0a3      	b.n	800685c <UART_SetConfig+0x210>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e09f      	b.n	800685c <UART_SetConfig+0x210>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e09b      	b.n	800685c <UART_SetConfig+0x210>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a76      	ldr	r2, [pc, #472]	; (8006904 <UART_SetConfig+0x2b8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d138      	bne.n	80067a0 <UART_SetConfig+0x154>
 800672e:	4b74      	ldr	r3, [pc, #464]	; (8006900 <UART_SetConfig+0x2b4>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	f003 030c 	and.w	r3, r3, #12
 8006738:	2b0c      	cmp	r3, #12
 800673a:	d82d      	bhi.n	8006798 <UART_SetConfig+0x14c>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0xf8>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006779 	.word	0x08006779
 8006748:	08006799 	.word	0x08006799
 800674c:	08006799 	.word	0x08006799
 8006750:	08006799 	.word	0x08006799
 8006754:	08006789 	.word	0x08006789
 8006758:	08006799 	.word	0x08006799
 800675c:	08006799 	.word	0x08006799
 8006760:	08006799 	.word	0x08006799
 8006764:	08006781 	.word	0x08006781
 8006768:	08006799 	.word	0x08006799
 800676c:	08006799 	.word	0x08006799
 8006770:	08006799 	.word	0x08006799
 8006774:	08006791 	.word	0x08006791
 8006778:	2300      	movs	r3, #0
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e06d      	b.n	800685c <UART_SetConfig+0x210>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e069      	b.n	800685c <UART_SetConfig+0x210>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e065      	b.n	800685c <UART_SetConfig+0x210>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e061      	b.n	800685c <UART_SetConfig+0x210>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e05d      	b.n	800685c <UART_SetConfig+0x210>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a58      	ldr	r2, [pc, #352]	; (8006908 <UART_SetConfig+0x2bc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d125      	bne.n	80067f6 <UART_SetConfig+0x1aa>
 80067aa:	4b55      	ldr	r3, [pc, #340]	; (8006900 <UART_SetConfig+0x2b4>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d016      	beq.n	80067e6 <UART_SetConfig+0x19a>
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	d818      	bhi.n	80067ee <UART_SetConfig+0x1a2>
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d00a      	beq.n	80067d6 <UART_SetConfig+0x18a>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d814      	bhi.n	80067ee <UART_SetConfig+0x1a2>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <UART_SetConfig+0x182>
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d008      	beq.n	80067de <UART_SetConfig+0x192>
 80067cc:	e00f      	b.n	80067ee <UART_SetConfig+0x1a2>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e042      	b.n	800685c <UART_SetConfig+0x210>
 80067d6:	2302      	movs	r3, #2
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067dc:	e03e      	b.n	800685c <UART_SetConfig+0x210>
 80067de:	2304      	movs	r3, #4
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e4:	e03a      	b.n	800685c <UART_SetConfig+0x210>
 80067e6:	2308      	movs	r3, #8
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ec:	e036      	b.n	800685c <UART_SetConfig+0x210>
 80067ee:	2310      	movs	r3, #16
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f4:	e032      	b.n	800685c <UART_SetConfig+0x210>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a3f      	ldr	r2, [pc, #252]	; (80068f8 <UART_SetConfig+0x2ac>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d12a      	bne.n	8006856 <UART_SetConfig+0x20a>
 8006800:	4b3f      	ldr	r3, [pc, #252]	; (8006900 <UART_SetConfig+0x2b4>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800680a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800680e:	d01a      	beq.n	8006846 <UART_SetConfig+0x1fa>
 8006810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006814:	d81b      	bhi.n	800684e <UART_SetConfig+0x202>
 8006816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681a:	d00c      	beq.n	8006836 <UART_SetConfig+0x1ea>
 800681c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006820:	d815      	bhi.n	800684e <UART_SetConfig+0x202>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <UART_SetConfig+0x1e2>
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	d008      	beq.n	800683e <UART_SetConfig+0x1f2>
 800682c:	e00f      	b.n	800684e <UART_SetConfig+0x202>
 800682e:	2300      	movs	r3, #0
 8006830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006834:	e012      	b.n	800685c <UART_SetConfig+0x210>
 8006836:	2302      	movs	r3, #2
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683c:	e00e      	b.n	800685c <UART_SetConfig+0x210>
 800683e:	2304      	movs	r3, #4
 8006840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006844:	e00a      	b.n	800685c <UART_SetConfig+0x210>
 8006846:	2308      	movs	r3, #8
 8006848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684c:	e006      	b.n	800685c <UART_SetConfig+0x210>
 800684e:	2310      	movs	r3, #16
 8006850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006854:	e002      	b.n	800685c <UART_SetConfig+0x210>
 8006856:	2310      	movs	r3, #16
 8006858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a25      	ldr	r2, [pc, #148]	; (80068f8 <UART_SetConfig+0x2ac>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 808a 	bne.w	800697c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686c:	2b08      	cmp	r3, #8
 800686e:	d824      	bhi.n	80068ba <UART_SetConfig+0x26e>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x22c>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068bb 	.word	0x080068bb
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068ab 	.word	0x080068ab
 800688c:	080068bb 	.word	0x080068bb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068bb 	.word	0x080068bb
 8006898:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fe fb82 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 80068a0:	61f8      	str	r0, [r7, #28]
        break;
 80068a2:	e010      	b.n	80068c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a4:	4b19      	ldr	r3, [pc, #100]	; (800690c <UART_SetConfig+0x2c0>)
 80068a6:	61fb      	str	r3, [r7, #28]
        break;
 80068a8:	e00d      	b.n	80068c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fe fae3 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80068ae:	61f8      	str	r0, [r7, #28]
        break;
 80068b0:	e009      	b.n	80068c6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b6:	61fb      	str	r3, [r7, #28]
        break;
 80068b8:	e005      	b.n	80068c6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8109 	beq.w	8006ae0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d305      	bcc.n	80068ea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d912      	bls.n	8006910 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068f0:	e0f6      	b.n	8006ae0 <UART_SetConfig+0x494>
 80068f2:	bf00      	nop
 80068f4:	efff69f3 	.word	0xefff69f3
 80068f8:	40008000 	.word	0x40008000
 80068fc:	40013800 	.word	0x40013800
 8006900:	40021000 	.word	0x40021000
 8006904:	40004400 	.word	0x40004400
 8006908:	40004800 	.word	0x40004800
 800690c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2200      	movs	r2, #0
 8006914:	461c      	mov	r4, r3
 8006916:	4615      	mov	r5, r2
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	022b      	lsls	r3, r5, #8
 8006922:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006926:	0222      	lsls	r2, r4, #8
 8006928:	68f9      	ldr	r1, [r7, #12]
 800692a:	6849      	ldr	r1, [r1, #4]
 800692c:	0849      	lsrs	r1, r1, #1
 800692e:	2000      	movs	r0, #0
 8006930:	4688      	mov	r8, r1
 8006932:	4681      	mov	r9, r0
 8006934:	eb12 0a08 	adds.w	sl, r2, r8
 8006938:	eb43 0b09 	adc.w	fp, r3, r9
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694a:	4650      	mov	r0, sl
 800694c:	4659      	mov	r1, fp
 800694e:	f7fa f9ab 	bl	8000ca8 <__aeabi_uldivmod>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4613      	mov	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006960:	d308      	bcc.n	8006974 <UART_SetConfig+0x328>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006968:	d204      	bcs.n	8006974 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e0b5      	b.n	8006ae0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800697a:	e0b1      	b.n	8006ae0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006984:	d15d      	bne.n	8006a42 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800698a:	2b08      	cmp	r3, #8
 800698c:	d827      	bhi.n	80069de <UART_SetConfig+0x392>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x348>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069c1 	.word	0x080069c1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	080069df 	.word	0x080069df
 80069a4:	080069cf 	.word	0x080069cf
 80069a8:	080069df 	.word	0x080069df
 80069ac:	080069df 	.word	0x080069df
 80069b0:	080069df 	.word	0x080069df
 80069b4:	080069d7 	.word	0x080069d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe faf4 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 80069bc:	61f8      	str	r0, [r7, #28]
        break;
 80069be:	e014      	b.n	80069ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c0:	f7fe fb06 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 80069c4:	61f8      	str	r0, [r7, #28]
        break;
 80069c6:	e010      	b.n	80069ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c8:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <UART_SetConfig+0x4b0>)
 80069ca:	61fb      	str	r3, [r7, #28]
        break;
 80069cc:	e00d      	b.n	80069ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ce:	f7fe fa51 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80069d2:	61f8      	str	r0, [r7, #28]
        break;
 80069d4:	e009      	b.n	80069ea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069da:	61fb      	str	r3, [r7, #28]
        break;
 80069dc:	e005      	b.n	80069ea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d077      	beq.n	8006ae0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	005a      	lsls	r2, r3, #1
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	441a      	add	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b0f      	cmp	r3, #15
 8006a0a:	d916      	bls.n	8006a3a <UART_SetConfig+0x3ee>
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a12:	d212      	bcs.n	8006a3a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f023 030f 	bic.w	r3, r3, #15
 8006a1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	085b      	lsrs	r3, r3, #1
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	8afb      	ldrh	r3, [r7, #22]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	8afa      	ldrh	r2, [r7, #22]
 8006a36:	60da      	str	r2, [r3, #12]
 8006a38:	e052      	b.n	8006ae0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a40:	e04e      	b.n	8006ae0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d827      	bhi.n	8006a9a <UART_SetConfig+0x44e>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <UART_SetConfig+0x404>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	08006a9b 	.word	0x08006a9b
 8006a60:	08006a8b 	.word	0x08006a8b
 8006a64:	08006a9b 	.word	0x08006a9b
 8006a68:	08006a9b 	.word	0x08006a9b
 8006a6c:	08006a9b 	.word	0x08006a9b
 8006a70:	08006a93 	.word	0x08006a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a74:	f7fe fa96 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8006a78:	61f8      	str	r0, [r7, #28]
        break;
 8006a7a:	e014      	b.n	8006aa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a7c:	f7fe faa8 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8006a80:	61f8      	str	r0, [r7, #28]
        break;
 8006a82:	e010      	b.n	8006aa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <UART_SetConfig+0x4b0>)
 8006a86:	61fb      	str	r3, [r7, #28]
        break;
 8006a88:	e00d      	b.n	8006aa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8a:	f7fe f9f3 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8006a8e:	61f8      	str	r0, [r7, #28]
        break;
 8006a90:	e009      	b.n	8006aa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a96:	61fb      	str	r3, [r7, #28]
        break;
 8006a98:	e005      	b.n	8006aa6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d019      	beq.n	8006ae0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	085a      	lsrs	r2, r3, #1
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b0f      	cmp	r3, #15
 8006ac4:	d909      	bls.n	8006ada <UART_SetConfig+0x48e>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d205      	bcs.n	8006ada <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	e002      	b.n	8006ae0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006aec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3728      	adds	r7, #40	; 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afa:	bf00      	nop
 8006afc:	00f42400 	.word	0x00f42400

08006b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01a      	beq.n	8006c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfe:	d10a      	bne.n	8006c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b098      	sub	sp, #96	; 0x60
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c54:	f7fc f8c0 	bl	8002dd8 <HAL_GetTick>
 8006c58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d12e      	bne.n	8006cc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c70:	2200      	movs	r2, #0
 8006c72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f88c 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d021      	beq.n	8006cc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	653b      	str	r3, [r7, #80]	; 0x50
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e062      	b.n	8006d8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d149      	bne.n	8006d68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f856 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d03c      	beq.n	8006d68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3308      	adds	r3, #8
 8006d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0301 	bic.w	r3, r3, #1
 8006d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d40:	61fa      	str	r2, [r7, #28]
 8006d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	69b9      	ldr	r1, [r7, #24]
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e5      	bne.n	8006d20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e011      	b.n	8006d8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3758      	adds	r7, #88	; 0x58
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da4:	e049      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d045      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dae:	f7fc f813 	bl	8002dd8 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d302      	bcc.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e048      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d031      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d110      	bne.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2208      	movs	r2, #8
 8006dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f8ff 	bl	8006ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2208      	movs	r2, #8
 8006df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e029      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e14:	d111      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f8e5 	bl	8006ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e00f      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4013      	ands	r3, r2
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	bf0c      	ite	eq
 8006e4a:	2301      	moveq	r3, #1
 8006e4c:	2300      	movne	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d0a6      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b097      	sub	sp, #92	; 0x5c
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e96:	d10e      	bne.n	8006eb6 <UART_Start_Receive_IT+0x52>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <UART_Start_Receive_IT+0x48>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eaa:	e02d      	b.n	8006f08 <UART_Start_Receive_IT+0xa4>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eb4:	e028      	b.n	8006f08 <UART_Start_Receive_IT+0xa4>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10d      	bne.n	8006eda <UART_Start_Receive_IT+0x76>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <UART_Start_Receive_IT+0x6c>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ece:	e01b      	b.n	8006f08 <UART_Start_Receive_IT+0xa4>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	227f      	movs	r2, #127	; 0x7f
 8006ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ed8:	e016      	b.n	8006f08 <UART_Start_Receive_IT+0xa4>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ee2:	d10d      	bne.n	8006f00 <UART_Start_Receive_IT+0x9c>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <UART_Start_Receive_IT+0x92>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	227f      	movs	r2, #127	; 0x7f
 8006ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef4:	e008      	b.n	8006f08 <UART_Start_Receive_IT+0xa4>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	223f      	movs	r2, #63	; 0x3f
 8006efa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006efe:	e003      	b.n	8006f08 <UART_Start_Receive_IT+0xa4>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2222      	movs	r2, #34	; 0x22
 8006f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f38:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f54:	d107      	bne.n	8006f66 <UART_Start_Receive_IT+0x102>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <UART_Start_Receive_IT+0x184>)
 8006f62:	669a      	str	r2, [r3, #104]	; 0x68
 8006f64:	e002      	b.n	8006f6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a20      	ldr	r2, [pc, #128]	; (8006fec <UART_Start_Receive_IT+0x188>)
 8006f6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d019      	beq.n	8006fa8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
 8006f94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e6      	bne.n	8006f74 <UART_Start_Receive_IT+0x110>
 8006fa6:	e018      	b.n	8006fda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f043 0320 	orr.w	r3, r3, #32
 8006fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	69f9      	ldr	r1, [r7, #28]
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e6      	bne.n	8006fa8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	375c      	adds	r7, #92	; 0x5c
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	080072f5 	.word	0x080072f5
 8006fec:	08007139 	.word	0x08007139

08006ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b095      	sub	sp, #84	; 0x54
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800700c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007016:	643b      	str	r3, [r7, #64]	; 0x40
 8007018:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800701c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e6      	bne.n	8006ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	61fb      	str	r3, [r7, #28]
   return(result);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	64bb      	str	r3, [r7, #72]	; 0x48
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e5      	bne.n	800702a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007062:	2b01      	cmp	r3, #1
 8007064:	d118      	bne.n	8007098 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	60bb      	str	r3, [r7, #8]
   return(result);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f023 0310 	bic.w	r3, r3, #16
 800707a:	647b      	str	r3, [r7, #68]	; 0x44
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6979      	ldr	r1, [r7, #20]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e6      	bne.n	8007066 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070ac:	bf00      	nop
 80070ae:	3754      	adds	r7, #84	; 0x54
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff faa2 	bl	8006620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6979      	ldr	r1, [r7, #20]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	613b      	str	r3, [r7, #16]
   return(result);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e6      	bne.n	80070ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fa6e 	bl	800660c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b09c      	sub	sp, #112	; 0x70
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007146:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007150:	2b22      	cmp	r3, #34	; 0x22
 8007152:	f040 80be 	bne.w	80072d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800715c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007164:	b2d9      	uxtb	r1, r3
 8007166:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800716a:	b2da      	uxtb	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007170:	400a      	ands	r2, r1
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	f040 80a3 	bne.w	80072e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071be:	65bb      	str	r3, [r7, #88]	; 0x58
 80071c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e6      	bne.n	80071a0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071f2:	647a      	str	r2, [r7, #68]	; 0x44
 80071f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a34      	ldr	r2, [pc, #208]	; (80072f0 <UART_RxISR_8BIT+0x1b8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d01f      	beq.n	8007264 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d018      	beq.n	8007264 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	623b      	str	r3, [r7, #32]
   return(result);
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007246:	663b      	str	r3, [r7, #96]	; 0x60
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
 8007252:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007268:	2b01      	cmp	r3, #1
 800726a:	d12e      	bne.n	80072ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0310 	bic.w	r3, r3, #16
 8007286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	69b9      	ldr	r1, [r7, #24]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	617b      	str	r3, [r7, #20]
   return(result);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e6      	bne.n	8007272 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d103      	bne.n	80072ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2210      	movs	r2, #16
 80072b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff f9b6 	bl	8006634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072c8:	e00d      	b.n	80072e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fa fb4a 	bl	8001964 <HAL_UART_RxCpltCallback>
}
 80072d0:	e009      	b.n	80072e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	8b1b      	ldrh	r3, [r3, #24]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0208 	orr.w	r2, r2, #8
 80072e2:	b292      	uxth	r2, r2
 80072e4:	831a      	strh	r2, [r3, #24]
}
 80072e6:	bf00      	nop
 80072e8:	3770      	adds	r7, #112	; 0x70
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	40008000 	.word	0x40008000

080072f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b09c      	sub	sp, #112	; 0x70
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007302:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800730c:	2b22      	cmp	r3, #34	; 0x22
 800730e:	f040 80be 	bne.w	800748e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007318:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007322:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007326:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800732a:	4013      	ands	r3, r2
 800732c:	b29a      	uxth	r2, r3
 800732e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	1c9a      	adds	r2, r3, #2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	f040 80a3 	bne.w	80074a2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800736a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007370:	667b      	str	r3, [r7, #100]	; 0x64
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800737a:	657b      	str	r3, [r7, #84]	; 0x54
 800737c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	663b      	str	r3, [r7, #96]	; 0x60
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073ae:	643a      	str	r2, [r7, #64]	; 0x40
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e5      	bne.n	800738e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a34      	ldr	r2, [pc, #208]	; (80074ac <UART_RxISR_16BIT+0x1b8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d01f      	beq.n	8007420 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d018      	beq.n	8007420 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800740e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e6      	bne.n	80073ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007424:	2b01      	cmp	r3, #1
 8007426:	d12e      	bne.n	8007486 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	60bb      	str	r3, [r7, #8]
   return(result);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f023 0310 	bic.w	r3, r3, #16
 8007442:	65bb      	str	r3, [r7, #88]	; 0x58
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6979      	ldr	r1, [r7, #20]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	613b      	str	r3, [r7, #16]
   return(result);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e6      	bne.n	800742e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b10      	cmp	r3, #16
 800746c:	d103      	bne.n	8007476 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2210      	movs	r2, #16
 8007474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff f8d8 	bl	8006634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007484:	e00d      	b.n	80074a2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fa fa6c 	bl	8001964 <HAL_UART_RxCpltCallback>
}
 800748c:	e009      	b.n	80074a2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	8b1b      	ldrh	r3, [r3, #24]
 8007494:	b29a      	uxth	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0208 	orr.w	r2, r2, #8
 800749e:	b292      	uxth	r2, r2
 80074a0:	831a      	strh	r2, [r3, #24]
}
 80074a2:	bf00      	nop
 80074a4:	3770      	adds	r7, #112	; 0x70
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40008000 	.word	0x40008000

080074b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <MX_FATFS_Init+0x18>)
 80074ca:	4805      	ldr	r0, [pc, #20]	; (80074e0 <MX_FATFS_Init+0x1c>)
 80074cc:	f002 ffd2 	bl	800a474 <FATFS_LinkDriver>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b03      	ldr	r3, [pc, #12]	; (80074e4 <MX_FATFS_Init+0x20>)
 80074d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80074d8:	bf00      	nop
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000938 	.word	0x20000938
 80074e0:	2000001c 	.word	0x2000001c
 80074e4:	20000934 	.word	0x20000934

080074e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f9d1 	bl	800789c <USER_SPI_initialize>
 80074fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return USER_SPI_status(pdrv); //ADD THIS LINE
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 faaf 	bl	8007a74 <USER_SPI_status>
 8007516:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8007530:	7bf8      	ldrb	r0, [r7, #15]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	f000 fab2 	bl	8007aa0 <USER_SPI_read>
 800753c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007556:	7bf8      	ldrb	r0, [r7, #15]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	f000 fb05 	bl	8007b6c <USER_SPI_write>
 8007562:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	603a      	str	r2, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
 8007578:	460b      	mov	r3, r1
 800757a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800757c:	79b9      	ldrb	r1, [r7, #6]
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fb6e 	bl	8007c64 <USER_SPI_ioctl>
 8007588:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800759c:	f7fb fc1c 	bl	8002dd8 <HAL_GetTick>
 80075a0:	4603      	mov	r3, r0
 80075a2:	4a04      	ldr	r2, [pc, #16]	; (80075b4 <SPI_Timer_On+0x20>)
 80075a4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80075a6:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <SPI_Timer_On+0x24>)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6013      	str	r3, [r2, #0]
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000940 	.word	0x20000940
 80075b8:	20000944 	.word	0x20000944

080075bc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80075c0:	f7fb fc0a 	bl	8002dd8 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <SPI_Timer_Status+0x24>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <SPI_Timer_Status+0x28>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	bf34      	ite	cc
 80075d4:	2301      	movcc	r3, #1
 80075d6:	2300      	movcs	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
}
 80075da:	4618      	mov	r0, r3
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000940 	.word	0x20000940
 80075e4:	20000944 	.word	0x20000944

080075e8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	4603      	mov	r3, r0
 80075f0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80075f2:	f107 020f 	add.w	r2, r7, #15
 80075f6:	1df9      	adds	r1, r7, #7
 80075f8:	2332      	movs	r3, #50	; 0x32
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	2301      	movs	r3, #1
 80075fe:	4804      	ldr	r0, [pc, #16]	; (8007610 <xchg_spi+0x28>)
 8007600:	f7fe f8fa 	bl	80057f8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200002d4 	.word	0x200002d4

08007614 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e00a      	b.n	800763a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	18d4      	adds	r4, r2, r3
 800762a:	20ff      	movs	r0, #255	; 0xff
 800762c:	f7ff ffdc 	bl	80075e8 <xchg_spi>
 8007630:	4603      	mov	r3, r0
 8007632:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d3f0      	bcc.n	8007624 <rcvr_spi_multi+0x10>
	}
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bd90      	pop	{r4, r7, pc}

0800764c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	b29a      	uxth	r2, r3
 800765a:	f04f 33ff 	mov.w	r3, #4294967295
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4803      	ldr	r0, [pc, #12]	; (8007670 <xmit_spi_multi+0x24>)
 8007662:	f7fd ff54 	bl	800550e <HAL_SPI_Transmit>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200002d4 	.word	0x200002d4

08007674 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800767c:	f7fb fbac 	bl	8002dd8 <HAL_GetTick>
 8007680:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007686:	20ff      	movs	r0, #255	; 0xff
 8007688:	f7ff ffae 	bl	80075e8 <xchg_spi>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2bff      	cmp	r3, #255	; 0xff
 8007694:	d007      	beq.n	80076a6 <wait_ready+0x32>
 8007696:	f7fb fb9f 	bl	8002dd8 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8ef      	bhi.n	8007686 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2bff      	cmp	r3, #255	; 0xff
 80076aa:	bf0c      	ite	eq
 80076ac:	2301      	moveq	r3, #1
 80076ae:	2300      	movne	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80076be:	2201      	movs	r2, #1
 80076c0:	2110      	movs	r1, #16
 80076c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076c6:	f7fb feb9 	bl	800343c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80076ca:	20ff      	movs	r0, #255	; 0xff
 80076cc:	f7ff ff8c 	bl	80075e8 <xchg_spi>

}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80076d8:	2200      	movs	r2, #0
 80076da:	2110      	movs	r1, #16
 80076dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076e0:	f7fb feac 	bl	800343c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80076e4:	20ff      	movs	r0, #255	; 0xff
 80076e6:	f7ff ff7f 	bl	80075e8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80076ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076ee:	f7ff ffc1 	bl	8007674 <wait_ready>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <spiselect+0x28>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e002      	b.n	8007702 <spiselect+0x2e>

	despiselect();
 80076fc:	f7ff ffdd 	bl	80076ba <despiselect>
	return 0;	/* Timeout */
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	bd80      	pop	{r7, pc}

08007706 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007710:	20c8      	movs	r0, #200	; 0xc8
 8007712:	f7ff ff3f 	bl	8007594 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007716:	20ff      	movs	r0, #255	; 0xff
 8007718:	f7ff ff66 	bl	80075e8 <xchg_spi>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2bff      	cmp	r3, #255	; 0xff
 8007724:	d104      	bne.n	8007730 <rcvr_datablock+0x2a>
 8007726:	f7ff ff49 	bl	80075bc <SPI_Timer_Status>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1f2      	bne.n	8007716 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2bfe      	cmp	r3, #254	; 0xfe
 8007734:	d001      	beq.n	800773a <rcvr_datablock+0x34>
 8007736:	2300      	movs	r3, #0
 8007738:	e00a      	b.n	8007750 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff ff69 	bl	8007614 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007742:	20ff      	movs	r0, #255	; 0xff
 8007744:	f7ff ff50 	bl	80075e8 <xchg_spi>
 8007748:	20ff      	movs	r0, #255	; 0xff
 800774a:	f7ff ff4d 	bl	80075e8 <xchg_spi>

	return 1;						/* Function succeeded */
 800774e:	2301      	movs	r3, #1
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007764:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007768:	f7ff ff84 	bl	8007674 <wait_ready>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <xmit_datablock+0x1e>
 8007772:	2300      	movs	r3, #0
 8007774:	e01e      	b.n	80077b4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff ff35 	bl	80075e8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	2bfd      	cmp	r3, #253	; 0xfd
 8007782:	d016      	beq.n	80077b2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff5f 	bl	800764c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800778e:	20ff      	movs	r0, #255	; 0xff
 8007790:	f7ff ff2a 	bl	80075e8 <xchg_spi>
 8007794:	20ff      	movs	r0, #255	; 0xff
 8007796:	f7ff ff27 	bl	80075e8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800779a:	20ff      	movs	r0, #255	; 0xff
 800779c:	f7ff ff24 	bl	80075e8 <xchg_spi>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	d001      	beq.n	80077b2 <xmit_datablock+0x5a>
 80077ae:	2300      	movs	r3, #0
 80077b0:	e000      	b.n	80077b4 <xmit_datablock+0x5c>
	}
	return 1;
 80077b2:	2301      	movs	r3, #1
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80077c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da0e      	bge.n	80077ee <send_cmd+0x32>
		cmd &= 0x7F;
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80077d8:	2100      	movs	r1, #0
 80077da:	2037      	movs	r0, #55	; 0x37
 80077dc:	f7ff ffee 	bl	80077bc <send_cmd>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d901      	bls.n	80077ee <send_cmd+0x32>
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	e051      	b.n	8007892 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	2b0c      	cmp	r3, #12
 80077f2:	d008      	beq.n	8007806 <send_cmd+0x4a>
		despiselect();
 80077f4:	f7ff ff61 	bl	80076ba <despiselect>
		if (!spiselect()) return 0xFF;
 80077f8:	f7ff ff6c 	bl	80076d4 <spiselect>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <send_cmd+0x4a>
 8007802:	23ff      	movs	r3, #255	; 0xff
 8007804:	e045      	b.n	8007892 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780c:	b2db      	uxtb	r3, r3
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff feea 	bl	80075e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	0e1b      	lsrs	r3, r3, #24
 8007818:	b2db      	uxtb	r3, r3
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fee4 	bl	80075e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fede 	bl	80075e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	b2db      	uxtb	r3, r3
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fed8 	bl	80075e8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fed3 	bl	80075e8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007842:	2301      	movs	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <send_cmd+0x94>
 800784c:	2395      	movs	r3, #149	; 0x95
 800784e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b08      	cmp	r3, #8
 8007854:	d101      	bne.n	800785a <send_cmd+0x9e>
 8007856:	2387      	movs	r3, #135	; 0x87
 8007858:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fec3 	bl	80075e8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	2b0c      	cmp	r3, #12
 8007866:	d102      	bne.n	800786e <send_cmd+0xb2>
 8007868:	20ff      	movs	r0, #255	; 0xff
 800786a:	f7ff febd 	bl	80075e8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800786e:	230a      	movs	r3, #10
 8007870:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007872:	20ff      	movs	r0, #255	; 0xff
 8007874:	f7ff feb8 	bl	80075e8 <xchg_spi>
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800787c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	da05      	bge.n	8007890 <send_cmd+0xd4>
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	3b01      	subs	r3, #1
 8007888:	73fb      	strb	r3, [r7, #15]
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007890:	7bbb      	ldrb	r3, [r7, #14]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <USER_SPI_initialize+0x14>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e0d6      	b.n	8007a5e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80078b0:	4b6d      	ldr	r3, [pc, #436]	; (8007a68 <USER_SPI_initialize+0x1cc>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <USER_SPI_initialize+0x2a>
 80078be:	4b6a      	ldr	r3, [pc, #424]	; (8007a68 <USER_SPI_initialize+0x1cc>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	e0cb      	b.n	8007a5e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80078c6:	4b69      	ldr	r3, [pc, #420]	; (8007a6c <USER_SPI_initialize+0x1d0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80078d0:	4b66      	ldr	r3, [pc, #408]	; (8007a6c <USER_SPI_initialize+0x1d0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80078d8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80078da:	230a      	movs	r3, #10
 80078dc:	73fb      	strb	r3, [r7, #15]
 80078de:	e005      	b.n	80078ec <USER_SPI_initialize+0x50>
 80078e0:	20ff      	movs	r0, #255	; 0xff
 80078e2:	f7ff fe81 	bl	80075e8 <xchg_spi>
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f6      	bne.n	80078e0 <USER_SPI_initialize+0x44>

	ty = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80078f6:	2100      	movs	r1, #0
 80078f8:	2000      	movs	r0, #0
 80078fa:	f7ff ff5f 	bl	80077bc <send_cmd>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b01      	cmp	r3, #1
 8007902:	f040 808b 	bne.w	8007a1c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800790a:	f7ff fe43 	bl	8007594 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800790e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007912:	2008      	movs	r0, #8
 8007914:	f7ff ff52 	bl	80077bc <send_cmd>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d151      	bne.n	80079c2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	e00d      	b.n	8007940 <USER_SPI_initialize+0xa4>
 8007924:	7bfc      	ldrb	r4, [r7, #15]
 8007926:	20ff      	movs	r0, #255	; 0xff
 8007928:	f7ff fe5e 	bl	80075e8 <xchg_spi>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	f104 0310 	add.w	r3, r4, #16
 8007934:	443b      	add	r3, r7
 8007936:	f803 2c08 	strb.w	r2, [r3, #-8]
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	3301      	adds	r3, #1
 800793e:	73fb      	strb	r3, [r7, #15]
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d9ee      	bls.n	8007924 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007946:	7abb      	ldrb	r3, [r7, #10]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d167      	bne.n	8007a1c <USER_SPI_initialize+0x180>
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	2baa      	cmp	r3, #170	; 0xaa
 8007950:	d164      	bne.n	8007a1c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007952:	bf00      	nop
 8007954:	f7ff fe32 	bl	80075bc <SPI_Timer_Status>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <USER_SPI_initialize+0xd2>
 800795e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007962:	20a9      	movs	r0, #169	; 0xa9
 8007964:	f7ff ff2a 	bl	80077bc <send_cmd>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f2      	bne.n	8007954 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800796e:	f7ff fe25 	bl	80075bc <SPI_Timer_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d051      	beq.n	8007a1c <USER_SPI_initialize+0x180>
 8007978:	2100      	movs	r1, #0
 800797a:	203a      	movs	r0, #58	; 0x3a
 800797c:	f7ff ff1e 	bl	80077bc <send_cmd>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d14a      	bne.n	8007a1c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
 800798a:	e00d      	b.n	80079a8 <USER_SPI_initialize+0x10c>
 800798c:	7bfc      	ldrb	r4, [r7, #15]
 800798e:	20ff      	movs	r0, #255	; 0xff
 8007990:	f7ff fe2a 	bl	80075e8 <xchg_spi>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	f104 0310 	add.w	r3, r4, #16
 800799c:	443b      	add	r3, r7
 800799e:	f803 2c08 	strb.w	r2, [r3, #-8]
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3301      	adds	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d9ee      	bls.n	800798c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80079ae:	7a3b      	ldrb	r3, [r7, #8]
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <USER_SPI_initialize+0x120>
 80079b8:	230c      	movs	r3, #12
 80079ba:	e000      	b.n	80079be <USER_SPI_initialize+0x122>
 80079bc:	2304      	movs	r3, #4
 80079be:	737b      	strb	r3, [r7, #13]
 80079c0:	e02c      	b.n	8007a1c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80079c2:	2100      	movs	r1, #0
 80079c4:	20a9      	movs	r0, #169	; 0xa9
 80079c6:	f7ff fef9 	bl	80077bc <send_cmd>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d804      	bhi.n	80079da <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80079d0:	2302      	movs	r3, #2
 80079d2:	737b      	strb	r3, [r7, #13]
 80079d4:	23a9      	movs	r3, #169	; 0xa9
 80079d6:	73bb      	strb	r3, [r7, #14]
 80079d8:	e003      	b.n	80079e2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80079da:	2301      	movs	r3, #1
 80079dc:	737b      	strb	r3, [r7, #13]
 80079de:	2301      	movs	r3, #1
 80079e0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80079e2:	bf00      	nop
 80079e4:	f7ff fdea 	bl	80075bc <SPI_Timer_Status>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d007      	beq.n	80079fe <USER_SPI_initialize+0x162>
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fee2 	bl	80077bc <send_cmd>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f2      	bne.n	80079e4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80079fe:	f7ff fddd 	bl	80075bc <SPI_Timer_Status>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <USER_SPI_initialize+0x17c>
 8007a08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a0c:	2010      	movs	r0, #16
 8007a0e:	f7ff fed5 	bl	80077bc <send_cmd>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USER_SPI_initialize+0x180>
				ty = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <USER_SPI_initialize+0x1d4>)
 8007a1e:	7b7b      	ldrb	r3, [r7, #13]
 8007a20:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007a22:	f7ff fe4a 	bl	80076ba <despiselect>

	if (ty) {			/* OK */
 8007a26:	7b7b      	ldrb	r3, [r7, #13]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d012      	beq.n	8007a52 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <USER_SPI_initialize+0x1d0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007a36:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <USER_SPI_initialize+0x1d0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0210 	orr.w	r2, r2, #16
 8007a3e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007a40:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <USER_SPI_initialize+0x1cc>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <USER_SPI_initialize+0x1cc>)
 8007a4e:	701a      	strb	r2, [r3, #0]
 8007a50:	e002      	b.n	8007a58 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <USER_SPI_initialize+0x1cc>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007a58:	4b03      	ldr	r3, [pc, #12]	; (8007a68 <USER_SPI_initialize+0x1cc>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b2db      	uxtb	r3, r3
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd90      	pop	{r4, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000030 	.word	0x20000030
 8007a6c:	200002d4 	.word	0x200002d4
 8007a70:	2000093c 	.word	0x2000093c

08007a74 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <USER_SPI_status+0x14>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e002      	b.n	8007a8e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <USER_SPI_status+0x28>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b2db      	uxtb	r3, r3
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000030 	.word	0x20000030

08007aa0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <USER_SPI_read+0x1c>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USER_SPI_read+0x20>
 8007abc:	2304      	movs	r3, #4
 8007abe:	e04d      	b.n	8007b5c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007ac0:	4b28      	ldr	r3, [pc, #160]	; (8007b64 <USER_SPI_read+0xc4>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <USER_SPI_read+0x32>
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e044      	b.n	8007b5c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007ad2:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <USER_SPI_read+0xc8>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <USER_SPI_read+0x44>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	025b      	lsls	r3, r3, #9
 8007ae2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d111      	bne.n	8007b0e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	2011      	movs	r0, #17
 8007aee:	f7ff fe65 	bl	80077bc <send_cmd>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d129      	bne.n	8007b4c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007afc:	68b8      	ldr	r0, [r7, #8]
 8007afe:	f7ff fe02 	bl	8007706 <rcvr_datablock>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d021      	beq.n	8007b4c <USER_SPI_read+0xac>
			count = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	e01e      	b.n	8007b4c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	2012      	movs	r0, #18
 8007b12:	f7ff fe53 	bl	80077bc <send_cmd>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d117      	bne.n	8007b4c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b20:	68b8      	ldr	r0, [r7, #8]
 8007b22:	f7ff fdf0 	bl	8007706 <rcvr_datablock>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <USER_SPI_read+0xa2>
				buff += 512;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007b32:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1ed      	bne.n	8007b1c <USER_SPI_read+0x7c>
 8007b40:	e000      	b.n	8007b44 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007b42:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007b44:	2100      	movs	r1, #0
 8007b46:	200c      	movs	r0, #12
 8007b48:	f7ff fe38 	bl	80077bc <send_cmd>
		}
	}
	despiselect();
 8007b4c:	f7ff fdb5 	bl	80076ba <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf14      	ite	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	2300      	moveq	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000030 	.word	0x20000030
 8007b68:	2000093c 	.word	0x2000093c

08007b6c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <USER_SPI_write+0x1c>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <USER_SPI_write+0x20>
 8007b88:	2304      	movs	r3, #4
 8007b8a:	e063      	b.n	8007c54 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007b8c:	4b33      	ldr	r3, [pc, #204]	; (8007c5c <USER_SPI_write+0xf0>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <USER_SPI_write+0x32>
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e05a      	b.n	8007c54 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007b9e:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <USER_SPI_write+0xf0>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <USER_SPI_write+0x44>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e051      	b.n	8007c54 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <USER_SPI_write+0xf4>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <USER_SPI_write+0x56>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	025b      	lsls	r3, r3, #9
 8007bc0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d110      	bne.n	8007bea <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	2018      	movs	r0, #24
 8007bcc:	f7ff fdf6 	bl	80077bc <send_cmd>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d136      	bne.n	8007c44 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007bd6:	21fe      	movs	r1, #254	; 0xfe
 8007bd8:	68b8      	ldr	r0, [r7, #8]
 8007bda:	f7ff fdbd 	bl	8007758 <xmit_datablock>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d02f      	beq.n	8007c44 <USER_SPI_write+0xd8>
			count = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	e02c      	b.n	8007c44 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007bea:	4b1d      	ldr	r3, [pc, #116]	; (8007c60 <USER_SPI_write+0xf4>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 0306 	and.w	r3, r3, #6
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <USER_SPI_write+0x92>
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	2097      	movs	r0, #151	; 0x97
 8007bfa:	f7ff fddf 	bl	80077bc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	2019      	movs	r0, #25
 8007c02:	f7ff fddb 	bl	80077bc <send_cmd>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11b      	bne.n	8007c44 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007c0c:	21fc      	movs	r1, #252	; 0xfc
 8007c0e:	68b8      	ldr	r0, [r7, #8]
 8007c10:	f7ff fda2 	bl	8007758 <xmit_datablock>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <USER_SPI_write+0xc4>
				buff += 512;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007c20:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ee      	bne.n	8007c0c <USER_SPI_write+0xa0>
 8007c2e:	e000      	b.n	8007c32 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007c30:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007c32:	21fd      	movs	r1, #253	; 0xfd
 8007c34:	2000      	movs	r0, #0
 8007c36:	f7ff fd8f 	bl	8007758 <xmit_datablock>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USER_SPI_write+0xd8>
 8007c40:	2301      	movs	r3, #1
 8007c42:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007c44:	f7ff fd39 	bl	80076ba <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf14      	ite	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	2300      	moveq	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20000030 	.word	0x20000030
 8007c60:	2000093c 	.word	0x2000093c

08007c64 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08c      	sub	sp, #48	; 0x30
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	603a      	str	r2, [r7, #0]
 8007c6e:	71fb      	strb	r3, [r7, #7]
 8007c70:	460b      	mov	r3, r1
 8007c72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <USER_SPI_ioctl+0x1a>
 8007c7a:	2304      	movs	r3, #4
 8007c7c:	e15a      	b.n	8007f34 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007c7e:	4baf      	ldr	r3, [pc, #700]	; (8007f3c <USER_SPI_ioctl+0x2d8>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <USER_SPI_ioctl+0x2c>
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e151      	b.n	8007f34 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007c96:	79bb      	ldrb	r3, [r7, #6]
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	f200 8136 	bhi.w	8007f0a <USER_SPI_ioctl+0x2a6>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <USER_SPI_ioctl+0x40>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cb9 	.word	0x08007cb9
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007f0b 	.word	0x08007f0b
 8007cb0:	08007d79 	.word	0x08007d79
 8007cb4:	08007e6f 	.word	0x08007e6f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007cb8:	f7ff fd0c 	bl	80076d4 <spiselect>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8127 	beq.w	8007f12 <USER_SPI_ioctl+0x2ae>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007cca:	e122      	b.n	8007f12 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007ccc:	2100      	movs	r1, #0
 8007cce:	2009      	movs	r0, #9
 8007cd0:	f7ff fd74 	bl	80077bc <send_cmd>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f040 811d 	bne.w	8007f16 <USER_SPI_ioctl+0x2b2>
 8007cdc:	f107 030c 	add.w	r3, r7, #12
 8007ce0:	2110      	movs	r1, #16
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fd0f 	bl	8007706 <rcvr_datablock>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8113 	beq.w	8007f16 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007cf0:	7b3b      	ldrb	r3, [r7, #12]
 8007cf2:	099b      	lsrs	r3, r3, #6
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d111      	bne.n	8007d1e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007cfa:	7d7b      	ldrb	r3, [r7, #21]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	7d3b      	ldrb	r3, [r7, #20]
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	4413      	add	r3, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	7cfb      	ldrb	r3, [r7, #19]
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007d0e:	4413      	add	r3, r2
 8007d10:	3301      	adds	r3, #1
 8007d12:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	029a      	lsls	r2, r3, #10
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e028      	b.n	8007d70 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007d1e:	7c7b      	ldrb	r3, [r7, #17]
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	7dbb      	ldrb	r3, [r7, #22]
 8007d28:	09db      	lsrs	r3, r3, #7
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	7d7b      	ldrb	r3, [r7, #21]
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f003 0306 	and.w	r3, r3, #6
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	3302      	adds	r3, #2
 8007d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007d46:	7d3b      	ldrb	r3, [r7, #20]
 8007d48:	099b      	lsrs	r3, r3, #6
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	7cfb      	ldrb	r3, [r7, #19]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	7cbb      	ldrb	r3, [r7, #18]
 8007d56:	029b      	lsls	r3, r3, #10
 8007d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d5c:	4413      	add	r3, r2
 8007d5e:	3301      	adds	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007d62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d66:	3b09      	subs	r3, #9
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007d76:	e0ce      	b.n	8007f16 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007d78:	4b71      	ldr	r3, [pc, #452]	; (8007f40 <USER_SPI_ioctl+0x2dc>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d031      	beq.n	8007de8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007d84:	2100      	movs	r1, #0
 8007d86:	208d      	movs	r0, #141	; 0x8d
 8007d88:	f7ff fd18 	bl	80077bc <send_cmd>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 80c3 	bne.w	8007f1a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007d94:	20ff      	movs	r0, #255	; 0xff
 8007d96:	f7ff fc27 	bl	80075e8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007d9a:	f107 030c 	add.w	r3, r7, #12
 8007d9e:	2110      	movs	r1, #16
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fcb0 	bl	8007706 <rcvr_datablock>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80b6 	beq.w	8007f1a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007dae:	2330      	movs	r3, #48	; 0x30
 8007db0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007db4:	e007      	b.n	8007dc6 <USER_SPI_ioctl+0x162>
 8007db6:	20ff      	movs	r0, #255	; 0xff
 8007db8:	f7ff fc16 	bl	80075e8 <xchg_spi>
 8007dbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007dc6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f3      	bne.n	8007db6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007dce:	7dbb      	ldrb	r3, [r7, #22]
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2310      	movs	r3, #16
 8007dd8:	fa03 f202 	lsl.w	r2, r3, r2
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007de6:	e098      	b.n	8007f1a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007de8:	2100      	movs	r1, #0
 8007dea:	2009      	movs	r0, #9
 8007dec:	f7ff fce6 	bl	80077bc <send_cmd>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f040 8091 	bne.w	8007f1a <USER_SPI_ioctl+0x2b6>
 8007df8:	f107 030c 	add.w	r3, r7, #12
 8007dfc:	2110      	movs	r1, #16
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fc81 	bl	8007706 <rcvr_datablock>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 8087 	beq.w	8007f1a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007e0c:	4b4c      	ldr	r3, [pc, #304]	; (8007f40 <USER_SPI_ioctl+0x2dc>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d012      	beq.n	8007e3e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007e18:	7dbb      	ldrb	r3, [r7, #22]
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007e20:	7dfa      	ldrb	r2, [r7, #23]
 8007e22:	09d2      	lsrs	r2, r2, #7
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	4413      	add	r3, r2
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	7e7b      	ldrb	r3, [r7, #25]
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	3b01      	subs	r3, #1
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	e013      	b.n	8007e66 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007e3e:	7dbb      	ldrb	r3, [r7, #22]
 8007e40:	109b      	asrs	r3, r3, #2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	3301      	adds	r3, #1
 8007e4a:	7dfa      	ldrb	r2, [r7, #23]
 8007e4c:	00d2      	lsls	r2, r2, #3
 8007e4e:	f002 0218 	and.w	r2, r2, #24
 8007e52:	7df9      	ldrb	r1, [r7, #23]
 8007e54:	0949      	lsrs	r1, r1, #5
 8007e56:	b2c9      	uxtb	r1, r1
 8007e58:	440a      	add	r2, r1
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	fb02 f303 	mul.w	r3, r2, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007e6c:	e055      	b.n	8007f1a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007e6e:	4b34      	ldr	r3, [pc, #208]	; (8007f40 <USER_SPI_ioctl+0x2dc>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f003 0306 	and.w	r3, r3, #6
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d051      	beq.n	8007f1e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007e7a:	f107 020c 	add.w	r2, r7, #12
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	210b      	movs	r1, #11
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff feee 	bl	8007c64 <USER_SPI_ioctl>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d149      	bne.n	8007f22 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007e8e:	7b3b      	ldrb	r3, [r7, #12]
 8007e90:	099b      	lsrs	r3, r3, #6
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <USER_SPI_ioctl+0x23e>
 8007e98:	7dbb      	ldrb	r3, [r7, #22]
 8007e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d041      	beq.n	8007f26 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	623b      	str	r3, [r7, #32]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007eb2:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <USER_SPI_ioctl+0x2dc>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	025b      	lsls	r3, r3, #9
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	025b      	lsls	r3, r3, #9
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ecc:	2020      	movs	r0, #32
 8007ece:	f7ff fc75 	bl	80077bc <send_cmd>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d128      	bne.n	8007f2a <USER_SPI_ioctl+0x2c6>
 8007ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eda:	2021      	movs	r0, #33	; 0x21
 8007edc:	f7ff fc6e 	bl	80077bc <send_cmd>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d121      	bne.n	8007f2a <USER_SPI_ioctl+0x2c6>
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	2026      	movs	r0, #38	; 0x26
 8007eea:	f7ff fc67 	bl	80077bc <send_cmd>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11a      	bne.n	8007f2a <USER_SPI_ioctl+0x2c6>
 8007ef4:	f247 5030 	movw	r0, #30000	; 0x7530
 8007ef8:	f7ff fbbc 	bl	8007674 <wait_ready>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d013      	beq.n	8007f2a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007f02:	2300      	movs	r3, #0
 8007f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007f08:	e00f      	b.n	8007f2a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f10:	e00c      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		break;
 8007f12:	bf00      	nop
 8007f14:	e00a      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		break;
 8007f16:	bf00      	nop
 8007f18:	e008      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		break;
 8007f1a:	bf00      	nop
 8007f1c:	e006      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007f1e:	bf00      	nop
 8007f20:	e004      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <USER_SPI_ioctl+0x2c8>
		break;
 8007f2a:	bf00      	nop
	}

	despiselect();
 8007f2c:	f7ff fbc5 	bl	80076ba <despiselect>

	return res;
 8007f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3730      	adds	r7, #48	; 0x30
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000030 	.word	0x20000030
 8007f40:	2000093c 	.word	0x2000093c

08007f44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	4a08      	ldr	r2, [pc, #32]	; (8007f74 <disk_status+0x30>)
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	79fa      	ldrb	r2, [r7, #7]
 8007f5c:	4905      	ldr	r1, [pc, #20]	; (8007f74 <disk_status+0x30>)
 8007f5e:	440a      	add	r2, r1
 8007f60:	7a12      	ldrb	r2, [r2, #8]
 8007f62:	4610      	mov	r0, r2
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000970 	.word	0x20000970

08007f78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <disk_initialize+0x48>)
 8007f8a:	5cd3      	ldrb	r3, [r2, r3]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d111      	bne.n	8007fb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	4a0b      	ldr	r2, [pc, #44]	; (8007fc0 <disk_initialize+0x48>)
 8007f94:	2101      	movs	r1, #1
 8007f96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <disk_initialize+0x48>)
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	79fa      	ldrb	r2, [r7, #7]
 8007fa6:	4906      	ldr	r1, [pc, #24]	; (8007fc0 <disk_initialize+0x48>)
 8007fa8:	440a      	add	r2, r1
 8007faa:	7a12      	ldrb	r2, [r2, #8]
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000970 	.word	0x20000970

08007fc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <disk_read+0x3c>)
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	689c      	ldr	r4, [r3, #8]
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <disk_read+0x3c>)
 8007fe4:	4413      	add	r3, r2
 8007fe6:	7a18      	ldrb	r0, [r3, #8]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	47a0      	blx	r4
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd90      	pop	{r4, r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000970 	.word	0x20000970

08008004 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	4a0a      	ldr	r2, [pc, #40]	; (8008040 <disk_write+0x3c>)
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	68dc      	ldr	r4, [r3, #12]
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4a07      	ldr	r2, [pc, #28]	; (8008040 <disk_write+0x3c>)
 8008024:	4413      	add	r3, r2
 8008026:	7a18      	ldrb	r0, [r3, #8]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	47a0      	blx	r4
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]
  return res;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
}
 8008036:	4618      	mov	r0, r3
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd90      	pop	{r4, r7, pc}
 800803e:	bf00      	nop
 8008040:	20000970 	.word	0x20000970

08008044 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	603a      	str	r2, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
 8008050:	460b      	mov	r3, r1
 8008052:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	4a09      	ldr	r2, [pc, #36]	; (800807c <disk_ioctl+0x38>)
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	79fa      	ldrb	r2, [r7, #7]
 8008062:	4906      	ldr	r1, [pc, #24]	; (800807c <disk_ioctl+0x38>)
 8008064:	440a      	add	r2, r1
 8008066:	7a10      	ldrb	r0, [r2, #8]
 8008068:	79b9      	ldrb	r1, [r7, #6]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	73fb      	strb	r3, [r7, #15]
  return res;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000970 	.word	0x20000970

08008080 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3301      	adds	r3, #1
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	b21a      	sxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b21b      	sxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b21b      	sxth	r3, r3
 80080a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80080a2:	89fb      	ldrh	r3, [r7, #14]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3303      	adds	r3, #3
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	3202      	adds	r2, #2
 80080c8:	7812      	ldrb	r2, [r2, #0]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	3201      	adds	r2, #1
 80080d6:	7812      	ldrb	r2, [r2, #0]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80080e8:	68fb      	ldr	r3, [r7, #12]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	887a      	ldrh	r2, [r7, #2]
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	887b      	ldrh	r3, [r7, #2]
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	887a      	ldrh	r2, [r7, #2]
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	701a      	strb	r2, [r3, #0]
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	b2d2      	uxtb	r2, r2
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	701a      	strb	r2, [r3, #0]
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00d      	beq.n	80081ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	1c53      	adds	r3, r2, #1
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1c59      	adds	r1, r3, #1
 80081a8:	6179      	str	r1, [r7, #20]
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f1      	bne.n	800819e <mem_cpy+0x1a>
	}
}
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80081c6:	b480      	push	{r7}
 80081c8:	b087      	sub	sp, #28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	617a      	str	r2, [r7, #20]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f3      	bne.n	80081d6 <mem_set+0x10>
}
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80081fc:	b480      	push	{r7}
 80081fe:	b089      	sub	sp, #36	; 0x24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	61fa      	str	r2, [r7, #28]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	61ba      	str	r2, [r7, #24]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	1acb      	subs	r3, r1, r3
 8008228:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3b01      	subs	r3, #1
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <mem_cmp+0x40>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0eb      	beq.n	8008214 <mem_cmp+0x18>

	return r;
 800823c:	697b      	ldr	r3, [r7, #20]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3724      	adds	r7, #36	; 0x24
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008254:	e002      	b.n	800825c <chk_chr+0x12>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3301      	adds	r3, #1
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <chk_chr+0x26>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	4293      	cmp	r3, r2
 800826e:	d1f2      	bne.n	8008256 <chk_chr+0xc>
	return *str;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	781b      	ldrb	r3, [r3, #0]
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e029      	b.n	80082e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008294:	4a27      	ldr	r2, [pc, #156]	; (8008334 <chk_lock+0xb4>)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	4413      	add	r3, r2
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01d      	beq.n	80082de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80082a2:	4a24      	ldr	r2, [pc, #144]	; (8008334 <chk_lock+0xb4>)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	4413      	add	r3, r2
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d116      	bne.n	80082e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80082b4:	4a1f      	ldr	r2, [pc, #124]	; (8008334 <chk_lock+0xb4>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	4413      	add	r3, r2
 80082bc:	3304      	adds	r3, #4
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d10c      	bne.n	80082e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80082c8:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <chk_lock+0xb4>)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	4413      	add	r3, r2
 80082d0:	3308      	adds	r3, #8
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80082d8:	429a      	cmp	r2, r3
 80082da:	d102      	bne.n	80082e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80082dc:	e007      	b.n	80082ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3301      	adds	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d9d2      	bls.n	8008294 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d109      	bne.n	8008308 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <chk_lock+0x80>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d101      	bne.n	8008304 <chk_lock+0x84>
 8008300:	2300      	movs	r3, #0
 8008302:	e010      	b.n	8008326 <chk_lock+0xa6>
 8008304:	2312      	movs	r3, #18
 8008306:	e00e      	b.n	8008326 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d108      	bne.n	8008320 <chk_lock+0xa0>
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <chk_lock+0xb4>)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	4413      	add	r3, r2
 8008316:	330c      	adds	r3, #12
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831e:	d101      	bne.n	8008324 <chk_lock+0xa4>
 8008320:	2310      	movs	r3, #16
 8008322:	e000      	b.n	8008326 <chk_lock+0xa6>
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000950 	.word	0x20000950

08008338 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800833e:	2300      	movs	r3, #0
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	e002      	b.n	800834a <enq_lock+0x12>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3301      	adds	r3, #1
 8008348:	607b      	str	r3, [r7, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d806      	bhi.n	800835e <enq_lock+0x26>
 8008350:	4a09      	ldr	r2, [pc, #36]	; (8008378 <enq_lock+0x40>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	4413      	add	r3, r2
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f2      	bne.n	8008344 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b02      	cmp	r3, #2
 8008362:	bf14      	ite	ne
 8008364:	2301      	movne	r3, #1
 8008366:	2300      	moveq	r3, #0
 8008368:	b2db      	uxtb	r3, r3
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000950 	.word	0x20000950

0800837c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e01f      	b.n	80083cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800838c:	4a41      	ldr	r2, [pc, #260]	; (8008494 <inc_lock+0x118>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	4413      	add	r3, r2
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d113      	bne.n	80083c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800839e:	4a3d      	ldr	r2, [pc, #244]	; (8008494 <inc_lock+0x118>)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	4413      	add	r3, r2
 80083a6:	3304      	adds	r3, #4
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d109      	bne.n	80083c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80083b2:	4a38      	ldr	r2, [pc, #224]	; (8008494 <inc_lock+0x118>)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	4413      	add	r3, r2
 80083ba:	3308      	adds	r3, #8
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d006      	beq.n	80083d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d9dc      	bls.n	800838c <inc_lock+0x10>
 80083d2:	e000      	b.n	80083d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80083d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d132      	bne.n	8008442 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e002      	b.n	80083e8 <inc_lock+0x6c>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d806      	bhi.n	80083fc <inc_lock+0x80>
 80083ee:	4a29      	ldr	r2, [pc, #164]	; (8008494 <inc_lock+0x118>)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	4413      	add	r3, r2
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f2      	bne.n	80083e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d101      	bne.n	8008406 <inc_lock+0x8a>
 8008402:	2300      	movs	r3, #0
 8008404:	e040      	b.n	8008488 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4922      	ldr	r1, [pc, #136]	; (8008494 <inc_lock+0x118>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	440b      	add	r3, r1
 8008412:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	491e      	ldr	r1, [pc, #120]	; (8008494 <inc_lock+0x118>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	440b      	add	r3, r1
 8008420:	3304      	adds	r3, #4
 8008422:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	491a      	ldr	r1, [pc, #104]	; (8008494 <inc_lock+0x118>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	440b      	add	r3, r1
 8008430:	3308      	adds	r3, #8
 8008432:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008434:	4a17      	ldr	r2, [pc, #92]	; (8008494 <inc_lock+0x118>)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	4413      	add	r3, r2
 800843c:	330c      	adds	r3, #12
 800843e:	2200      	movs	r2, #0
 8008440:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <inc_lock+0xe0>
 8008448:	4a12      	ldr	r2, [pc, #72]	; (8008494 <inc_lock+0x118>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	4413      	add	r3, r2
 8008450:	330c      	adds	r3, #12
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <inc_lock+0xe0>
 8008458:	2300      	movs	r3, #0
 800845a:	e015      	b.n	8008488 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d108      	bne.n	8008474 <inc_lock+0xf8>
 8008462:	4a0c      	ldr	r2, [pc, #48]	; (8008494 <inc_lock+0x118>)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	4413      	add	r3, r2
 800846a:	330c      	adds	r3, #12
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	b29a      	uxth	r2, r3
 8008472:	e001      	b.n	8008478 <inc_lock+0xfc>
 8008474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008478:	4906      	ldr	r1, [pc, #24]	; (8008494 <inc_lock+0x118>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	440b      	add	r3, r1
 8008480:	330c      	adds	r3, #12
 8008482:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000950 	.word	0x20000950

08008498 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	607b      	str	r3, [r7, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d825      	bhi.n	80084f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80084ac:	4a17      	ldr	r2, [pc, #92]	; (800850c <dec_lock+0x74>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	4413      	add	r3, r2
 80084b4:	330c      	adds	r3, #12
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80084ba:	89fb      	ldrh	r3, [r7, #14]
 80084bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c0:	d101      	bne.n	80084c6 <dec_lock+0x2e>
 80084c2:	2300      	movs	r3, #0
 80084c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80084c6:	89fb      	ldrh	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <dec_lock+0x3a>
 80084cc:	89fb      	ldrh	r3, [r7, #14]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80084d2:	4a0e      	ldr	r2, [pc, #56]	; (800850c <dec_lock+0x74>)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	4413      	add	r3, r2
 80084da:	330c      	adds	r3, #12
 80084dc:	89fa      	ldrh	r2, [r7, #14]
 80084de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80084e0:	89fb      	ldrh	r3, [r7, #14]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <dec_lock+0x5a>
 80084e6:	4a09      	ldr	r2, [pc, #36]	; (800850c <dec_lock+0x74>)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	4413      	add	r3, r2
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	737b      	strb	r3, [r7, #13]
 80084f6:	e001      	b.n	80084fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80084f8:	2302      	movs	r3, #2
 80084fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80084fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000950 	.word	0x20000950

08008510 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e010      	b.n	8008540 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800851e:	4a0d      	ldr	r2, [pc, #52]	; (8008554 <clear_lock+0x44>)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	4413      	add	r3, r2
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	429a      	cmp	r2, r3
 800852c:	d105      	bne.n	800853a <clear_lock+0x2a>
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <clear_lock+0x44>)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	4413      	add	r3, r2
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d9eb      	bls.n	800851e <clear_lock+0xe>
	}
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	20000950 	.word	0x20000950

08008558 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	78db      	ldrb	r3, [r3, #3]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d034      	beq.n	80085d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7858      	ldrb	r0, [r3, #1]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800857c:	2301      	movs	r3, #1
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	f7ff fd40 	bl	8008004 <disk_write>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <sync_window+0x38>
			res = FR_DISK_ERR;
 800858a:	2301      	movs	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	e022      	b.n	80085d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d217      	bcs.n	80085d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	789b      	ldrb	r3, [r3, #2]
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	e010      	b.n	80085d0 <sync_window+0x78>
					wsect += fs->fsize;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4413      	add	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7858      	ldrb	r0, [r3, #1]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085c2:	2301      	movs	r3, #1
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	f7ff fd1d 	bl	8008004 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d8eb      	bhi.n	80085ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d01b      	beq.n	8008630 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ffad 	bl	8008558 <sync_window>
 80085fe:	4603      	mov	r3, r0
 8008600:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d113      	bne.n	8008630 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	7858      	ldrb	r0, [r3, #1]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008612:	2301      	movs	r3, #1
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	f7ff fcd5 	bl	8007fc4 <disk_read>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008620:	f04f 33ff 	mov.w	r3, #4294967295
 8008624:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008626:	2301      	movs	r3, #1
 8008628:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff ff87 	bl	8008558 <sync_window>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d158      	bne.n	8008706 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d148      	bne.n	80086ee <sync_fs+0xb2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	791b      	ldrb	r3, [r3, #4]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d144      	bne.n	80086ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3330      	adds	r3, #48	; 0x30
 8008668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fda9 	bl	80081c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3330      	adds	r3, #48	; 0x30
 8008678:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800867c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff fd38 	bl	80080f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3330      	adds	r3, #48	; 0x30
 800868a:	4921      	ldr	r1, [pc, #132]	; (8008710 <sync_fs+0xd4>)
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fd4d 	bl	800812c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3330      	adds	r3, #48	; 0x30
 8008696:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800869a:	491e      	ldr	r1, [pc, #120]	; (8008714 <sync_fs+0xd8>)
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fd45 	bl	800812c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3330      	adds	r3, #48	; 0x30
 80086a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f7ff fd3b 	bl	800812c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3330      	adds	r3, #48	; 0x30
 80086ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7ff fd31 	bl	800812c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7858      	ldrb	r0, [r3, #1]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	2301      	movs	r3, #1
 80086e4:	f7ff fc8e 	bl	8008004 <disk_write>
			fs->fsi_flag = 0;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	785b      	ldrb	r3, [r3, #1]
 80086f2:	2200      	movs	r2, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fca4 	bl	8008044 <disk_ioctl>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <sync_fs+0xca>
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	41615252 	.word	0x41615252
 8008714:	61417272 	.word	0x61417272

08008718 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	3b02      	subs	r3, #2
 8008726:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	3b02      	subs	r3, #2
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d301      	bcc.n	8008738 <clust2sect+0x20>
 8008734:	2300      	movs	r3, #0
 8008736:	e008      	b.n	800874a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	895b      	ldrh	r3, [r3, #10]
 800873c:	461a      	mov	r2, r3
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	fb03 f202 	mul.w	r2, r3, r2
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	4413      	add	r3, r2
}
 800874a:	4618      	mov	r0, r3
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d904      	bls.n	8008776 <get_fat+0x20>
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d302      	bcc.n	800877c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008776:	2301      	movs	r3, #1
 8008778:	617b      	str	r3, [r7, #20]
 800877a:	e08f      	b.n	800889c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b03      	cmp	r3, #3
 8008788:	d062      	beq.n	8008850 <get_fat+0xfa>
 800878a:	2b03      	cmp	r3, #3
 800878c:	dc7c      	bgt.n	8008888 <get_fat+0x132>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d002      	beq.n	8008798 <get_fat+0x42>
 8008792:	2b02      	cmp	r3, #2
 8008794:	d042      	beq.n	800881c <get_fat+0xc6>
 8008796:	e077      	b.n	8008888 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	6a1a      	ldr	r2, [r3, #32]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	0a5b      	lsrs	r3, r3, #9
 80087ae:	4413      	add	r3, r2
 80087b0:	4619      	mov	r1, r3
 80087b2:	6938      	ldr	r0, [r7, #16]
 80087b4:	f7ff ff14 	bl	80085e0 <move_window>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d167      	bne.n	800888e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	60fa      	str	r2, [r7, #12]
 80087c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4413      	add	r3, r2
 80087cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	6a1a      	ldr	r2, [r3, #32]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	0a5b      	lsrs	r3, r3, #9
 80087da:	4413      	add	r3, r2
 80087dc:	4619      	mov	r1, r3
 80087de:	6938      	ldr	r0, [r7, #16]
 80087e0:	f7ff fefe 	bl	80085e0 <move_window>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d153      	bne.n	8008892 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4413      	add	r3, r2
 80087f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	461a      	mov	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <get_fat+0xbc>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	091b      	lsrs	r3, r3, #4
 8008810:	e002      	b.n	8008818 <get_fat+0xc2>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008818:	617b      	str	r3, [r7, #20]
			break;
 800881a:	e03f      	b.n	800889c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6a1a      	ldr	r2, [r3, #32]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	4413      	add	r3, r2
 8008826:	4619      	mov	r1, r3
 8008828:	6938      	ldr	r0, [r7, #16]
 800882a:	f7ff fed9 	bl	80085e0 <move_window>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d130      	bne.n	8008896 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008842:	4413      	add	r3, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff fc1b 	bl	8008080 <ld_word>
 800884a:	4603      	mov	r3, r0
 800884c:	617b      	str	r3, [r7, #20]
			break;
 800884e:	e025      	b.n	800889c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	6a1a      	ldr	r2, [r3, #32]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	09db      	lsrs	r3, r3, #7
 8008858:	4413      	add	r3, r2
 800885a:	4619      	mov	r1, r3
 800885c:	6938      	ldr	r0, [r7, #16]
 800885e:	f7ff febf 	bl	80085e0 <move_window>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d118      	bne.n	800889a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008876:	4413      	add	r3, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fc19 	bl	80080b0 <ld_dword>
 800887e:	4603      	mov	r3, r0
 8008880:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008884:	617b      	str	r3, [r7, #20]
			break;
 8008886:	e009      	b.n	800889c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e006      	b.n	800889c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800888e:	bf00      	nop
 8008890:	e004      	b.n	800889c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008892:	bf00      	nop
 8008894:	e002      	b.n	800889c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800889a:	bf00      	nop
		}
	}

	return val;
 800889c:	697b      	ldr	r3, [r7, #20]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80088a6:	b590      	push	{r4, r7, lr}
 80088a8:	b089      	sub	sp, #36	; 0x24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088b2:	2302      	movs	r3, #2
 80088b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f240 80d9 	bls.w	8008a70 <put_fat+0x1ca>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	f080 80d3 	bcs.w	8008a70 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	f000 8096 	beq.w	8008a00 <put_fat+0x15a>
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	f300 80cb 	bgt.w	8008a70 <put_fat+0x1ca>
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d002      	beq.n	80088e4 <put_fat+0x3e>
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d06e      	beq.n	80089c0 <put_fat+0x11a>
 80088e2:	e0c5      	b.n	8008a70 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	085b      	lsrs	r3, r3, #1
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	4413      	add	r3, r2
 80088f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1a      	ldr	r2, [r3, #32]
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	0a5b      	lsrs	r3, r3, #9
 80088fa:	4413      	add	r3, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fe6e 	bl	80085e0 <move_window>
 8008904:	4603      	mov	r3, r0
 8008906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008908:	7ffb      	ldrb	r3, [r7, #31]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 80a9 	bne.w	8008a62 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	1c59      	adds	r1, r3, #1
 800891a:	61b9      	str	r1, [r7, #24]
 800891c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008920:	4413      	add	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00d      	beq.n	800894a <put_fat+0xa4>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	b25b      	sxtb	r3, r3
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	b25a      	sxtb	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	b25b      	sxtb	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b25b      	sxtb	r3, r3
 8008946:	b2db      	uxtb	r3, r3
 8008948:	e001      	b.n	800894e <put_fat+0xa8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a1a      	ldr	r2, [r3, #32]
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	0a5b      	lsrs	r3, r3, #9
 8008960:	4413      	add	r3, r2
 8008962:	4619      	mov	r1, r3
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fe3b 	bl	80085e0 <move_window>
 800896a:	4603      	mov	r3, r0
 800896c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800896e:	7ffb      	ldrb	r3, [r7, #31]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d178      	bne.n	8008a66 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008980:	4413      	add	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <put_fat+0xf0>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	b2db      	uxtb	r3, r3
 8008994:	e00e      	b.n	80089b4 <put_fat+0x10e>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	b25b      	sxtb	r3, r3
 800899c:	f023 030f 	bic.w	r3, r3, #15
 80089a0:	b25a      	sxtb	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	b25b      	sxtb	r3, r3
 80089a8:	f003 030f 	and.w	r3, r3, #15
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	70da      	strb	r2, [r3, #3]
			break;
 80089be:	e057      	b.n	8008a70 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a1a      	ldr	r2, [r3, #32]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	4413      	add	r3, r2
 80089ca:	4619      	mov	r1, r3
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff fe07 	bl	80085e0 <move_window>
 80089d2:	4603      	mov	r3, r0
 80089d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089d6:	7ffb      	ldrb	r3, [r7, #31]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d146      	bne.n	8008a6a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80089ea:	4413      	add	r3, r2
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	b292      	uxth	r2, r2
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fb7f 	bl	80080f6 <st_word>
			fs->wflag = 1;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	70da      	strb	r2, [r3, #3]
			break;
 80089fe:	e037      	b.n	8008a70 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1a      	ldr	r2, [r3, #32]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	09db      	lsrs	r3, r3, #7
 8008a08:	4413      	add	r3, r2
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff fde7 	bl	80085e0 <move_window>
 8008a12:	4603      	mov	r3, r0
 8008a14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a16:	7ffb      	ldrb	r3, [r7, #31]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d128      	bne.n	8008a6e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a30:	4413      	add	r3, r2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fb3c 	bl	80080b0 <ld_dword>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a3e:	4323      	orrs	r3, r4
 8008a40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a50:	4413      	add	r3, r2
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff fb69 	bl	800812c <st_dword>
			fs->wflag = 1;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	70da      	strb	r2, [r3, #3]
			break;
 8008a60:	e006      	b.n	8008a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a62:	bf00      	nop
 8008a64:	e004      	b.n	8008a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a66:	bf00      	nop
 8008a68:	e002      	b.n	8008a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a6a:	bf00      	nop
 8008a6c:	e000      	b.n	8008a70 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008a6e:	bf00      	nop
		}
	}
	return res;
 8008a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3724      	adds	r7, #36	; 0x24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd90      	pop	{r4, r7, pc}

08008a7a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d904      	bls.n	8008aa0 <remove_chain+0x26>
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d301      	bcc.n	8008aa4 <remove_chain+0x2a>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e04b      	b.n	8008b3c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	69b8      	ldr	r0, [r7, #24]
 8008ab2:	f7ff fef8 	bl	80088a6 <put_fat>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008aba:	7ffb      	ldrb	r3, [r7, #31]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <remove_chain+0x4a>
 8008ac0:	7ffb      	ldrb	r3, [r7, #31]
 8008ac2:	e03b      	b.n	8008b3c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff fe45 	bl	8008756 <get_fat>
 8008acc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d031      	beq.n	8008b38 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <remove_chain+0x64>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e02e      	b.n	8008b3c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae4:	d101      	bne.n	8008aea <remove_chain+0x70>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e028      	b.n	8008b3c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008aea:	2200      	movs	r2, #0
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	69b8      	ldr	r0, [r7, #24]
 8008af0:	f7ff fed9 	bl	80088a6 <put_fat>
 8008af4:	4603      	mov	r3, r0
 8008af6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008af8:	7ffb      	ldrb	r3, [r7, #31]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <remove_chain+0x88>
 8008afe:	7ffb      	ldrb	r3, [r7, #31]
 8008b00:	e01c      	b.n	8008b3c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	691a      	ldr	r2, [r3, #16]
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	3b02      	subs	r3, #2
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d20b      	bcs.n	8008b28 <remove_chain+0xae>
			fs->free_clst++;
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	791b      	ldrb	r3, [r3, #4]
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3c6      	bcc.n	8008ac4 <remove_chain+0x4a>
 8008b36:	e000      	b.n	8008b3a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b38:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10d      	bne.n	8008b76 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <create_chain+0x2c>
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d31b      	bcc.n	8008ba8 <create_chain+0x64>
 8008b70:	2301      	movs	r3, #1
 8008b72:	61bb      	str	r3, [r7, #24]
 8008b74:	e018      	b.n	8008ba8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fdec 	bl	8008756 <get_fat>
 8008b7e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d801      	bhi.n	8008b8a <create_chain+0x46>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e070      	b.n	8008c6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d101      	bne.n	8008b96 <create_chain+0x52>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	e06a      	b.n	8008c6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d201      	bcs.n	8008ba4 <create_chain+0x60>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	e063      	b.n	8008c6c <create_chain+0x128>
		scl = clst;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d307      	bcc.n	8008bcc <create_chain+0x88>
				ncl = 2;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d901      	bls.n	8008bcc <create_chain+0x88>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e04f      	b.n	8008c6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008bcc:	69f9      	ldr	r1, [r7, #28]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff fdc1 	bl	8008756 <get_fat>
 8008bd4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00e      	beq.n	8008bfa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d003      	beq.n	8008bea <create_chain+0xa6>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d101      	bne.n	8008bee <create_chain+0xaa>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	e03e      	b.n	8008c6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d1da      	bne.n	8008bac <create_chain+0x68>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e038      	b.n	8008c6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008bfa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	69f9      	ldr	r1, [r7, #28]
 8008c02:	6938      	ldr	r0, [r7, #16]
 8008c04:	f7ff fe4f 	bl	80088a6 <put_fat>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <create_chain+0xe2>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d006      	beq.n	8008c26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6938      	ldr	r0, [r7, #16]
 8008c1e:	f7ff fe42 	bl	80088a6 <put_fat>
 8008c22:	4603      	mov	r3, r0
 8008c24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d116      	bne.n	8008c5a <create_chain+0x116>
		fs->last_clst = ncl;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	3b02      	subs	r3, #2
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d804      	bhi.n	8008c4a <create_chain+0x106>
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	791b      	ldrb	r3, [r3, #4]
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	711a      	strb	r2, [r3, #4]
 8008c58:	e007      	b.n	8008c6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d102      	bne.n	8008c66 <create_chain+0x122>
 8008c60:	f04f 33ff 	mov.w	r3, #4294967295
 8008c64:	e000      	b.n	8008c68 <create_chain+0x124>
 8008c66:	2301      	movs	r3, #1
 8008c68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c6a:	69fb      	ldr	r3, [r7, #28]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c8a:	d204      	bcs.n	8008c96 <dir_sdi+0x22>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008c96:	2302      	movs	r3, #2
 8008c98:	e063      	b.n	8008d62 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d106      	bne.n	8008cba <dir_sdi+0x46>
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d902      	bls.n	8008cba <dir_sdi+0x46>
		clst = fs->dirbase;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10c      	bne.n	8008cda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	8912      	ldrh	r2, [r2, #8]
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d301      	bcc.n	8008cd0 <dir_sdi+0x5c>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e048      	b.n	8008d62 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	61da      	str	r2, [r3, #28]
 8008cd8:	e029      	b.n	8008d2e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	895b      	ldrh	r3, [r3, #10]
 8008cde:	025b      	lsls	r3, r3, #9
 8008ce0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ce2:	e019      	b.n	8008d18 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6979      	ldr	r1, [r7, #20]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff fd34 	bl	8008756 <get_fat>
 8008cee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d101      	bne.n	8008cfc <dir_sdi+0x88>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e032      	b.n	8008d62 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d904      	bls.n	8008d0c <dir_sdi+0x98>
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d301      	bcc.n	8008d10 <dir_sdi+0x9c>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e028      	b.n	8008d62 <dir_sdi+0xee>
			ofs -= csz;
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d2e1      	bcs.n	8008ce4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008d20:	6979      	ldr	r1, [r7, #20]
 8008d22:	6938      	ldr	r0, [r7, #16]
 8008d24:	f7ff fcf8 	bl	8008718 <clust2sect>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <dir_sdi+0xcc>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e010      	b.n	8008d62 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	69da      	ldr	r2, [r3, #28]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	0a5b      	lsrs	r3, r3, #9
 8008d48:	441a      	add	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	441a      	add	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b086      	sub	sp, #24
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	3320      	adds	r3, #32
 8008d80:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <dir_next+0x28>
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d90:	d301      	bcc.n	8008d96 <dir_next+0x2c>
 8008d92:	2304      	movs	r3, #4
 8008d94:	e0aa      	b.n	8008eec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 8098 	bne.w	8008ed2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10b      	bne.n	8008dcc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	8912      	ldrh	r2, [r2, #8]
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	f0c0 8088 	bcc.w	8008ed2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	61da      	str	r2, [r3, #28]
 8008dc8:	2304      	movs	r3, #4
 8008dca:	e08f      	b.n	8008eec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	0a5b      	lsrs	r3, r3, #9
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	8952      	ldrh	r2, [r2, #10]
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d17a      	bne.n	8008ed2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7ff fcb6 	bl	8008756 <get_fat>
 8008dea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d801      	bhi.n	8008df6 <dir_next+0x8c>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e07a      	b.n	8008eec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d101      	bne.n	8008e02 <dir_next+0x98>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e074      	b.n	8008eec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d358      	bcc.n	8008ebe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	61da      	str	r2, [r3, #28]
 8008e18:	2304      	movs	r3, #4
 8008e1a:	e067      	b.n	8008eec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	4619      	mov	r1, r3
 8008e24:	4610      	mov	r0, r2
 8008e26:	f7ff fe8d 	bl	8008b44 <create_chain>
 8008e2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <dir_next+0xcc>
 8008e32:	2307      	movs	r3, #7
 8008e34:	e05a      	b.n	8008eec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <dir_next+0xd6>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e055      	b.n	8008eec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d101      	bne.n	8008e4c <dir_next+0xe2>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e04f      	b.n	8008eec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fb83 	bl	8008558 <sync_window>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <dir_next+0xf2>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e047      	b.n	8008eec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3330      	adds	r3, #48	; 0x30
 8008e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e64:	2100      	movs	r1, #0
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff f9ad 	bl	80081c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fc50 	bl	8008718 <clust2sect>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e7e:	e012      	b.n	8008ea6 <dir_next+0x13c>
						fs->wflag = 1;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff fb66 	bl	8008558 <sync_window>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <dir_next+0x12c>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e02a      	b.n	8008eec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	895b      	ldrh	r3, [r3, #10]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d3e6      	bcc.n	8008e80 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad2      	subs	r2, r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ec4:	6979      	ldr	r1, [r7, #20]
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff fc26 	bl	8008718 <clust2sect>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee4:	441a      	add	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008f04:	2100      	movs	r1, #0
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff feb4 	bl	8008c74 <dir_sdi>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d12b      	bne.n	8008f6e <dir_alloc+0x7a>
		n = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff fb5d 	bl	80085e0 <move_window>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d11d      	bne.n	8008f6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2be5      	cmp	r3, #229	; 0xe5
 8008f38:	d004      	beq.n	8008f44 <dir_alloc+0x50>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d107      	bne.n	8008f54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	3301      	adds	r3, #1
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d102      	bne.n	8008f58 <dir_alloc+0x64>
 8008f52:	e00c      	b.n	8008f6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008f58:	2101      	movs	r1, #1
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ff05 	bl	8008d6a <dir_next>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0d7      	beq.n	8008f1a <dir_alloc+0x26>
 8008f6a:	e000      	b.n	8008f6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008f6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d101      	bne.n	8008f78 <dir_alloc+0x84>
 8008f74:	2307      	movs	r3, #7
 8008f76:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	331a      	adds	r3, #26
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff f875 	bl	8008080 <ld_word>
 8008f96:	4603      	mov	r3, r0
 8008f98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d109      	bne.n	8008fb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff f86a 	bl	8008080 <ld_word>
 8008fac:	4603      	mov	r3, r0
 8008fae:	041b      	lsls	r3, r3, #16
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	331a      	adds	r3, #26
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	b292      	uxth	r2, r2
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff f88d 	bl	80080f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d109      	bne.n	8008ff8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f103 0214 	add.w	r2, r3, #20
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	0c1b      	lsrs	r3, r3, #16
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f7ff f87f 	bl	80080f6 <st_word>
	}
}
 8008ff8:	bf00      	nop
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fe2f 	bl	8008c74 <dir_sdi>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <dir_find+0x24>
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	e03e      	b.n	80090a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	4619      	mov	r1, r3
 800902a:	6938      	ldr	r0, [r7, #16]
 800902c:	f7ff fad8 	bl	80085e0 <move_window>
 8009030:	4603      	mov	r3, r0
 8009032:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d12f      	bne.n	800909a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <dir_find+0x4e>
 8009048:	2304      	movs	r3, #4
 800904a:	75fb      	strb	r3, [r7, #23]
 800904c:	e028      	b.n	80090a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	330b      	adds	r3, #11
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800905a:	b2da      	uxtb	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	330b      	adds	r3, #11
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <dir_find+0x86>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a18      	ldr	r0, [r3, #32]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3324      	adds	r3, #36	; 0x24
 8009078:	220b      	movs	r2, #11
 800907a:	4619      	mov	r1, r3
 800907c:	f7ff f8be 	bl	80081fc <mem_cmp>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009086:	2100      	movs	r1, #0
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff fe6e 	bl	8008d6a <dir_next>
 800908e:	4603      	mov	r3, r0
 8009090:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0c5      	beq.n	8009024 <dir_find+0x24>
 8009098:	e002      	b.n	80090a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800909a:	bf00      	nop
 800909c:	e000      	b.n	80090a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800909e:	bf00      	nop

	return res;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80090b8:	2101      	movs	r1, #1
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff ff1a 	bl	8008ef4 <dir_alloc>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d11c      	bne.n	8009104 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	4619      	mov	r1, r3
 80090d0:	68b8      	ldr	r0, [r7, #8]
 80090d2:	f7ff fa85 	bl	80085e0 <move_window>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d111      	bne.n	8009104 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	2220      	movs	r2, #32
 80090e6:	2100      	movs	r1, #0
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff f86c 	bl	80081c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a18      	ldr	r0, [r3, #32]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3324      	adds	r3, #36	; 0x24
 80090f6:	220b      	movs	r2, #11
 80090f8:	4619      	mov	r1, r3
 80090fa:	f7ff f843 	bl	8008184 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2201      	movs	r2, #1
 8009102:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009126:	220b      	movs	r2, #11
 8009128:	2120      	movs	r1, #32
 800912a:	68b8      	ldr	r0, [r7, #8]
 800912c:	f7ff f84b 	bl	80081c6 <mem_set>
	si = i = 0; ni = 8;
 8009130:	2300      	movs	r3, #0
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	61fb      	str	r3, [r7, #28]
 8009138:	2308      	movs	r3, #8
 800913a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	61fa      	str	r2, [r7, #28]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800914a:	7efb      	ldrb	r3, [r7, #27]
 800914c:	2b20      	cmp	r3, #32
 800914e:	d94e      	bls.n	80091ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009150:	7efb      	ldrb	r3, [r7, #27]
 8009152:	2b2f      	cmp	r3, #47	; 0x2f
 8009154:	d006      	beq.n	8009164 <create_name+0x54>
 8009156:	7efb      	ldrb	r3, [r7, #27]
 8009158:	2b5c      	cmp	r3, #92	; 0x5c
 800915a:	d110      	bne.n	800917e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800915c:	e002      	b.n	8009164 <create_name+0x54>
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	3301      	adds	r3, #1
 8009162:	61fb      	str	r3, [r7, #28]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b2f      	cmp	r3, #47	; 0x2f
 800916e:	d0f6      	beq.n	800915e <create_name+0x4e>
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	4413      	add	r3, r2
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b5c      	cmp	r3, #92	; 0x5c
 800917a:	d0f0      	beq.n	800915e <create_name+0x4e>
			break;
 800917c:	e038      	b.n	80091f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800917e:	7efb      	ldrb	r3, [r7, #27]
 8009180:	2b2e      	cmp	r3, #46	; 0x2e
 8009182:	d003      	beq.n	800918c <create_name+0x7c>
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d30c      	bcc.n	80091a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2b0b      	cmp	r3, #11
 8009190:	d002      	beq.n	8009198 <create_name+0x88>
 8009192:	7efb      	ldrb	r3, [r7, #27]
 8009194:	2b2e      	cmp	r3, #46	; 0x2e
 8009196:	d001      	beq.n	800919c <create_name+0x8c>
 8009198:	2306      	movs	r3, #6
 800919a:	e044      	b.n	8009226 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800919c:	2308      	movs	r3, #8
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	230b      	movs	r3, #11
 80091a2:	617b      	str	r3, [r7, #20]
			continue;
 80091a4:	e022      	b.n	80091ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80091a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da04      	bge.n	80091b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80091ae:	7efb      	ldrb	r3, [r7, #27]
 80091b0:	3b80      	subs	r3, #128	; 0x80
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <create_name+0x120>)
 80091b4:	5cd3      	ldrb	r3, [r2, r3]
 80091b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80091b8:	7efb      	ldrb	r3, [r7, #27]
 80091ba:	4619      	mov	r1, r3
 80091bc:	481d      	ldr	r0, [pc, #116]	; (8009234 <create_name+0x124>)
 80091be:	f7ff f844 	bl	800824a <chk_chr>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <create_name+0xbc>
 80091c8:	2306      	movs	r3, #6
 80091ca:	e02c      	b.n	8009226 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80091cc:	7efb      	ldrb	r3, [r7, #27]
 80091ce:	2b60      	cmp	r3, #96	; 0x60
 80091d0:	d905      	bls.n	80091de <create_name+0xce>
 80091d2:	7efb      	ldrb	r3, [r7, #27]
 80091d4:	2b7a      	cmp	r3, #122	; 0x7a
 80091d6:	d802      	bhi.n	80091de <create_name+0xce>
 80091d8:	7efb      	ldrb	r3, [r7, #27]
 80091da:	3b20      	subs	r3, #32
 80091dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	613a      	str	r2, [r7, #16]
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	4413      	add	r3, r2
 80091e8:	7efa      	ldrb	r2, [r7, #27]
 80091ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80091ec:	e7a6      	b.n	800913c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	441a      	add	r2, r3
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <create_name+0xf4>
 8009200:	2306      	movs	r3, #6
 8009202:	e010      	b.n	8009226 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2be5      	cmp	r3, #229	; 0xe5
 800920a:	d102      	bne.n	8009212 <create_name+0x102>
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2205      	movs	r2, #5
 8009210:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009212:	7efb      	ldrb	r3, [r7, #27]
 8009214:	2b20      	cmp	r3, #32
 8009216:	d801      	bhi.n	800921c <create_name+0x10c>
 8009218:	2204      	movs	r2, #4
 800921a:	e000      	b.n	800921e <create_name+0x10e>
 800921c:	2200      	movs	r2, #0
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	330b      	adds	r3, #11
 8009222:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009224:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009226:	4618      	mov	r0, r3
 8009228:	3720      	adds	r7, #32
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	08012454 	.word	0x08012454
 8009234:	08010f28 	.word	0x08010f28

08009238 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800924c:	e002      	b.n	8009254 <follow_path+0x1c>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b2f      	cmp	r3, #47	; 0x2f
 800925a:	d0f8      	beq.n	800924e <follow_path+0x16>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b5c      	cmp	r3, #92	; 0x5c
 8009262:	d0f4      	beq.n	800924e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2200      	movs	r2, #0
 8009268:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b1f      	cmp	r3, #31
 8009270:	d80a      	bhi.n	8009288 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2280      	movs	r2, #128	; 0x80
 8009276:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800927a:	2100      	movs	r1, #0
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff fcf9 	bl	8008c74 <dir_sdi>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]
 8009286:	e043      	b.n	8009310 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009288:	463b      	mov	r3, r7
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ff3f 	bl	8009110 <create_name>
 8009292:	4603      	mov	r3, r0
 8009294:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d134      	bne.n	8009306 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff feaf 	bl	8009000 <dir_find>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80092ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d127      	bne.n	800930a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d122      	bne.n	800930a <follow_path+0xd2>
 80092c4:	2305      	movs	r3, #5
 80092c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80092c8:	e01f      	b.n	800930a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092ca:	7afb      	ldrb	r3, [r7, #11]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11c      	bne.n	800930e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	799b      	ldrb	r3, [r3, #6]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80092e0:	2305      	movs	r3, #5
 80092e2:	75fb      	strb	r3, [r7, #23]
 80092e4:	e014      	b.n	8009310 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f4:	4413      	add	r3, r2
 80092f6:	4619      	mov	r1, r3
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fe42 	bl	8008f82 <ld_clust>
 80092fe:	4602      	mov	r2, r0
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009304:	e7c0      	b.n	8009288 <follow_path+0x50>
			if (res != FR_OK) break;
 8009306:	bf00      	nop
 8009308:	e002      	b.n	8009310 <follow_path+0xd8>
				break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800930e:	bf00      	nop
			}
		}
	}

	return res;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800931a:	b480      	push	{r7}
 800931c:	b087      	sub	sp, #28
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
 8009326:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d031      	beq.n	8009394 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e002      	b.n	800933e <get_ldnumber+0x24>
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	3301      	adds	r3, #1
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b20      	cmp	r3, #32
 8009344:	d903      	bls.n	800934e <get_ldnumber+0x34>
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b3a      	cmp	r3, #58	; 0x3a
 800934c:	d1f4      	bne.n	8009338 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b3a      	cmp	r3, #58	; 0x3a
 8009354:	d11c      	bne.n	8009390 <get_ldnumber+0x76>
			tp = *path;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	60fa      	str	r2, [r7, #12]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	3b30      	subs	r3, #48	; 0x30
 8009366:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b09      	cmp	r3, #9
 800936c:	d80e      	bhi.n	800938c <get_ldnumber+0x72>
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	429a      	cmp	r2, r3
 8009374:	d10a      	bne.n	800938c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d107      	bne.n	800938c <get_ldnumber+0x72>
					vol = (int)i;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	3301      	adds	r3, #1
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	e002      	b.n	8009396 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009394:	693b      	ldr	r3, [r7, #16]
}
 8009396:	4618      	mov	r0, r3
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	70da      	strb	r2, [r3, #3]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff f90e 	bl	80085e0 <move_window>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <check_fs+0x2a>
 80093ca:	2304      	movs	r3, #4
 80093cc:	e038      	b.n	8009440 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3330      	adds	r3, #48	; 0x30
 80093d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fe52 	bl	8008080 <ld_word>
 80093dc:	4603      	mov	r3, r0
 80093de:	461a      	mov	r2, r3
 80093e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d001      	beq.n	80093ec <check_fs+0x48>
 80093e8:	2303      	movs	r3, #3
 80093ea:	e029      	b.n	8009440 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093f2:	2be9      	cmp	r3, #233	; 0xe9
 80093f4:	d009      	beq.n	800940a <check_fs+0x66>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093fc:	2beb      	cmp	r3, #235	; 0xeb
 80093fe:	d11e      	bne.n	800943e <check_fs+0x9a>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009406:	2b90      	cmp	r3, #144	; 0x90
 8009408:	d119      	bne.n	800943e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3330      	adds	r3, #48	; 0x30
 800940e:	3336      	adds	r3, #54	; 0x36
 8009410:	4618      	mov	r0, r3
 8009412:	f7fe fe4d 	bl	80080b0 <ld_dword>
 8009416:	4603      	mov	r3, r0
 8009418:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <check_fs+0xa4>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d101      	bne.n	8009426 <check_fs+0x82>
 8009422:	2300      	movs	r3, #0
 8009424:	e00c      	b.n	8009440 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3330      	adds	r3, #48	; 0x30
 800942a:	3352      	adds	r3, #82	; 0x52
 800942c:	4618      	mov	r0, r3
 800942e:	f7fe fe3f 	bl	80080b0 <ld_dword>
 8009432:	4603      	mov	r3, r0
 8009434:	4a05      	ldr	r2, [pc, #20]	; (800944c <check_fs+0xa8>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d101      	bne.n	800943e <check_fs+0x9a>
 800943a:	2300      	movs	r3, #0
 800943c:	e000      	b.n	8009440 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800943e:	2302      	movs	r3, #2
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	00544146 	.word	0x00544146
 800944c:	33544146 	.word	0x33544146

08009450 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b096      	sub	sp, #88	; 0x58
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	4613      	mov	r3, r2
 800945c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f7ff ff58 	bl	800931a <get_ldnumber>
 800946a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	2b00      	cmp	r3, #0
 8009470:	da01      	bge.n	8009476 <find_volume+0x26>
 8009472:	230b      	movs	r3, #11
 8009474:	e22d      	b.n	80098d2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009476:	4aa1      	ldr	r2, [pc, #644]	; (80096fc <find_volume+0x2ac>)
 8009478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800947e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <find_volume+0x3a>
 8009486:	230c      	movs	r3, #12
 8009488:	e223      	b.n	80098d2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800948e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	f023 0301 	bic.w	r3, r3, #1
 8009496:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01a      	beq.n	80094d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fd4d 	bl	8007f44 <disk_status>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80094b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10c      	bne.n	80094d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <find_volume+0x82>
 80094c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80094ce:	230a      	movs	r3, #10
 80094d0:	e1ff      	b.n	80098d2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80094d2:	2300      	movs	r3, #0
 80094d4:	e1fd      	b.n	80098d2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fd45 	bl	8007f78 <disk_initialize>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80094f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009500:	2303      	movs	r3, #3
 8009502:	e1e6      	b.n	80098d2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d007      	beq.n	800951a <find_volume+0xca>
 800950a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009516:	230a      	movs	r3, #10
 8009518:	e1db      	b.n	80098d2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800951e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009522:	f7ff ff3f 	bl	80093a4 <check_fs>
 8009526:	4603      	mov	r3, r0
 8009528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800952c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009530:	2b02      	cmp	r3, #2
 8009532:	d149      	bne.n	80095c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009534:	2300      	movs	r3, #0
 8009536:	643b      	str	r3, [r7, #64]	; 0x40
 8009538:	e01e      	b.n	8009578 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009548:	4413      	add	r3, r2
 800954a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	3304      	adds	r3, #4
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d006      	beq.n	8009564 <find_volume+0x114>
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	3308      	adds	r3, #8
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fda8 	bl	80080b0 <ld_dword>
 8009560:	4602      	mov	r2, r0
 8009562:	e000      	b.n	8009566 <find_volume+0x116>
 8009564:	2200      	movs	r2, #0
 8009566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	3358      	adds	r3, #88	; 0x58
 800956c:	443b      	add	r3, r7
 800956e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009574:	3301      	adds	r3, #1
 8009576:	643b      	str	r3, [r7, #64]	; 0x40
 8009578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957a:	2b03      	cmp	r3, #3
 800957c:	d9dd      	bls.n	800953a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800957e:	2300      	movs	r3, #0
 8009580:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <find_volume+0x13e>
 8009588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958a:	3b01      	subs	r3, #1
 800958c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800958e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	3358      	adds	r3, #88	; 0x58
 8009594:	443b      	add	r3, r7
 8009596:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800959a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800959c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <find_volume+0x15e>
 80095a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095a6:	f7ff fefd 	bl	80093a4 <check_fs>
 80095aa:	4603      	mov	r3, r0
 80095ac:	e000      	b.n	80095b0 <find_volume+0x160>
 80095ae:	2303      	movs	r3, #3
 80095b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80095b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d905      	bls.n	80095c8 <find_volume+0x178>
 80095bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095be:	3301      	adds	r3, #1
 80095c0:	643b      	str	r3, [r7, #64]	; 0x40
 80095c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d9e2      	bls.n	800958e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80095c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d101      	bne.n	80095d4 <find_volume+0x184>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e17e      	b.n	80098d2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80095d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d901      	bls.n	80095e0 <find_volume+0x190>
 80095dc:	230d      	movs	r3, #13
 80095de:	e178      	b.n	80098d2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	3330      	adds	r3, #48	; 0x30
 80095e4:	330b      	adds	r3, #11
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fd4a 	bl	8008080 <ld_word>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095f2:	d001      	beq.n	80095f8 <find_volume+0x1a8>
 80095f4:	230d      	movs	r3, #13
 80095f6:	e16c      	b.n	80098d2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	3330      	adds	r3, #48	; 0x30
 80095fc:	3316      	adds	r3, #22
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fd3e 	bl	8008080 <ld_word>
 8009604:	4603      	mov	r3, r0
 8009606:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <find_volume+0x1cc>
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	3330      	adds	r3, #48	; 0x30
 8009612:	3324      	adds	r3, #36	; 0x24
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fd4b 	bl	80080b0 <ld_dword>
 800961a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009620:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	789b      	ldrb	r3, [r3, #2]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d005      	beq.n	8009640 <find_volume+0x1f0>
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	789b      	ldrb	r3, [r3, #2]
 8009638:	2b02      	cmp	r3, #2
 800963a:	d001      	beq.n	8009640 <find_volume+0x1f0>
 800963c:	230d      	movs	r3, #13
 800963e:	e148      	b.n	80098d2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	789b      	ldrb	r3, [r3, #2]
 8009644:	461a      	mov	r2, r3
 8009646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009648:	fb02 f303 	mul.w	r3, r2, r3
 800964c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009654:	b29a      	uxth	r2, r3
 8009656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009658:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	895b      	ldrh	r3, [r3, #10]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d008      	beq.n	8009674 <find_volume+0x224>
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	895b      	ldrh	r3, [r3, #10]
 8009666:	461a      	mov	r2, r3
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	895b      	ldrh	r3, [r3, #10]
 800966c:	3b01      	subs	r3, #1
 800966e:	4013      	ands	r3, r2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <find_volume+0x228>
 8009674:	230d      	movs	r3, #13
 8009676:	e12c      	b.n	80098d2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	3330      	adds	r3, #48	; 0x30
 800967c:	3311      	adds	r3, #17
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fcfe 	bl	8008080 <ld_word>
 8009684:	4603      	mov	r3, r0
 8009686:	461a      	mov	r2, r3
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	891b      	ldrh	r3, [r3, #8]
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <find_volume+0x24e>
 800969a:	230d      	movs	r3, #13
 800969c:	e119      	b.n	80098d2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	3330      	adds	r3, #48	; 0x30
 80096a2:	3313      	adds	r3, #19
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fceb 	bl	8008080 <ld_word>
 80096aa:	4603      	mov	r3, r0
 80096ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80096ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d106      	bne.n	80096c2 <find_volume+0x272>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	3330      	adds	r3, #48	; 0x30
 80096b8:	3320      	adds	r3, #32
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fcf8 	bl	80080b0 <ld_dword>
 80096c0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	3330      	adds	r3, #48	; 0x30
 80096c6:	330e      	adds	r3, #14
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fcd9 	bl	8008080 <ld_word>
 80096ce:	4603      	mov	r3, r0
 80096d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80096d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <find_volume+0x28c>
 80096d8:	230d      	movs	r3, #13
 80096da:	e0fa      	b.n	80098d2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80096dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e0:	4413      	add	r3, r2
 80096e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096e4:	8912      	ldrh	r2, [r2, #8]
 80096e6:	0912      	lsrs	r2, r2, #4
 80096e8:	b292      	uxth	r2, r2
 80096ea:	4413      	add	r3, r2
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80096ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d204      	bcs.n	8009700 <find_volume+0x2b0>
 80096f6:	230d      	movs	r3, #13
 80096f8:	e0eb      	b.n	80098d2 <find_volume+0x482>
 80096fa:	bf00      	nop
 80096fc:	20000948 	.word	0x20000948
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009708:	8952      	ldrh	r2, [r2, #10]
 800970a:	fbb3 f3f2 	udiv	r3, r3, r2
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <find_volume+0x2ca>
 8009716:	230d      	movs	r3, #13
 8009718:	e0db      	b.n	80098d2 <find_volume+0x482>
		fmt = FS_FAT32;
 800971a:	2303      	movs	r3, #3
 800971c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009726:	4293      	cmp	r3, r2
 8009728:	d802      	bhi.n	8009730 <find_volume+0x2e0>
 800972a:	2302      	movs	r3, #2
 800972c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009736:	4293      	cmp	r3, r2
 8009738:	d802      	bhi.n	8009740 <find_volume+0x2f0>
 800973a:	2301      	movs	r3, #1
 800973c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	1c9a      	adds	r2, r3, #2
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800974c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800974e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009752:	441a      	add	r2, r3
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	441a      	add	r2, r3
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009766:	2b03      	cmp	r3, #3
 8009768:	d11e      	bne.n	80097a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	3330      	adds	r3, #48	; 0x30
 800976e:	332a      	adds	r3, #42	; 0x2a
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe fc85 	bl	8008080 <ld_word>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <find_volume+0x330>
 800977c:	230d      	movs	r3, #13
 800977e:	e0a8      	b.n	80098d2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	891b      	ldrh	r3, [r3, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <find_volume+0x33c>
 8009788:	230d      	movs	r3, #13
 800978a:	e0a2      	b.n	80098d2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	3330      	adds	r3, #48	; 0x30
 8009790:	332c      	adds	r3, #44	; 0x2c
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fc8c 	bl	80080b0 <ld_dword>
 8009798:	4602      	mov	r2, r0
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	647b      	str	r3, [r7, #68]	; 0x44
 80097a6:	e01f      	b.n	80097e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	891b      	ldrh	r3, [r3, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <find_volume+0x364>
 80097b0:	230d      	movs	r3, #13
 80097b2:	e08e      	b.n	80098d2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	6a1a      	ldr	r2, [r3, #32]
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	441a      	add	r2, r3
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80097c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d103      	bne.n	80097d0 <find_volume+0x380>
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	e00a      	b.n	80097e6 <find_volume+0x396>
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	695a      	ldr	r2, [r3, #20]
 80097d4:	4613      	mov	r3, r2
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	4413      	add	r3, r2
 80097da:	085a      	lsrs	r2, r3, #1
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80097e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	699a      	ldr	r2, [r3, #24]
 80097ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80097f2:	0a5b      	lsrs	r3, r3, #9
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d201      	bcs.n	80097fc <find_volume+0x3ac>
 80097f8:	230d      	movs	r3, #13
 80097fa:	e06a      	b.n	80098d2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	611a      	str	r2, [r3, #16]
 8009804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009806:	691a      	ldr	r2, [r3, #16]
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	2280      	movs	r2, #128	; 0x80
 8009810:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009816:	2b03      	cmp	r3, #3
 8009818:	d149      	bne.n	80098ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	3330      	adds	r3, #48	; 0x30
 800981e:	3330      	adds	r3, #48	; 0x30
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fc2d 	bl	8008080 <ld_word>
 8009826:	4603      	mov	r3, r0
 8009828:	2b01      	cmp	r3, #1
 800982a:	d140      	bne.n	80098ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800982c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982e:	3301      	adds	r3, #1
 8009830:	4619      	mov	r1, r3
 8009832:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009834:	f7fe fed4 	bl	80085e0 <move_window>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d137      	bne.n	80098ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	2200      	movs	r2, #0
 8009842:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	3330      	adds	r3, #48	; 0x30
 8009848:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fc17 	bl	8008080 <ld_word>
 8009852:	4603      	mov	r3, r0
 8009854:	461a      	mov	r2, r3
 8009856:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800985a:	429a      	cmp	r2, r3
 800985c:	d127      	bne.n	80098ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	3330      	adds	r3, #48	; 0x30
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fc24 	bl	80080b0 <ld_dword>
 8009868:	4603      	mov	r3, r0
 800986a:	4a1c      	ldr	r2, [pc, #112]	; (80098dc <find_volume+0x48c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d11e      	bne.n	80098ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	3330      	adds	r3, #48	; 0x30
 8009874:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fc19 	bl	80080b0 <ld_dword>
 800987e:	4603      	mov	r3, r0
 8009880:	4a17      	ldr	r2, [pc, #92]	; (80098e0 <find_volume+0x490>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d113      	bne.n	80098ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	3330      	adds	r3, #48	; 0x30
 800988a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fc0e 	bl	80080b0 <ld_dword>
 8009894:	4602      	mov	r2, r0
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	3330      	adds	r3, #48	; 0x30
 800989e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fc04 	bl	80080b0 <ld_dword>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80098b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80098b6:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <find_volume+0x494>)
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	3301      	adds	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <find_volume+0x494>)
 80098c0:	801a      	strh	r2, [r3, #0]
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <find_volume+0x494>)
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80098ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098cc:	f7fe fe20 	bl	8008510 <clear_lock>
#endif
	return FR_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3758      	adds	r7, #88	; 0x58
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	41615252 	.word	0x41615252
 80098e0:	61417272 	.word	0x61417272
 80098e4:	2000094c 	.word	0x2000094c

080098e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80098f2:	2309      	movs	r3, #9
 80098f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01c      	beq.n	8009936 <validate+0x4e>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d018      	beq.n	8009936 <validate+0x4e>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d013      	beq.n	8009936 <validate+0x4e>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	889a      	ldrh	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	88db      	ldrh	r3, [r3, #6]
 8009918:	429a      	cmp	r2, r3
 800991a:	d10c      	bne.n	8009936 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fb0e 	bl	8007f44 <disk_status>
 8009928:	4603      	mov	r3, r0
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <validate+0x4e>
			res = FR_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <validate+0x5a>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	e000      	b.n	8009944 <validate+0x5c>
 8009942:	2300      	movs	r3, #0
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	6013      	str	r3, [r2, #0]
	return res;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009966:	f107 0310 	add.w	r3, r7, #16
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff fcd5 	bl	800931a <get_ldnumber>
 8009970:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	da01      	bge.n	800997c <f_mount+0x28>
 8009978:	230b      	movs	r3, #11
 800997a:	e02b      	b.n	80099d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800997c:	4a17      	ldr	r2, [pc, #92]	; (80099dc <f_mount+0x88>)
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009984:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800998c:	69b8      	ldr	r0, [r7, #24]
 800998e:	f7fe fdbf 	bl	8008510 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	490d      	ldr	r1, [pc, #52]	; (80099dc <f_mount+0x88>)
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <f_mount+0x66>
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d001      	beq.n	80099be <f_mount+0x6a>
 80099ba:	2300      	movs	r3, #0
 80099bc:	e00a      	b.n	80099d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80099be:	f107 010c 	add.w	r1, r7, #12
 80099c2:	f107 0308 	add.w	r3, r7, #8
 80099c6:	2200      	movs	r2, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff fd41 	bl	8009450 <find_volume>
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000948 	.word	0x20000948

080099e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b098      	sub	sp, #96	; 0x60
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	4613      	mov	r3, r2
 80099ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <f_open+0x18>
 80099f4:	2309      	movs	r3, #9
 80099f6:	e1a9      	b.n	8009d4c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009a00:	79fa      	ldrb	r2, [r7, #7]
 8009a02:	f107 0110 	add.w	r1, r7, #16
 8009a06:	f107 0308 	add.w	r3, r7, #8
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fd20 	bl	8009450 <find_volume>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f040 818d 	bne.w	8009d3a <f_open+0x35a>
		dj.obj.fs = fs;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	f107 0314 	add.w	r3, r7, #20
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff fc03 	bl	8009238 <follow_path>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11a      	bne.n	8009a76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009a40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	da03      	bge.n	8009a52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009a4a:	2306      	movs	r3, #6
 8009a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a50:	e011      	b.n	8009a76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	f023 0301 	bic.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bf14      	ite	ne
 8009a5c:	2301      	movne	r3, #1
 8009a5e:	2300      	moveq	r3, #0
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	461a      	mov	r2, r3
 8009a64:	f107 0314 	add.w	r3, r7, #20
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fc08 	bl	8008280 <chk_lock>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	f003 031c 	and.w	r3, r3, #28
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d07e      	beq.n	8009b7e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8009a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d017      	beq.n	8009ab8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a8c:	2b04      	cmp	r3, #4
 8009a8e:	d10e      	bne.n	8009aae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a90:	f7fe fc52 	bl	8008338 <enq_lock>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d006      	beq.n	8009aa8 <f_open+0xc8>
 8009a9a:	f107 0314 	add.w	r3, r7, #20
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fb03 	bl	80090aa <dir_register>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	e000      	b.n	8009aaa <f_open+0xca>
 8009aa8:	2312      	movs	r3, #18
 8009aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	f043 0308 	orr.w	r3, r3, #8
 8009ab4:	71fb      	strb	r3, [r7, #7]
 8009ab6:	e010      	b.n	8009ada <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ab8:	7ebb      	ldrb	r3, [r7, #26]
 8009aba:	f003 0311 	and.w	r3, r3, #17
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <f_open+0xea>
					res = FR_DENIED;
 8009ac2:	2307      	movs	r3, #7
 8009ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ac8:	e007      	b.n	8009ada <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <f_open+0xfa>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d167      	bne.n	8009bb2 <f_open+0x1d2>
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d062      	beq.n	8009bb2 <f_open+0x1d2>
				dw = GET_FATTIME();
 8009aec:	4b99      	ldr	r3, [pc, #612]	; (8009d54 <f_open+0x374>)
 8009aee:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af2:	330e      	adds	r3, #14
 8009af4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fb18 	bl	800812c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	3316      	adds	r3, #22
 8009b00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fb12 	bl	800812c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0a:	330b      	adds	r3, #11
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b14:	4611      	mov	r1, r2
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fa33 	bl	8008f82 <ld_clust>
 8009b1c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b22:	2200      	movs	r2, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7ff fa4b 	bl	8008fc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2c:	331c      	adds	r3, #28
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe fafb 	bl	800812c <st_dword>
					fs->wflag = 1;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d037      	beq.n	8009bb2 <f_open+0x1d2>
						dw = fs->winsect;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe ff92 	bl	8008a7a <remove_chain>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d126      	bne.n	8009bb2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fd39 	bl	80085e0 <move_window>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b78:	3a01      	subs	r2, #1
 8009b7a:	60da      	str	r2, [r3, #12]
 8009b7c:	e019      	b.n	8009bb2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d115      	bne.n	8009bb2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009b86:	7ebb      	ldrb	r3, [r7, #26]
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <f_open+0x1b8>
					res = FR_NO_FILE;
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b96:	e00c      	b.n	8009bb2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <f_open+0x1d2>
 8009ba2:	7ebb      	ldrb	r3, [r7, #26]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <f_open+0x1d2>
						res = FR_DENIED;
 8009bac:	2307      	movs	r3, #7
 8009bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d128      	bne.n	8009c0c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bca:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	f023 0301 	bic.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	bf14      	ite	ne
 8009be4:	2301      	movne	r3, #1
 8009be6:	2300      	moveq	r3, #0
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	f107 0314 	add.w	r3, r7, #20
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fbc2 	bl	800837c <inc_lock>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <f_open+0x22c>
 8009c06:	2302      	movs	r3, #2
 8009c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8092 	bne.w	8009d3a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff f9b0 	bl	8008f82 <ld_clust>
 8009c22:	4602      	mov	r2, r0
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2a:	331c      	adds	r3, #28
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe fa3f 	bl	80080b0 <ld_dword>
 8009c32:	4602      	mov	r2, r0
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	88da      	ldrh	r2, [r3, #6]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	79fa      	ldrb	r2, [r7, #7]
 8009c4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	332c      	adds	r3, #44	; 0x2c
 8009c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c66:	2100      	movs	r1, #0
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe faac 	bl	80081c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	f003 0320 	and.w	r3, r3, #32
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d060      	beq.n	8009d3a <f_open+0x35a>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d05c      	beq.n	8009d3a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	895b      	ldrh	r3, [r3, #10]
 8009c8c:	025b      	lsls	r3, r3, #9
 8009c8e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c9c:	e016      	b.n	8009ccc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fd57 	bl	8008756 <get_fat>
 8009ca8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d802      	bhi.n	8009cb6 <f_open+0x2d6>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d102      	bne.n	8009cc4 <f_open+0x2e4>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	657b      	str	r3, [r7, #84]	; 0x54
 8009ccc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <f_open+0x2fc>
 8009cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d8e0      	bhi.n	8009c9e <f_open+0x2be>
				}
				fp->clust = clst;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ce0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d127      	bne.n	8009d3a <f_open+0x35a>
 8009cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d022      	beq.n	8009d3a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fd0d 	bl	8008718 <clust2sect>
 8009cfe:	6478      	str	r0, [r7, #68]	; 0x44
 8009d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <f_open+0x32e>
						res = FR_INT_ERR;
 8009d06:	2302      	movs	r3, #2
 8009d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d0c:	e015      	b.n	8009d3a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d10:	0a5a      	lsrs	r2, r3, #9
 8009d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d14:	441a      	add	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	7858      	ldrb	r0, [r3, #1]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a1a      	ldr	r2, [r3, #32]
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f7fe f94b 	bl	8007fc4 <disk_read>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <f_open+0x35a>
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <f_open+0x368>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3760      	adds	r7, #96	; 0x60
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	46c40000 	.word	0x46c40000

08009d58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f107 0210 	add.w	r2, r7, #16
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fdb5 	bl	80098e8 <validate>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d107      	bne.n	8009d9c <f_write+0x44>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	7d5b      	ldrb	r3, [r3, #21]
 8009d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <f_write+0x4a>
 8009d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009da0:	e13f      	b.n	800a022 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	7d1b      	ldrb	r3, [r3, #20]
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <f_write+0x5a>
 8009dae:	2307      	movs	r3, #7
 8009db0:	e137      	b.n	800a022 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	441a      	add	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	f080 8121 	bcs.w	800a006 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	43db      	mvns	r3, r3
 8009dca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009dcc:	e11b      	b.n	800a006 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 80d7 	bne.w	8009f8a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	0a5b      	lsrs	r3, r3, #9
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	8952      	ldrh	r2, [r2, #10]
 8009de6:	3a01      	subs	r2, #1
 8009de8:	4013      	ands	r3, r2
 8009dea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d137      	bne.n	8009e62 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10c      	bne.n	8009e14 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10e      	bne.n	8009e24 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fe9a 	bl	8008b44 <create_chain>
 8009e10:	62b8      	str	r0, [r7, #40]	; 0x28
 8009e12:	e007      	b.n	8009e24 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7fe fe91 	bl	8008b44 <create_chain>
 8009e22:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80f2 	beq.w	800a010 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d104      	bne.n	8009e3c <f_write+0xe4>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2202      	movs	r2, #2
 8009e36:	755a      	strb	r2, [r3, #21]
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e0f2      	b.n	800a022 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d104      	bne.n	8009e4e <f_write+0xf6>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2201      	movs	r2, #1
 8009e48:	755a      	strb	r2, [r3, #21]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e0e9      	b.n	800a022 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e52:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <f_write+0x10a>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e60:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	7d1b      	ldrb	r3, [r3, #20]
 8009e66:	b25b      	sxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	da18      	bge.n	8009e9e <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	7858      	ldrb	r0, [r3, #1]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a1a      	ldr	r2, [r3, #32]
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f7fe f8c2 	bl	8008004 <disk_write>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <f_write+0x138>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	755a      	strb	r2, [r3, #21]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e0c8      	b.n	800a022 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7fe fc36 	bl	8008718 <clust2sect>
 8009eac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <f_write+0x166>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	755a      	strb	r2, [r3, #21]
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e0b1      	b.n	800a022 <f_write+0x2ca>
			sect += csect;
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	0a5b      	lsrs	r3, r3, #9
 8009eca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d03c      	beq.n	8009f4c <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	8952      	ldrh	r2, [r2, #10]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d905      	bls.n	8009eec <f_write+0x194>
					cc = fs->csize - csect;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	895b      	ldrh	r3, [r3, #10]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	7858      	ldrb	r0, [r3, #1]
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	69f9      	ldr	r1, [r7, #28]
 8009ef6:	f7fe f885 	bl	8008004 <disk_write>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <f_write+0x1b2>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	755a      	strb	r2, [r3, #21]
 8009f06:	2301      	movs	r3, #1
 8009f08:	e08b      	b.n	800a022 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a1a      	ldr	r2, [r3, #32]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	6a3a      	ldr	r2, [r7, #32]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d915      	bls.n	8009f44 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1a      	ldr	r2, [r3, #32]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	025b      	lsls	r3, r3, #9
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f30:	4619      	mov	r1, r3
 8009f32:	f7fe f927 	bl	8008184 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	7d1b      	ldrb	r3, [r3, #20]
 8009f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	025b      	lsls	r3, r3, #9
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009f4a:	e03f      	b.n	8009fcc <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d016      	beq.n	8009f84 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d210      	bcs.n	8009f84 <f_write+0x22c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	7858      	ldrb	r0, [r3, #1]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	f7fe f828 	bl	8007fc4 <disk_read>
 8009f74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	755a      	strb	r2, [r3, #21]
 8009f80:	2301      	movs	r3, #1
 8009f82:	e04e      	b.n	800a022 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f92:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d901      	bls.n	8009fa4 <f_write+0x24c>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb2:	4413      	add	r3, r2
 8009fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb6:	69f9      	ldr	r1, [r7, #28]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe f8e3 	bl	8008184 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	7d1b      	ldrb	r3, [r3, #20]
 8009fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fcc:	69fa      	ldr	r2, [r7, #28]
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	4413      	add	r3, r2
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	699a      	ldr	r2, [r3, #24]
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	441a      	add	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	619a      	str	r2, [r3, #24]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	bf38      	it	cc
 8009fec:	461a      	movcc	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	441a      	add	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f aee0 	bne.w	8009dce <f_write+0x76>
 800a00e:	e000      	b.n	800a012 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a010:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	7d1b      	ldrb	r3, [r3, #20]
 800a016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3730      	adds	r7, #48	; 0x30
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f107 0208 	add.w	r2, r7, #8
 800a03a:	4611      	mov	r1, r2
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7ff fc53 	bl	80098e8 <validate>
 800a042:	4603      	mov	r3, r0
 800a044:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d167      	bne.n	800a11c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7d1b      	ldrb	r3, [r3, #20]
 800a050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a054:	2b00      	cmp	r3, #0
 800a056:	d061      	beq.n	800a11c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	7d1b      	ldrb	r3, [r3, #20]
 800a05c:	b25b      	sxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da15      	bge.n	800a08e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	7858      	ldrb	r0, [r3, #1]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1a      	ldr	r2, [r3, #32]
 800a070:	2301      	movs	r3, #1
 800a072:	f7fd ffc7 	bl	8008004 <disk_write>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <f_sync+0x54>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e04e      	b.n	800a11e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	7d1b      	ldrb	r3, [r3, #20]
 800a084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a08e:	4b26      	ldr	r3, [pc, #152]	; (800a128 <f_sync+0xfc>)
 800a090:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f7fe faa0 	bl	80085e0 <move_window>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d138      	bne.n	800a11c <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	330b      	adds	r3, #11
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	330b      	adds	r3, #11
 800a0ba:	f042 0220 	orr.w	r2, r2, #32
 800a0be:	b2d2      	uxtb	r2, r2
 800a0c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	68f9      	ldr	r1, [r7, #12]
 800a0ce:	f7fe ff77 	bl	8008fc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f103 021c 	add.w	r2, r3, #28
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fe f824 	bl	800812c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3316      	adds	r3, #22
 800a0e8:	6939      	ldr	r1, [r7, #16]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe f81e 	bl	800812c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3312      	adds	r3, #18
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fd fffd 	bl	80080f6 <st_word>
					fs->wflag = 1;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2201      	movs	r2, #1
 800a100:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fa99 	bl	800863c <sync_fs>
 800a10a:	4603      	mov	r3, r0
 800a10c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7d1b      	ldrb	r3, [r3, #20]
 800a112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a116:	b2da      	uxtb	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	46c40000 	.word	0x46c40000

0800a12c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff ff79 	bl	800a02c <f_sync>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d118      	bne.n	800a176 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f107 0208 	add.w	r2, r7, #8
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff fbcb 	bl	80098e8 <validate>
 800a152:	4603      	mov	r3, r0
 800a154:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10c      	bne.n	800a176 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe f999 	bl	8008498 <dec_lock>
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f107 0208 	add.w	r2, r7, #8
 800a190:	4611      	mov	r1, r2
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fba8 	bl	80098e8 <validate>
 800a198:	4603      	mov	r3, r0
 800a19a:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a19c:	7ffb      	ldrb	r3, [r7, #31]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <f_lseek+0x28>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	7d5b      	ldrb	r3, [r3, #21]
 800a1a6:	77fb      	strb	r3, [r7, #31]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a1a8:	7ffb      	ldrb	r3, [r7, #31]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <f_lseek+0x32>
 800a1ae:	7ffb      	ldrb	r3, [r7, #31]
 800a1b0:	e10f      	b.n	800a3d2 <f_lseek+0x252>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d908      	bls.n	800a1ce <f_lseek+0x4e>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7d1b      	ldrb	r3, [r3, #20]
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d102      	bne.n	800a1ce <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80a7 	beq.w	800a334 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	895b      	ldrh	r3, [r3, #10]
 800a1ea:	025b      	lsls	r3, r3, #9
 800a1ec:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01b      	beq.n	800a22c <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1e5a      	subs	r2, r3, #1
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1e59      	subs	r1, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a208:	429a      	cmp	r2, r3
 800a20a:	d30f      	bcc.n	800a22c <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	1e5a      	subs	r2, r3, #1
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	425b      	negs	r3, r3
 800a214:	401a      	ands	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	61bb      	str	r3, [r7, #24]
 800a22a:	e022      	b.n	800a272 <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d119      	bne.n	800a26c <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2100      	movs	r1, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fc81 	bl	8008b44 <create_chain>
 800a242:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d104      	bne.n	800a254 <f_lseek+0xd4>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2202      	movs	r2, #2
 800a24e:	755a      	strb	r2, [r3, #21]
 800a250:	2302      	movs	r3, #2
 800a252:	e0be      	b.n	800a3d2 <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d104      	bne.n	800a266 <f_lseek+0xe6>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	755a      	strb	r2, [r3, #21]
 800a262:	2301      	movs	r3, #1
 800a264:	e0b5      	b.n	800a3d2 <f_lseek+0x252>
					fp->obj.sclust = clst;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d05d      	beq.n	800a334 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 800a278:	e03a      	b.n	800a2f0 <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	441a      	add	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7d1b      	ldrb	r3, [r3, #20]
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00b      	beq.n	800a2b2 <f_lseek+0x132>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	69b9      	ldr	r1, [r7, #24]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fc50 	bl	8008b44 <create_chain>
 800a2a4:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d108      	bne.n	800a2be <f_lseek+0x13e>
							ofs = 0; break;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	e022      	b.n	800a2f8 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69b9      	ldr	r1, [r7, #24]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fa4d 	bl	8008756 <get_fat>
 800a2bc:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d104      	bne.n	800a2d0 <f_lseek+0x150>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	755a      	strb	r2, [r3, #21]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e080      	b.n	800a3d2 <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d904      	bls.n	800a2e0 <f_lseek+0x160>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d304      	bcc.n	800a2ea <f_lseek+0x16a>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	755a      	strb	r2, [r3, #21]
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e073      	b.n	800a3d2 <f_lseek+0x252>
					fp->clust = clst;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d8c0      	bhi.n	800a27a <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	441a      	add	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d012      	beq.n	800a334 <f_lseek+0x1b4>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	69b9      	ldr	r1, [r7, #24]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fa00 	bl	8008718 <clust2sect>
 800a318:	6178      	str	r0, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <f_lseek+0x1aa>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	755a      	strb	r2, [r3, #21]
 800a326:	2302      	movs	r3, #2
 800a328:	e053      	b.n	800a3d2 <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	0a5b      	lsrs	r3, r3, #9
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699a      	ldr	r2, [r3, #24]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d90a      	bls.n	800a356 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7d1b      	ldrb	r3, [r3, #20]
 800a34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a350:	b2da      	uxtb	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d036      	beq.n	800a3d0 <f_lseek+0x250>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d031      	beq.n	800a3d0 <f_lseek+0x250>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	7d1b      	ldrb	r3, [r3, #20]
 800a370:	b25b      	sxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	da18      	bge.n	800a3a8 <f_lseek+0x228>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	7858      	ldrb	r0, [r3, #1]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1a      	ldr	r2, [r3, #32]
 800a384:	2301      	movs	r3, #1
 800a386:	f7fd fe3d 	bl	8008004 <disk_write>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <f_lseek+0x21a>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	755a      	strb	r2, [r3, #21]
 800a396:	2301      	movs	r3, #1
 800a398:	e01b      	b.n	800a3d2 <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	7d1b      	ldrb	r3, [r3, #20]
 800a39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	7858      	ldrb	r0, [r3, #1]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	f7fd fe05 	bl	8007fc4 <disk_read>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <f_lseek+0x24a>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	755a      	strb	r2, [r3, #21]
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e003      	b.n	800a3d2 <f_lseek+0x252>
#endif
			fp->sect = nsect;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a3d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a3f4:	7a5b      	ldrb	r3, [r3, #9]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d131      	bne.n	800a460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3fc:	4b1c      	ldr	r3, [pc, #112]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a3fe:	7a5b      	ldrb	r3, [r3, #9]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a406:	2100      	movs	r1, #0
 800a408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a40a:	4b19      	ldr	r3, [pc, #100]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a40c:	7a5b      	ldrb	r3, [r3, #9]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	4a17      	ldr	r2, [pc, #92]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a41a:	4b15      	ldr	r3, [pc, #84]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a41c:	7a5b      	ldrb	r3, [r3, #9]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	461a      	mov	r2, r3
 800a422:	4b13      	ldr	r3, [pc, #76]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a424:	4413      	add	r3, r2
 800a426:	79fa      	ldrb	r2, [r7, #7]
 800a428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a42c:	7a5b      	ldrb	r3, [r3, #9]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	b2d1      	uxtb	r1, r2
 800a434:	4a0e      	ldr	r2, [pc, #56]	; (800a470 <FATFS_LinkDriverEx+0x94>)
 800a436:	7251      	strb	r1, [r2, #9]
 800a438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a43a:	7dbb      	ldrb	r3, [r7, #22]
 800a43c:	3330      	adds	r3, #48	; 0x30
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	3301      	adds	r3, #1
 800a448:	223a      	movs	r2, #58	; 0x3a
 800a44a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	3302      	adds	r3, #2
 800a450:	222f      	movs	r2, #47	; 0x2f
 800a452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	3303      	adds	r3, #3
 800a458:	2200      	movs	r2, #0
 800a45a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
}
 800a462:	4618      	mov	r0, r3
 800a464:	371c      	adds	r7, #28
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000970 	.word	0x20000970

0800a474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a47e:	2200      	movs	r2, #0
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff ffaa 	bl	800a3dc <FATFS_LinkDriverEx>
 800a488:	4603      	mov	r3, r0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <atof>:
 800a492:	2100      	movs	r1, #0
 800a494:	f000 be2e 	b.w	800b0f4 <strtod>

0800a498 <__itoa>:
 800a498:	1e93      	subs	r3, r2, #2
 800a49a:	2b22      	cmp	r3, #34	; 0x22
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	d904      	bls.n	800a4ac <__itoa+0x14>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	700b      	strb	r3, [r1, #0]
 800a4a6:	461c      	mov	r4, r3
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	bd10      	pop	{r4, pc}
 800a4ac:	2a0a      	cmp	r2, #10
 800a4ae:	d109      	bne.n	800a4c4 <__itoa+0x2c>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	da07      	bge.n	800a4c4 <__itoa+0x2c>
 800a4b4:	232d      	movs	r3, #45	; 0x2d
 800a4b6:	700b      	strb	r3, [r1, #0]
 800a4b8:	4240      	negs	r0, r0
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	4421      	add	r1, r4
 800a4be:	f000 fe25 	bl	800b10c <__utoa>
 800a4c2:	e7f1      	b.n	800a4a8 <__itoa+0x10>
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	e7f9      	b.n	800a4bc <__itoa+0x24>

0800a4c8 <itoa>:
 800a4c8:	f7ff bfe6 	b.w	800a498 <__itoa>

0800a4cc <sulp>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	ec45 4b10 	vmov	d0, r4, r5
 800a4d6:	4616      	mov	r6, r2
 800a4d8:	f003 fdb2 	bl	800e040 <__ulp>
 800a4dc:	ec51 0b10 	vmov	r0, r1, d0
 800a4e0:	b17e      	cbz	r6, 800a502 <sulp+0x36>
 800a4e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	dd09      	ble.n	800a502 <sulp+0x36>
 800a4ee:	051b      	lsls	r3, r3, #20
 800a4f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	462b      	mov	r3, r5
 800a4fe:	f7f6 f88b 	bl	8000618 <__aeabi_dmul>
 800a502:	bd70      	pop	{r4, r5, r6, pc}
 800a504:	0000      	movs	r0, r0
	...

0800a508 <_strtod_l>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	ed2d 8b02 	vpush	{d8}
 800a510:	b09b      	sub	sp, #108	; 0x6c
 800a512:	4604      	mov	r4, r0
 800a514:	9213      	str	r2, [sp, #76]	; 0x4c
 800a516:	2200      	movs	r2, #0
 800a518:	9216      	str	r2, [sp, #88]	; 0x58
 800a51a:	460d      	mov	r5, r1
 800a51c:	f04f 0800 	mov.w	r8, #0
 800a520:	f04f 0900 	mov.w	r9, #0
 800a524:	460a      	mov	r2, r1
 800a526:	9215      	str	r2, [sp, #84]	; 0x54
 800a528:	7811      	ldrb	r1, [r2, #0]
 800a52a:	292b      	cmp	r1, #43	; 0x2b
 800a52c:	d04c      	beq.n	800a5c8 <_strtod_l+0xc0>
 800a52e:	d83a      	bhi.n	800a5a6 <_strtod_l+0x9e>
 800a530:	290d      	cmp	r1, #13
 800a532:	d834      	bhi.n	800a59e <_strtod_l+0x96>
 800a534:	2908      	cmp	r1, #8
 800a536:	d834      	bhi.n	800a5a2 <_strtod_l+0x9a>
 800a538:	2900      	cmp	r1, #0
 800a53a:	d03d      	beq.n	800a5b8 <_strtod_l+0xb0>
 800a53c:	2200      	movs	r2, #0
 800a53e:	920a      	str	r2, [sp, #40]	; 0x28
 800a540:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a542:	7832      	ldrb	r2, [r6, #0]
 800a544:	2a30      	cmp	r2, #48	; 0x30
 800a546:	f040 80b4 	bne.w	800a6b2 <_strtod_l+0x1aa>
 800a54a:	7872      	ldrb	r2, [r6, #1]
 800a54c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a550:	2a58      	cmp	r2, #88	; 0x58
 800a552:	d170      	bne.n	800a636 <_strtod_l+0x12e>
 800a554:	9302      	str	r3, [sp, #8]
 800a556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	ab16      	add	r3, sp, #88	; 0x58
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	4a8e      	ldr	r2, [pc, #568]	; (800a798 <_strtod_l+0x290>)
 800a560:	ab17      	add	r3, sp, #92	; 0x5c
 800a562:	a915      	add	r1, sp, #84	; 0x54
 800a564:	4620      	mov	r0, r4
 800a566:	f002 fe49 	bl	800d1fc <__gethex>
 800a56a:	f010 070f 	ands.w	r7, r0, #15
 800a56e:	4605      	mov	r5, r0
 800a570:	d005      	beq.n	800a57e <_strtod_l+0x76>
 800a572:	2f06      	cmp	r7, #6
 800a574:	d12a      	bne.n	800a5cc <_strtod_l+0xc4>
 800a576:	3601      	adds	r6, #1
 800a578:	2300      	movs	r3, #0
 800a57a:	9615      	str	r6, [sp, #84]	; 0x54
 800a57c:	930a      	str	r3, [sp, #40]	; 0x28
 800a57e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 857f 	bne.w	800b084 <_strtod_l+0xb7c>
 800a586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a588:	b1db      	cbz	r3, 800a5c2 <_strtod_l+0xba>
 800a58a:	4642      	mov	r2, r8
 800a58c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a590:	ec43 2b10 	vmov	d0, r2, r3
 800a594:	b01b      	add	sp, #108	; 0x6c
 800a596:	ecbd 8b02 	vpop	{d8}
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	2920      	cmp	r1, #32
 800a5a0:	d1cc      	bne.n	800a53c <_strtod_l+0x34>
 800a5a2:	3201      	adds	r2, #1
 800a5a4:	e7bf      	b.n	800a526 <_strtod_l+0x1e>
 800a5a6:	292d      	cmp	r1, #45	; 0x2d
 800a5a8:	d1c8      	bne.n	800a53c <_strtod_l+0x34>
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	910a      	str	r1, [sp, #40]	; 0x28
 800a5ae:	1c51      	adds	r1, r2, #1
 800a5b0:	9115      	str	r1, [sp, #84]	; 0x54
 800a5b2:	7852      	ldrb	r2, [r2, #1]
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	d1c3      	bne.n	800a540 <_strtod_l+0x38>
 800a5b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5ba:	9515      	str	r5, [sp, #84]	; 0x54
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 855f 	bne.w	800b080 <_strtod_l+0xb78>
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	e7e3      	b.n	800a590 <_strtod_l+0x88>
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	e7ef      	b.n	800a5ac <_strtod_l+0xa4>
 800a5cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5ce:	b13a      	cbz	r2, 800a5e0 <_strtod_l+0xd8>
 800a5d0:	2135      	movs	r1, #53	; 0x35
 800a5d2:	a818      	add	r0, sp, #96	; 0x60
 800a5d4:	f003 fe31 	bl	800e23a <__copybits>
 800a5d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f003 fa04 	bl	800d9e8 <_Bfree>
 800a5e0:	3f01      	subs	r7, #1
 800a5e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5e4:	2f04      	cmp	r7, #4
 800a5e6:	d806      	bhi.n	800a5f6 <_strtod_l+0xee>
 800a5e8:	e8df f007 	tbb	[pc, r7]
 800a5ec:	201d0314 	.word	0x201d0314
 800a5f0:	14          	.byte	0x14
 800a5f1:	00          	.byte	0x00
 800a5f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a5f6:	05e9      	lsls	r1, r5, #23
 800a5f8:	bf48      	it	mi
 800a5fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a5fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a602:	0d1b      	lsrs	r3, r3, #20
 800a604:	051b      	lsls	r3, r3, #20
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1b9      	bne.n	800a57e <_strtod_l+0x76>
 800a60a:	f001 fe59 	bl	800c2c0 <__errno>
 800a60e:	2322      	movs	r3, #34	; 0x22
 800a610:	6003      	str	r3, [r0, #0]
 800a612:	e7b4      	b.n	800a57e <_strtod_l+0x76>
 800a614:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a618:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a61c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a620:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a624:	e7e7      	b.n	800a5f6 <_strtod_l+0xee>
 800a626:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a7a0 <_strtod_l+0x298>
 800a62a:	e7e4      	b.n	800a5f6 <_strtod_l+0xee>
 800a62c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a630:	f04f 38ff 	mov.w	r8, #4294967295
 800a634:	e7df      	b.n	800a5f6 <_strtod_l+0xee>
 800a636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	9215      	str	r2, [sp, #84]	; 0x54
 800a63c:	785b      	ldrb	r3, [r3, #1]
 800a63e:	2b30      	cmp	r3, #48	; 0x30
 800a640:	d0f9      	beq.n	800a636 <_strtod_l+0x12e>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d09b      	beq.n	800a57e <_strtod_l+0x76>
 800a646:	2301      	movs	r3, #1
 800a648:	f04f 0a00 	mov.w	sl, #0
 800a64c:	9304      	str	r3, [sp, #16]
 800a64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a650:	930b      	str	r3, [sp, #44]	; 0x2c
 800a652:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a656:	46d3      	mov	fp, sl
 800a658:	220a      	movs	r2, #10
 800a65a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a65c:	7806      	ldrb	r6, [r0, #0]
 800a65e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a662:	b2d9      	uxtb	r1, r3
 800a664:	2909      	cmp	r1, #9
 800a666:	d926      	bls.n	800a6b6 <_strtod_l+0x1ae>
 800a668:	494c      	ldr	r1, [pc, #304]	; (800a79c <_strtod_l+0x294>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	f001 fd5c 	bl	800c128 <strncmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	d030      	beq.n	800a6d6 <_strtod_l+0x1ce>
 800a674:	2000      	movs	r0, #0
 800a676:	4632      	mov	r2, r6
 800a678:	9005      	str	r0, [sp, #20]
 800a67a:	465e      	mov	r6, fp
 800a67c:	4603      	mov	r3, r0
 800a67e:	2a65      	cmp	r2, #101	; 0x65
 800a680:	d001      	beq.n	800a686 <_strtod_l+0x17e>
 800a682:	2a45      	cmp	r2, #69	; 0x45
 800a684:	d113      	bne.n	800a6ae <_strtod_l+0x1a6>
 800a686:	b91e      	cbnz	r6, 800a690 <_strtod_l+0x188>
 800a688:	9a04      	ldr	r2, [sp, #16]
 800a68a:	4302      	orrs	r2, r0
 800a68c:	d094      	beq.n	800a5b8 <_strtod_l+0xb0>
 800a68e:	2600      	movs	r6, #0
 800a690:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a692:	1c6a      	adds	r2, r5, #1
 800a694:	9215      	str	r2, [sp, #84]	; 0x54
 800a696:	786a      	ldrb	r2, [r5, #1]
 800a698:	2a2b      	cmp	r2, #43	; 0x2b
 800a69a:	d074      	beq.n	800a786 <_strtod_l+0x27e>
 800a69c:	2a2d      	cmp	r2, #45	; 0x2d
 800a69e:	d078      	beq.n	800a792 <_strtod_l+0x28a>
 800a6a0:	f04f 0c00 	mov.w	ip, #0
 800a6a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6a8:	2909      	cmp	r1, #9
 800a6aa:	d97f      	bls.n	800a7ac <_strtod_l+0x2a4>
 800a6ac:	9515      	str	r5, [sp, #84]	; 0x54
 800a6ae:	2700      	movs	r7, #0
 800a6b0:	e09e      	b.n	800a7f0 <_strtod_l+0x2e8>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e7c8      	b.n	800a648 <_strtod_l+0x140>
 800a6b6:	f1bb 0f08 	cmp.w	fp, #8
 800a6ba:	bfd8      	it	le
 800a6bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a6be:	f100 0001 	add.w	r0, r0, #1
 800a6c2:	bfda      	itte	le
 800a6c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6c8:	9309      	strle	r3, [sp, #36]	; 0x24
 800a6ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a6ce:	f10b 0b01 	add.w	fp, fp, #1
 800a6d2:	9015      	str	r0, [sp, #84]	; 0x54
 800a6d4:	e7c1      	b.n	800a65a <_strtod_l+0x152>
 800a6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	9215      	str	r2, [sp, #84]	; 0x54
 800a6dc:	785a      	ldrb	r2, [r3, #1]
 800a6de:	f1bb 0f00 	cmp.w	fp, #0
 800a6e2:	d037      	beq.n	800a754 <_strtod_l+0x24c>
 800a6e4:	9005      	str	r0, [sp, #20]
 800a6e6:	465e      	mov	r6, fp
 800a6e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6ec:	2b09      	cmp	r3, #9
 800a6ee:	d912      	bls.n	800a716 <_strtod_l+0x20e>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e7c4      	b.n	800a67e <_strtod_l+0x176>
 800a6f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	9215      	str	r2, [sp, #84]	; 0x54
 800a6fa:	785a      	ldrb	r2, [r3, #1]
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	2a30      	cmp	r2, #48	; 0x30
 800a700:	d0f8      	beq.n	800a6f4 <_strtod_l+0x1ec>
 800a702:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a706:	2b08      	cmp	r3, #8
 800a708:	f200 84c1 	bhi.w	800b08e <_strtod_l+0xb86>
 800a70c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a70e:	9005      	str	r0, [sp, #20]
 800a710:	2000      	movs	r0, #0
 800a712:	930b      	str	r3, [sp, #44]	; 0x2c
 800a714:	4606      	mov	r6, r0
 800a716:	3a30      	subs	r2, #48	; 0x30
 800a718:	f100 0301 	add.w	r3, r0, #1
 800a71c:	d014      	beq.n	800a748 <_strtod_l+0x240>
 800a71e:	9905      	ldr	r1, [sp, #20]
 800a720:	4419      	add	r1, r3
 800a722:	9105      	str	r1, [sp, #20]
 800a724:	4633      	mov	r3, r6
 800a726:	eb00 0c06 	add.w	ip, r0, r6
 800a72a:	210a      	movs	r1, #10
 800a72c:	4563      	cmp	r3, ip
 800a72e:	d113      	bne.n	800a758 <_strtod_l+0x250>
 800a730:	1833      	adds	r3, r6, r0
 800a732:	2b08      	cmp	r3, #8
 800a734:	f106 0601 	add.w	r6, r6, #1
 800a738:	4406      	add	r6, r0
 800a73a:	dc1a      	bgt.n	800a772 <_strtod_l+0x26a>
 800a73c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a73e:	230a      	movs	r3, #10
 800a740:	fb03 2301 	mla	r3, r3, r1, r2
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
 800a746:	2300      	movs	r3, #0
 800a748:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a74a:	1c51      	adds	r1, r2, #1
 800a74c:	9115      	str	r1, [sp, #84]	; 0x54
 800a74e:	7852      	ldrb	r2, [r2, #1]
 800a750:	4618      	mov	r0, r3
 800a752:	e7c9      	b.n	800a6e8 <_strtod_l+0x1e0>
 800a754:	4658      	mov	r0, fp
 800a756:	e7d2      	b.n	800a6fe <_strtod_l+0x1f6>
 800a758:	2b08      	cmp	r3, #8
 800a75a:	f103 0301 	add.w	r3, r3, #1
 800a75e:	dc03      	bgt.n	800a768 <_strtod_l+0x260>
 800a760:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a762:	434f      	muls	r7, r1
 800a764:	9709      	str	r7, [sp, #36]	; 0x24
 800a766:	e7e1      	b.n	800a72c <_strtod_l+0x224>
 800a768:	2b10      	cmp	r3, #16
 800a76a:	bfd8      	it	le
 800a76c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a770:	e7dc      	b.n	800a72c <_strtod_l+0x224>
 800a772:	2e10      	cmp	r6, #16
 800a774:	bfdc      	itt	le
 800a776:	230a      	movle	r3, #10
 800a778:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a77c:	e7e3      	b.n	800a746 <_strtod_l+0x23e>
 800a77e:	2300      	movs	r3, #0
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	2301      	movs	r3, #1
 800a784:	e780      	b.n	800a688 <_strtod_l+0x180>
 800a786:	f04f 0c00 	mov.w	ip, #0
 800a78a:	1caa      	adds	r2, r5, #2
 800a78c:	9215      	str	r2, [sp, #84]	; 0x54
 800a78e:	78aa      	ldrb	r2, [r5, #2]
 800a790:	e788      	b.n	800a6a4 <_strtod_l+0x19c>
 800a792:	f04f 0c01 	mov.w	ip, #1
 800a796:	e7f8      	b.n	800a78a <_strtod_l+0x282>
 800a798:	080124d8 	.word	0x080124d8
 800a79c:	080124d4 	.word	0x080124d4
 800a7a0:	7ff00000 	.word	0x7ff00000
 800a7a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7a6:	1c51      	adds	r1, r2, #1
 800a7a8:	9115      	str	r1, [sp, #84]	; 0x54
 800a7aa:	7852      	ldrb	r2, [r2, #1]
 800a7ac:	2a30      	cmp	r2, #48	; 0x30
 800a7ae:	d0f9      	beq.n	800a7a4 <_strtod_l+0x29c>
 800a7b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a7b4:	2908      	cmp	r1, #8
 800a7b6:	f63f af7a 	bhi.w	800a6ae <_strtod_l+0x1a6>
 800a7ba:	3a30      	subs	r2, #48	; 0x30
 800a7bc:	9208      	str	r2, [sp, #32]
 800a7be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7c0:	920c      	str	r2, [sp, #48]	; 0x30
 800a7c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7c4:	1c57      	adds	r7, r2, #1
 800a7c6:	9715      	str	r7, [sp, #84]	; 0x54
 800a7c8:	7852      	ldrb	r2, [r2, #1]
 800a7ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a7ce:	f1be 0f09 	cmp.w	lr, #9
 800a7d2:	d938      	bls.n	800a846 <_strtod_l+0x33e>
 800a7d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7d6:	1a7f      	subs	r7, r7, r1
 800a7d8:	2f08      	cmp	r7, #8
 800a7da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a7de:	dc03      	bgt.n	800a7e8 <_strtod_l+0x2e0>
 800a7e0:	9908      	ldr	r1, [sp, #32]
 800a7e2:	428f      	cmp	r7, r1
 800a7e4:	bfa8      	it	ge
 800a7e6:	460f      	movge	r7, r1
 800a7e8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ec:	d000      	beq.n	800a7f0 <_strtod_l+0x2e8>
 800a7ee:	427f      	negs	r7, r7
 800a7f0:	2e00      	cmp	r6, #0
 800a7f2:	d14f      	bne.n	800a894 <_strtod_l+0x38c>
 800a7f4:	9904      	ldr	r1, [sp, #16]
 800a7f6:	4301      	orrs	r1, r0
 800a7f8:	f47f aec1 	bne.w	800a57e <_strtod_l+0x76>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f47f aedb 	bne.w	800a5b8 <_strtod_l+0xb0>
 800a802:	2a69      	cmp	r2, #105	; 0x69
 800a804:	d029      	beq.n	800a85a <_strtod_l+0x352>
 800a806:	dc26      	bgt.n	800a856 <_strtod_l+0x34e>
 800a808:	2a49      	cmp	r2, #73	; 0x49
 800a80a:	d026      	beq.n	800a85a <_strtod_l+0x352>
 800a80c:	2a4e      	cmp	r2, #78	; 0x4e
 800a80e:	f47f aed3 	bne.w	800a5b8 <_strtod_l+0xb0>
 800a812:	499b      	ldr	r1, [pc, #620]	; (800aa80 <_strtod_l+0x578>)
 800a814:	a815      	add	r0, sp, #84	; 0x54
 800a816:	f002 ff31 	bl	800d67c <__match>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f43f aecc 	beq.w	800a5b8 <_strtod_l+0xb0>
 800a820:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b28      	cmp	r3, #40	; 0x28
 800a826:	d12f      	bne.n	800a888 <_strtod_l+0x380>
 800a828:	4996      	ldr	r1, [pc, #600]	; (800aa84 <_strtod_l+0x57c>)
 800a82a:	aa18      	add	r2, sp, #96	; 0x60
 800a82c:	a815      	add	r0, sp, #84	; 0x54
 800a82e:	f002 ff39 	bl	800d6a4 <__hexnan>
 800a832:	2805      	cmp	r0, #5
 800a834:	d128      	bne.n	800a888 <_strtod_l+0x380>
 800a836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a83c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a840:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a844:	e69b      	b.n	800a57e <_strtod_l+0x76>
 800a846:	9f08      	ldr	r7, [sp, #32]
 800a848:	210a      	movs	r1, #10
 800a84a:	fb01 2107 	mla	r1, r1, r7, r2
 800a84e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a852:	9208      	str	r2, [sp, #32]
 800a854:	e7b5      	b.n	800a7c2 <_strtod_l+0x2ba>
 800a856:	2a6e      	cmp	r2, #110	; 0x6e
 800a858:	e7d9      	b.n	800a80e <_strtod_l+0x306>
 800a85a:	498b      	ldr	r1, [pc, #556]	; (800aa88 <_strtod_l+0x580>)
 800a85c:	a815      	add	r0, sp, #84	; 0x54
 800a85e:	f002 ff0d 	bl	800d67c <__match>
 800a862:	2800      	cmp	r0, #0
 800a864:	f43f aea8 	beq.w	800a5b8 <_strtod_l+0xb0>
 800a868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a86a:	4988      	ldr	r1, [pc, #544]	; (800aa8c <_strtod_l+0x584>)
 800a86c:	3b01      	subs	r3, #1
 800a86e:	a815      	add	r0, sp, #84	; 0x54
 800a870:	9315      	str	r3, [sp, #84]	; 0x54
 800a872:	f002 ff03 	bl	800d67c <__match>
 800a876:	b910      	cbnz	r0, 800a87e <_strtod_l+0x376>
 800a878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a87a:	3301      	adds	r3, #1
 800a87c:	9315      	str	r3, [sp, #84]	; 0x54
 800a87e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800aa9c <_strtod_l+0x594>
 800a882:	f04f 0800 	mov.w	r8, #0
 800a886:	e67a      	b.n	800a57e <_strtod_l+0x76>
 800a888:	4881      	ldr	r0, [pc, #516]	; (800aa90 <_strtod_l+0x588>)
 800a88a:	f001 fd5d 	bl	800c348 <nan>
 800a88e:	ec59 8b10 	vmov	r8, r9, d0
 800a892:	e674      	b.n	800a57e <_strtod_l+0x76>
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a898:	1afb      	subs	r3, r7, r3
 800a89a:	f1bb 0f00 	cmp.w	fp, #0
 800a89e:	bf08      	it	eq
 800a8a0:	46b3      	moveq	fp, r6
 800a8a2:	2e10      	cmp	r6, #16
 800a8a4:	9308      	str	r3, [sp, #32]
 800a8a6:	4635      	mov	r5, r6
 800a8a8:	bfa8      	it	ge
 800a8aa:	2510      	movge	r5, #16
 800a8ac:	f7f5 fe3a 	bl	8000524 <__aeabi_ui2d>
 800a8b0:	2e09      	cmp	r6, #9
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4689      	mov	r9, r1
 800a8b6:	dd13      	ble.n	800a8e0 <_strtod_l+0x3d8>
 800a8b8:	4b76      	ldr	r3, [pc, #472]	; (800aa94 <_strtod_l+0x58c>)
 800a8ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8c2:	f7f5 fea9 	bl	8000618 <__aeabi_dmul>
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	4689      	mov	r9, r1
 800a8cc:	f7f5 fe2a 	bl	8000524 <__aeabi_ui2d>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	f7f5 fce8 	bl	80002ac <__adddf3>
 800a8dc:	4680      	mov	r8, r0
 800a8de:	4689      	mov	r9, r1
 800a8e0:	2e0f      	cmp	r6, #15
 800a8e2:	dc38      	bgt.n	800a956 <_strtod_l+0x44e>
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f43f ae49 	beq.w	800a57e <_strtod_l+0x76>
 800a8ec:	dd24      	ble.n	800a938 <_strtod_l+0x430>
 800a8ee:	2b16      	cmp	r3, #22
 800a8f0:	dc0b      	bgt.n	800a90a <_strtod_l+0x402>
 800a8f2:	4968      	ldr	r1, [pc, #416]	; (800aa94 <_strtod_l+0x58c>)
 800a8f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	f7f5 fe8a 	bl	8000618 <__aeabi_dmul>
 800a904:	4680      	mov	r8, r0
 800a906:	4689      	mov	r9, r1
 800a908:	e639      	b.n	800a57e <_strtod_l+0x76>
 800a90a:	9a08      	ldr	r2, [sp, #32]
 800a90c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a910:	4293      	cmp	r3, r2
 800a912:	db20      	blt.n	800a956 <_strtod_l+0x44e>
 800a914:	4c5f      	ldr	r4, [pc, #380]	; (800aa94 <_strtod_l+0x58c>)
 800a916:	f1c6 060f 	rsb	r6, r6, #15
 800a91a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a91e:	4642      	mov	r2, r8
 800a920:	464b      	mov	r3, r9
 800a922:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a926:	f7f5 fe77 	bl	8000618 <__aeabi_dmul>
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	1b9e      	subs	r6, r3, r6
 800a92e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a932:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a936:	e7e3      	b.n	800a900 <_strtod_l+0x3f8>
 800a938:	9b08      	ldr	r3, [sp, #32]
 800a93a:	3316      	adds	r3, #22
 800a93c:	db0b      	blt.n	800a956 <_strtod_l+0x44e>
 800a93e:	9b05      	ldr	r3, [sp, #20]
 800a940:	1bdf      	subs	r7, r3, r7
 800a942:	4b54      	ldr	r3, [pc, #336]	; (800aa94 <_strtod_l+0x58c>)
 800a944:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a94c:	4640      	mov	r0, r8
 800a94e:	4649      	mov	r1, r9
 800a950:	f7f5 ff8c 	bl	800086c <__aeabi_ddiv>
 800a954:	e7d6      	b.n	800a904 <_strtod_l+0x3fc>
 800a956:	9b08      	ldr	r3, [sp, #32]
 800a958:	1b75      	subs	r5, r6, r5
 800a95a:	441d      	add	r5, r3
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	dd70      	ble.n	800aa42 <_strtod_l+0x53a>
 800a960:	f015 030f 	ands.w	r3, r5, #15
 800a964:	d00a      	beq.n	800a97c <_strtod_l+0x474>
 800a966:	494b      	ldr	r1, [pc, #300]	; (800aa94 <_strtod_l+0x58c>)
 800a968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a96c:	4642      	mov	r2, r8
 800a96e:	464b      	mov	r3, r9
 800a970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a974:	f7f5 fe50 	bl	8000618 <__aeabi_dmul>
 800a978:	4680      	mov	r8, r0
 800a97a:	4689      	mov	r9, r1
 800a97c:	f035 050f 	bics.w	r5, r5, #15
 800a980:	d04d      	beq.n	800aa1e <_strtod_l+0x516>
 800a982:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a986:	dd22      	ble.n	800a9ce <_strtod_l+0x4c6>
 800a988:	2500      	movs	r5, #0
 800a98a:	46ab      	mov	fp, r5
 800a98c:	9509      	str	r5, [sp, #36]	; 0x24
 800a98e:	9505      	str	r5, [sp, #20]
 800a990:	2322      	movs	r3, #34	; 0x22
 800a992:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aa9c <_strtod_l+0x594>
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	f04f 0800 	mov.w	r8, #0
 800a99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f43f aded 	beq.w	800a57e <_strtod_l+0x76>
 800a9a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f003 f81e 	bl	800d9e8 <_Bfree>
 800a9ac:	9905      	ldr	r1, [sp, #20]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f003 f81a 	bl	800d9e8 <_Bfree>
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f003 f816 	bl	800d9e8 <_Bfree>
 800a9bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f003 f812 	bl	800d9e8 <_Bfree>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f003 f80e 	bl	800d9e8 <_Bfree>
 800a9cc:	e5d7      	b.n	800a57e <_strtod_l+0x76>
 800a9ce:	4b32      	ldr	r3, [pc, #200]	; (800aa98 <_strtod_l+0x590>)
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	112d      	asrs	r5, r5, #4
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	469a      	mov	sl, r3
 800a9dc:	2d01      	cmp	r5, #1
 800a9de:	dc21      	bgt.n	800aa24 <_strtod_l+0x51c>
 800a9e0:	b10b      	cbz	r3, 800a9e6 <_strtod_l+0x4de>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	492c      	ldr	r1, [pc, #176]	; (800aa98 <_strtod_l+0x590>)
 800a9e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a9ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f8:	f7f5 fe0e 	bl	8000618 <__aeabi_dmul>
 800a9fc:	4b27      	ldr	r3, [pc, #156]	; (800aa9c <_strtod_l+0x594>)
 800a9fe:	460a      	mov	r2, r1
 800aa00:	400b      	ands	r3, r1
 800aa02:	4927      	ldr	r1, [pc, #156]	; (800aaa0 <_strtod_l+0x598>)
 800aa04:	428b      	cmp	r3, r1
 800aa06:	4680      	mov	r8, r0
 800aa08:	d8be      	bhi.n	800a988 <_strtod_l+0x480>
 800aa0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa0e:	428b      	cmp	r3, r1
 800aa10:	bf86      	itte	hi
 800aa12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800aaa4 <_strtod_l+0x59c>
 800aa16:	f04f 38ff 	movhi.w	r8, #4294967295
 800aa1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aa1e:	2300      	movs	r3, #0
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	e07b      	b.n	800ab1c <_strtod_l+0x614>
 800aa24:	07ea      	lsls	r2, r5, #31
 800aa26:	d505      	bpl.n	800aa34 <_strtod_l+0x52c>
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fdf3 	bl	8000618 <__aeabi_dmul>
 800aa32:	2301      	movs	r3, #1
 800aa34:	9a04      	ldr	r2, [sp, #16]
 800aa36:	3208      	adds	r2, #8
 800aa38:	f10a 0a01 	add.w	sl, sl, #1
 800aa3c:	106d      	asrs	r5, r5, #1
 800aa3e:	9204      	str	r2, [sp, #16]
 800aa40:	e7cc      	b.n	800a9dc <_strtod_l+0x4d4>
 800aa42:	d0ec      	beq.n	800aa1e <_strtod_l+0x516>
 800aa44:	426d      	negs	r5, r5
 800aa46:	f015 020f 	ands.w	r2, r5, #15
 800aa4a:	d00a      	beq.n	800aa62 <_strtod_l+0x55a>
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <_strtod_l+0x58c>)
 800aa4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	f7f5 ff07 	bl	800086c <__aeabi_ddiv>
 800aa5e:	4680      	mov	r8, r0
 800aa60:	4689      	mov	r9, r1
 800aa62:	112d      	asrs	r5, r5, #4
 800aa64:	d0db      	beq.n	800aa1e <_strtod_l+0x516>
 800aa66:	2d1f      	cmp	r5, #31
 800aa68:	dd1e      	ble.n	800aaa8 <_strtod_l+0x5a0>
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	46ab      	mov	fp, r5
 800aa6e:	9509      	str	r5, [sp, #36]	; 0x24
 800aa70:	9505      	str	r5, [sp, #20]
 800aa72:	2322      	movs	r3, #34	; 0x22
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	f04f 0900 	mov.w	r9, #0
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	e78d      	b.n	800a99c <_strtod_l+0x494>
 800aa80:	0801255a 	.word	0x0801255a
 800aa84:	080124ec 	.word	0x080124ec
 800aa88:	08012552 	.word	0x08012552
 800aa8c:	0801263c 	.word	0x0801263c
 800aa90:	08012638 	.word	0x08012638
 800aa94:	08012790 	.word	0x08012790
 800aa98:	08012768 	.word	0x08012768
 800aa9c:	7ff00000 	.word	0x7ff00000
 800aaa0:	7ca00000 	.word	0x7ca00000
 800aaa4:	7fefffff 	.word	0x7fefffff
 800aaa8:	f015 0310 	ands.w	r3, r5, #16
 800aaac:	bf18      	it	ne
 800aaae:	236a      	movne	r3, #106	; 0x6a
 800aab0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ae54 <_strtod_l+0x94c>
 800aab4:	9304      	str	r3, [sp, #16]
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	2300      	movs	r3, #0
 800aabc:	07ea      	lsls	r2, r5, #31
 800aabe:	d504      	bpl.n	800aaca <_strtod_l+0x5c2>
 800aac0:	e9da 2300 	ldrd	r2, r3, [sl]
 800aac4:	f7f5 fda8 	bl	8000618 <__aeabi_dmul>
 800aac8:	2301      	movs	r3, #1
 800aaca:	106d      	asrs	r5, r5, #1
 800aacc:	f10a 0a08 	add.w	sl, sl, #8
 800aad0:	d1f4      	bne.n	800aabc <_strtod_l+0x5b4>
 800aad2:	b10b      	cbz	r3, 800aad8 <_strtod_l+0x5d0>
 800aad4:	4680      	mov	r8, r0
 800aad6:	4689      	mov	r9, r1
 800aad8:	9b04      	ldr	r3, [sp, #16]
 800aada:	b1bb      	cbz	r3, 800ab0c <_strtod_l+0x604>
 800aadc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800aae0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	4649      	mov	r1, r9
 800aae8:	dd10      	ble.n	800ab0c <_strtod_l+0x604>
 800aaea:	2b1f      	cmp	r3, #31
 800aaec:	f340 811e 	ble.w	800ad2c <_strtod_l+0x824>
 800aaf0:	2b34      	cmp	r3, #52	; 0x34
 800aaf2:	bfde      	ittt	le
 800aaf4:	f04f 33ff 	movle.w	r3, #4294967295
 800aaf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aafc:	4093      	lslle	r3, r2
 800aafe:	f04f 0800 	mov.w	r8, #0
 800ab02:	bfcc      	ite	gt
 800ab04:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ab08:	ea03 0901 	andle.w	r9, r3, r1
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4640      	mov	r0, r8
 800ab12:	4649      	mov	r1, r9
 800ab14:	f7f5 ffe8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d1a6      	bne.n	800aa6a <_strtod_l+0x562>
 800ab1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab22:	4633      	mov	r3, r6
 800ab24:	465a      	mov	r2, fp
 800ab26:	4620      	mov	r0, r4
 800ab28:	f002 ffc6 	bl	800dab8 <__s2b>
 800ab2c:	9009      	str	r0, [sp, #36]	; 0x24
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f43f af2a 	beq.w	800a988 <_strtod_l+0x480>
 800ab34:	9a08      	ldr	r2, [sp, #32]
 800ab36:	9b05      	ldr	r3, [sp, #20]
 800ab38:	2a00      	cmp	r2, #0
 800ab3a:	eba3 0307 	sub.w	r3, r3, r7
 800ab3e:	bfa8      	it	ge
 800ab40:	2300      	movge	r3, #0
 800ab42:	930c      	str	r3, [sp, #48]	; 0x30
 800ab44:	2500      	movs	r5, #0
 800ab46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab4a:	9312      	str	r3, [sp, #72]	; 0x48
 800ab4c:	46ab      	mov	fp, r5
 800ab4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab50:	4620      	mov	r0, r4
 800ab52:	6859      	ldr	r1, [r3, #4]
 800ab54:	f002 ff08 	bl	800d968 <_Balloc>
 800ab58:	9005      	str	r0, [sp, #20]
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	f43f af18 	beq.w	800a990 <_strtod_l+0x488>
 800ab60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	3202      	adds	r2, #2
 800ab66:	f103 010c 	add.w	r1, r3, #12
 800ab6a:	0092      	lsls	r2, r2, #2
 800ab6c:	300c      	adds	r0, #12
 800ab6e:	f001 fbdb 	bl	800c328 <memcpy>
 800ab72:	ec49 8b10 	vmov	d0, r8, r9
 800ab76:	aa18      	add	r2, sp, #96	; 0x60
 800ab78:	a917      	add	r1, sp, #92	; 0x5c
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f003 fad0 	bl	800e120 <__d2b>
 800ab80:	ec49 8b18 	vmov	d8, r8, r9
 800ab84:	9016      	str	r0, [sp, #88]	; 0x58
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f af02 	beq.w	800a990 <_strtod_l+0x488>
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f003 f82a 	bl	800dbe8 <__i2b>
 800ab94:	4683      	mov	fp, r0
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f43f aefa 	beq.w	800a990 <_strtod_l+0x488>
 800ab9c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aba0:	2e00      	cmp	r6, #0
 800aba2:	bfab      	itete	ge
 800aba4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aba6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aba8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800abaa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800abae:	bfac      	ite	ge
 800abb0:	eb06 0a03 	addge.w	sl, r6, r3
 800abb4:	1b9f      	sublt	r7, r3, r6
 800abb6:	9b04      	ldr	r3, [sp, #16]
 800abb8:	1af6      	subs	r6, r6, r3
 800abba:	4416      	add	r6, r2
 800abbc:	4ba0      	ldr	r3, [pc, #640]	; (800ae40 <_strtod_l+0x938>)
 800abbe:	3e01      	subs	r6, #1
 800abc0:	429e      	cmp	r6, r3
 800abc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abc6:	f280 80c4 	bge.w	800ad52 <_strtod_l+0x84a>
 800abca:	1b9b      	subs	r3, r3, r6
 800abcc:	2b1f      	cmp	r3, #31
 800abce:	eba2 0203 	sub.w	r2, r2, r3
 800abd2:	f04f 0101 	mov.w	r1, #1
 800abd6:	f300 80b0 	bgt.w	800ad3a <_strtod_l+0x832>
 800abda:	fa01 f303 	lsl.w	r3, r1, r3
 800abde:	930e      	str	r3, [sp, #56]	; 0x38
 800abe0:	2300      	movs	r3, #0
 800abe2:	930d      	str	r3, [sp, #52]	; 0x34
 800abe4:	eb0a 0602 	add.w	r6, sl, r2
 800abe8:	9b04      	ldr	r3, [sp, #16]
 800abea:	45b2      	cmp	sl, r6
 800abec:	4417      	add	r7, r2
 800abee:	441f      	add	r7, r3
 800abf0:	4653      	mov	r3, sl
 800abf2:	bfa8      	it	ge
 800abf4:	4633      	movge	r3, r6
 800abf6:	42bb      	cmp	r3, r7
 800abf8:	bfa8      	it	ge
 800abfa:	463b      	movge	r3, r7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfc2      	ittt	gt
 800ac00:	1af6      	subgt	r6, r6, r3
 800ac02:	1aff      	subgt	r7, r7, r3
 800ac04:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ac08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	dd17      	ble.n	800ac3e <_strtod_l+0x736>
 800ac0e:	4659      	mov	r1, fp
 800ac10:	461a      	mov	r2, r3
 800ac12:	4620      	mov	r0, r4
 800ac14:	f003 f8a8 	bl	800dd68 <__pow5mult>
 800ac18:	4683      	mov	fp, r0
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	f43f aeb8 	beq.w	800a990 <_strtod_l+0x488>
 800ac20:	4601      	mov	r1, r0
 800ac22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac24:	4620      	mov	r0, r4
 800ac26:	f002 fff5 	bl	800dc14 <__multiply>
 800ac2a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	f43f aeaf 	beq.w	800a990 <_strtod_l+0x488>
 800ac32:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac34:	4620      	mov	r0, r4
 800ac36:	f002 fed7 	bl	800d9e8 <_Bfree>
 800ac3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac3c:	9316      	str	r3, [sp, #88]	; 0x58
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	f300 808c 	bgt.w	800ad5c <_strtod_l+0x854>
 800ac44:	9b08      	ldr	r3, [sp, #32]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dd08      	ble.n	800ac5c <_strtod_l+0x754>
 800ac4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac4c:	9905      	ldr	r1, [sp, #20]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f003 f88a 	bl	800dd68 <__pow5mult>
 800ac54:	9005      	str	r0, [sp, #20]
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f ae9a 	beq.w	800a990 <_strtod_l+0x488>
 800ac5c:	2f00      	cmp	r7, #0
 800ac5e:	dd08      	ble.n	800ac72 <_strtod_l+0x76a>
 800ac60:	9905      	ldr	r1, [sp, #20]
 800ac62:	463a      	mov	r2, r7
 800ac64:	4620      	mov	r0, r4
 800ac66:	f003 f8d9 	bl	800de1c <__lshift>
 800ac6a:	9005      	str	r0, [sp, #20]
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f43f ae8f 	beq.w	800a990 <_strtod_l+0x488>
 800ac72:	f1ba 0f00 	cmp.w	sl, #0
 800ac76:	dd08      	ble.n	800ac8a <_strtod_l+0x782>
 800ac78:	4659      	mov	r1, fp
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f003 f8cd 	bl	800de1c <__lshift>
 800ac82:	4683      	mov	fp, r0
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f43f ae83 	beq.w	800a990 <_strtod_l+0x488>
 800ac8a:	9a05      	ldr	r2, [sp, #20]
 800ac8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f003 f94c 	bl	800df2c <__mdiff>
 800ac94:	4605      	mov	r5, r0
 800ac96:	2800      	cmp	r0, #0
 800ac98:	f43f ae7a 	beq.w	800a990 <_strtod_l+0x488>
 800ac9c:	68c3      	ldr	r3, [r0, #12]
 800ac9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aca0:	2300      	movs	r3, #0
 800aca2:	60c3      	str	r3, [r0, #12]
 800aca4:	4659      	mov	r1, fp
 800aca6:	f003 f925 	bl	800def4 <__mcmp>
 800acaa:	2800      	cmp	r0, #0
 800acac:	da60      	bge.n	800ad70 <_strtod_l+0x868>
 800acae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb0:	ea53 0308 	orrs.w	r3, r3, r8
 800acb4:	f040 8084 	bne.w	800adc0 <_strtod_l+0x8b8>
 800acb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d17f      	bne.n	800adc0 <_strtod_l+0x8b8>
 800acc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acc4:	0d1b      	lsrs	r3, r3, #20
 800acc6:	051b      	lsls	r3, r3, #20
 800acc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800accc:	d978      	bls.n	800adc0 <_strtod_l+0x8b8>
 800acce:	696b      	ldr	r3, [r5, #20]
 800acd0:	b913      	cbnz	r3, 800acd8 <_strtod_l+0x7d0>
 800acd2:	692b      	ldr	r3, [r5, #16]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	dd73      	ble.n	800adc0 <_strtod_l+0x8b8>
 800acd8:	4629      	mov	r1, r5
 800acda:	2201      	movs	r2, #1
 800acdc:	4620      	mov	r0, r4
 800acde:	f003 f89d 	bl	800de1c <__lshift>
 800ace2:	4659      	mov	r1, fp
 800ace4:	4605      	mov	r5, r0
 800ace6:	f003 f905 	bl	800def4 <__mcmp>
 800acea:	2800      	cmp	r0, #0
 800acec:	dd68      	ble.n	800adc0 <_strtod_l+0x8b8>
 800acee:	9904      	ldr	r1, [sp, #16]
 800acf0:	4a54      	ldr	r2, [pc, #336]	; (800ae44 <_strtod_l+0x93c>)
 800acf2:	464b      	mov	r3, r9
 800acf4:	2900      	cmp	r1, #0
 800acf6:	f000 8084 	beq.w	800ae02 <_strtod_l+0x8fa>
 800acfa:	ea02 0109 	and.w	r1, r2, r9
 800acfe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad02:	dc7e      	bgt.n	800ae02 <_strtod_l+0x8fa>
 800ad04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad08:	f77f aeb3 	ble.w	800aa72 <_strtod_l+0x56a>
 800ad0c:	4b4e      	ldr	r3, [pc, #312]	; (800ae48 <_strtod_l+0x940>)
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	2200      	movs	r2, #0
 800ad14:	f7f5 fc80 	bl	8000618 <__aeabi_dmul>
 800ad18:	4b4a      	ldr	r3, [pc, #296]	; (800ae44 <_strtod_l+0x93c>)
 800ad1a:	400b      	ands	r3, r1
 800ad1c:	4680      	mov	r8, r0
 800ad1e:	4689      	mov	r9, r1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f47f ae3f 	bne.w	800a9a4 <_strtod_l+0x49c>
 800ad26:	2322      	movs	r3, #34	; 0x22
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	e63b      	b.n	800a9a4 <_strtod_l+0x49c>
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	fa02 f303 	lsl.w	r3, r2, r3
 800ad34:	ea03 0808 	and.w	r8, r3, r8
 800ad38:	e6e8      	b.n	800ab0c <_strtod_l+0x604>
 800ad3a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ad3e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ad42:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ad46:	36e2      	adds	r6, #226	; 0xe2
 800ad48:	fa01 f306 	lsl.w	r3, r1, r6
 800ad4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ad50:	e748      	b.n	800abe4 <_strtod_l+0x6dc>
 800ad52:	2100      	movs	r1, #0
 800ad54:	2301      	movs	r3, #1
 800ad56:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ad5a:	e743      	b.n	800abe4 <_strtod_l+0x6dc>
 800ad5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad5e:	4632      	mov	r2, r6
 800ad60:	4620      	mov	r0, r4
 800ad62:	f003 f85b 	bl	800de1c <__lshift>
 800ad66:	9016      	str	r0, [sp, #88]	; 0x58
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	f47f af6b 	bne.w	800ac44 <_strtod_l+0x73c>
 800ad6e:	e60f      	b.n	800a990 <_strtod_l+0x488>
 800ad70:	46ca      	mov	sl, r9
 800ad72:	d171      	bne.n	800ae58 <_strtod_l+0x950>
 800ad74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad7a:	b352      	cbz	r2, 800add2 <_strtod_l+0x8ca>
 800ad7c:	4a33      	ldr	r2, [pc, #204]	; (800ae4c <_strtod_l+0x944>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d12a      	bne.n	800add8 <_strtod_l+0x8d0>
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	4641      	mov	r1, r8
 800ad86:	b1fb      	cbz	r3, 800adc8 <_strtod_l+0x8c0>
 800ad88:	4b2e      	ldr	r3, [pc, #184]	; (800ae44 <_strtod_l+0x93c>)
 800ad8a:	ea09 0303 	and.w	r3, r9, r3
 800ad8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	d81a      	bhi.n	800adce <_strtod_l+0x8c6>
 800ad98:	0d1b      	lsrs	r3, r3, #20
 800ad9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad9e:	fa02 f303 	lsl.w	r3, r2, r3
 800ada2:	4299      	cmp	r1, r3
 800ada4:	d118      	bne.n	800add8 <_strtod_l+0x8d0>
 800ada6:	4b2a      	ldr	r3, [pc, #168]	; (800ae50 <_strtod_l+0x948>)
 800ada8:	459a      	cmp	sl, r3
 800adaa:	d102      	bne.n	800adb2 <_strtod_l+0x8aa>
 800adac:	3101      	adds	r1, #1
 800adae:	f43f adef 	beq.w	800a990 <_strtod_l+0x488>
 800adb2:	4b24      	ldr	r3, [pc, #144]	; (800ae44 <_strtod_l+0x93c>)
 800adb4:	ea0a 0303 	and.w	r3, sl, r3
 800adb8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800adbc:	f04f 0800 	mov.w	r8, #0
 800adc0:	9b04      	ldr	r3, [sp, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1a2      	bne.n	800ad0c <_strtod_l+0x804>
 800adc6:	e5ed      	b.n	800a9a4 <_strtod_l+0x49c>
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	e7e9      	b.n	800ada2 <_strtod_l+0x89a>
 800adce:	4613      	mov	r3, r2
 800add0:	e7e7      	b.n	800ada2 <_strtod_l+0x89a>
 800add2:	ea53 0308 	orrs.w	r3, r3, r8
 800add6:	d08a      	beq.n	800acee <_strtod_l+0x7e6>
 800add8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adda:	b1e3      	cbz	r3, 800ae16 <_strtod_l+0x90e>
 800addc:	ea13 0f0a 	tst.w	r3, sl
 800ade0:	d0ee      	beq.n	800adc0 <_strtod_l+0x8b8>
 800ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade4:	9a04      	ldr	r2, [sp, #16]
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	b1c3      	cbz	r3, 800ae1e <_strtod_l+0x916>
 800adec:	f7ff fb6e 	bl	800a4cc <sulp>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	ec51 0b18 	vmov	r0, r1, d8
 800adf8:	f7f5 fa58 	bl	80002ac <__adddf3>
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	e7de      	b.n	800adc0 <_strtod_l+0x8b8>
 800ae02:	4013      	ands	r3, r2
 800ae04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ae10:	f04f 38ff 	mov.w	r8, #4294967295
 800ae14:	e7d4      	b.n	800adc0 <_strtod_l+0x8b8>
 800ae16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae18:	ea13 0f08 	tst.w	r3, r8
 800ae1c:	e7e0      	b.n	800ade0 <_strtod_l+0x8d8>
 800ae1e:	f7ff fb55 	bl	800a4cc <sulp>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	ec51 0b18 	vmov	r0, r1, d8
 800ae2a:	f7f5 fa3d 	bl	80002a8 <__aeabi_dsub>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	f7f5 fe57 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d0c0      	beq.n	800adc0 <_strtod_l+0x8b8>
 800ae3e:	e618      	b.n	800aa72 <_strtod_l+0x56a>
 800ae40:	fffffc02 	.word	0xfffffc02
 800ae44:	7ff00000 	.word	0x7ff00000
 800ae48:	39500000 	.word	0x39500000
 800ae4c:	000fffff 	.word	0x000fffff
 800ae50:	7fefffff 	.word	0x7fefffff
 800ae54:	08012500 	.word	0x08012500
 800ae58:	4659      	mov	r1, fp
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f003 f9ba 	bl	800e1d4 <__ratio>
 800ae60:	ec57 6b10 	vmov	r6, r7, d0
 800ae64:	ee10 0a10 	vmov	r0, s0
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fe4e 	bl	8000b10 <__aeabi_dcmple>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d071      	beq.n	800af5c <_strtod_l+0xa54>
 800ae78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d17c      	bne.n	800af78 <_strtod_l+0xa70>
 800ae7e:	f1b8 0f00 	cmp.w	r8, #0
 800ae82:	d15a      	bne.n	800af3a <_strtod_l+0xa32>
 800ae84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d15d      	bne.n	800af48 <_strtod_l+0xa40>
 800ae8c:	4b90      	ldr	r3, [pc, #576]	; (800b0d0 <_strtod_l+0xbc8>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	4630      	mov	r0, r6
 800ae92:	4639      	mov	r1, r7
 800ae94:	f7f5 fe32 	bl	8000afc <__aeabi_dcmplt>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d15c      	bne.n	800af56 <_strtod_l+0xa4e>
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	4639      	mov	r1, r7
 800aea0:	4b8c      	ldr	r3, [pc, #560]	; (800b0d4 <_strtod_l+0xbcc>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	f7f5 fbb8 	bl	8000618 <__aeabi_dmul>
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aeb0:	9606      	str	r6, [sp, #24]
 800aeb2:	9307      	str	r3, [sp, #28]
 800aeb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aeb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aebc:	4b86      	ldr	r3, [pc, #536]	; (800b0d8 <_strtod_l+0xbd0>)
 800aebe:	ea0a 0303 	and.w	r3, sl, r3
 800aec2:	930d      	str	r3, [sp, #52]	; 0x34
 800aec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aec6:	4b85      	ldr	r3, [pc, #532]	; (800b0dc <_strtod_l+0xbd4>)
 800aec8:	429a      	cmp	r2, r3
 800aeca:	f040 8090 	bne.w	800afee <_strtod_l+0xae6>
 800aece:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800aed2:	ec49 8b10 	vmov	d0, r8, r9
 800aed6:	f003 f8b3 	bl	800e040 <__ulp>
 800aeda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aede:	ec51 0b10 	vmov	r0, r1, d0
 800aee2:	f7f5 fb99 	bl	8000618 <__aeabi_dmul>
 800aee6:	4642      	mov	r2, r8
 800aee8:	464b      	mov	r3, r9
 800aeea:	f7f5 f9df 	bl	80002ac <__adddf3>
 800aeee:	460b      	mov	r3, r1
 800aef0:	4979      	ldr	r1, [pc, #484]	; (800b0d8 <_strtod_l+0xbd0>)
 800aef2:	4a7b      	ldr	r2, [pc, #492]	; (800b0e0 <_strtod_l+0xbd8>)
 800aef4:	4019      	ands	r1, r3
 800aef6:	4291      	cmp	r1, r2
 800aef8:	4680      	mov	r8, r0
 800aefa:	d944      	bls.n	800af86 <_strtod_l+0xa7e>
 800aefc:	ee18 2a90 	vmov	r2, s17
 800af00:	4b78      	ldr	r3, [pc, #480]	; (800b0e4 <_strtod_l+0xbdc>)
 800af02:	429a      	cmp	r2, r3
 800af04:	d104      	bne.n	800af10 <_strtod_l+0xa08>
 800af06:	ee18 3a10 	vmov	r3, s16
 800af0a:	3301      	adds	r3, #1
 800af0c:	f43f ad40 	beq.w	800a990 <_strtod_l+0x488>
 800af10:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b0e4 <_strtod_l+0xbdc>
 800af14:	f04f 38ff 	mov.w	r8, #4294967295
 800af18:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af1a:	4620      	mov	r0, r4
 800af1c:	f002 fd64 	bl	800d9e8 <_Bfree>
 800af20:	9905      	ldr	r1, [sp, #20]
 800af22:	4620      	mov	r0, r4
 800af24:	f002 fd60 	bl	800d9e8 <_Bfree>
 800af28:	4659      	mov	r1, fp
 800af2a:	4620      	mov	r0, r4
 800af2c:	f002 fd5c 	bl	800d9e8 <_Bfree>
 800af30:	4629      	mov	r1, r5
 800af32:	4620      	mov	r0, r4
 800af34:	f002 fd58 	bl	800d9e8 <_Bfree>
 800af38:	e609      	b.n	800ab4e <_strtod_l+0x646>
 800af3a:	f1b8 0f01 	cmp.w	r8, #1
 800af3e:	d103      	bne.n	800af48 <_strtod_l+0xa40>
 800af40:	f1b9 0f00 	cmp.w	r9, #0
 800af44:	f43f ad95 	beq.w	800aa72 <_strtod_l+0x56a>
 800af48:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b0a0 <_strtod_l+0xb98>
 800af4c:	4f60      	ldr	r7, [pc, #384]	; (800b0d0 <_strtod_l+0xbc8>)
 800af4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af52:	2600      	movs	r6, #0
 800af54:	e7ae      	b.n	800aeb4 <_strtod_l+0x9ac>
 800af56:	4f5f      	ldr	r7, [pc, #380]	; (800b0d4 <_strtod_l+0xbcc>)
 800af58:	2600      	movs	r6, #0
 800af5a:	e7a7      	b.n	800aeac <_strtod_l+0x9a4>
 800af5c:	4b5d      	ldr	r3, [pc, #372]	; (800b0d4 <_strtod_l+0xbcc>)
 800af5e:	4630      	mov	r0, r6
 800af60:	4639      	mov	r1, r7
 800af62:	2200      	movs	r2, #0
 800af64:	f7f5 fb58 	bl	8000618 <__aeabi_dmul>
 800af68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d09c      	beq.n	800aeac <_strtod_l+0x9a4>
 800af72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af76:	e79d      	b.n	800aeb4 <_strtod_l+0x9ac>
 800af78:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b0a8 <_strtod_l+0xba0>
 800af7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af80:	ec57 6b17 	vmov	r6, r7, d7
 800af84:	e796      	b.n	800aeb4 <_strtod_l+0x9ac>
 800af86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800af8a:	9b04      	ldr	r3, [sp, #16]
 800af8c:	46ca      	mov	sl, r9
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1c2      	bne.n	800af18 <_strtod_l+0xa10>
 800af92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af98:	0d1b      	lsrs	r3, r3, #20
 800af9a:	051b      	lsls	r3, r3, #20
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d1bb      	bne.n	800af18 <_strtod_l+0xa10>
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fe98 	bl	8000cd8 <__aeabi_d2lz>
 800afa8:	f7f5 fb08 	bl	80005bc <__aeabi_l2d>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 f978 	bl	80002a8 <__aeabi_dsub>
 800afb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afbe:	ea43 0308 	orr.w	r3, r3, r8
 800afc2:	4313      	orrs	r3, r2
 800afc4:	4606      	mov	r6, r0
 800afc6:	460f      	mov	r7, r1
 800afc8:	d054      	beq.n	800b074 <_strtod_l+0xb6c>
 800afca:	a339      	add	r3, pc, #228	; (adr r3, 800b0b0 <_strtod_l+0xba8>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 fd94 	bl	8000afc <__aeabi_dcmplt>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f47f ace5 	bne.w	800a9a4 <_strtod_l+0x49c>
 800afda:	a337      	add	r3, pc, #220	; (adr r3, 800b0b8 <_strtod_l+0xbb0>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 fda8 	bl	8000b38 <__aeabi_dcmpgt>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d095      	beq.n	800af18 <_strtod_l+0xa10>
 800afec:	e4da      	b.n	800a9a4 <_strtod_l+0x49c>
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	b333      	cbz	r3, 800b040 <_strtod_l+0xb38>
 800aff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aff4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aff8:	d822      	bhi.n	800b040 <_strtod_l+0xb38>
 800affa:	a331      	add	r3, pc, #196	; (adr r3, 800b0c0 <_strtod_l+0xbb8>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f7f5 fd84 	bl	8000b10 <__aeabi_dcmple>
 800b008:	b1a0      	cbz	r0, 800b034 <_strtod_l+0xb2c>
 800b00a:	4639      	mov	r1, r7
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7f5 fddb 	bl	8000bc8 <__aeabi_d2uiz>
 800b012:	2801      	cmp	r0, #1
 800b014:	bf38      	it	cc
 800b016:	2001      	movcc	r0, #1
 800b018:	f7f5 fa84 	bl	8000524 <__aeabi_ui2d>
 800b01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b01e:	4606      	mov	r6, r0
 800b020:	460f      	mov	r7, r1
 800b022:	bb23      	cbnz	r3, 800b06e <_strtod_l+0xb66>
 800b024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b028:	9010      	str	r0, [sp, #64]	; 0x40
 800b02a:	9311      	str	r3, [sp, #68]	; 0x44
 800b02c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b030:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b038:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b03c:	1a9b      	subs	r3, r3, r2
 800b03e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b040:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b044:	eeb0 0a48 	vmov.f32	s0, s16
 800b048:	eef0 0a68 	vmov.f32	s1, s17
 800b04c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b050:	f002 fff6 	bl	800e040 <__ulp>
 800b054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b058:	ec53 2b10 	vmov	r2, r3, d0
 800b05c:	f7f5 fadc 	bl	8000618 <__aeabi_dmul>
 800b060:	ec53 2b18 	vmov	r2, r3, d8
 800b064:	f7f5 f922 	bl	80002ac <__adddf3>
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	e78d      	b.n	800af8a <_strtod_l+0xa82>
 800b06e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b072:	e7db      	b.n	800b02c <_strtod_l+0xb24>
 800b074:	a314      	add	r3, pc, #80	; (adr r3, 800b0c8 <_strtod_l+0xbc0>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7f5 fd3f 	bl	8000afc <__aeabi_dcmplt>
 800b07e:	e7b3      	b.n	800afe8 <_strtod_l+0xae0>
 800b080:	2300      	movs	r3, #0
 800b082:	930a      	str	r3, [sp, #40]	; 0x28
 800b084:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	f7ff ba7c 	b.w	800a586 <_strtod_l+0x7e>
 800b08e:	2a65      	cmp	r2, #101	; 0x65
 800b090:	f43f ab75 	beq.w	800a77e <_strtod_l+0x276>
 800b094:	2a45      	cmp	r2, #69	; 0x45
 800b096:	f43f ab72 	beq.w	800a77e <_strtod_l+0x276>
 800b09a:	2301      	movs	r3, #1
 800b09c:	f7ff bbaa 	b.w	800a7f4 <_strtod_l+0x2ec>
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	bff00000 	.word	0xbff00000
 800b0a8:	00000000 	.word	0x00000000
 800b0ac:	3ff00000 	.word	0x3ff00000
 800b0b0:	94a03595 	.word	0x94a03595
 800b0b4:	3fdfffff 	.word	0x3fdfffff
 800b0b8:	35afe535 	.word	0x35afe535
 800b0bc:	3fe00000 	.word	0x3fe00000
 800b0c0:	ffc00000 	.word	0xffc00000
 800b0c4:	41dfffff 	.word	0x41dfffff
 800b0c8:	94a03595 	.word	0x94a03595
 800b0cc:	3fcfffff 	.word	0x3fcfffff
 800b0d0:	3ff00000 	.word	0x3ff00000
 800b0d4:	3fe00000 	.word	0x3fe00000
 800b0d8:	7ff00000 	.word	0x7ff00000
 800b0dc:	7fe00000 	.word	0x7fe00000
 800b0e0:	7c9fffff 	.word	0x7c9fffff
 800b0e4:	7fefffff 	.word	0x7fefffff

0800b0e8 <_strtod_r>:
 800b0e8:	4b01      	ldr	r3, [pc, #4]	; (800b0f0 <_strtod_r+0x8>)
 800b0ea:	f7ff ba0d 	b.w	800a508 <_strtod_l>
 800b0ee:	bf00      	nop
 800b0f0:	20000040 	.word	0x20000040

0800b0f4 <strtod>:
 800b0f4:	460a      	mov	r2, r1
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4802      	ldr	r0, [pc, #8]	; (800b104 <strtod+0x10>)
 800b0fa:	4b03      	ldr	r3, [pc, #12]	; (800b108 <strtod+0x14>)
 800b0fc:	6800      	ldr	r0, [r0, #0]
 800b0fe:	f7ff ba03 	b.w	800a508 <_strtod_l>
 800b102:	bf00      	nop
 800b104:	200001f8 	.word	0x200001f8
 800b108:	20000040 	.word	0x20000040

0800b10c <__utoa>:
 800b10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b10e:	4c1f      	ldr	r4, [pc, #124]	; (800b18c <__utoa+0x80>)
 800b110:	b08b      	sub	sp, #44	; 0x2c
 800b112:	4605      	mov	r5, r0
 800b114:	460b      	mov	r3, r1
 800b116:	466e      	mov	r6, sp
 800b118:	f104 0c20 	add.w	ip, r4, #32
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	6861      	ldr	r1, [r4, #4]
 800b120:	4637      	mov	r7, r6
 800b122:	c703      	stmia	r7!, {r0, r1}
 800b124:	3408      	adds	r4, #8
 800b126:	4564      	cmp	r4, ip
 800b128:	463e      	mov	r6, r7
 800b12a:	d1f7      	bne.n	800b11c <__utoa+0x10>
 800b12c:	7921      	ldrb	r1, [r4, #4]
 800b12e:	7139      	strb	r1, [r7, #4]
 800b130:	1e91      	subs	r1, r2, #2
 800b132:	6820      	ldr	r0, [r4, #0]
 800b134:	6038      	str	r0, [r7, #0]
 800b136:	2922      	cmp	r1, #34	; 0x22
 800b138:	f04f 0100 	mov.w	r1, #0
 800b13c:	d904      	bls.n	800b148 <__utoa+0x3c>
 800b13e:	7019      	strb	r1, [r3, #0]
 800b140:	460b      	mov	r3, r1
 800b142:	4618      	mov	r0, r3
 800b144:	b00b      	add	sp, #44	; 0x2c
 800b146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b148:	1e58      	subs	r0, r3, #1
 800b14a:	4684      	mov	ip, r0
 800b14c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b150:	fb02 5617 	mls	r6, r2, r7, r5
 800b154:	3628      	adds	r6, #40	; 0x28
 800b156:	446e      	add	r6, sp
 800b158:	460c      	mov	r4, r1
 800b15a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b15e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b162:	462e      	mov	r6, r5
 800b164:	42b2      	cmp	r2, r6
 800b166:	f101 0101 	add.w	r1, r1, #1
 800b16a:	463d      	mov	r5, r7
 800b16c:	d9ee      	bls.n	800b14c <__utoa+0x40>
 800b16e:	2200      	movs	r2, #0
 800b170:	545a      	strb	r2, [r3, r1]
 800b172:	1919      	adds	r1, r3, r4
 800b174:	1aa5      	subs	r5, r4, r2
 800b176:	42aa      	cmp	r2, r5
 800b178:	dae3      	bge.n	800b142 <__utoa+0x36>
 800b17a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b17e:	780e      	ldrb	r6, [r1, #0]
 800b180:	7006      	strb	r6, [r0, #0]
 800b182:	3201      	adds	r2, #1
 800b184:	f801 5901 	strb.w	r5, [r1], #-1
 800b188:	e7f4      	b.n	800b174 <__utoa+0x68>
 800b18a:	bf00      	nop
 800b18c:	08012528 	.word	0x08012528

0800b190 <__cvt>:
 800b190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b194:	ec55 4b10 	vmov	r4, r5, d0
 800b198:	2d00      	cmp	r5, #0
 800b19a:	460e      	mov	r6, r1
 800b19c:	4619      	mov	r1, r3
 800b19e:	462b      	mov	r3, r5
 800b1a0:	bfbb      	ittet	lt
 800b1a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1a6:	461d      	movlt	r5, r3
 800b1a8:	2300      	movge	r3, #0
 800b1aa:	232d      	movlt	r3, #45	; 0x2d
 800b1ac:	700b      	strb	r3, [r1, #0]
 800b1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1b4:	4691      	mov	r9, r2
 800b1b6:	f023 0820 	bic.w	r8, r3, #32
 800b1ba:	bfbc      	itt	lt
 800b1bc:	4622      	movlt	r2, r4
 800b1be:	4614      	movlt	r4, r2
 800b1c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1c4:	d005      	beq.n	800b1d2 <__cvt+0x42>
 800b1c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b1ca:	d100      	bne.n	800b1ce <__cvt+0x3e>
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	2102      	movs	r1, #2
 800b1d0:	e000      	b.n	800b1d4 <__cvt+0x44>
 800b1d2:	2103      	movs	r1, #3
 800b1d4:	ab03      	add	r3, sp, #12
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	ab02      	add	r3, sp, #8
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	ec45 4b10 	vmov	d0, r4, r5
 800b1e0:	4653      	mov	r3, sl
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	f001 f964 	bl	800c4b0 <_dtoa_r>
 800b1e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	d102      	bne.n	800b1f6 <__cvt+0x66>
 800b1f0:	f019 0f01 	tst.w	r9, #1
 800b1f4:	d022      	beq.n	800b23c <__cvt+0xac>
 800b1f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1fa:	eb07 0906 	add.w	r9, r7, r6
 800b1fe:	d110      	bne.n	800b222 <__cvt+0x92>
 800b200:	783b      	ldrb	r3, [r7, #0]
 800b202:	2b30      	cmp	r3, #48	; 0x30
 800b204:	d10a      	bne.n	800b21c <__cvt+0x8c>
 800b206:	2200      	movs	r2, #0
 800b208:	2300      	movs	r3, #0
 800b20a:	4620      	mov	r0, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	f7f5 fc6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b212:	b918      	cbnz	r0, 800b21c <__cvt+0x8c>
 800b214:	f1c6 0601 	rsb	r6, r6, #1
 800b218:	f8ca 6000 	str.w	r6, [sl]
 800b21c:	f8da 3000 	ldr.w	r3, [sl]
 800b220:	4499      	add	r9, r3
 800b222:	2200      	movs	r2, #0
 800b224:	2300      	movs	r3, #0
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 fc5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b22e:	b108      	cbz	r0, 800b234 <__cvt+0xa4>
 800b230:	f8cd 900c 	str.w	r9, [sp, #12]
 800b234:	2230      	movs	r2, #48	; 0x30
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	454b      	cmp	r3, r9
 800b23a:	d307      	bcc.n	800b24c <__cvt+0xbc>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b240:	1bdb      	subs	r3, r3, r7
 800b242:	4638      	mov	r0, r7
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	b004      	add	sp, #16
 800b248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24c:	1c59      	adds	r1, r3, #1
 800b24e:	9103      	str	r1, [sp, #12]
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	e7f0      	b.n	800b236 <__cvt+0xa6>

0800b254 <__exponent>:
 800b254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b256:	4603      	mov	r3, r0
 800b258:	2900      	cmp	r1, #0
 800b25a:	bfb8      	it	lt
 800b25c:	4249      	neglt	r1, r1
 800b25e:	f803 2b02 	strb.w	r2, [r3], #2
 800b262:	bfb4      	ite	lt
 800b264:	222d      	movlt	r2, #45	; 0x2d
 800b266:	222b      	movge	r2, #43	; 0x2b
 800b268:	2909      	cmp	r1, #9
 800b26a:	7042      	strb	r2, [r0, #1]
 800b26c:	dd2a      	ble.n	800b2c4 <__exponent+0x70>
 800b26e:	f10d 0207 	add.w	r2, sp, #7
 800b272:	4617      	mov	r7, r2
 800b274:	260a      	movs	r6, #10
 800b276:	4694      	mov	ip, r2
 800b278:	fb91 f5f6 	sdiv	r5, r1, r6
 800b27c:	fb06 1415 	mls	r4, r6, r5, r1
 800b280:	3430      	adds	r4, #48	; 0x30
 800b282:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b286:	460c      	mov	r4, r1
 800b288:	2c63      	cmp	r4, #99	; 0x63
 800b28a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b28e:	4629      	mov	r1, r5
 800b290:	dcf1      	bgt.n	800b276 <__exponent+0x22>
 800b292:	3130      	adds	r1, #48	; 0x30
 800b294:	f1ac 0402 	sub.w	r4, ip, #2
 800b298:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b29c:	1c41      	adds	r1, r0, #1
 800b29e:	4622      	mov	r2, r4
 800b2a0:	42ba      	cmp	r2, r7
 800b2a2:	d30a      	bcc.n	800b2ba <__exponent+0x66>
 800b2a4:	f10d 0209 	add.w	r2, sp, #9
 800b2a8:	eba2 020c 	sub.w	r2, r2, ip
 800b2ac:	42bc      	cmp	r4, r7
 800b2ae:	bf88      	it	hi
 800b2b0:	2200      	movhi	r2, #0
 800b2b2:	4413      	add	r3, r2
 800b2b4:	1a18      	subs	r0, r3, r0
 800b2b6:	b003      	add	sp, #12
 800b2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b2be:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b2c2:	e7ed      	b.n	800b2a0 <__exponent+0x4c>
 800b2c4:	2330      	movs	r3, #48	; 0x30
 800b2c6:	3130      	adds	r1, #48	; 0x30
 800b2c8:	7083      	strb	r3, [r0, #2]
 800b2ca:	70c1      	strb	r1, [r0, #3]
 800b2cc:	1d03      	adds	r3, r0, #4
 800b2ce:	e7f1      	b.n	800b2b4 <__exponent+0x60>

0800b2d0 <_printf_float>:
 800b2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d4:	ed2d 8b02 	vpush	{d8}
 800b2d8:	b08d      	sub	sp, #52	; 0x34
 800b2da:	460c      	mov	r4, r1
 800b2dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b2e0:	4616      	mov	r6, r2
 800b2e2:	461f      	mov	r7, r3
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	f000 ffa1 	bl	800c22c <_localeconv_r>
 800b2ea:	f8d0 a000 	ldr.w	sl, [r0]
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	f7f4 ffce 	bl	8000290 <strlen>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	9305      	str	r3, [sp, #20]
 800b2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b300:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b304:	3307      	adds	r3, #7
 800b306:	f023 0307 	bic.w	r3, r3, #7
 800b30a:	f103 0208 	add.w	r2, r3, #8
 800b30e:	f8c8 2000 	str.w	r2, [r8]
 800b312:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b31a:	9307      	str	r3, [sp, #28]
 800b31c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b320:	ee08 0a10 	vmov	s16, r0
 800b324:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b32c:	4b9e      	ldr	r3, [pc, #632]	; (800b5a8 <_printf_float+0x2d8>)
 800b32e:	f04f 32ff 	mov.w	r2, #4294967295
 800b332:	f7f5 fc0b 	bl	8000b4c <__aeabi_dcmpun>
 800b336:	bb88      	cbnz	r0, 800b39c <_printf_float+0xcc>
 800b338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b33c:	4b9a      	ldr	r3, [pc, #616]	; (800b5a8 <_printf_float+0x2d8>)
 800b33e:	f04f 32ff 	mov.w	r2, #4294967295
 800b342:	f7f5 fbe5 	bl	8000b10 <__aeabi_dcmple>
 800b346:	bb48      	cbnz	r0, 800b39c <_printf_float+0xcc>
 800b348:	2200      	movs	r2, #0
 800b34a:	2300      	movs	r3, #0
 800b34c:	4640      	mov	r0, r8
 800b34e:	4649      	mov	r1, r9
 800b350:	f7f5 fbd4 	bl	8000afc <__aeabi_dcmplt>
 800b354:	b110      	cbz	r0, 800b35c <_printf_float+0x8c>
 800b356:	232d      	movs	r3, #45	; 0x2d
 800b358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b35c:	4a93      	ldr	r2, [pc, #588]	; (800b5ac <_printf_float+0x2dc>)
 800b35e:	4b94      	ldr	r3, [pc, #592]	; (800b5b0 <_printf_float+0x2e0>)
 800b360:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b364:	bf94      	ite	ls
 800b366:	4690      	movls	r8, r2
 800b368:	4698      	movhi	r8, r3
 800b36a:	2303      	movs	r3, #3
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	9b05      	ldr	r3, [sp, #20]
 800b370:	f023 0304 	bic.w	r3, r3, #4
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	f04f 0900 	mov.w	r9, #0
 800b37a:	9700      	str	r7, [sp, #0]
 800b37c:	4633      	mov	r3, r6
 800b37e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b380:	4621      	mov	r1, r4
 800b382:	4628      	mov	r0, r5
 800b384:	f000 f9da 	bl	800b73c <_printf_common>
 800b388:	3001      	adds	r0, #1
 800b38a:	f040 8090 	bne.w	800b4ae <_printf_float+0x1de>
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295
 800b392:	b00d      	add	sp, #52	; 0x34
 800b394:	ecbd 8b02 	vpop	{d8}
 800b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	f7f5 fbd2 	bl	8000b4c <__aeabi_dcmpun>
 800b3a8:	b140      	cbz	r0, 800b3bc <_printf_float+0xec>
 800b3aa:	464b      	mov	r3, r9
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bfbc      	itt	lt
 800b3b0:	232d      	movlt	r3, #45	; 0x2d
 800b3b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3b6:	4a7f      	ldr	r2, [pc, #508]	; (800b5b4 <_printf_float+0x2e4>)
 800b3b8:	4b7f      	ldr	r3, [pc, #508]	; (800b5b8 <_printf_float+0x2e8>)
 800b3ba:	e7d1      	b.n	800b360 <_printf_float+0x90>
 800b3bc:	6863      	ldr	r3, [r4, #4]
 800b3be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b3c2:	9206      	str	r2, [sp, #24]
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	d13f      	bne.n	800b448 <_printf_float+0x178>
 800b3c8:	2306      	movs	r3, #6
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	9b05      	ldr	r3, [sp, #20]
 800b3ce:	6861      	ldr	r1, [r4, #4]
 800b3d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	ab0a      	add	r3, sp, #40	; 0x28
 800b3da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b3de:	ab09      	add	r3, sp, #36	; 0x24
 800b3e0:	ec49 8b10 	vmov	d0, r8, r9
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	6022      	str	r2, [r4, #0]
 800b3e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f7ff fecf 	bl	800b190 <__cvt>
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3f6:	2b47      	cmp	r3, #71	; 0x47
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	d108      	bne.n	800b40e <_printf_float+0x13e>
 800b3fc:	1cc8      	adds	r0, r1, #3
 800b3fe:	db02      	blt.n	800b406 <_printf_float+0x136>
 800b400:	6863      	ldr	r3, [r4, #4]
 800b402:	4299      	cmp	r1, r3
 800b404:	dd41      	ble.n	800b48a <_printf_float+0x1ba>
 800b406:	f1ab 0302 	sub.w	r3, fp, #2
 800b40a:	fa5f fb83 	uxtb.w	fp, r3
 800b40e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b412:	d820      	bhi.n	800b456 <_printf_float+0x186>
 800b414:	3901      	subs	r1, #1
 800b416:	465a      	mov	r2, fp
 800b418:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b41c:	9109      	str	r1, [sp, #36]	; 0x24
 800b41e:	f7ff ff19 	bl	800b254 <__exponent>
 800b422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b424:	1813      	adds	r3, r2, r0
 800b426:	2a01      	cmp	r2, #1
 800b428:	4681      	mov	r9, r0
 800b42a:	6123      	str	r3, [r4, #16]
 800b42c:	dc02      	bgt.n	800b434 <_printf_float+0x164>
 800b42e:	6822      	ldr	r2, [r4, #0]
 800b430:	07d2      	lsls	r2, r2, #31
 800b432:	d501      	bpl.n	800b438 <_printf_float+0x168>
 800b434:	3301      	adds	r3, #1
 800b436:	6123      	str	r3, [r4, #16]
 800b438:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d09c      	beq.n	800b37a <_printf_float+0xaa>
 800b440:	232d      	movs	r3, #45	; 0x2d
 800b442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b446:	e798      	b.n	800b37a <_printf_float+0xaa>
 800b448:	9a06      	ldr	r2, [sp, #24]
 800b44a:	2a47      	cmp	r2, #71	; 0x47
 800b44c:	d1be      	bne.n	800b3cc <_printf_float+0xfc>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1bc      	bne.n	800b3cc <_printf_float+0xfc>
 800b452:	2301      	movs	r3, #1
 800b454:	e7b9      	b.n	800b3ca <_printf_float+0xfa>
 800b456:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b45a:	d118      	bne.n	800b48e <_printf_float+0x1be>
 800b45c:	2900      	cmp	r1, #0
 800b45e:	6863      	ldr	r3, [r4, #4]
 800b460:	dd0b      	ble.n	800b47a <_printf_float+0x1aa>
 800b462:	6121      	str	r1, [r4, #16]
 800b464:	b913      	cbnz	r3, 800b46c <_printf_float+0x19c>
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	07d0      	lsls	r0, r2, #31
 800b46a:	d502      	bpl.n	800b472 <_printf_float+0x1a2>
 800b46c:	3301      	adds	r3, #1
 800b46e:	440b      	add	r3, r1
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	65a1      	str	r1, [r4, #88]	; 0x58
 800b474:	f04f 0900 	mov.w	r9, #0
 800b478:	e7de      	b.n	800b438 <_printf_float+0x168>
 800b47a:	b913      	cbnz	r3, 800b482 <_printf_float+0x1b2>
 800b47c:	6822      	ldr	r2, [r4, #0]
 800b47e:	07d2      	lsls	r2, r2, #31
 800b480:	d501      	bpl.n	800b486 <_printf_float+0x1b6>
 800b482:	3302      	adds	r3, #2
 800b484:	e7f4      	b.n	800b470 <_printf_float+0x1a0>
 800b486:	2301      	movs	r3, #1
 800b488:	e7f2      	b.n	800b470 <_printf_float+0x1a0>
 800b48a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b490:	4299      	cmp	r1, r3
 800b492:	db05      	blt.n	800b4a0 <_printf_float+0x1d0>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	6121      	str	r1, [r4, #16]
 800b498:	07d8      	lsls	r0, r3, #31
 800b49a:	d5ea      	bpl.n	800b472 <_printf_float+0x1a2>
 800b49c:	1c4b      	adds	r3, r1, #1
 800b49e:	e7e7      	b.n	800b470 <_printf_float+0x1a0>
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	bfd4      	ite	le
 800b4a4:	f1c1 0202 	rsble	r2, r1, #2
 800b4a8:	2201      	movgt	r2, #1
 800b4aa:	4413      	add	r3, r2
 800b4ac:	e7e0      	b.n	800b470 <_printf_float+0x1a0>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	055a      	lsls	r2, r3, #21
 800b4b2:	d407      	bmi.n	800b4c4 <_printf_float+0x1f4>
 800b4b4:	6923      	ldr	r3, [r4, #16]
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	47b8      	blx	r7
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d12c      	bne.n	800b51c <_printf_float+0x24c>
 800b4c2:	e764      	b.n	800b38e <_printf_float+0xbe>
 800b4c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4c8:	f240 80e0 	bls.w	800b68c <_printf_float+0x3bc>
 800b4cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	f7f5 fb08 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d034      	beq.n	800b546 <_printf_float+0x276>
 800b4dc:	4a37      	ldr	r2, [pc, #220]	; (800b5bc <_printf_float+0x2ec>)
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b8      	blx	r7
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f43f af51 	beq.w	800b38e <_printf_float+0xbe>
 800b4ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	db02      	blt.n	800b4fa <_printf_float+0x22a>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	07d8      	lsls	r0, r3, #31
 800b4f8:	d510      	bpl.n	800b51c <_printf_float+0x24c>
 800b4fa:	ee18 3a10 	vmov	r3, s16
 800b4fe:	4652      	mov	r2, sl
 800b500:	4631      	mov	r1, r6
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	f43f af41 	beq.w	800b38e <_printf_float+0xbe>
 800b50c:	f04f 0800 	mov.w	r8, #0
 800b510:	f104 091a 	add.w	r9, r4, #26
 800b514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b516:	3b01      	subs	r3, #1
 800b518:	4543      	cmp	r3, r8
 800b51a:	dc09      	bgt.n	800b530 <_printf_float+0x260>
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	079b      	lsls	r3, r3, #30
 800b520:	f100 8107 	bmi.w	800b732 <_printf_float+0x462>
 800b524:	68e0      	ldr	r0, [r4, #12]
 800b526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b528:	4298      	cmp	r0, r3
 800b52a:	bfb8      	it	lt
 800b52c:	4618      	movlt	r0, r3
 800b52e:	e730      	b.n	800b392 <_printf_float+0xc2>
 800b530:	2301      	movs	r3, #1
 800b532:	464a      	mov	r2, r9
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	f43f af27 	beq.w	800b38e <_printf_float+0xbe>
 800b540:	f108 0801 	add.w	r8, r8, #1
 800b544:	e7e6      	b.n	800b514 <_printf_float+0x244>
 800b546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dc39      	bgt.n	800b5c0 <_printf_float+0x2f0>
 800b54c:	4a1b      	ldr	r2, [pc, #108]	; (800b5bc <_printf_float+0x2ec>)
 800b54e:	2301      	movs	r3, #1
 800b550:	4631      	mov	r1, r6
 800b552:	4628      	mov	r0, r5
 800b554:	47b8      	blx	r7
 800b556:	3001      	adds	r0, #1
 800b558:	f43f af19 	beq.w	800b38e <_printf_float+0xbe>
 800b55c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b560:	4313      	orrs	r3, r2
 800b562:	d102      	bne.n	800b56a <_printf_float+0x29a>
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	07d9      	lsls	r1, r3, #31
 800b568:	d5d8      	bpl.n	800b51c <_printf_float+0x24c>
 800b56a:	ee18 3a10 	vmov	r3, s16
 800b56e:	4652      	mov	r2, sl
 800b570:	4631      	mov	r1, r6
 800b572:	4628      	mov	r0, r5
 800b574:	47b8      	blx	r7
 800b576:	3001      	adds	r0, #1
 800b578:	f43f af09 	beq.w	800b38e <_printf_float+0xbe>
 800b57c:	f04f 0900 	mov.w	r9, #0
 800b580:	f104 0a1a 	add.w	sl, r4, #26
 800b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b586:	425b      	negs	r3, r3
 800b588:	454b      	cmp	r3, r9
 800b58a:	dc01      	bgt.n	800b590 <_printf_float+0x2c0>
 800b58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58e:	e792      	b.n	800b4b6 <_printf_float+0x1e6>
 800b590:	2301      	movs	r3, #1
 800b592:	4652      	mov	r2, sl
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	47b8      	blx	r7
 800b59a:	3001      	adds	r0, #1
 800b59c:	f43f aef7 	beq.w	800b38e <_printf_float+0xbe>
 800b5a0:	f109 0901 	add.w	r9, r9, #1
 800b5a4:	e7ee      	b.n	800b584 <_printf_float+0x2b4>
 800b5a6:	bf00      	nop
 800b5a8:	7fefffff 	.word	0x7fefffff
 800b5ac:	0801254d 	.word	0x0801254d
 800b5b0:	08012551 	.word	0x08012551
 800b5b4:	08012555 	.word	0x08012555
 800b5b8:	08012559 	.word	0x08012559
 800b5bc:	0801298c 	.word	0x0801298c
 800b5c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	bfa8      	it	ge
 800b5c8:	461a      	movge	r2, r3
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	4691      	mov	r9, r2
 800b5ce:	dc37      	bgt.n	800b640 <_printf_float+0x370>
 800b5d0:	f04f 0b00 	mov.w	fp, #0
 800b5d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5d8:	f104 021a 	add.w	r2, r4, #26
 800b5dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	eba3 0309 	sub.w	r3, r3, r9
 800b5e4:	455b      	cmp	r3, fp
 800b5e6:	dc33      	bgt.n	800b650 <_printf_float+0x380>
 800b5e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	db3b      	blt.n	800b668 <_printf_float+0x398>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	07da      	lsls	r2, r3, #31
 800b5f4:	d438      	bmi.n	800b668 <_printf_float+0x398>
 800b5f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b5fa:	eba2 0903 	sub.w	r9, r2, r3
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	1ad2      	subs	r2, r2, r3
 800b602:	4591      	cmp	r9, r2
 800b604:	bfa8      	it	ge
 800b606:	4691      	movge	r9, r2
 800b608:	f1b9 0f00 	cmp.w	r9, #0
 800b60c:	dc35      	bgt.n	800b67a <_printf_float+0x3aa>
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b616:	f104 0a1a 	add.w	sl, r4, #26
 800b61a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b61e:	1a9b      	subs	r3, r3, r2
 800b620:	eba3 0309 	sub.w	r3, r3, r9
 800b624:	4543      	cmp	r3, r8
 800b626:	f77f af79 	ble.w	800b51c <_printf_float+0x24c>
 800b62a:	2301      	movs	r3, #1
 800b62c:	4652      	mov	r2, sl
 800b62e:	4631      	mov	r1, r6
 800b630:	4628      	mov	r0, r5
 800b632:	47b8      	blx	r7
 800b634:	3001      	adds	r0, #1
 800b636:	f43f aeaa 	beq.w	800b38e <_printf_float+0xbe>
 800b63a:	f108 0801 	add.w	r8, r8, #1
 800b63e:	e7ec      	b.n	800b61a <_printf_float+0x34a>
 800b640:	4613      	mov	r3, r2
 800b642:	4631      	mov	r1, r6
 800b644:	4642      	mov	r2, r8
 800b646:	4628      	mov	r0, r5
 800b648:	47b8      	blx	r7
 800b64a:	3001      	adds	r0, #1
 800b64c:	d1c0      	bne.n	800b5d0 <_printf_float+0x300>
 800b64e:	e69e      	b.n	800b38e <_printf_float+0xbe>
 800b650:	2301      	movs	r3, #1
 800b652:	4631      	mov	r1, r6
 800b654:	4628      	mov	r0, r5
 800b656:	9205      	str	r2, [sp, #20]
 800b658:	47b8      	blx	r7
 800b65a:	3001      	adds	r0, #1
 800b65c:	f43f ae97 	beq.w	800b38e <_printf_float+0xbe>
 800b660:	9a05      	ldr	r2, [sp, #20]
 800b662:	f10b 0b01 	add.w	fp, fp, #1
 800b666:	e7b9      	b.n	800b5dc <_printf_float+0x30c>
 800b668:	ee18 3a10 	vmov	r3, s16
 800b66c:	4652      	mov	r2, sl
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	d1be      	bne.n	800b5f6 <_printf_float+0x326>
 800b678:	e689      	b.n	800b38e <_printf_float+0xbe>
 800b67a:	9a05      	ldr	r2, [sp, #20]
 800b67c:	464b      	mov	r3, r9
 800b67e:	4442      	add	r2, r8
 800b680:	4631      	mov	r1, r6
 800b682:	4628      	mov	r0, r5
 800b684:	47b8      	blx	r7
 800b686:	3001      	adds	r0, #1
 800b688:	d1c1      	bne.n	800b60e <_printf_float+0x33e>
 800b68a:	e680      	b.n	800b38e <_printf_float+0xbe>
 800b68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b68e:	2a01      	cmp	r2, #1
 800b690:	dc01      	bgt.n	800b696 <_printf_float+0x3c6>
 800b692:	07db      	lsls	r3, r3, #31
 800b694:	d53a      	bpl.n	800b70c <_printf_float+0x43c>
 800b696:	2301      	movs	r3, #1
 800b698:	4642      	mov	r2, r8
 800b69a:	4631      	mov	r1, r6
 800b69c:	4628      	mov	r0, r5
 800b69e:	47b8      	blx	r7
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	f43f ae74 	beq.w	800b38e <_printf_float+0xbe>
 800b6a6:	ee18 3a10 	vmov	r3, s16
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b8      	blx	r7
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f43f ae6b 	beq.w	800b38e <_printf_float+0xbe>
 800b6b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b6c4:	f7f5 fa10 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6c8:	b9d8      	cbnz	r0, 800b702 <_printf_float+0x432>
 800b6ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b6ce:	f108 0201 	add.w	r2, r8, #1
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b8      	blx	r7
 800b6d8:	3001      	adds	r0, #1
 800b6da:	d10e      	bne.n	800b6fa <_printf_float+0x42a>
 800b6dc:	e657      	b.n	800b38e <_printf_float+0xbe>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4652      	mov	r2, sl
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	f43f ae50 	beq.w	800b38e <_printf_float+0xbe>
 800b6ee:	f108 0801 	add.w	r8, r8, #1
 800b6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	4543      	cmp	r3, r8
 800b6f8:	dcf1      	bgt.n	800b6de <_printf_float+0x40e>
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b700:	e6da      	b.n	800b4b8 <_printf_float+0x1e8>
 800b702:	f04f 0800 	mov.w	r8, #0
 800b706:	f104 0a1a 	add.w	sl, r4, #26
 800b70a:	e7f2      	b.n	800b6f2 <_printf_float+0x422>
 800b70c:	2301      	movs	r3, #1
 800b70e:	4642      	mov	r2, r8
 800b710:	e7df      	b.n	800b6d2 <_printf_float+0x402>
 800b712:	2301      	movs	r3, #1
 800b714:	464a      	mov	r2, r9
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	f43f ae36 	beq.w	800b38e <_printf_float+0xbe>
 800b722:	f108 0801 	add.w	r8, r8, #1
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b72a:	1a5b      	subs	r3, r3, r1
 800b72c:	4543      	cmp	r3, r8
 800b72e:	dcf0      	bgt.n	800b712 <_printf_float+0x442>
 800b730:	e6f8      	b.n	800b524 <_printf_float+0x254>
 800b732:	f04f 0800 	mov.w	r8, #0
 800b736:	f104 0919 	add.w	r9, r4, #25
 800b73a:	e7f4      	b.n	800b726 <_printf_float+0x456>

0800b73c <_printf_common>:
 800b73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b740:	4616      	mov	r6, r2
 800b742:	4699      	mov	r9, r3
 800b744:	688a      	ldr	r2, [r1, #8]
 800b746:	690b      	ldr	r3, [r1, #16]
 800b748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	bfb8      	it	lt
 800b750:	4613      	movlt	r3, r2
 800b752:	6033      	str	r3, [r6, #0]
 800b754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b758:	4607      	mov	r7, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	b10a      	cbz	r2, 800b762 <_printf_common+0x26>
 800b75e:	3301      	adds	r3, #1
 800b760:	6033      	str	r3, [r6, #0]
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	0699      	lsls	r1, r3, #26
 800b766:	bf42      	ittt	mi
 800b768:	6833      	ldrmi	r3, [r6, #0]
 800b76a:	3302      	addmi	r3, #2
 800b76c:	6033      	strmi	r3, [r6, #0]
 800b76e:	6825      	ldr	r5, [r4, #0]
 800b770:	f015 0506 	ands.w	r5, r5, #6
 800b774:	d106      	bne.n	800b784 <_printf_common+0x48>
 800b776:	f104 0a19 	add.w	sl, r4, #25
 800b77a:	68e3      	ldr	r3, [r4, #12]
 800b77c:	6832      	ldr	r2, [r6, #0]
 800b77e:	1a9b      	subs	r3, r3, r2
 800b780:	42ab      	cmp	r3, r5
 800b782:	dc26      	bgt.n	800b7d2 <_printf_common+0x96>
 800b784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b788:	1e13      	subs	r3, r2, #0
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	bf18      	it	ne
 800b78e:	2301      	movne	r3, #1
 800b790:	0692      	lsls	r2, r2, #26
 800b792:	d42b      	bmi.n	800b7ec <_printf_common+0xb0>
 800b794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b798:	4649      	mov	r1, r9
 800b79a:	4638      	mov	r0, r7
 800b79c:	47c0      	blx	r8
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d01e      	beq.n	800b7e0 <_printf_common+0xa4>
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	6922      	ldr	r2, [r4, #16]
 800b7a6:	f003 0306 	and.w	r3, r3, #6
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	bf02      	ittt	eq
 800b7ae:	68e5      	ldreq	r5, [r4, #12]
 800b7b0:	6833      	ldreq	r3, [r6, #0]
 800b7b2:	1aed      	subeq	r5, r5, r3
 800b7b4:	68a3      	ldr	r3, [r4, #8]
 800b7b6:	bf0c      	ite	eq
 800b7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7bc:	2500      	movne	r5, #0
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bfc4      	itt	gt
 800b7c2:	1a9b      	subgt	r3, r3, r2
 800b7c4:	18ed      	addgt	r5, r5, r3
 800b7c6:	2600      	movs	r6, #0
 800b7c8:	341a      	adds	r4, #26
 800b7ca:	42b5      	cmp	r5, r6
 800b7cc:	d11a      	bne.n	800b804 <_printf_common+0xc8>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e008      	b.n	800b7e4 <_printf_common+0xa8>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4652      	mov	r2, sl
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	4638      	mov	r0, r7
 800b7da:	47c0      	blx	r8
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d103      	bne.n	800b7e8 <_printf_common+0xac>
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e8:	3501      	adds	r5, #1
 800b7ea:	e7c6      	b.n	800b77a <_printf_common+0x3e>
 800b7ec:	18e1      	adds	r1, r4, r3
 800b7ee:	1c5a      	adds	r2, r3, #1
 800b7f0:	2030      	movs	r0, #48	; 0x30
 800b7f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7f6:	4422      	add	r2, r4
 800b7f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b800:	3302      	adds	r3, #2
 800b802:	e7c7      	b.n	800b794 <_printf_common+0x58>
 800b804:	2301      	movs	r3, #1
 800b806:	4622      	mov	r2, r4
 800b808:	4649      	mov	r1, r9
 800b80a:	4638      	mov	r0, r7
 800b80c:	47c0      	blx	r8
 800b80e:	3001      	adds	r0, #1
 800b810:	d0e6      	beq.n	800b7e0 <_printf_common+0xa4>
 800b812:	3601      	adds	r6, #1
 800b814:	e7d9      	b.n	800b7ca <_printf_common+0x8e>
	...

0800b818 <_printf_i>:
 800b818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	7e0f      	ldrb	r7, [r1, #24]
 800b81e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b820:	2f78      	cmp	r7, #120	; 0x78
 800b822:	4691      	mov	r9, r2
 800b824:	4680      	mov	r8, r0
 800b826:	460c      	mov	r4, r1
 800b828:	469a      	mov	sl, r3
 800b82a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b82e:	d807      	bhi.n	800b840 <_printf_i+0x28>
 800b830:	2f62      	cmp	r7, #98	; 0x62
 800b832:	d80a      	bhi.n	800b84a <_printf_i+0x32>
 800b834:	2f00      	cmp	r7, #0
 800b836:	f000 80d4 	beq.w	800b9e2 <_printf_i+0x1ca>
 800b83a:	2f58      	cmp	r7, #88	; 0x58
 800b83c:	f000 80c0 	beq.w	800b9c0 <_printf_i+0x1a8>
 800b840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b848:	e03a      	b.n	800b8c0 <_printf_i+0xa8>
 800b84a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b84e:	2b15      	cmp	r3, #21
 800b850:	d8f6      	bhi.n	800b840 <_printf_i+0x28>
 800b852:	a101      	add	r1, pc, #4	; (adr r1, 800b858 <_printf_i+0x40>)
 800b854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b858:	0800b8b1 	.word	0x0800b8b1
 800b85c:	0800b8c5 	.word	0x0800b8c5
 800b860:	0800b841 	.word	0x0800b841
 800b864:	0800b841 	.word	0x0800b841
 800b868:	0800b841 	.word	0x0800b841
 800b86c:	0800b841 	.word	0x0800b841
 800b870:	0800b8c5 	.word	0x0800b8c5
 800b874:	0800b841 	.word	0x0800b841
 800b878:	0800b841 	.word	0x0800b841
 800b87c:	0800b841 	.word	0x0800b841
 800b880:	0800b841 	.word	0x0800b841
 800b884:	0800b9c9 	.word	0x0800b9c9
 800b888:	0800b8f1 	.word	0x0800b8f1
 800b88c:	0800b983 	.word	0x0800b983
 800b890:	0800b841 	.word	0x0800b841
 800b894:	0800b841 	.word	0x0800b841
 800b898:	0800b9eb 	.word	0x0800b9eb
 800b89c:	0800b841 	.word	0x0800b841
 800b8a0:	0800b8f1 	.word	0x0800b8f1
 800b8a4:	0800b841 	.word	0x0800b841
 800b8a8:	0800b841 	.word	0x0800b841
 800b8ac:	0800b98b 	.word	0x0800b98b
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	1d1a      	adds	r2, r3, #4
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	602a      	str	r2, [r5, #0]
 800b8b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e09f      	b.n	800ba04 <_printf_i+0x1ec>
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	682b      	ldr	r3, [r5, #0]
 800b8c8:	0607      	lsls	r7, r0, #24
 800b8ca:	f103 0104 	add.w	r1, r3, #4
 800b8ce:	6029      	str	r1, [r5, #0]
 800b8d0:	d501      	bpl.n	800b8d6 <_printf_i+0xbe>
 800b8d2:	681e      	ldr	r6, [r3, #0]
 800b8d4:	e003      	b.n	800b8de <_printf_i+0xc6>
 800b8d6:	0646      	lsls	r6, r0, #25
 800b8d8:	d5fb      	bpl.n	800b8d2 <_printf_i+0xba>
 800b8da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b8de:	2e00      	cmp	r6, #0
 800b8e0:	da03      	bge.n	800b8ea <_printf_i+0xd2>
 800b8e2:	232d      	movs	r3, #45	; 0x2d
 800b8e4:	4276      	negs	r6, r6
 800b8e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8ea:	485a      	ldr	r0, [pc, #360]	; (800ba54 <_printf_i+0x23c>)
 800b8ec:	230a      	movs	r3, #10
 800b8ee:	e012      	b.n	800b916 <_printf_i+0xfe>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	6820      	ldr	r0, [r4, #0]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	6029      	str	r1, [r5, #0]
 800b8f8:	0605      	lsls	r5, r0, #24
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0xe8>
 800b8fc:	681e      	ldr	r6, [r3, #0]
 800b8fe:	e002      	b.n	800b906 <_printf_i+0xee>
 800b900:	0641      	lsls	r1, r0, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0xe4>
 800b904:	881e      	ldrh	r6, [r3, #0]
 800b906:	4853      	ldr	r0, [pc, #332]	; (800ba54 <_printf_i+0x23c>)
 800b908:	2f6f      	cmp	r7, #111	; 0x6f
 800b90a:	bf0c      	ite	eq
 800b90c:	2308      	moveq	r3, #8
 800b90e:	230a      	movne	r3, #10
 800b910:	2100      	movs	r1, #0
 800b912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b916:	6865      	ldr	r5, [r4, #4]
 800b918:	60a5      	str	r5, [r4, #8]
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	bfa2      	ittt	ge
 800b91e:	6821      	ldrge	r1, [r4, #0]
 800b920:	f021 0104 	bicge.w	r1, r1, #4
 800b924:	6021      	strge	r1, [r4, #0]
 800b926:	b90e      	cbnz	r6, 800b92c <_printf_i+0x114>
 800b928:	2d00      	cmp	r5, #0
 800b92a:	d04b      	beq.n	800b9c4 <_printf_i+0x1ac>
 800b92c:	4615      	mov	r5, r2
 800b92e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b932:	fb03 6711 	mls	r7, r3, r1, r6
 800b936:	5dc7      	ldrb	r7, [r0, r7]
 800b938:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b93c:	4637      	mov	r7, r6
 800b93e:	42bb      	cmp	r3, r7
 800b940:	460e      	mov	r6, r1
 800b942:	d9f4      	bls.n	800b92e <_printf_i+0x116>
 800b944:	2b08      	cmp	r3, #8
 800b946:	d10b      	bne.n	800b960 <_printf_i+0x148>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	07de      	lsls	r6, r3, #31
 800b94c:	d508      	bpl.n	800b960 <_printf_i+0x148>
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	6861      	ldr	r1, [r4, #4]
 800b952:	4299      	cmp	r1, r3
 800b954:	bfde      	ittt	le
 800b956:	2330      	movle	r3, #48	; 0x30
 800b958:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b95c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b960:	1b52      	subs	r2, r2, r5
 800b962:	6122      	str	r2, [r4, #16]
 800b964:	f8cd a000 	str.w	sl, [sp]
 800b968:	464b      	mov	r3, r9
 800b96a:	aa03      	add	r2, sp, #12
 800b96c:	4621      	mov	r1, r4
 800b96e:	4640      	mov	r0, r8
 800b970:	f7ff fee4 	bl	800b73c <_printf_common>
 800b974:	3001      	adds	r0, #1
 800b976:	d14a      	bne.n	800ba0e <_printf_i+0x1f6>
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	b004      	add	sp, #16
 800b97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	f043 0320 	orr.w	r3, r3, #32
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	4833      	ldr	r0, [pc, #204]	; (800ba58 <_printf_i+0x240>)
 800b98c:	2778      	movs	r7, #120	; 0x78
 800b98e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	6829      	ldr	r1, [r5, #0]
 800b996:	061f      	lsls	r7, r3, #24
 800b998:	f851 6b04 	ldr.w	r6, [r1], #4
 800b99c:	d402      	bmi.n	800b9a4 <_printf_i+0x18c>
 800b99e:	065f      	lsls	r7, r3, #25
 800b9a0:	bf48      	it	mi
 800b9a2:	b2b6      	uxthmi	r6, r6
 800b9a4:	07df      	lsls	r7, r3, #31
 800b9a6:	bf48      	it	mi
 800b9a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ac:	6029      	str	r1, [r5, #0]
 800b9ae:	bf48      	it	mi
 800b9b0:	6023      	strmi	r3, [r4, #0]
 800b9b2:	b91e      	cbnz	r6, 800b9bc <_printf_i+0x1a4>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	f023 0320 	bic.w	r3, r3, #32
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	2310      	movs	r3, #16
 800b9be:	e7a7      	b.n	800b910 <_printf_i+0xf8>
 800b9c0:	4824      	ldr	r0, [pc, #144]	; (800ba54 <_printf_i+0x23c>)
 800b9c2:	e7e4      	b.n	800b98e <_printf_i+0x176>
 800b9c4:	4615      	mov	r5, r2
 800b9c6:	e7bd      	b.n	800b944 <_printf_i+0x12c>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	6826      	ldr	r6, [r4, #0]
 800b9cc:	6961      	ldr	r1, [r4, #20]
 800b9ce:	1d18      	adds	r0, r3, #4
 800b9d0:	6028      	str	r0, [r5, #0]
 800b9d2:	0635      	lsls	r5, r6, #24
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	d501      	bpl.n	800b9dc <_printf_i+0x1c4>
 800b9d8:	6019      	str	r1, [r3, #0]
 800b9da:	e002      	b.n	800b9e2 <_printf_i+0x1ca>
 800b9dc:	0670      	lsls	r0, r6, #25
 800b9de:	d5fb      	bpl.n	800b9d8 <_printf_i+0x1c0>
 800b9e0:	8019      	strh	r1, [r3, #0]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	6123      	str	r3, [r4, #16]
 800b9e6:	4615      	mov	r5, r2
 800b9e8:	e7bc      	b.n	800b964 <_printf_i+0x14c>
 800b9ea:	682b      	ldr	r3, [r5, #0]
 800b9ec:	1d1a      	adds	r2, r3, #4
 800b9ee:	602a      	str	r2, [r5, #0]
 800b9f0:	681d      	ldr	r5, [r3, #0]
 800b9f2:	6862      	ldr	r2, [r4, #4]
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f7f4 fbfa 	bl	80001f0 <memchr>
 800b9fc:	b108      	cbz	r0, 800ba02 <_printf_i+0x1ea>
 800b9fe:	1b40      	subs	r0, r0, r5
 800ba00:	6060      	str	r0, [r4, #4]
 800ba02:	6863      	ldr	r3, [r4, #4]
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	2300      	movs	r3, #0
 800ba08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba0c:	e7aa      	b.n	800b964 <_printf_i+0x14c>
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	462a      	mov	r2, r5
 800ba12:	4649      	mov	r1, r9
 800ba14:	4640      	mov	r0, r8
 800ba16:	47d0      	blx	sl
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d0ad      	beq.n	800b978 <_printf_i+0x160>
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	079b      	lsls	r3, r3, #30
 800ba20:	d413      	bmi.n	800ba4a <_printf_i+0x232>
 800ba22:	68e0      	ldr	r0, [r4, #12]
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	4298      	cmp	r0, r3
 800ba28:	bfb8      	it	lt
 800ba2a:	4618      	movlt	r0, r3
 800ba2c:	e7a6      	b.n	800b97c <_printf_i+0x164>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4632      	mov	r2, r6
 800ba32:	4649      	mov	r1, r9
 800ba34:	4640      	mov	r0, r8
 800ba36:	47d0      	blx	sl
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d09d      	beq.n	800b978 <_printf_i+0x160>
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	68e3      	ldr	r3, [r4, #12]
 800ba40:	9903      	ldr	r1, [sp, #12]
 800ba42:	1a5b      	subs	r3, r3, r1
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dcf2      	bgt.n	800ba2e <_printf_i+0x216>
 800ba48:	e7eb      	b.n	800ba22 <_printf_i+0x20a>
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	f104 0619 	add.w	r6, r4, #25
 800ba50:	e7f5      	b.n	800ba3e <_printf_i+0x226>
 800ba52:	bf00      	nop
 800ba54:	0801255d 	.word	0x0801255d
 800ba58:	0801256e 	.word	0x0801256e

0800ba5c <_scanf_float>:
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	b087      	sub	sp, #28
 800ba62:	4617      	mov	r7, r2
 800ba64:	9303      	str	r3, [sp, #12]
 800ba66:	688b      	ldr	r3, [r1, #8]
 800ba68:	1e5a      	subs	r2, r3, #1
 800ba6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba6e:	bf83      	ittte	hi
 800ba70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba74:	195b      	addhi	r3, r3, r5
 800ba76:	9302      	strhi	r3, [sp, #8]
 800ba78:	2300      	movls	r3, #0
 800ba7a:	bf86      	itte	hi
 800ba7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba80:	608b      	strhi	r3, [r1, #8]
 800ba82:	9302      	strls	r3, [sp, #8]
 800ba84:	680b      	ldr	r3, [r1, #0]
 800ba86:	468b      	mov	fp, r1
 800ba88:	2500      	movs	r5, #0
 800ba8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ba8e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ba92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba96:	4680      	mov	r8, r0
 800ba98:	460c      	mov	r4, r1
 800ba9a:	465e      	mov	r6, fp
 800ba9c:	46aa      	mov	sl, r5
 800ba9e:	46a9      	mov	r9, r5
 800baa0:	9501      	str	r5, [sp, #4]
 800baa2:	68a2      	ldr	r2, [r4, #8]
 800baa4:	b152      	cbz	r2, 800babc <_scanf_float+0x60>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b4e      	cmp	r3, #78	; 0x4e
 800baac:	d864      	bhi.n	800bb78 <_scanf_float+0x11c>
 800baae:	2b40      	cmp	r3, #64	; 0x40
 800bab0:	d83c      	bhi.n	800bb2c <_scanf_float+0xd0>
 800bab2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bab6:	b2c8      	uxtb	r0, r1
 800bab8:	280e      	cmp	r0, #14
 800baba:	d93a      	bls.n	800bb32 <_scanf_float+0xd6>
 800babc:	f1b9 0f00 	cmp.w	r9, #0
 800bac0:	d003      	beq.n	800baca <_scanf_float+0x6e>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bace:	f1ba 0f01 	cmp.w	sl, #1
 800bad2:	f200 8113 	bhi.w	800bcfc <_scanf_float+0x2a0>
 800bad6:	455e      	cmp	r6, fp
 800bad8:	f200 8105 	bhi.w	800bce6 <_scanf_float+0x28a>
 800badc:	2501      	movs	r5, #1
 800bade:	4628      	mov	r0, r5
 800bae0:	b007      	add	sp, #28
 800bae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800baea:	2a0d      	cmp	r2, #13
 800baec:	d8e6      	bhi.n	800babc <_scanf_float+0x60>
 800baee:	a101      	add	r1, pc, #4	; (adr r1, 800baf4 <_scanf_float+0x98>)
 800baf0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800baf4:	0800bc33 	.word	0x0800bc33
 800baf8:	0800babd 	.word	0x0800babd
 800bafc:	0800babd 	.word	0x0800babd
 800bb00:	0800babd 	.word	0x0800babd
 800bb04:	0800bc93 	.word	0x0800bc93
 800bb08:	0800bc6b 	.word	0x0800bc6b
 800bb0c:	0800babd 	.word	0x0800babd
 800bb10:	0800babd 	.word	0x0800babd
 800bb14:	0800bc41 	.word	0x0800bc41
 800bb18:	0800babd 	.word	0x0800babd
 800bb1c:	0800babd 	.word	0x0800babd
 800bb20:	0800babd 	.word	0x0800babd
 800bb24:	0800babd 	.word	0x0800babd
 800bb28:	0800bbf9 	.word	0x0800bbf9
 800bb2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bb30:	e7db      	b.n	800baea <_scanf_float+0x8e>
 800bb32:	290e      	cmp	r1, #14
 800bb34:	d8c2      	bhi.n	800babc <_scanf_float+0x60>
 800bb36:	a001      	add	r0, pc, #4	; (adr r0, 800bb3c <_scanf_float+0xe0>)
 800bb38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb3c:	0800bbeb 	.word	0x0800bbeb
 800bb40:	0800babd 	.word	0x0800babd
 800bb44:	0800bbeb 	.word	0x0800bbeb
 800bb48:	0800bc7f 	.word	0x0800bc7f
 800bb4c:	0800babd 	.word	0x0800babd
 800bb50:	0800bb99 	.word	0x0800bb99
 800bb54:	0800bbd5 	.word	0x0800bbd5
 800bb58:	0800bbd5 	.word	0x0800bbd5
 800bb5c:	0800bbd5 	.word	0x0800bbd5
 800bb60:	0800bbd5 	.word	0x0800bbd5
 800bb64:	0800bbd5 	.word	0x0800bbd5
 800bb68:	0800bbd5 	.word	0x0800bbd5
 800bb6c:	0800bbd5 	.word	0x0800bbd5
 800bb70:	0800bbd5 	.word	0x0800bbd5
 800bb74:	0800bbd5 	.word	0x0800bbd5
 800bb78:	2b6e      	cmp	r3, #110	; 0x6e
 800bb7a:	d809      	bhi.n	800bb90 <_scanf_float+0x134>
 800bb7c:	2b60      	cmp	r3, #96	; 0x60
 800bb7e:	d8b2      	bhi.n	800bae6 <_scanf_float+0x8a>
 800bb80:	2b54      	cmp	r3, #84	; 0x54
 800bb82:	d077      	beq.n	800bc74 <_scanf_float+0x218>
 800bb84:	2b59      	cmp	r3, #89	; 0x59
 800bb86:	d199      	bne.n	800babc <_scanf_float+0x60>
 800bb88:	2d07      	cmp	r5, #7
 800bb8a:	d197      	bne.n	800babc <_scanf_float+0x60>
 800bb8c:	2508      	movs	r5, #8
 800bb8e:	e029      	b.n	800bbe4 <_scanf_float+0x188>
 800bb90:	2b74      	cmp	r3, #116	; 0x74
 800bb92:	d06f      	beq.n	800bc74 <_scanf_float+0x218>
 800bb94:	2b79      	cmp	r3, #121	; 0x79
 800bb96:	e7f6      	b.n	800bb86 <_scanf_float+0x12a>
 800bb98:	6821      	ldr	r1, [r4, #0]
 800bb9a:	05c8      	lsls	r0, r1, #23
 800bb9c:	d51a      	bpl.n	800bbd4 <_scanf_float+0x178>
 800bb9e:	9b02      	ldr	r3, [sp, #8]
 800bba0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bba4:	6021      	str	r1, [r4, #0]
 800bba6:	f109 0901 	add.w	r9, r9, #1
 800bbaa:	b11b      	cbz	r3, 800bbb4 <_scanf_float+0x158>
 800bbac:	3b01      	subs	r3, #1
 800bbae:	3201      	adds	r2, #1
 800bbb0:	9302      	str	r3, [sp, #8]
 800bbb2:	60a2      	str	r2, [r4, #8]
 800bbb4:	68a3      	ldr	r3, [r4, #8]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	60a3      	str	r3, [r4, #8]
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	6123      	str	r3, [r4, #16]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	f340 8084 	ble.w	800bcd4 <_scanf_float+0x278>
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	603b      	str	r3, [r7, #0]
 800bbd2:	e766      	b.n	800baa2 <_scanf_float+0x46>
 800bbd4:	eb1a 0f05 	cmn.w	sl, r5
 800bbd8:	f47f af70 	bne.w	800babc <_scanf_float+0x60>
 800bbdc:	6822      	ldr	r2, [r4, #0]
 800bbde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bbe2:	6022      	str	r2, [r4, #0]
 800bbe4:	f806 3b01 	strb.w	r3, [r6], #1
 800bbe8:	e7e4      	b.n	800bbb4 <_scanf_float+0x158>
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	0610      	lsls	r0, r2, #24
 800bbee:	f57f af65 	bpl.w	800babc <_scanf_float+0x60>
 800bbf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbf6:	e7f4      	b.n	800bbe2 <_scanf_float+0x186>
 800bbf8:	f1ba 0f00 	cmp.w	sl, #0
 800bbfc:	d10e      	bne.n	800bc1c <_scanf_float+0x1c0>
 800bbfe:	f1b9 0f00 	cmp.w	r9, #0
 800bc02:	d10e      	bne.n	800bc22 <_scanf_float+0x1c6>
 800bc04:	6822      	ldr	r2, [r4, #0]
 800bc06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc0e:	d108      	bne.n	800bc22 <_scanf_float+0x1c6>
 800bc10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc14:	6022      	str	r2, [r4, #0]
 800bc16:	f04f 0a01 	mov.w	sl, #1
 800bc1a:	e7e3      	b.n	800bbe4 <_scanf_float+0x188>
 800bc1c:	f1ba 0f02 	cmp.w	sl, #2
 800bc20:	d055      	beq.n	800bcce <_scanf_float+0x272>
 800bc22:	2d01      	cmp	r5, #1
 800bc24:	d002      	beq.n	800bc2c <_scanf_float+0x1d0>
 800bc26:	2d04      	cmp	r5, #4
 800bc28:	f47f af48 	bne.w	800babc <_scanf_float+0x60>
 800bc2c:	3501      	adds	r5, #1
 800bc2e:	b2ed      	uxtb	r5, r5
 800bc30:	e7d8      	b.n	800bbe4 <_scanf_float+0x188>
 800bc32:	f1ba 0f01 	cmp.w	sl, #1
 800bc36:	f47f af41 	bne.w	800babc <_scanf_float+0x60>
 800bc3a:	f04f 0a02 	mov.w	sl, #2
 800bc3e:	e7d1      	b.n	800bbe4 <_scanf_float+0x188>
 800bc40:	b97d      	cbnz	r5, 800bc62 <_scanf_float+0x206>
 800bc42:	f1b9 0f00 	cmp.w	r9, #0
 800bc46:	f47f af3c 	bne.w	800bac2 <_scanf_float+0x66>
 800bc4a:	6822      	ldr	r2, [r4, #0]
 800bc4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc54:	f47f af39 	bne.w	800baca <_scanf_float+0x6e>
 800bc58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc5c:	6022      	str	r2, [r4, #0]
 800bc5e:	2501      	movs	r5, #1
 800bc60:	e7c0      	b.n	800bbe4 <_scanf_float+0x188>
 800bc62:	2d03      	cmp	r5, #3
 800bc64:	d0e2      	beq.n	800bc2c <_scanf_float+0x1d0>
 800bc66:	2d05      	cmp	r5, #5
 800bc68:	e7de      	b.n	800bc28 <_scanf_float+0x1cc>
 800bc6a:	2d02      	cmp	r5, #2
 800bc6c:	f47f af26 	bne.w	800babc <_scanf_float+0x60>
 800bc70:	2503      	movs	r5, #3
 800bc72:	e7b7      	b.n	800bbe4 <_scanf_float+0x188>
 800bc74:	2d06      	cmp	r5, #6
 800bc76:	f47f af21 	bne.w	800babc <_scanf_float+0x60>
 800bc7a:	2507      	movs	r5, #7
 800bc7c:	e7b2      	b.n	800bbe4 <_scanf_float+0x188>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	0591      	lsls	r1, r2, #22
 800bc82:	f57f af1b 	bpl.w	800babc <_scanf_float+0x60>
 800bc86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc90:	e7a8      	b.n	800bbe4 <_scanf_float+0x188>
 800bc92:	6822      	ldr	r2, [r4, #0]
 800bc94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bc98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bc9c:	d006      	beq.n	800bcac <_scanf_float+0x250>
 800bc9e:	0550      	lsls	r0, r2, #21
 800bca0:	f57f af0c 	bpl.w	800babc <_scanf_float+0x60>
 800bca4:	f1b9 0f00 	cmp.w	r9, #0
 800bca8:	f43f af0f 	beq.w	800baca <_scanf_float+0x6e>
 800bcac:	0591      	lsls	r1, r2, #22
 800bcae:	bf58      	it	pl
 800bcb0:	9901      	ldrpl	r1, [sp, #4]
 800bcb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bcb6:	bf58      	it	pl
 800bcb8:	eba9 0101 	subpl.w	r1, r9, r1
 800bcbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bcc0:	bf58      	it	pl
 800bcc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bcc6:	6022      	str	r2, [r4, #0]
 800bcc8:	f04f 0900 	mov.w	r9, #0
 800bccc:	e78a      	b.n	800bbe4 <_scanf_float+0x188>
 800bcce:	f04f 0a03 	mov.w	sl, #3
 800bcd2:	e787      	b.n	800bbe4 <_scanf_float+0x188>
 800bcd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcd8:	4639      	mov	r1, r7
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4798      	blx	r3
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f43f aedf 	beq.w	800baa2 <_scanf_float+0x46>
 800bce4:	e6ea      	b.n	800babc <_scanf_float+0x60>
 800bce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcee:	463a      	mov	r2, r7
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4798      	blx	r3
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	e6ec      	b.n	800bad6 <_scanf_float+0x7a>
 800bcfc:	1e6b      	subs	r3, r5, #1
 800bcfe:	2b06      	cmp	r3, #6
 800bd00:	d825      	bhi.n	800bd4e <_scanf_float+0x2f2>
 800bd02:	2d02      	cmp	r5, #2
 800bd04:	d836      	bhi.n	800bd74 <_scanf_float+0x318>
 800bd06:	455e      	cmp	r6, fp
 800bd08:	f67f aee8 	bls.w	800badc <_scanf_float+0x80>
 800bd0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd14:	463a      	mov	r2, r7
 800bd16:	4640      	mov	r0, r8
 800bd18:	4798      	blx	r3
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	e7f1      	b.n	800bd06 <_scanf_float+0x2aa>
 800bd22:	9802      	ldr	r0, [sp, #8]
 800bd24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bd2c:	9002      	str	r0, [sp, #8]
 800bd2e:	463a      	mov	r2, r7
 800bd30:	4640      	mov	r0, r8
 800bd32:	4798      	blx	r3
 800bd34:	6923      	ldr	r3, [r4, #16]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd3e:	fa5f fa8a 	uxtb.w	sl, sl
 800bd42:	f1ba 0f02 	cmp.w	sl, #2
 800bd46:	d1ec      	bne.n	800bd22 <_scanf_float+0x2c6>
 800bd48:	3d03      	subs	r5, #3
 800bd4a:	b2ed      	uxtb	r5, r5
 800bd4c:	1b76      	subs	r6, r6, r5
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	05da      	lsls	r2, r3, #23
 800bd52:	d52f      	bpl.n	800bdb4 <_scanf_float+0x358>
 800bd54:	055b      	lsls	r3, r3, #21
 800bd56:	d510      	bpl.n	800bd7a <_scanf_float+0x31e>
 800bd58:	455e      	cmp	r6, fp
 800bd5a:	f67f aebf 	bls.w	800badc <_scanf_float+0x80>
 800bd5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd66:	463a      	mov	r2, r7
 800bd68:	4640      	mov	r0, r8
 800bd6a:	4798      	blx	r3
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	6123      	str	r3, [r4, #16]
 800bd72:	e7f1      	b.n	800bd58 <_scanf_float+0x2fc>
 800bd74:	46aa      	mov	sl, r5
 800bd76:	9602      	str	r6, [sp, #8]
 800bd78:	e7df      	b.n	800bd3a <_scanf_float+0x2de>
 800bd7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd7e:	6923      	ldr	r3, [r4, #16]
 800bd80:	2965      	cmp	r1, #101	; 0x65
 800bd82:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd86:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd8a:	6123      	str	r3, [r4, #16]
 800bd8c:	d00c      	beq.n	800bda8 <_scanf_float+0x34c>
 800bd8e:	2945      	cmp	r1, #69	; 0x45
 800bd90:	d00a      	beq.n	800bda8 <_scanf_float+0x34c>
 800bd92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd96:	463a      	mov	r2, r7
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4798      	blx	r3
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	1eb5      	subs	r5, r6, #2
 800bda6:	6123      	str	r3, [r4, #16]
 800bda8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdac:	463a      	mov	r2, r7
 800bdae:	4640      	mov	r0, r8
 800bdb0:	4798      	blx	r3
 800bdb2:	462e      	mov	r6, r5
 800bdb4:	6825      	ldr	r5, [r4, #0]
 800bdb6:	f015 0510 	ands.w	r5, r5, #16
 800bdba:	d158      	bne.n	800be6e <_scanf_float+0x412>
 800bdbc:	7035      	strb	r5, [r6, #0]
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bdc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdc8:	d11c      	bne.n	800be04 <_scanf_float+0x3a8>
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	454b      	cmp	r3, r9
 800bdce:	eba3 0209 	sub.w	r2, r3, r9
 800bdd2:	d124      	bne.n	800be1e <_scanf_float+0x3c2>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	4659      	mov	r1, fp
 800bdd8:	4640      	mov	r0, r8
 800bdda:	f7ff f985 	bl	800b0e8 <_strtod_r>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	6821      	ldr	r1, [r4, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f011 0f02 	tst.w	r1, #2
 800bde8:	ec57 6b10 	vmov	r6, r7, d0
 800bdec:	f103 0204 	add.w	r2, r3, #4
 800bdf0:	d020      	beq.n	800be34 <_scanf_float+0x3d8>
 800bdf2:	9903      	ldr	r1, [sp, #12]
 800bdf4:	600a      	str	r2, [r1, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	e9c3 6700 	strd	r6, r7, [r3]
 800bdfc:	68e3      	ldr	r3, [r4, #12]
 800bdfe:	3301      	adds	r3, #1
 800be00:	60e3      	str	r3, [r4, #12]
 800be02:	e66c      	b.n	800bade <_scanf_float+0x82>
 800be04:	9b04      	ldr	r3, [sp, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0e4      	beq.n	800bdd4 <_scanf_float+0x378>
 800be0a:	9905      	ldr	r1, [sp, #20]
 800be0c:	230a      	movs	r3, #10
 800be0e:	462a      	mov	r2, r5
 800be10:	3101      	adds	r1, #1
 800be12:	4640      	mov	r0, r8
 800be14:	f002 fad8 	bl	800e3c8 <_strtol_r>
 800be18:	9b04      	ldr	r3, [sp, #16]
 800be1a:	9e05      	ldr	r6, [sp, #20]
 800be1c:	1ac2      	subs	r2, r0, r3
 800be1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800be22:	429e      	cmp	r6, r3
 800be24:	bf28      	it	cs
 800be26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800be2a:	4912      	ldr	r1, [pc, #72]	; (800be74 <_scanf_float+0x418>)
 800be2c:	4630      	mov	r0, r6
 800be2e:	f000 f8d5 	bl	800bfdc <siprintf>
 800be32:	e7cf      	b.n	800bdd4 <_scanf_float+0x378>
 800be34:	f011 0f04 	tst.w	r1, #4
 800be38:	9903      	ldr	r1, [sp, #12]
 800be3a:	600a      	str	r2, [r1, #0]
 800be3c:	d1db      	bne.n	800bdf6 <_scanf_float+0x39a>
 800be3e:	f8d3 8000 	ldr.w	r8, [r3]
 800be42:	ee10 2a10 	vmov	r2, s0
 800be46:	ee10 0a10 	vmov	r0, s0
 800be4a:	463b      	mov	r3, r7
 800be4c:	4639      	mov	r1, r7
 800be4e:	f7f4 fe7d 	bl	8000b4c <__aeabi_dcmpun>
 800be52:	b128      	cbz	r0, 800be60 <_scanf_float+0x404>
 800be54:	4808      	ldr	r0, [pc, #32]	; (800be78 <_scanf_float+0x41c>)
 800be56:	f000 fa7f 	bl	800c358 <nanf>
 800be5a:	ed88 0a00 	vstr	s0, [r8]
 800be5e:	e7cd      	b.n	800bdfc <_scanf_float+0x3a0>
 800be60:	4630      	mov	r0, r6
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fed0 	bl	8000c08 <__aeabi_d2f>
 800be68:	f8c8 0000 	str.w	r0, [r8]
 800be6c:	e7c6      	b.n	800bdfc <_scanf_float+0x3a0>
 800be6e:	2500      	movs	r5, #0
 800be70:	e635      	b.n	800bade <_scanf_float+0x82>
 800be72:	bf00      	nop
 800be74:	0801257f 	.word	0x0801257f
 800be78:	08012638 	.word	0x08012638

0800be7c <std>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b510      	push	{r4, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	e9c0 3300 	strd	r3, r3, [r0]
 800be86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be8a:	6083      	str	r3, [r0, #8]
 800be8c:	8181      	strh	r1, [r0, #12]
 800be8e:	6643      	str	r3, [r0, #100]	; 0x64
 800be90:	81c2      	strh	r2, [r0, #14]
 800be92:	6183      	str	r3, [r0, #24]
 800be94:	4619      	mov	r1, r3
 800be96:	2208      	movs	r2, #8
 800be98:	305c      	adds	r0, #92	; 0x5c
 800be9a:	f000 f930 	bl	800c0fe <memset>
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <std+0x38>)
 800bea0:	6263      	str	r3, [r4, #36]	; 0x24
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <std+0x3c>)
 800bea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x40>)
 800bea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x44>)
 800beac:	6224      	str	r4, [r4, #32]
 800beae:	6323      	str	r3, [r4, #48]	; 0x30
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	0800c075 	.word	0x0800c075
 800beb8:	0800c09b 	.word	0x0800c09b
 800bebc:	0800c0d3 	.word	0x0800c0d3
 800bec0:	0800c0f7 	.word	0x0800c0f7

0800bec4 <stdio_exit_handler>:
 800bec4:	4a02      	ldr	r2, [pc, #8]	; (800bed0 <stdio_exit_handler+0xc>)
 800bec6:	4903      	ldr	r1, [pc, #12]	; (800bed4 <stdio_exit_handler+0x10>)
 800bec8:	4803      	ldr	r0, [pc, #12]	; (800bed8 <stdio_exit_handler+0x14>)
 800beca:	f000 b869 	b.w	800bfa0 <_fwalk_sglue>
 800bece:	bf00      	nop
 800bed0:	20000034 	.word	0x20000034
 800bed4:	0800ede5 	.word	0x0800ede5
 800bed8:	200001ac 	.word	0x200001ac

0800bedc <cleanup_stdio>:
 800bedc:	6841      	ldr	r1, [r0, #4]
 800bede:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <cleanup_stdio+0x34>)
 800bee0:	4299      	cmp	r1, r3
 800bee2:	b510      	push	{r4, lr}
 800bee4:	4604      	mov	r4, r0
 800bee6:	d001      	beq.n	800beec <cleanup_stdio+0x10>
 800bee8:	f002 ff7c 	bl	800ede4 <_fflush_r>
 800beec:	68a1      	ldr	r1, [r4, #8]
 800beee:	4b09      	ldr	r3, [pc, #36]	; (800bf14 <cleanup_stdio+0x38>)
 800bef0:	4299      	cmp	r1, r3
 800bef2:	d002      	beq.n	800befa <cleanup_stdio+0x1e>
 800bef4:	4620      	mov	r0, r4
 800bef6:	f002 ff75 	bl	800ede4 <_fflush_r>
 800befa:	68e1      	ldr	r1, [r4, #12]
 800befc:	4b06      	ldr	r3, [pc, #24]	; (800bf18 <cleanup_stdio+0x3c>)
 800befe:	4299      	cmp	r1, r3
 800bf00:	d004      	beq.n	800bf0c <cleanup_stdio+0x30>
 800bf02:	4620      	mov	r0, r4
 800bf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf08:	f002 bf6c 	b.w	800ede4 <_fflush_r>
 800bf0c:	bd10      	pop	{r4, pc}
 800bf0e:	bf00      	nop
 800bf10:	2000097c 	.word	0x2000097c
 800bf14:	200009e4 	.word	0x200009e4
 800bf18:	20000a4c 	.word	0x20000a4c

0800bf1c <global_stdio_init.part.0>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <global_stdio_init.part.0+0x30>)
 800bf20:	4c0b      	ldr	r4, [pc, #44]	; (800bf50 <global_stdio_init.part.0+0x34>)
 800bf22:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <global_stdio_init.part.0+0x38>)
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	4620      	mov	r0, r4
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2104      	movs	r1, #4
 800bf2c:	f7ff ffa6 	bl	800be7c <std>
 800bf30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf34:	2201      	movs	r2, #1
 800bf36:	2109      	movs	r1, #9
 800bf38:	f7ff ffa0 	bl	800be7c <std>
 800bf3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf40:	2202      	movs	r2, #2
 800bf42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf46:	2112      	movs	r1, #18
 800bf48:	f7ff bf98 	b.w	800be7c <std>
 800bf4c:	20000ab4 	.word	0x20000ab4
 800bf50:	2000097c 	.word	0x2000097c
 800bf54:	0800bec5 	.word	0x0800bec5

0800bf58 <__sfp_lock_acquire>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sfp_lock_acquire+0x8>)
 800bf5a:	f000 b9db 	b.w	800c314 <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20000abd 	.word	0x20000abd

0800bf64 <__sfp_lock_release>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sfp_lock_release+0x8>)
 800bf66:	f000 b9d6 	b.w	800c316 <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20000abd 	.word	0x20000abd

0800bf70 <__sinit>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	4604      	mov	r4, r0
 800bf74:	f7ff fff0 	bl	800bf58 <__sfp_lock_acquire>
 800bf78:	6a23      	ldr	r3, [r4, #32]
 800bf7a:	b11b      	cbz	r3, 800bf84 <__sinit+0x14>
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f7ff bff0 	b.w	800bf64 <__sfp_lock_release>
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <__sinit+0x28>)
 800bf86:	6223      	str	r3, [r4, #32]
 800bf88:	4b04      	ldr	r3, [pc, #16]	; (800bf9c <__sinit+0x2c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1f5      	bne.n	800bf7c <__sinit+0xc>
 800bf90:	f7ff ffc4 	bl	800bf1c <global_stdio_init.part.0>
 800bf94:	e7f2      	b.n	800bf7c <__sinit+0xc>
 800bf96:	bf00      	nop
 800bf98:	0800bedd 	.word	0x0800bedd
 800bf9c:	20000ab4 	.word	0x20000ab4

0800bfa0 <_fwalk_sglue>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	4688      	mov	r8, r1
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	2600      	movs	r6, #0
 800bfac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfb0:	f1b9 0901 	subs.w	r9, r9, #1
 800bfb4:	d505      	bpl.n	800bfc2 <_fwalk_sglue+0x22>
 800bfb6:	6824      	ldr	r4, [r4, #0]
 800bfb8:	2c00      	cmp	r4, #0
 800bfba:	d1f7      	bne.n	800bfac <_fwalk_sglue+0xc>
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d907      	bls.n	800bfd8 <_fwalk_sglue+0x38>
 800bfc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	d003      	beq.n	800bfd8 <_fwalk_sglue+0x38>
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	47c0      	blx	r8
 800bfd6:	4306      	orrs	r6, r0
 800bfd8:	3568      	adds	r5, #104	; 0x68
 800bfda:	e7e9      	b.n	800bfb0 <_fwalk_sglue+0x10>

0800bfdc <siprintf>:
 800bfdc:	b40e      	push	{r1, r2, r3}
 800bfde:	b500      	push	{lr}
 800bfe0:	b09c      	sub	sp, #112	; 0x70
 800bfe2:	ab1d      	add	r3, sp, #116	; 0x74
 800bfe4:	9002      	str	r0, [sp, #8]
 800bfe6:	9006      	str	r0, [sp, #24]
 800bfe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfec:	4809      	ldr	r0, [pc, #36]	; (800c014 <siprintf+0x38>)
 800bfee:	9107      	str	r1, [sp, #28]
 800bff0:	9104      	str	r1, [sp, #16]
 800bff2:	4909      	ldr	r1, [pc, #36]	; (800c018 <siprintf+0x3c>)
 800bff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff8:	9105      	str	r1, [sp, #20]
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	a902      	add	r1, sp, #8
 800c000:	f002 fa4c 	bl	800e49c <_svfiprintf_r>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	2200      	movs	r2, #0
 800c008:	701a      	strb	r2, [r3, #0]
 800c00a:	b01c      	add	sp, #112	; 0x70
 800c00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c010:	b003      	add	sp, #12
 800c012:	4770      	bx	lr
 800c014:	200001f8 	.word	0x200001f8
 800c018:	ffff0208 	.word	0xffff0208

0800c01c <siscanf>:
 800c01c:	b40e      	push	{r1, r2, r3}
 800c01e:	b510      	push	{r4, lr}
 800c020:	b09f      	sub	sp, #124	; 0x7c
 800c022:	ac21      	add	r4, sp, #132	; 0x84
 800c024:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c028:	f854 2b04 	ldr.w	r2, [r4], #4
 800c02c:	9201      	str	r2, [sp, #4]
 800c02e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c032:	9004      	str	r0, [sp, #16]
 800c034:	9008      	str	r0, [sp, #32]
 800c036:	f7f4 f92b 	bl	8000290 <strlen>
 800c03a:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <siscanf+0x50>)
 800c03c:	9005      	str	r0, [sp, #20]
 800c03e:	9009      	str	r0, [sp, #36]	; 0x24
 800c040:	930d      	str	r3, [sp, #52]	; 0x34
 800c042:	480b      	ldr	r0, [pc, #44]	; (800c070 <siscanf+0x54>)
 800c044:	9a01      	ldr	r2, [sp, #4]
 800c046:	6800      	ldr	r0, [r0, #0]
 800c048:	9403      	str	r4, [sp, #12]
 800c04a:	2300      	movs	r3, #0
 800c04c:	9311      	str	r3, [sp, #68]	; 0x44
 800c04e:	9316      	str	r3, [sp, #88]	; 0x58
 800c050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c054:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c058:	a904      	add	r1, sp, #16
 800c05a:	4623      	mov	r3, r4
 800c05c:	f002 fb76 	bl	800e74c <__ssvfiscanf_r>
 800c060:	b01f      	add	sp, #124	; 0x7c
 800c062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c066:	b003      	add	sp, #12
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	0800c097 	.word	0x0800c097
 800c070:	200001f8 	.word	0x200001f8

0800c074 <__sread>:
 800c074:	b510      	push	{r4, lr}
 800c076:	460c      	mov	r4, r1
 800c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07c:	f000 f8fc 	bl	800c278 <_read_r>
 800c080:	2800      	cmp	r0, #0
 800c082:	bfab      	itete	ge
 800c084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c086:	89a3      	ldrhlt	r3, [r4, #12]
 800c088:	181b      	addge	r3, r3, r0
 800c08a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c08e:	bfac      	ite	ge
 800c090:	6563      	strge	r3, [r4, #84]	; 0x54
 800c092:	81a3      	strhlt	r3, [r4, #12]
 800c094:	bd10      	pop	{r4, pc}

0800c096 <__seofread>:
 800c096:	2000      	movs	r0, #0
 800c098:	4770      	bx	lr

0800c09a <__swrite>:
 800c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	461f      	mov	r7, r3
 800c0a0:	898b      	ldrh	r3, [r1, #12]
 800c0a2:	05db      	lsls	r3, r3, #23
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	d505      	bpl.n	800c0b8 <__swrite+0x1e>
 800c0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f000 f8ce 	bl	800c254 <_lseek_r>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ce:	f000 b8e5 	b.w	800c29c <_write_r>

0800c0d2 <__sseek>:
 800c0d2:	b510      	push	{r4, lr}
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0da:	f000 f8bb 	bl	800c254 <_lseek_r>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	bf15      	itete	ne
 800c0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ee:	81a3      	strheq	r3, [r4, #12]
 800c0f0:	bf18      	it	ne
 800c0f2:	81a3      	strhne	r3, [r4, #12]
 800c0f4:	bd10      	pop	{r4, pc}

0800c0f6 <__sclose>:
 800c0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fa:	f000 b89b 	b.w	800c234 <_close_r>

0800c0fe <memset>:
 800c0fe:	4402      	add	r2, r0
 800c100:	4603      	mov	r3, r0
 800c102:	4293      	cmp	r3, r2
 800c104:	d100      	bne.n	800c108 <memset+0xa>
 800c106:	4770      	bx	lr
 800c108:	f803 1b01 	strb.w	r1, [r3], #1
 800c10c:	e7f9      	b.n	800c102 <memset+0x4>

0800c10e <strchr>:
 800c10e:	b2c9      	uxtb	r1, r1
 800c110:	4603      	mov	r3, r0
 800c112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c116:	b11a      	cbz	r2, 800c120 <strchr+0x12>
 800c118:	428a      	cmp	r2, r1
 800c11a:	d1f9      	bne.n	800c110 <strchr+0x2>
 800c11c:	4618      	mov	r0, r3
 800c11e:	4770      	bx	lr
 800c120:	2900      	cmp	r1, #0
 800c122:	bf18      	it	ne
 800c124:	2300      	movne	r3, #0
 800c126:	e7f9      	b.n	800c11c <strchr+0xe>

0800c128 <strncmp>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	b16a      	cbz	r2, 800c148 <strncmp+0x20>
 800c12c:	3901      	subs	r1, #1
 800c12e:	1884      	adds	r4, r0, r2
 800c130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c134:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c138:	429a      	cmp	r2, r3
 800c13a:	d103      	bne.n	800c144 <strncmp+0x1c>
 800c13c:	42a0      	cmp	r0, r4
 800c13e:	d001      	beq.n	800c144 <strncmp+0x1c>
 800c140:	2a00      	cmp	r2, #0
 800c142:	d1f5      	bne.n	800c130 <strncmp+0x8>
 800c144:	1ad0      	subs	r0, r2, r3
 800c146:	bd10      	pop	{r4, pc}
 800c148:	4610      	mov	r0, r2
 800c14a:	e7fc      	b.n	800c146 <strncmp+0x1e>

0800c14c <strncpy>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	3901      	subs	r1, #1
 800c150:	4603      	mov	r3, r0
 800c152:	b132      	cbz	r2, 800c162 <strncpy+0x16>
 800c154:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c158:	f803 4b01 	strb.w	r4, [r3], #1
 800c15c:	3a01      	subs	r2, #1
 800c15e:	2c00      	cmp	r4, #0
 800c160:	d1f7      	bne.n	800c152 <strncpy+0x6>
 800c162:	441a      	add	r2, r3
 800c164:	2100      	movs	r1, #0
 800c166:	4293      	cmp	r3, r2
 800c168:	d100      	bne.n	800c16c <strncpy+0x20>
 800c16a:	bd10      	pop	{r4, pc}
 800c16c:	f803 1b01 	strb.w	r1, [r3], #1
 800c170:	e7f9      	b.n	800c166 <strncpy+0x1a>
	...

0800c174 <strtok>:
 800c174:	4b16      	ldr	r3, [pc, #88]	; (800c1d0 <strtok+0x5c>)
 800c176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c178:	681e      	ldr	r6, [r3, #0]
 800c17a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c17c:	4605      	mov	r5, r0
 800c17e:	b9fc      	cbnz	r4, 800c1c0 <strtok+0x4c>
 800c180:	2050      	movs	r0, #80	; 0x50
 800c182:	9101      	str	r1, [sp, #4]
 800c184:	f001 fb2a 	bl	800d7dc <malloc>
 800c188:	9901      	ldr	r1, [sp, #4]
 800c18a:	6470      	str	r0, [r6, #68]	; 0x44
 800c18c:	4602      	mov	r2, r0
 800c18e:	b920      	cbnz	r0, 800c19a <strtok+0x26>
 800c190:	4b10      	ldr	r3, [pc, #64]	; (800c1d4 <strtok+0x60>)
 800c192:	4811      	ldr	r0, [pc, #68]	; (800c1d8 <strtok+0x64>)
 800c194:	215b      	movs	r1, #91	; 0x5b
 800c196:	f000 f8e5 	bl	800c364 <__assert_func>
 800c19a:	e9c0 4400 	strd	r4, r4, [r0]
 800c19e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c1a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c1a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c1aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c1ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c1b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c1b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c1ba:	6184      	str	r4, [r0, #24]
 800c1bc:	7704      	strb	r4, [r0, #28]
 800c1be:	6244      	str	r4, [r0, #36]	; 0x24
 800c1c0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	b002      	add	sp, #8
 800c1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1cc:	f000 b806 	b.w	800c1dc <__strtok_r>
 800c1d0:	200001f8 	.word	0x200001f8
 800c1d4:	08012584 	.word	0x08012584
 800c1d8:	0801259b 	.word	0x0801259b

0800c1dc <__strtok_r>:
 800c1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1de:	b908      	cbnz	r0, 800c1e4 <__strtok_r+0x8>
 800c1e0:	6810      	ldr	r0, [r2, #0]
 800c1e2:	b188      	cbz	r0, 800c208 <__strtok_r+0x2c>
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c1f2:	b91e      	cbnz	r6, 800c1fc <__strtok_r+0x20>
 800c1f4:	b965      	cbnz	r5, 800c210 <__strtok_r+0x34>
 800c1f6:	6015      	str	r5, [r2, #0]
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	e005      	b.n	800c208 <__strtok_r+0x2c>
 800c1fc:	42b5      	cmp	r5, r6
 800c1fe:	d1f6      	bne.n	800c1ee <__strtok_r+0x12>
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f0      	bne.n	800c1e6 <__strtok_r+0xa>
 800c204:	6014      	str	r4, [r2, #0]
 800c206:	7003      	strb	r3, [r0, #0]
 800c208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c20a:	461c      	mov	r4, r3
 800c20c:	e00c      	b.n	800c228 <__strtok_r+0x4c>
 800c20e:	b915      	cbnz	r5, 800c216 <__strtok_r+0x3a>
 800c210:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c214:	460e      	mov	r6, r1
 800c216:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c21a:	42ab      	cmp	r3, r5
 800c21c:	d1f7      	bne.n	800c20e <__strtok_r+0x32>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0f3      	beq.n	800c20a <__strtok_r+0x2e>
 800c222:	2300      	movs	r3, #0
 800c224:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c228:	6014      	str	r4, [r2, #0]
 800c22a:	e7ed      	b.n	800c208 <__strtok_r+0x2c>

0800c22c <_localeconv_r>:
 800c22c:	4800      	ldr	r0, [pc, #0]	; (800c230 <_localeconv_r+0x4>)
 800c22e:	4770      	bx	lr
 800c230:	20000130 	.word	0x20000130

0800c234 <_close_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	; (800c250 <_close_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f6 fcbb 	bl	8002bba <_close>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_close_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_close_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	20000ab8 	.word	0x20000ab8

0800c254 <_lseek_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_lseek_r+0x20>)
 800c258:	4604      	mov	r4, r0
 800c25a:	4608      	mov	r0, r1
 800c25c:	4611      	mov	r1, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	f7f6 fcd0 	bl	8002c08 <_lseek>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_lseek_r+0x1e>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_lseek_r+0x1e>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	20000ab8 	.word	0x20000ab8

0800c278 <_read_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d07      	ldr	r5, [pc, #28]	; (800c298 <_read_r+0x20>)
 800c27c:	4604      	mov	r4, r0
 800c27e:	4608      	mov	r0, r1
 800c280:	4611      	mov	r1, r2
 800c282:	2200      	movs	r2, #0
 800c284:	602a      	str	r2, [r5, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f7f6 fc5e 	bl	8002b48 <_read>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_read_r+0x1e>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_read_r+0x1e>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20000ab8 	.word	0x20000ab8

0800c29c <_write_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4d07      	ldr	r5, [pc, #28]	; (800c2bc <_write_r+0x20>)
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	602a      	str	r2, [r5, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f7f6 fc69 	bl	8002b82 <_write>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d102      	bne.n	800c2ba <_write_r+0x1e>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b103      	cbz	r3, 800c2ba <_write_r+0x1e>
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	20000ab8 	.word	0x20000ab8

0800c2c0 <__errno>:
 800c2c0:	4b01      	ldr	r3, [pc, #4]	; (800c2c8 <__errno+0x8>)
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	200001f8 	.word	0x200001f8

0800c2cc <__libc_init_array>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	4d0d      	ldr	r5, [pc, #52]	; (800c304 <__libc_init_array+0x38>)
 800c2d0:	4c0d      	ldr	r4, [pc, #52]	; (800c308 <__libc_init_array+0x3c>)
 800c2d2:	1b64      	subs	r4, r4, r5
 800c2d4:	10a4      	asrs	r4, r4, #2
 800c2d6:	2600      	movs	r6, #0
 800c2d8:	42a6      	cmp	r6, r4
 800c2da:	d109      	bne.n	800c2f0 <__libc_init_array+0x24>
 800c2dc:	4d0b      	ldr	r5, [pc, #44]	; (800c30c <__libc_init_array+0x40>)
 800c2de:	4c0c      	ldr	r4, [pc, #48]	; (800c310 <__libc_init_array+0x44>)
 800c2e0:	f004 fdcc 	bl	8010e7c <_init>
 800c2e4:	1b64      	subs	r4, r4, r5
 800c2e6:	10a4      	asrs	r4, r4, #2
 800c2e8:	2600      	movs	r6, #0
 800c2ea:	42a6      	cmp	r6, r4
 800c2ec:	d105      	bne.n	800c2fa <__libc_init_array+0x2e>
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
 800c2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2f4:	4798      	blx	r3
 800c2f6:	3601      	adds	r6, #1
 800c2f8:	e7ee      	b.n	800c2d8 <__libc_init_array+0xc>
 800c2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2fe:	4798      	blx	r3
 800c300:	3601      	adds	r6, #1
 800c302:	e7f2      	b.n	800c2ea <__libc_init_array+0x1e>
 800c304:	08012be8 	.word	0x08012be8
 800c308:	08012be8 	.word	0x08012be8
 800c30c:	08012be8 	.word	0x08012be8
 800c310:	08012bec 	.word	0x08012bec

0800c314 <__retarget_lock_acquire_recursive>:
 800c314:	4770      	bx	lr

0800c316 <__retarget_lock_release_recursive>:
 800c316:	4770      	bx	lr

0800c318 <strcpy>:
 800c318:	4603      	mov	r3, r0
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f803 2b01 	strb.w	r2, [r3], #1
 800c322:	2a00      	cmp	r2, #0
 800c324:	d1f9      	bne.n	800c31a <strcpy+0x2>
 800c326:	4770      	bx	lr

0800c328 <memcpy>:
 800c328:	440a      	add	r2, r1
 800c32a:	4291      	cmp	r1, r2
 800c32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c330:	d100      	bne.n	800c334 <memcpy+0xc>
 800c332:	4770      	bx	lr
 800c334:	b510      	push	{r4, lr}
 800c336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c33a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c33e:	4291      	cmp	r1, r2
 800c340:	d1f9      	bne.n	800c336 <memcpy+0xe>
 800c342:	bd10      	pop	{r4, pc}
 800c344:	0000      	movs	r0, r0
	...

0800c348 <nan>:
 800c348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c350 <nan+0x8>
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	00000000 	.word	0x00000000
 800c354:	7ff80000 	.word	0x7ff80000

0800c358 <nanf>:
 800c358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c360 <nanf+0x8>
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	7fc00000 	.word	0x7fc00000

0800c364 <__assert_func>:
 800c364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c366:	4614      	mov	r4, r2
 800c368:	461a      	mov	r2, r3
 800c36a:	4b09      	ldr	r3, [pc, #36]	; (800c390 <__assert_func+0x2c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4605      	mov	r5, r0
 800c370:	68d8      	ldr	r0, [r3, #12]
 800c372:	b14c      	cbz	r4, 800c388 <__assert_func+0x24>
 800c374:	4b07      	ldr	r3, [pc, #28]	; (800c394 <__assert_func+0x30>)
 800c376:	9100      	str	r1, [sp, #0]
 800c378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c37c:	4906      	ldr	r1, [pc, #24]	; (800c398 <__assert_func+0x34>)
 800c37e:	462b      	mov	r3, r5
 800c380:	f002 fd58 	bl	800ee34 <fiprintf>
 800c384:	f002 fe06 	bl	800ef94 <abort>
 800c388:	4b04      	ldr	r3, [pc, #16]	; (800c39c <__assert_func+0x38>)
 800c38a:	461c      	mov	r4, r3
 800c38c:	e7f3      	b.n	800c376 <__assert_func+0x12>
 800c38e:	bf00      	nop
 800c390:	200001f8 	.word	0x200001f8
 800c394:	080125fd 	.word	0x080125fd
 800c398:	0801260a 	.word	0x0801260a
 800c39c:	08012638 	.word	0x08012638

0800c3a0 <quorem>:
 800c3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	6903      	ldr	r3, [r0, #16]
 800c3a6:	690c      	ldr	r4, [r1, #16]
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	db7e      	blt.n	800c4ac <quorem+0x10c>
 800c3ae:	3c01      	subs	r4, #1
 800c3b0:	f101 0814 	add.w	r8, r1, #20
 800c3b4:	f100 0514 	add.w	r5, r0, #20
 800c3b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c3ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3d6:	d331      	bcc.n	800c43c <quorem+0x9c>
 800c3d8:	f04f 0e00 	mov.w	lr, #0
 800c3dc:	4640      	mov	r0, r8
 800c3de:	46ac      	mov	ip, r5
 800c3e0:	46f2      	mov	sl, lr
 800c3e2:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3e6:	b293      	uxth	r3, r2
 800c3e8:	fb06 e303 	mla	r3, r6, r3, lr
 800c3ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3f0:	0c1a      	lsrs	r2, r3, #16
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	ebaa 0303 	sub.w	r3, sl, r3
 800c3f8:	f8dc a000 	ldr.w	sl, [ip]
 800c3fc:	fa13 f38a 	uxtah	r3, r3, sl
 800c400:	fb06 220e 	mla	r2, r6, lr, r2
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	9b00      	ldr	r3, [sp, #0]
 800c408:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c40c:	b292      	uxth	r2, r2
 800c40e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c412:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c416:	f8bd 3000 	ldrh.w	r3, [sp]
 800c41a:	4581      	cmp	r9, r0
 800c41c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c420:	f84c 3b04 	str.w	r3, [ip], #4
 800c424:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c428:	d2db      	bcs.n	800c3e2 <quorem+0x42>
 800c42a:	f855 300b 	ldr.w	r3, [r5, fp]
 800c42e:	b92b      	cbnz	r3, 800c43c <quorem+0x9c>
 800c430:	9b01      	ldr	r3, [sp, #4]
 800c432:	3b04      	subs	r3, #4
 800c434:	429d      	cmp	r5, r3
 800c436:	461a      	mov	r2, r3
 800c438:	d32c      	bcc.n	800c494 <quorem+0xf4>
 800c43a:	613c      	str	r4, [r7, #16]
 800c43c:	4638      	mov	r0, r7
 800c43e:	f001 fd59 	bl	800def4 <__mcmp>
 800c442:	2800      	cmp	r0, #0
 800c444:	db22      	blt.n	800c48c <quorem+0xec>
 800c446:	3601      	adds	r6, #1
 800c448:	4629      	mov	r1, r5
 800c44a:	2000      	movs	r0, #0
 800c44c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c450:	f8d1 c000 	ldr.w	ip, [r1]
 800c454:	b293      	uxth	r3, r2
 800c456:	1ac3      	subs	r3, r0, r3
 800c458:	0c12      	lsrs	r2, r2, #16
 800c45a:	fa13 f38c 	uxtah	r3, r3, ip
 800c45e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c462:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c466:	b29b      	uxth	r3, r3
 800c468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c46c:	45c1      	cmp	r9, r8
 800c46e:	f841 3b04 	str.w	r3, [r1], #4
 800c472:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c476:	d2e9      	bcs.n	800c44c <quorem+0xac>
 800c478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c47c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c480:	b922      	cbnz	r2, 800c48c <quorem+0xec>
 800c482:	3b04      	subs	r3, #4
 800c484:	429d      	cmp	r5, r3
 800c486:	461a      	mov	r2, r3
 800c488:	d30a      	bcc.n	800c4a0 <quorem+0x100>
 800c48a:	613c      	str	r4, [r7, #16]
 800c48c:	4630      	mov	r0, r6
 800c48e:	b003      	add	sp, #12
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	3b04      	subs	r3, #4
 800c498:	2a00      	cmp	r2, #0
 800c49a:	d1ce      	bne.n	800c43a <quorem+0x9a>
 800c49c:	3c01      	subs	r4, #1
 800c49e:	e7c9      	b.n	800c434 <quorem+0x94>
 800c4a0:	6812      	ldr	r2, [r2, #0]
 800c4a2:	3b04      	subs	r3, #4
 800c4a4:	2a00      	cmp	r2, #0
 800c4a6:	d1f0      	bne.n	800c48a <quorem+0xea>
 800c4a8:	3c01      	subs	r4, #1
 800c4aa:	e7eb      	b.n	800c484 <quorem+0xe4>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	e7ee      	b.n	800c48e <quorem+0xee>

0800c4b0 <_dtoa_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	ed2d 8b04 	vpush	{d8-d9}
 800c4b8:	69c5      	ldr	r5, [r0, #28]
 800c4ba:	b093      	sub	sp, #76	; 0x4c
 800c4bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c4c0:	ec57 6b10 	vmov	r6, r7, d0
 800c4c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c4c8:	9107      	str	r1, [sp, #28]
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	920a      	str	r2, [sp, #40]	; 0x28
 800c4ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c4d0:	b975      	cbnz	r5, 800c4f0 <_dtoa_r+0x40>
 800c4d2:	2010      	movs	r0, #16
 800c4d4:	f001 f982 	bl	800d7dc <malloc>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	61e0      	str	r0, [r4, #28]
 800c4dc:	b920      	cbnz	r0, 800c4e8 <_dtoa_r+0x38>
 800c4de:	4bae      	ldr	r3, [pc, #696]	; (800c798 <_dtoa_r+0x2e8>)
 800c4e0:	21ef      	movs	r1, #239	; 0xef
 800c4e2:	48ae      	ldr	r0, [pc, #696]	; (800c79c <_dtoa_r+0x2ec>)
 800c4e4:	f7ff ff3e 	bl	800c364 <__assert_func>
 800c4e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4ec:	6005      	str	r5, [r0, #0]
 800c4ee:	60c5      	str	r5, [r0, #12]
 800c4f0:	69e3      	ldr	r3, [r4, #28]
 800c4f2:	6819      	ldr	r1, [r3, #0]
 800c4f4:	b151      	cbz	r1, 800c50c <_dtoa_r+0x5c>
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	604a      	str	r2, [r1, #4]
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4093      	lsls	r3, r2
 800c4fe:	608b      	str	r3, [r1, #8]
 800c500:	4620      	mov	r0, r4
 800c502:	f001 fa71 	bl	800d9e8 <_Bfree>
 800c506:	69e3      	ldr	r3, [r4, #28]
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	1e3b      	subs	r3, r7, #0
 800c50e:	bfbb      	ittet	lt
 800c510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c514:	9303      	strlt	r3, [sp, #12]
 800c516:	2300      	movge	r3, #0
 800c518:	2201      	movlt	r2, #1
 800c51a:	bfac      	ite	ge
 800c51c:	f8c8 3000 	strge.w	r3, [r8]
 800c520:	f8c8 2000 	strlt.w	r2, [r8]
 800c524:	4b9e      	ldr	r3, [pc, #632]	; (800c7a0 <_dtoa_r+0x2f0>)
 800c526:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c52a:	ea33 0308 	bics.w	r3, r3, r8
 800c52e:	d11b      	bne.n	800c568 <_dtoa_r+0xb8>
 800c530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c532:	f242 730f 	movw	r3, #9999	; 0x270f
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c53c:	4333      	orrs	r3, r6
 800c53e:	f000 8593 	beq.w	800d068 <_dtoa_r+0xbb8>
 800c542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c544:	b963      	cbnz	r3, 800c560 <_dtoa_r+0xb0>
 800c546:	4b97      	ldr	r3, [pc, #604]	; (800c7a4 <_dtoa_r+0x2f4>)
 800c548:	e027      	b.n	800c59a <_dtoa_r+0xea>
 800c54a:	4b97      	ldr	r3, [pc, #604]	; (800c7a8 <_dtoa_r+0x2f8>)
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	9800      	ldr	r0, [sp, #0]
 800c556:	b013      	add	sp, #76	; 0x4c
 800c558:	ecbd 8b04 	vpop	{d8-d9}
 800c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	4b90      	ldr	r3, [pc, #576]	; (800c7a4 <_dtoa_r+0x2f4>)
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	3303      	adds	r3, #3
 800c566:	e7f3      	b.n	800c550 <_dtoa_r+0xa0>
 800c568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c56c:	2200      	movs	r2, #0
 800c56e:	ec51 0b17 	vmov	r0, r1, d7
 800c572:	eeb0 8a47 	vmov.f32	s16, s14
 800c576:	eef0 8a67 	vmov.f32	s17, s15
 800c57a:	2300      	movs	r3, #0
 800c57c:	f7f4 fab4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c580:	4681      	mov	r9, r0
 800c582:	b160      	cbz	r0, 800c59e <_dtoa_r+0xee>
 800c584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c586:	2301      	movs	r3, #1
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 8568 	beq.w	800d062 <_dtoa_r+0xbb2>
 800c592:	4b86      	ldr	r3, [pc, #536]	; (800c7ac <_dtoa_r+0x2fc>)
 800c594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	3b01      	subs	r3, #1
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	e7da      	b.n	800c554 <_dtoa_r+0xa4>
 800c59e:	aa10      	add	r2, sp, #64	; 0x40
 800c5a0:	a911      	add	r1, sp, #68	; 0x44
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c5a8:	eef0 0a68 	vmov.f32	s1, s17
 800c5ac:	f001 fdb8 	bl	800e120 <__d2b>
 800c5b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c5b4:	4682      	mov	sl, r0
 800c5b6:	2d00      	cmp	r5, #0
 800c5b8:	d07f      	beq.n	800c6ba <_dtoa_r+0x20a>
 800c5ba:	ee18 3a90 	vmov	r3, s17
 800c5be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c5c6:	ec51 0b18 	vmov	r0, r1, d8
 800c5ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c5d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4b75      	ldr	r3, [pc, #468]	; (800c7b0 <_dtoa_r+0x300>)
 800c5dc:	f7f3 fe64 	bl	80002a8 <__aeabi_dsub>
 800c5e0:	a367      	add	r3, pc, #412	; (adr r3, 800c780 <_dtoa_r+0x2d0>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f4 f817 	bl	8000618 <__aeabi_dmul>
 800c5ea:	a367      	add	r3, pc, #412	; (adr r3, 800c788 <_dtoa_r+0x2d8>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	f7f3 fe5c 	bl	80002ac <__adddf3>
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	460f      	mov	r7, r1
 800c5fa:	f7f3 ffa3 	bl	8000544 <__aeabi_i2d>
 800c5fe:	a364      	add	r3, pc, #400	; (adr r3, 800c790 <_dtoa_r+0x2e0>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f7f4 f808 	bl	8000618 <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	f7f3 fe4c 	bl	80002ac <__adddf3>
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	f7f4 faae 	bl	8000b78 <__aeabi_d2iz>
 800c61c:	2200      	movs	r2, #0
 800c61e:	4683      	mov	fp, r0
 800c620:	2300      	movs	r3, #0
 800c622:	4630      	mov	r0, r6
 800c624:	4639      	mov	r1, r7
 800c626:	f7f4 fa69 	bl	8000afc <__aeabi_dcmplt>
 800c62a:	b148      	cbz	r0, 800c640 <_dtoa_r+0x190>
 800c62c:	4658      	mov	r0, fp
 800c62e:	f7f3 ff89 	bl	8000544 <__aeabi_i2d>
 800c632:	4632      	mov	r2, r6
 800c634:	463b      	mov	r3, r7
 800c636:	f7f4 fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 800c63a:	b908      	cbnz	r0, 800c640 <_dtoa_r+0x190>
 800c63c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c640:	f1bb 0f16 	cmp.w	fp, #22
 800c644:	d857      	bhi.n	800c6f6 <_dtoa_r+0x246>
 800c646:	4b5b      	ldr	r3, [pc, #364]	; (800c7b4 <_dtoa_r+0x304>)
 800c648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	ec51 0b18 	vmov	r0, r1, d8
 800c654:	f7f4 fa52 	bl	8000afc <__aeabi_dcmplt>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d04e      	beq.n	800c6fa <_dtoa_r+0x24a>
 800c65c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c660:	2300      	movs	r3, #0
 800c662:	930c      	str	r3, [sp, #48]	; 0x30
 800c664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c666:	1b5b      	subs	r3, r3, r5
 800c668:	1e5a      	subs	r2, r3, #1
 800c66a:	bf45      	ittet	mi
 800c66c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c670:	9305      	strmi	r3, [sp, #20]
 800c672:	2300      	movpl	r3, #0
 800c674:	2300      	movmi	r3, #0
 800c676:	9206      	str	r2, [sp, #24]
 800c678:	bf54      	ite	pl
 800c67a:	9305      	strpl	r3, [sp, #20]
 800c67c:	9306      	strmi	r3, [sp, #24]
 800c67e:	f1bb 0f00 	cmp.w	fp, #0
 800c682:	db3c      	blt.n	800c6fe <_dtoa_r+0x24e>
 800c684:	9b06      	ldr	r3, [sp, #24]
 800c686:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c68a:	445b      	add	r3, fp
 800c68c:	9306      	str	r3, [sp, #24]
 800c68e:	2300      	movs	r3, #0
 800c690:	9308      	str	r3, [sp, #32]
 800c692:	9b07      	ldr	r3, [sp, #28]
 800c694:	2b09      	cmp	r3, #9
 800c696:	d868      	bhi.n	800c76a <_dtoa_r+0x2ba>
 800c698:	2b05      	cmp	r3, #5
 800c69a:	bfc4      	itt	gt
 800c69c:	3b04      	subgt	r3, #4
 800c69e:	9307      	strgt	r3, [sp, #28]
 800c6a0:	9b07      	ldr	r3, [sp, #28]
 800c6a2:	f1a3 0302 	sub.w	r3, r3, #2
 800c6a6:	bfcc      	ite	gt
 800c6a8:	2500      	movgt	r5, #0
 800c6aa:	2501      	movle	r5, #1
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	f200 8085 	bhi.w	800c7bc <_dtoa_r+0x30c>
 800c6b2:	e8df f003 	tbb	[pc, r3]
 800c6b6:	3b2e      	.short	0x3b2e
 800c6b8:	5839      	.short	0x5839
 800c6ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c6be:	441d      	add	r5, r3
 800c6c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c6c4:	2b20      	cmp	r3, #32
 800c6c6:	bfc1      	itttt	gt
 800c6c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c6cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800c6d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c6d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c6d8:	bfd6      	itet	le
 800c6da:	f1c3 0320 	rsble	r3, r3, #32
 800c6de:	ea48 0003 	orrgt.w	r0, r8, r3
 800c6e2:	fa06 f003 	lslle.w	r0, r6, r3
 800c6e6:	f7f3 ff1d 	bl	8000524 <__aeabi_ui2d>
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c6f0:	3d01      	subs	r5, #1
 800c6f2:	920e      	str	r2, [sp, #56]	; 0x38
 800c6f4:	e76f      	b.n	800c5d6 <_dtoa_r+0x126>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e7b3      	b.n	800c662 <_dtoa_r+0x1b2>
 800c6fa:	900c      	str	r0, [sp, #48]	; 0x30
 800c6fc:	e7b2      	b.n	800c664 <_dtoa_r+0x1b4>
 800c6fe:	9b05      	ldr	r3, [sp, #20]
 800c700:	eba3 030b 	sub.w	r3, r3, fp
 800c704:	9305      	str	r3, [sp, #20]
 800c706:	f1cb 0300 	rsb	r3, fp, #0
 800c70a:	9308      	str	r3, [sp, #32]
 800c70c:	2300      	movs	r3, #0
 800c70e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c710:	e7bf      	b.n	800c692 <_dtoa_r+0x1e2>
 800c712:	2300      	movs	r3, #0
 800c714:	9309      	str	r3, [sp, #36]	; 0x24
 800c716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c718:	2b00      	cmp	r3, #0
 800c71a:	dc52      	bgt.n	800c7c2 <_dtoa_r+0x312>
 800c71c:	2301      	movs	r3, #1
 800c71e:	9301      	str	r3, [sp, #4]
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	461a      	mov	r2, r3
 800c724:	920a      	str	r2, [sp, #40]	; 0x28
 800c726:	e00b      	b.n	800c740 <_dtoa_r+0x290>
 800c728:	2301      	movs	r3, #1
 800c72a:	e7f3      	b.n	800c714 <_dtoa_r+0x264>
 800c72c:	2300      	movs	r3, #0
 800c72e:	9309      	str	r3, [sp, #36]	; 0x24
 800c730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c732:	445b      	add	r3, fp
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	3301      	adds	r3, #1
 800c738:	2b01      	cmp	r3, #1
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	bfb8      	it	lt
 800c73e:	2301      	movlt	r3, #1
 800c740:	69e0      	ldr	r0, [r4, #28]
 800c742:	2100      	movs	r1, #0
 800c744:	2204      	movs	r2, #4
 800c746:	f102 0614 	add.w	r6, r2, #20
 800c74a:	429e      	cmp	r6, r3
 800c74c:	d93d      	bls.n	800c7ca <_dtoa_r+0x31a>
 800c74e:	6041      	str	r1, [r0, #4]
 800c750:	4620      	mov	r0, r4
 800c752:	f001 f909 	bl	800d968 <_Balloc>
 800c756:	9000      	str	r0, [sp, #0]
 800c758:	2800      	cmp	r0, #0
 800c75a:	d139      	bne.n	800c7d0 <_dtoa_r+0x320>
 800c75c:	4b16      	ldr	r3, [pc, #88]	; (800c7b8 <_dtoa_r+0x308>)
 800c75e:	4602      	mov	r2, r0
 800c760:	f240 11af 	movw	r1, #431	; 0x1af
 800c764:	e6bd      	b.n	800c4e2 <_dtoa_r+0x32>
 800c766:	2301      	movs	r3, #1
 800c768:	e7e1      	b.n	800c72e <_dtoa_r+0x27e>
 800c76a:	2501      	movs	r5, #1
 800c76c:	2300      	movs	r3, #0
 800c76e:	9307      	str	r3, [sp, #28]
 800c770:	9509      	str	r5, [sp, #36]	; 0x24
 800c772:	f04f 33ff 	mov.w	r3, #4294967295
 800c776:	9301      	str	r3, [sp, #4]
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	2200      	movs	r2, #0
 800c77c:	2312      	movs	r3, #18
 800c77e:	e7d1      	b.n	800c724 <_dtoa_r+0x274>
 800c780:	636f4361 	.word	0x636f4361
 800c784:	3fd287a7 	.word	0x3fd287a7
 800c788:	8b60c8b3 	.word	0x8b60c8b3
 800c78c:	3fc68a28 	.word	0x3fc68a28
 800c790:	509f79fb 	.word	0x509f79fb
 800c794:	3fd34413 	.word	0x3fd34413
 800c798:	08012584 	.word	0x08012584
 800c79c:	08012646 	.word	0x08012646
 800c7a0:	7ff00000 	.word	0x7ff00000
 800c7a4:	08012642 	.word	0x08012642
 800c7a8:	08012639 	.word	0x08012639
 800c7ac:	0801298d 	.word	0x0801298d
 800c7b0:	3ff80000 	.word	0x3ff80000
 800c7b4:	08012790 	.word	0x08012790
 800c7b8:	0801269e 	.word	0x0801269e
 800c7bc:	2301      	movs	r3, #1
 800c7be:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c0:	e7d7      	b.n	800c772 <_dtoa_r+0x2c2>
 800c7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	e7ba      	b.n	800c740 <_dtoa_r+0x290>
 800c7ca:	3101      	adds	r1, #1
 800c7cc:	0052      	lsls	r2, r2, #1
 800c7ce:	e7ba      	b.n	800c746 <_dtoa_r+0x296>
 800c7d0:	69e3      	ldr	r3, [r4, #28]
 800c7d2:	9a00      	ldr	r2, [sp, #0]
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	2b0e      	cmp	r3, #14
 800c7da:	f200 80a8 	bhi.w	800c92e <_dtoa_r+0x47e>
 800c7de:	2d00      	cmp	r5, #0
 800c7e0:	f000 80a5 	beq.w	800c92e <_dtoa_r+0x47e>
 800c7e4:	f1bb 0f00 	cmp.w	fp, #0
 800c7e8:	dd38      	ble.n	800c85c <_dtoa_r+0x3ac>
 800c7ea:	4bc0      	ldr	r3, [pc, #768]	; (800caec <_dtoa_r+0x63c>)
 800c7ec:	f00b 020f 	and.w	r2, fp, #15
 800c7f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c7f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c7fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c800:	d019      	beq.n	800c836 <_dtoa_r+0x386>
 800c802:	4bbb      	ldr	r3, [pc, #748]	; (800caf0 <_dtoa_r+0x640>)
 800c804:	ec51 0b18 	vmov	r0, r1, d8
 800c808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c80c:	f7f4 f82e 	bl	800086c <__aeabi_ddiv>
 800c810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c814:	f008 080f 	and.w	r8, r8, #15
 800c818:	2503      	movs	r5, #3
 800c81a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800caf0 <_dtoa_r+0x640>
 800c81e:	f1b8 0f00 	cmp.w	r8, #0
 800c822:	d10a      	bne.n	800c83a <_dtoa_r+0x38a>
 800c824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c828:	4632      	mov	r2, r6
 800c82a:	463b      	mov	r3, r7
 800c82c:	f7f4 f81e 	bl	800086c <__aeabi_ddiv>
 800c830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c834:	e02b      	b.n	800c88e <_dtoa_r+0x3de>
 800c836:	2502      	movs	r5, #2
 800c838:	e7ef      	b.n	800c81a <_dtoa_r+0x36a>
 800c83a:	f018 0f01 	tst.w	r8, #1
 800c83e:	d008      	beq.n	800c852 <_dtoa_r+0x3a2>
 800c840:	4630      	mov	r0, r6
 800c842:	4639      	mov	r1, r7
 800c844:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c848:	f7f3 fee6 	bl	8000618 <__aeabi_dmul>
 800c84c:	3501      	adds	r5, #1
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c856:	f109 0908 	add.w	r9, r9, #8
 800c85a:	e7e0      	b.n	800c81e <_dtoa_r+0x36e>
 800c85c:	f000 809f 	beq.w	800c99e <_dtoa_r+0x4ee>
 800c860:	f1cb 0600 	rsb	r6, fp, #0
 800c864:	4ba1      	ldr	r3, [pc, #644]	; (800caec <_dtoa_r+0x63c>)
 800c866:	4fa2      	ldr	r7, [pc, #648]	; (800caf0 <_dtoa_r+0x640>)
 800c868:	f006 020f 	and.w	r2, r6, #15
 800c86c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	ec51 0b18 	vmov	r0, r1, d8
 800c878:	f7f3 fece 	bl	8000618 <__aeabi_dmul>
 800c87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c880:	1136      	asrs	r6, r6, #4
 800c882:	2300      	movs	r3, #0
 800c884:	2502      	movs	r5, #2
 800c886:	2e00      	cmp	r6, #0
 800c888:	d17e      	bne.n	800c988 <_dtoa_r+0x4d8>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1d0      	bne.n	800c830 <_dtoa_r+0x380>
 800c88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c890:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8084 	beq.w	800c9a2 <_dtoa_r+0x4f2>
 800c89a:	4b96      	ldr	r3, [pc, #600]	; (800caf4 <_dtoa_r+0x644>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	4640      	mov	r0, r8
 800c8a0:	4649      	mov	r1, r9
 800c8a2:	f7f4 f92b 	bl	8000afc <__aeabi_dcmplt>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d07b      	beq.n	800c9a2 <_dtoa_r+0x4f2>
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d078      	beq.n	800c9a2 <_dtoa_r+0x4f2>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	dd39      	ble.n	800c92a <_dtoa_r+0x47a>
 800c8b6:	4b90      	ldr	r3, [pc, #576]	; (800caf8 <_dtoa_r+0x648>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	f7f3 feab 	bl	8000618 <__aeabi_dmul>
 800c8c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8c6:	9e01      	ldr	r6, [sp, #4]
 800c8c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f7f3 fe36 	bl	8000544 <__aeabi_i2d>
 800c8d8:	4642      	mov	r2, r8
 800c8da:	464b      	mov	r3, r9
 800c8dc:	f7f3 fe9c 	bl	8000618 <__aeabi_dmul>
 800c8e0:	4b86      	ldr	r3, [pc, #536]	; (800cafc <_dtoa_r+0x64c>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f7f3 fce2 	bl	80002ac <__adddf3>
 800c8e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	d158      	bne.n	800c9a8 <_dtoa_r+0x4f8>
 800c8f6:	4b82      	ldr	r3, [pc, #520]	; (800cb00 <_dtoa_r+0x650>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	4649      	mov	r1, r9
 800c8fe:	f7f3 fcd3 	bl	80002a8 <__aeabi_dsub>
 800c902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c906:	4680      	mov	r8, r0
 800c908:	4689      	mov	r9, r1
 800c90a:	f7f4 f915 	bl	8000b38 <__aeabi_dcmpgt>
 800c90e:	2800      	cmp	r0, #0
 800c910:	f040 8296 	bne.w	800ce40 <_dtoa_r+0x990>
 800c914:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c918:	4640      	mov	r0, r8
 800c91a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c91e:	4649      	mov	r1, r9
 800c920:	f7f4 f8ec 	bl	8000afc <__aeabi_dcmplt>
 800c924:	2800      	cmp	r0, #0
 800c926:	f040 8289 	bne.w	800ce3c <_dtoa_r+0x98c>
 800c92a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c92e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c930:	2b00      	cmp	r3, #0
 800c932:	f2c0 814e 	blt.w	800cbd2 <_dtoa_r+0x722>
 800c936:	f1bb 0f0e 	cmp.w	fp, #14
 800c93a:	f300 814a 	bgt.w	800cbd2 <_dtoa_r+0x722>
 800c93e:	4b6b      	ldr	r3, [pc, #428]	; (800caec <_dtoa_r+0x63c>)
 800c940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c944:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f280 80dc 	bge.w	800cb08 <_dtoa_r+0x658>
 800c950:	9b04      	ldr	r3, [sp, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	f300 80d8 	bgt.w	800cb08 <_dtoa_r+0x658>
 800c958:	f040 826f 	bne.w	800ce3a <_dtoa_r+0x98a>
 800c95c:	4b68      	ldr	r3, [pc, #416]	; (800cb00 <_dtoa_r+0x650>)
 800c95e:	2200      	movs	r2, #0
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f3 fe58 	bl	8000618 <__aeabi_dmul>
 800c968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c96c:	f7f4 f8da 	bl	8000b24 <__aeabi_dcmpge>
 800c970:	9e04      	ldr	r6, [sp, #16]
 800c972:	4637      	mov	r7, r6
 800c974:	2800      	cmp	r0, #0
 800c976:	f040 8245 	bne.w	800ce04 <_dtoa_r+0x954>
 800c97a:	9d00      	ldr	r5, [sp, #0]
 800c97c:	2331      	movs	r3, #49	; 0x31
 800c97e:	f805 3b01 	strb.w	r3, [r5], #1
 800c982:	f10b 0b01 	add.w	fp, fp, #1
 800c986:	e241      	b.n	800ce0c <_dtoa_r+0x95c>
 800c988:	07f2      	lsls	r2, r6, #31
 800c98a:	d505      	bpl.n	800c998 <_dtoa_r+0x4e8>
 800c98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c990:	f7f3 fe42 	bl	8000618 <__aeabi_dmul>
 800c994:	3501      	adds	r5, #1
 800c996:	2301      	movs	r3, #1
 800c998:	1076      	asrs	r6, r6, #1
 800c99a:	3708      	adds	r7, #8
 800c99c:	e773      	b.n	800c886 <_dtoa_r+0x3d6>
 800c99e:	2502      	movs	r5, #2
 800c9a0:	e775      	b.n	800c88e <_dtoa_r+0x3de>
 800c9a2:	9e04      	ldr	r6, [sp, #16]
 800c9a4:	465f      	mov	r7, fp
 800c9a6:	e792      	b.n	800c8ce <_dtoa_r+0x41e>
 800c9a8:	9900      	ldr	r1, [sp, #0]
 800c9aa:	4b50      	ldr	r3, [pc, #320]	; (800caec <_dtoa_r+0x63c>)
 800c9ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9b0:	4431      	add	r1, r6
 800c9b2:	9102      	str	r1, [sp, #8]
 800c9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9b6:	eeb0 9a47 	vmov.f32	s18, s14
 800c9ba:	eef0 9a67 	vmov.f32	s19, s15
 800c9be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9c6:	2900      	cmp	r1, #0
 800c9c8:	d044      	beq.n	800ca54 <_dtoa_r+0x5a4>
 800c9ca:	494e      	ldr	r1, [pc, #312]	; (800cb04 <_dtoa_r+0x654>)
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f7f3 ff4d 	bl	800086c <__aeabi_ddiv>
 800c9d2:	ec53 2b19 	vmov	r2, r3, d9
 800c9d6:	f7f3 fc67 	bl	80002a8 <__aeabi_dsub>
 800c9da:	9d00      	ldr	r5, [sp, #0]
 800c9dc:	ec41 0b19 	vmov	d9, r0, r1
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	f7f4 f8c8 	bl	8000b78 <__aeabi_d2iz>
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	f7f3 fdab 	bl	8000544 <__aeabi_i2d>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	f7f3 fc57 	bl	80002a8 <__aeabi_dsub>
 800c9fa:	3630      	adds	r6, #48	; 0x30
 800c9fc:	f805 6b01 	strb.w	r6, [r5], #1
 800ca00:	ec53 2b19 	vmov	r2, r3, d9
 800ca04:	4680      	mov	r8, r0
 800ca06:	4689      	mov	r9, r1
 800ca08:	f7f4 f878 	bl	8000afc <__aeabi_dcmplt>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d164      	bne.n	800cada <_dtoa_r+0x62a>
 800ca10:	4642      	mov	r2, r8
 800ca12:	464b      	mov	r3, r9
 800ca14:	4937      	ldr	r1, [pc, #220]	; (800caf4 <_dtoa_r+0x644>)
 800ca16:	2000      	movs	r0, #0
 800ca18:	f7f3 fc46 	bl	80002a8 <__aeabi_dsub>
 800ca1c:	ec53 2b19 	vmov	r2, r3, d9
 800ca20:	f7f4 f86c 	bl	8000afc <__aeabi_dcmplt>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	f040 80b6 	bne.w	800cb96 <_dtoa_r+0x6e6>
 800ca2a:	9b02      	ldr	r3, [sp, #8]
 800ca2c:	429d      	cmp	r5, r3
 800ca2e:	f43f af7c 	beq.w	800c92a <_dtoa_r+0x47a>
 800ca32:	4b31      	ldr	r3, [pc, #196]	; (800caf8 <_dtoa_r+0x648>)
 800ca34:	ec51 0b19 	vmov	r0, r1, d9
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f7f3 fded 	bl	8000618 <__aeabi_dmul>
 800ca3e:	4b2e      	ldr	r3, [pc, #184]	; (800caf8 <_dtoa_r+0x648>)
 800ca40:	ec41 0b19 	vmov	d9, r0, r1
 800ca44:	2200      	movs	r2, #0
 800ca46:	4640      	mov	r0, r8
 800ca48:	4649      	mov	r1, r9
 800ca4a:	f7f3 fde5 	bl	8000618 <__aeabi_dmul>
 800ca4e:	4680      	mov	r8, r0
 800ca50:	4689      	mov	r9, r1
 800ca52:	e7c5      	b.n	800c9e0 <_dtoa_r+0x530>
 800ca54:	ec51 0b17 	vmov	r0, r1, d7
 800ca58:	f7f3 fdde 	bl	8000618 <__aeabi_dmul>
 800ca5c:	9b02      	ldr	r3, [sp, #8]
 800ca5e:	9d00      	ldr	r5, [sp, #0]
 800ca60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca62:	ec41 0b19 	vmov	d9, r0, r1
 800ca66:	4649      	mov	r1, r9
 800ca68:	4640      	mov	r0, r8
 800ca6a:	f7f4 f885 	bl	8000b78 <__aeabi_d2iz>
 800ca6e:	4606      	mov	r6, r0
 800ca70:	f7f3 fd68 	bl	8000544 <__aeabi_i2d>
 800ca74:	3630      	adds	r6, #48	; 0x30
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	f7f3 fc13 	bl	80002a8 <__aeabi_dsub>
 800ca82:	f805 6b01 	strb.w	r6, [r5], #1
 800ca86:	9b02      	ldr	r3, [sp, #8]
 800ca88:	429d      	cmp	r5, r3
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	4689      	mov	r9, r1
 800ca8e:	f04f 0200 	mov.w	r2, #0
 800ca92:	d124      	bne.n	800cade <_dtoa_r+0x62e>
 800ca94:	4b1b      	ldr	r3, [pc, #108]	; (800cb04 <_dtoa_r+0x654>)
 800ca96:	ec51 0b19 	vmov	r0, r1, d9
 800ca9a:	f7f3 fc07 	bl	80002ac <__adddf3>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f4 f847 	bl	8000b38 <__aeabi_dcmpgt>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d173      	bne.n	800cb96 <_dtoa_r+0x6e6>
 800caae:	ec53 2b19 	vmov	r2, r3, d9
 800cab2:	4914      	ldr	r1, [pc, #80]	; (800cb04 <_dtoa_r+0x654>)
 800cab4:	2000      	movs	r0, #0
 800cab6:	f7f3 fbf7 	bl	80002a8 <__aeabi_dsub>
 800caba:	4602      	mov	r2, r0
 800cabc:	460b      	mov	r3, r1
 800cabe:	4640      	mov	r0, r8
 800cac0:	4649      	mov	r1, r9
 800cac2:	f7f4 f81b 	bl	8000afc <__aeabi_dcmplt>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f af2f 	beq.w	800c92a <_dtoa_r+0x47a>
 800cacc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cace:	1e6b      	subs	r3, r5, #1
 800cad0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cad6:	2b30      	cmp	r3, #48	; 0x30
 800cad8:	d0f8      	beq.n	800cacc <_dtoa_r+0x61c>
 800cada:	46bb      	mov	fp, r7
 800cadc:	e04a      	b.n	800cb74 <_dtoa_r+0x6c4>
 800cade:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <_dtoa_r+0x648>)
 800cae0:	f7f3 fd9a 	bl	8000618 <__aeabi_dmul>
 800cae4:	4680      	mov	r8, r0
 800cae6:	4689      	mov	r9, r1
 800cae8:	e7bd      	b.n	800ca66 <_dtoa_r+0x5b6>
 800caea:	bf00      	nop
 800caec:	08012790 	.word	0x08012790
 800caf0:	08012768 	.word	0x08012768
 800caf4:	3ff00000 	.word	0x3ff00000
 800caf8:	40240000 	.word	0x40240000
 800cafc:	401c0000 	.word	0x401c0000
 800cb00:	40140000 	.word	0x40140000
 800cb04:	3fe00000 	.word	0x3fe00000
 800cb08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb0c:	9d00      	ldr	r5, [sp, #0]
 800cb0e:	4642      	mov	r2, r8
 800cb10:	464b      	mov	r3, r9
 800cb12:	4630      	mov	r0, r6
 800cb14:	4639      	mov	r1, r7
 800cb16:	f7f3 fea9 	bl	800086c <__aeabi_ddiv>
 800cb1a:	f7f4 f82d 	bl	8000b78 <__aeabi_d2iz>
 800cb1e:	9001      	str	r0, [sp, #4]
 800cb20:	f7f3 fd10 	bl	8000544 <__aeabi_i2d>
 800cb24:	4642      	mov	r2, r8
 800cb26:	464b      	mov	r3, r9
 800cb28:	f7f3 fd76 	bl	8000618 <__aeabi_dmul>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4630      	mov	r0, r6
 800cb32:	4639      	mov	r1, r7
 800cb34:	f7f3 fbb8 	bl	80002a8 <__aeabi_dsub>
 800cb38:	9e01      	ldr	r6, [sp, #4]
 800cb3a:	9f04      	ldr	r7, [sp, #16]
 800cb3c:	3630      	adds	r6, #48	; 0x30
 800cb3e:	f805 6b01 	strb.w	r6, [r5], #1
 800cb42:	9e00      	ldr	r6, [sp, #0]
 800cb44:	1bae      	subs	r6, r5, r6
 800cb46:	42b7      	cmp	r7, r6
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	d134      	bne.n	800cbb8 <_dtoa_r+0x708>
 800cb4e:	f7f3 fbad 	bl	80002ac <__adddf3>
 800cb52:	4642      	mov	r2, r8
 800cb54:	464b      	mov	r3, r9
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	f7f3 ffed 	bl	8000b38 <__aeabi_dcmpgt>
 800cb5e:	b9c8      	cbnz	r0, 800cb94 <_dtoa_r+0x6e4>
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	4630      	mov	r0, r6
 800cb66:	4639      	mov	r1, r7
 800cb68:	f7f3 ffbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb6c:	b110      	cbz	r0, 800cb74 <_dtoa_r+0x6c4>
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	07db      	lsls	r3, r3, #31
 800cb72:	d40f      	bmi.n	800cb94 <_dtoa_r+0x6e4>
 800cb74:	4651      	mov	r1, sl
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 ff36 	bl	800d9e8 <_Bfree>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb80:	702b      	strb	r3, [r5, #0]
 800cb82:	f10b 0301 	add.w	r3, fp, #1
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f43f ace2 	beq.w	800c554 <_dtoa_r+0xa4>
 800cb90:	601d      	str	r5, [r3, #0]
 800cb92:	e4df      	b.n	800c554 <_dtoa_r+0xa4>
 800cb94:	465f      	mov	r7, fp
 800cb96:	462b      	mov	r3, r5
 800cb98:	461d      	mov	r5, r3
 800cb9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb9e:	2a39      	cmp	r2, #57	; 0x39
 800cba0:	d106      	bne.n	800cbb0 <_dtoa_r+0x700>
 800cba2:	9a00      	ldr	r2, [sp, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d1f7      	bne.n	800cb98 <_dtoa_r+0x6e8>
 800cba8:	9900      	ldr	r1, [sp, #0]
 800cbaa:	2230      	movs	r2, #48	; 0x30
 800cbac:	3701      	adds	r7, #1
 800cbae:	700a      	strb	r2, [r1, #0]
 800cbb0:	781a      	ldrb	r2, [r3, #0]
 800cbb2:	3201      	adds	r2, #1
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e790      	b.n	800cada <_dtoa_r+0x62a>
 800cbb8:	4ba3      	ldr	r3, [pc, #652]	; (800ce48 <_dtoa_r+0x998>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f7f3 fd2c 	bl	8000618 <__aeabi_dmul>
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	f7f3 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d09e      	beq.n	800cb0e <_dtoa_r+0x65e>
 800cbd0:	e7d0      	b.n	800cb74 <_dtoa_r+0x6c4>
 800cbd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbd4:	2a00      	cmp	r2, #0
 800cbd6:	f000 80ca 	beq.w	800cd6e <_dtoa_r+0x8be>
 800cbda:	9a07      	ldr	r2, [sp, #28]
 800cbdc:	2a01      	cmp	r2, #1
 800cbde:	f300 80ad 	bgt.w	800cd3c <_dtoa_r+0x88c>
 800cbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	f000 80a5 	beq.w	800cd34 <_dtoa_r+0x884>
 800cbea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbee:	9e08      	ldr	r6, [sp, #32]
 800cbf0:	9d05      	ldr	r5, [sp, #20]
 800cbf2:	9a05      	ldr	r2, [sp, #20]
 800cbf4:	441a      	add	r2, r3
 800cbf6:	9205      	str	r2, [sp, #20]
 800cbf8:	9a06      	ldr	r2, [sp, #24]
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	441a      	add	r2, r3
 800cbfe:	4620      	mov	r0, r4
 800cc00:	9206      	str	r2, [sp, #24]
 800cc02:	f000 fff1 	bl	800dbe8 <__i2b>
 800cc06:	4607      	mov	r7, r0
 800cc08:	b165      	cbz	r5, 800cc24 <_dtoa_r+0x774>
 800cc0a:	9b06      	ldr	r3, [sp, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	dd09      	ble.n	800cc24 <_dtoa_r+0x774>
 800cc10:	42ab      	cmp	r3, r5
 800cc12:	9a05      	ldr	r2, [sp, #20]
 800cc14:	bfa8      	it	ge
 800cc16:	462b      	movge	r3, r5
 800cc18:	1ad2      	subs	r2, r2, r3
 800cc1a:	9205      	str	r2, [sp, #20]
 800cc1c:	9a06      	ldr	r2, [sp, #24]
 800cc1e:	1aed      	subs	r5, r5, r3
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	9306      	str	r3, [sp, #24]
 800cc24:	9b08      	ldr	r3, [sp, #32]
 800cc26:	b1f3      	cbz	r3, 800cc66 <_dtoa_r+0x7b6>
 800cc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f000 80a3 	beq.w	800cd76 <_dtoa_r+0x8c6>
 800cc30:	2e00      	cmp	r6, #0
 800cc32:	dd10      	ble.n	800cc56 <_dtoa_r+0x7a6>
 800cc34:	4639      	mov	r1, r7
 800cc36:	4632      	mov	r2, r6
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f001 f895 	bl	800dd68 <__pow5mult>
 800cc3e:	4652      	mov	r2, sl
 800cc40:	4601      	mov	r1, r0
 800cc42:	4607      	mov	r7, r0
 800cc44:	4620      	mov	r0, r4
 800cc46:	f000 ffe5 	bl	800dc14 <__multiply>
 800cc4a:	4651      	mov	r1, sl
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 feca 	bl	800d9e8 <_Bfree>
 800cc54:	46c2      	mov	sl, r8
 800cc56:	9b08      	ldr	r3, [sp, #32]
 800cc58:	1b9a      	subs	r2, r3, r6
 800cc5a:	d004      	beq.n	800cc66 <_dtoa_r+0x7b6>
 800cc5c:	4651      	mov	r1, sl
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f001 f882 	bl	800dd68 <__pow5mult>
 800cc64:	4682      	mov	sl, r0
 800cc66:	2101      	movs	r1, #1
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 ffbd 	bl	800dbe8 <__i2b>
 800cc6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	4606      	mov	r6, r0
 800cc74:	f340 8081 	ble.w	800cd7a <_dtoa_r+0x8ca>
 800cc78:	461a      	mov	r2, r3
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f001 f873 	bl	800dd68 <__pow5mult>
 800cc82:	9b07      	ldr	r3, [sp, #28]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	4606      	mov	r6, r0
 800cc88:	dd7a      	ble.n	800cd80 <_dtoa_r+0x8d0>
 800cc8a:	f04f 0800 	mov.w	r8, #0
 800cc8e:	6933      	ldr	r3, [r6, #16]
 800cc90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc94:	6918      	ldr	r0, [r3, #16]
 800cc96:	f000 ff59 	bl	800db4c <__hi0bits>
 800cc9a:	f1c0 0020 	rsb	r0, r0, #32
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	4418      	add	r0, r3
 800cca2:	f010 001f 	ands.w	r0, r0, #31
 800cca6:	f000 8094 	beq.w	800cdd2 <_dtoa_r+0x922>
 800ccaa:	f1c0 0320 	rsb	r3, r0, #32
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	f340 8085 	ble.w	800cdbe <_dtoa_r+0x90e>
 800ccb4:	9b05      	ldr	r3, [sp, #20]
 800ccb6:	f1c0 001c 	rsb	r0, r0, #28
 800ccba:	4403      	add	r3, r0
 800ccbc:	9305      	str	r3, [sp, #20]
 800ccbe:	9b06      	ldr	r3, [sp, #24]
 800ccc0:	4403      	add	r3, r0
 800ccc2:	4405      	add	r5, r0
 800ccc4:	9306      	str	r3, [sp, #24]
 800ccc6:	9b05      	ldr	r3, [sp, #20]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dd05      	ble.n	800ccd8 <_dtoa_r+0x828>
 800cccc:	4651      	mov	r1, sl
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f001 f8a3 	bl	800de1c <__lshift>
 800ccd6:	4682      	mov	sl, r0
 800ccd8:	9b06      	ldr	r3, [sp, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	dd05      	ble.n	800ccea <_dtoa_r+0x83a>
 800ccde:	4631      	mov	r1, r6
 800cce0:	461a      	mov	r2, r3
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 f89a 	bl	800de1c <__lshift>
 800cce8:	4606      	mov	r6, r0
 800ccea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d072      	beq.n	800cdd6 <_dtoa_r+0x926>
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4650      	mov	r0, sl
 800ccf4:	f001 f8fe 	bl	800def4 <__mcmp>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	da6c      	bge.n	800cdd6 <_dtoa_r+0x926>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4651      	mov	r1, sl
 800cd00:	220a      	movs	r2, #10
 800cd02:	4620      	mov	r0, r4
 800cd04:	f000 fe92 	bl	800da2c <__multadd>
 800cd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd0e:	4682      	mov	sl, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 81b0 	beq.w	800d076 <_dtoa_r+0xbc6>
 800cd16:	2300      	movs	r3, #0
 800cd18:	4639      	mov	r1, r7
 800cd1a:	220a      	movs	r2, #10
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 fe85 	bl	800da2c <__multadd>
 800cd22:	9b01      	ldr	r3, [sp, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	4607      	mov	r7, r0
 800cd28:	f300 8096 	bgt.w	800ce58 <_dtoa_r+0x9a8>
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	dc59      	bgt.n	800cde6 <_dtoa_r+0x936>
 800cd32:	e091      	b.n	800ce58 <_dtoa_r+0x9a8>
 800cd34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd3a:	e758      	b.n	800cbee <_dtoa_r+0x73e>
 800cd3c:	9b04      	ldr	r3, [sp, #16]
 800cd3e:	1e5e      	subs	r6, r3, #1
 800cd40:	9b08      	ldr	r3, [sp, #32]
 800cd42:	42b3      	cmp	r3, r6
 800cd44:	bfbf      	itttt	lt
 800cd46:	9b08      	ldrlt	r3, [sp, #32]
 800cd48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cd4a:	9608      	strlt	r6, [sp, #32]
 800cd4c:	1af3      	sublt	r3, r6, r3
 800cd4e:	bfb4      	ite	lt
 800cd50:	18d2      	addlt	r2, r2, r3
 800cd52:	1b9e      	subge	r6, r3, r6
 800cd54:	9b04      	ldr	r3, [sp, #16]
 800cd56:	bfbc      	itt	lt
 800cd58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cd5a:	2600      	movlt	r6, #0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	bfb7      	itett	lt
 800cd60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cd64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cd68:	1a9d      	sublt	r5, r3, r2
 800cd6a:	2300      	movlt	r3, #0
 800cd6c:	e741      	b.n	800cbf2 <_dtoa_r+0x742>
 800cd6e:	9e08      	ldr	r6, [sp, #32]
 800cd70:	9d05      	ldr	r5, [sp, #20]
 800cd72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd74:	e748      	b.n	800cc08 <_dtoa_r+0x758>
 800cd76:	9a08      	ldr	r2, [sp, #32]
 800cd78:	e770      	b.n	800cc5c <_dtoa_r+0x7ac>
 800cd7a:	9b07      	ldr	r3, [sp, #28]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	dc19      	bgt.n	800cdb4 <_dtoa_r+0x904>
 800cd80:	9b02      	ldr	r3, [sp, #8]
 800cd82:	b9bb      	cbnz	r3, 800cdb4 <_dtoa_r+0x904>
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd8a:	b99b      	cbnz	r3, 800cdb4 <_dtoa_r+0x904>
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd92:	0d1b      	lsrs	r3, r3, #20
 800cd94:	051b      	lsls	r3, r3, #20
 800cd96:	b183      	cbz	r3, 800cdba <_dtoa_r+0x90a>
 800cd98:	9b05      	ldr	r3, [sp, #20]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	9b06      	ldr	r3, [sp, #24]
 800cda0:	3301      	adds	r3, #1
 800cda2:	9306      	str	r3, [sp, #24]
 800cda4:	f04f 0801 	mov.w	r8, #1
 800cda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f47f af6f 	bne.w	800cc8e <_dtoa_r+0x7de>
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	e774      	b.n	800cc9e <_dtoa_r+0x7ee>
 800cdb4:	f04f 0800 	mov.w	r8, #0
 800cdb8:	e7f6      	b.n	800cda8 <_dtoa_r+0x8f8>
 800cdba:	4698      	mov	r8, r3
 800cdbc:	e7f4      	b.n	800cda8 <_dtoa_r+0x8f8>
 800cdbe:	d082      	beq.n	800ccc6 <_dtoa_r+0x816>
 800cdc0:	9a05      	ldr	r2, [sp, #20]
 800cdc2:	331c      	adds	r3, #28
 800cdc4:	441a      	add	r2, r3
 800cdc6:	9205      	str	r2, [sp, #20]
 800cdc8:	9a06      	ldr	r2, [sp, #24]
 800cdca:	441a      	add	r2, r3
 800cdcc:	441d      	add	r5, r3
 800cdce:	9206      	str	r2, [sp, #24]
 800cdd0:	e779      	b.n	800ccc6 <_dtoa_r+0x816>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	e7f4      	b.n	800cdc0 <_dtoa_r+0x910>
 800cdd6:	9b04      	ldr	r3, [sp, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc37      	bgt.n	800ce4c <_dtoa_r+0x99c>
 800cddc:	9b07      	ldr	r3, [sp, #28]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	dd34      	ble.n	800ce4c <_dtoa_r+0x99c>
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	9b01      	ldr	r3, [sp, #4]
 800cde8:	b963      	cbnz	r3, 800ce04 <_dtoa_r+0x954>
 800cdea:	4631      	mov	r1, r6
 800cdec:	2205      	movs	r2, #5
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 fe1c 	bl	800da2c <__multadd>
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	4650      	mov	r0, sl
 800cdfa:	f001 f87b 	bl	800def4 <__mcmp>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	f73f adbb 	bgt.w	800c97a <_dtoa_r+0x4ca>
 800ce04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce06:	9d00      	ldr	r5, [sp, #0]
 800ce08:	ea6f 0b03 	mvn.w	fp, r3
 800ce0c:	f04f 0800 	mov.w	r8, #0
 800ce10:	4631      	mov	r1, r6
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fde8 	bl	800d9e8 <_Bfree>
 800ce18:	2f00      	cmp	r7, #0
 800ce1a:	f43f aeab 	beq.w	800cb74 <_dtoa_r+0x6c4>
 800ce1e:	f1b8 0f00 	cmp.w	r8, #0
 800ce22:	d005      	beq.n	800ce30 <_dtoa_r+0x980>
 800ce24:	45b8      	cmp	r8, r7
 800ce26:	d003      	beq.n	800ce30 <_dtoa_r+0x980>
 800ce28:	4641      	mov	r1, r8
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 fddc 	bl	800d9e8 <_Bfree>
 800ce30:	4639      	mov	r1, r7
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fdd8 	bl	800d9e8 <_Bfree>
 800ce38:	e69c      	b.n	800cb74 <_dtoa_r+0x6c4>
 800ce3a:	2600      	movs	r6, #0
 800ce3c:	4637      	mov	r7, r6
 800ce3e:	e7e1      	b.n	800ce04 <_dtoa_r+0x954>
 800ce40:	46bb      	mov	fp, r7
 800ce42:	4637      	mov	r7, r6
 800ce44:	e599      	b.n	800c97a <_dtoa_r+0x4ca>
 800ce46:	bf00      	nop
 800ce48:	40240000 	.word	0x40240000
 800ce4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 80c8 	beq.w	800cfe4 <_dtoa_r+0xb34>
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	2d00      	cmp	r5, #0
 800ce5a:	dd05      	ble.n	800ce68 <_dtoa_r+0x9b8>
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 ffdb 	bl	800de1c <__lshift>
 800ce66:	4607      	mov	r7, r0
 800ce68:	f1b8 0f00 	cmp.w	r8, #0
 800ce6c:	d05b      	beq.n	800cf26 <_dtoa_r+0xa76>
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fd79 	bl	800d968 <_Balloc>
 800ce76:	4605      	mov	r5, r0
 800ce78:	b928      	cbnz	r0, 800ce86 <_dtoa_r+0x9d6>
 800ce7a:	4b83      	ldr	r3, [pc, #524]	; (800d088 <_dtoa_r+0xbd8>)
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ce82:	f7ff bb2e 	b.w	800c4e2 <_dtoa_r+0x32>
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	3202      	adds	r2, #2
 800ce8a:	0092      	lsls	r2, r2, #2
 800ce8c:	f107 010c 	add.w	r1, r7, #12
 800ce90:	300c      	adds	r0, #12
 800ce92:	f7ff fa49 	bl	800c328 <memcpy>
 800ce96:	2201      	movs	r2, #1
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 ffbe 	bl	800de1c <__lshift>
 800cea0:	9b00      	ldr	r3, [sp, #0]
 800cea2:	3301      	adds	r3, #1
 800cea4:	9304      	str	r3, [sp, #16]
 800cea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceaa:	4413      	add	r3, r2
 800ceac:	9308      	str	r3, [sp, #32]
 800ceae:	9b02      	ldr	r3, [sp, #8]
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	46b8      	mov	r8, r7
 800ceb6:	9306      	str	r3, [sp, #24]
 800ceb8:	4607      	mov	r7, r0
 800ceba:	9b04      	ldr	r3, [sp, #16]
 800cebc:	4631      	mov	r1, r6
 800cebe:	3b01      	subs	r3, #1
 800cec0:	4650      	mov	r0, sl
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	f7ff fa6c 	bl	800c3a0 <quorem>
 800cec8:	4641      	mov	r1, r8
 800ceca:	9002      	str	r0, [sp, #8]
 800cecc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ced0:	4650      	mov	r0, sl
 800ced2:	f001 f80f 	bl	800def4 <__mcmp>
 800ced6:	463a      	mov	r2, r7
 800ced8:	9005      	str	r0, [sp, #20]
 800ceda:	4631      	mov	r1, r6
 800cedc:	4620      	mov	r0, r4
 800cede:	f001 f825 	bl	800df2c <__mdiff>
 800cee2:	68c2      	ldr	r2, [r0, #12]
 800cee4:	4605      	mov	r5, r0
 800cee6:	bb02      	cbnz	r2, 800cf2a <_dtoa_r+0xa7a>
 800cee8:	4601      	mov	r1, r0
 800ceea:	4650      	mov	r0, sl
 800ceec:	f001 f802 	bl	800def4 <__mcmp>
 800cef0:	4602      	mov	r2, r0
 800cef2:	4629      	mov	r1, r5
 800cef4:	4620      	mov	r0, r4
 800cef6:	9209      	str	r2, [sp, #36]	; 0x24
 800cef8:	f000 fd76 	bl	800d9e8 <_Bfree>
 800cefc:	9b07      	ldr	r3, [sp, #28]
 800cefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf00:	9d04      	ldr	r5, [sp, #16]
 800cf02:	ea43 0102 	orr.w	r1, r3, r2
 800cf06:	9b06      	ldr	r3, [sp, #24]
 800cf08:	4319      	orrs	r1, r3
 800cf0a:	d110      	bne.n	800cf2e <_dtoa_r+0xa7e>
 800cf0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf10:	d029      	beq.n	800cf66 <_dtoa_r+0xab6>
 800cf12:	9b05      	ldr	r3, [sp, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	dd02      	ble.n	800cf1e <_dtoa_r+0xa6e>
 800cf18:	9b02      	ldr	r3, [sp, #8]
 800cf1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	f883 9000 	strb.w	r9, [r3]
 800cf24:	e774      	b.n	800ce10 <_dtoa_r+0x960>
 800cf26:	4638      	mov	r0, r7
 800cf28:	e7ba      	b.n	800cea0 <_dtoa_r+0x9f0>
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	e7e1      	b.n	800cef2 <_dtoa_r+0xa42>
 800cf2e:	9b05      	ldr	r3, [sp, #20]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	db04      	blt.n	800cf3e <_dtoa_r+0xa8e>
 800cf34:	9907      	ldr	r1, [sp, #28]
 800cf36:	430b      	orrs	r3, r1
 800cf38:	9906      	ldr	r1, [sp, #24]
 800cf3a:	430b      	orrs	r3, r1
 800cf3c:	d120      	bne.n	800cf80 <_dtoa_r+0xad0>
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	dded      	ble.n	800cf1e <_dtoa_r+0xa6e>
 800cf42:	4651      	mov	r1, sl
 800cf44:	2201      	movs	r2, #1
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 ff68 	bl	800de1c <__lshift>
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4682      	mov	sl, r0
 800cf50:	f000 ffd0 	bl	800def4 <__mcmp>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	dc03      	bgt.n	800cf60 <_dtoa_r+0xab0>
 800cf58:	d1e1      	bne.n	800cf1e <_dtoa_r+0xa6e>
 800cf5a:	f019 0f01 	tst.w	r9, #1
 800cf5e:	d0de      	beq.n	800cf1e <_dtoa_r+0xa6e>
 800cf60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf64:	d1d8      	bne.n	800cf18 <_dtoa_r+0xa68>
 800cf66:	9a01      	ldr	r2, [sp, #4]
 800cf68:	2339      	movs	r3, #57	; 0x39
 800cf6a:	7013      	strb	r3, [r2, #0]
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	461d      	mov	r5, r3
 800cf70:	3b01      	subs	r3, #1
 800cf72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf76:	2a39      	cmp	r2, #57	; 0x39
 800cf78:	d06c      	beq.n	800d054 <_dtoa_r+0xba4>
 800cf7a:	3201      	adds	r2, #1
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	e747      	b.n	800ce10 <_dtoa_r+0x960>
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	dd07      	ble.n	800cf94 <_dtoa_r+0xae4>
 800cf84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf88:	d0ed      	beq.n	800cf66 <_dtoa_r+0xab6>
 800cf8a:	9a01      	ldr	r2, [sp, #4]
 800cf8c:	f109 0301 	add.w	r3, r9, #1
 800cf90:	7013      	strb	r3, [r2, #0]
 800cf92:	e73d      	b.n	800ce10 <_dtoa_r+0x960>
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	9a08      	ldr	r2, [sp, #32]
 800cf98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d043      	beq.n	800d028 <_dtoa_r+0xb78>
 800cfa0:	4651      	mov	r1, sl
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	220a      	movs	r2, #10
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 fd40 	bl	800da2c <__multadd>
 800cfac:	45b8      	cmp	r8, r7
 800cfae:	4682      	mov	sl, r0
 800cfb0:	f04f 0300 	mov.w	r3, #0
 800cfb4:	f04f 020a 	mov.w	r2, #10
 800cfb8:	4641      	mov	r1, r8
 800cfba:	4620      	mov	r0, r4
 800cfbc:	d107      	bne.n	800cfce <_dtoa_r+0xb1e>
 800cfbe:	f000 fd35 	bl	800da2c <__multadd>
 800cfc2:	4680      	mov	r8, r0
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	9b04      	ldr	r3, [sp, #16]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	9304      	str	r3, [sp, #16]
 800cfcc:	e775      	b.n	800ceba <_dtoa_r+0xa0a>
 800cfce:	f000 fd2d 	bl	800da2c <__multadd>
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	4680      	mov	r8, r0
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	220a      	movs	r2, #10
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fd26 	bl	800da2c <__multadd>
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	e7f0      	b.n	800cfc6 <_dtoa_r+0xb16>
 800cfe4:	9b04      	ldr	r3, [sp, #16]
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	9d00      	ldr	r5, [sp, #0]
 800cfea:	4631      	mov	r1, r6
 800cfec:	4650      	mov	r0, sl
 800cfee:	f7ff f9d7 	bl	800c3a0 <quorem>
 800cff2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cff6:	9b00      	ldr	r3, [sp, #0]
 800cff8:	f805 9b01 	strb.w	r9, [r5], #1
 800cffc:	1aea      	subs	r2, r5, r3
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	4293      	cmp	r3, r2
 800d002:	dd07      	ble.n	800d014 <_dtoa_r+0xb64>
 800d004:	4651      	mov	r1, sl
 800d006:	2300      	movs	r3, #0
 800d008:	220a      	movs	r2, #10
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fd0e 	bl	800da2c <__multadd>
 800d010:	4682      	mov	sl, r0
 800d012:	e7ea      	b.n	800cfea <_dtoa_r+0xb3a>
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	bfc8      	it	gt
 800d01a:	461d      	movgt	r5, r3
 800d01c:	9b00      	ldr	r3, [sp, #0]
 800d01e:	bfd8      	it	le
 800d020:	2501      	movle	r5, #1
 800d022:	441d      	add	r5, r3
 800d024:	f04f 0800 	mov.w	r8, #0
 800d028:	4651      	mov	r1, sl
 800d02a:	2201      	movs	r2, #1
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 fef5 	bl	800de1c <__lshift>
 800d032:	4631      	mov	r1, r6
 800d034:	4682      	mov	sl, r0
 800d036:	f000 ff5d 	bl	800def4 <__mcmp>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	dc96      	bgt.n	800cf6c <_dtoa_r+0xabc>
 800d03e:	d102      	bne.n	800d046 <_dtoa_r+0xb96>
 800d040:	f019 0f01 	tst.w	r9, #1
 800d044:	d192      	bne.n	800cf6c <_dtoa_r+0xabc>
 800d046:	462b      	mov	r3, r5
 800d048:	461d      	mov	r5, r3
 800d04a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d04e:	2a30      	cmp	r2, #48	; 0x30
 800d050:	d0fa      	beq.n	800d048 <_dtoa_r+0xb98>
 800d052:	e6dd      	b.n	800ce10 <_dtoa_r+0x960>
 800d054:	9a00      	ldr	r2, [sp, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d189      	bne.n	800cf6e <_dtoa_r+0xabe>
 800d05a:	f10b 0b01 	add.w	fp, fp, #1
 800d05e:	2331      	movs	r3, #49	; 0x31
 800d060:	e796      	b.n	800cf90 <_dtoa_r+0xae0>
 800d062:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <_dtoa_r+0xbdc>)
 800d064:	f7ff ba99 	b.w	800c59a <_dtoa_r+0xea>
 800d068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f47f aa6d 	bne.w	800c54a <_dtoa_r+0x9a>
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <_dtoa_r+0xbe0>)
 800d072:	f7ff ba92 	b.w	800c59a <_dtoa_r+0xea>
 800d076:	9b01      	ldr	r3, [sp, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	dcb5      	bgt.n	800cfe8 <_dtoa_r+0xb38>
 800d07c:	9b07      	ldr	r3, [sp, #28]
 800d07e:	2b02      	cmp	r3, #2
 800d080:	f73f aeb1 	bgt.w	800cde6 <_dtoa_r+0x936>
 800d084:	e7b0      	b.n	800cfe8 <_dtoa_r+0xb38>
 800d086:	bf00      	nop
 800d088:	0801269e 	.word	0x0801269e
 800d08c:	0801298c 	.word	0x0801298c
 800d090:	08012639 	.word	0x08012639

0800d094 <_free_r>:
 800d094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d096:	2900      	cmp	r1, #0
 800d098:	d044      	beq.n	800d124 <_free_r+0x90>
 800d09a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d09e:	9001      	str	r0, [sp, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f1a1 0404 	sub.w	r4, r1, #4
 800d0a6:	bfb8      	it	lt
 800d0a8:	18e4      	addlt	r4, r4, r3
 800d0aa:	f000 fc51 	bl	800d950 <__malloc_lock>
 800d0ae:	4a1e      	ldr	r2, [pc, #120]	; (800d128 <_free_r+0x94>)
 800d0b0:	9801      	ldr	r0, [sp, #4]
 800d0b2:	6813      	ldr	r3, [r2, #0]
 800d0b4:	b933      	cbnz	r3, 800d0c4 <_free_r+0x30>
 800d0b6:	6063      	str	r3, [r4, #4]
 800d0b8:	6014      	str	r4, [r2, #0]
 800d0ba:	b003      	add	sp, #12
 800d0bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0c0:	f000 bc4c 	b.w	800d95c <__malloc_unlock>
 800d0c4:	42a3      	cmp	r3, r4
 800d0c6:	d908      	bls.n	800d0da <_free_r+0x46>
 800d0c8:	6825      	ldr	r5, [r4, #0]
 800d0ca:	1961      	adds	r1, r4, r5
 800d0cc:	428b      	cmp	r3, r1
 800d0ce:	bf01      	itttt	eq
 800d0d0:	6819      	ldreq	r1, [r3, #0]
 800d0d2:	685b      	ldreq	r3, [r3, #4]
 800d0d4:	1949      	addeq	r1, r1, r5
 800d0d6:	6021      	streq	r1, [r4, #0]
 800d0d8:	e7ed      	b.n	800d0b6 <_free_r+0x22>
 800d0da:	461a      	mov	r2, r3
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	b10b      	cbz	r3, 800d0e4 <_free_r+0x50>
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	d9fa      	bls.n	800d0da <_free_r+0x46>
 800d0e4:	6811      	ldr	r1, [r2, #0]
 800d0e6:	1855      	adds	r5, r2, r1
 800d0e8:	42a5      	cmp	r5, r4
 800d0ea:	d10b      	bne.n	800d104 <_free_r+0x70>
 800d0ec:	6824      	ldr	r4, [r4, #0]
 800d0ee:	4421      	add	r1, r4
 800d0f0:	1854      	adds	r4, r2, r1
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	6011      	str	r1, [r2, #0]
 800d0f6:	d1e0      	bne.n	800d0ba <_free_r+0x26>
 800d0f8:	681c      	ldr	r4, [r3, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	6053      	str	r3, [r2, #4]
 800d0fe:	440c      	add	r4, r1
 800d100:	6014      	str	r4, [r2, #0]
 800d102:	e7da      	b.n	800d0ba <_free_r+0x26>
 800d104:	d902      	bls.n	800d10c <_free_r+0x78>
 800d106:	230c      	movs	r3, #12
 800d108:	6003      	str	r3, [r0, #0]
 800d10a:	e7d6      	b.n	800d0ba <_free_r+0x26>
 800d10c:	6825      	ldr	r5, [r4, #0]
 800d10e:	1961      	adds	r1, r4, r5
 800d110:	428b      	cmp	r3, r1
 800d112:	bf04      	itt	eq
 800d114:	6819      	ldreq	r1, [r3, #0]
 800d116:	685b      	ldreq	r3, [r3, #4]
 800d118:	6063      	str	r3, [r4, #4]
 800d11a:	bf04      	itt	eq
 800d11c:	1949      	addeq	r1, r1, r5
 800d11e:	6021      	streq	r1, [r4, #0]
 800d120:	6054      	str	r4, [r2, #4]
 800d122:	e7ca      	b.n	800d0ba <_free_r+0x26>
 800d124:	b003      	add	sp, #12
 800d126:	bd30      	pop	{r4, r5, pc}
 800d128:	20000ac0 	.word	0x20000ac0

0800d12c <rshift>:
 800d12c:	6903      	ldr	r3, [r0, #16]
 800d12e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d136:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d13a:	f100 0414 	add.w	r4, r0, #20
 800d13e:	dd45      	ble.n	800d1cc <rshift+0xa0>
 800d140:	f011 011f 	ands.w	r1, r1, #31
 800d144:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d148:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d14c:	d10c      	bne.n	800d168 <rshift+0x3c>
 800d14e:	f100 0710 	add.w	r7, r0, #16
 800d152:	4629      	mov	r1, r5
 800d154:	42b1      	cmp	r1, r6
 800d156:	d334      	bcc.n	800d1c2 <rshift+0x96>
 800d158:	1a9b      	subs	r3, r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	1eea      	subs	r2, r5, #3
 800d15e:	4296      	cmp	r6, r2
 800d160:	bf38      	it	cc
 800d162:	2300      	movcc	r3, #0
 800d164:	4423      	add	r3, r4
 800d166:	e015      	b.n	800d194 <rshift+0x68>
 800d168:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d16c:	f1c1 0820 	rsb	r8, r1, #32
 800d170:	40cf      	lsrs	r7, r1
 800d172:	f105 0e04 	add.w	lr, r5, #4
 800d176:	46a1      	mov	r9, r4
 800d178:	4576      	cmp	r6, lr
 800d17a:	46f4      	mov	ip, lr
 800d17c:	d815      	bhi.n	800d1aa <rshift+0x7e>
 800d17e:	1a9a      	subs	r2, r3, r2
 800d180:	0092      	lsls	r2, r2, #2
 800d182:	3a04      	subs	r2, #4
 800d184:	3501      	adds	r5, #1
 800d186:	42ae      	cmp	r6, r5
 800d188:	bf38      	it	cc
 800d18a:	2200      	movcc	r2, #0
 800d18c:	18a3      	adds	r3, r4, r2
 800d18e:	50a7      	str	r7, [r4, r2]
 800d190:	b107      	cbz	r7, 800d194 <rshift+0x68>
 800d192:	3304      	adds	r3, #4
 800d194:	1b1a      	subs	r2, r3, r4
 800d196:	42a3      	cmp	r3, r4
 800d198:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d19c:	bf08      	it	eq
 800d19e:	2300      	moveq	r3, #0
 800d1a0:	6102      	str	r2, [r0, #16]
 800d1a2:	bf08      	it	eq
 800d1a4:	6143      	streq	r3, [r0, #20]
 800d1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1aa:	f8dc c000 	ldr.w	ip, [ip]
 800d1ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1b2:	ea4c 0707 	orr.w	r7, ip, r7
 800d1b6:	f849 7b04 	str.w	r7, [r9], #4
 800d1ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1be:	40cf      	lsrs	r7, r1
 800d1c0:	e7da      	b.n	800d178 <rshift+0x4c>
 800d1c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d1ca:	e7c3      	b.n	800d154 <rshift+0x28>
 800d1cc:	4623      	mov	r3, r4
 800d1ce:	e7e1      	b.n	800d194 <rshift+0x68>

0800d1d0 <__hexdig_fun>:
 800d1d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d1d4:	2b09      	cmp	r3, #9
 800d1d6:	d802      	bhi.n	800d1de <__hexdig_fun+0xe>
 800d1d8:	3820      	subs	r0, #32
 800d1da:	b2c0      	uxtb	r0, r0
 800d1dc:	4770      	bx	lr
 800d1de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d1e2:	2b05      	cmp	r3, #5
 800d1e4:	d801      	bhi.n	800d1ea <__hexdig_fun+0x1a>
 800d1e6:	3847      	subs	r0, #71	; 0x47
 800d1e8:	e7f7      	b.n	800d1da <__hexdig_fun+0xa>
 800d1ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d1ee:	2b05      	cmp	r3, #5
 800d1f0:	d801      	bhi.n	800d1f6 <__hexdig_fun+0x26>
 800d1f2:	3827      	subs	r0, #39	; 0x27
 800d1f4:	e7f1      	b.n	800d1da <__hexdig_fun+0xa>
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	4770      	bx	lr
	...

0800d1fc <__gethex>:
 800d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d200:	4617      	mov	r7, r2
 800d202:	680a      	ldr	r2, [r1, #0]
 800d204:	b085      	sub	sp, #20
 800d206:	f102 0b02 	add.w	fp, r2, #2
 800d20a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d20e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d212:	4681      	mov	r9, r0
 800d214:	468a      	mov	sl, r1
 800d216:	9302      	str	r3, [sp, #8]
 800d218:	32fe      	adds	r2, #254	; 0xfe
 800d21a:	eb02 030b 	add.w	r3, r2, fp
 800d21e:	46d8      	mov	r8, fp
 800d220:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	2830      	cmp	r0, #48	; 0x30
 800d228:	d0f7      	beq.n	800d21a <__gethex+0x1e>
 800d22a:	f7ff ffd1 	bl	800d1d0 <__hexdig_fun>
 800d22e:	4604      	mov	r4, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d138      	bne.n	800d2a6 <__gethex+0xaa>
 800d234:	49a7      	ldr	r1, [pc, #668]	; (800d4d4 <__gethex+0x2d8>)
 800d236:	2201      	movs	r2, #1
 800d238:	4640      	mov	r0, r8
 800d23a:	f7fe ff75 	bl	800c128 <strncmp>
 800d23e:	4606      	mov	r6, r0
 800d240:	2800      	cmp	r0, #0
 800d242:	d169      	bne.n	800d318 <__gethex+0x11c>
 800d244:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d248:	465d      	mov	r5, fp
 800d24a:	f7ff ffc1 	bl	800d1d0 <__hexdig_fun>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d064      	beq.n	800d31c <__gethex+0x120>
 800d252:	465a      	mov	r2, fp
 800d254:	7810      	ldrb	r0, [r2, #0]
 800d256:	2830      	cmp	r0, #48	; 0x30
 800d258:	4690      	mov	r8, r2
 800d25a:	f102 0201 	add.w	r2, r2, #1
 800d25e:	d0f9      	beq.n	800d254 <__gethex+0x58>
 800d260:	f7ff ffb6 	bl	800d1d0 <__hexdig_fun>
 800d264:	2301      	movs	r3, #1
 800d266:	fab0 f480 	clz	r4, r0
 800d26a:	0964      	lsrs	r4, r4, #5
 800d26c:	465e      	mov	r6, fp
 800d26e:	9301      	str	r3, [sp, #4]
 800d270:	4642      	mov	r2, r8
 800d272:	4615      	mov	r5, r2
 800d274:	3201      	adds	r2, #1
 800d276:	7828      	ldrb	r0, [r5, #0]
 800d278:	f7ff ffaa 	bl	800d1d0 <__hexdig_fun>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d1f8      	bne.n	800d272 <__gethex+0x76>
 800d280:	4994      	ldr	r1, [pc, #592]	; (800d4d4 <__gethex+0x2d8>)
 800d282:	2201      	movs	r2, #1
 800d284:	4628      	mov	r0, r5
 800d286:	f7fe ff4f 	bl	800c128 <strncmp>
 800d28a:	b978      	cbnz	r0, 800d2ac <__gethex+0xb0>
 800d28c:	b946      	cbnz	r6, 800d2a0 <__gethex+0xa4>
 800d28e:	1c6e      	adds	r6, r5, #1
 800d290:	4632      	mov	r2, r6
 800d292:	4615      	mov	r5, r2
 800d294:	3201      	adds	r2, #1
 800d296:	7828      	ldrb	r0, [r5, #0]
 800d298:	f7ff ff9a 	bl	800d1d0 <__hexdig_fun>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d1f8      	bne.n	800d292 <__gethex+0x96>
 800d2a0:	1b73      	subs	r3, r6, r5
 800d2a2:	009e      	lsls	r6, r3, #2
 800d2a4:	e004      	b.n	800d2b0 <__gethex+0xb4>
 800d2a6:	2400      	movs	r4, #0
 800d2a8:	4626      	mov	r6, r4
 800d2aa:	e7e1      	b.n	800d270 <__gethex+0x74>
 800d2ac:	2e00      	cmp	r6, #0
 800d2ae:	d1f7      	bne.n	800d2a0 <__gethex+0xa4>
 800d2b0:	782b      	ldrb	r3, [r5, #0]
 800d2b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d2b6:	2b50      	cmp	r3, #80	; 0x50
 800d2b8:	d13d      	bne.n	800d336 <__gethex+0x13a>
 800d2ba:	786b      	ldrb	r3, [r5, #1]
 800d2bc:	2b2b      	cmp	r3, #43	; 0x2b
 800d2be:	d02f      	beq.n	800d320 <__gethex+0x124>
 800d2c0:	2b2d      	cmp	r3, #45	; 0x2d
 800d2c2:	d031      	beq.n	800d328 <__gethex+0x12c>
 800d2c4:	1c69      	adds	r1, r5, #1
 800d2c6:	f04f 0b00 	mov.w	fp, #0
 800d2ca:	7808      	ldrb	r0, [r1, #0]
 800d2cc:	f7ff ff80 	bl	800d1d0 <__hexdig_fun>
 800d2d0:	1e42      	subs	r2, r0, #1
 800d2d2:	b2d2      	uxtb	r2, r2
 800d2d4:	2a18      	cmp	r2, #24
 800d2d6:	d82e      	bhi.n	800d336 <__gethex+0x13a>
 800d2d8:	f1a0 0210 	sub.w	r2, r0, #16
 800d2dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2e0:	f7ff ff76 	bl	800d1d0 <__hexdig_fun>
 800d2e4:	f100 3cff 	add.w	ip, r0, #4294967295
 800d2e8:	fa5f fc8c 	uxtb.w	ip, ip
 800d2ec:	f1bc 0f18 	cmp.w	ip, #24
 800d2f0:	d91d      	bls.n	800d32e <__gethex+0x132>
 800d2f2:	f1bb 0f00 	cmp.w	fp, #0
 800d2f6:	d000      	beq.n	800d2fa <__gethex+0xfe>
 800d2f8:	4252      	negs	r2, r2
 800d2fa:	4416      	add	r6, r2
 800d2fc:	f8ca 1000 	str.w	r1, [sl]
 800d300:	b1dc      	cbz	r4, 800d33a <__gethex+0x13e>
 800d302:	9b01      	ldr	r3, [sp, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	bf14      	ite	ne
 800d308:	f04f 0800 	movne.w	r8, #0
 800d30c:	f04f 0806 	moveq.w	r8, #6
 800d310:	4640      	mov	r0, r8
 800d312:	b005      	add	sp, #20
 800d314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d318:	4645      	mov	r5, r8
 800d31a:	4626      	mov	r6, r4
 800d31c:	2401      	movs	r4, #1
 800d31e:	e7c7      	b.n	800d2b0 <__gethex+0xb4>
 800d320:	f04f 0b00 	mov.w	fp, #0
 800d324:	1ca9      	adds	r1, r5, #2
 800d326:	e7d0      	b.n	800d2ca <__gethex+0xce>
 800d328:	f04f 0b01 	mov.w	fp, #1
 800d32c:	e7fa      	b.n	800d324 <__gethex+0x128>
 800d32e:	230a      	movs	r3, #10
 800d330:	fb03 0002 	mla	r0, r3, r2, r0
 800d334:	e7d0      	b.n	800d2d8 <__gethex+0xdc>
 800d336:	4629      	mov	r1, r5
 800d338:	e7e0      	b.n	800d2fc <__gethex+0x100>
 800d33a:	eba5 0308 	sub.w	r3, r5, r8
 800d33e:	3b01      	subs	r3, #1
 800d340:	4621      	mov	r1, r4
 800d342:	2b07      	cmp	r3, #7
 800d344:	dc0a      	bgt.n	800d35c <__gethex+0x160>
 800d346:	4648      	mov	r0, r9
 800d348:	f000 fb0e 	bl	800d968 <_Balloc>
 800d34c:	4604      	mov	r4, r0
 800d34e:	b940      	cbnz	r0, 800d362 <__gethex+0x166>
 800d350:	4b61      	ldr	r3, [pc, #388]	; (800d4d8 <__gethex+0x2dc>)
 800d352:	4602      	mov	r2, r0
 800d354:	21e4      	movs	r1, #228	; 0xe4
 800d356:	4861      	ldr	r0, [pc, #388]	; (800d4dc <__gethex+0x2e0>)
 800d358:	f7ff f804 	bl	800c364 <__assert_func>
 800d35c:	3101      	adds	r1, #1
 800d35e:	105b      	asrs	r3, r3, #1
 800d360:	e7ef      	b.n	800d342 <__gethex+0x146>
 800d362:	f100 0a14 	add.w	sl, r0, #20
 800d366:	2300      	movs	r3, #0
 800d368:	495a      	ldr	r1, [pc, #360]	; (800d4d4 <__gethex+0x2d8>)
 800d36a:	f8cd a004 	str.w	sl, [sp, #4]
 800d36e:	469b      	mov	fp, r3
 800d370:	45a8      	cmp	r8, r5
 800d372:	d342      	bcc.n	800d3fa <__gethex+0x1fe>
 800d374:	9801      	ldr	r0, [sp, #4]
 800d376:	f840 bb04 	str.w	fp, [r0], #4
 800d37a:	eba0 000a 	sub.w	r0, r0, sl
 800d37e:	1080      	asrs	r0, r0, #2
 800d380:	6120      	str	r0, [r4, #16]
 800d382:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d386:	4658      	mov	r0, fp
 800d388:	f000 fbe0 	bl	800db4c <__hi0bits>
 800d38c:	683d      	ldr	r5, [r7, #0]
 800d38e:	eba8 0000 	sub.w	r0, r8, r0
 800d392:	42a8      	cmp	r0, r5
 800d394:	dd59      	ble.n	800d44a <__gethex+0x24e>
 800d396:	eba0 0805 	sub.w	r8, r0, r5
 800d39a:	4641      	mov	r1, r8
 800d39c:	4620      	mov	r0, r4
 800d39e:	f000 ff6f 	bl	800e280 <__any_on>
 800d3a2:	4683      	mov	fp, r0
 800d3a4:	b1b8      	cbz	r0, 800d3d6 <__gethex+0x1da>
 800d3a6:	f108 33ff 	add.w	r3, r8, #4294967295
 800d3aa:	1159      	asrs	r1, r3, #5
 800d3ac:	f003 021f 	and.w	r2, r3, #31
 800d3b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d3b4:	f04f 0b01 	mov.w	fp, #1
 800d3b8:	fa0b f202 	lsl.w	r2, fp, r2
 800d3bc:	420a      	tst	r2, r1
 800d3be:	d00a      	beq.n	800d3d6 <__gethex+0x1da>
 800d3c0:	455b      	cmp	r3, fp
 800d3c2:	dd06      	ble.n	800d3d2 <__gethex+0x1d6>
 800d3c4:	f1a8 0102 	sub.w	r1, r8, #2
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 ff59 	bl	800e280 <__any_on>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d138      	bne.n	800d444 <__gethex+0x248>
 800d3d2:	f04f 0b02 	mov.w	fp, #2
 800d3d6:	4641      	mov	r1, r8
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7ff fea7 	bl	800d12c <rshift>
 800d3de:	4446      	add	r6, r8
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	42b3      	cmp	r3, r6
 800d3e4:	da41      	bge.n	800d46a <__gethex+0x26e>
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	4648      	mov	r0, r9
 800d3ea:	f000 fafd 	bl	800d9e8 <_Bfree>
 800d3ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	6013      	str	r3, [r2, #0]
 800d3f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d3f8:	e78a      	b.n	800d310 <__gethex+0x114>
 800d3fa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d3fe:	2a2e      	cmp	r2, #46	; 0x2e
 800d400:	d014      	beq.n	800d42c <__gethex+0x230>
 800d402:	2b20      	cmp	r3, #32
 800d404:	d106      	bne.n	800d414 <__gethex+0x218>
 800d406:	9b01      	ldr	r3, [sp, #4]
 800d408:	f843 bb04 	str.w	fp, [r3], #4
 800d40c:	f04f 0b00 	mov.w	fp, #0
 800d410:	9301      	str	r3, [sp, #4]
 800d412:	465b      	mov	r3, fp
 800d414:	7828      	ldrb	r0, [r5, #0]
 800d416:	9303      	str	r3, [sp, #12]
 800d418:	f7ff feda 	bl	800d1d0 <__hexdig_fun>
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	f000 000f 	and.w	r0, r0, #15
 800d422:	4098      	lsls	r0, r3
 800d424:	ea4b 0b00 	orr.w	fp, fp, r0
 800d428:	3304      	adds	r3, #4
 800d42a:	e7a1      	b.n	800d370 <__gethex+0x174>
 800d42c:	45a8      	cmp	r8, r5
 800d42e:	d8e8      	bhi.n	800d402 <__gethex+0x206>
 800d430:	2201      	movs	r2, #1
 800d432:	4628      	mov	r0, r5
 800d434:	9303      	str	r3, [sp, #12]
 800d436:	f7fe fe77 	bl	800c128 <strncmp>
 800d43a:	4926      	ldr	r1, [pc, #152]	; (800d4d4 <__gethex+0x2d8>)
 800d43c:	9b03      	ldr	r3, [sp, #12]
 800d43e:	2800      	cmp	r0, #0
 800d440:	d1df      	bne.n	800d402 <__gethex+0x206>
 800d442:	e795      	b.n	800d370 <__gethex+0x174>
 800d444:	f04f 0b03 	mov.w	fp, #3
 800d448:	e7c5      	b.n	800d3d6 <__gethex+0x1da>
 800d44a:	da0b      	bge.n	800d464 <__gethex+0x268>
 800d44c:	eba5 0800 	sub.w	r8, r5, r0
 800d450:	4621      	mov	r1, r4
 800d452:	4642      	mov	r2, r8
 800d454:	4648      	mov	r0, r9
 800d456:	f000 fce1 	bl	800de1c <__lshift>
 800d45a:	eba6 0608 	sub.w	r6, r6, r8
 800d45e:	4604      	mov	r4, r0
 800d460:	f100 0a14 	add.w	sl, r0, #20
 800d464:	f04f 0b00 	mov.w	fp, #0
 800d468:	e7ba      	b.n	800d3e0 <__gethex+0x1e4>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	42b3      	cmp	r3, r6
 800d46e:	dd73      	ble.n	800d558 <__gethex+0x35c>
 800d470:	1b9e      	subs	r6, r3, r6
 800d472:	42b5      	cmp	r5, r6
 800d474:	dc34      	bgt.n	800d4e0 <__gethex+0x2e4>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d023      	beq.n	800d4c4 <__gethex+0x2c8>
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d025      	beq.n	800d4cc <__gethex+0x2d0>
 800d480:	2b01      	cmp	r3, #1
 800d482:	d115      	bne.n	800d4b0 <__gethex+0x2b4>
 800d484:	42b5      	cmp	r5, r6
 800d486:	d113      	bne.n	800d4b0 <__gethex+0x2b4>
 800d488:	2d01      	cmp	r5, #1
 800d48a:	d10b      	bne.n	800d4a4 <__gethex+0x2a8>
 800d48c:	9a02      	ldr	r2, [sp, #8]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	2301      	movs	r3, #1
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	f8ca 3000 	str.w	r3, [sl]
 800d49a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d49c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d4a0:	601c      	str	r4, [r3, #0]
 800d4a2:	e735      	b.n	800d310 <__gethex+0x114>
 800d4a4:	1e69      	subs	r1, r5, #1
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 feea 	bl	800e280 <__any_on>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d1ed      	bne.n	800d48c <__gethex+0x290>
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	4648      	mov	r0, r9
 800d4b4:	f000 fa98 	bl	800d9e8 <_Bfree>
 800d4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d4c2:	e725      	b.n	800d310 <__gethex+0x114>
 800d4c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1f2      	bne.n	800d4b0 <__gethex+0x2b4>
 800d4ca:	e7df      	b.n	800d48c <__gethex+0x290>
 800d4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1dc      	bne.n	800d48c <__gethex+0x290>
 800d4d2:	e7ed      	b.n	800d4b0 <__gethex+0x2b4>
 800d4d4:	080124d4 	.word	0x080124d4
 800d4d8:	0801269e 	.word	0x0801269e
 800d4dc:	080126af 	.word	0x080126af
 800d4e0:	f106 38ff 	add.w	r8, r6, #4294967295
 800d4e4:	f1bb 0f00 	cmp.w	fp, #0
 800d4e8:	d133      	bne.n	800d552 <__gethex+0x356>
 800d4ea:	f1b8 0f00 	cmp.w	r8, #0
 800d4ee:	d004      	beq.n	800d4fa <__gethex+0x2fe>
 800d4f0:	4641      	mov	r1, r8
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 fec4 	bl	800e280 <__any_on>
 800d4f8:	4683      	mov	fp, r0
 800d4fa:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d4fe:	2301      	movs	r3, #1
 800d500:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d504:	f008 081f 	and.w	r8, r8, #31
 800d508:	fa03 f308 	lsl.w	r3, r3, r8
 800d50c:	4213      	tst	r3, r2
 800d50e:	4631      	mov	r1, r6
 800d510:	4620      	mov	r0, r4
 800d512:	bf18      	it	ne
 800d514:	f04b 0b02 	orrne.w	fp, fp, #2
 800d518:	1bad      	subs	r5, r5, r6
 800d51a:	f7ff fe07 	bl	800d12c <rshift>
 800d51e:	687e      	ldr	r6, [r7, #4]
 800d520:	f04f 0802 	mov.w	r8, #2
 800d524:	f1bb 0f00 	cmp.w	fp, #0
 800d528:	d04a      	beq.n	800d5c0 <__gethex+0x3c4>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d016      	beq.n	800d55e <__gethex+0x362>
 800d530:	2b03      	cmp	r3, #3
 800d532:	d018      	beq.n	800d566 <__gethex+0x36a>
 800d534:	2b01      	cmp	r3, #1
 800d536:	d109      	bne.n	800d54c <__gethex+0x350>
 800d538:	f01b 0f02 	tst.w	fp, #2
 800d53c:	d006      	beq.n	800d54c <__gethex+0x350>
 800d53e:	f8da 3000 	ldr.w	r3, [sl]
 800d542:	ea4b 0b03 	orr.w	fp, fp, r3
 800d546:	f01b 0f01 	tst.w	fp, #1
 800d54a:	d10f      	bne.n	800d56c <__gethex+0x370>
 800d54c:	f048 0810 	orr.w	r8, r8, #16
 800d550:	e036      	b.n	800d5c0 <__gethex+0x3c4>
 800d552:	f04f 0b01 	mov.w	fp, #1
 800d556:	e7d0      	b.n	800d4fa <__gethex+0x2fe>
 800d558:	f04f 0801 	mov.w	r8, #1
 800d55c:	e7e2      	b.n	800d524 <__gethex+0x328>
 800d55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d560:	f1c3 0301 	rsb	r3, r3, #1
 800d564:	930f      	str	r3, [sp, #60]	; 0x3c
 800d566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0ef      	beq.n	800d54c <__gethex+0x350>
 800d56c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d570:	f104 0214 	add.w	r2, r4, #20
 800d574:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d578:	9301      	str	r3, [sp, #4]
 800d57a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d57e:	2300      	movs	r3, #0
 800d580:	4694      	mov	ip, r2
 800d582:	f852 1b04 	ldr.w	r1, [r2], #4
 800d586:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d58a:	d01e      	beq.n	800d5ca <__gethex+0x3ce>
 800d58c:	3101      	adds	r1, #1
 800d58e:	f8cc 1000 	str.w	r1, [ip]
 800d592:	f1b8 0f02 	cmp.w	r8, #2
 800d596:	f104 0214 	add.w	r2, r4, #20
 800d59a:	d13d      	bne.n	800d618 <__gethex+0x41c>
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	d10b      	bne.n	800d5bc <__gethex+0x3c0>
 800d5a4:	1169      	asrs	r1, r5, #5
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	f005 051f 	and.w	r5, r5, #31
 800d5ac:	fa03 f505 	lsl.w	r5, r3, r5
 800d5b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5b4:	421d      	tst	r5, r3
 800d5b6:	bf18      	it	ne
 800d5b8:	f04f 0801 	movne.w	r8, #1
 800d5bc:	f048 0820 	orr.w	r8, r8, #32
 800d5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5c2:	601c      	str	r4, [r3, #0]
 800d5c4:	9b02      	ldr	r3, [sp, #8]
 800d5c6:	601e      	str	r6, [r3, #0]
 800d5c8:	e6a2      	b.n	800d310 <__gethex+0x114>
 800d5ca:	4290      	cmp	r0, r2
 800d5cc:	f842 3c04 	str.w	r3, [r2, #-4]
 800d5d0:	d8d6      	bhi.n	800d580 <__gethex+0x384>
 800d5d2:	68a2      	ldr	r2, [r4, #8]
 800d5d4:	4593      	cmp	fp, r2
 800d5d6:	db17      	blt.n	800d608 <__gethex+0x40c>
 800d5d8:	6861      	ldr	r1, [r4, #4]
 800d5da:	4648      	mov	r0, r9
 800d5dc:	3101      	adds	r1, #1
 800d5de:	f000 f9c3 	bl	800d968 <_Balloc>
 800d5e2:	4682      	mov	sl, r0
 800d5e4:	b918      	cbnz	r0, 800d5ee <__gethex+0x3f2>
 800d5e6:	4b1b      	ldr	r3, [pc, #108]	; (800d654 <__gethex+0x458>)
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	2184      	movs	r1, #132	; 0x84
 800d5ec:	e6b3      	b.n	800d356 <__gethex+0x15a>
 800d5ee:	6922      	ldr	r2, [r4, #16]
 800d5f0:	3202      	adds	r2, #2
 800d5f2:	f104 010c 	add.w	r1, r4, #12
 800d5f6:	0092      	lsls	r2, r2, #2
 800d5f8:	300c      	adds	r0, #12
 800d5fa:	f7fe fe95 	bl	800c328 <memcpy>
 800d5fe:	4621      	mov	r1, r4
 800d600:	4648      	mov	r0, r9
 800d602:	f000 f9f1 	bl	800d9e8 <_Bfree>
 800d606:	4654      	mov	r4, sl
 800d608:	6922      	ldr	r2, [r4, #16]
 800d60a:	1c51      	adds	r1, r2, #1
 800d60c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d610:	6121      	str	r1, [r4, #16]
 800d612:	2101      	movs	r1, #1
 800d614:	6151      	str	r1, [r2, #20]
 800d616:	e7bc      	b.n	800d592 <__gethex+0x396>
 800d618:	6921      	ldr	r1, [r4, #16]
 800d61a:	4559      	cmp	r1, fp
 800d61c:	dd0b      	ble.n	800d636 <__gethex+0x43a>
 800d61e:	2101      	movs	r1, #1
 800d620:	4620      	mov	r0, r4
 800d622:	f7ff fd83 	bl	800d12c <rshift>
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	3601      	adds	r6, #1
 800d62a:	42b3      	cmp	r3, r6
 800d62c:	f6ff aedb 	blt.w	800d3e6 <__gethex+0x1ea>
 800d630:	f04f 0801 	mov.w	r8, #1
 800d634:	e7c2      	b.n	800d5bc <__gethex+0x3c0>
 800d636:	f015 051f 	ands.w	r5, r5, #31
 800d63a:	d0f9      	beq.n	800d630 <__gethex+0x434>
 800d63c:	9b01      	ldr	r3, [sp, #4]
 800d63e:	441a      	add	r2, r3
 800d640:	f1c5 0520 	rsb	r5, r5, #32
 800d644:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d648:	f000 fa80 	bl	800db4c <__hi0bits>
 800d64c:	42a8      	cmp	r0, r5
 800d64e:	dbe6      	blt.n	800d61e <__gethex+0x422>
 800d650:	e7ee      	b.n	800d630 <__gethex+0x434>
 800d652:	bf00      	nop
 800d654:	0801269e 	.word	0x0801269e

0800d658 <L_shift>:
 800d658:	f1c2 0208 	rsb	r2, r2, #8
 800d65c:	0092      	lsls	r2, r2, #2
 800d65e:	b570      	push	{r4, r5, r6, lr}
 800d660:	f1c2 0620 	rsb	r6, r2, #32
 800d664:	6843      	ldr	r3, [r0, #4]
 800d666:	6804      	ldr	r4, [r0, #0]
 800d668:	fa03 f506 	lsl.w	r5, r3, r6
 800d66c:	432c      	orrs	r4, r5
 800d66e:	40d3      	lsrs	r3, r2
 800d670:	6004      	str	r4, [r0, #0]
 800d672:	f840 3f04 	str.w	r3, [r0, #4]!
 800d676:	4288      	cmp	r0, r1
 800d678:	d3f4      	bcc.n	800d664 <L_shift+0xc>
 800d67a:	bd70      	pop	{r4, r5, r6, pc}

0800d67c <__match>:
 800d67c:	b530      	push	{r4, r5, lr}
 800d67e:	6803      	ldr	r3, [r0, #0]
 800d680:	3301      	adds	r3, #1
 800d682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d686:	b914      	cbnz	r4, 800d68e <__match+0x12>
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	2001      	movs	r0, #1
 800d68c:	bd30      	pop	{r4, r5, pc}
 800d68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d692:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d696:	2d19      	cmp	r5, #25
 800d698:	bf98      	it	ls
 800d69a:	3220      	addls	r2, #32
 800d69c:	42a2      	cmp	r2, r4
 800d69e:	d0f0      	beq.n	800d682 <__match+0x6>
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	e7f3      	b.n	800d68c <__match+0x10>

0800d6a4 <__hexnan>:
 800d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	680b      	ldr	r3, [r1, #0]
 800d6aa:	6801      	ldr	r1, [r0, #0]
 800d6ac:	115e      	asrs	r6, r3, #5
 800d6ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6b2:	f013 031f 	ands.w	r3, r3, #31
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	bf18      	it	ne
 800d6ba:	3604      	addne	r6, #4
 800d6bc:	2500      	movs	r5, #0
 800d6be:	1f37      	subs	r7, r6, #4
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	4690      	mov	r8, r2
 800d6c4:	9301      	str	r3, [sp, #4]
 800d6c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6ca:	46b9      	mov	r9, r7
 800d6cc:	463c      	mov	r4, r7
 800d6ce:	9502      	str	r5, [sp, #8]
 800d6d0:	46ab      	mov	fp, r5
 800d6d2:	784a      	ldrb	r2, [r1, #1]
 800d6d4:	1c4b      	adds	r3, r1, #1
 800d6d6:	9303      	str	r3, [sp, #12]
 800d6d8:	b342      	cbz	r2, 800d72c <__hexnan+0x88>
 800d6da:	4610      	mov	r0, r2
 800d6dc:	9105      	str	r1, [sp, #20]
 800d6de:	9204      	str	r2, [sp, #16]
 800d6e0:	f7ff fd76 	bl	800d1d0 <__hexdig_fun>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d14f      	bne.n	800d788 <__hexnan+0xe4>
 800d6e8:	9a04      	ldr	r2, [sp, #16]
 800d6ea:	9905      	ldr	r1, [sp, #20]
 800d6ec:	2a20      	cmp	r2, #32
 800d6ee:	d818      	bhi.n	800d722 <__hexnan+0x7e>
 800d6f0:	9b02      	ldr	r3, [sp, #8]
 800d6f2:	459b      	cmp	fp, r3
 800d6f4:	dd13      	ble.n	800d71e <__hexnan+0x7a>
 800d6f6:	454c      	cmp	r4, r9
 800d6f8:	d206      	bcs.n	800d708 <__hexnan+0x64>
 800d6fa:	2d07      	cmp	r5, #7
 800d6fc:	dc04      	bgt.n	800d708 <__hexnan+0x64>
 800d6fe:	462a      	mov	r2, r5
 800d700:	4649      	mov	r1, r9
 800d702:	4620      	mov	r0, r4
 800d704:	f7ff ffa8 	bl	800d658 <L_shift>
 800d708:	4544      	cmp	r4, r8
 800d70a:	d950      	bls.n	800d7ae <__hexnan+0x10a>
 800d70c:	2300      	movs	r3, #0
 800d70e:	f1a4 0904 	sub.w	r9, r4, #4
 800d712:	f844 3c04 	str.w	r3, [r4, #-4]
 800d716:	f8cd b008 	str.w	fp, [sp, #8]
 800d71a:	464c      	mov	r4, r9
 800d71c:	461d      	mov	r5, r3
 800d71e:	9903      	ldr	r1, [sp, #12]
 800d720:	e7d7      	b.n	800d6d2 <__hexnan+0x2e>
 800d722:	2a29      	cmp	r2, #41	; 0x29
 800d724:	d155      	bne.n	800d7d2 <__hexnan+0x12e>
 800d726:	3102      	adds	r1, #2
 800d728:	f8ca 1000 	str.w	r1, [sl]
 800d72c:	f1bb 0f00 	cmp.w	fp, #0
 800d730:	d04f      	beq.n	800d7d2 <__hexnan+0x12e>
 800d732:	454c      	cmp	r4, r9
 800d734:	d206      	bcs.n	800d744 <__hexnan+0xa0>
 800d736:	2d07      	cmp	r5, #7
 800d738:	dc04      	bgt.n	800d744 <__hexnan+0xa0>
 800d73a:	462a      	mov	r2, r5
 800d73c:	4649      	mov	r1, r9
 800d73e:	4620      	mov	r0, r4
 800d740:	f7ff ff8a 	bl	800d658 <L_shift>
 800d744:	4544      	cmp	r4, r8
 800d746:	d934      	bls.n	800d7b2 <__hexnan+0x10e>
 800d748:	f1a8 0204 	sub.w	r2, r8, #4
 800d74c:	4623      	mov	r3, r4
 800d74e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d752:	f842 1f04 	str.w	r1, [r2, #4]!
 800d756:	429f      	cmp	r7, r3
 800d758:	d2f9      	bcs.n	800d74e <__hexnan+0xaa>
 800d75a:	1b3b      	subs	r3, r7, r4
 800d75c:	f023 0303 	bic.w	r3, r3, #3
 800d760:	3304      	adds	r3, #4
 800d762:	3e03      	subs	r6, #3
 800d764:	3401      	adds	r4, #1
 800d766:	42a6      	cmp	r6, r4
 800d768:	bf38      	it	cc
 800d76a:	2304      	movcc	r3, #4
 800d76c:	4443      	add	r3, r8
 800d76e:	2200      	movs	r2, #0
 800d770:	f843 2b04 	str.w	r2, [r3], #4
 800d774:	429f      	cmp	r7, r3
 800d776:	d2fb      	bcs.n	800d770 <__hexnan+0xcc>
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	b91b      	cbnz	r3, 800d784 <__hexnan+0xe0>
 800d77c:	4547      	cmp	r7, r8
 800d77e:	d126      	bne.n	800d7ce <__hexnan+0x12a>
 800d780:	2301      	movs	r3, #1
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	2005      	movs	r0, #5
 800d786:	e025      	b.n	800d7d4 <__hexnan+0x130>
 800d788:	3501      	adds	r5, #1
 800d78a:	2d08      	cmp	r5, #8
 800d78c:	f10b 0b01 	add.w	fp, fp, #1
 800d790:	dd06      	ble.n	800d7a0 <__hexnan+0xfc>
 800d792:	4544      	cmp	r4, r8
 800d794:	d9c3      	bls.n	800d71e <__hexnan+0x7a>
 800d796:	2300      	movs	r3, #0
 800d798:	f844 3c04 	str.w	r3, [r4, #-4]
 800d79c:	2501      	movs	r5, #1
 800d79e:	3c04      	subs	r4, #4
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	f000 000f 	and.w	r0, r0, #15
 800d7a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7aa:	6020      	str	r0, [r4, #0]
 800d7ac:	e7b7      	b.n	800d71e <__hexnan+0x7a>
 800d7ae:	2508      	movs	r5, #8
 800d7b0:	e7b5      	b.n	800d71e <__hexnan+0x7a>
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0df      	beq.n	800d778 <__hexnan+0xd4>
 800d7b8:	f1c3 0320 	rsb	r3, r3, #32
 800d7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c0:	40da      	lsrs	r2, r3
 800d7c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d7cc:	e7d4      	b.n	800d778 <__hexnan+0xd4>
 800d7ce:	3f04      	subs	r7, #4
 800d7d0:	e7d2      	b.n	800d778 <__hexnan+0xd4>
 800d7d2:	2004      	movs	r0, #4
 800d7d4:	b007      	add	sp, #28
 800d7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d7dc <malloc>:
 800d7dc:	4b02      	ldr	r3, [pc, #8]	; (800d7e8 <malloc+0xc>)
 800d7de:	4601      	mov	r1, r0
 800d7e0:	6818      	ldr	r0, [r3, #0]
 800d7e2:	f000 b823 	b.w	800d82c <_malloc_r>
 800d7e6:	bf00      	nop
 800d7e8:	200001f8 	.word	0x200001f8

0800d7ec <sbrk_aligned>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4e0e      	ldr	r6, [pc, #56]	; (800d828 <sbrk_aligned+0x3c>)
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	6831      	ldr	r1, [r6, #0]
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	b911      	cbnz	r1, 800d7fe <sbrk_aligned+0x12>
 800d7f8:	f001 fbbc 	bl	800ef74 <_sbrk_r>
 800d7fc:	6030      	str	r0, [r6, #0]
 800d7fe:	4621      	mov	r1, r4
 800d800:	4628      	mov	r0, r5
 800d802:	f001 fbb7 	bl	800ef74 <_sbrk_r>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d00a      	beq.n	800d820 <sbrk_aligned+0x34>
 800d80a:	1cc4      	adds	r4, r0, #3
 800d80c:	f024 0403 	bic.w	r4, r4, #3
 800d810:	42a0      	cmp	r0, r4
 800d812:	d007      	beq.n	800d824 <sbrk_aligned+0x38>
 800d814:	1a21      	subs	r1, r4, r0
 800d816:	4628      	mov	r0, r5
 800d818:	f001 fbac 	bl	800ef74 <_sbrk_r>
 800d81c:	3001      	adds	r0, #1
 800d81e:	d101      	bne.n	800d824 <sbrk_aligned+0x38>
 800d820:	f04f 34ff 	mov.w	r4, #4294967295
 800d824:	4620      	mov	r0, r4
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	20000ac4 	.word	0x20000ac4

0800d82c <_malloc_r>:
 800d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d830:	1ccd      	adds	r5, r1, #3
 800d832:	f025 0503 	bic.w	r5, r5, #3
 800d836:	3508      	adds	r5, #8
 800d838:	2d0c      	cmp	r5, #12
 800d83a:	bf38      	it	cc
 800d83c:	250c      	movcc	r5, #12
 800d83e:	2d00      	cmp	r5, #0
 800d840:	4607      	mov	r7, r0
 800d842:	db01      	blt.n	800d848 <_malloc_r+0x1c>
 800d844:	42a9      	cmp	r1, r5
 800d846:	d905      	bls.n	800d854 <_malloc_r+0x28>
 800d848:	230c      	movs	r3, #12
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	2600      	movs	r6, #0
 800d84e:	4630      	mov	r0, r6
 800d850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d854:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d928 <_malloc_r+0xfc>
 800d858:	f000 f87a 	bl	800d950 <__malloc_lock>
 800d85c:	f8d8 3000 	ldr.w	r3, [r8]
 800d860:	461c      	mov	r4, r3
 800d862:	bb5c      	cbnz	r4, 800d8bc <_malloc_r+0x90>
 800d864:	4629      	mov	r1, r5
 800d866:	4638      	mov	r0, r7
 800d868:	f7ff ffc0 	bl	800d7ec <sbrk_aligned>
 800d86c:	1c43      	adds	r3, r0, #1
 800d86e:	4604      	mov	r4, r0
 800d870:	d155      	bne.n	800d91e <_malloc_r+0xf2>
 800d872:	f8d8 4000 	ldr.w	r4, [r8]
 800d876:	4626      	mov	r6, r4
 800d878:	2e00      	cmp	r6, #0
 800d87a:	d145      	bne.n	800d908 <_malloc_r+0xdc>
 800d87c:	2c00      	cmp	r4, #0
 800d87e:	d048      	beq.n	800d912 <_malloc_r+0xe6>
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	4631      	mov	r1, r6
 800d884:	4638      	mov	r0, r7
 800d886:	eb04 0903 	add.w	r9, r4, r3
 800d88a:	f001 fb73 	bl	800ef74 <_sbrk_r>
 800d88e:	4581      	cmp	r9, r0
 800d890:	d13f      	bne.n	800d912 <_malloc_r+0xe6>
 800d892:	6821      	ldr	r1, [r4, #0]
 800d894:	1a6d      	subs	r5, r5, r1
 800d896:	4629      	mov	r1, r5
 800d898:	4638      	mov	r0, r7
 800d89a:	f7ff ffa7 	bl	800d7ec <sbrk_aligned>
 800d89e:	3001      	adds	r0, #1
 800d8a0:	d037      	beq.n	800d912 <_malloc_r+0xe6>
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	442b      	add	r3, r5
 800d8a6:	6023      	str	r3, [r4, #0]
 800d8a8:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d038      	beq.n	800d922 <_malloc_r+0xf6>
 800d8b0:	685a      	ldr	r2, [r3, #4]
 800d8b2:	42a2      	cmp	r2, r4
 800d8b4:	d12b      	bne.n	800d90e <_malloc_r+0xe2>
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	605a      	str	r2, [r3, #4]
 800d8ba:	e00f      	b.n	800d8dc <_malloc_r+0xb0>
 800d8bc:	6822      	ldr	r2, [r4, #0]
 800d8be:	1b52      	subs	r2, r2, r5
 800d8c0:	d41f      	bmi.n	800d902 <_malloc_r+0xd6>
 800d8c2:	2a0b      	cmp	r2, #11
 800d8c4:	d917      	bls.n	800d8f6 <_malloc_r+0xca>
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	6025      	str	r5, [r4, #0]
 800d8cc:	bf18      	it	ne
 800d8ce:	6059      	strne	r1, [r3, #4]
 800d8d0:	6863      	ldr	r3, [r4, #4]
 800d8d2:	bf08      	it	eq
 800d8d4:	f8c8 1000 	streq.w	r1, [r8]
 800d8d8:	5162      	str	r2, [r4, r5]
 800d8da:	604b      	str	r3, [r1, #4]
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f104 060b 	add.w	r6, r4, #11
 800d8e2:	f000 f83b 	bl	800d95c <__malloc_unlock>
 800d8e6:	f026 0607 	bic.w	r6, r6, #7
 800d8ea:	1d23      	adds	r3, r4, #4
 800d8ec:	1af2      	subs	r2, r6, r3
 800d8ee:	d0ae      	beq.n	800d84e <_malloc_r+0x22>
 800d8f0:	1b9b      	subs	r3, r3, r6
 800d8f2:	50a3      	str	r3, [r4, r2]
 800d8f4:	e7ab      	b.n	800d84e <_malloc_r+0x22>
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	6862      	ldr	r2, [r4, #4]
 800d8fa:	d1dd      	bne.n	800d8b8 <_malloc_r+0x8c>
 800d8fc:	f8c8 2000 	str.w	r2, [r8]
 800d900:	e7ec      	b.n	800d8dc <_malloc_r+0xb0>
 800d902:	4623      	mov	r3, r4
 800d904:	6864      	ldr	r4, [r4, #4]
 800d906:	e7ac      	b.n	800d862 <_malloc_r+0x36>
 800d908:	4634      	mov	r4, r6
 800d90a:	6876      	ldr	r6, [r6, #4]
 800d90c:	e7b4      	b.n	800d878 <_malloc_r+0x4c>
 800d90e:	4613      	mov	r3, r2
 800d910:	e7cc      	b.n	800d8ac <_malloc_r+0x80>
 800d912:	230c      	movs	r3, #12
 800d914:	603b      	str	r3, [r7, #0]
 800d916:	4638      	mov	r0, r7
 800d918:	f000 f820 	bl	800d95c <__malloc_unlock>
 800d91c:	e797      	b.n	800d84e <_malloc_r+0x22>
 800d91e:	6025      	str	r5, [r4, #0]
 800d920:	e7dc      	b.n	800d8dc <_malloc_r+0xb0>
 800d922:	605b      	str	r3, [r3, #4]
 800d924:	deff      	udf	#255	; 0xff
 800d926:	bf00      	nop
 800d928:	20000ac0 	.word	0x20000ac0

0800d92c <__ascii_mbtowc>:
 800d92c:	b082      	sub	sp, #8
 800d92e:	b901      	cbnz	r1, 800d932 <__ascii_mbtowc+0x6>
 800d930:	a901      	add	r1, sp, #4
 800d932:	b142      	cbz	r2, 800d946 <__ascii_mbtowc+0x1a>
 800d934:	b14b      	cbz	r3, 800d94a <__ascii_mbtowc+0x1e>
 800d936:	7813      	ldrb	r3, [r2, #0]
 800d938:	600b      	str	r3, [r1, #0]
 800d93a:	7812      	ldrb	r2, [r2, #0]
 800d93c:	1e10      	subs	r0, r2, #0
 800d93e:	bf18      	it	ne
 800d940:	2001      	movne	r0, #1
 800d942:	b002      	add	sp, #8
 800d944:	4770      	bx	lr
 800d946:	4610      	mov	r0, r2
 800d948:	e7fb      	b.n	800d942 <__ascii_mbtowc+0x16>
 800d94a:	f06f 0001 	mvn.w	r0, #1
 800d94e:	e7f8      	b.n	800d942 <__ascii_mbtowc+0x16>

0800d950 <__malloc_lock>:
 800d950:	4801      	ldr	r0, [pc, #4]	; (800d958 <__malloc_lock+0x8>)
 800d952:	f7fe bcdf 	b.w	800c314 <__retarget_lock_acquire_recursive>
 800d956:	bf00      	nop
 800d958:	20000abc 	.word	0x20000abc

0800d95c <__malloc_unlock>:
 800d95c:	4801      	ldr	r0, [pc, #4]	; (800d964 <__malloc_unlock+0x8>)
 800d95e:	f7fe bcda 	b.w	800c316 <__retarget_lock_release_recursive>
 800d962:	bf00      	nop
 800d964:	20000abc 	.word	0x20000abc

0800d968 <_Balloc>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	69c6      	ldr	r6, [r0, #28]
 800d96c:	4604      	mov	r4, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	b976      	cbnz	r6, 800d990 <_Balloc+0x28>
 800d972:	2010      	movs	r0, #16
 800d974:	f7ff ff32 	bl	800d7dc <malloc>
 800d978:	4602      	mov	r2, r0
 800d97a:	61e0      	str	r0, [r4, #28]
 800d97c:	b920      	cbnz	r0, 800d988 <_Balloc+0x20>
 800d97e:	4b18      	ldr	r3, [pc, #96]	; (800d9e0 <_Balloc+0x78>)
 800d980:	4818      	ldr	r0, [pc, #96]	; (800d9e4 <_Balloc+0x7c>)
 800d982:	216b      	movs	r1, #107	; 0x6b
 800d984:	f7fe fcee 	bl	800c364 <__assert_func>
 800d988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d98c:	6006      	str	r6, [r0, #0]
 800d98e:	60c6      	str	r6, [r0, #12]
 800d990:	69e6      	ldr	r6, [r4, #28]
 800d992:	68f3      	ldr	r3, [r6, #12]
 800d994:	b183      	cbz	r3, 800d9b8 <_Balloc+0x50>
 800d996:	69e3      	ldr	r3, [r4, #28]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d99e:	b9b8      	cbnz	r0, 800d9d0 <_Balloc+0x68>
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9a6:	1d72      	adds	r2, r6, #5
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f001 faf9 	bl	800efa2 <_calloc_r>
 800d9b0:	b160      	cbz	r0, 800d9cc <_Balloc+0x64>
 800d9b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9b6:	e00e      	b.n	800d9d6 <_Balloc+0x6e>
 800d9b8:	2221      	movs	r2, #33	; 0x21
 800d9ba:	2104      	movs	r1, #4
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f001 faf0 	bl	800efa2 <_calloc_r>
 800d9c2:	69e3      	ldr	r3, [r4, #28]
 800d9c4:	60f0      	str	r0, [r6, #12]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1e4      	bne.n	800d996 <_Balloc+0x2e>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}
 800d9d0:	6802      	ldr	r2, [r0, #0]
 800d9d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9dc:	e7f7      	b.n	800d9ce <_Balloc+0x66>
 800d9de:	bf00      	nop
 800d9e0:	08012584 	.word	0x08012584
 800d9e4:	0801270f 	.word	0x0801270f

0800d9e8 <_Bfree>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	69c6      	ldr	r6, [r0, #28]
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	b976      	cbnz	r6, 800da10 <_Bfree+0x28>
 800d9f2:	2010      	movs	r0, #16
 800d9f4:	f7ff fef2 	bl	800d7dc <malloc>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	61e8      	str	r0, [r5, #28]
 800d9fc:	b920      	cbnz	r0, 800da08 <_Bfree+0x20>
 800d9fe:	4b09      	ldr	r3, [pc, #36]	; (800da24 <_Bfree+0x3c>)
 800da00:	4809      	ldr	r0, [pc, #36]	; (800da28 <_Bfree+0x40>)
 800da02:	218f      	movs	r1, #143	; 0x8f
 800da04:	f7fe fcae 	bl	800c364 <__assert_func>
 800da08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da0c:	6006      	str	r6, [r0, #0]
 800da0e:	60c6      	str	r6, [r0, #12]
 800da10:	b13c      	cbz	r4, 800da22 <_Bfree+0x3a>
 800da12:	69eb      	ldr	r3, [r5, #28]
 800da14:	6862      	ldr	r2, [r4, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da1c:	6021      	str	r1, [r4, #0]
 800da1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	08012584 	.word	0x08012584
 800da28:	0801270f 	.word	0x0801270f

0800da2c <__multadd>:
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	690d      	ldr	r5, [r1, #16]
 800da32:	4607      	mov	r7, r0
 800da34:	460c      	mov	r4, r1
 800da36:	461e      	mov	r6, r3
 800da38:	f101 0c14 	add.w	ip, r1, #20
 800da3c:	2000      	movs	r0, #0
 800da3e:	f8dc 3000 	ldr.w	r3, [ip]
 800da42:	b299      	uxth	r1, r3
 800da44:	fb02 6101 	mla	r1, r2, r1, r6
 800da48:	0c1e      	lsrs	r6, r3, #16
 800da4a:	0c0b      	lsrs	r3, r1, #16
 800da4c:	fb02 3306 	mla	r3, r2, r6, r3
 800da50:	b289      	uxth	r1, r1
 800da52:	3001      	adds	r0, #1
 800da54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da58:	4285      	cmp	r5, r0
 800da5a:	f84c 1b04 	str.w	r1, [ip], #4
 800da5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da62:	dcec      	bgt.n	800da3e <__multadd+0x12>
 800da64:	b30e      	cbz	r6, 800daaa <__multadd+0x7e>
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	42ab      	cmp	r3, r5
 800da6a:	dc19      	bgt.n	800daa0 <__multadd+0x74>
 800da6c:	6861      	ldr	r1, [r4, #4]
 800da6e:	4638      	mov	r0, r7
 800da70:	3101      	adds	r1, #1
 800da72:	f7ff ff79 	bl	800d968 <_Balloc>
 800da76:	4680      	mov	r8, r0
 800da78:	b928      	cbnz	r0, 800da86 <__multadd+0x5a>
 800da7a:	4602      	mov	r2, r0
 800da7c:	4b0c      	ldr	r3, [pc, #48]	; (800dab0 <__multadd+0x84>)
 800da7e:	480d      	ldr	r0, [pc, #52]	; (800dab4 <__multadd+0x88>)
 800da80:	21ba      	movs	r1, #186	; 0xba
 800da82:	f7fe fc6f 	bl	800c364 <__assert_func>
 800da86:	6922      	ldr	r2, [r4, #16]
 800da88:	3202      	adds	r2, #2
 800da8a:	f104 010c 	add.w	r1, r4, #12
 800da8e:	0092      	lsls	r2, r2, #2
 800da90:	300c      	adds	r0, #12
 800da92:	f7fe fc49 	bl	800c328 <memcpy>
 800da96:	4621      	mov	r1, r4
 800da98:	4638      	mov	r0, r7
 800da9a:	f7ff ffa5 	bl	800d9e8 <_Bfree>
 800da9e:	4644      	mov	r4, r8
 800daa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800daa4:	3501      	adds	r5, #1
 800daa6:	615e      	str	r6, [r3, #20]
 800daa8:	6125      	str	r5, [r4, #16]
 800daaa:	4620      	mov	r0, r4
 800daac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab0:	0801269e 	.word	0x0801269e
 800dab4:	0801270f 	.word	0x0801270f

0800dab8 <__s2b>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	460c      	mov	r4, r1
 800dabe:	4615      	mov	r5, r2
 800dac0:	461f      	mov	r7, r3
 800dac2:	2209      	movs	r2, #9
 800dac4:	3308      	adds	r3, #8
 800dac6:	4606      	mov	r6, r0
 800dac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dacc:	2100      	movs	r1, #0
 800dace:	2201      	movs	r2, #1
 800dad0:	429a      	cmp	r2, r3
 800dad2:	db09      	blt.n	800dae8 <__s2b+0x30>
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ff47 	bl	800d968 <_Balloc>
 800dada:	b940      	cbnz	r0, 800daee <__s2b+0x36>
 800dadc:	4602      	mov	r2, r0
 800dade:	4b19      	ldr	r3, [pc, #100]	; (800db44 <__s2b+0x8c>)
 800dae0:	4819      	ldr	r0, [pc, #100]	; (800db48 <__s2b+0x90>)
 800dae2:	21d3      	movs	r1, #211	; 0xd3
 800dae4:	f7fe fc3e 	bl	800c364 <__assert_func>
 800dae8:	0052      	lsls	r2, r2, #1
 800daea:	3101      	adds	r1, #1
 800daec:	e7f0      	b.n	800dad0 <__s2b+0x18>
 800daee:	9b08      	ldr	r3, [sp, #32]
 800daf0:	6143      	str	r3, [r0, #20]
 800daf2:	2d09      	cmp	r5, #9
 800daf4:	f04f 0301 	mov.w	r3, #1
 800daf8:	6103      	str	r3, [r0, #16]
 800dafa:	dd16      	ble.n	800db2a <__s2b+0x72>
 800dafc:	f104 0909 	add.w	r9, r4, #9
 800db00:	46c8      	mov	r8, r9
 800db02:	442c      	add	r4, r5
 800db04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db08:	4601      	mov	r1, r0
 800db0a:	3b30      	subs	r3, #48	; 0x30
 800db0c:	220a      	movs	r2, #10
 800db0e:	4630      	mov	r0, r6
 800db10:	f7ff ff8c 	bl	800da2c <__multadd>
 800db14:	45a0      	cmp	r8, r4
 800db16:	d1f5      	bne.n	800db04 <__s2b+0x4c>
 800db18:	f1a5 0408 	sub.w	r4, r5, #8
 800db1c:	444c      	add	r4, r9
 800db1e:	1b2d      	subs	r5, r5, r4
 800db20:	1963      	adds	r3, r4, r5
 800db22:	42bb      	cmp	r3, r7
 800db24:	db04      	blt.n	800db30 <__s2b+0x78>
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	340a      	adds	r4, #10
 800db2c:	2509      	movs	r5, #9
 800db2e:	e7f6      	b.n	800db1e <__s2b+0x66>
 800db30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db34:	4601      	mov	r1, r0
 800db36:	3b30      	subs	r3, #48	; 0x30
 800db38:	220a      	movs	r2, #10
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7ff ff76 	bl	800da2c <__multadd>
 800db40:	e7ee      	b.n	800db20 <__s2b+0x68>
 800db42:	bf00      	nop
 800db44:	0801269e 	.word	0x0801269e
 800db48:	0801270f 	.word	0x0801270f

0800db4c <__hi0bits>:
 800db4c:	0c03      	lsrs	r3, r0, #16
 800db4e:	041b      	lsls	r3, r3, #16
 800db50:	b9d3      	cbnz	r3, 800db88 <__hi0bits+0x3c>
 800db52:	0400      	lsls	r0, r0, #16
 800db54:	2310      	movs	r3, #16
 800db56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db5a:	bf04      	itt	eq
 800db5c:	0200      	lsleq	r0, r0, #8
 800db5e:	3308      	addeq	r3, #8
 800db60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db64:	bf04      	itt	eq
 800db66:	0100      	lsleq	r0, r0, #4
 800db68:	3304      	addeq	r3, #4
 800db6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db6e:	bf04      	itt	eq
 800db70:	0080      	lsleq	r0, r0, #2
 800db72:	3302      	addeq	r3, #2
 800db74:	2800      	cmp	r0, #0
 800db76:	db05      	blt.n	800db84 <__hi0bits+0x38>
 800db78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db7c:	f103 0301 	add.w	r3, r3, #1
 800db80:	bf08      	it	eq
 800db82:	2320      	moveq	r3, #32
 800db84:	4618      	mov	r0, r3
 800db86:	4770      	bx	lr
 800db88:	2300      	movs	r3, #0
 800db8a:	e7e4      	b.n	800db56 <__hi0bits+0xa>

0800db8c <__lo0bits>:
 800db8c:	6803      	ldr	r3, [r0, #0]
 800db8e:	f013 0207 	ands.w	r2, r3, #7
 800db92:	d00c      	beq.n	800dbae <__lo0bits+0x22>
 800db94:	07d9      	lsls	r1, r3, #31
 800db96:	d422      	bmi.n	800dbde <__lo0bits+0x52>
 800db98:	079a      	lsls	r2, r3, #30
 800db9a:	bf49      	itett	mi
 800db9c:	085b      	lsrmi	r3, r3, #1
 800db9e:	089b      	lsrpl	r3, r3, #2
 800dba0:	6003      	strmi	r3, [r0, #0]
 800dba2:	2201      	movmi	r2, #1
 800dba4:	bf5c      	itt	pl
 800dba6:	6003      	strpl	r3, [r0, #0]
 800dba8:	2202      	movpl	r2, #2
 800dbaa:	4610      	mov	r0, r2
 800dbac:	4770      	bx	lr
 800dbae:	b299      	uxth	r1, r3
 800dbb0:	b909      	cbnz	r1, 800dbb6 <__lo0bits+0x2a>
 800dbb2:	0c1b      	lsrs	r3, r3, #16
 800dbb4:	2210      	movs	r2, #16
 800dbb6:	b2d9      	uxtb	r1, r3
 800dbb8:	b909      	cbnz	r1, 800dbbe <__lo0bits+0x32>
 800dbba:	3208      	adds	r2, #8
 800dbbc:	0a1b      	lsrs	r3, r3, #8
 800dbbe:	0719      	lsls	r1, r3, #28
 800dbc0:	bf04      	itt	eq
 800dbc2:	091b      	lsreq	r3, r3, #4
 800dbc4:	3204      	addeq	r2, #4
 800dbc6:	0799      	lsls	r1, r3, #30
 800dbc8:	bf04      	itt	eq
 800dbca:	089b      	lsreq	r3, r3, #2
 800dbcc:	3202      	addeq	r2, #2
 800dbce:	07d9      	lsls	r1, r3, #31
 800dbd0:	d403      	bmi.n	800dbda <__lo0bits+0x4e>
 800dbd2:	085b      	lsrs	r3, r3, #1
 800dbd4:	f102 0201 	add.w	r2, r2, #1
 800dbd8:	d003      	beq.n	800dbe2 <__lo0bits+0x56>
 800dbda:	6003      	str	r3, [r0, #0]
 800dbdc:	e7e5      	b.n	800dbaa <__lo0bits+0x1e>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	e7e3      	b.n	800dbaa <__lo0bits+0x1e>
 800dbe2:	2220      	movs	r2, #32
 800dbe4:	e7e1      	b.n	800dbaa <__lo0bits+0x1e>
	...

0800dbe8 <__i2b>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	460c      	mov	r4, r1
 800dbec:	2101      	movs	r1, #1
 800dbee:	f7ff febb 	bl	800d968 <_Balloc>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	b928      	cbnz	r0, 800dc02 <__i2b+0x1a>
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <__i2b+0x24>)
 800dbf8:	4805      	ldr	r0, [pc, #20]	; (800dc10 <__i2b+0x28>)
 800dbfa:	f240 1145 	movw	r1, #325	; 0x145
 800dbfe:	f7fe fbb1 	bl	800c364 <__assert_func>
 800dc02:	2301      	movs	r3, #1
 800dc04:	6144      	str	r4, [r0, #20]
 800dc06:	6103      	str	r3, [r0, #16]
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0801269e 	.word	0x0801269e
 800dc10:	0801270f 	.word	0x0801270f

0800dc14 <__multiply>:
 800dc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	4691      	mov	r9, r2
 800dc1a:	690a      	ldr	r2, [r1, #16]
 800dc1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	bfb8      	it	lt
 800dc24:	460b      	movlt	r3, r1
 800dc26:	460c      	mov	r4, r1
 800dc28:	bfbc      	itt	lt
 800dc2a:	464c      	movlt	r4, r9
 800dc2c:	4699      	movlt	r9, r3
 800dc2e:	6927      	ldr	r7, [r4, #16]
 800dc30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc34:	68a3      	ldr	r3, [r4, #8]
 800dc36:	6861      	ldr	r1, [r4, #4]
 800dc38:	eb07 060a 	add.w	r6, r7, sl
 800dc3c:	42b3      	cmp	r3, r6
 800dc3e:	b085      	sub	sp, #20
 800dc40:	bfb8      	it	lt
 800dc42:	3101      	addlt	r1, #1
 800dc44:	f7ff fe90 	bl	800d968 <_Balloc>
 800dc48:	b930      	cbnz	r0, 800dc58 <__multiply+0x44>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	4b44      	ldr	r3, [pc, #272]	; (800dd60 <__multiply+0x14c>)
 800dc4e:	4845      	ldr	r0, [pc, #276]	; (800dd64 <__multiply+0x150>)
 800dc50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dc54:	f7fe fb86 	bl	800c364 <__assert_func>
 800dc58:	f100 0514 	add.w	r5, r0, #20
 800dc5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc60:	462b      	mov	r3, r5
 800dc62:	2200      	movs	r2, #0
 800dc64:	4543      	cmp	r3, r8
 800dc66:	d321      	bcc.n	800dcac <__multiply+0x98>
 800dc68:	f104 0314 	add.w	r3, r4, #20
 800dc6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc70:	f109 0314 	add.w	r3, r9, #20
 800dc74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc78:	9202      	str	r2, [sp, #8]
 800dc7a:	1b3a      	subs	r2, r7, r4
 800dc7c:	3a15      	subs	r2, #21
 800dc7e:	f022 0203 	bic.w	r2, r2, #3
 800dc82:	3204      	adds	r2, #4
 800dc84:	f104 0115 	add.w	r1, r4, #21
 800dc88:	428f      	cmp	r7, r1
 800dc8a:	bf38      	it	cc
 800dc8c:	2204      	movcc	r2, #4
 800dc8e:	9201      	str	r2, [sp, #4]
 800dc90:	9a02      	ldr	r2, [sp, #8]
 800dc92:	9303      	str	r3, [sp, #12]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d80c      	bhi.n	800dcb2 <__multiply+0x9e>
 800dc98:	2e00      	cmp	r6, #0
 800dc9a:	dd03      	ble.n	800dca4 <__multiply+0x90>
 800dc9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d05b      	beq.n	800dd5c <__multiply+0x148>
 800dca4:	6106      	str	r6, [r0, #16]
 800dca6:	b005      	add	sp, #20
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	f843 2b04 	str.w	r2, [r3], #4
 800dcb0:	e7d8      	b.n	800dc64 <__multiply+0x50>
 800dcb2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcb6:	f1ba 0f00 	cmp.w	sl, #0
 800dcba:	d024      	beq.n	800dd06 <__multiply+0xf2>
 800dcbc:	f104 0e14 	add.w	lr, r4, #20
 800dcc0:	46a9      	mov	r9, r5
 800dcc2:	f04f 0c00 	mov.w	ip, #0
 800dcc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dcca:	f8d9 1000 	ldr.w	r1, [r9]
 800dcce:	fa1f fb82 	uxth.w	fp, r2
 800dcd2:	b289      	uxth	r1, r1
 800dcd4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dcd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dcdc:	f8d9 2000 	ldr.w	r2, [r9]
 800dce0:	4461      	add	r1, ip
 800dce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dce6:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcee:	b289      	uxth	r1, r1
 800dcf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcf4:	4577      	cmp	r7, lr
 800dcf6:	f849 1b04 	str.w	r1, [r9], #4
 800dcfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcfe:	d8e2      	bhi.n	800dcc6 <__multiply+0xb2>
 800dd00:	9a01      	ldr	r2, [sp, #4]
 800dd02:	f845 c002 	str.w	ip, [r5, r2]
 800dd06:	9a03      	ldr	r2, [sp, #12]
 800dd08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	f1b9 0f00 	cmp.w	r9, #0
 800dd12:	d021      	beq.n	800dd58 <__multiply+0x144>
 800dd14:	6829      	ldr	r1, [r5, #0]
 800dd16:	f104 0c14 	add.w	ip, r4, #20
 800dd1a:	46ae      	mov	lr, r5
 800dd1c:	f04f 0a00 	mov.w	sl, #0
 800dd20:	f8bc b000 	ldrh.w	fp, [ip]
 800dd24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd28:	fb09 220b 	mla	r2, r9, fp, r2
 800dd2c:	4452      	add	r2, sl
 800dd2e:	b289      	uxth	r1, r1
 800dd30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd34:	f84e 1b04 	str.w	r1, [lr], #4
 800dd38:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dd3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd40:	f8be 1000 	ldrh.w	r1, [lr]
 800dd44:	fb09 110a 	mla	r1, r9, sl, r1
 800dd48:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dd4c:	4567      	cmp	r7, ip
 800dd4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd52:	d8e5      	bhi.n	800dd20 <__multiply+0x10c>
 800dd54:	9a01      	ldr	r2, [sp, #4]
 800dd56:	50a9      	str	r1, [r5, r2]
 800dd58:	3504      	adds	r5, #4
 800dd5a:	e799      	b.n	800dc90 <__multiply+0x7c>
 800dd5c:	3e01      	subs	r6, #1
 800dd5e:	e79b      	b.n	800dc98 <__multiply+0x84>
 800dd60:	0801269e 	.word	0x0801269e
 800dd64:	0801270f 	.word	0x0801270f

0800dd68 <__pow5mult>:
 800dd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd6c:	4615      	mov	r5, r2
 800dd6e:	f012 0203 	ands.w	r2, r2, #3
 800dd72:	4606      	mov	r6, r0
 800dd74:	460f      	mov	r7, r1
 800dd76:	d007      	beq.n	800dd88 <__pow5mult+0x20>
 800dd78:	4c25      	ldr	r4, [pc, #148]	; (800de10 <__pow5mult+0xa8>)
 800dd7a:	3a01      	subs	r2, #1
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd82:	f7ff fe53 	bl	800da2c <__multadd>
 800dd86:	4607      	mov	r7, r0
 800dd88:	10ad      	asrs	r5, r5, #2
 800dd8a:	d03d      	beq.n	800de08 <__pow5mult+0xa0>
 800dd8c:	69f4      	ldr	r4, [r6, #28]
 800dd8e:	b97c      	cbnz	r4, 800ddb0 <__pow5mult+0x48>
 800dd90:	2010      	movs	r0, #16
 800dd92:	f7ff fd23 	bl	800d7dc <malloc>
 800dd96:	4602      	mov	r2, r0
 800dd98:	61f0      	str	r0, [r6, #28]
 800dd9a:	b928      	cbnz	r0, 800dda8 <__pow5mult+0x40>
 800dd9c:	4b1d      	ldr	r3, [pc, #116]	; (800de14 <__pow5mult+0xac>)
 800dd9e:	481e      	ldr	r0, [pc, #120]	; (800de18 <__pow5mult+0xb0>)
 800dda0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dda4:	f7fe fade 	bl	800c364 <__assert_func>
 800dda8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddac:	6004      	str	r4, [r0, #0]
 800ddae:	60c4      	str	r4, [r0, #12]
 800ddb0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ddb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddb8:	b94c      	cbnz	r4, 800ddce <__pow5mult+0x66>
 800ddba:	f240 2171 	movw	r1, #625	; 0x271
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff ff12 	bl	800dbe8 <__i2b>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddca:	4604      	mov	r4, r0
 800ddcc:	6003      	str	r3, [r0, #0]
 800ddce:	f04f 0900 	mov.w	r9, #0
 800ddd2:	07eb      	lsls	r3, r5, #31
 800ddd4:	d50a      	bpl.n	800ddec <__pow5mult+0x84>
 800ddd6:	4639      	mov	r1, r7
 800ddd8:	4622      	mov	r2, r4
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff ff1a 	bl	800dc14 <__multiply>
 800dde0:	4639      	mov	r1, r7
 800dde2:	4680      	mov	r8, r0
 800dde4:	4630      	mov	r0, r6
 800dde6:	f7ff fdff 	bl	800d9e8 <_Bfree>
 800ddea:	4647      	mov	r7, r8
 800ddec:	106d      	asrs	r5, r5, #1
 800ddee:	d00b      	beq.n	800de08 <__pow5mult+0xa0>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	b938      	cbnz	r0, 800de04 <__pow5mult+0x9c>
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f7ff ff0b 	bl	800dc14 <__multiply>
 800ddfe:	6020      	str	r0, [r4, #0]
 800de00:	f8c0 9000 	str.w	r9, [r0]
 800de04:	4604      	mov	r4, r0
 800de06:	e7e4      	b.n	800ddd2 <__pow5mult+0x6a>
 800de08:	4638      	mov	r0, r7
 800de0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0e:	bf00      	nop
 800de10:	08012858 	.word	0x08012858
 800de14:	08012584 	.word	0x08012584
 800de18:	0801270f 	.word	0x0801270f

0800de1c <__lshift>:
 800de1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de20:	460c      	mov	r4, r1
 800de22:	6849      	ldr	r1, [r1, #4]
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de2a:	68a3      	ldr	r3, [r4, #8]
 800de2c:	4607      	mov	r7, r0
 800de2e:	4691      	mov	r9, r2
 800de30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de34:	f108 0601 	add.w	r6, r8, #1
 800de38:	42b3      	cmp	r3, r6
 800de3a:	db0b      	blt.n	800de54 <__lshift+0x38>
 800de3c:	4638      	mov	r0, r7
 800de3e:	f7ff fd93 	bl	800d968 <_Balloc>
 800de42:	4605      	mov	r5, r0
 800de44:	b948      	cbnz	r0, 800de5a <__lshift+0x3e>
 800de46:	4602      	mov	r2, r0
 800de48:	4b28      	ldr	r3, [pc, #160]	; (800deec <__lshift+0xd0>)
 800de4a:	4829      	ldr	r0, [pc, #164]	; (800def0 <__lshift+0xd4>)
 800de4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800de50:	f7fe fa88 	bl	800c364 <__assert_func>
 800de54:	3101      	adds	r1, #1
 800de56:	005b      	lsls	r3, r3, #1
 800de58:	e7ee      	b.n	800de38 <__lshift+0x1c>
 800de5a:	2300      	movs	r3, #0
 800de5c:	f100 0114 	add.w	r1, r0, #20
 800de60:	f100 0210 	add.w	r2, r0, #16
 800de64:	4618      	mov	r0, r3
 800de66:	4553      	cmp	r3, sl
 800de68:	db33      	blt.n	800ded2 <__lshift+0xb6>
 800de6a:	6920      	ldr	r0, [r4, #16]
 800de6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de70:	f104 0314 	add.w	r3, r4, #20
 800de74:	f019 091f 	ands.w	r9, r9, #31
 800de78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de80:	d02b      	beq.n	800deda <__lshift+0xbe>
 800de82:	f1c9 0e20 	rsb	lr, r9, #32
 800de86:	468a      	mov	sl, r1
 800de88:	2200      	movs	r2, #0
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	fa00 f009 	lsl.w	r0, r0, r9
 800de90:	4310      	orrs	r0, r2
 800de92:	f84a 0b04 	str.w	r0, [sl], #4
 800de96:	f853 2b04 	ldr.w	r2, [r3], #4
 800de9a:	459c      	cmp	ip, r3
 800de9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dea0:	d8f3      	bhi.n	800de8a <__lshift+0x6e>
 800dea2:	ebac 0304 	sub.w	r3, ip, r4
 800dea6:	3b15      	subs	r3, #21
 800dea8:	f023 0303 	bic.w	r3, r3, #3
 800deac:	3304      	adds	r3, #4
 800deae:	f104 0015 	add.w	r0, r4, #21
 800deb2:	4584      	cmp	ip, r0
 800deb4:	bf38      	it	cc
 800deb6:	2304      	movcc	r3, #4
 800deb8:	50ca      	str	r2, [r1, r3]
 800deba:	b10a      	cbz	r2, 800dec0 <__lshift+0xa4>
 800debc:	f108 0602 	add.w	r6, r8, #2
 800dec0:	3e01      	subs	r6, #1
 800dec2:	4638      	mov	r0, r7
 800dec4:	612e      	str	r6, [r5, #16]
 800dec6:	4621      	mov	r1, r4
 800dec8:	f7ff fd8e 	bl	800d9e8 <_Bfree>
 800decc:	4628      	mov	r0, r5
 800dece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ded6:	3301      	adds	r3, #1
 800ded8:	e7c5      	b.n	800de66 <__lshift+0x4a>
 800deda:	3904      	subs	r1, #4
 800dedc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dee4:	459c      	cmp	ip, r3
 800dee6:	d8f9      	bhi.n	800dedc <__lshift+0xc0>
 800dee8:	e7ea      	b.n	800dec0 <__lshift+0xa4>
 800deea:	bf00      	nop
 800deec:	0801269e 	.word	0x0801269e
 800def0:	0801270f 	.word	0x0801270f

0800def4 <__mcmp>:
 800def4:	b530      	push	{r4, r5, lr}
 800def6:	6902      	ldr	r2, [r0, #16]
 800def8:	690c      	ldr	r4, [r1, #16]
 800defa:	1b12      	subs	r2, r2, r4
 800defc:	d10e      	bne.n	800df1c <__mcmp+0x28>
 800defe:	f100 0314 	add.w	r3, r0, #20
 800df02:	3114      	adds	r1, #20
 800df04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df14:	42a5      	cmp	r5, r4
 800df16:	d003      	beq.n	800df20 <__mcmp+0x2c>
 800df18:	d305      	bcc.n	800df26 <__mcmp+0x32>
 800df1a:	2201      	movs	r2, #1
 800df1c:	4610      	mov	r0, r2
 800df1e:	bd30      	pop	{r4, r5, pc}
 800df20:	4283      	cmp	r3, r0
 800df22:	d3f3      	bcc.n	800df0c <__mcmp+0x18>
 800df24:	e7fa      	b.n	800df1c <__mcmp+0x28>
 800df26:	f04f 32ff 	mov.w	r2, #4294967295
 800df2a:	e7f7      	b.n	800df1c <__mcmp+0x28>

0800df2c <__mdiff>:
 800df2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	460c      	mov	r4, r1
 800df32:	4606      	mov	r6, r0
 800df34:	4611      	mov	r1, r2
 800df36:	4620      	mov	r0, r4
 800df38:	4690      	mov	r8, r2
 800df3a:	f7ff ffdb 	bl	800def4 <__mcmp>
 800df3e:	1e05      	subs	r5, r0, #0
 800df40:	d110      	bne.n	800df64 <__mdiff+0x38>
 800df42:	4629      	mov	r1, r5
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff fd0f 	bl	800d968 <_Balloc>
 800df4a:	b930      	cbnz	r0, 800df5a <__mdiff+0x2e>
 800df4c:	4b3a      	ldr	r3, [pc, #232]	; (800e038 <__mdiff+0x10c>)
 800df4e:	4602      	mov	r2, r0
 800df50:	f240 2137 	movw	r1, #567	; 0x237
 800df54:	4839      	ldr	r0, [pc, #228]	; (800e03c <__mdiff+0x110>)
 800df56:	f7fe fa05 	bl	800c364 <__assert_func>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df64:	bfa4      	itt	ge
 800df66:	4643      	movge	r3, r8
 800df68:	46a0      	movge	r8, r4
 800df6a:	4630      	mov	r0, r6
 800df6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df70:	bfa6      	itte	ge
 800df72:	461c      	movge	r4, r3
 800df74:	2500      	movge	r5, #0
 800df76:	2501      	movlt	r5, #1
 800df78:	f7ff fcf6 	bl	800d968 <_Balloc>
 800df7c:	b920      	cbnz	r0, 800df88 <__mdiff+0x5c>
 800df7e:	4b2e      	ldr	r3, [pc, #184]	; (800e038 <__mdiff+0x10c>)
 800df80:	4602      	mov	r2, r0
 800df82:	f240 2145 	movw	r1, #581	; 0x245
 800df86:	e7e5      	b.n	800df54 <__mdiff+0x28>
 800df88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df8c:	6926      	ldr	r6, [r4, #16]
 800df8e:	60c5      	str	r5, [r0, #12]
 800df90:	f104 0914 	add.w	r9, r4, #20
 800df94:	f108 0514 	add.w	r5, r8, #20
 800df98:	f100 0e14 	add.w	lr, r0, #20
 800df9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfa4:	f108 0210 	add.w	r2, r8, #16
 800dfa8:	46f2      	mov	sl, lr
 800dfaa:	2100      	movs	r1, #0
 800dfac:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dfb4:	fa11 f88b 	uxtah	r8, r1, fp
 800dfb8:	b299      	uxth	r1, r3
 800dfba:	0c1b      	lsrs	r3, r3, #16
 800dfbc:	eba8 0801 	sub.w	r8, r8, r1
 800dfc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dfc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dfc8:	fa1f f888 	uxth.w	r8, r8
 800dfcc:	1419      	asrs	r1, r3, #16
 800dfce:	454e      	cmp	r6, r9
 800dfd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfd4:	f84a 3b04 	str.w	r3, [sl], #4
 800dfd8:	d8e8      	bhi.n	800dfac <__mdiff+0x80>
 800dfda:	1b33      	subs	r3, r6, r4
 800dfdc:	3b15      	subs	r3, #21
 800dfde:	f023 0303 	bic.w	r3, r3, #3
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	3415      	adds	r4, #21
 800dfe6:	42a6      	cmp	r6, r4
 800dfe8:	bf38      	it	cc
 800dfea:	2304      	movcc	r3, #4
 800dfec:	441d      	add	r5, r3
 800dfee:	4473      	add	r3, lr
 800dff0:	469e      	mov	lr, r3
 800dff2:	462e      	mov	r6, r5
 800dff4:	4566      	cmp	r6, ip
 800dff6:	d30e      	bcc.n	800e016 <__mdiff+0xea>
 800dff8:	f10c 0203 	add.w	r2, ip, #3
 800dffc:	1b52      	subs	r2, r2, r5
 800dffe:	f022 0203 	bic.w	r2, r2, #3
 800e002:	3d03      	subs	r5, #3
 800e004:	45ac      	cmp	ip, r5
 800e006:	bf38      	it	cc
 800e008:	2200      	movcc	r2, #0
 800e00a:	4413      	add	r3, r2
 800e00c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e010:	b17a      	cbz	r2, 800e032 <__mdiff+0x106>
 800e012:	6107      	str	r7, [r0, #16]
 800e014:	e7a4      	b.n	800df60 <__mdiff+0x34>
 800e016:	f856 8b04 	ldr.w	r8, [r6], #4
 800e01a:	fa11 f288 	uxtah	r2, r1, r8
 800e01e:	1414      	asrs	r4, r2, #16
 800e020:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e024:	b292      	uxth	r2, r2
 800e026:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e02a:	f84e 2b04 	str.w	r2, [lr], #4
 800e02e:	1421      	asrs	r1, r4, #16
 800e030:	e7e0      	b.n	800dff4 <__mdiff+0xc8>
 800e032:	3f01      	subs	r7, #1
 800e034:	e7ea      	b.n	800e00c <__mdiff+0xe0>
 800e036:	bf00      	nop
 800e038:	0801269e 	.word	0x0801269e
 800e03c:	0801270f 	.word	0x0801270f

0800e040 <__ulp>:
 800e040:	b082      	sub	sp, #8
 800e042:	ed8d 0b00 	vstr	d0, [sp]
 800e046:	9a01      	ldr	r2, [sp, #4]
 800e048:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <__ulp+0x48>)
 800e04a:	4013      	ands	r3, r2
 800e04c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e050:	2b00      	cmp	r3, #0
 800e052:	dc08      	bgt.n	800e066 <__ulp+0x26>
 800e054:	425b      	negs	r3, r3
 800e056:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e05a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e05e:	da04      	bge.n	800e06a <__ulp+0x2a>
 800e060:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e064:	4113      	asrs	r3, r2
 800e066:	2200      	movs	r2, #0
 800e068:	e008      	b.n	800e07c <__ulp+0x3c>
 800e06a:	f1a2 0314 	sub.w	r3, r2, #20
 800e06e:	2b1e      	cmp	r3, #30
 800e070:	bfda      	itte	le
 800e072:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e076:	40da      	lsrle	r2, r3
 800e078:	2201      	movgt	r2, #1
 800e07a:	2300      	movs	r3, #0
 800e07c:	4619      	mov	r1, r3
 800e07e:	4610      	mov	r0, r2
 800e080:	ec41 0b10 	vmov	d0, r0, r1
 800e084:	b002      	add	sp, #8
 800e086:	4770      	bx	lr
 800e088:	7ff00000 	.word	0x7ff00000

0800e08c <__b2d>:
 800e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e090:	6906      	ldr	r6, [r0, #16]
 800e092:	f100 0814 	add.w	r8, r0, #20
 800e096:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e09a:	1f37      	subs	r7, r6, #4
 800e09c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	f7ff fd53 	bl	800db4c <__hi0bits>
 800e0a6:	f1c0 0320 	rsb	r3, r0, #32
 800e0aa:	280a      	cmp	r0, #10
 800e0ac:	600b      	str	r3, [r1, #0]
 800e0ae:	491b      	ldr	r1, [pc, #108]	; (800e11c <__b2d+0x90>)
 800e0b0:	dc15      	bgt.n	800e0de <__b2d+0x52>
 800e0b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e0b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e0ba:	45b8      	cmp	r8, r7
 800e0bc:	ea43 0501 	orr.w	r5, r3, r1
 800e0c0:	bf34      	ite	cc
 800e0c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0c6:	2300      	movcs	r3, #0
 800e0c8:	3015      	adds	r0, #21
 800e0ca:	fa02 f000 	lsl.w	r0, r2, r0
 800e0ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800e0d2:	4303      	orrs	r3, r0
 800e0d4:	461c      	mov	r4, r3
 800e0d6:	ec45 4b10 	vmov	d0, r4, r5
 800e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0de:	45b8      	cmp	r8, r7
 800e0e0:	bf3a      	itte	cc
 800e0e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800e0ea:	2300      	movcs	r3, #0
 800e0ec:	380b      	subs	r0, #11
 800e0ee:	d012      	beq.n	800e116 <__b2d+0x8a>
 800e0f0:	f1c0 0120 	rsb	r1, r0, #32
 800e0f4:	fa23 f401 	lsr.w	r4, r3, r1
 800e0f8:	4082      	lsls	r2, r0
 800e0fa:	4322      	orrs	r2, r4
 800e0fc:	4547      	cmp	r7, r8
 800e0fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e102:	bf8c      	ite	hi
 800e104:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e108:	2200      	movls	r2, #0
 800e10a:	4083      	lsls	r3, r0
 800e10c:	40ca      	lsrs	r2, r1
 800e10e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e112:	4313      	orrs	r3, r2
 800e114:	e7de      	b.n	800e0d4 <__b2d+0x48>
 800e116:	ea42 0501 	orr.w	r5, r2, r1
 800e11a:	e7db      	b.n	800e0d4 <__b2d+0x48>
 800e11c:	3ff00000 	.word	0x3ff00000

0800e120 <__d2b>:
 800e120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e124:	460f      	mov	r7, r1
 800e126:	2101      	movs	r1, #1
 800e128:	ec59 8b10 	vmov	r8, r9, d0
 800e12c:	4616      	mov	r6, r2
 800e12e:	f7ff fc1b 	bl	800d968 <_Balloc>
 800e132:	4604      	mov	r4, r0
 800e134:	b930      	cbnz	r0, 800e144 <__d2b+0x24>
 800e136:	4602      	mov	r2, r0
 800e138:	4b24      	ldr	r3, [pc, #144]	; (800e1cc <__d2b+0xac>)
 800e13a:	4825      	ldr	r0, [pc, #148]	; (800e1d0 <__d2b+0xb0>)
 800e13c:	f240 310f 	movw	r1, #783	; 0x30f
 800e140:	f7fe f910 	bl	800c364 <__assert_func>
 800e144:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e14c:	bb2d      	cbnz	r5, 800e19a <__d2b+0x7a>
 800e14e:	9301      	str	r3, [sp, #4]
 800e150:	f1b8 0300 	subs.w	r3, r8, #0
 800e154:	d026      	beq.n	800e1a4 <__d2b+0x84>
 800e156:	4668      	mov	r0, sp
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	f7ff fd17 	bl	800db8c <__lo0bits>
 800e15e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e162:	b1e8      	cbz	r0, 800e1a0 <__d2b+0x80>
 800e164:	f1c0 0320 	rsb	r3, r0, #32
 800e168:	fa02 f303 	lsl.w	r3, r2, r3
 800e16c:	430b      	orrs	r3, r1
 800e16e:	40c2      	lsrs	r2, r0
 800e170:	6163      	str	r3, [r4, #20]
 800e172:	9201      	str	r2, [sp, #4]
 800e174:	9b01      	ldr	r3, [sp, #4]
 800e176:	61a3      	str	r3, [r4, #24]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bf14      	ite	ne
 800e17c:	2202      	movne	r2, #2
 800e17e:	2201      	moveq	r2, #1
 800e180:	6122      	str	r2, [r4, #16]
 800e182:	b1bd      	cbz	r5, 800e1b4 <__d2b+0x94>
 800e184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e188:	4405      	add	r5, r0
 800e18a:	603d      	str	r5, [r7, #0]
 800e18c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e190:	6030      	str	r0, [r6, #0]
 800e192:	4620      	mov	r0, r4
 800e194:	b003      	add	sp, #12
 800e196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e19e:	e7d6      	b.n	800e14e <__d2b+0x2e>
 800e1a0:	6161      	str	r1, [r4, #20]
 800e1a2:	e7e7      	b.n	800e174 <__d2b+0x54>
 800e1a4:	a801      	add	r0, sp, #4
 800e1a6:	f7ff fcf1 	bl	800db8c <__lo0bits>
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	6163      	str	r3, [r4, #20]
 800e1ae:	3020      	adds	r0, #32
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	e7e5      	b.n	800e180 <__d2b+0x60>
 800e1b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1bc:	6038      	str	r0, [r7, #0]
 800e1be:	6918      	ldr	r0, [r3, #16]
 800e1c0:	f7ff fcc4 	bl	800db4c <__hi0bits>
 800e1c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1c8:	e7e2      	b.n	800e190 <__d2b+0x70>
 800e1ca:	bf00      	nop
 800e1cc:	0801269e 	.word	0x0801269e
 800e1d0:	0801270f 	.word	0x0801270f

0800e1d4 <__ratio>:
 800e1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4688      	mov	r8, r1
 800e1da:	4669      	mov	r1, sp
 800e1dc:	4681      	mov	r9, r0
 800e1de:	f7ff ff55 	bl	800e08c <__b2d>
 800e1e2:	a901      	add	r1, sp, #4
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	ec55 4b10 	vmov	r4, r5, d0
 800e1ea:	f7ff ff4f 	bl	800e08c <__b2d>
 800e1ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e1f6:	eba3 0c02 	sub.w	ip, r3, r2
 800e1fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e204:	ec51 0b10 	vmov	r0, r1, d0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	bfd6      	itet	le
 800e20c:	460a      	movle	r2, r1
 800e20e:	462a      	movgt	r2, r5
 800e210:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e214:	468b      	mov	fp, r1
 800e216:	462f      	mov	r7, r5
 800e218:	bfd4      	ite	le
 800e21a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e21e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e222:	4620      	mov	r0, r4
 800e224:	ee10 2a10 	vmov	r2, s0
 800e228:	465b      	mov	r3, fp
 800e22a:	4639      	mov	r1, r7
 800e22c:	f7f2 fb1e 	bl	800086c <__aeabi_ddiv>
 800e230:	ec41 0b10 	vmov	d0, r0, r1
 800e234:	b003      	add	sp, #12
 800e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e23a <__copybits>:
 800e23a:	3901      	subs	r1, #1
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	1149      	asrs	r1, r1, #5
 800e240:	6914      	ldr	r4, [r2, #16]
 800e242:	3101      	adds	r1, #1
 800e244:	f102 0314 	add.w	r3, r2, #20
 800e248:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e24c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e250:	1f05      	subs	r5, r0, #4
 800e252:	42a3      	cmp	r3, r4
 800e254:	d30c      	bcc.n	800e270 <__copybits+0x36>
 800e256:	1aa3      	subs	r3, r4, r2
 800e258:	3b11      	subs	r3, #17
 800e25a:	f023 0303 	bic.w	r3, r3, #3
 800e25e:	3211      	adds	r2, #17
 800e260:	42a2      	cmp	r2, r4
 800e262:	bf88      	it	hi
 800e264:	2300      	movhi	r3, #0
 800e266:	4418      	add	r0, r3
 800e268:	2300      	movs	r3, #0
 800e26a:	4288      	cmp	r0, r1
 800e26c:	d305      	bcc.n	800e27a <__copybits+0x40>
 800e26e:	bd70      	pop	{r4, r5, r6, pc}
 800e270:	f853 6b04 	ldr.w	r6, [r3], #4
 800e274:	f845 6f04 	str.w	r6, [r5, #4]!
 800e278:	e7eb      	b.n	800e252 <__copybits+0x18>
 800e27a:	f840 3b04 	str.w	r3, [r0], #4
 800e27e:	e7f4      	b.n	800e26a <__copybits+0x30>

0800e280 <__any_on>:
 800e280:	f100 0214 	add.w	r2, r0, #20
 800e284:	6900      	ldr	r0, [r0, #16]
 800e286:	114b      	asrs	r3, r1, #5
 800e288:	4298      	cmp	r0, r3
 800e28a:	b510      	push	{r4, lr}
 800e28c:	db11      	blt.n	800e2b2 <__any_on+0x32>
 800e28e:	dd0a      	ble.n	800e2a6 <__any_on+0x26>
 800e290:	f011 011f 	ands.w	r1, r1, #31
 800e294:	d007      	beq.n	800e2a6 <__any_on+0x26>
 800e296:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e29a:	fa24 f001 	lsr.w	r0, r4, r1
 800e29e:	fa00 f101 	lsl.w	r1, r0, r1
 800e2a2:	428c      	cmp	r4, r1
 800e2a4:	d10b      	bne.n	800e2be <__any_on+0x3e>
 800e2a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d803      	bhi.n	800e2b6 <__any_on+0x36>
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	bd10      	pop	{r4, pc}
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	e7f7      	b.n	800e2a6 <__any_on+0x26>
 800e2b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2ba:	2900      	cmp	r1, #0
 800e2bc:	d0f5      	beq.n	800e2aa <__any_on+0x2a>
 800e2be:	2001      	movs	r0, #1
 800e2c0:	e7f6      	b.n	800e2b0 <__any_on+0x30>
	...

0800e2c4 <_strtol_l.constprop.0>:
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ca:	d001      	beq.n	800e2d0 <_strtol_l.constprop.0+0xc>
 800e2cc:	2b24      	cmp	r3, #36	; 0x24
 800e2ce:	d906      	bls.n	800e2de <_strtol_l.constprop.0+0x1a>
 800e2d0:	f7fd fff6 	bl	800c2c0 <__errno>
 800e2d4:	2316      	movs	r3, #22
 800e2d6:	6003      	str	r3, [r0, #0]
 800e2d8:	2000      	movs	r0, #0
 800e2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e3c4 <_strtol_l.constprop.0+0x100>
 800e2e2:	460d      	mov	r5, r1
 800e2e4:	462e      	mov	r6, r5
 800e2e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e2ee:	f017 0708 	ands.w	r7, r7, #8
 800e2f2:	d1f7      	bne.n	800e2e4 <_strtol_l.constprop.0+0x20>
 800e2f4:	2c2d      	cmp	r4, #45	; 0x2d
 800e2f6:	d132      	bne.n	800e35e <_strtol_l.constprop.0+0x9a>
 800e2f8:	782c      	ldrb	r4, [r5, #0]
 800e2fa:	2701      	movs	r7, #1
 800e2fc:	1cb5      	adds	r5, r6, #2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d05b      	beq.n	800e3ba <_strtol_l.constprop.0+0xf6>
 800e302:	2b10      	cmp	r3, #16
 800e304:	d109      	bne.n	800e31a <_strtol_l.constprop.0+0x56>
 800e306:	2c30      	cmp	r4, #48	; 0x30
 800e308:	d107      	bne.n	800e31a <_strtol_l.constprop.0+0x56>
 800e30a:	782c      	ldrb	r4, [r5, #0]
 800e30c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e310:	2c58      	cmp	r4, #88	; 0x58
 800e312:	d14d      	bne.n	800e3b0 <_strtol_l.constprop.0+0xec>
 800e314:	786c      	ldrb	r4, [r5, #1]
 800e316:	2310      	movs	r3, #16
 800e318:	3502      	adds	r5, #2
 800e31a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e31e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e322:	f04f 0e00 	mov.w	lr, #0
 800e326:	fbb8 f9f3 	udiv	r9, r8, r3
 800e32a:	4676      	mov	r6, lr
 800e32c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e330:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e334:	f1bc 0f09 	cmp.w	ip, #9
 800e338:	d816      	bhi.n	800e368 <_strtol_l.constprop.0+0xa4>
 800e33a:	4664      	mov	r4, ip
 800e33c:	42a3      	cmp	r3, r4
 800e33e:	dd24      	ble.n	800e38a <_strtol_l.constprop.0+0xc6>
 800e340:	f1be 3fff 	cmp.w	lr, #4294967295
 800e344:	d008      	beq.n	800e358 <_strtol_l.constprop.0+0x94>
 800e346:	45b1      	cmp	r9, r6
 800e348:	d31c      	bcc.n	800e384 <_strtol_l.constprop.0+0xc0>
 800e34a:	d101      	bne.n	800e350 <_strtol_l.constprop.0+0x8c>
 800e34c:	45a2      	cmp	sl, r4
 800e34e:	db19      	blt.n	800e384 <_strtol_l.constprop.0+0xc0>
 800e350:	fb06 4603 	mla	r6, r6, r3, r4
 800e354:	f04f 0e01 	mov.w	lr, #1
 800e358:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e35c:	e7e8      	b.n	800e330 <_strtol_l.constprop.0+0x6c>
 800e35e:	2c2b      	cmp	r4, #43	; 0x2b
 800e360:	bf04      	itt	eq
 800e362:	782c      	ldrbeq	r4, [r5, #0]
 800e364:	1cb5      	addeq	r5, r6, #2
 800e366:	e7ca      	b.n	800e2fe <_strtol_l.constprop.0+0x3a>
 800e368:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e36c:	f1bc 0f19 	cmp.w	ip, #25
 800e370:	d801      	bhi.n	800e376 <_strtol_l.constprop.0+0xb2>
 800e372:	3c37      	subs	r4, #55	; 0x37
 800e374:	e7e2      	b.n	800e33c <_strtol_l.constprop.0+0x78>
 800e376:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e37a:	f1bc 0f19 	cmp.w	ip, #25
 800e37e:	d804      	bhi.n	800e38a <_strtol_l.constprop.0+0xc6>
 800e380:	3c57      	subs	r4, #87	; 0x57
 800e382:	e7db      	b.n	800e33c <_strtol_l.constprop.0+0x78>
 800e384:	f04f 3eff 	mov.w	lr, #4294967295
 800e388:	e7e6      	b.n	800e358 <_strtol_l.constprop.0+0x94>
 800e38a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e38e:	d105      	bne.n	800e39c <_strtol_l.constprop.0+0xd8>
 800e390:	2322      	movs	r3, #34	; 0x22
 800e392:	6003      	str	r3, [r0, #0]
 800e394:	4646      	mov	r6, r8
 800e396:	b942      	cbnz	r2, 800e3aa <_strtol_l.constprop.0+0xe6>
 800e398:	4630      	mov	r0, r6
 800e39a:	e79e      	b.n	800e2da <_strtol_l.constprop.0+0x16>
 800e39c:	b107      	cbz	r7, 800e3a0 <_strtol_l.constprop.0+0xdc>
 800e39e:	4276      	negs	r6, r6
 800e3a0:	2a00      	cmp	r2, #0
 800e3a2:	d0f9      	beq.n	800e398 <_strtol_l.constprop.0+0xd4>
 800e3a4:	f1be 0f00 	cmp.w	lr, #0
 800e3a8:	d000      	beq.n	800e3ac <_strtol_l.constprop.0+0xe8>
 800e3aa:	1e69      	subs	r1, r5, #1
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	e7f3      	b.n	800e398 <_strtol_l.constprop.0+0xd4>
 800e3b0:	2430      	movs	r4, #48	; 0x30
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1b1      	bne.n	800e31a <_strtol_l.constprop.0+0x56>
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	e7af      	b.n	800e31a <_strtol_l.constprop.0+0x56>
 800e3ba:	2c30      	cmp	r4, #48	; 0x30
 800e3bc:	d0a5      	beq.n	800e30a <_strtol_l.constprop.0+0x46>
 800e3be:	230a      	movs	r3, #10
 800e3c0:	e7ab      	b.n	800e31a <_strtol_l.constprop.0+0x56>
 800e3c2:	bf00      	nop
 800e3c4:	08012865 	.word	0x08012865

0800e3c8 <_strtol_r>:
 800e3c8:	f7ff bf7c 	b.w	800e2c4 <_strtol_l.constprop.0>

0800e3cc <__ascii_wctomb>:
 800e3cc:	b149      	cbz	r1, 800e3e2 <__ascii_wctomb+0x16>
 800e3ce:	2aff      	cmp	r2, #255	; 0xff
 800e3d0:	bf85      	ittet	hi
 800e3d2:	238a      	movhi	r3, #138	; 0x8a
 800e3d4:	6003      	strhi	r3, [r0, #0]
 800e3d6:	700a      	strbls	r2, [r1, #0]
 800e3d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3dc:	bf98      	it	ls
 800e3de:	2001      	movls	r0, #1
 800e3e0:	4770      	bx	lr
 800e3e2:	4608      	mov	r0, r1
 800e3e4:	4770      	bx	lr

0800e3e6 <__ssputs_r>:
 800e3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ea:	688e      	ldr	r6, [r1, #8]
 800e3ec:	461f      	mov	r7, r3
 800e3ee:	42be      	cmp	r6, r7
 800e3f0:	680b      	ldr	r3, [r1, #0]
 800e3f2:	4682      	mov	sl, r0
 800e3f4:	460c      	mov	r4, r1
 800e3f6:	4690      	mov	r8, r2
 800e3f8:	d82c      	bhi.n	800e454 <__ssputs_r+0x6e>
 800e3fa:	898a      	ldrh	r2, [r1, #12]
 800e3fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e400:	d026      	beq.n	800e450 <__ssputs_r+0x6a>
 800e402:	6965      	ldr	r5, [r4, #20]
 800e404:	6909      	ldr	r1, [r1, #16]
 800e406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e40a:	eba3 0901 	sub.w	r9, r3, r1
 800e40e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e412:	1c7b      	adds	r3, r7, #1
 800e414:	444b      	add	r3, r9
 800e416:	106d      	asrs	r5, r5, #1
 800e418:	429d      	cmp	r5, r3
 800e41a:	bf38      	it	cc
 800e41c:	461d      	movcc	r5, r3
 800e41e:	0553      	lsls	r3, r2, #21
 800e420:	d527      	bpl.n	800e472 <__ssputs_r+0x8c>
 800e422:	4629      	mov	r1, r5
 800e424:	f7ff fa02 	bl	800d82c <_malloc_r>
 800e428:	4606      	mov	r6, r0
 800e42a:	b360      	cbz	r0, 800e486 <__ssputs_r+0xa0>
 800e42c:	6921      	ldr	r1, [r4, #16]
 800e42e:	464a      	mov	r2, r9
 800e430:	f7fd ff7a 	bl	800c328 <memcpy>
 800e434:	89a3      	ldrh	r3, [r4, #12]
 800e436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	6126      	str	r6, [r4, #16]
 800e442:	6165      	str	r5, [r4, #20]
 800e444:	444e      	add	r6, r9
 800e446:	eba5 0509 	sub.w	r5, r5, r9
 800e44a:	6026      	str	r6, [r4, #0]
 800e44c:	60a5      	str	r5, [r4, #8]
 800e44e:	463e      	mov	r6, r7
 800e450:	42be      	cmp	r6, r7
 800e452:	d900      	bls.n	800e456 <__ssputs_r+0x70>
 800e454:	463e      	mov	r6, r7
 800e456:	6820      	ldr	r0, [r4, #0]
 800e458:	4632      	mov	r2, r6
 800e45a:	4641      	mov	r1, r8
 800e45c:	f000 fd6f 	bl	800ef3e <memmove>
 800e460:	68a3      	ldr	r3, [r4, #8]
 800e462:	1b9b      	subs	r3, r3, r6
 800e464:	60a3      	str	r3, [r4, #8]
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	4433      	add	r3, r6
 800e46a:	6023      	str	r3, [r4, #0]
 800e46c:	2000      	movs	r0, #0
 800e46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e472:	462a      	mov	r2, r5
 800e474:	f000 fdab 	bl	800efce <_realloc_r>
 800e478:	4606      	mov	r6, r0
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d1e0      	bne.n	800e440 <__ssputs_r+0x5a>
 800e47e:	6921      	ldr	r1, [r4, #16]
 800e480:	4650      	mov	r0, sl
 800e482:	f7fe fe07 	bl	800d094 <_free_r>
 800e486:	230c      	movs	r3, #12
 800e488:	f8ca 3000 	str.w	r3, [sl]
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	e7e9      	b.n	800e46e <__ssputs_r+0x88>
	...

0800e49c <_svfiprintf_r>:
 800e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a0:	4698      	mov	r8, r3
 800e4a2:	898b      	ldrh	r3, [r1, #12]
 800e4a4:	061b      	lsls	r3, r3, #24
 800e4a6:	b09d      	sub	sp, #116	; 0x74
 800e4a8:	4607      	mov	r7, r0
 800e4aa:	460d      	mov	r5, r1
 800e4ac:	4614      	mov	r4, r2
 800e4ae:	d50e      	bpl.n	800e4ce <_svfiprintf_r+0x32>
 800e4b0:	690b      	ldr	r3, [r1, #16]
 800e4b2:	b963      	cbnz	r3, 800e4ce <_svfiprintf_r+0x32>
 800e4b4:	2140      	movs	r1, #64	; 0x40
 800e4b6:	f7ff f9b9 	bl	800d82c <_malloc_r>
 800e4ba:	6028      	str	r0, [r5, #0]
 800e4bc:	6128      	str	r0, [r5, #16]
 800e4be:	b920      	cbnz	r0, 800e4ca <_svfiprintf_r+0x2e>
 800e4c0:	230c      	movs	r3, #12
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c8:	e0d0      	b.n	800e66c <_svfiprintf_r+0x1d0>
 800e4ca:	2340      	movs	r3, #64	; 0x40
 800e4cc:	616b      	str	r3, [r5, #20]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d2:	2320      	movs	r3, #32
 800e4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4dc:	2330      	movs	r3, #48	; 0x30
 800e4de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e684 <_svfiprintf_r+0x1e8>
 800e4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4e6:	f04f 0901 	mov.w	r9, #1
 800e4ea:	4623      	mov	r3, r4
 800e4ec:	469a      	mov	sl, r3
 800e4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4f2:	b10a      	cbz	r2, 800e4f8 <_svfiprintf_r+0x5c>
 800e4f4:	2a25      	cmp	r2, #37	; 0x25
 800e4f6:	d1f9      	bne.n	800e4ec <_svfiprintf_r+0x50>
 800e4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e4fc:	d00b      	beq.n	800e516 <_svfiprintf_r+0x7a>
 800e4fe:	465b      	mov	r3, fp
 800e500:	4622      	mov	r2, r4
 800e502:	4629      	mov	r1, r5
 800e504:	4638      	mov	r0, r7
 800e506:	f7ff ff6e 	bl	800e3e6 <__ssputs_r>
 800e50a:	3001      	adds	r0, #1
 800e50c:	f000 80a9 	beq.w	800e662 <_svfiprintf_r+0x1c6>
 800e510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e512:	445a      	add	r2, fp
 800e514:	9209      	str	r2, [sp, #36]	; 0x24
 800e516:	f89a 3000 	ldrb.w	r3, [sl]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f000 80a1 	beq.w	800e662 <_svfiprintf_r+0x1c6>
 800e520:	2300      	movs	r3, #0
 800e522:	f04f 32ff 	mov.w	r2, #4294967295
 800e526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e52a:	f10a 0a01 	add.w	sl, sl, #1
 800e52e:	9304      	str	r3, [sp, #16]
 800e530:	9307      	str	r3, [sp, #28]
 800e532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e536:	931a      	str	r3, [sp, #104]	; 0x68
 800e538:	4654      	mov	r4, sl
 800e53a:	2205      	movs	r2, #5
 800e53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e540:	4850      	ldr	r0, [pc, #320]	; (800e684 <_svfiprintf_r+0x1e8>)
 800e542:	f7f1 fe55 	bl	80001f0 <memchr>
 800e546:	9a04      	ldr	r2, [sp, #16]
 800e548:	b9d8      	cbnz	r0, 800e582 <_svfiprintf_r+0xe6>
 800e54a:	06d0      	lsls	r0, r2, #27
 800e54c:	bf44      	itt	mi
 800e54e:	2320      	movmi	r3, #32
 800e550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e554:	0711      	lsls	r1, r2, #28
 800e556:	bf44      	itt	mi
 800e558:	232b      	movmi	r3, #43	; 0x2b
 800e55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e55e:	f89a 3000 	ldrb.w	r3, [sl]
 800e562:	2b2a      	cmp	r3, #42	; 0x2a
 800e564:	d015      	beq.n	800e592 <_svfiprintf_r+0xf6>
 800e566:	9a07      	ldr	r2, [sp, #28]
 800e568:	4654      	mov	r4, sl
 800e56a:	2000      	movs	r0, #0
 800e56c:	f04f 0c0a 	mov.w	ip, #10
 800e570:	4621      	mov	r1, r4
 800e572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e576:	3b30      	subs	r3, #48	; 0x30
 800e578:	2b09      	cmp	r3, #9
 800e57a:	d94d      	bls.n	800e618 <_svfiprintf_r+0x17c>
 800e57c:	b1b0      	cbz	r0, 800e5ac <_svfiprintf_r+0x110>
 800e57e:	9207      	str	r2, [sp, #28]
 800e580:	e014      	b.n	800e5ac <_svfiprintf_r+0x110>
 800e582:	eba0 0308 	sub.w	r3, r0, r8
 800e586:	fa09 f303 	lsl.w	r3, r9, r3
 800e58a:	4313      	orrs	r3, r2
 800e58c:	9304      	str	r3, [sp, #16]
 800e58e:	46a2      	mov	sl, r4
 800e590:	e7d2      	b.n	800e538 <_svfiprintf_r+0x9c>
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	1d19      	adds	r1, r3, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	9103      	str	r1, [sp, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bfbb      	ittet	lt
 800e59e:	425b      	neglt	r3, r3
 800e5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a4:	9307      	strge	r3, [sp, #28]
 800e5a6:	9307      	strlt	r3, [sp, #28]
 800e5a8:	bfb8      	it	lt
 800e5aa:	9204      	strlt	r2, [sp, #16]
 800e5ac:	7823      	ldrb	r3, [r4, #0]
 800e5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e5b0:	d10c      	bne.n	800e5cc <_svfiprintf_r+0x130>
 800e5b2:	7863      	ldrb	r3, [r4, #1]
 800e5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5b6:	d134      	bne.n	800e622 <_svfiprintf_r+0x186>
 800e5b8:	9b03      	ldr	r3, [sp, #12]
 800e5ba:	1d1a      	adds	r2, r3, #4
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	9203      	str	r2, [sp, #12]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	bfb8      	it	lt
 800e5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5c8:	3402      	adds	r4, #2
 800e5ca:	9305      	str	r3, [sp, #20]
 800e5cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e694 <_svfiprintf_r+0x1f8>
 800e5d0:	7821      	ldrb	r1, [r4, #0]
 800e5d2:	2203      	movs	r2, #3
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	f7f1 fe0b 	bl	80001f0 <memchr>
 800e5da:	b138      	cbz	r0, 800e5ec <_svfiprintf_r+0x150>
 800e5dc:	9b04      	ldr	r3, [sp, #16]
 800e5de:	eba0 000a 	sub.w	r0, r0, sl
 800e5e2:	2240      	movs	r2, #64	; 0x40
 800e5e4:	4082      	lsls	r2, r0
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	3401      	adds	r4, #1
 800e5ea:	9304      	str	r3, [sp, #16]
 800e5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5f0:	4825      	ldr	r0, [pc, #148]	; (800e688 <_svfiprintf_r+0x1ec>)
 800e5f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5f6:	2206      	movs	r2, #6
 800e5f8:	f7f1 fdfa 	bl	80001f0 <memchr>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d038      	beq.n	800e672 <_svfiprintf_r+0x1d6>
 800e600:	4b22      	ldr	r3, [pc, #136]	; (800e68c <_svfiprintf_r+0x1f0>)
 800e602:	bb1b      	cbnz	r3, 800e64c <_svfiprintf_r+0x1b0>
 800e604:	9b03      	ldr	r3, [sp, #12]
 800e606:	3307      	adds	r3, #7
 800e608:	f023 0307 	bic.w	r3, r3, #7
 800e60c:	3308      	adds	r3, #8
 800e60e:	9303      	str	r3, [sp, #12]
 800e610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e612:	4433      	add	r3, r6
 800e614:	9309      	str	r3, [sp, #36]	; 0x24
 800e616:	e768      	b.n	800e4ea <_svfiprintf_r+0x4e>
 800e618:	fb0c 3202 	mla	r2, ip, r2, r3
 800e61c:	460c      	mov	r4, r1
 800e61e:	2001      	movs	r0, #1
 800e620:	e7a6      	b.n	800e570 <_svfiprintf_r+0xd4>
 800e622:	2300      	movs	r3, #0
 800e624:	3401      	adds	r4, #1
 800e626:	9305      	str	r3, [sp, #20]
 800e628:	4619      	mov	r1, r3
 800e62a:	f04f 0c0a 	mov.w	ip, #10
 800e62e:	4620      	mov	r0, r4
 800e630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e634:	3a30      	subs	r2, #48	; 0x30
 800e636:	2a09      	cmp	r2, #9
 800e638:	d903      	bls.n	800e642 <_svfiprintf_r+0x1a6>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0c6      	beq.n	800e5cc <_svfiprintf_r+0x130>
 800e63e:	9105      	str	r1, [sp, #20]
 800e640:	e7c4      	b.n	800e5cc <_svfiprintf_r+0x130>
 800e642:	fb0c 2101 	mla	r1, ip, r1, r2
 800e646:	4604      	mov	r4, r0
 800e648:	2301      	movs	r3, #1
 800e64a:	e7f0      	b.n	800e62e <_svfiprintf_r+0x192>
 800e64c:	ab03      	add	r3, sp, #12
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	462a      	mov	r2, r5
 800e652:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <_svfiprintf_r+0x1f4>)
 800e654:	a904      	add	r1, sp, #16
 800e656:	4638      	mov	r0, r7
 800e658:	f7fc fe3a 	bl	800b2d0 <_printf_float>
 800e65c:	1c42      	adds	r2, r0, #1
 800e65e:	4606      	mov	r6, r0
 800e660:	d1d6      	bne.n	800e610 <_svfiprintf_r+0x174>
 800e662:	89ab      	ldrh	r3, [r5, #12]
 800e664:	065b      	lsls	r3, r3, #25
 800e666:	f53f af2d 	bmi.w	800e4c4 <_svfiprintf_r+0x28>
 800e66a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e66c:	b01d      	add	sp, #116	; 0x74
 800e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e672:	ab03      	add	r3, sp, #12
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	462a      	mov	r2, r5
 800e678:	4b05      	ldr	r3, [pc, #20]	; (800e690 <_svfiprintf_r+0x1f4>)
 800e67a:	a904      	add	r1, sp, #16
 800e67c:	4638      	mov	r0, r7
 800e67e:	f7fd f8cb 	bl	800b818 <_printf_i>
 800e682:	e7eb      	b.n	800e65c <_svfiprintf_r+0x1c0>
 800e684:	08012965 	.word	0x08012965
 800e688:	0801296f 	.word	0x0801296f
 800e68c:	0800b2d1 	.word	0x0800b2d1
 800e690:	0800e3e7 	.word	0x0800e3e7
 800e694:	0801296b 	.word	0x0801296b

0800e698 <_sungetc_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	1c4b      	adds	r3, r1, #1
 800e69c:	4614      	mov	r4, r2
 800e69e:	d103      	bne.n	800e6a8 <_sungetc_r+0x10>
 800e6a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	8993      	ldrh	r3, [r2, #12]
 800e6aa:	f023 0320 	bic.w	r3, r3, #32
 800e6ae:	8193      	strh	r3, [r2, #12]
 800e6b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6b2:	6852      	ldr	r2, [r2, #4]
 800e6b4:	b2cd      	uxtb	r5, r1
 800e6b6:	b18b      	cbz	r3, 800e6dc <_sungetc_r+0x44>
 800e6b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	dd08      	ble.n	800e6d0 <_sungetc_r+0x38>
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	1e5a      	subs	r2, r3, #1
 800e6c2:	6022      	str	r2, [r4, #0]
 800e6c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e6c8:	6863      	ldr	r3, [r4, #4]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	6063      	str	r3, [r4, #4]
 800e6ce:	e7e9      	b.n	800e6a4 <_sungetc_r+0xc>
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	f000 fbfa 	bl	800eeca <__submore>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d0f1      	beq.n	800e6be <_sungetc_r+0x26>
 800e6da:	e7e1      	b.n	800e6a0 <_sungetc_r+0x8>
 800e6dc:	6921      	ldr	r1, [r4, #16]
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	b151      	cbz	r1, 800e6f8 <_sungetc_r+0x60>
 800e6e2:	4299      	cmp	r1, r3
 800e6e4:	d208      	bcs.n	800e6f8 <_sungetc_r+0x60>
 800e6e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e6ea:	42a9      	cmp	r1, r5
 800e6ec:	d104      	bne.n	800e6f8 <_sungetc_r+0x60>
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	3201      	adds	r2, #1
 800e6f2:	6023      	str	r3, [r4, #0]
 800e6f4:	6062      	str	r2, [r4, #4]
 800e6f6:	e7d5      	b.n	800e6a4 <_sungetc_r+0xc>
 800e6f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e700:	6363      	str	r3, [r4, #52]	; 0x34
 800e702:	2303      	movs	r3, #3
 800e704:	63a3      	str	r3, [r4, #56]	; 0x38
 800e706:	4623      	mov	r3, r4
 800e708:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	2301      	movs	r3, #1
 800e710:	e7dc      	b.n	800e6cc <_sungetc_r+0x34>

0800e712 <__ssrefill_r>:
 800e712:	b510      	push	{r4, lr}
 800e714:	460c      	mov	r4, r1
 800e716:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e718:	b169      	cbz	r1, 800e736 <__ssrefill_r+0x24>
 800e71a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e71e:	4299      	cmp	r1, r3
 800e720:	d001      	beq.n	800e726 <__ssrefill_r+0x14>
 800e722:	f7fe fcb7 	bl	800d094 <_free_r>
 800e726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e728:	6063      	str	r3, [r4, #4]
 800e72a:	2000      	movs	r0, #0
 800e72c:	6360      	str	r0, [r4, #52]	; 0x34
 800e72e:	b113      	cbz	r3, 800e736 <__ssrefill_r+0x24>
 800e730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd10      	pop	{r4, pc}
 800e736:	6923      	ldr	r3, [r4, #16]
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	2300      	movs	r3, #0
 800e73c:	6063      	str	r3, [r4, #4]
 800e73e:	89a3      	ldrh	r3, [r4, #12]
 800e740:	f043 0320 	orr.w	r3, r3, #32
 800e744:	81a3      	strh	r3, [r4, #12]
 800e746:	f04f 30ff 	mov.w	r0, #4294967295
 800e74a:	e7f3      	b.n	800e734 <__ssrefill_r+0x22>

0800e74c <__ssvfiscanf_r>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	460c      	mov	r4, r1
 800e752:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e756:	2100      	movs	r1, #0
 800e758:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e75c:	49a6      	ldr	r1, [pc, #664]	; (800e9f8 <__ssvfiscanf_r+0x2ac>)
 800e75e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e760:	f10d 0804 	add.w	r8, sp, #4
 800e764:	49a5      	ldr	r1, [pc, #660]	; (800e9fc <__ssvfiscanf_r+0x2b0>)
 800e766:	4fa6      	ldr	r7, [pc, #664]	; (800ea00 <__ssvfiscanf_r+0x2b4>)
 800e768:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ea04 <__ssvfiscanf_r+0x2b8>
 800e76c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e770:	4606      	mov	r6, r0
 800e772:	91a1      	str	r1, [sp, #644]	; 0x284
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	7813      	ldrb	r3, [r2, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f000 815a 	beq.w	800ea32 <__ssvfiscanf_r+0x2e6>
 800e77e:	5cf9      	ldrb	r1, [r7, r3]
 800e780:	f011 0108 	ands.w	r1, r1, #8
 800e784:	f102 0501 	add.w	r5, r2, #1
 800e788:	d019      	beq.n	800e7be <__ssvfiscanf_r+0x72>
 800e78a:	6863      	ldr	r3, [r4, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dd0f      	ble.n	800e7b0 <__ssvfiscanf_r+0x64>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	781a      	ldrb	r2, [r3, #0]
 800e794:	5cba      	ldrb	r2, [r7, r2]
 800e796:	0712      	lsls	r2, r2, #28
 800e798:	d401      	bmi.n	800e79e <__ssvfiscanf_r+0x52>
 800e79a:	462a      	mov	r2, r5
 800e79c:	e7eb      	b.n	800e776 <__ssvfiscanf_r+0x2a>
 800e79e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7a0:	3201      	adds	r2, #1
 800e7a2:	9245      	str	r2, [sp, #276]	; 0x114
 800e7a4:	6862      	ldr	r2, [r4, #4]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	3a01      	subs	r2, #1
 800e7aa:	6062      	str	r2, [r4, #4]
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	e7ec      	b.n	800e78a <__ssvfiscanf_r+0x3e>
 800e7b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	4798      	blx	r3
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d0e9      	beq.n	800e790 <__ssvfiscanf_r+0x44>
 800e7bc:	e7ed      	b.n	800e79a <__ssvfiscanf_r+0x4e>
 800e7be:	2b25      	cmp	r3, #37	; 0x25
 800e7c0:	d012      	beq.n	800e7e8 <__ssvfiscanf_r+0x9c>
 800e7c2:	469a      	mov	sl, r3
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f340 8091 	ble.w	800e8ee <__ssvfiscanf_r+0x1a2>
 800e7cc:	6822      	ldr	r2, [r4, #0]
 800e7ce:	7813      	ldrb	r3, [r2, #0]
 800e7d0:	4553      	cmp	r3, sl
 800e7d2:	f040 812e 	bne.w	800ea32 <__ssvfiscanf_r+0x2e6>
 800e7d6:	6863      	ldr	r3, [r4, #4]
 800e7d8:	3b01      	subs	r3, #1
 800e7da:	6063      	str	r3, [r4, #4]
 800e7dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e7de:	3201      	adds	r2, #1
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	6022      	str	r2, [r4, #0]
 800e7e4:	9345      	str	r3, [sp, #276]	; 0x114
 800e7e6:	e7d8      	b.n	800e79a <__ssvfiscanf_r+0x4e>
 800e7e8:	9141      	str	r1, [sp, #260]	; 0x104
 800e7ea:	9143      	str	r1, [sp, #268]	; 0x10c
 800e7ec:	7853      	ldrb	r3, [r2, #1]
 800e7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f0:	bf02      	ittt	eq
 800e7f2:	2310      	moveq	r3, #16
 800e7f4:	1c95      	addeq	r5, r2, #2
 800e7f6:	9341      	streq	r3, [sp, #260]	; 0x104
 800e7f8:	220a      	movs	r2, #10
 800e7fa:	46aa      	mov	sl, r5
 800e7fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e800:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e804:	2b09      	cmp	r3, #9
 800e806:	d91c      	bls.n	800e842 <__ssvfiscanf_r+0xf6>
 800e808:	487e      	ldr	r0, [pc, #504]	; (800ea04 <__ssvfiscanf_r+0x2b8>)
 800e80a:	2203      	movs	r2, #3
 800e80c:	f7f1 fcf0 	bl	80001f0 <memchr>
 800e810:	b138      	cbz	r0, 800e822 <__ssvfiscanf_r+0xd6>
 800e812:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e814:	eba0 0009 	sub.w	r0, r0, r9
 800e818:	2301      	movs	r3, #1
 800e81a:	4083      	lsls	r3, r0
 800e81c:	4313      	orrs	r3, r2
 800e81e:	9341      	str	r3, [sp, #260]	; 0x104
 800e820:	4655      	mov	r5, sl
 800e822:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e826:	2b78      	cmp	r3, #120	; 0x78
 800e828:	d806      	bhi.n	800e838 <__ssvfiscanf_r+0xec>
 800e82a:	2b57      	cmp	r3, #87	; 0x57
 800e82c:	d810      	bhi.n	800e850 <__ssvfiscanf_r+0x104>
 800e82e:	2b25      	cmp	r3, #37	; 0x25
 800e830:	d0c7      	beq.n	800e7c2 <__ssvfiscanf_r+0x76>
 800e832:	d857      	bhi.n	800e8e4 <__ssvfiscanf_r+0x198>
 800e834:	2b00      	cmp	r3, #0
 800e836:	d065      	beq.n	800e904 <__ssvfiscanf_r+0x1b8>
 800e838:	2303      	movs	r3, #3
 800e83a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e83c:	230a      	movs	r3, #10
 800e83e:	9342      	str	r3, [sp, #264]	; 0x108
 800e840:	e076      	b.n	800e930 <__ssvfiscanf_r+0x1e4>
 800e842:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e844:	fb02 1103 	mla	r1, r2, r3, r1
 800e848:	3930      	subs	r1, #48	; 0x30
 800e84a:	9143      	str	r1, [sp, #268]	; 0x10c
 800e84c:	4655      	mov	r5, sl
 800e84e:	e7d4      	b.n	800e7fa <__ssvfiscanf_r+0xae>
 800e850:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e854:	2a20      	cmp	r2, #32
 800e856:	d8ef      	bhi.n	800e838 <__ssvfiscanf_r+0xec>
 800e858:	a101      	add	r1, pc, #4	; (adr r1, 800e860 <__ssvfiscanf_r+0x114>)
 800e85a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e85e:	bf00      	nop
 800e860:	0800e913 	.word	0x0800e913
 800e864:	0800e839 	.word	0x0800e839
 800e868:	0800e839 	.word	0x0800e839
 800e86c:	0800e971 	.word	0x0800e971
 800e870:	0800e839 	.word	0x0800e839
 800e874:	0800e839 	.word	0x0800e839
 800e878:	0800e839 	.word	0x0800e839
 800e87c:	0800e839 	.word	0x0800e839
 800e880:	0800e839 	.word	0x0800e839
 800e884:	0800e839 	.word	0x0800e839
 800e888:	0800e839 	.word	0x0800e839
 800e88c:	0800e987 	.word	0x0800e987
 800e890:	0800e96d 	.word	0x0800e96d
 800e894:	0800e8eb 	.word	0x0800e8eb
 800e898:	0800e8eb 	.word	0x0800e8eb
 800e89c:	0800e8eb 	.word	0x0800e8eb
 800e8a0:	0800e839 	.word	0x0800e839
 800e8a4:	0800e929 	.word	0x0800e929
 800e8a8:	0800e839 	.word	0x0800e839
 800e8ac:	0800e839 	.word	0x0800e839
 800e8b0:	0800e839 	.word	0x0800e839
 800e8b4:	0800e839 	.word	0x0800e839
 800e8b8:	0800e997 	.word	0x0800e997
 800e8bc:	0800e965 	.word	0x0800e965
 800e8c0:	0800e90b 	.word	0x0800e90b
 800e8c4:	0800e839 	.word	0x0800e839
 800e8c8:	0800e839 	.word	0x0800e839
 800e8cc:	0800e993 	.word	0x0800e993
 800e8d0:	0800e839 	.word	0x0800e839
 800e8d4:	0800e96d 	.word	0x0800e96d
 800e8d8:	0800e839 	.word	0x0800e839
 800e8dc:	0800e839 	.word	0x0800e839
 800e8e0:	0800e913 	.word	0x0800e913
 800e8e4:	3b45      	subs	r3, #69	; 0x45
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d8a6      	bhi.n	800e838 <__ssvfiscanf_r+0xec>
 800e8ea:	2305      	movs	r3, #5
 800e8ec:	e01f      	b.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e8ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	4798      	blx	r3
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f43f af68 	beq.w	800e7cc <__ssvfiscanf_r+0x80>
 800e8fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f040 808d 	bne.w	800ea1e <__ssvfiscanf_r+0x2d2>
 800e904:	f04f 30ff 	mov.w	r0, #4294967295
 800e908:	e08f      	b.n	800ea2a <__ssvfiscanf_r+0x2de>
 800e90a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e90c:	f042 0220 	orr.w	r2, r2, #32
 800e910:	9241      	str	r2, [sp, #260]	; 0x104
 800e912:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e918:	9241      	str	r2, [sp, #260]	; 0x104
 800e91a:	2210      	movs	r2, #16
 800e91c:	2b6f      	cmp	r3, #111	; 0x6f
 800e91e:	9242      	str	r2, [sp, #264]	; 0x108
 800e920:	bf34      	ite	cc
 800e922:	2303      	movcc	r3, #3
 800e924:	2304      	movcs	r3, #4
 800e926:	e002      	b.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e928:	2300      	movs	r3, #0
 800e92a:	9342      	str	r3, [sp, #264]	; 0x108
 800e92c:	2303      	movs	r3, #3
 800e92e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e930:	6863      	ldr	r3, [r4, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	dd3d      	ble.n	800e9b2 <__ssvfiscanf_r+0x266>
 800e936:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e938:	0659      	lsls	r1, r3, #25
 800e93a:	d404      	bmi.n	800e946 <__ssvfiscanf_r+0x1fa>
 800e93c:	6823      	ldr	r3, [r4, #0]
 800e93e:	781a      	ldrb	r2, [r3, #0]
 800e940:	5cba      	ldrb	r2, [r7, r2]
 800e942:	0712      	lsls	r2, r2, #28
 800e944:	d43c      	bmi.n	800e9c0 <__ssvfiscanf_r+0x274>
 800e946:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e948:	2b02      	cmp	r3, #2
 800e94a:	dc4b      	bgt.n	800e9e4 <__ssvfiscanf_r+0x298>
 800e94c:	466b      	mov	r3, sp
 800e94e:	4622      	mov	r2, r4
 800e950:	a941      	add	r1, sp, #260	; 0x104
 800e952:	4630      	mov	r0, r6
 800e954:	f000 f872 	bl	800ea3c <_scanf_chars>
 800e958:	2801      	cmp	r0, #1
 800e95a:	d06a      	beq.n	800ea32 <__ssvfiscanf_r+0x2e6>
 800e95c:	2802      	cmp	r0, #2
 800e95e:	f47f af1c 	bne.w	800e79a <__ssvfiscanf_r+0x4e>
 800e962:	e7cb      	b.n	800e8fc <__ssvfiscanf_r+0x1b0>
 800e964:	2308      	movs	r3, #8
 800e966:	9342      	str	r3, [sp, #264]	; 0x108
 800e968:	2304      	movs	r3, #4
 800e96a:	e7e0      	b.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e96c:	220a      	movs	r2, #10
 800e96e:	e7d5      	b.n	800e91c <__ssvfiscanf_r+0x1d0>
 800e970:	4629      	mov	r1, r5
 800e972:	4640      	mov	r0, r8
 800e974:	f000 fa70 	bl	800ee58 <__sccl>
 800e978:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e97e:	9341      	str	r3, [sp, #260]	; 0x104
 800e980:	4605      	mov	r5, r0
 800e982:	2301      	movs	r3, #1
 800e984:	e7d3      	b.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e986:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e98c:	9341      	str	r3, [sp, #260]	; 0x104
 800e98e:	2300      	movs	r3, #0
 800e990:	e7cd      	b.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e992:	2302      	movs	r3, #2
 800e994:	e7cb      	b.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e996:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e998:	06c3      	lsls	r3, r0, #27
 800e99a:	f53f aefe 	bmi.w	800e79a <__ssvfiscanf_r+0x4e>
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e9a2:	1d19      	adds	r1, r3, #4
 800e9a4:	9100      	str	r1, [sp, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	07c0      	lsls	r0, r0, #31
 800e9aa:	bf4c      	ite	mi
 800e9ac:	801a      	strhmi	r2, [r3, #0]
 800e9ae:	601a      	strpl	r2, [r3, #0]
 800e9b0:	e6f3      	b.n	800e79a <__ssvfiscanf_r+0x4e>
 800e9b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	4798      	blx	r3
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d0bb      	beq.n	800e936 <__ssvfiscanf_r+0x1ea>
 800e9be:	e79d      	b.n	800e8fc <__ssvfiscanf_r+0x1b0>
 800e9c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e9c2:	3201      	adds	r2, #1
 800e9c4:	9245      	str	r2, [sp, #276]	; 0x114
 800e9c6:	6862      	ldr	r2, [r4, #4]
 800e9c8:	3a01      	subs	r2, #1
 800e9ca:	2a00      	cmp	r2, #0
 800e9cc:	6062      	str	r2, [r4, #4]
 800e9ce:	dd02      	ble.n	800e9d6 <__ssvfiscanf_r+0x28a>
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	e7b2      	b.n	800e93c <__ssvfiscanf_r+0x1f0>
 800e9d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e9d8:	4621      	mov	r1, r4
 800e9da:	4630      	mov	r0, r6
 800e9dc:	4798      	blx	r3
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d0ac      	beq.n	800e93c <__ssvfiscanf_r+0x1f0>
 800e9e2:	e78b      	b.n	800e8fc <__ssvfiscanf_r+0x1b0>
 800e9e4:	2b04      	cmp	r3, #4
 800e9e6:	dc0f      	bgt.n	800ea08 <__ssvfiscanf_r+0x2bc>
 800e9e8:	466b      	mov	r3, sp
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	a941      	add	r1, sp, #260	; 0x104
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f000 f87e 	bl	800eaf0 <_scanf_i>
 800e9f4:	e7b0      	b.n	800e958 <__ssvfiscanf_r+0x20c>
 800e9f6:	bf00      	nop
 800e9f8:	0800e699 	.word	0x0800e699
 800e9fc:	0800e713 	.word	0x0800e713
 800ea00:	08012865 	.word	0x08012865
 800ea04:	0801296b 	.word	0x0801296b
 800ea08:	4b0b      	ldr	r3, [pc, #44]	; (800ea38 <__ssvfiscanf_r+0x2ec>)
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f43f aec5 	beq.w	800e79a <__ssvfiscanf_r+0x4e>
 800ea10:	466b      	mov	r3, sp
 800ea12:	4622      	mov	r2, r4
 800ea14:	a941      	add	r1, sp, #260	; 0x104
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7fd f820 	bl	800ba5c <_scanf_float>
 800ea1c:	e79c      	b.n	800e958 <__ssvfiscanf_r+0x20c>
 800ea1e:	89a3      	ldrh	r3, [r4, #12]
 800ea20:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ea24:	bf18      	it	ne
 800ea26:	f04f 30ff 	movne.w	r0, #4294967295
 800ea2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea32:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ea34:	e7f9      	b.n	800ea2a <__ssvfiscanf_r+0x2de>
 800ea36:	bf00      	nop
 800ea38:	0800ba5d 	.word	0x0800ba5d

0800ea3c <_scanf_chars>:
 800ea3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea40:	4615      	mov	r5, r2
 800ea42:	688a      	ldr	r2, [r1, #8]
 800ea44:	4680      	mov	r8, r0
 800ea46:	460c      	mov	r4, r1
 800ea48:	b932      	cbnz	r2, 800ea58 <_scanf_chars+0x1c>
 800ea4a:	698a      	ldr	r2, [r1, #24]
 800ea4c:	2a00      	cmp	r2, #0
 800ea4e:	bf0c      	ite	eq
 800ea50:	2201      	moveq	r2, #1
 800ea52:	f04f 32ff 	movne.w	r2, #4294967295
 800ea56:	608a      	str	r2, [r1, #8]
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800eaec <_scanf_chars+0xb0>
 800ea5e:	06d1      	lsls	r1, r2, #27
 800ea60:	bf5f      	itttt	pl
 800ea62:	681a      	ldrpl	r2, [r3, #0]
 800ea64:	1d11      	addpl	r1, r2, #4
 800ea66:	6019      	strpl	r1, [r3, #0]
 800ea68:	6816      	ldrpl	r6, [r2, #0]
 800ea6a:	2700      	movs	r7, #0
 800ea6c:	69a0      	ldr	r0, [r4, #24]
 800ea6e:	b188      	cbz	r0, 800ea94 <_scanf_chars+0x58>
 800ea70:	2801      	cmp	r0, #1
 800ea72:	d107      	bne.n	800ea84 <_scanf_chars+0x48>
 800ea74:	682a      	ldr	r2, [r5, #0]
 800ea76:	7811      	ldrb	r1, [r2, #0]
 800ea78:	6962      	ldr	r2, [r4, #20]
 800ea7a:	5c52      	ldrb	r2, [r2, r1]
 800ea7c:	b952      	cbnz	r2, 800ea94 <_scanf_chars+0x58>
 800ea7e:	2f00      	cmp	r7, #0
 800ea80:	d031      	beq.n	800eae6 <_scanf_chars+0xaa>
 800ea82:	e022      	b.n	800eaca <_scanf_chars+0x8e>
 800ea84:	2802      	cmp	r0, #2
 800ea86:	d120      	bne.n	800eaca <_scanf_chars+0x8e>
 800ea88:	682b      	ldr	r3, [r5, #0]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ea90:	071b      	lsls	r3, r3, #28
 800ea92:	d41a      	bmi.n	800eaca <_scanf_chars+0x8e>
 800ea94:	6823      	ldr	r3, [r4, #0]
 800ea96:	06da      	lsls	r2, r3, #27
 800ea98:	bf5e      	ittt	pl
 800ea9a:	682b      	ldrpl	r3, [r5, #0]
 800ea9c:	781b      	ldrbpl	r3, [r3, #0]
 800ea9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800eaa2:	682a      	ldr	r2, [r5, #0]
 800eaa4:	686b      	ldr	r3, [r5, #4]
 800eaa6:	3201      	adds	r2, #1
 800eaa8:	602a      	str	r2, [r5, #0]
 800eaaa:	68a2      	ldr	r2, [r4, #8]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	3a01      	subs	r2, #1
 800eab0:	606b      	str	r3, [r5, #4]
 800eab2:	3701      	adds	r7, #1
 800eab4:	60a2      	str	r2, [r4, #8]
 800eab6:	b142      	cbz	r2, 800eaca <_scanf_chars+0x8e>
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dcd7      	bgt.n	800ea6c <_scanf_chars+0x30>
 800eabc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eac0:	4629      	mov	r1, r5
 800eac2:	4640      	mov	r0, r8
 800eac4:	4798      	blx	r3
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d0d0      	beq.n	800ea6c <_scanf_chars+0x30>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	f013 0310 	ands.w	r3, r3, #16
 800ead0:	d105      	bne.n	800eade <_scanf_chars+0xa2>
 800ead2:	68e2      	ldr	r2, [r4, #12]
 800ead4:	3201      	adds	r2, #1
 800ead6:	60e2      	str	r2, [r4, #12]
 800ead8:	69a2      	ldr	r2, [r4, #24]
 800eada:	b102      	cbz	r2, 800eade <_scanf_chars+0xa2>
 800eadc:	7033      	strb	r3, [r6, #0]
 800eade:	6923      	ldr	r3, [r4, #16]
 800eae0:	443b      	add	r3, r7
 800eae2:	6123      	str	r3, [r4, #16]
 800eae4:	2000      	movs	r0, #0
 800eae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaea:	bf00      	nop
 800eaec:	08012865 	.word	0x08012865

0800eaf0 <_scanf_i>:
 800eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf4:	4698      	mov	r8, r3
 800eaf6:	4b74      	ldr	r3, [pc, #464]	; (800ecc8 <_scanf_i+0x1d8>)
 800eaf8:	460c      	mov	r4, r1
 800eafa:	4682      	mov	sl, r0
 800eafc:	4616      	mov	r6, r2
 800eafe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb02:	b087      	sub	sp, #28
 800eb04:	ab03      	add	r3, sp, #12
 800eb06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eb0a:	4b70      	ldr	r3, [pc, #448]	; (800eccc <_scanf_i+0x1dc>)
 800eb0c:	69a1      	ldr	r1, [r4, #24]
 800eb0e:	4a70      	ldr	r2, [pc, #448]	; (800ecd0 <_scanf_i+0x1e0>)
 800eb10:	2903      	cmp	r1, #3
 800eb12:	bf18      	it	ne
 800eb14:	461a      	movne	r2, r3
 800eb16:	68a3      	ldr	r3, [r4, #8]
 800eb18:	9201      	str	r2, [sp, #4]
 800eb1a:	1e5a      	subs	r2, r3, #1
 800eb1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eb20:	bf88      	it	hi
 800eb22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eb26:	4627      	mov	r7, r4
 800eb28:	bf82      	ittt	hi
 800eb2a:	eb03 0905 	addhi.w	r9, r3, r5
 800eb2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eb32:	60a3      	strhi	r3, [r4, #8]
 800eb34:	f857 3b1c 	ldr.w	r3, [r7], #28
 800eb38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800eb3c:	bf98      	it	ls
 800eb3e:	f04f 0900 	movls.w	r9, #0
 800eb42:	6023      	str	r3, [r4, #0]
 800eb44:	463d      	mov	r5, r7
 800eb46:	f04f 0b00 	mov.w	fp, #0
 800eb4a:	6831      	ldr	r1, [r6, #0]
 800eb4c:	ab03      	add	r3, sp, #12
 800eb4e:	7809      	ldrb	r1, [r1, #0]
 800eb50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eb54:	2202      	movs	r2, #2
 800eb56:	f7f1 fb4b 	bl	80001f0 <memchr>
 800eb5a:	b328      	cbz	r0, 800eba8 <_scanf_i+0xb8>
 800eb5c:	f1bb 0f01 	cmp.w	fp, #1
 800eb60:	d159      	bne.n	800ec16 <_scanf_i+0x126>
 800eb62:	6862      	ldr	r2, [r4, #4]
 800eb64:	b92a      	cbnz	r2, 800eb72 <_scanf_i+0x82>
 800eb66:	6822      	ldr	r2, [r4, #0]
 800eb68:	2308      	movs	r3, #8
 800eb6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb6e:	6063      	str	r3, [r4, #4]
 800eb70:	6022      	str	r2, [r4, #0]
 800eb72:	6822      	ldr	r2, [r4, #0]
 800eb74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800eb78:	6022      	str	r2, [r4, #0]
 800eb7a:	68a2      	ldr	r2, [r4, #8]
 800eb7c:	1e51      	subs	r1, r2, #1
 800eb7e:	60a1      	str	r1, [r4, #8]
 800eb80:	b192      	cbz	r2, 800eba8 <_scanf_i+0xb8>
 800eb82:	6832      	ldr	r2, [r6, #0]
 800eb84:	1c51      	adds	r1, r2, #1
 800eb86:	6031      	str	r1, [r6, #0]
 800eb88:	7812      	ldrb	r2, [r2, #0]
 800eb8a:	f805 2b01 	strb.w	r2, [r5], #1
 800eb8e:	6872      	ldr	r2, [r6, #4]
 800eb90:	3a01      	subs	r2, #1
 800eb92:	2a00      	cmp	r2, #0
 800eb94:	6072      	str	r2, [r6, #4]
 800eb96:	dc07      	bgt.n	800eba8 <_scanf_i+0xb8>
 800eb98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800eb9c:	4631      	mov	r1, r6
 800eb9e:	4650      	mov	r0, sl
 800eba0:	4790      	blx	r2
 800eba2:	2800      	cmp	r0, #0
 800eba4:	f040 8085 	bne.w	800ecb2 <_scanf_i+0x1c2>
 800eba8:	f10b 0b01 	add.w	fp, fp, #1
 800ebac:	f1bb 0f03 	cmp.w	fp, #3
 800ebb0:	d1cb      	bne.n	800eb4a <_scanf_i+0x5a>
 800ebb2:	6863      	ldr	r3, [r4, #4]
 800ebb4:	b90b      	cbnz	r3, 800ebba <_scanf_i+0xca>
 800ebb6:	230a      	movs	r3, #10
 800ebb8:	6063      	str	r3, [r4, #4]
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	4945      	ldr	r1, [pc, #276]	; (800ecd4 <_scanf_i+0x1e4>)
 800ebbe:	6960      	ldr	r0, [r4, #20]
 800ebc0:	1ac9      	subs	r1, r1, r3
 800ebc2:	f000 f949 	bl	800ee58 <__sccl>
 800ebc6:	f04f 0b00 	mov.w	fp, #0
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	6822      	ldr	r2, [r4, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d03d      	beq.n	800ec4e <_scanf_i+0x15e>
 800ebd2:	6831      	ldr	r1, [r6, #0]
 800ebd4:	6960      	ldr	r0, [r4, #20]
 800ebd6:	f891 c000 	ldrb.w	ip, [r1]
 800ebda:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d035      	beq.n	800ec4e <_scanf_i+0x15e>
 800ebe2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ebe6:	d124      	bne.n	800ec32 <_scanf_i+0x142>
 800ebe8:	0510      	lsls	r0, r2, #20
 800ebea:	d522      	bpl.n	800ec32 <_scanf_i+0x142>
 800ebec:	f10b 0b01 	add.w	fp, fp, #1
 800ebf0:	f1b9 0f00 	cmp.w	r9, #0
 800ebf4:	d003      	beq.n	800ebfe <_scanf_i+0x10e>
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	f109 39ff 	add.w	r9, r9, #4294967295
 800ebfc:	60a3      	str	r3, [r4, #8]
 800ebfe:	6873      	ldr	r3, [r6, #4]
 800ec00:	3b01      	subs	r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	6073      	str	r3, [r6, #4]
 800ec06:	dd1b      	ble.n	800ec40 <_scanf_i+0x150>
 800ec08:	6833      	ldr	r3, [r6, #0]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	6033      	str	r3, [r6, #0]
 800ec0e:	68a3      	ldr	r3, [r4, #8]
 800ec10:	3b01      	subs	r3, #1
 800ec12:	60a3      	str	r3, [r4, #8]
 800ec14:	e7d9      	b.n	800ebca <_scanf_i+0xda>
 800ec16:	f1bb 0f02 	cmp.w	fp, #2
 800ec1a:	d1ae      	bne.n	800eb7a <_scanf_i+0x8a>
 800ec1c:	6822      	ldr	r2, [r4, #0]
 800ec1e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ec22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ec26:	d1bf      	bne.n	800eba8 <_scanf_i+0xb8>
 800ec28:	2310      	movs	r3, #16
 800ec2a:	6063      	str	r3, [r4, #4]
 800ec2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec30:	e7a2      	b.n	800eb78 <_scanf_i+0x88>
 800ec32:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ec36:	6022      	str	r2, [r4, #0]
 800ec38:	780b      	ldrb	r3, [r1, #0]
 800ec3a:	f805 3b01 	strb.w	r3, [r5], #1
 800ec3e:	e7de      	b.n	800ebfe <_scanf_i+0x10e>
 800ec40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ec44:	4631      	mov	r1, r6
 800ec46:	4650      	mov	r0, sl
 800ec48:	4798      	blx	r3
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d0df      	beq.n	800ec0e <_scanf_i+0x11e>
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	05d9      	lsls	r1, r3, #23
 800ec52:	d50d      	bpl.n	800ec70 <_scanf_i+0x180>
 800ec54:	42bd      	cmp	r5, r7
 800ec56:	d909      	bls.n	800ec6c <_scanf_i+0x17c>
 800ec58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ec5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec60:	4632      	mov	r2, r6
 800ec62:	4650      	mov	r0, sl
 800ec64:	4798      	blx	r3
 800ec66:	f105 39ff 	add.w	r9, r5, #4294967295
 800ec6a:	464d      	mov	r5, r9
 800ec6c:	42bd      	cmp	r5, r7
 800ec6e:	d028      	beq.n	800ecc2 <_scanf_i+0x1d2>
 800ec70:	6822      	ldr	r2, [r4, #0]
 800ec72:	f012 0210 	ands.w	r2, r2, #16
 800ec76:	d113      	bne.n	800eca0 <_scanf_i+0x1b0>
 800ec78:	702a      	strb	r2, [r5, #0]
 800ec7a:	6863      	ldr	r3, [r4, #4]
 800ec7c:	9e01      	ldr	r6, [sp, #4]
 800ec7e:	4639      	mov	r1, r7
 800ec80:	4650      	mov	r0, sl
 800ec82:	47b0      	blx	r6
 800ec84:	f8d8 3000 	ldr.w	r3, [r8]
 800ec88:	6821      	ldr	r1, [r4, #0]
 800ec8a:	1d1a      	adds	r2, r3, #4
 800ec8c:	f8c8 2000 	str.w	r2, [r8]
 800ec90:	f011 0f20 	tst.w	r1, #32
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	d00f      	beq.n	800ecb8 <_scanf_i+0x1c8>
 800ec98:	6018      	str	r0, [r3, #0]
 800ec9a:	68e3      	ldr	r3, [r4, #12]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	60e3      	str	r3, [r4, #12]
 800eca0:	6923      	ldr	r3, [r4, #16]
 800eca2:	1bed      	subs	r5, r5, r7
 800eca4:	445d      	add	r5, fp
 800eca6:	442b      	add	r3, r5
 800eca8:	6123      	str	r3, [r4, #16]
 800ecaa:	2000      	movs	r0, #0
 800ecac:	b007      	add	sp, #28
 800ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb2:	f04f 0b00 	mov.w	fp, #0
 800ecb6:	e7ca      	b.n	800ec4e <_scanf_i+0x15e>
 800ecb8:	07ca      	lsls	r2, r1, #31
 800ecba:	bf4c      	ite	mi
 800ecbc:	8018      	strhmi	r0, [r3, #0]
 800ecbe:	6018      	strpl	r0, [r3, #0]
 800ecc0:	e7eb      	b.n	800ec9a <_scanf_i+0x1aa>
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	e7f2      	b.n	800ecac <_scanf_i+0x1bc>
 800ecc6:	bf00      	nop
 800ecc8:	08010f38 	.word	0x08010f38
 800eccc:	0800f111 	.word	0x0800f111
 800ecd0:	0800e3c9 	.word	0x0800e3c9
 800ecd4:	08012986 	.word	0x08012986

0800ecd8 <__sflush_r>:
 800ecd8:	898a      	ldrh	r2, [r1, #12]
 800ecda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecde:	4605      	mov	r5, r0
 800ece0:	0710      	lsls	r0, r2, #28
 800ece2:	460c      	mov	r4, r1
 800ece4:	d458      	bmi.n	800ed98 <__sflush_r+0xc0>
 800ece6:	684b      	ldr	r3, [r1, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	dc05      	bgt.n	800ecf8 <__sflush_r+0x20>
 800ecec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	dc02      	bgt.n	800ecf8 <__sflush_r+0x20>
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecfa:	2e00      	cmp	r6, #0
 800ecfc:	d0f9      	beq.n	800ecf2 <__sflush_r+0x1a>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed04:	682f      	ldr	r7, [r5, #0]
 800ed06:	6a21      	ldr	r1, [r4, #32]
 800ed08:	602b      	str	r3, [r5, #0]
 800ed0a:	d032      	beq.n	800ed72 <__sflush_r+0x9a>
 800ed0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed0e:	89a3      	ldrh	r3, [r4, #12]
 800ed10:	075a      	lsls	r2, r3, #29
 800ed12:	d505      	bpl.n	800ed20 <__sflush_r+0x48>
 800ed14:	6863      	ldr	r3, [r4, #4]
 800ed16:	1ac0      	subs	r0, r0, r3
 800ed18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed1a:	b10b      	cbz	r3, 800ed20 <__sflush_r+0x48>
 800ed1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed1e:	1ac0      	subs	r0, r0, r3
 800ed20:	2300      	movs	r3, #0
 800ed22:	4602      	mov	r2, r0
 800ed24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed26:	6a21      	ldr	r1, [r4, #32]
 800ed28:	4628      	mov	r0, r5
 800ed2a:	47b0      	blx	r6
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	d106      	bne.n	800ed40 <__sflush_r+0x68>
 800ed32:	6829      	ldr	r1, [r5, #0]
 800ed34:	291d      	cmp	r1, #29
 800ed36:	d82b      	bhi.n	800ed90 <__sflush_r+0xb8>
 800ed38:	4a29      	ldr	r2, [pc, #164]	; (800ede0 <__sflush_r+0x108>)
 800ed3a:	410a      	asrs	r2, r1
 800ed3c:	07d6      	lsls	r6, r2, #31
 800ed3e:	d427      	bmi.n	800ed90 <__sflush_r+0xb8>
 800ed40:	2200      	movs	r2, #0
 800ed42:	6062      	str	r2, [r4, #4]
 800ed44:	04d9      	lsls	r1, r3, #19
 800ed46:	6922      	ldr	r2, [r4, #16]
 800ed48:	6022      	str	r2, [r4, #0]
 800ed4a:	d504      	bpl.n	800ed56 <__sflush_r+0x7e>
 800ed4c:	1c42      	adds	r2, r0, #1
 800ed4e:	d101      	bne.n	800ed54 <__sflush_r+0x7c>
 800ed50:	682b      	ldr	r3, [r5, #0]
 800ed52:	b903      	cbnz	r3, 800ed56 <__sflush_r+0x7e>
 800ed54:	6560      	str	r0, [r4, #84]	; 0x54
 800ed56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed58:	602f      	str	r7, [r5, #0]
 800ed5a:	2900      	cmp	r1, #0
 800ed5c:	d0c9      	beq.n	800ecf2 <__sflush_r+0x1a>
 800ed5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed62:	4299      	cmp	r1, r3
 800ed64:	d002      	beq.n	800ed6c <__sflush_r+0x94>
 800ed66:	4628      	mov	r0, r5
 800ed68:	f7fe f994 	bl	800d094 <_free_r>
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	6360      	str	r0, [r4, #52]	; 0x34
 800ed70:	e7c0      	b.n	800ecf4 <__sflush_r+0x1c>
 800ed72:	2301      	movs	r3, #1
 800ed74:	4628      	mov	r0, r5
 800ed76:	47b0      	blx	r6
 800ed78:	1c41      	adds	r1, r0, #1
 800ed7a:	d1c8      	bne.n	800ed0e <__sflush_r+0x36>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d0c5      	beq.n	800ed0e <__sflush_r+0x36>
 800ed82:	2b1d      	cmp	r3, #29
 800ed84:	d001      	beq.n	800ed8a <__sflush_r+0xb2>
 800ed86:	2b16      	cmp	r3, #22
 800ed88:	d101      	bne.n	800ed8e <__sflush_r+0xb6>
 800ed8a:	602f      	str	r7, [r5, #0]
 800ed8c:	e7b1      	b.n	800ecf2 <__sflush_r+0x1a>
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed94:	81a3      	strh	r3, [r4, #12]
 800ed96:	e7ad      	b.n	800ecf4 <__sflush_r+0x1c>
 800ed98:	690f      	ldr	r7, [r1, #16]
 800ed9a:	2f00      	cmp	r7, #0
 800ed9c:	d0a9      	beq.n	800ecf2 <__sflush_r+0x1a>
 800ed9e:	0793      	lsls	r3, r2, #30
 800eda0:	680e      	ldr	r6, [r1, #0]
 800eda2:	bf08      	it	eq
 800eda4:	694b      	ldreq	r3, [r1, #20]
 800eda6:	600f      	str	r7, [r1, #0]
 800eda8:	bf18      	it	ne
 800edaa:	2300      	movne	r3, #0
 800edac:	eba6 0807 	sub.w	r8, r6, r7
 800edb0:	608b      	str	r3, [r1, #8]
 800edb2:	f1b8 0f00 	cmp.w	r8, #0
 800edb6:	dd9c      	ble.n	800ecf2 <__sflush_r+0x1a>
 800edb8:	6a21      	ldr	r1, [r4, #32]
 800edba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800edbc:	4643      	mov	r3, r8
 800edbe:	463a      	mov	r2, r7
 800edc0:	4628      	mov	r0, r5
 800edc2:	47b0      	blx	r6
 800edc4:	2800      	cmp	r0, #0
 800edc6:	dc06      	bgt.n	800edd6 <__sflush_r+0xfe>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edce:	81a3      	strh	r3, [r4, #12]
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295
 800edd4:	e78e      	b.n	800ecf4 <__sflush_r+0x1c>
 800edd6:	4407      	add	r7, r0
 800edd8:	eba8 0800 	sub.w	r8, r8, r0
 800eddc:	e7e9      	b.n	800edb2 <__sflush_r+0xda>
 800edde:	bf00      	nop
 800ede0:	dfbffffe 	.word	0xdfbffffe

0800ede4 <_fflush_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	690b      	ldr	r3, [r1, #16]
 800ede8:	4605      	mov	r5, r0
 800edea:	460c      	mov	r4, r1
 800edec:	b913      	cbnz	r3, 800edf4 <_fflush_r+0x10>
 800edee:	2500      	movs	r5, #0
 800edf0:	4628      	mov	r0, r5
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
 800edf4:	b118      	cbz	r0, 800edfe <_fflush_r+0x1a>
 800edf6:	6a03      	ldr	r3, [r0, #32]
 800edf8:	b90b      	cbnz	r3, 800edfe <_fflush_r+0x1a>
 800edfa:	f7fd f8b9 	bl	800bf70 <__sinit>
 800edfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d0f3      	beq.n	800edee <_fflush_r+0xa>
 800ee06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee08:	07d0      	lsls	r0, r2, #31
 800ee0a:	d404      	bmi.n	800ee16 <_fflush_r+0x32>
 800ee0c:	0599      	lsls	r1, r3, #22
 800ee0e:	d402      	bmi.n	800ee16 <_fflush_r+0x32>
 800ee10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee12:	f7fd fa7f 	bl	800c314 <__retarget_lock_acquire_recursive>
 800ee16:	4628      	mov	r0, r5
 800ee18:	4621      	mov	r1, r4
 800ee1a:	f7ff ff5d 	bl	800ecd8 <__sflush_r>
 800ee1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee20:	07da      	lsls	r2, r3, #31
 800ee22:	4605      	mov	r5, r0
 800ee24:	d4e4      	bmi.n	800edf0 <_fflush_r+0xc>
 800ee26:	89a3      	ldrh	r3, [r4, #12]
 800ee28:	059b      	lsls	r3, r3, #22
 800ee2a:	d4e1      	bmi.n	800edf0 <_fflush_r+0xc>
 800ee2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee2e:	f7fd fa72 	bl	800c316 <__retarget_lock_release_recursive>
 800ee32:	e7dd      	b.n	800edf0 <_fflush_r+0xc>

0800ee34 <fiprintf>:
 800ee34:	b40e      	push	{r1, r2, r3}
 800ee36:	b503      	push	{r0, r1, lr}
 800ee38:	4601      	mov	r1, r0
 800ee3a:	ab03      	add	r3, sp, #12
 800ee3c:	4805      	ldr	r0, [pc, #20]	; (800ee54 <fiprintf+0x20>)
 800ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee42:	6800      	ldr	r0, [r0, #0]
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	f000 f98f 	bl	800f168 <_vfiprintf_r>
 800ee4a:	b002      	add	sp, #8
 800ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee50:	b003      	add	sp, #12
 800ee52:	4770      	bx	lr
 800ee54:	200001f8 	.word	0x200001f8

0800ee58 <__sccl>:
 800ee58:	b570      	push	{r4, r5, r6, lr}
 800ee5a:	780b      	ldrb	r3, [r1, #0]
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	2b5e      	cmp	r3, #94	; 0x5e
 800ee60:	bf0b      	itete	eq
 800ee62:	784b      	ldrbeq	r3, [r1, #1]
 800ee64:	1c4a      	addne	r2, r1, #1
 800ee66:	1c8a      	addeq	r2, r1, #2
 800ee68:	2100      	movne	r1, #0
 800ee6a:	bf08      	it	eq
 800ee6c:	2101      	moveq	r1, #1
 800ee6e:	3801      	subs	r0, #1
 800ee70:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ee74:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ee78:	42a8      	cmp	r0, r5
 800ee7a:	d1fb      	bne.n	800ee74 <__sccl+0x1c>
 800ee7c:	b90b      	cbnz	r3, 800ee82 <__sccl+0x2a>
 800ee7e:	1e50      	subs	r0, r2, #1
 800ee80:	bd70      	pop	{r4, r5, r6, pc}
 800ee82:	f081 0101 	eor.w	r1, r1, #1
 800ee86:	54e1      	strb	r1, [r4, r3]
 800ee88:	4610      	mov	r0, r2
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ee90:	2d2d      	cmp	r5, #45	; 0x2d
 800ee92:	d005      	beq.n	800eea0 <__sccl+0x48>
 800ee94:	2d5d      	cmp	r5, #93	; 0x5d
 800ee96:	d016      	beq.n	800eec6 <__sccl+0x6e>
 800ee98:	2d00      	cmp	r5, #0
 800ee9a:	d0f1      	beq.n	800ee80 <__sccl+0x28>
 800ee9c:	462b      	mov	r3, r5
 800ee9e:	e7f2      	b.n	800ee86 <__sccl+0x2e>
 800eea0:	7846      	ldrb	r6, [r0, #1]
 800eea2:	2e5d      	cmp	r6, #93	; 0x5d
 800eea4:	d0fa      	beq.n	800ee9c <__sccl+0x44>
 800eea6:	42b3      	cmp	r3, r6
 800eea8:	dcf8      	bgt.n	800ee9c <__sccl+0x44>
 800eeaa:	3002      	adds	r0, #2
 800eeac:	461a      	mov	r2, r3
 800eeae:	3201      	adds	r2, #1
 800eeb0:	4296      	cmp	r6, r2
 800eeb2:	54a1      	strb	r1, [r4, r2]
 800eeb4:	dcfb      	bgt.n	800eeae <__sccl+0x56>
 800eeb6:	1af2      	subs	r2, r6, r3
 800eeb8:	3a01      	subs	r2, #1
 800eeba:	1c5d      	adds	r5, r3, #1
 800eebc:	42b3      	cmp	r3, r6
 800eebe:	bfa8      	it	ge
 800eec0:	2200      	movge	r2, #0
 800eec2:	18ab      	adds	r3, r5, r2
 800eec4:	e7e1      	b.n	800ee8a <__sccl+0x32>
 800eec6:	4610      	mov	r0, r2
 800eec8:	e7da      	b.n	800ee80 <__sccl+0x28>

0800eeca <__submore>:
 800eeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eece:	460c      	mov	r4, r1
 800eed0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eed6:	4299      	cmp	r1, r3
 800eed8:	d11d      	bne.n	800ef16 <__submore+0x4c>
 800eeda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eede:	f7fe fca5 	bl	800d82c <_malloc_r>
 800eee2:	b918      	cbnz	r0, 800eeec <__submore+0x22>
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eef0:	63a3      	str	r3, [r4, #56]	; 0x38
 800eef2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eef6:	6360      	str	r0, [r4, #52]	; 0x34
 800eef8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800eefc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ef00:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ef04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ef08:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ef0c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ef10:	6020      	str	r0, [r4, #0]
 800ef12:	2000      	movs	r0, #0
 800ef14:	e7e8      	b.n	800eee8 <__submore+0x1e>
 800ef16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ef18:	0077      	lsls	r7, r6, #1
 800ef1a:	463a      	mov	r2, r7
 800ef1c:	f000 f857 	bl	800efce <_realloc_r>
 800ef20:	4605      	mov	r5, r0
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d0de      	beq.n	800eee4 <__submore+0x1a>
 800ef26:	eb00 0806 	add.w	r8, r0, r6
 800ef2a:	4601      	mov	r1, r0
 800ef2c:	4632      	mov	r2, r6
 800ef2e:	4640      	mov	r0, r8
 800ef30:	f7fd f9fa 	bl	800c328 <memcpy>
 800ef34:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ef38:	f8c4 8000 	str.w	r8, [r4]
 800ef3c:	e7e9      	b.n	800ef12 <__submore+0x48>

0800ef3e <memmove>:
 800ef3e:	4288      	cmp	r0, r1
 800ef40:	b510      	push	{r4, lr}
 800ef42:	eb01 0402 	add.w	r4, r1, r2
 800ef46:	d902      	bls.n	800ef4e <memmove+0x10>
 800ef48:	4284      	cmp	r4, r0
 800ef4a:	4623      	mov	r3, r4
 800ef4c:	d807      	bhi.n	800ef5e <memmove+0x20>
 800ef4e:	1e43      	subs	r3, r0, #1
 800ef50:	42a1      	cmp	r1, r4
 800ef52:	d008      	beq.n	800ef66 <memmove+0x28>
 800ef54:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef58:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef5c:	e7f8      	b.n	800ef50 <memmove+0x12>
 800ef5e:	4402      	add	r2, r0
 800ef60:	4601      	mov	r1, r0
 800ef62:	428a      	cmp	r2, r1
 800ef64:	d100      	bne.n	800ef68 <memmove+0x2a>
 800ef66:	bd10      	pop	{r4, pc}
 800ef68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef70:	e7f7      	b.n	800ef62 <memmove+0x24>
	...

0800ef74 <_sbrk_r>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4d06      	ldr	r5, [pc, #24]	; (800ef90 <_sbrk_r+0x1c>)
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	4608      	mov	r0, r1
 800ef7e:	602b      	str	r3, [r5, #0]
 800ef80:	f7f3 fe50 	bl	8002c24 <_sbrk>
 800ef84:	1c43      	adds	r3, r0, #1
 800ef86:	d102      	bne.n	800ef8e <_sbrk_r+0x1a>
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	b103      	cbz	r3, 800ef8e <_sbrk_r+0x1a>
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	20000ab8 	.word	0x20000ab8

0800ef94 <abort>:
 800ef94:	b508      	push	{r3, lr}
 800ef96:	2006      	movs	r0, #6
 800ef98:	f000 fabe 	bl	800f518 <raise>
 800ef9c:	2001      	movs	r0, #1
 800ef9e:	f7f3 fdc9 	bl	8002b34 <_exit>

0800efa2 <_calloc_r>:
 800efa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efa4:	fba1 2402 	umull	r2, r4, r1, r2
 800efa8:	b94c      	cbnz	r4, 800efbe <_calloc_r+0x1c>
 800efaa:	4611      	mov	r1, r2
 800efac:	9201      	str	r2, [sp, #4]
 800efae:	f7fe fc3d 	bl	800d82c <_malloc_r>
 800efb2:	9a01      	ldr	r2, [sp, #4]
 800efb4:	4605      	mov	r5, r0
 800efb6:	b930      	cbnz	r0, 800efc6 <_calloc_r+0x24>
 800efb8:	4628      	mov	r0, r5
 800efba:	b003      	add	sp, #12
 800efbc:	bd30      	pop	{r4, r5, pc}
 800efbe:	220c      	movs	r2, #12
 800efc0:	6002      	str	r2, [r0, #0]
 800efc2:	2500      	movs	r5, #0
 800efc4:	e7f8      	b.n	800efb8 <_calloc_r+0x16>
 800efc6:	4621      	mov	r1, r4
 800efc8:	f7fd f899 	bl	800c0fe <memset>
 800efcc:	e7f4      	b.n	800efb8 <_calloc_r+0x16>

0800efce <_realloc_r>:
 800efce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd2:	4680      	mov	r8, r0
 800efd4:	4614      	mov	r4, r2
 800efd6:	460e      	mov	r6, r1
 800efd8:	b921      	cbnz	r1, 800efe4 <_realloc_r+0x16>
 800efda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efde:	4611      	mov	r1, r2
 800efe0:	f7fe bc24 	b.w	800d82c <_malloc_r>
 800efe4:	b92a      	cbnz	r2, 800eff2 <_realloc_r+0x24>
 800efe6:	f7fe f855 	bl	800d094 <_free_r>
 800efea:	4625      	mov	r5, r4
 800efec:	4628      	mov	r0, r5
 800efee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff2:	f000 faad 	bl	800f550 <_malloc_usable_size_r>
 800eff6:	4284      	cmp	r4, r0
 800eff8:	4607      	mov	r7, r0
 800effa:	d802      	bhi.n	800f002 <_realloc_r+0x34>
 800effc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f000:	d812      	bhi.n	800f028 <_realloc_r+0x5a>
 800f002:	4621      	mov	r1, r4
 800f004:	4640      	mov	r0, r8
 800f006:	f7fe fc11 	bl	800d82c <_malloc_r>
 800f00a:	4605      	mov	r5, r0
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d0ed      	beq.n	800efec <_realloc_r+0x1e>
 800f010:	42bc      	cmp	r4, r7
 800f012:	4622      	mov	r2, r4
 800f014:	4631      	mov	r1, r6
 800f016:	bf28      	it	cs
 800f018:	463a      	movcs	r2, r7
 800f01a:	f7fd f985 	bl	800c328 <memcpy>
 800f01e:	4631      	mov	r1, r6
 800f020:	4640      	mov	r0, r8
 800f022:	f7fe f837 	bl	800d094 <_free_r>
 800f026:	e7e1      	b.n	800efec <_realloc_r+0x1e>
 800f028:	4635      	mov	r5, r6
 800f02a:	e7df      	b.n	800efec <_realloc_r+0x1e>

0800f02c <_strtoul_l.constprop.0>:
 800f02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f030:	4f36      	ldr	r7, [pc, #216]	; (800f10c <_strtoul_l.constprop.0+0xe0>)
 800f032:	4686      	mov	lr, r0
 800f034:	460d      	mov	r5, r1
 800f036:	4628      	mov	r0, r5
 800f038:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f03c:	5d3e      	ldrb	r6, [r7, r4]
 800f03e:	f016 0608 	ands.w	r6, r6, #8
 800f042:	d1f8      	bne.n	800f036 <_strtoul_l.constprop.0+0xa>
 800f044:	2c2d      	cmp	r4, #45	; 0x2d
 800f046:	d130      	bne.n	800f0aa <_strtoul_l.constprop.0+0x7e>
 800f048:	782c      	ldrb	r4, [r5, #0]
 800f04a:	2601      	movs	r6, #1
 800f04c:	1c85      	adds	r5, r0, #2
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d057      	beq.n	800f102 <_strtoul_l.constprop.0+0xd6>
 800f052:	2b10      	cmp	r3, #16
 800f054:	d109      	bne.n	800f06a <_strtoul_l.constprop.0+0x3e>
 800f056:	2c30      	cmp	r4, #48	; 0x30
 800f058:	d107      	bne.n	800f06a <_strtoul_l.constprop.0+0x3e>
 800f05a:	7828      	ldrb	r0, [r5, #0]
 800f05c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f060:	2858      	cmp	r0, #88	; 0x58
 800f062:	d149      	bne.n	800f0f8 <_strtoul_l.constprop.0+0xcc>
 800f064:	786c      	ldrb	r4, [r5, #1]
 800f066:	2310      	movs	r3, #16
 800f068:	3502      	adds	r5, #2
 800f06a:	f04f 38ff 	mov.w	r8, #4294967295
 800f06e:	2700      	movs	r7, #0
 800f070:	fbb8 f8f3 	udiv	r8, r8, r3
 800f074:	fb03 f908 	mul.w	r9, r3, r8
 800f078:	ea6f 0909 	mvn.w	r9, r9
 800f07c:	4638      	mov	r0, r7
 800f07e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f082:	f1bc 0f09 	cmp.w	ip, #9
 800f086:	d815      	bhi.n	800f0b4 <_strtoul_l.constprop.0+0x88>
 800f088:	4664      	mov	r4, ip
 800f08a:	42a3      	cmp	r3, r4
 800f08c:	dd23      	ble.n	800f0d6 <_strtoul_l.constprop.0+0xaa>
 800f08e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f092:	d007      	beq.n	800f0a4 <_strtoul_l.constprop.0+0x78>
 800f094:	4580      	cmp	r8, r0
 800f096:	d31b      	bcc.n	800f0d0 <_strtoul_l.constprop.0+0xa4>
 800f098:	d101      	bne.n	800f09e <_strtoul_l.constprop.0+0x72>
 800f09a:	45a1      	cmp	r9, r4
 800f09c:	db18      	blt.n	800f0d0 <_strtoul_l.constprop.0+0xa4>
 800f09e:	fb00 4003 	mla	r0, r0, r3, r4
 800f0a2:	2701      	movs	r7, #1
 800f0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0a8:	e7e9      	b.n	800f07e <_strtoul_l.constprop.0+0x52>
 800f0aa:	2c2b      	cmp	r4, #43	; 0x2b
 800f0ac:	bf04      	itt	eq
 800f0ae:	782c      	ldrbeq	r4, [r5, #0]
 800f0b0:	1c85      	addeq	r5, r0, #2
 800f0b2:	e7cc      	b.n	800f04e <_strtoul_l.constprop.0+0x22>
 800f0b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f0b8:	f1bc 0f19 	cmp.w	ip, #25
 800f0bc:	d801      	bhi.n	800f0c2 <_strtoul_l.constprop.0+0x96>
 800f0be:	3c37      	subs	r4, #55	; 0x37
 800f0c0:	e7e3      	b.n	800f08a <_strtoul_l.constprop.0+0x5e>
 800f0c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f0c6:	f1bc 0f19 	cmp.w	ip, #25
 800f0ca:	d804      	bhi.n	800f0d6 <_strtoul_l.constprop.0+0xaa>
 800f0cc:	3c57      	subs	r4, #87	; 0x57
 800f0ce:	e7dc      	b.n	800f08a <_strtoul_l.constprop.0+0x5e>
 800f0d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f0d4:	e7e6      	b.n	800f0a4 <_strtoul_l.constprop.0+0x78>
 800f0d6:	1c7b      	adds	r3, r7, #1
 800f0d8:	d106      	bne.n	800f0e8 <_strtoul_l.constprop.0+0xbc>
 800f0da:	2322      	movs	r3, #34	; 0x22
 800f0dc:	f8ce 3000 	str.w	r3, [lr]
 800f0e0:	4638      	mov	r0, r7
 800f0e2:	b932      	cbnz	r2, 800f0f2 <_strtoul_l.constprop.0+0xc6>
 800f0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0e8:	b106      	cbz	r6, 800f0ec <_strtoul_l.constprop.0+0xc0>
 800f0ea:	4240      	negs	r0, r0
 800f0ec:	2a00      	cmp	r2, #0
 800f0ee:	d0f9      	beq.n	800f0e4 <_strtoul_l.constprop.0+0xb8>
 800f0f0:	b107      	cbz	r7, 800f0f4 <_strtoul_l.constprop.0+0xc8>
 800f0f2:	1e69      	subs	r1, r5, #1
 800f0f4:	6011      	str	r1, [r2, #0]
 800f0f6:	e7f5      	b.n	800f0e4 <_strtoul_l.constprop.0+0xb8>
 800f0f8:	2430      	movs	r4, #48	; 0x30
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1b5      	bne.n	800f06a <_strtoul_l.constprop.0+0x3e>
 800f0fe:	2308      	movs	r3, #8
 800f100:	e7b3      	b.n	800f06a <_strtoul_l.constprop.0+0x3e>
 800f102:	2c30      	cmp	r4, #48	; 0x30
 800f104:	d0a9      	beq.n	800f05a <_strtoul_l.constprop.0+0x2e>
 800f106:	230a      	movs	r3, #10
 800f108:	e7af      	b.n	800f06a <_strtoul_l.constprop.0+0x3e>
 800f10a:	bf00      	nop
 800f10c:	08012865 	.word	0x08012865

0800f110 <_strtoul_r>:
 800f110:	f7ff bf8c 	b.w	800f02c <_strtoul_l.constprop.0>

0800f114 <__sfputc_r>:
 800f114:	6893      	ldr	r3, [r2, #8]
 800f116:	3b01      	subs	r3, #1
 800f118:	2b00      	cmp	r3, #0
 800f11a:	b410      	push	{r4}
 800f11c:	6093      	str	r3, [r2, #8]
 800f11e:	da08      	bge.n	800f132 <__sfputc_r+0x1e>
 800f120:	6994      	ldr	r4, [r2, #24]
 800f122:	42a3      	cmp	r3, r4
 800f124:	db01      	blt.n	800f12a <__sfputc_r+0x16>
 800f126:	290a      	cmp	r1, #10
 800f128:	d103      	bne.n	800f132 <__sfputc_r+0x1e>
 800f12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f12e:	f000 b935 	b.w	800f39c <__swbuf_r>
 800f132:	6813      	ldr	r3, [r2, #0]
 800f134:	1c58      	adds	r0, r3, #1
 800f136:	6010      	str	r0, [r2, #0]
 800f138:	7019      	strb	r1, [r3, #0]
 800f13a:	4608      	mov	r0, r1
 800f13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <__sfputs_r>:
 800f142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f144:	4606      	mov	r6, r0
 800f146:	460f      	mov	r7, r1
 800f148:	4614      	mov	r4, r2
 800f14a:	18d5      	adds	r5, r2, r3
 800f14c:	42ac      	cmp	r4, r5
 800f14e:	d101      	bne.n	800f154 <__sfputs_r+0x12>
 800f150:	2000      	movs	r0, #0
 800f152:	e007      	b.n	800f164 <__sfputs_r+0x22>
 800f154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f158:	463a      	mov	r2, r7
 800f15a:	4630      	mov	r0, r6
 800f15c:	f7ff ffda 	bl	800f114 <__sfputc_r>
 800f160:	1c43      	adds	r3, r0, #1
 800f162:	d1f3      	bne.n	800f14c <__sfputs_r+0xa>
 800f164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f168 <_vfiprintf_r>:
 800f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	460d      	mov	r5, r1
 800f16e:	b09d      	sub	sp, #116	; 0x74
 800f170:	4614      	mov	r4, r2
 800f172:	4698      	mov	r8, r3
 800f174:	4606      	mov	r6, r0
 800f176:	b118      	cbz	r0, 800f180 <_vfiprintf_r+0x18>
 800f178:	6a03      	ldr	r3, [r0, #32]
 800f17a:	b90b      	cbnz	r3, 800f180 <_vfiprintf_r+0x18>
 800f17c:	f7fc fef8 	bl	800bf70 <__sinit>
 800f180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f182:	07d9      	lsls	r1, r3, #31
 800f184:	d405      	bmi.n	800f192 <_vfiprintf_r+0x2a>
 800f186:	89ab      	ldrh	r3, [r5, #12]
 800f188:	059a      	lsls	r2, r3, #22
 800f18a:	d402      	bmi.n	800f192 <_vfiprintf_r+0x2a>
 800f18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f18e:	f7fd f8c1 	bl	800c314 <__retarget_lock_acquire_recursive>
 800f192:	89ab      	ldrh	r3, [r5, #12]
 800f194:	071b      	lsls	r3, r3, #28
 800f196:	d501      	bpl.n	800f19c <_vfiprintf_r+0x34>
 800f198:	692b      	ldr	r3, [r5, #16]
 800f19a:	b99b      	cbnz	r3, 800f1c4 <_vfiprintf_r+0x5c>
 800f19c:	4629      	mov	r1, r5
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f000 f93a 	bl	800f418 <__swsetup_r>
 800f1a4:	b170      	cbz	r0, 800f1c4 <_vfiprintf_r+0x5c>
 800f1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1a8:	07dc      	lsls	r4, r3, #31
 800f1aa:	d504      	bpl.n	800f1b6 <_vfiprintf_r+0x4e>
 800f1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b0:	b01d      	add	sp, #116	; 0x74
 800f1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b6:	89ab      	ldrh	r3, [r5, #12]
 800f1b8:	0598      	lsls	r0, r3, #22
 800f1ba:	d4f7      	bmi.n	800f1ac <_vfiprintf_r+0x44>
 800f1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1be:	f7fd f8aa 	bl	800c316 <__retarget_lock_release_recursive>
 800f1c2:	e7f3      	b.n	800f1ac <_vfiprintf_r+0x44>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c8:	2320      	movs	r3, #32
 800f1ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1d2:	2330      	movs	r3, #48	; 0x30
 800f1d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f388 <_vfiprintf_r+0x220>
 800f1d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1dc:	f04f 0901 	mov.w	r9, #1
 800f1e0:	4623      	mov	r3, r4
 800f1e2:	469a      	mov	sl, r3
 800f1e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1e8:	b10a      	cbz	r2, 800f1ee <_vfiprintf_r+0x86>
 800f1ea:	2a25      	cmp	r2, #37	; 0x25
 800f1ec:	d1f9      	bne.n	800f1e2 <_vfiprintf_r+0x7a>
 800f1ee:	ebba 0b04 	subs.w	fp, sl, r4
 800f1f2:	d00b      	beq.n	800f20c <_vfiprintf_r+0xa4>
 800f1f4:	465b      	mov	r3, fp
 800f1f6:	4622      	mov	r2, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f7ff ffa1 	bl	800f142 <__sfputs_r>
 800f200:	3001      	adds	r0, #1
 800f202:	f000 80a9 	beq.w	800f358 <_vfiprintf_r+0x1f0>
 800f206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f208:	445a      	add	r2, fp
 800f20a:	9209      	str	r2, [sp, #36]	; 0x24
 800f20c:	f89a 3000 	ldrb.w	r3, [sl]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 80a1 	beq.w	800f358 <_vfiprintf_r+0x1f0>
 800f216:	2300      	movs	r3, #0
 800f218:	f04f 32ff 	mov.w	r2, #4294967295
 800f21c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f220:	f10a 0a01 	add.w	sl, sl, #1
 800f224:	9304      	str	r3, [sp, #16]
 800f226:	9307      	str	r3, [sp, #28]
 800f228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f22c:	931a      	str	r3, [sp, #104]	; 0x68
 800f22e:	4654      	mov	r4, sl
 800f230:	2205      	movs	r2, #5
 800f232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f236:	4854      	ldr	r0, [pc, #336]	; (800f388 <_vfiprintf_r+0x220>)
 800f238:	f7f0 ffda 	bl	80001f0 <memchr>
 800f23c:	9a04      	ldr	r2, [sp, #16]
 800f23e:	b9d8      	cbnz	r0, 800f278 <_vfiprintf_r+0x110>
 800f240:	06d1      	lsls	r1, r2, #27
 800f242:	bf44      	itt	mi
 800f244:	2320      	movmi	r3, #32
 800f246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f24a:	0713      	lsls	r3, r2, #28
 800f24c:	bf44      	itt	mi
 800f24e:	232b      	movmi	r3, #43	; 0x2b
 800f250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f254:	f89a 3000 	ldrb.w	r3, [sl]
 800f258:	2b2a      	cmp	r3, #42	; 0x2a
 800f25a:	d015      	beq.n	800f288 <_vfiprintf_r+0x120>
 800f25c:	9a07      	ldr	r2, [sp, #28]
 800f25e:	4654      	mov	r4, sl
 800f260:	2000      	movs	r0, #0
 800f262:	f04f 0c0a 	mov.w	ip, #10
 800f266:	4621      	mov	r1, r4
 800f268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f26c:	3b30      	subs	r3, #48	; 0x30
 800f26e:	2b09      	cmp	r3, #9
 800f270:	d94d      	bls.n	800f30e <_vfiprintf_r+0x1a6>
 800f272:	b1b0      	cbz	r0, 800f2a2 <_vfiprintf_r+0x13a>
 800f274:	9207      	str	r2, [sp, #28]
 800f276:	e014      	b.n	800f2a2 <_vfiprintf_r+0x13a>
 800f278:	eba0 0308 	sub.w	r3, r0, r8
 800f27c:	fa09 f303 	lsl.w	r3, r9, r3
 800f280:	4313      	orrs	r3, r2
 800f282:	9304      	str	r3, [sp, #16]
 800f284:	46a2      	mov	sl, r4
 800f286:	e7d2      	b.n	800f22e <_vfiprintf_r+0xc6>
 800f288:	9b03      	ldr	r3, [sp, #12]
 800f28a:	1d19      	adds	r1, r3, #4
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	9103      	str	r1, [sp, #12]
 800f290:	2b00      	cmp	r3, #0
 800f292:	bfbb      	ittet	lt
 800f294:	425b      	neglt	r3, r3
 800f296:	f042 0202 	orrlt.w	r2, r2, #2
 800f29a:	9307      	strge	r3, [sp, #28]
 800f29c:	9307      	strlt	r3, [sp, #28]
 800f29e:	bfb8      	it	lt
 800f2a0:	9204      	strlt	r2, [sp, #16]
 800f2a2:	7823      	ldrb	r3, [r4, #0]
 800f2a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a6:	d10c      	bne.n	800f2c2 <_vfiprintf_r+0x15a>
 800f2a8:	7863      	ldrb	r3, [r4, #1]
 800f2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ac:	d134      	bne.n	800f318 <_vfiprintf_r+0x1b0>
 800f2ae:	9b03      	ldr	r3, [sp, #12]
 800f2b0:	1d1a      	adds	r2, r3, #4
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	9203      	str	r2, [sp, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bfb8      	it	lt
 800f2ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2be:	3402      	adds	r4, #2
 800f2c0:	9305      	str	r3, [sp, #20]
 800f2c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f398 <_vfiprintf_r+0x230>
 800f2c6:	7821      	ldrb	r1, [r4, #0]
 800f2c8:	2203      	movs	r2, #3
 800f2ca:	4650      	mov	r0, sl
 800f2cc:	f7f0 ff90 	bl	80001f0 <memchr>
 800f2d0:	b138      	cbz	r0, 800f2e2 <_vfiprintf_r+0x17a>
 800f2d2:	9b04      	ldr	r3, [sp, #16]
 800f2d4:	eba0 000a 	sub.w	r0, r0, sl
 800f2d8:	2240      	movs	r2, #64	; 0x40
 800f2da:	4082      	lsls	r2, r0
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	3401      	adds	r4, #1
 800f2e0:	9304      	str	r3, [sp, #16]
 800f2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e6:	4829      	ldr	r0, [pc, #164]	; (800f38c <_vfiprintf_r+0x224>)
 800f2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2ec:	2206      	movs	r2, #6
 800f2ee:	f7f0 ff7f 	bl	80001f0 <memchr>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d03f      	beq.n	800f376 <_vfiprintf_r+0x20e>
 800f2f6:	4b26      	ldr	r3, [pc, #152]	; (800f390 <_vfiprintf_r+0x228>)
 800f2f8:	bb1b      	cbnz	r3, 800f342 <_vfiprintf_r+0x1da>
 800f2fa:	9b03      	ldr	r3, [sp, #12]
 800f2fc:	3307      	adds	r3, #7
 800f2fe:	f023 0307 	bic.w	r3, r3, #7
 800f302:	3308      	adds	r3, #8
 800f304:	9303      	str	r3, [sp, #12]
 800f306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f308:	443b      	add	r3, r7
 800f30a:	9309      	str	r3, [sp, #36]	; 0x24
 800f30c:	e768      	b.n	800f1e0 <_vfiprintf_r+0x78>
 800f30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f312:	460c      	mov	r4, r1
 800f314:	2001      	movs	r0, #1
 800f316:	e7a6      	b.n	800f266 <_vfiprintf_r+0xfe>
 800f318:	2300      	movs	r3, #0
 800f31a:	3401      	adds	r4, #1
 800f31c:	9305      	str	r3, [sp, #20]
 800f31e:	4619      	mov	r1, r3
 800f320:	f04f 0c0a 	mov.w	ip, #10
 800f324:	4620      	mov	r0, r4
 800f326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f32a:	3a30      	subs	r2, #48	; 0x30
 800f32c:	2a09      	cmp	r2, #9
 800f32e:	d903      	bls.n	800f338 <_vfiprintf_r+0x1d0>
 800f330:	2b00      	cmp	r3, #0
 800f332:	d0c6      	beq.n	800f2c2 <_vfiprintf_r+0x15a>
 800f334:	9105      	str	r1, [sp, #20]
 800f336:	e7c4      	b.n	800f2c2 <_vfiprintf_r+0x15a>
 800f338:	fb0c 2101 	mla	r1, ip, r1, r2
 800f33c:	4604      	mov	r4, r0
 800f33e:	2301      	movs	r3, #1
 800f340:	e7f0      	b.n	800f324 <_vfiprintf_r+0x1bc>
 800f342:	ab03      	add	r3, sp, #12
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	462a      	mov	r2, r5
 800f348:	4b12      	ldr	r3, [pc, #72]	; (800f394 <_vfiprintf_r+0x22c>)
 800f34a:	a904      	add	r1, sp, #16
 800f34c:	4630      	mov	r0, r6
 800f34e:	f7fb ffbf 	bl	800b2d0 <_printf_float>
 800f352:	4607      	mov	r7, r0
 800f354:	1c78      	adds	r0, r7, #1
 800f356:	d1d6      	bne.n	800f306 <_vfiprintf_r+0x19e>
 800f358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f35a:	07d9      	lsls	r1, r3, #31
 800f35c:	d405      	bmi.n	800f36a <_vfiprintf_r+0x202>
 800f35e:	89ab      	ldrh	r3, [r5, #12]
 800f360:	059a      	lsls	r2, r3, #22
 800f362:	d402      	bmi.n	800f36a <_vfiprintf_r+0x202>
 800f364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f366:	f7fc ffd6 	bl	800c316 <__retarget_lock_release_recursive>
 800f36a:	89ab      	ldrh	r3, [r5, #12]
 800f36c:	065b      	lsls	r3, r3, #25
 800f36e:	f53f af1d 	bmi.w	800f1ac <_vfiprintf_r+0x44>
 800f372:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f374:	e71c      	b.n	800f1b0 <_vfiprintf_r+0x48>
 800f376:	ab03      	add	r3, sp, #12
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	462a      	mov	r2, r5
 800f37c:	4b05      	ldr	r3, [pc, #20]	; (800f394 <_vfiprintf_r+0x22c>)
 800f37e:	a904      	add	r1, sp, #16
 800f380:	4630      	mov	r0, r6
 800f382:	f7fc fa49 	bl	800b818 <_printf_i>
 800f386:	e7e4      	b.n	800f352 <_vfiprintf_r+0x1ea>
 800f388:	08012965 	.word	0x08012965
 800f38c:	0801296f 	.word	0x0801296f
 800f390:	0800b2d1 	.word	0x0800b2d1
 800f394:	0800f143 	.word	0x0800f143
 800f398:	0801296b 	.word	0x0801296b

0800f39c <__swbuf_r>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	460e      	mov	r6, r1
 800f3a0:	4614      	mov	r4, r2
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	b118      	cbz	r0, 800f3ae <__swbuf_r+0x12>
 800f3a6:	6a03      	ldr	r3, [r0, #32]
 800f3a8:	b90b      	cbnz	r3, 800f3ae <__swbuf_r+0x12>
 800f3aa:	f7fc fde1 	bl	800bf70 <__sinit>
 800f3ae:	69a3      	ldr	r3, [r4, #24]
 800f3b0:	60a3      	str	r3, [r4, #8]
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	071a      	lsls	r2, r3, #28
 800f3b6:	d525      	bpl.n	800f404 <__swbuf_r+0x68>
 800f3b8:	6923      	ldr	r3, [r4, #16]
 800f3ba:	b31b      	cbz	r3, 800f404 <__swbuf_r+0x68>
 800f3bc:	6823      	ldr	r3, [r4, #0]
 800f3be:	6922      	ldr	r2, [r4, #16]
 800f3c0:	1a98      	subs	r0, r3, r2
 800f3c2:	6963      	ldr	r3, [r4, #20]
 800f3c4:	b2f6      	uxtb	r6, r6
 800f3c6:	4283      	cmp	r3, r0
 800f3c8:	4637      	mov	r7, r6
 800f3ca:	dc04      	bgt.n	800f3d6 <__swbuf_r+0x3a>
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7ff fd08 	bl	800ede4 <_fflush_r>
 800f3d4:	b9e0      	cbnz	r0, 800f410 <__swbuf_r+0x74>
 800f3d6:	68a3      	ldr	r3, [r4, #8]
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	60a3      	str	r3, [r4, #8]
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	1c5a      	adds	r2, r3, #1
 800f3e0:	6022      	str	r2, [r4, #0]
 800f3e2:	701e      	strb	r6, [r3, #0]
 800f3e4:	6962      	ldr	r2, [r4, #20]
 800f3e6:	1c43      	adds	r3, r0, #1
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d004      	beq.n	800f3f6 <__swbuf_r+0x5a>
 800f3ec:	89a3      	ldrh	r3, [r4, #12]
 800f3ee:	07db      	lsls	r3, r3, #31
 800f3f0:	d506      	bpl.n	800f400 <__swbuf_r+0x64>
 800f3f2:	2e0a      	cmp	r6, #10
 800f3f4:	d104      	bne.n	800f400 <__swbuf_r+0x64>
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f7ff fcf3 	bl	800ede4 <_fflush_r>
 800f3fe:	b938      	cbnz	r0, 800f410 <__swbuf_r+0x74>
 800f400:	4638      	mov	r0, r7
 800f402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f404:	4621      	mov	r1, r4
 800f406:	4628      	mov	r0, r5
 800f408:	f000 f806 	bl	800f418 <__swsetup_r>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d0d5      	beq.n	800f3bc <__swbuf_r+0x20>
 800f410:	f04f 37ff 	mov.w	r7, #4294967295
 800f414:	e7f4      	b.n	800f400 <__swbuf_r+0x64>
	...

0800f418 <__swsetup_r>:
 800f418:	b538      	push	{r3, r4, r5, lr}
 800f41a:	4b2a      	ldr	r3, [pc, #168]	; (800f4c4 <__swsetup_r+0xac>)
 800f41c:	4605      	mov	r5, r0
 800f41e:	6818      	ldr	r0, [r3, #0]
 800f420:	460c      	mov	r4, r1
 800f422:	b118      	cbz	r0, 800f42c <__swsetup_r+0x14>
 800f424:	6a03      	ldr	r3, [r0, #32]
 800f426:	b90b      	cbnz	r3, 800f42c <__swsetup_r+0x14>
 800f428:	f7fc fda2 	bl	800bf70 <__sinit>
 800f42c:	89a3      	ldrh	r3, [r4, #12]
 800f42e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f432:	0718      	lsls	r0, r3, #28
 800f434:	d422      	bmi.n	800f47c <__swsetup_r+0x64>
 800f436:	06d9      	lsls	r1, r3, #27
 800f438:	d407      	bmi.n	800f44a <__swsetup_r+0x32>
 800f43a:	2309      	movs	r3, #9
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f442:	81a3      	strh	r3, [r4, #12]
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	e034      	b.n	800f4b4 <__swsetup_r+0x9c>
 800f44a:	0758      	lsls	r0, r3, #29
 800f44c:	d512      	bpl.n	800f474 <__swsetup_r+0x5c>
 800f44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f450:	b141      	cbz	r1, 800f464 <__swsetup_r+0x4c>
 800f452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f456:	4299      	cmp	r1, r3
 800f458:	d002      	beq.n	800f460 <__swsetup_r+0x48>
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7fd fe1a 	bl	800d094 <_free_r>
 800f460:	2300      	movs	r3, #0
 800f462:	6363      	str	r3, [r4, #52]	; 0x34
 800f464:	89a3      	ldrh	r3, [r4, #12]
 800f466:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	2300      	movs	r3, #0
 800f46e:	6063      	str	r3, [r4, #4]
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	6023      	str	r3, [r4, #0]
 800f474:	89a3      	ldrh	r3, [r4, #12]
 800f476:	f043 0308 	orr.w	r3, r3, #8
 800f47a:	81a3      	strh	r3, [r4, #12]
 800f47c:	6923      	ldr	r3, [r4, #16]
 800f47e:	b94b      	cbnz	r3, 800f494 <__swsetup_r+0x7c>
 800f480:	89a3      	ldrh	r3, [r4, #12]
 800f482:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f48a:	d003      	beq.n	800f494 <__swsetup_r+0x7c>
 800f48c:	4621      	mov	r1, r4
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 f88c 	bl	800f5ac <__smakebuf_r>
 800f494:	89a0      	ldrh	r0, [r4, #12]
 800f496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f49a:	f010 0301 	ands.w	r3, r0, #1
 800f49e:	d00a      	beq.n	800f4b6 <__swsetup_r+0x9e>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60a3      	str	r3, [r4, #8]
 800f4a4:	6963      	ldr	r3, [r4, #20]
 800f4a6:	425b      	negs	r3, r3
 800f4a8:	61a3      	str	r3, [r4, #24]
 800f4aa:	6923      	ldr	r3, [r4, #16]
 800f4ac:	b943      	cbnz	r3, 800f4c0 <__swsetup_r+0xa8>
 800f4ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4b2:	d1c4      	bne.n	800f43e <__swsetup_r+0x26>
 800f4b4:	bd38      	pop	{r3, r4, r5, pc}
 800f4b6:	0781      	lsls	r1, r0, #30
 800f4b8:	bf58      	it	pl
 800f4ba:	6963      	ldrpl	r3, [r4, #20]
 800f4bc:	60a3      	str	r3, [r4, #8]
 800f4be:	e7f4      	b.n	800f4aa <__swsetup_r+0x92>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	e7f7      	b.n	800f4b4 <__swsetup_r+0x9c>
 800f4c4:	200001f8 	.word	0x200001f8

0800f4c8 <_raise_r>:
 800f4c8:	291f      	cmp	r1, #31
 800f4ca:	b538      	push	{r3, r4, r5, lr}
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	460d      	mov	r5, r1
 800f4d0:	d904      	bls.n	800f4dc <_raise_r+0x14>
 800f4d2:	2316      	movs	r3, #22
 800f4d4:	6003      	str	r3, [r0, #0]
 800f4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4da:	bd38      	pop	{r3, r4, r5, pc}
 800f4dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f4de:	b112      	cbz	r2, 800f4e6 <_raise_r+0x1e>
 800f4e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4e4:	b94b      	cbnz	r3, 800f4fa <_raise_r+0x32>
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f000 f830 	bl	800f54c <_getpid_r>
 800f4ec:	462a      	mov	r2, r5
 800f4ee:	4601      	mov	r1, r0
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f6:	f000 b817 	b.w	800f528 <_kill_r>
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d00a      	beq.n	800f514 <_raise_r+0x4c>
 800f4fe:	1c59      	adds	r1, r3, #1
 800f500:	d103      	bne.n	800f50a <_raise_r+0x42>
 800f502:	2316      	movs	r3, #22
 800f504:	6003      	str	r3, [r0, #0]
 800f506:	2001      	movs	r0, #1
 800f508:	e7e7      	b.n	800f4da <_raise_r+0x12>
 800f50a:	2400      	movs	r4, #0
 800f50c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f510:	4628      	mov	r0, r5
 800f512:	4798      	blx	r3
 800f514:	2000      	movs	r0, #0
 800f516:	e7e0      	b.n	800f4da <_raise_r+0x12>

0800f518 <raise>:
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <raise+0xc>)
 800f51a:	4601      	mov	r1, r0
 800f51c:	6818      	ldr	r0, [r3, #0]
 800f51e:	f7ff bfd3 	b.w	800f4c8 <_raise_r>
 800f522:	bf00      	nop
 800f524:	200001f8 	.word	0x200001f8

0800f528 <_kill_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4d07      	ldr	r5, [pc, #28]	; (800f548 <_kill_r+0x20>)
 800f52c:	2300      	movs	r3, #0
 800f52e:	4604      	mov	r4, r0
 800f530:	4608      	mov	r0, r1
 800f532:	4611      	mov	r1, r2
 800f534:	602b      	str	r3, [r5, #0]
 800f536:	f7f3 faed 	bl	8002b14 <_kill>
 800f53a:	1c43      	adds	r3, r0, #1
 800f53c:	d102      	bne.n	800f544 <_kill_r+0x1c>
 800f53e:	682b      	ldr	r3, [r5, #0]
 800f540:	b103      	cbz	r3, 800f544 <_kill_r+0x1c>
 800f542:	6023      	str	r3, [r4, #0]
 800f544:	bd38      	pop	{r3, r4, r5, pc}
 800f546:	bf00      	nop
 800f548:	20000ab8 	.word	0x20000ab8

0800f54c <_getpid_r>:
 800f54c:	f7f3 bada 	b.w	8002b04 <_getpid>

0800f550 <_malloc_usable_size_r>:
 800f550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f554:	1f18      	subs	r0, r3, #4
 800f556:	2b00      	cmp	r3, #0
 800f558:	bfbc      	itt	lt
 800f55a:	580b      	ldrlt	r3, [r1, r0]
 800f55c:	18c0      	addlt	r0, r0, r3
 800f55e:	4770      	bx	lr

0800f560 <__swhatbuf_r>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	460c      	mov	r4, r1
 800f564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f568:	2900      	cmp	r1, #0
 800f56a:	b096      	sub	sp, #88	; 0x58
 800f56c:	4615      	mov	r5, r2
 800f56e:	461e      	mov	r6, r3
 800f570:	da0d      	bge.n	800f58e <__swhatbuf_r+0x2e>
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f578:	f04f 0100 	mov.w	r1, #0
 800f57c:	bf0c      	ite	eq
 800f57e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f582:	2340      	movne	r3, #64	; 0x40
 800f584:	2000      	movs	r0, #0
 800f586:	6031      	str	r1, [r6, #0]
 800f588:	602b      	str	r3, [r5, #0]
 800f58a:	b016      	add	sp, #88	; 0x58
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
 800f58e:	466a      	mov	r2, sp
 800f590:	f000 f848 	bl	800f624 <_fstat_r>
 800f594:	2800      	cmp	r0, #0
 800f596:	dbec      	blt.n	800f572 <__swhatbuf_r+0x12>
 800f598:	9901      	ldr	r1, [sp, #4]
 800f59a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f59e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f5a2:	4259      	negs	r1, r3
 800f5a4:	4159      	adcs	r1, r3
 800f5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5aa:	e7eb      	b.n	800f584 <__swhatbuf_r+0x24>

0800f5ac <__smakebuf_r>:
 800f5ac:	898b      	ldrh	r3, [r1, #12]
 800f5ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5b0:	079d      	lsls	r5, r3, #30
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	d507      	bpl.n	800f5c8 <__smakebuf_r+0x1c>
 800f5b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	6123      	str	r3, [r4, #16]
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	6163      	str	r3, [r4, #20]
 800f5c4:	b002      	add	sp, #8
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}
 800f5c8:	ab01      	add	r3, sp, #4
 800f5ca:	466a      	mov	r2, sp
 800f5cc:	f7ff ffc8 	bl	800f560 <__swhatbuf_r>
 800f5d0:	9900      	ldr	r1, [sp, #0]
 800f5d2:	4605      	mov	r5, r0
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f7fe f929 	bl	800d82c <_malloc_r>
 800f5da:	b948      	cbnz	r0, 800f5f0 <__smakebuf_r+0x44>
 800f5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5e0:	059a      	lsls	r2, r3, #22
 800f5e2:	d4ef      	bmi.n	800f5c4 <__smakebuf_r+0x18>
 800f5e4:	f023 0303 	bic.w	r3, r3, #3
 800f5e8:	f043 0302 	orr.w	r3, r3, #2
 800f5ec:	81a3      	strh	r3, [r4, #12]
 800f5ee:	e7e3      	b.n	800f5b8 <__smakebuf_r+0xc>
 800f5f0:	89a3      	ldrh	r3, [r4, #12]
 800f5f2:	6020      	str	r0, [r4, #0]
 800f5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5f8:	81a3      	strh	r3, [r4, #12]
 800f5fa:	9b00      	ldr	r3, [sp, #0]
 800f5fc:	6163      	str	r3, [r4, #20]
 800f5fe:	9b01      	ldr	r3, [sp, #4]
 800f600:	6120      	str	r0, [r4, #16]
 800f602:	b15b      	cbz	r3, 800f61c <__smakebuf_r+0x70>
 800f604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f608:	4630      	mov	r0, r6
 800f60a:	f000 f81d 	bl	800f648 <_isatty_r>
 800f60e:	b128      	cbz	r0, 800f61c <__smakebuf_r+0x70>
 800f610:	89a3      	ldrh	r3, [r4, #12]
 800f612:	f023 0303 	bic.w	r3, r3, #3
 800f616:	f043 0301 	orr.w	r3, r3, #1
 800f61a:	81a3      	strh	r3, [r4, #12]
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	431d      	orrs	r5, r3
 800f620:	81a5      	strh	r5, [r4, #12]
 800f622:	e7cf      	b.n	800f5c4 <__smakebuf_r+0x18>

0800f624 <_fstat_r>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	4d07      	ldr	r5, [pc, #28]	; (800f644 <_fstat_r+0x20>)
 800f628:	2300      	movs	r3, #0
 800f62a:	4604      	mov	r4, r0
 800f62c:	4608      	mov	r0, r1
 800f62e:	4611      	mov	r1, r2
 800f630:	602b      	str	r3, [r5, #0]
 800f632:	f7f3 face 	bl	8002bd2 <_fstat>
 800f636:	1c43      	adds	r3, r0, #1
 800f638:	d102      	bne.n	800f640 <_fstat_r+0x1c>
 800f63a:	682b      	ldr	r3, [r5, #0]
 800f63c:	b103      	cbz	r3, 800f640 <_fstat_r+0x1c>
 800f63e:	6023      	str	r3, [r4, #0]
 800f640:	bd38      	pop	{r3, r4, r5, pc}
 800f642:	bf00      	nop
 800f644:	20000ab8 	.word	0x20000ab8

0800f648 <_isatty_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4d06      	ldr	r5, [pc, #24]	; (800f664 <_isatty_r+0x1c>)
 800f64c:	2300      	movs	r3, #0
 800f64e:	4604      	mov	r4, r0
 800f650:	4608      	mov	r0, r1
 800f652:	602b      	str	r3, [r5, #0]
 800f654:	f7f3 facd 	bl	8002bf2 <_isatty>
 800f658:	1c43      	adds	r3, r0, #1
 800f65a:	d102      	bne.n	800f662 <_isatty_r+0x1a>
 800f65c:	682b      	ldr	r3, [r5, #0]
 800f65e:	b103      	cbz	r3, 800f662 <_isatty_r+0x1a>
 800f660:	6023      	str	r3, [r4, #0]
 800f662:	bd38      	pop	{r3, r4, r5, pc}
 800f664:	20000ab8 	.word	0x20000ab8

0800f668 <atan2>:
 800f668:	f000 bbbe 	b.w	800fde8 <__ieee754_atan2>

0800f66c <sqrt>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	ed2d 8b02 	vpush	{d8}
 800f672:	ec55 4b10 	vmov	r4, r5, d0
 800f676:	f000 f8d3 	bl	800f820 <__ieee754_sqrt>
 800f67a:	4622      	mov	r2, r4
 800f67c:	462b      	mov	r3, r5
 800f67e:	4620      	mov	r0, r4
 800f680:	4629      	mov	r1, r5
 800f682:	eeb0 8a40 	vmov.f32	s16, s0
 800f686:	eef0 8a60 	vmov.f32	s17, s1
 800f68a:	f7f1 fa5f 	bl	8000b4c <__aeabi_dcmpun>
 800f68e:	b990      	cbnz	r0, 800f6b6 <sqrt+0x4a>
 800f690:	2200      	movs	r2, #0
 800f692:	2300      	movs	r3, #0
 800f694:	4620      	mov	r0, r4
 800f696:	4629      	mov	r1, r5
 800f698:	f7f1 fa30 	bl	8000afc <__aeabi_dcmplt>
 800f69c:	b158      	cbz	r0, 800f6b6 <sqrt+0x4a>
 800f69e:	f7fc fe0f 	bl	800c2c0 <__errno>
 800f6a2:	2321      	movs	r3, #33	; 0x21
 800f6a4:	6003      	str	r3, [r0, #0]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4610      	mov	r0, r2
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	f7f1 f8dd 	bl	800086c <__aeabi_ddiv>
 800f6b2:	ec41 0b18 	vmov	d8, r0, r1
 800f6b6:	eeb0 0a48 	vmov.f32	s0, s16
 800f6ba:	eef0 0a68 	vmov.f32	s1, s17
 800f6be:	ecbd 8b02 	vpop	{d8}
 800f6c2:	bd38      	pop	{r3, r4, r5, pc}
 800f6c4:	0000      	movs	r0, r0
	...

0800f6c8 <cos>:
 800f6c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6ca:	ec53 2b10 	vmov	r2, r3, d0
 800f6ce:	4826      	ldr	r0, [pc, #152]	; (800f768 <cos+0xa0>)
 800f6d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f6d4:	4281      	cmp	r1, r0
 800f6d6:	dc06      	bgt.n	800f6e6 <cos+0x1e>
 800f6d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f760 <cos+0x98>
 800f6dc:	b005      	add	sp, #20
 800f6de:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6e2:	f000 b9f9 	b.w	800fad8 <__kernel_cos>
 800f6e6:	4821      	ldr	r0, [pc, #132]	; (800f76c <cos+0xa4>)
 800f6e8:	4281      	cmp	r1, r0
 800f6ea:	dd09      	ble.n	800f700 <cos+0x38>
 800f6ec:	ee10 0a10 	vmov	r0, s0
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	f7f0 fdd9 	bl	80002a8 <__aeabi_dsub>
 800f6f6:	ec41 0b10 	vmov	d0, r0, r1
 800f6fa:	b005      	add	sp, #20
 800f6fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f700:	4668      	mov	r0, sp
 800f702:	f000 fc39 	bl	800ff78 <__ieee754_rem_pio2>
 800f706:	f000 0003 	and.w	r0, r0, #3
 800f70a:	2801      	cmp	r0, #1
 800f70c:	d00b      	beq.n	800f726 <cos+0x5e>
 800f70e:	2802      	cmp	r0, #2
 800f710:	d016      	beq.n	800f740 <cos+0x78>
 800f712:	b9e0      	cbnz	r0, 800f74e <cos+0x86>
 800f714:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f718:	ed9d 0b00 	vldr	d0, [sp]
 800f71c:	f000 f9dc 	bl	800fad8 <__kernel_cos>
 800f720:	ec51 0b10 	vmov	r0, r1, d0
 800f724:	e7e7      	b.n	800f6f6 <cos+0x2e>
 800f726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f72a:	ed9d 0b00 	vldr	d0, [sp]
 800f72e:	f000 fa9b 	bl	800fc68 <__kernel_sin>
 800f732:	ec53 2b10 	vmov	r2, r3, d0
 800f736:	ee10 0a10 	vmov	r0, s0
 800f73a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f73e:	e7da      	b.n	800f6f6 <cos+0x2e>
 800f740:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f744:	ed9d 0b00 	vldr	d0, [sp]
 800f748:	f000 f9c6 	bl	800fad8 <__kernel_cos>
 800f74c:	e7f1      	b.n	800f732 <cos+0x6a>
 800f74e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f752:	ed9d 0b00 	vldr	d0, [sp]
 800f756:	2001      	movs	r0, #1
 800f758:	f000 fa86 	bl	800fc68 <__kernel_sin>
 800f75c:	e7e0      	b.n	800f720 <cos+0x58>
 800f75e:	bf00      	nop
	...
 800f768:	3fe921fb 	.word	0x3fe921fb
 800f76c:	7fefffff 	.word	0x7fefffff

0800f770 <sin>:
 800f770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f772:	ec53 2b10 	vmov	r2, r3, d0
 800f776:	4828      	ldr	r0, [pc, #160]	; (800f818 <sin+0xa8>)
 800f778:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f77c:	4281      	cmp	r1, r0
 800f77e:	dc07      	bgt.n	800f790 <sin+0x20>
 800f780:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f810 <sin+0xa0>
 800f784:	2000      	movs	r0, #0
 800f786:	b005      	add	sp, #20
 800f788:	f85d eb04 	ldr.w	lr, [sp], #4
 800f78c:	f000 ba6c 	b.w	800fc68 <__kernel_sin>
 800f790:	4822      	ldr	r0, [pc, #136]	; (800f81c <sin+0xac>)
 800f792:	4281      	cmp	r1, r0
 800f794:	dd09      	ble.n	800f7aa <sin+0x3a>
 800f796:	ee10 0a10 	vmov	r0, s0
 800f79a:	4619      	mov	r1, r3
 800f79c:	f7f0 fd84 	bl	80002a8 <__aeabi_dsub>
 800f7a0:	ec41 0b10 	vmov	d0, r0, r1
 800f7a4:	b005      	add	sp, #20
 800f7a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7aa:	4668      	mov	r0, sp
 800f7ac:	f000 fbe4 	bl	800ff78 <__ieee754_rem_pio2>
 800f7b0:	f000 0003 	and.w	r0, r0, #3
 800f7b4:	2801      	cmp	r0, #1
 800f7b6:	d00c      	beq.n	800f7d2 <sin+0x62>
 800f7b8:	2802      	cmp	r0, #2
 800f7ba:	d011      	beq.n	800f7e0 <sin+0x70>
 800f7bc:	b9f0      	cbnz	r0, 800f7fc <sin+0x8c>
 800f7be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7c2:	ed9d 0b00 	vldr	d0, [sp]
 800f7c6:	2001      	movs	r0, #1
 800f7c8:	f000 fa4e 	bl	800fc68 <__kernel_sin>
 800f7cc:	ec51 0b10 	vmov	r0, r1, d0
 800f7d0:	e7e6      	b.n	800f7a0 <sin+0x30>
 800f7d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7d6:	ed9d 0b00 	vldr	d0, [sp]
 800f7da:	f000 f97d 	bl	800fad8 <__kernel_cos>
 800f7de:	e7f5      	b.n	800f7cc <sin+0x5c>
 800f7e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7e4:	ed9d 0b00 	vldr	d0, [sp]
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	f000 fa3d 	bl	800fc68 <__kernel_sin>
 800f7ee:	ec53 2b10 	vmov	r2, r3, d0
 800f7f2:	ee10 0a10 	vmov	r0, s0
 800f7f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f7fa:	e7d1      	b.n	800f7a0 <sin+0x30>
 800f7fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f800:	ed9d 0b00 	vldr	d0, [sp]
 800f804:	f000 f968 	bl	800fad8 <__kernel_cos>
 800f808:	e7f1      	b.n	800f7ee <sin+0x7e>
 800f80a:	bf00      	nop
 800f80c:	f3af 8000 	nop.w
	...
 800f818:	3fe921fb 	.word	0x3fe921fb
 800f81c:	7fefffff 	.word	0x7fefffff

0800f820 <__ieee754_sqrt>:
 800f820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	ec55 4b10 	vmov	r4, r5, d0
 800f828:	4e67      	ldr	r6, [pc, #412]	; (800f9c8 <__ieee754_sqrt+0x1a8>)
 800f82a:	43ae      	bics	r6, r5
 800f82c:	ee10 0a10 	vmov	r0, s0
 800f830:	ee10 2a10 	vmov	r2, s0
 800f834:	4629      	mov	r1, r5
 800f836:	462b      	mov	r3, r5
 800f838:	d10d      	bne.n	800f856 <__ieee754_sqrt+0x36>
 800f83a:	f7f0 feed 	bl	8000618 <__aeabi_dmul>
 800f83e:	4602      	mov	r2, r0
 800f840:	460b      	mov	r3, r1
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	f7f0 fd31 	bl	80002ac <__adddf3>
 800f84a:	4604      	mov	r4, r0
 800f84c:	460d      	mov	r5, r1
 800f84e:	ec45 4b10 	vmov	d0, r4, r5
 800f852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f856:	2d00      	cmp	r5, #0
 800f858:	dc0b      	bgt.n	800f872 <__ieee754_sqrt+0x52>
 800f85a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f85e:	4326      	orrs	r6, r4
 800f860:	d0f5      	beq.n	800f84e <__ieee754_sqrt+0x2e>
 800f862:	b135      	cbz	r5, 800f872 <__ieee754_sqrt+0x52>
 800f864:	f7f0 fd20 	bl	80002a8 <__aeabi_dsub>
 800f868:	4602      	mov	r2, r0
 800f86a:	460b      	mov	r3, r1
 800f86c:	f7f0 fffe 	bl	800086c <__aeabi_ddiv>
 800f870:	e7eb      	b.n	800f84a <__ieee754_sqrt+0x2a>
 800f872:	1509      	asrs	r1, r1, #20
 800f874:	f000 808d 	beq.w	800f992 <__ieee754_sqrt+0x172>
 800f878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f87c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f884:	07c9      	lsls	r1, r1, #31
 800f886:	bf5c      	itt	pl
 800f888:	005b      	lslpl	r3, r3, #1
 800f88a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f88e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f892:	bf58      	it	pl
 800f894:	0052      	lslpl	r2, r2, #1
 800f896:	2500      	movs	r5, #0
 800f898:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f89c:	1076      	asrs	r6, r6, #1
 800f89e:	0052      	lsls	r2, r2, #1
 800f8a0:	f04f 0e16 	mov.w	lr, #22
 800f8a4:	46ac      	mov	ip, r5
 800f8a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f8aa:	eb0c 0001 	add.w	r0, ip, r1
 800f8ae:	4298      	cmp	r0, r3
 800f8b0:	bfde      	ittt	le
 800f8b2:	1a1b      	suble	r3, r3, r0
 800f8b4:	eb00 0c01 	addle.w	ip, r0, r1
 800f8b8:	186d      	addle	r5, r5, r1
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	f1be 0e01 	subs.w	lr, lr, #1
 800f8c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f8c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f8c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f8cc:	d1ed      	bne.n	800f8aa <__ieee754_sqrt+0x8a>
 800f8ce:	4674      	mov	r4, lr
 800f8d0:	2720      	movs	r7, #32
 800f8d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f8d6:	4563      	cmp	r3, ip
 800f8d8:	eb01 000e 	add.w	r0, r1, lr
 800f8dc:	dc02      	bgt.n	800f8e4 <__ieee754_sqrt+0xc4>
 800f8de:	d113      	bne.n	800f908 <__ieee754_sqrt+0xe8>
 800f8e0:	4290      	cmp	r0, r2
 800f8e2:	d811      	bhi.n	800f908 <__ieee754_sqrt+0xe8>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	eb00 0e01 	add.w	lr, r0, r1
 800f8ea:	da57      	bge.n	800f99c <__ieee754_sqrt+0x17c>
 800f8ec:	f1be 0f00 	cmp.w	lr, #0
 800f8f0:	db54      	blt.n	800f99c <__ieee754_sqrt+0x17c>
 800f8f2:	f10c 0801 	add.w	r8, ip, #1
 800f8f6:	eba3 030c 	sub.w	r3, r3, ip
 800f8fa:	4290      	cmp	r0, r2
 800f8fc:	bf88      	it	hi
 800f8fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f902:	1a12      	subs	r2, r2, r0
 800f904:	440c      	add	r4, r1
 800f906:	46c4      	mov	ip, r8
 800f908:	005b      	lsls	r3, r3, #1
 800f90a:	3f01      	subs	r7, #1
 800f90c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f910:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f914:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f918:	d1dd      	bne.n	800f8d6 <__ieee754_sqrt+0xb6>
 800f91a:	4313      	orrs	r3, r2
 800f91c:	d01b      	beq.n	800f956 <__ieee754_sqrt+0x136>
 800f91e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f9cc <__ieee754_sqrt+0x1ac>
 800f922:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f9d0 <__ieee754_sqrt+0x1b0>
 800f926:	e9da 0100 	ldrd	r0, r1, [sl]
 800f92a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f92e:	f7f0 fcbb 	bl	80002a8 <__aeabi_dsub>
 800f932:	e9da 8900 	ldrd	r8, r9, [sl]
 800f936:	4602      	mov	r2, r0
 800f938:	460b      	mov	r3, r1
 800f93a:	4640      	mov	r0, r8
 800f93c:	4649      	mov	r1, r9
 800f93e:	f7f1 f8e7 	bl	8000b10 <__aeabi_dcmple>
 800f942:	b140      	cbz	r0, 800f956 <__ieee754_sqrt+0x136>
 800f944:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f948:	e9da 0100 	ldrd	r0, r1, [sl]
 800f94c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f950:	d126      	bne.n	800f9a0 <__ieee754_sqrt+0x180>
 800f952:	3501      	adds	r5, #1
 800f954:	463c      	mov	r4, r7
 800f956:	106a      	asrs	r2, r5, #1
 800f958:	0863      	lsrs	r3, r4, #1
 800f95a:	07e9      	lsls	r1, r5, #31
 800f95c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f960:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f964:	bf48      	it	mi
 800f966:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f96a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f96e:	461c      	mov	r4, r3
 800f970:	e76d      	b.n	800f84e <__ieee754_sqrt+0x2e>
 800f972:	0ad3      	lsrs	r3, r2, #11
 800f974:	3815      	subs	r0, #21
 800f976:	0552      	lsls	r2, r2, #21
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d0fa      	beq.n	800f972 <__ieee754_sqrt+0x152>
 800f97c:	02dc      	lsls	r4, r3, #11
 800f97e:	d50a      	bpl.n	800f996 <__ieee754_sqrt+0x176>
 800f980:	f1c1 0420 	rsb	r4, r1, #32
 800f984:	fa22 f404 	lsr.w	r4, r2, r4
 800f988:	1e4d      	subs	r5, r1, #1
 800f98a:	408a      	lsls	r2, r1
 800f98c:	4323      	orrs	r3, r4
 800f98e:	1b41      	subs	r1, r0, r5
 800f990:	e772      	b.n	800f878 <__ieee754_sqrt+0x58>
 800f992:	4608      	mov	r0, r1
 800f994:	e7f0      	b.n	800f978 <__ieee754_sqrt+0x158>
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	3101      	adds	r1, #1
 800f99a:	e7ef      	b.n	800f97c <__ieee754_sqrt+0x15c>
 800f99c:	46e0      	mov	r8, ip
 800f99e:	e7aa      	b.n	800f8f6 <__ieee754_sqrt+0xd6>
 800f9a0:	f7f0 fc84 	bl	80002ac <__adddf3>
 800f9a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	4640      	mov	r0, r8
 800f9ae:	4649      	mov	r1, r9
 800f9b0:	f7f1 f8a4 	bl	8000afc <__aeabi_dcmplt>
 800f9b4:	b120      	cbz	r0, 800f9c0 <__ieee754_sqrt+0x1a0>
 800f9b6:	1ca0      	adds	r0, r4, #2
 800f9b8:	bf08      	it	eq
 800f9ba:	3501      	addeq	r5, #1
 800f9bc:	3402      	adds	r4, #2
 800f9be:	e7ca      	b.n	800f956 <__ieee754_sqrt+0x136>
 800f9c0:	3401      	adds	r4, #1
 800f9c2:	f024 0401 	bic.w	r4, r4, #1
 800f9c6:	e7c6      	b.n	800f956 <__ieee754_sqrt+0x136>
 800f9c8:	7ff00000 	.word	0x7ff00000
 800f9cc:	20000200 	.word	0x20000200
 800f9d0:	20000208 	.word	0x20000208
 800f9d4:	00000000 	.word	0x00000000

0800f9d8 <floor>:
 800f9d8:	ec51 0b10 	vmov	r0, r1, d0
 800f9dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f9e8:	2e13      	cmp	r6, #19
 800f9ea:	ee10 5a10 	vmov	r5, s0
 800f9ee:	ee10 8a10 	vmov	r8, s0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	dc31      	bgt.n	800fa5a <floor+0x82>
 800f9f6:	2e00      	cmp	r6, #0
 800f9f8:	da14      	bge.n	800fa24 <floor+0x4c>
 800f9fa:	a333      	add	r3, pc, #204	; (adr r3, 800fac8 <floor+0xf0>)
 800f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa00:	f7f0 fc54 	bl	80002ac <__adddf3>
 800fa04:	2200      	movs	r2, #0
 800fa06:	2300      	movs	r3, #0
 800fa08:	f7f1 f896 	bl	8000b38 <__aeabi_dcmpgt>
 800fa0c:	b138      	cbz	r0, 800fa1e <floor+0x46>
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	da53      	bge.n	800faba <floor+0xe2>
 800fa12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800fa16:	4325      	orrs	r5, r4
 800fa18:	d052      	beq.n	800fac0 <floor+0xe8>
 800fa1a:	4c2d      	ldr	r4, [pc, #180]	; (800fad0 <floor+0xf8>)
 800fa1c:	2500      	movs	r5, #0
 800fa1e:	4621      	mov	r1, r4
 800fa20:	4628      	mov	r0, r5
 800fa22:	e024      	b.n	800fa6e <floor+0x96>
 800fa24:	4f2b      	ldr	r7, [pc, #172]	; (800fad4 <floor+0xfc>)
 800fa26:	4137      	asrs	r7, r6
 800fa28:	ea01 0307 	and.w	r3, r1, r7
 800fa2c:	4303      	orrs	r3, r0
 800fa2e:	d01e      	beq.n	800fa6e <floor+0x96>
 800fa30:	a325      	add	r3, pc, #148	; (adr r3, 800fac8 <floor+0xf0>)
 800fa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa36:	f7f0 fc39 	bl	80002ac <__adddf3>
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f7f1 f87b 	bl	8000b38 <__aeabi_dcmpgt>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d0eb      	beq.n	800fa1e <floor+0x46>
 800fa46:	2c00      	cmp	r4, #0
 800fa48:	bfbe      	ittt	lt
 800fa4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fa4e:	4133      	asrlt	r3, r6
 800fa50:	18e4      	addlt	r4, r4, r3
 800fa52:	ea24 0407 	bic.w	r4, r4, r7
 800fa56:	2500      	movs	r5, #0
 800fa58:	e7e1      	b.n	800fa1e <floor+0x46>
 800fa5a:	2e33      	cmp	r6, #51	; 0x33
 800fa5c:	dd0b      	ble.n	800fa76 <floor+0x9e>
 800fa5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fa62:	d104      	bne.n	800fa6e <floor+0x96>
 800fa64:	ee10 2a10 	vmov	r2, s0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	f7f0 fc1f 	bl	80002ac <__adddf3>
 800fa6e:	ec41 0b10 	vmov	d0, r0, r1
 800fa72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa76:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800fa7a:	f04f 37ff 	mov.w	r7, #4294967295
 800fa7e:	40df      	lsrs	r7, r3
 800fa80:	4238      	tst	r0, r7
 800fa82:	d0f4      	beq.n	800fa6e <floor+0x96>
 800fa84:	a310      	add	r3, pc, #64	; (adr r3, 800fac8 <floor+0xf0>)
 800fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8a:	f7f0 fc0f 	bl	80002ac <__adddf3>
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2300      	movs	r3, #0
 800fa92:	f7f1 f851 	bl	8000b38 <__aeabi_dcmpgt>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d0c1      	beq.n	800fa1e <floor+0x46>
 800fa9a:	2c00      	cmp	r4, #0
 800fa9c:	da0a      	bge.n	800fab4 <floor+0xdc>
 800fa9e:	2e14      	cmp	r6, #20
 800faa0:	d101      	bne.n	800faa6 <floor+0xce>
 800faa2:	3401      	adds	r4, #1
 800faa4:	e006      	b.n	800fab4 <floor+0xdc>
 800faa6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800faaa:	2301      	movs	r3, #1
 800faac:	40b3      	lsls	r3, r6
 800faae:	441d      	add	r5, r3
 800fab0:	45a8      	cmp	r8, r5
 800fab2:	d8f6      	bhi.n	800faa2 <floor+0xca>
 800fab4:	ea25 0507 	bic.w	r5, r5, r7
 800fab8:	e7b1      	b.n	800fa1e <floor+0x46>
 800faba:	2500      	movs	r5, #0
 800fabc:	462c      	mov	r4, r5
 800fabe:	e7ae      	b.n	800fa1e <floor+0x46>
 800fac0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fac4:	e7ab      	b.n	800fa1e <floor+0x46>
 800fac6:	bf00      	nop
 800fac8:	8800759c 	.word	0x8800759c
 800facc:	7e37e43c 	.word	0x7e37e43c
 800fad0:	bff00000 	.word	0xbff00000
 800fad4:	000fffff 	.word	0x000fffff

0800fad8 <__kernel_cos>:
 800fad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	ec57 6b10 	vmov	r6, r7, d0
 800fae0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fae4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fae8:	ed8d 1b00 	vstr	d1, [sp]
 800faec:	da07      	bge.n	800fafe <__kernel_cos+0x26>
 800faee:	ee10 0a10 	vmov	r0, s0
 800faf2:	4639      	mov	r1, r7
 800faf4:	f7f1 f840 	bl	8000b78 <__aeabi_d2iz>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	f000 8088 	beq.w	800fc0e <__kernel_cos+0x136>
 800fafe:	4632      	mov	r2, r6
 800fb00:	463b      	mov	r3, r7
 800fb02:	4630      	mov	r0, r6
 800fb04:	4639      	mov	r1, r7
 800fb06:	f7f0 fd87 	bl	8000618 <__aeabi_dmul>
 800fb0a:	4b51      	ldr	r3, [pc, #324]	; (800fc50 <__kernel_cos+0x178>)
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	4604      	mov	r4, r0
 800fb10:	460d      	mov	r5, r1
 800fb12:	f7f0 fd81 	bl	8000618 <__aeabi_dmul>
 800fb16:	a340      	add	r3, pc, #256	; (adr r3, 800fc18 <__kernel_cos+0x140>)
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	4682      	mov	sl, r0
 800fb1e:	468b      	mov	fp, r1
 800fb20:	4620      	mov	r0, r4
 800fb22:	4629      	mov	r1, r5
 800fb24:	f7f0 fd78 	bl	8000618 <__aeabi_dmul>
 800fb28:	a33d      	add	r3, pc, #244	; (adr r3, 800fc20 <__kernel_cos+0x148>)
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	f7f0 fbbd 	bl	80002ac <__adddf3>
 800fb32:	4622      	mov	r2, r4
 800fb34:	462b      	mov	r3, r5
 800fb36:	f7f0 fd6f 	bl	8000618 <__aeabi_dmul>
 800fb3a:	a33b      	add	r3, pc, #236	; (adr r3, 800fc28 <__kernel_cos+0x150>)
 800fb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb40:	f7f0 fbb2 	bl	80002a8 <__aeabi_dsub>
 800fb44:	4622      	mov	r2, r4
 800fb46:	462b      	mov	r3, r5
 800fb48:	f7f0 fd66 	bl	8000618 <__aeabi_dmul>
 800fb4c:	a338      	add	r3, pc, #224	; (adr r3, 800fc30 <__kernel_cos+0x158>)
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	f7f0 fbab 	bl	80002ac <__adddf3>
 800fb56:	4622      	mov	r2, r4
 800fb58:	462b      	mov	r3, r5
 800fb5a:	f7f0 fd5d 	bl	8000618 <__aeabi_dmul>
 800fb5e:	a336      	add	r3, pc, #216	; (adr r3, 800fc38 <__kernel_cos+0x160>)
 800fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb64:	f7f0 fba0 	bl	80002a8 <__aeabi_dsub>
 800fb68:	4622      	mov	r2, r4
 800fb6a:	462b      	mov	r3, r5
 800fb6c:	f7f0 fd54 	bl	8000618 <__aeabi_dmul>
 800fb70:	a333      	add	r3, pc, #204	; (adr r3, 800fc40 <__kernel_cos+0x168>)
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	f7f0 fb99 	bl	80002ac <__adddf3>
 800fb7a:	4622      	mov	r2, r4
 800fb7c:	462b      	mov	r3, r5
 800fb7e:	f7f0 fd4b 	bl	8000618 <__aeabi_dmul>
 800fb82:	4622      	mov	r2, r4
 800fb84:	462b      	mov	r3, r5
 800fb86:	f7f0 fd47 	bl	8000618 <__aeabi_dmul>
 800fb8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb8e:	4604      	mov	r4, r0
 800fb90:	460d      	mov	r5, r1
 800fb92:	4630      	mov	r0, r6
 800fb94:	4639      	mov	r1, r7
 800fb96:	f7f0 fd3f 	bl	8000618 <__aeabi_dmul>
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	4629      	mov	r1, r5
 800fba0:	4620      	mov	r0, r4
 800fba2:	f7f0 fb81 	bl	80002a8 <__aeabi_dsub>
 800fba6:	4b2b      	ldr	r3, [pc, #172]	; (800fc54 <__kernel_cos+0x17c>)
 800fba8:	4598      	cmp	r8, r3
 800fbaa:	4606      	mov	r6, r0
 800fbac:	460f      	mov	r7, r1
 800fbae:	dc10      	bgt.n	800fbd2 <__kernel_cos+0xfa>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4650      	mov	r0, sl
 800fbb6:	4659      	mov	r1, fp
 800fbb8:	f7f0 fb76 	bl	80002a8 <__aeabi_dsub>
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4926      	ldr	r1, [pc, #152]	; (800fc58 <__kernel_cos+0x180>)
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	f7f0 fb70 	bl	80002a8 <__aeabi_dsub>
 800fbc8:	ec41 0b10 	vmov	d0, r0, r1
 800fbcc:	b003      	add	sp, #12
 800fbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd2:	4b22      	ldr	r3, [pc, #136]	; (800fc5c <__kernel_cos+0x184>)
 800fbd4:	4920      	ldr	r1, [pc, #128]	; (800fc58 <__kernel_cos+0x180>)
 800fbd6:	4598      	cmp	r8, r3
 800fbd8:	bfcc      	ite	gt
 800fbda:	4d21      	ldrgt	r5, [pc, #132]	; (800fc60 <__kernel_cos+0x188>)
 800fbdc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fbe0:	2400      	movs	r4, #0
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	462b      	mov	r3, r5
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	f7f0 fb5e 	bl	80002a8 <__aeabi_dsub>
 800fbec:	4622      	mov	r2, r4
 800fbee:	4680      	mov	r8, r0
 800fbf0:	4689      	mov	r9, r1
 800fbf2:	462b      	mov	r3, r5
 800fbf4:	4650      	mov	r0, sl
 800fbf6:	4659      	mov	r1, fp
 800fbf8:	f7f0 fb56 	bl	80002a8 <__aeabi_dsub>
 800fbfc:	4632      	mov	r2, r6
 800fbfe:	463b      	mov	r3, r7
 800fc00:	f7f0 fb52 	bl	80002a8 <__aeabi_dsub>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4640      	mov	r0, r8
 800fc0a:	4649      	mov	r1, r9
 800fc0c:	e7da      	b.n	800fbc4 <__kernel_cos+0xec>
 800fc0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fc48 <__kernel_cos+0x170>
 800fc12:	e7db      	b.n	800fbcc <__kernel_cos+0xf4>
 800fc14:	f3af 8000 	nop.w
 800fc18:	be8838d4 	.word	0xbe8838d4
 800fc1c:	bda8fae9 	.word	0xbda8fae9
 800fc20:	bdb4b1c4 	.word	0xbdb4b1c4
 800fc24:	3e21ee9e 	.word	0x3e21ee9e
 800fc28:	809c52ad 	.word	0x809c52ad
 800fc2c:	3e927e4f 	.word	0x3e927e4f
 800fc30:	19cb1590 	.word	0x19cb1590
 800fc34:	3efa01a0 	.word	0x3efa01a0
 800fc38:	16c15177 	.word	0x16c15177
 800fc3c:	3f56c16c 	.word	0x3f56c16c
 800fc40:	5555554c 	.word	0x5555554c
 800fc44:	3fa55555 	.word	0x3fa55555
 800fc48:	00000000 	.word	0x00000000
 800fc4c:	3ff00000 	.word	0x3ff00000
 800fc50:	3fe00000 	.word	0x3fe00000
 800fc54:	3fd33332 	.word	0x3fd33332
 800fc58:	3ff00000 	.word	0x3ff00000
 800fc5c:	3fe90000 	.word	0x3fe90000
 800fc60:	3fd20000 	.word	0x3fd20000
 800fc64:	00000000 	.word	0x00000000

0800fc68 <__kernel_sin>:
 800fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6c:	ed2d 8b04 	vpush	{d8-d9}
 800fc70:	eeb0 8a41 	vmov.f32	s16, s2
 800fc74:	eef0 8a61 	vmov.f32	s17, s3
 800fc78:	ec55 4b10 	vmov	r4, r5, d0
 800fc7c:	b083      	sub	sp, #12
 800fc7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fc86:	9001      	str	r0, [sp, #4]
 800fc88:	da06      	bge.n	800fc98 <__kernel_sin+0x30>
 800fc8a:	ee10 0a10 	vmov	r0, s0
 800fc8e:	4629      	mov	r1, r5
 800fc90:	f7f0 ff72 	bl	8000b78 <__aeabi_d2iz>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d051      	beq.n	800fd3c <__kernel_sin+0xd4>
 800fc98:	4622      	mov	r2, r4
 800fc9a:	462b      	mov	r3, r5
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 fcba 	bl	8000618 <__aeabi_dmul>
 800fca4:	4682      	mov	sl, r0
 800fca6:	468b      	mov	fp, r1
 800fca8:	4602      	mov	r2, r0
 800fcaa:	460b      	mov	r3, r1
 800fcac:	4620      	mov	r0, r4
 800fcae:	4629      	mov	r1, r5
 800fcb0:	f7f0 fcb2 	bl	8000618 <__aeabi_dmul>
 800fcb4:	a341      	add	r3, pc, #260	; (adr r3, 800fdbc <__kernel_sin+0x154>)
 800fcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcba:	4680      	mov	r8, r0
 800fcbc:	4689      	mov	r9, r1
 800fcbe:	4650      	mov	r0, sl
 800fcc0:	4659      	mov	r1, fp
 800fcc2:	f7f0 fca9 	bl	8000618 <__aeabi_dmul>
 800fcc6:	a33f      	add	r3, pc, #252	; (adr r3, 800fdc4 <__kernel_sin+0x15c>)
 800fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fccc:	f7f0 faec 	bl	80002a8 <__aeabi_dsub>
 800fcd0:	4652      	mov	r2, sl
 800fcd2:	465b      	mov	r3, fp
 800fcd4:	f7f0 fca0 	bl	8000618 <__aeabi_dmul>
 800fcd8:	a33c      	add	r3, pc, #240	; (adr r3, 800fdcc <__kernel_sin+0x164>)
 800fcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcde:	f7f0 fae5 	bl	80002ac <__adddf3>
 800fce2:	4652      	mov	r2, sl
 800fce4:	465b      	mov	r3, fp
 800fce6:	f7f0 fc97 	bl	8000618 <__aeabi_dmul>
 800fcea:	a33a      	add	r3, pc, #232	; (adr r3, 800fdd4 <__kernel_sin+0x16c>)
 800fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf0:	f7f0 fada 	bl	80002a8 <__aeabi_dsub>
 800fcf4:	4652      	mov	r2, sl
 800fcf6:	465b      	mov	r3, fp
 800fcf8:	f7f0 fc8e 	bl	8000618 <__aeabi_dmul>
 800fcfc:	a337      	add	r3, pc, #220	; (adr r3, 800fddc <__kernel_sin+0x174>)
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	f7f0 fad3 	bl	80002ac <__adddf3>
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	4606      	mov	r6, r0
 800fd0a:	460f      	mov	r7, r1
 800fd0c:	b9eb      	cbnz	r3, 800fd4a <__kernel_sin+0xe2>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	460b      	mov	r3, r1
 800fd12:	4650      	mov	r0, sl
 800fd14:	4659      	mov	r1, fp
 800fd16:	f7f0 fc7f 	bl	8000618 <__aeabi_dmul>
 800fd1a:	a325      	add	r3, pc, #148	; (adr r3, 800fdb0 <__kernel_sin+0x148>)
 800fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd20:	f7f0 fac2 	bl	80002a8 <__aeabi_dsub>
 800fd24:	4642      	mov	r2, r8
 800fd26:	464b      	mov	r3, r9
 800fd28:	f7f0 fc76 	bl	8000618 <__aeabi_dmul>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	460b      	mov	r3, r1
 800fd30:	4620      	mov	r0, r4
 800fd32:	4629      	mov	r1, r5
 800fd34:	f7f0 faba 	bl	80002ac <__adddf3>
 800fd38:	4604      	mov	r4, r0
 800fd3a:	460d      	mov	r5, r1
 800fd3c:	ec45 4b10 	vmov	d0, r4, r5
 800fd40:	b003      	add	sp, #12
 800fd42:	ecbd 8b04 	vpop	{d8-d9}
 800fd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4a:	4b1b      	ldr	r3, [pc, #108]	; (800fdb8 <__kernel_sin+0x150>)
 800fd4c:	ec51 0b18 	vmov	r0, r1, d8
 800fd50:	2200      	movs	r2, #0
 800fd52:	f7f0 fc61 	bl	8000618 <__aeabi_dmul>
 800fd56:	4632      	mov	r2, r6
 800fd58:	ec41 0b19 	vmov	d9, r0, r1
 800fd5c:	463b      	mov	r3, r7
 800fd5e:	4640      	mov	r0, r8
 800fd60:	4649      	mov	r1, r9
 800fd62:	f7f0 fc59 	bl	8000618 <__aeabi_dmul>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	ec51 0b19 	vmov	r0, r1, d9
 800fd6e:	f7f0 fa9b 	bl	80002a8 <__aeabi_dsub>
 800fd72:	4652      	mov	r2, sl
 800fd74:	465b      	mov	r3, fp
 800fd76:	f7f0 fc4f 	bl	8000618 <__aeabi_dmul>
 800fd7a:	ec53 2b18 	vmov	r2, r3, d8
 800fd7e:	f7f0 fa93 	bl	80002a8 <__aeabi_dsub>
 800fd82:	a30b      	add	r3, pc, #44	; (adr r3, 800fdb0 <__kernel_sin+0x148>)
 800fd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd88:	4606      	mov	r6, r0
 800fd8a:	460f      	mov	r7, r1
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	4649      	mov	r1, r9
 800fd90:	f7f0 fc42 	bl	8000618 <__aeabi_dmul>
 800fd94:	4602      	mov	r2, r0
 800fd96:	460b      	mov	r3, r1
 800fd98:	4630      	mov	r0, r6
 800fd9a:	4639      	mov	r1, r7
 800fd9c:	f7f0 fa86 	bl	80002ac <__adddf3>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4620      	mov	r0, r4
 800fda6:	4629      	mov	r1, r5
 800fda8:	f7f0 fa7e 	bl	80002a8 <__aeabi_dsub>
 800fdac:	e7c4      	b.n	800fd38 <__kernel_sin+0xd0>
 800fdae:	bf00      	nop
 800fdb0:	55555549 	.word	0x55555549
 800fdb4:	3fc55555 	.word	0x3fc55555
 800fdb8:	3fe00000 	.word	0x3fe00000
 800fdbc:	5acfd57c 	.word	0x5acfd57c
 800fdc0:	3de5d93a 	.word	0x3de5d93a
 800fdc4:	8a2b9ceb 	.word	0x8a2b9ceb
 800fdc8:	3e5ae5e6 	.word	0x3e5ae5e6
 800fdcc:	57b1fe7d 	.word	0x57b1fe7d
 800fdd0:	3ec71de3 	.word	0x3ec71de3
 800fdd4:	19c161d5 	.word	0x19c161d5
 800fdd8:	3f2a01a0 	.word	0x3f2a01a0
 800fddc:	1110f8a6 	.word	0x1110f8a6
 800fde0:	3f811111 	.word	0x3f811111
 800fde4:	00000000 	.word	0x00000000

0800fde8 <__ieee754_atan2>:
 800fde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdec:	ec57 6b11 	vmov	r6, r7, d1
 800fdf0:	4273      	negs	r3, r6
 800fdf2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ff70 <__ieee754_atan2+0x188>
 800fdf6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fdfa:	4333      	orrs	r3, r6
 800fdfc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fe00:	4543      	cmp	r3, r8
 800fe02:	ec51 0b10 	vmov	r0, r1, d0
 800fe06:	ee11 5a10 	vmov	r5, s2
 800fe0a:	d80a      	bhi.n	800fe22 <__ieee754_atan2+0x3a>
 800fe0c:	4244      	negs	r4, r0
 800fe0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe12:	4304      	orrs	r4, r0
 800fe14:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fe18:	4544      	cmp	r4, r8
 800fe1a:	ee10 9a10 	vmov	r9, s0
 800fe1e:	468e      	mov	lr, r1
 800fe20:	d907      	bls.n	800fe32 <__ieee754_atan2+0x4a>
 800fe22:	4632      	mov	r2, r6
 800fe24:	463b      	mov	r3, r7
 800fe26:	f7f0 fa41 	bl	80002ac <__adddf3>
 800fe2a:	ec41 0b10 	vmov	d0, r0, r1
 800fe2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fe36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fe3a:	4334      	orrs	r4, r6
 800fe3c:	d103      	bne.n	800fe46 <__ieee754_atan2+0x5e>
 800fe3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe42:	f000 baa1 	b.w	8010388 <atan>
 800fe46:	17bc      	asrs	r4, r7, #30
 800fe48:	f004 0402 	and.w	r4, r4, #2
 800fe4c:	ea53 0909 	orrs.w	r9, r3, r9
 800fe50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fe54:	d107      	bne.n	800fe66 <__ieee754_atan2+0x7e>
 800fe56:	2c02      	cmp	r4, #2
 800fe58:	d05f      	beq.n	800ff1a <__ieee754_atan2+0x132>
 800fe5a:	2c03      	cmp	r4, #3
 800fe5c:	d1e5      	bne.n	800fe2a <__ieee754_atan2+0x42>
 800fe5e:	a140      	add	r1, pc, #256	; (adr r1, 800ff60 <__ieee754_atan2+0x178>)
 800fe60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe64:	e7e1      	b.n	800fe2a <__ieee754_atan2+0x42>
 800fe66:	4315      	orrs	r5, r2
 800fe68:	d106      	bne.n	800fe78 <__ieee754_atan2+0x90>
 800fe6a:	f1be 0f00 	cmp.w	lr, #0
 800fe6e:	da5f      	bge.n	800ff30 <__ieee754_atan2+0x148>
 800fe70:	a13d      	add	r1, pc, #244	; (adr r1, 800ff68 <__ieee754_atan2+0x180>)
 800fe72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe76:	e7d8      	b.n	800fe2a <__ieee754_atan2+0x42>
 800fe78:	4542      	cmp	r2, r8
 800fe7a:	d10f      	bne.n	800fe9c <__ieee754_atan2+0xb4>
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe82:	d107      	bne.n	800fe94 <__ieee754_atan2+0xac>
 800fe84:	2c02      	cmp	r4, #2
 800fe86:	d84c      	bhi.n	800ff22 <__ieee754_atan2+0x13a>
 800fe88:	4b33      	ldr	r3, [pc, #204]	; (800ff58 <__ieee754_atan2+0x170>)
 800fe8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe92:	e7ca      	b.n	800fe2a <__ieee754_atan2+0x42>
 800fe94:	2c02      	cmp	r4, #2
 800fe96:	d848      	bhi.n	800ff2a <__ieee754_atan2+0x142>
 800fe98:	4b30      	ldr	r3, [pc, #192]	; (800ff5c <__ieee754_atan2+0x174>)
 800fe9a:	e7f6      	b.n	800fe8a <__ieee754_atan2+0xa2>
 800fe9c:	4543      	cmp	r3, r8
 800fe9e:	d0e4      	beq.n	800fe6a <__ieee754_atan2+0x82>
 800fea0:	1a9b      	subs	r3, r3, r2
 800fea2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fea6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800feaa:	da1e      	bge.n	800feea <__ieee754_atan2+0x102>
 800feac:	2f00      	cmp	r7, #0
 800feae:	da01      	bge.n	800feb4 <__ieee754_atan2+0xcc>
 800feb0:	323c      	adds	r2, #60	; 0x3c
 800feb2:	db1e      	blt.n	800fef2 <__ieee754_atan2+0x10a>
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	f7f0 fcd8 	bl	800086c <__aeabi_ddiv>
 800febc:	ec41 0b10 	vmov	d0, r0, r1
 800fec0:	f000 fc02 	bl	80106c8 <fabs>
 800fec4:	f000 fa60 	bl	8010388 <atan>
 800fec8:	ec51 0b10 	vmov	r0, r1, d0
 800fecc:	2c01      	cmp	r4, #1
 800fece:	d013      	beq.n	800fef8 <__ieee754_atan2+0x110>
 800fed0:	2c02      	cmp	r4, #2
 800fed2:	d015      	beq.n	800ff00 <__ieee754_atan2+0x118>
 800fed4:	2c00      	cmp	r4, #0
 800fed6:	d0a8      	beq.n	800fe2a <__ieee754_atan2+0x42>
 800fed8:	a317      	add	r3, pc, #92	; (adr r3, 800ff38 <__ieee754_atan2+0x150>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	f7f0 f9e3 	bl	80002a8 <__aeabi_dsub>
 800fee2:	a317      	add	r3, pc, #92	; (adr r3, 800ff40 <__ieee754_atan2+0x158>)
 800fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee8:	e014      	b.n	800ff14 <__ieee754_atan2+0x12c>
 800feea:	a117      	add	r1, pc, #92	; (adr r1, 800ff48 <__ieee754_atan2+0x160>)
 800feec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fef0:	e7ec      	b.n	800fecc <__ieee754_atan2+0xe4>
 800fef2:	2000      	movs	r0, #0
 800fef4:	2100      	movs	r1, #0
 800fef6:	e7e9      	b.n	800fecc <__ieee754_atan2+0xe4>
 800fef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fefc:	4619      	mov	r1, r3
 800fefe:	e794      	b.n	800fe2a <__ieee754_atan2+0x42>
 800ff00:	a30d      	add	r3, pc, #52	; (adr r3, 800ff38 <__ieee754_atan2+0x150>)
 800ff02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff06:	f7f0 f9cf 	bl	80002a8 <__aeabi_dsub>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	a10c      	add	r1, pc, #48	; (adr r1, 800ff40 <__ieee754_atan2+0x158>)
 800ff10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff14:	f7f0 f9c8 	bl	80002a8 <__aeabi_dsub>
 800ff18:	e787      	b.n	800fe2a <__ieee754_atan2+0x42>
 800ff1a:	a109      	add	r1, pc, #36	; (adr r1, 800ff40 <__ieee754_atan2+0x158>)
 800ff1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff20:	e783      	b.n	800fe2a <__ieee754_atan2+0x42>
 800ff22:	a10b      	add	r1, pc, #44	; (adr r1, 800ff50 <__ieee754_atan2+0x168>)
 800ff24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff28:	e77f      	b.n	800fe2a <__ieee754_atan2+0x42>
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	e77c      	b.n	800fe2a <__ieee754_atan2+0x42>
 800ff30:	a105      	add	r1, pc, #20	; (adr r1, 800ff48 <__ieee754_atan2+0x160>)
 800ff32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff36:	e778      	b.n	800fe2a <__ieee754_atan2+0x42>
 800ff38:	33145c07 	.word	0x33145c07
 800ff3c:	3ca1a626 	.word	0x3ca1a626
 800ff40:	54442d18 	.word	0x54442d18
 800ff44:	400921fb 	.word	0x400921fb
 800ff48:	54442d18 	.word	0x54442d18
 800ff4c:	3ff921fb 	.word	0x3ff921fb
 800ff50:	54442d18 	.word	0x54442d18
 800ff54:	3fe921fb 	.word	0x3fe921fb
 800ff58:	08012998 	.word	0x08012998
 800ff5c:	080129b0 	.word	0x080129b0
 800ff60:	54442d18 	.word	0x54442d18
 800ff64:	c00921fb 	.word	0xc00921fb
 800ff68:	54442d18 	.word	0x54442d18
 800ff6c:	bff921fb 	.word	0xbff921fb
 800ff70:	7ff00000 	.word	0x7ff00000
 800ff74:	00000000 	.word	0x00000000

0800ff78 <__ieee754_rem_pio2>:
 800ff78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff7c:	ed2d 8b02 	vpush	{d8}
 800ff80:	ec55 4b10 	vmov	r4, r5, d0
 800ff84:	4bca      	ldr	r3, [pc, #808]	; (80102b0 <__ieee754_rem_pio2+0x338>)
 800ff86:	b08b      	sub	sp, #44	; 0x2c
 800ff88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ff8c:	4598      	cmp	r8, r3
 800ff8e:	4682      	mov	sl, r0
 800ff90:	9502      	str	r5, [sp, #8]
 800ff92:	dc08      	bgt.n	800ffa6 <__ieee754_rem_pio2+0x2e>
 800ff94:	2200      	movs	r2, #0
 800ff96:	2300      	movs	r3, #0
 800ff98:	ed80 0b00 	vstr	d0, [r0]
 800ff9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ffa0:	f04f 0b00 	mov.w	fp, #0
 800ffa4:	e028      	b.n	800fff8 <__ieee754_rem_pio2+0x80>
 800ffa6:	4bc3      	ldr	r3, [pc, #780]	; (80102b4 <__ieee754_rem_pio2+0x33c>)
 800ffa8:	4598      	cmp	r8, r3
 800ffaa:	dc78      	bgt.n	801009e <__ieee754_rem_pio2+0x126>
 800ffac:	9b02      	ldr	r3, [sp, #8]
 800ffae:	4ec2      	ldr	r6, [pc, #776]	; (80102b8 <__ieee754_rem_pio2+0x340>)
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	ee10 0a10 	vmov	r0, s0
 800ffb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8010278 <__ieee754_rem_pio2+0x300>)
 800ffb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	dd39      	ble.n	8010034 <__ieee754_rem_pio2+0xbc>
 800ffc0:	f7f0 f972 	bl	80002a8 <__aeabi_dsub>
 800ffc4:	45b0      	cmp	r8, r6
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	460d      	mov	r5, r1
 800ffca:	d01b      	beq.n	8010004 <__ieee754_rem_pio2+0x8c>
 800ffcc:	a3ac      	add	r3, pc, #688	; (adr r3, 8010280 <__ieee754_rem_pio2+0x308>)
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	f7f0 f969 	bl	80002a8 <__aeabi_dsub>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	460b      	mov	r3, r1
 800ffda:	e9ca 2300 	strd	r2, r3, [sl]
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 f961 	bl	80002a8 <__aeabi_dsub>
 800ffe6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010280 <__ieee754_rem_pio2+0x308>)
 800ffe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffec:	f7f0 f95c 	bl	80002a8 <__aeabi_dsub>
 800fff0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fff4:	f04f 0b01 	mov.w	fp, #1
 800fff8:	4658      	mov	r0, fp
 800fffa:	b00b      	add	sp, #44	; 0x2c
 800fffc:	ecbd 8b02 	vpop	{d8}
 8010000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010004:	a3a0      	add	r3, pc, #640	; (adr r3, 8010288 <__ieee754_rem_pio2+0x310>)
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	f7f0 f94d 	bl	80002a8 <__aeabi_dsub>
 801000e:	a3a0      	add	r3, pc, #640	; (adr r3, 8010290 <__ieee754_rem_pio2+0x318>)
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	4604      	mov	r4, r0
 8010016:	460d      	mov	r5, r1
 8010018:	f7f0 f946 	bl	80002a8 <__aeabi_dsub>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	e9ca 2300 	strd	r2, r3, [sl]
 8010024:	4620      	mov	r0, r4
 8010026:	4629      	mov	r1, r5
 8010028:	f7f0 f93e 	bl	80002a8 <__aeabi_dsub>
 801002c:	a398      	add	r3, pc, #608	; (adr r3, 8010290 <__ieee754_rem_pio2+0x318>)
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	e7db      	b.n	800ffec <__ieee754_rem_pio2+0x74>
 8010034:	f7f0 f93a 	bl	80002ac <__adddf3>
 8010038:	45b0      	cmp	r8, r6
 801003a:	4604      	mov	r4, r0
 801003c:	460d      	mov	r5, r1
 801003e:	d016      	beq.n	801006e <__ieee754_rem_pio2+0xf6>
 8010040:	a38f      	add	r3, pc, #572	; (adr r3, 8010280 <__ieee754_rem_pio2+0x308>)
 8010042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010046:	f7f0 f931 	bl	80002ac <__adddf3>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	e9ca 2300 	strd	r2, r3, [sl]
 8010052:	4620      	mov	r0, r4
 8010054:	4629      	mov	r1, r5
 8010056:	f7f0 f927 	bl	80002a8 <__aeabi_dsub>
 801005a:	a389      	add	r3, pc, #548	; (adr r3, 8010280 <__ieee754_rem_pio2+0x308>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f7f0 f924 	bl	80002ac <__adddf3>
 8010064:	f04f 3bff 	mov.w	fp, #4294967295
 8010068:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801006c:	e7c4      	b.n	800fff8 <__ieee754_rem_pio2+0x80>
 801006e:	a386      	add	r3, pc, #536	; (adr r3, 8010288 <__ieee754_rem_pio2+0x310>)
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	f7f0 f91a 	bl	80002ac <__adddf3>
 8010078:	a385      	add	r3, pc, #532	; (adr r3, 8010290 <__ieee754_rem_pio2+0x318>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	4604      	mov	r4, r0
 8010080:	460d      	mov	r5, r1
 8010082:	f7f0 f913 	bl	80002ac <__adddf3>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	e9ca 2300 	strd	r2, r3, [sl]
 801008e:	4620      	mov	r0, r4
 8010090:	4629      	mov	r1, r5
 8010092:	f7f0 f909 	bl	80002a8 <__aeabi_dsub>
 8010096:	a37e      	add	r3, pc, #504	; (adr r3, 8010290 <__ieee754_rem_pio2+0x318>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	e7e0      	b.n	8010060 <__ieee754_rem_pio2+0xe8>
 801009e:	4b87      	ldr	r3, [pc, #540]	; (80102bc <__ieee754_rem_pio2+0x344>)
 80100a0:	4598      	cmp	r8, r3
 80100a2:	f300 80d8 	bgt.w	8010256 <__ieee754_rem_pio2+0x2de>
 80100a6:	f000 fb0f 	bl	80106c8 <fabs>
 80100aa:	ec55 4b10 	vmov	r4, r5, d0
 80100ae:	ee10 0a10 	vmov	r0, s0
 80100b2:	a379      	add	r3, pc, #484	; (adr r3, 8010298 <__ieee754_rem_pio2+0x320>)
 80100b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b8:	4629      	mov	r1, r5
 80100ba:	f7f0 faad 	bl	8000618 <__aeabi_dmul>
 80100be:	4b80      	ldr	r3, [pc, #512]	; (80102c0 <__ieee754_rem_pio2+0x348>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	f7f0 f8f3 	bl	80002ac <__adddf3>
 80100c6:	f7f0 fd57 	bl	8000b78 <__aeabi_d2iz>
 80100ca:	4683      	mov	fp, r0
 80100cc:	f7f0 fa3a 	bl	8000544 <__aeabi_i2d>
 80100d0:	4602      	mov	r2, r0
 80100d2:	460b      	mov	r3, r1
 80100d4:	ec43 2b18 	vmov	d8, r2, r3
 80100d8:	a367      	add	r3, pc, #412	; (adr r3, 8010278 <__ieee754_rem_pio2+0x300>)
 80100da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100de:	f7f0 fa9b 	bl	8000618 <__aeabi_dmul>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	4620      	mov	r0, r4
 80100e8:	4629      	mov	r1, r5
 80100ea:	f7f0 f8dd 	bl	80002a8 <__aeabi_dsub>
 80100ee:	a364      	add	r3, pc, #400	; (adr r3, 8010280 <__ieee754_rem_pio2+0x308>)
 80100f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f4:	4606      	mov	r6, r0
 80100f6:	460f      	mov	r7, r1
 80100f8:	ec51 0b18 	vmov	r0, r1, d8
 80100fc:	f7f0 fa8c 	bl	8000618 <__aeabi_dmul>
 8010100:	f1bb 0f1f 	cmp.w	fp, #31
 8010104:	4604      	mov	r4, r0
 8010106:	460d      	mov	r5, r1
 8010108:	dc0d      	bgt.n	8010126 <__ieee754_rem_pio2+0x1ae>
 801010a:	4b6e      	ldr	r3, [pc, #440]	; (80102c4 <__ieee754_rem_pio2+0x34c>)
 801010c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010114:	4543      	cmp	r3, r8
 8010116:	d006      	beq.n	8010126 <__ieee754_rem_pio2+0x1ae>
 8010118:	4622      	mov	r2, r4
 801011a:	462b      	mov	r3, r5
 801011c:	4630      	mov	r0, r6
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 f8c2 	bl	80002a8 <__aeabi_dsub>
 8010124:	e00e      	b.n	8010144 <__ieee754_rem_pio2+0x1cc>
 8010126:	462b      	mov	r3, r5
 8010128:	4622      	mov	r2, r4
 801012a:	4630      	mov	r0, r6
 801012c:	4639      	mov	r1, r7
 801012e:	f7f0 f8bb 	bl	80002a8 <__aeabi_dsub>
 8010132:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010136:	9303      	str	r3, [sp, #12]
 8010138:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801013c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010140:	2b10      	cmp	r3, #16
 8010142:	dc02      	bgt.n	801014a <__ieee754_rem_pio2+0x1d2>
 8010144:	e9ca 0100 	strd	r0, r1, [sl]
 8010148:	e039      	b.n	80101be <__ieee754_rem_pio2+0x246>
 801014a:	a34f      	add	r3, pc, #316	; (adr r3, 8010288 <__ieee754_rem_pio2+0x310>)
 801014c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010150:	ec51 0b18 	vmov	r0, r1, d8
 8010154:	f7f0 fa60 	bl	8000618 <__aeabi_dmul>
 8010158:	4604      	mov	r4, r0
 801015a:	460d      	mov	r5, r1
 801015c:	4602      	mov	r2, r0
 801015e:	460b      	mov	r3, r1
 8010160:	4630      	mov	r0, r6
 8010162:	4639      	mov	r1, r7
 8010164:	f7f0 f8a0 	bl	80002a8 <__aeabi_dsub>
 8010168:	4602      	mov	r2, r0
 801016a:	460b      	mov	r3, r1
 801016c:	4680      	mov	r8, r0
 801016e:	4689      	mov	r9, r1
 8010170:	4630      	mov	r0, r6
 8010172:	4639      	mov	r1, r7
 8010174:	f7f0 f898 	bl	80002a8 <__aeabi_dsub>
 8010178:	4622      	mov	r2, r4
 801017a:	462b      	mov	r3, r5
 801017c:	f7f0 f894 	bl	80002a8 <__aeabi_dsub>
 8010180:	a343      	add	r3, pc, #268	; (adr r3, 8010290 <__ieee754_rem_pio2+0x318>)
 8010182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010186:	4604      	mov	r4, r0
 8010188:	460d      	mov	r5, r1
 801018a:	ec51 0b18 	vmov	r0, r1, d8
 801018e:	f7f0 fa43 	bl	8000618 <__aeabi_dmul>
 8010192:	4622      	mov	r2, r4
 8010194:	462b      	mov	r3, r5
 8010196:	f7f0 f887 	bl	80002a8 <__aeabi_dsub>
 801019a:	4602      	mov	r2, r0
 801019c:	460b      	mov	r3, r1
 801019e:	4604      	mov	r4, r0
 80101a0:	460d      	mov	r5, r1
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	f7f0 f87f 	bl	80002a8 <__aeabi_dsub>
 80101aa:	9a03      	ldr	r2, [sp, #12]
 80101ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	2b31      	cmp	r3, #49	; 0x31
 80101b4:	dc24      	bgt.n	8010200 <__ieee754_rem_pio2+0x288>
 80101b6:	e9ca 0100 	strd	r0, r1, [sl]
 80101ba:	4646      	mov	r6, r8
 80101bc:	464f      	mov	r7, r9
 80101be:	e9da 8900 	ldrd	r8, r9, [sl]
 80101c2:	4630      	mov	r0, r6
 80101c4:	4642      	mov	r2, r8
 80101c6:	464b      	mov	r3, r9
 80101c8:	4639      	mov	r1, r7
 80101ca:	f7f0 f86d 	bl	80002a8 <__aeabi_dsub>
 80101ce:	462b      	mov	r3, r5
 80101d0:	4622      	mov	r2, r4
 80101d2:	f7f0 f869 	bl	80002a8 <__aeabi_dsub>
 80101d6:	9b02      	ldr	r3, [sp, #8]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101de:	f6bf af0b 	bge.w	800fff8 <__ieee754_rem_pio2+0x80>
 80101e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80101e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80101ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101ee:	f8ca 8000 	str.w	r8, [sl]
 80101f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80101f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80101fa:	f1cb 0b00 	rsb	fp, fp, #0
 80101fe:	e6fb      	b.n	800fff8 <__ieee754_rem_pio2+0x80>
 8010200:	a327      	add	r3, pc, #156	; (adr r3, 80102a0 <__ieee754_rem_pio2+0x328>)
 8010202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010206:	ec51 0b18 	vmov	r0, r1, d8
 801020a:	f7f0 fa05 	bl	8000618 <__aeabi_dmul>
 801020e:	4604      	mov	r4, r0
 8010210:	460d      	mov	r5, r1
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	4640      	mov	r0, r8
 8010218:	4649      	mov	r1, r9
 801021a:	f7f0 f845 	bl	80002a8 <__aeabi_dsub>
 801021e:	4602      	mov	r2, r0
 8010220:	460b      	mov	r3, r1
 8010222:	4606      	mov	r6, r0
 8010224:	460f      	mov	r7, r1
 8010226:	4640      	mov	r0, r8
 8010228:	4649      	mov	r1, r9
 801022a:	f7f0 f83d 	bl	80002a8 <__aeabi_dsub>
 801022e:	4622      	mov	r2, r4
 8010230:	462b      	mov	r3, r5
 8010232:	f7f0 f839 	bl	80002a8 <__aeabi_dsub>
 8010236:	a31c      	add	r3, pc, #112	; (adr r3, 80102a8 <__ieee754_rem_pio2+0x330>)
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	4604      	mov	r4, r0
 801023e:	460d      	mov	r5, r1
 8010240:	ec51 0b18 	vmov	r0, r1, d8
 8010244:	f7f0 f9e8 	bl	8000618 <__aeabi_dmul>
 8010248:	4622      	mov	r2, r4
 801024a:	462b      	mov	r3, r5
 801024c:	f7f0 f82c 	bl	80002a8 <__aeabi_dsub>
 8010250:	4604      	mov	r4, r0
 8010252:	460d      	mov	r5, r1
 8010254:	e760      	b.n	8010118 <__ieee754_rem_pio2+0x1a0>
 8010256:	4b1c      	ldr	r3, [pc, #112]	; (80102c8 <__ieee754_rem_pio2+0x350>)
 8010258:	4598      	cmp	r8, r3
 801025a:	dd37      	ble.n	80102cc <__ieee754_rem_pio2+0x354>
 801025c:	ee10 2a10 	vmov	r2, s0
 8010260:	462b      	mov	r3, r5
 8010262:	4620      	mov	r0, r4
 8010264:	4629      	mov	r1, r5
 8010266:	f7f0 f81f 	bl	80002a8 <__aeabi_dsub>
 801026a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801026e:	e9ca 0100 	strd	r0, r1, [sl]
 8010272:	e695      	b.n	800ffa0 <__ieee754_rem_pio2+0x28>
 8010274:	f3af 8000 	nop.w
 8010278:	54400000 	.word	0x54400000
 801027c:	3ff921fb 	.word	0x3ff921fb
 8010280:	1a626331 	.word	0x1a626331
 8010284:	3dd0b461 	.word	0x3dd0b461
 8010288:	1a600000 	.word	0x1a600000
 801028c:	3dd0b461 	.word	0x3dd0b461
 8010290:	2e037073 	.word	0x2e037073
 8010294:	3ba3198a 	.word	0x3ba3198a
 8010298:	6dc9c883 	.word	0x6dc9c883
 801029c:	3fe45f30 	.word	0x3fe45f30
 80102a0:	2e000000 	.word	0x2e000000
 80102a4:	3ba3198a 	.word	0x3ba3198a
 80102a8:	252049c1 	.word	0x252049c1
 80102ac:	397b839a 	.word	0x397b839a
 80102b0:	3fe921fb 	.word	0x3fe921fb
 80102b4:	4002d97b 	.word	0x4002d97b
 80102b8:	3ff921fb 	.word	0x3ff921fb
 80102bc:	413921fb 	.word	0x413921fb
 80102c0:	3fe00000 	.word	0x3fe00000
 80102c4:	080129c8 	.word	0x080129c8
 80102c8:	7fefffff 	.word	0x7fefffff
 80102cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80102d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80102d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80102d8:	4620      	mov	r0, r4
 80102da:	460d      	mov	r5, r1
 80102dc:	f7f0 fc4c 	bl	8000b78 <__aeabi_d2iz>
 80102e0:	f7f0 f930 	bl	8000544 <__aeabi_i2d>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	4620      	mov	r0, r4
 80102ea:	4629      	mov	r1, r5
 80102ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80102f0:	f7ef ffda 	bl	80002a8 <__aeabi_dsub>
 80102f4:	4b21      	ldr	r3, [pc, #132]	; (801037c <__ieee754_rem_pio2+0x404>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	f7f0 f98e 	bl	8000618 <__aeabi_dmul>
 80102fc:	460d      	mov	r5, r1
 80102fe:	4604      	mov	r4, r0
 8010300:	f7f0 fc3a 	bl	8000b78 <__aeabi_d2iz>
 8010304:	f7f0 f91e 	bl	8000544 <__aeabi_i2d>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4620      	mov	r0, r4
 801030e:	4629      	mov	r1, r5
 8010310:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010314:	f7ef ffc8 	bl	80002a8 <__aeabi_dsub>
 8010318:	4b18      	ldr	r3, [pc, #96]	; (801037c <__ieee754_rem_pio2+0x404>)
 801031a:	2200      	movs	r2, #0
 801031c:	f7f0 f97c 	bl	8000618 <__aeabi_dmul>
 8010320:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010324:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010328:	2703      	movs	r7, #3
 801032a:	2400      	movs	r4, #0
 801032c:	2500      	movs	r5, #0
 801032e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010332:	4622      	mov	r2, r4
 8010334:	462b      	mov	r3, r5
 8010336:	46b9      	mov	r9, r7
 8010338:	3f01      	subs	r7, #1
 801033a:	f7f0 fbd5 	bl	8000ae8 <__aeabi_dcmpeq>
 801033e:	2800      	cmp	r0, #0
 8010340:	d1f5      	bne.n	801032e <__ieee754_rem_pio2+0x3b6>
 8010342:	4b0f      	ldr	r3, [pc, #60]	; (8010380 <__ieee754_rem_pio2+0x408>)
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	2302      	movs	r3, #2
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	4632      	mov	r2, r6
 801034c:	464b      	mov	r3, r9
 801034e:	4651      	mov	r1, sl
 8010350:	a804      	add	r0, sp, #16
 8010352:	f000 f9c5 	bl	80106e0 <__kernel_rem_pio2>
 8010356:	9b02      	ldr	r3, [sp, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	4683      	mov	fp, r0
 801035c:	f6bf ae4c 	bge.w	800fff8 <__ieee754_rem_pio2+0x80>
 8010360:	e9da 2100 	ldrd	r2, r1, [sl]
 8010364:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010368:	e9ca 2300 	strd	r2, r3, [sl]
 801036c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010370:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010374:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010378:	e73f      	b.n	80101fa <__ieee754_rem_pio2+0x282>
 801037a:	bf00      	nop
 801037c:	41700000 	.word	0x41700000
 8010380:	08012a48 	.word	0x08012a48
 8010384:	00000000 	.word	0x00000000

08010388 <atan>:
 8010388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038c:	ec55 4b10 	vmov	r4, r5, d0
 8010390:	4bc3      	ldr	r3, [pc, #780]	; (80106a0 <atan+0x318>)
 8010392:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010396:	429e      	cmp	r6, r3
 8010398:	46ab      	mov	fp, r5
 801039a:	dd18      	ble.n	80103ce <atan+0x46>
 801039c:	4bc1      	ldr	r3, [pc, #772]	; (80106a4 <atan+0x31c>)
 801039e:	429e      	cmp	r6, r3
 80103a0:	dc01      	bgt.n	80103a6 <atan+0x1e>
 80103a2:	d109      	bne.n	80103b8 <atan+0x30>
 80103a4:	b144      	cbz	r4, 80103b8 <atan+0x30>
 80103a6:	4622      	mov	r2, r4
 80103a8:	462b      	mov	r3, r5
 80103aa:	4620      	mov	r0, r4
 80103ac:	4629      	mov	r1, r5
 80103ae:	f7ef ff7d 	bl	80002ac <__adddf3>
 80103b2:	4604      	mov	r4, r0
 80103b4:	460d      	mov	r5, r1
 80103b6:	e006      	b.n	80103c6 <atan+0x3e>
 80103b8:	f1bb 0f00 	cmp.w	fp, #0
 80103bc:	f300 8131 	bgt.w	8010622 <atan+0x29a>
 80103c0:	a59b      	add	r5, pc, #620	; (adr r5, 8010630 <atan+0x2a8>)
 80103c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80103c6:	ec45 4b10 	vmov	d0, r4, r5
 80103ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ce:	4bb6      	ldr	r3, [pc, #728]	; (80106a8 <atan+0x320>)
 80103d0:	429e      	cmp	r6, r3
 80103d2:	dc14      	bgt.n	80103fe <atan+0x76>
 80103d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80103d8:	429e      	cmp	r6, r3
 80103da:	dc0d      	bgt.n	80103f8 <atan+0x70>
 80103dc:	a396      	add	r3, pc, #600	; (adr r3, 8010638 <atan+0x2b0>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	ee10 0a10 	vmov	r0, s0
 80103e6:	4629      	mov	r1, r5
 80103e8:	f7ef ff60 	bl	80002ac <__adddf3>
 80103ec:	4baf      	ldr	r3, [pc, #700]	; (80106ac <atan+0x324>)
 80103ee:	2200      	movs	r2, #0
 80103f0:	f7f0 fba2 	bl	8000b38 <__aeabi_dcmpgt>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d1e6      	bne.n	80103c6 <atan+0x3e>
 80103f8:	f04f 3aff 	mov.w	sl, #4294967295
 80103fc:	e02b      	b.n	8010456 <atan+0xce>
 80103fe:	f000 f963 	bl	80106c8 <fabs>
 8010402:	4bab      	ldr	r3, [pc, #684]	; (80106b0 <atan+0x328>)
 8010404:	429e      	cmp	r6, r3
 8010406:	ec55 4b10 	vmov	r4, r5, d0
 801040a:	f300 80bf 	bgt.w	801058c <atan+0x204>
 801040e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010412:	429e      	cmp	r6, r3
 8010414:	f300 80a0 	bgt.w	8010558 <atan+0x1d0>
 8010418:	ee10 2a10 	vmov	r2, s0
 801041c:	ee10 0a10 	vmov	r0, s0
 8010420:	462b      	mov	r3, r5
 8010422:	4629      	mov	r1, r5
 8010424:	f7ef ff42 	bl	80002ac <__adddf3>
 8010428:	4ba0      	ldr	r3, [pc, #640]	; (80106ac <atan+0x324>)
 801042a:	2200      	movs	r2, #0
 801042c:	f7ef ff3c 	bl	80002a8 <__aeabi_dsub>
 8010430:	2200      	movs	r2, #0
 8010432:	4606      	mov	r6, r0
 8010434:	460f      	mov	r7, r1
 8010436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801043a:	4620      	mov	r0, r4
 801043c:	4629      	mov	r1, r5
 801043e:	f7ef ff35 	bl	80002ac <__adddf3>
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	4630      	mov	r0, r6
 8010448:	4639      	mov	r1, r7
 801044a:	f7f0 fa0f 	bl	800086c <__aeabi_ddiv>
 801044e:	f04f 0a00 	mov.w	sl, #0
 8010452:	4604      	mov	r4, r0
 8010454:	460d      	mov	r5, r1
 8010456:	4622      	mov	r2, r4
 8010458:	462b      	mov	r3, r5
 801045a:	4620      	mov	r0, r4
 801045c:	4629      	mov	r1, r5
 801045e:	f7f0 f8db 	bl	8000618 <__aeabi_dmul>
 8010462:	4602      	mov	r2, r0
 8010464:	460b      	mov	r3, r1
 8010466:	4680      	mov	r8, r0
 8010468:	4689      	mov	r9, r1
 801046a:	f7f0 f8d5 	bl	8000618 <__aeabi_dmul>
 801046e:	a374      	add	r3, pc, #464	; (adr r3, 8010640 <atan+0x2b8>)
 8010470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010474:	4606      	mov	r6, r0
 8010476:	460f      	mov	r7, r1
 8010478:	f7f0 f8ce 	bl	8000618 <__aeabi_dmul>
 801047c:	a372      	add	r3, pc, #456	; (adr r3, 8010648 <atan+0x2c0>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	f7ef ff13 	bl	80002ac <__adddf3>
 8010486:	4632      	mov	r2, r6
 8010488:	463b      	mov	r3, r7
 801048a:	f7f0 f8c5 	bl	8000618 <__aeabi_dmul>
 801048e:	a370      	add	r3, pc, #448	; (adr r3, 8010650 <atan+0x2c8>)
 8010490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010494:	f7ef ff0a 	bl	80002ac <__adddf3>
 8010498:	4632      	mov	r2, r6
 801049a:	463b      	mov	r3, r7
 801049c:	f7f0 f8bc 	bl	8000618 <__aeabi_dmul>
 80104a0:	a36d      	add	r3, pc, #436	; (adr r3, 8010658 <atan+0x2d0>)
 80104a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a6:	f7ef ff01 	bl	80002ac <__adddf3>
 80104aa:	4632      	mov	r2, r6
 80104ac:	463b      	mov	r3, r7
 80104ae:	f7f0 f8b3 	bl	8000618 <__aeabi_dmul>
 80104b2:	a36b      	add	r3, pc, #428	; (adr r3, 8010660 <atan+0x2d8>)
 80104b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b8:	f7ef fef8 	bl	80002ac <__adddf3>
 80104bc:	4632      	mov	r2, r6
 80104be:	463b      	mov	r3, r7
 80104c0:	f7f0 f8aa 	bl	8000618 <__aeabi_dmul>
 80104c4:	a368      	add	r3, pc, #416	; (adr r3, 8010668 <atan+0x2e0>)
 80104c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ca:	f7ef feef 	bl	80002ac <__adddf3>
 80104ce:	4642      	mov	r2, r8
 80104d0:	464b      	mov	r3, r9
 80104d2:	f7f0 f8a1 	bl	8000618 <__aeabi_dmul>
 80104d6:	a366      	add	r3, pc, #408	; (adr r3, 8010670 <atan+0x2e8>)
 80104d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104dc:	4680      	mov	r8, r0
 80104de:	4689      	mov	r9, r1
 80104e0:	4630      	mov	r0, r6
 80104e2:	4639      	mov	r1, r7
 80104e4:	f7f0 f898 	bl	8000618 <__aeabi_dmul>
 80104e8:	a363      	add	r3, pc, #396	; (adr r3, 8010678 <atan+0x2f0>)
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	f7ef fedb 	bl	80002a8 <__aeabi_dsub>
 80104f2:	4632      	mov	r2, r6
 80104f4:	463b      	mov	r3, r7
 80104f6:	f7f0 f88f 	bl	8000618 <__aeabi_dmul>
 80104fa:	a361      	add	r3, pc, #388	; (adr r3, 8010680 <atan+0x2f8>)
 80104fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010500:	f7ef fed2 	bl	80002a8 <__aeabi_dsub>
 8010504:	4632      	mov	r2, r6
 8010506:	463b      	mov	r3, r7
 8010508:	f7f0 f886 	bl	8000618 <__aeabi_dmul>
 801050c:	a35e      	add	r3, pc, #376	; (adr r3, 8010688 <atan+0x300>)
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f7ef fec9 	bl	80002a8 <__aeabi_dsub>
 8010516:	4632      	mov	r2, r6
 8010518:	463b      	mov	r3, r7
 801051a:	f7f0 f87d 	bl	8000618 <__aeabi_dmul>
 801051e:	a35c      	add	r3, pc, #368	; (adr r3, 8010690 <atan+0x308>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	f7ef fec0 	bl	80002a8 <__aeabi_dsub>
 8010528:	4632      	mov	r2, r6
 801052a:	463b      	mov	r3, r7
 801052c:	f7f0 f874 	bl	8000618 <__aeabi_dmul>
 8010530:	4602      	mov	r2, r0
 8010532:	460b      	mov	r3, r1
 8010534:	4640      	mov	r0, r8
 8010536:	4649      	mov	r1, r9
 8010538:	f7ef feb8 	bl	80002ac <__adddf3>
 801053c:	4622      	mov	r2, r4
 801053e:	462b      	mov	r3, r5
 8010540:	f7f0 f86a 	bl	8000618 <__aeabi_dmul>
 8010544:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010548:	4602      	mov	r2, r0
 801054a:	460b      	mov	r3, r1
 801054c:	d14b      	bne.n	80105e6 <atan+0x25e>
 801054e:	4620      	mov	r0, r4
 8010550:	4629      	mov	r1, r5
 8010552:	f7ef fea9 	bl	80002a8 <__aeabi_dsub>
 8010556:	e72c      	b.n	80103b2 <atan+0x2a>
 8010558:	ee10 0a10 	vmov	r0, s0
 801055c:	4b53      	ldr	r3, [pc, #332]	; (80106ac <atan+0x324>)
 801055e:	2200      	movs	r2, #0
 8010560:	4629      	mov	r1, r5
 8010562:	f7ef fea1 	bl	80002a8 <__aeabi_dsub>
 8010566:	4b51      	ldr	r3, [pc, #324]	; (80106ac <atan+0x324>)
 8010568:	4606      	mov	r6, r0
 801056a:	460f      	mov	r7, r1
 801056c:	2200      	movs	r2, #0
 801056e:	4620      	mov	r0, r4
 8010570:	4629      	mov	r1, r5
 8010572:	f7ef fe9b 	bl	80002ac <__adddf3>
 8010576:	4602      	mov	r2, r0
 8010578:	460b      	mov	r3, r1
 801057a:	4630      	mov	r0, r6
 801057c:	4639      	mov	r1, r7
 801057e:	f7f0 f975 	bl	800086c <__aeabi_ddiv>
 8010582:	f04f 0a01 	mov.w	sl, #1
 8010586:	4604      	mov	r4, r0
 8010588:	460d      	mov	r5, r1
 801058a:	e764      	b.n	8010456 <atan+0xce>
 801058c:	4b49      	ldr	r3, [pc, #292]	; (80106b4 <atan+0x32c>)
 801058e:	429e      	cmp	r6, r3
 8010590:	da1d      	bge.n	80105ce <atan+0x246>
 8010592:	ee10 0a10 	vmov	r0, s0
 8010596:	4b48      	ldr	r3, [pc, #288]	; (80106b8 <atan+0x330>)
 8010598:	2200      	movs	r2, #0
 801059a:	4629      	mov	r1, r5
 801059c:	f7ef fe84 	bl	80002a8 <__aeabi_dsub>
 80105a0:	4b45      	ldr	r3, [pc, #276]	; (80106b8 <atan+0x330>)
 80105a2:	4606      	mov	r6, r0
 80105a4:	460f      	mov	r7, r1
 80105a6:	2200      	movs	r2, #0
 80105a8:	4620      	mov	r0, r4
 80105aa:	4629      	mov	r1, r5
 80105ac:	f7f0 f834 	bl	8000618 <__aeabi_dmul>
 80105b0:	4b3e      	ldr	r3, [pc, #248]	; (80106ac <atan+0x324>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	f7ef fe7a 	bl	80002ac <__adddf3>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4630      	mov	r0, r6
 80105be:	4639      	mov	r1, r7
 80105c0:	f7f0 f954 	bl	800086c <__aeabi_ddiv>
 80105c4:	f04f 0a02 	mov.w	sl, #2
 80105c8:	4604      	mov	r4, r0
 80105ca:	460d      	mov	r5, r1
 80105cc:	e743      	b.n	8010456 <atan+0xce>
 80105ce:	462b      	mov	r3, r5
 80105d0:	ee10 2a10 	vmov	r2, s0
 80105d4:	4939      	ldr	r1, [pc, #228]	; (80106bc <atan+0x334>)
 80105d6:	2000      	movs	r0, #0
 80105d8:	f7f0 f948 	bl	800086c <__aeabi_ddiv>
 80105dc:	f04f 0a03 	mov.w	sl, #3
 80105e0:	4604      	mov	r4, r0
 80105e2:	460d      	mov	r5, r1
 80105e4:	e737      	b.n	8010456 <atan+0xce>
 80105e6:	4b36      	ldr	r3, [pc, #216]	; (80106c0 <atan+0x338>)
 80105e8:	4e36      	ldr	r6, [pc, #216]	; (80106c4 <atan+0x33c>)
 80105ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f2:	f7ef fe59 	bl	80002a8 <__aeabi_dsub>
 80105f6:	4622      	mov	r2, r4
 80105f8:	462b      	mov	r3, r5
 80105fa:	f7ef fe55 	bl	80002a8 <__aeabi_dsub>
 80105fe:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010602:	4602      	mov	r2, r0
 8010604:	460b      	mov	r3, r1
 8010606:	e9d6 0100 	ldrd	r0, r1, [r6]
 801060a:	f7ef fe4d 	bl	80002a8 <__aeabi_dsub>
 801060e:	f1bb 0f00 	cmp.w	fp, #0
 8010612:	4604      	mov	r4, r0
 8010614:	460d      	mov	r5, r1
 8010616:	f6bf aed6 	bge.w	80103c6 <atan+0x3e>
 801061a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801061e:	461d      	mov	r5, r3
 8010620:	e6d1      	b.n	80103c6 <atan+0x3e>
 8010622:	a51d      	add	r5, pc, #116	; (adr r5, 8010698 <atan+0x310>)
 8010624:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010628:	e6cd      	b.n	80103c6 <atan+0x3e>
 801062a:	bf00      	nop
 801062c:	f3af 8000 	nop.w
 8010630:	54442d18 	.word	0x54442d18
 8010634:	bff921fb 	.word	0xbff921fb
 8010638:	8800759c 	.word	0x8800759c
 801063c:	7e37e43c 	.word	0x7e37e43c
 8010640:	e322da11 	.word	0xe322da11
 8010644:	3f90ad3a 	.word	0x3f90ad3a
 8010648:	24760deb 	.word	0x24760deb
 801064c:	3fa97b4b 	.word	0x3fa97b4b
 8010650:	a0d03d51 	.word	0xa0d03d51
 8010654:	3fb10d66 	.word	0x3fb10d66
 8010658:	c54c206e 	.word	0xc54c206e
 801065c:	3fb745cd 	.word	0x3fb745cd
 8010660:	920083ff 	.word	0x920083ff
 8010664:	3fc24924 	.word	0x3fc24924
 8010668:	5555550d 	.word	0x5555550d
 801066c:	3fd55555 	.word	0x3fd55555
 8010670:	2c6a6c2f 	.word	0x2c6a6c2f
 8010674:	bfa2b444 	.word	0xbfa2b444
 8010678:	52defd9a 	.word	0x52defd9a
 801067c:	3fadde2d 	.word	0x3fadde2d
 8010680:	af749a6d 	.word	0xaf749a6d
 8010684:	3fb3b0f2 	.word	0x3fb3b0f2
 8010688:	fe231671 	.word	0xfe231671
 801068c:	3fbc71c6 	.word	0x3fbc71c6
 8010690:	9998ebc4 	.word	0x9998ebc4
 8010694:	3fc99999 	.word	0x3fc99999
 8010698:	54442d18 	.word	0x54442d18
 801069c:	3ff921fb 	.word	0x3ff921fb
 80106a0:	440fffff 	.word	0x440fffff
 80106a4:	7ff00000 	.word	0x7ff00000
 80106a8:	3fdbffff 	.word	0x3fdbffff
 80106ac:	3ff00000 	.word	0x3ff00000
 80106b0:	3ff2ffff 	.word	0x3ff2ffff
 80106b4:	40038000 	.word	0x40038000
 80106b8:	3ff80000 	.word	0x3ff80000
 80106bc:	bff00000 	.word	0xbff00000
 80106c0:	08012b70 	.word	0x08012b70
 80106c4:	08012b50 	.word	0x08012b50

080106c8 <fabs>:
 80106c8:	ec51 0b10 	vmov	r0, r1, d0
 80106cc:	ee10 2a10 	vmov	r2, s0
 80106d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106d4:	ec43 2b10 	vmov	d0, r2, r3
 80106d8:	4770      	bx	lr
 80106da:	0000      	movs	r0, r0
 80106dc:	0000      	movs	r0, r0
	...

080106e0 <__kernel_rem_pio2>:
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	ed2d 8b02 	vpush	{d8}
 80106e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80106ec:	f112 0f14 	cmn.w	r2, #20
 80106f0:	9306      	str	r3, [sp, #24]
 80106f2:	9104      	str	r1, [sp, #16]
 80106f4:	4bc2      	ldr	r3, [pc, #776]	; (8010a00 <__kernel_rem_pio2+0x320>)
 80106f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80106f8:	9009      	str	r0, [sp, #36]	; 0x24
 80106fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	9b06      	ldr	r3, [sp, #24]
 8010702:	f103 33ff 	add.w	r3, r3, #4294967295
 8010706:	bfa8      	it	ge
 8010708:	1ed4      	subge	r4, r2, #3
 801070a:	9305      	str	r3, [sp, #20]
 801070c:	bfb2      	itee	lt
 801070e:	2400      	movlt	r4, #0
 8010710:	2318      	movge	r3, #24
 8010712:	fb94 f4f3 	sdivge	r4, r4, r3
 8010716:	f06f 0317 	mvn.w	r3, #23
 801071a:	fb04 3303 	mla	r3, r4, r3, r3
 801071e:	eb03 0a02 	add.w	sl, r3, r2
 8010722:	9b00      	ldr	r3, [sp, #0]
 8010724:	9a05      	ldr	r2, [sp, #20]
 8010726:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80109f0 <__kernel_rem_pio2+0x310>
 801072a:	eb03 0802 	add.w	r8, r3, r2
 801072e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010730:	1aa7      	subs	r7, r4, r2
 8010732:	ae20      	add	r6, sp, #128	; 0x80
 8010734:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010738:	2500      	movs	r5, #0
 801073a:	4545      	cmp	r5, r8
 801073c:	dd13      	ble.n	8010766 <__kernel_rem_pio2+0x86>
 801073e:	9b06      	ldr	r3, [sp, #24]
 8010740:	aa20      	add	r2, sp, #128	; 0x80
 8010742:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010746:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801074a:	f04f 0800 	mov.w	r8, #0
 801074e:	9b00      	ldr	r3, [sp, #0]
 8010750:	4598      	cmp	r8, r3
 8010752:	dc31      	bgt.n	80107b8 <__kernel_rem_pio2+0xd8>
 8010754:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80109f0 <__kernel_rem_pio2+0x310>
 8010758:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801075c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010760:	462f      	mov	r7, r5
 8010762:	2600      	movs	r6, #0
 8010764:	e01b      	b.n	801079e <__kernel_rem_pio2+0xbe>
 8010766:	42ef      	cmn	r7, r5
 8010768:	d407      	bmi.n	801077a <__kernel_rem_pio2+0x9a>
 801076a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801076e:	f7ef fee9 	bl	8000544 <__aeabi_i2d>
 8010772:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010776:	3501      	adds	r5, #1
 8010778:	e7df      	b.n	801073a <__kernel_rem_pio2+0x5a>
 801077a:	ec51 0b18 	vmov	r0, r1, d8
 801077e:	e7f8      	b.n	8010772 <__kernel_rem_pio2+0x92>
 8010780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010784:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010788:	f7ef ff46 	bl	8000618 <__aeabi_dmul>
 801078c:	4602      	mov	r2, r0
 801078e:	460b      	mov	r3, r1
 8010790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010794:	f7ef fd8a 	bl	80002ac <__adddf3>
 8010798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801079c:	3601      	adds	r6, #1
 801079e:	9b05      	ldr	r3, [sp, #20]
 80107a0:	429e      	cmp	r6, r3
 80107a2:	f1a7 0708 	sub.w	r7, r7, #8
 80107a6:	ddeb      	ble.n	8010780 <__kernel_rem_pio2+0xa0>
 80107a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107ac:	f108 0801 	add.w	r8, r8, #1
 80107b0:	ecab 7b02 	vstmia	fp!, {d7}
 80107b4:	3508      	adds	r5, #8
 80107b6:	e7ca      	b.n	801074e <__kernel_rem_pio2+0x6e>
 80107b8:	9b00      	ldr	r3, [sp, #0]
 80107ba:	aa0c      	add	r2, sp, #48	; 0x30
 80107bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80107c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80107c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80107c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80107c8:	9c00      	ldr	r4, [sp, #0]
 80107ca:	930a      	str	r3, [sp, #40]	; 0x28
 80107cc:	00e3      	lsls	r3, r4, #3
 80107ce:	9308      	str	r3, [sp, #32]
 80107d0:	ab98      	add	r3, sp, #608	; 0x260
 80107d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80107da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80107de:	ab70      	add	r3, sp, #448	; 0x1c0
 80107e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80107e4:	46c3      	mov	fp, r8
 80107e6:	46a1      	mov	r9, r4
 80107e8:	f1b9 0f00 	cmp.w	r9, #0
 80107ec:	f1a5 0508 	sub.w	r5, r5, #8
 80107f0:	dc77      	bgt.n	80108e2 <__kernel_rem_pio2+0x202>
 80107f2:	ec47 6b10 	vmov	d0, r6, r7
 80107f6:	4650      	mov	r0, sl
 80107f8:	f000 fac2 	bl	8010d80 <scalbn>
 80107fc:	ec57 6b10 	vmov	r6, r7, d0
 8010800:	2200      	movs	r2, #0
 8010802:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010806:	ee10 0a10 	vmov	r0, s0
 801080a:	4639      	mov	r1, r7
 801080c:	f7ef ff04 	bl	8000618 <__aeabi_dmul>
 8010810:	ec41 0b10 	vmov	d0, r0, r1
 8010814:	f7ff f8e0 	bl	800f9d8 <floor>
 8010818:	4b7a      	ldr	r3, [pc, #488]	; (8010a04 <__kernel_rem_pio2+0x324>)
 801081a:	ec51 0b10 	vmov	r0, r1, d0
 801081e:	2200      	movs	r2, #0
 8010820:	f7ef fefa 	bl	8000618 <__aeabi_dmul>
 8010824:	4602      	mov	r2, r0
 8010826:	460b      	mov	r3, r1
 8010828:	4630      	mov	r0, r6
 801082a:	4639      	mov	r1, r7
 801082c:	f7ef fd3c 	bl	80002a8 <__aeabi_dsub>
 8010830:	460f      	mov	r7, r1
 8010832:	4606      	mov	r6, r0
 8010834:	f7f0 f9a0 	bl	8000b78 <__aeabi_d2iz>
 8010838:	9002      	str	r0, [sp, #8]
 801083a:	f7ef fe83 	bl	8000544 <__aeabi_i2d>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	4630      	mov	r0, r6
 8010844:	4639      	mov	r1, r7
 8010846:	f7ef fd2f 	bl	80002a8 <__aeabi_dsub>
 801084a:	f1ba 0f00 	cmp.w	sl, #0
 801084e:	4606      	mov	r6, r0
 8010850:	460f      	mov	r7, r1
 8010852:	dd6d      	ble.n	8010930 <__kernel_rem_pio2+0x250>
 8010854:	1e61      	subs	r1, r4, #1
 8010856:	ab0c      	add	r3, sp, #48	; 0x30
 8010858:	9d02      	ldr	r5, [sp, #8]
 801085a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801085e:	f1ca 0018 	rsb	r0, sl, #24
 8010862:	fa43 f200 	asr.w	r2, r3, r0
 8010866:	4415      	add	r5, r2
 8010868:	4082      	lsls	r2, r0
 801086a:	1a9b      	subs	r3, r3, r2
 801086c:	aa0c      	add	r2, sp, #48	; 0x30
 801086e:	9502      	str	r5, [sp, #8]
 8010870:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010874:	f1ca 0217 	rsb	r2, sl, #23
 8010878:	fa43 fb02 	asr.w	fp, r3, r2
 801087c:	f1bb 0f00 	cmp.w	fp, #0
 8010880:	dd65      	ble.n	801094e <__kernel_rem_pio2+0x26e>
 8010882:	9b02      	ldr	r3, [sp, #8]
 8010884:	2200      	movs	r2, #0
 8010886:	3301      	adds	r3, #1
 8010888:	9302      	str	r3, [sp, #8]
 801088a:	4615      	mov	r5, r2
 801088c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010890:	4294      	cmp	r4, r2
 8010892:	f300 809f 	bgt.w	80109d4 <__kernel_rem_pio2+0x2f4>
 8010896:	f1ba 0f00 	cmp.w	sl, #0
 801089a:	dd07      	ble.n	80108ac <__kernel_rem_pio2+0x1cc>
 801089c:	f1ba 0f01 	cmp.w	sl, #1
 80108a0:	f000 80c1 	beq.w	8010a26 <__kernel_rem_pio2+0x346>
 80108a4:	f1ba 0f02 	cmp.w	sl, #2
 80108a8:	f000 80c7 	beq.w	8010a3a <__kernel_rem_pio2+0x35a>
 80108ac:	f1bb 0f02 	cmp.w	fp, #2
 80108b0:	d14d      	bne.n	801094e <__kernel_rem_pio2+0x26e>
 80108b2:	4632      	mov	r2, r6
 80108b4:	463b      	mov	r3, r7
 80108b6:	4954      	ldr	r1, [pc, #336]	; (8010a08 <__kernel_rem_pio2+0x328>)
 80108b8:	2000      	movs	r0, #0
 80108ba:	f7ef fcf5 	bl	80002a8 <__aeabi_dsub>
 80108be:	4606      	mov	r6, r0
 80108c0:	460f      	mov	r7, r1
 80108c2:	2d00      	cmp	r5, #0
 80108c4:	d043      	beq.n	801094e <__kernel_rem_pio2+0x26e>
 80108c6:	4650      	mov	r0, sl
 80108c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80109f8 <__kernel_rem_pio2+0x318>
 80108cc:	f000 fa58 	bl	8010d80 <scalbn>
 80108d0:	4630      	mov	r0, r6
 80108d2:	4639      	mov	r1, r7
 80108d4:	ec53 2b10 	vmov	r2, r3, d0
 80108d8:	f7ef fce6 	bl	80002a8 <__aeabi_dsub>
 80108dc:	4606      	mov	r6, r0
 80108de:	460f      	mov	r7, r1
 80108e0:	e035      	b.n	801094e <__kernel_rem_pio2+0x26e>
 80108e2:	4b4a      	ldr	r3, [pc, #296]	; (8010a0c <__kernel_rem_pio2+0x32c>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	4630      	mov	r0, r6
 80108e8:	4639      	mov	r1, r7
 80108ea:	f7ef fe95 	bl	8000618 <__aeabi_dmul>
 80108ee:	f7f0 f943 	bl	8000b78 <__aeabi_d2iz>
 80108f2:	f7ef fe27 	bl	8000544 <__aeabi_i2d>
 80108f6:	4602      	mov	r2, r0
 80108f8:	460b      	mov	r3, r1
 80108fa:	ec43 2b18 	vmov	d8, r2, r3
 80108fe:	4b44      	ldr	r3, [pc, #272]	; (8010a10 <__kernel_rem_pio2+0x330>)
 8010900:	2200      	movs	r2, #0
 8010902:	f7ef fe89 	bl	8000618 <__aeabi_dmul>
 8010906:	4602      	mov	r2, r0
 8010908:	460b      	mov	r3, r1
 801090a:	4630      	mov	r0, r6
 801090c:	4639      	mov	r1, r7
 801090e:	f7ef fccb 	bl	80002a8 <__aeabi_dsub>
 8010912:	f7f0 f931 	bl	8000b78 <__aeabi_d2iz>
 8010916:	e9d5 2300 	ldrd	r2, r3, [r5]
 801091a:	f84b 0b04 	str.w	r0, [fp], #4
 801091e:	ec51 0b18 	vmov	r0, r1, d8
 8010922:	f7ef fcc3 	bl	80002ac <__adddf3>
 8010926:	f109 39ff 	add.w	r9, r9, #4294967295
 801092a:	4606      	mov	r6, r0
 801092c:	460f      	mov	r7, r1
 801092e:	e75b      	b.n	80107e8 <__kernel_rem_pio2+0x108>
 8010930:	d106      	bne.n	8010940 <__kernel_rem_pio2+0x260>
 8010932:	1e63      	subs	r3, r4, #1
 8010934:	aa0c      	add	r2, sp, #48	; 0x30
 8010936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801093a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801093e:	e79d      	b.n	801087c <__kernel_rem_pio2+0x19c>
 8010940:	4b34      	ldr	r3, [pc, #208]	; (8010a14 <__kernel_rem_pio2+0x334>)
 8010942:	2200      	movs	r2, #0
 8010944:	f7f0 f8ee 	bl	8000b24 <__aeabi_dcmpge>
 8010948:	2800      	cmp	r0, #0
 801094a:	d140      	bne.n	80109ce <__kernel_rem_pio2+0x2ee>
 801094c:	4683      	mov	fp, r0
 801094e:	2200      	movs	r2, #0
 8010950:	2300      	movs	r3, #0
 8010952:	4630      	mov	r0, r6
 8010954:	4639      	mov	r1, r7
 8010956:	f7f0 f8c7 	bl	8000ae8 <__aeabi_dcmpeq>
 801095a:	2800      	cmp	r0, #0
 801095c:	f000 80c1 	beq.w	8010ae2 <__kernel_rem_pio2+0x402>
 8010960:	1e65      	subs	r5, r4, #1
 8010962:	462b      	mov	r3, r5
 8010964:	2200      	movs	r2, #0
 8010966:	9900      	ldr	r1, [sp, #0]
 8010968:	428b      	cmp	r3, r1
 801096a:	da6d      	bge.n	8010a48 <__kernel_rem_pio2+0x368>
 801096c:	2a00      	cmp	r2, #0
 801096e:	f000 808a 	beq.w	8010a86 <__kernel_rem_pio2+0x3a6>
 8010972:	ab0c      	add	r3, sp, #48	; 0x30
 8010974:	f1aa 0a18 	sub.w	sl, sl, #24
 8010978:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801097c:	2b00      	cmp	r3, #0
 801097e:	f000 80ae 	beq.w	8010ade <__kernel_rem_pio2+0x3fe>
 8010982:	4650      	mov	r0, sl
 8010984:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80109f8 <__kernel_rem_pio2+0x318>
 8010988:	f000 f9fa 	bl	8010d80 <scalbn>
 801098c:	1c6b      	adds	r3, r5, #1
 801098e:	00da      	lsls	r2, r3, #3
 8010990:	9205      	str	r2, [sp, #20]
 8010992:	ec57 6b10 	vmov	r6, r7, d0
 8010996:	aa70      	add	r2, sp, #448	; 0x1c0
 8010998:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010a0c <__kernel_rem_pio2+0x32c>
 801099c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80109a0:	462c      	mov	r4, r5
 80109a2:	f04f 0800 	mov.w	r8, #0
 80109a6:	2c00      	cmp	r4, #0
 80109a8:	f280 80d4 	bge.w	8010b54 <__kernel_rem_pio2+0x474>
 80109ac:	462c      	mov	r4, r5
 80109ae:	2c00      	cmp	r4, #0
 80109b0:	f2c0 8102 	blt.w	8010bb8 <__kernel_rem_pio2+0x4d8>
 80109b4:	4b18      	ldr	r3, [pc, #96]	; (8010a18 <__kernel_rem_pio2+0x338>)
 80109b6:	461e      	mov	r6, r3
 80109b8:	ab70      	add	r3, sp, #448	; 0x1c0
 80109ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80109be:	1b2b      	subs	r3, r5, r4
 80109c0:	f04f 0900 	mov.w	r9, #0
 80109c4:	f04f 0a00 	mov.w	sl, #0
 80109c8:	2700      	movs	r7, #0
 80109ca:	9306      	str	r3, [sp, #24]
 80109cc:	e0e6      	b.n	8010b9c <__kernel_rem_pio2+0x4bc>
 80109ce:	f04f 0b02 	mov.w	fp, #2
 80109d2:	e756      	b.n	8010882 <__kernel_rem_pio2+0x1a2>
 80109d4:	f8d8 3000 	ldr.w	r3, [r8]
 80109d8:	bb05      	cbnz	r5, 8010a1c <__kernel_rem_pio2+0x33c>
 80109da:	b123      	cbz	r3, 80109e6 <__kernel_rem_pio2+0x306>
 80109dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80109e0:	f8c8 3000 	str.w	r3, [r8]
 80109e4:	2301      	movs	r3, #1
 80109e6:	3201      	adds	r2, #1
 80109e8:	f108 0804 	add.w	r8, r8, #4
 80109ec:	461d      	mov	r5, r3
 80109ee:	e74f      	b.n	8010890 <__kernel_rem_pio2+0x1b0>
	...
 80109fc:	3ff00000 	.word	0x3ff00000
 8010a00:	08012bd0 	.word	0x08012bd0
 8010a04:	40200000 	.word	0x40200000
 8010a08:	3ff00000 	.word	0x3ff00000
 8010a0c:	3e700000 	.word	0x3e700000
 8010a10:	41700000 	.word	0x41700000
 8010a14:	3fe00000 	.word	0x3fe00000
 8010a18:	08012b90 	.word	0x08012b90
 8010a1c:	1acb      	subs	r3, r1, r3
 8010a1e:	f8c8 3000 	str.w	r3, [r8]
 8010a22:	462b      	mov	r3, r5
 8010a24:	e7df      	b.n	80109e6 <__kernel_rem_pio2+0x306>
 8010a26:	1e62      	subs	r2, r4, #1
 8010a28:	ab0c      	add	r3, sp, #48	; 0x30
 8010a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010a32:	a90c      	add	r1, sp, #48	; 0x30
 8010a34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010a38:	e738      	b.n	80108ac <__kernel_rem_pio2+0x1cc>
 8010a3a:	1e62      	subs	r2, r4, #1
 8010a3c:	ab0c      	add	r3, sp, #48	; 0x30
 8010a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010a46:	e7f4      	b.n	8010a32 <__kernel_rem_pio2+0x352>
 8010a48:	a90c      	add	r1, sp, #48	; 0x30
 8010a4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	430a      	orrs	r2, r1
 8010a52:	e788      	b.n	8010966 <__kernel_rem_pio2+0x286>
 8010a54:	3301      	adds	r3, #1
 8010a56:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010a5a:	2900      	cmp	r1, #0
 8010a5c:	d0fa      	beq.n	8010a54 <__kernel_rem_pio2+0x374>
 8010a5e:	9a08      	ldr	r2, [sp, #32]
 8010a60:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010a64:	446a      	add	r2, sp
 8010a66:	3a98      	subs	r2, #152	; 0x98
 8010a68:	9208      	str	r2, [sp, #32]
 8010a6a:	9a06      	ldr	r2, [sp, #24]
 8010a6c:	a920      	add	r1, sp, #128	; 0x80
 8010a6e:	18a2      	adds	r2, r4, r2
 8010a70:	18e3      	adds	r3, r4, r3
 8010a72:	f104 0801 	add.w	r8, r4, #1
 8010a76:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010a7a:	9302      	str	r3, [sp, #8]
 8010a7c:	9b02      	ldr	r3, [sp, #8]
 8010a7e:	4543      	cmp	r3, r8
 8010a80:	da04      	bge.n	8010a8c <__kernel_rem_pio2+0x3ac>
 8010a82:	461c      	mov	r4, r3
 8010a84:	e6a2      	b.n	80107cc <__kernel_rem_pio2+0xec>
 8010a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a88:	2301      	movs	r3, #1
 8010a8a:	e7e4      	b.n	8010a56 <__kernel_rem_pio2+0x376>
 8010a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010a92:	f7ef fd57 	bl	8000544 <__aeabi_i2d>
 8010a96:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a9c:	46ab      	mov	fp, r5
 8010a9e:	461c      	mov	r4, r3
 8010aa0:	f04f 0900 	mov.w	r9, #0
 8010aa4:	2600      	movs	r6, #0
 8010aa6:	2700      	movs	r7, #0
 8010aa8:	9b05      	ldr	r3, [sp, #20]
 8010aaa:	4599      	cmp	r9, r3
 8010aac:	dd06      	ble.n	8010abc <__kernel_rem_pio2+0x3dc>
 8010aae:	9b08      	ldr	r3, [sp, #32]
 8010ab0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010ab4:	f108 0801 	add.w	r8, r8, #1
 8010ab8:	9308      	str	r3, [sp, #32]
 8010aba:	e7df      	b.n	8010a7c <__kernel_rem_pio2+0x39c>
 8010abc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010ac0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010ac4:	f7ef fda8 	bl	8000618 <__aeabi_dmul>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	460b      	mov	r3, r1
 8010acc:	4630      	mov	r0, r6
 8010ace:	4639      	mov	r1, r7
 8010ad0:	f7ef fbec 	bl	80002ac <__adddf3>
 8010ad4:	f109 0901 	add.w	r9, r9, #1
 8010ad8:	4606      	mov	r6, r0
 8010ada:	460f      	mov	r7, r1
 8010adc:	e7e4      	b.n	8010aa8 <__kernel_rem_pio2+0x3c8>
 8010ade:	3d01      	subs	r5, #1
 8010ae0:	e747      	b.n	8010972 <__kernel_rem_pio2+0x292>
 8010ae2:	ec47 6b10 	vmov	d0, r6, r7
 8010ae6:	f1ca 0000 	rsb	r0, sl, #0
 8010aea:	f000 f949 	bl	8010d80 <scalbn>
 8010aee:	ec57 6b10 	vmov	r6, r7, d0
 8010af2:	4ba0      	ldr	r3, [pc, #640]	; (8010d74 <__kernel_rem_pio2+0x694>)
 8010af4:	ee10 0a10 	vmov	r0, s0
 8010af8:	2200      	movs	r2, #0
 8010afa:	4639      	mov	r1, r7
 8010afc:	f7f0 f812 	bl	8000b24 <__aeabi_dcmpge>
 8010b00:	b1f8      	cbz	r0, 8010b42 <__kernel_rem_pio2+0x462>
 8010b02:	4b9d      	ldr	r3, [pc, #628]	; (8010d78 <__kernel_rem_pio2+0x698>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	4630      	mov	r0, r6
 8010b08:	4639      	mov	r1, r7
 8010b0a:	f7ef fd85 	bl	8000618 <__aeabi_dmul>
 8010b0e:	f7f0 f833 	bl	8000b78 <__aeabi_d2iz>
 8010b12:	4680      	mov	r8, r0
 8010b14:	f7ef fd16 	bl	8000544 <__aeabi_i2d>
 8010b18:	4b96      	ldr	r3, [pc, #600]	; (8010d74 <__kernel_rem_pio2+0x694>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f7ef fd7c 	bl	8000618 <__aeabi_dmul>
 8010b20:	460b      	mov	r3, r1
 8010b22:	4602      	mov	r2, r0
 8010b24:	4639      	mov	r1, r7
 8010b26:	4630      	mov	r0, r6
 8010b28:	f7ef fbbe 	bl	80002a8 <__aeabi_dsub>
 8010b2c:	f7f0 f824 	bl	8000b78 <__aeabi_d2iz>
 8010b30:	1c65      	adds	r5, r4, #1
 8010b32:	ab0c      	add	r3, sp, #48	; 0x30
 8010b34:	f10a 0a18 	add.w	sl, sl, #24
 8010b38:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010b3c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010b40:	e71f      	b.n	8010982 <__kernel_rem_pio2+0x2a2>
 8010b42:	4630      	mov	r0, r6
 8010b44:	4639      	mov	r1, r7
 8010b46:	f7f0 f817 	bl	8000b78 <__aeabi_d2iz>
 8010b4a:	ab0c      	add	r3, sp, #48	; 0x30
 8010b4c:	4625      	mov	r5, r4
 8010b4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010b52:	e716      	b.n	8010982 <__kernel_rem_pio2+0x2a2>
 8010b54:	ab0c      	add	r3, sp, #48	; 0x30
 8010b56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010b5a:	f7ef fcf3 	bl	8000544 <__aeabi_i2d>
 8010b5e:	4632      	mov	r2, r6
 8010b60:	463b      	mov	r3, r7
 8010b62:	f7ef fd59 	bl	8000618 <__aeabi_dmul>
 8010b66:	4642      	mov	r2, r8
 8010b68:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010b6c:	464b      	mov	r3, r9
 8010b6e:	4630      	mov	r0, r6
 8010b70:	4639      	mov	r1, r7
 8010b72:	f7ef fd51 	bl	8000618 <__aeabi_dmul>
 8010b76:	3c01      	subs	r4, #1
 8010b78:	4606      	mov	r6, r0
 8010b7a:	460f      	mov	r7, r1
 8010b7c:	e713      	b.n	80109a6 <__kernel_rem_pio2+0x2c6>
 8010b7e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010b82:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010b86:	f7ef fd47 	bl	8000618 <__aeabi_dmul>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4648      	mov	r0, r9
 8010b90:	4651      	mov	r1, sl
 8010b92:	f7ef fb8b 	bl	80002ac <__adddf3>
 8010b96:	3701      	adds	r7, #1
 8010b98:	4681      	mov	r9, r0
 8010b9a:	468a      	mov	sl, r1
 8010b9c:	9b00      	ldr	r3, [sp, #0]
 8010b9e:	429f      	cmp	r7, r3
 8010ba0:	dc02      	bgt.n	8010ba8 <__kernel_rem_pio2+0x4c8>
 8010ba2:	9b06      	ldr	r3, [sp, #24]
 8010ba4:	429f      	cmp	r7, r3
 8010ba6:	ddea      	ble.n	8010b7e <__kernel_rem_pio2+0x49e>
 8010ba8:	9a06      	ldr	r2, [sp, #24]
 8010baa:	ab48      	add	r3, sp, #288	; 0x120
 8010bac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010bb0:	e9c6 9a00 	strd	r9, sl, [r6]
 8010bb4:	3c01      	subs	r4, #1
 8010bb6:	e6fa      	b.n	80109ae <__kernel_rem_pio2+0x2ce>
 8010bb8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010bba:	2b02      	cmp	r3, #2
 8010bbc:	dc0b      	bgt.n	8010bd6 <__kernel_rem_pio2+0x4f6>
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	dc39      	bgt.n	8010c36 <__kernel_rem_pio2+0x556>
 8010bc2:	d05d      	beq.n	8010c80 <__kernel_rem_pio2+0x5a0>
 8010bc4:	9b02      	ldr	r3, [sp, #8]
 8010bc6:	f003 0007 	and.w	r0, r3, #7
 8010bca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010bce:	ecbd 8b02 	vpop	{d8}
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d1f3      	bne.n	8010bc4 <__kernel_rem_pio2+0x4e4>
 8010bdc:	9b05      	ldr	r3, [sp, #20]
 8010bde:	9500      	str	r5, [sp, #0]
 8010be0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010be4:	eb0d 0403 	add.w	r4, sp, r3
 8010be8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010bec:	46a2      	mov	sl, r4
 8010bee:	9b00      	ldr	r3, [sp, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f1aa 0a08 	sub.w	sl, sl, #8
 8010bf6:	dc69      	bgt.n	8010ccc <__kernel_rem_pio2+0x5ec>
 8010bf8:	46aa      	mov	sl, r5
 8010bfa:	f1ba 0f01 	cmp.w	sl, #1
 8010bfe:	f1a4 0408 	sub.w	r4, r4, #8
 8010c02:	f300 8083 	bgt.w	8010d0c <__kernel_rem_pio2+0x62c>
 8010c06:	9c05      	ldr	r4, [sp, #20]
 8010c08:	ab48      	add	r3, sp, #288	; 0x120
 8010c0a:	441c      	add	r4, r3
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	2100      	movs	r1, #0
 8010c10:	2d01      	cmp	r5, #1
 8010c12:	f300 809a 	bgt.w	8010d4a <__kernel_rem_pio2+0x66a>
 8010c16:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010c1a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010c1e:	f1bb 0f00 	cmp.w	fp, #0
 8010c22:	f040 8098 	bne.w	8010d56 <__kernel_rem_pio2+0x676>
 8010c26:	9b04      	ldr	r3, [sp, #16]
 8010c28:	e9c3 7800 	strd	r7, r8, [r3]
 8010c2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010c30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010c34:	e7c6      	b.n	8010bc4 <__kernel_rem_pio2+0x4e4>
 8010c36:	9e05      	ldr	r6, [sp, #20]
 8010c38:	ab48      	add	r3, sp, #288	; 0x120
 8010c3a:	441e      	add	r6, r3
 8010c3c:	462c      	mov	r4, r5
 8010c3e:	2000      	movs	r0, #0
 8010c40:	2100      	movs	r1, #0
 8010c42:	2c00      	cmp	r4, #0
 8010c44:	da33      	bge.n	8010cae <__kernel_rem_pio2+0x5ce>
 8010c46:	f1bb 0f00 	cmp.w	fp, #0
 8010c4a:	d036      	beq.n	8010cba <__kernel_rem_pio2+0x5da>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c52:	9c04      	ldr	r4, [sp, #16]
 8010c54:	e9c4 2300 	strd	r2, r3, [r4]
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010c60:	f7ef fb22 	bl	80002a8 <__aeabi_dsub>
 8010c64:	ae4a      	add	r6, sp, #296	; 0x128
 8010c66:	2401      	movs	r4, #1
 8010c68:	42a5      	cmp	r5, r4
 8010c6a:	da29      	bge.n	8010cc0 <__kernel_rem_pio2+0x5e0>
 8010c6c:	f1bb 0f00 	cmp.w	fp, #0
 8010c70:	d002      	beq.n	8010c78 <__kernel_rem_pio2+0x598>
 8010c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c76:	4619      	mov	r1, r3
 8010c78:	9b04      	ldr	r3, [sp, #16]
 8010c7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010c7e:	e7a1      	b.n	8010bc4 <__kernel_rem_pio2+0x4e4>
 8010c80:	9c05      	ldr	r4, [sp, #20]
 8010c82:	ab48      	add	r3, sp, #288	; 0x120
 8010c84:	441c      	add	r4, r3
 8010c86:	2000      	movs	r0, #0
 8010c88:	2100      	movs	r1, #0
 8010c8a:	2d00      	cmp	r5, #0
 8010c8c:	da09      	bge.n	8010ca2 <__kernel_rem_pio2+0x5c2>
 8010c8e:	f1bb 0f00 	cmp.w	fp, #0
 8010c92:	d002      	beq.n	8010c9a <__kernel_rem_pio2+0x5ba>
 8010c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c98:	4619      	mov	r1, r3
 8010c9a:	9b04      	ldr	r3, [sp, #16]
 8010c9c:	e9c3 0100 	strd	r0, r1, [r3]
 8010ca0:	e790      	b.n	8010bc4 <__kernel_rem_pio2+0x4e4>
 8010ca2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ca6:	f7ef fb01 	bl	80002ac <__adddf3>
 8010caa:	3d01      	subs	r5, #1
 8010cac:	e7ed      	b.n	8010c8a <__kernel_rem_pio2+0x5aa>
 8010cae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010cb2:	f7ef fafb 	bl	80002ac <__adddf3>
 8010cb6:	3c01      	subs	r4, #1
 8010cb8:	e7c3      	b.n	8010c42 <__kernel_rem_pio2+0x562>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	e7c8      	b.n	8010c52 <__kernel_rem_pio2+0x572>
 8010cc0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010cc4:	f7ef faf2 	bl	80002ac <__adddf3>
 8010cc8:	3401      	adds	r4, #1
 8010cca:	e7cd      	b.n	8010c68 <__kernel_rem_pio2+0x588>
 8010ccc:	e9da 8900 	ldrd	r8, r9, [sl]
 8010cd0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010cd4:	9b00      	ldr	r3, [sp, #0]
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	9300      	str	r3, [sp, #0]
 8010cda:	4632      	mov	r2, r6
 8010cdc:	463b      	mov	r3, r7
 8010cde:	4640      	mov	r0, r8
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	f7ef fae3 	bl	80002ac <__adddf3>
 8010ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010cea:	4602      	mov	r2, r0
 8010cec:	460b      	mov	r3, r1
 8010cee:	4640      	mov	r0, r8
 8010cf0:	4649      	mov	r1, r9
 8010cf2:	f7ef fad9 	bl	80002a8 <__aeabi_dsub>
 8010cf6:	4632      	mov	r2, r6
 8010cf8:	463b      	mov	r3, r7
 8010cfa:	f7ef fad7 	bl	80002ac <__adddf3>
 8010cfe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010d02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010d06:	ed8a 7b00 	vstr	d7, [sl]
 8010d0a:	e770      	b.n	8010bee <__kernel_rem_pio2+0x50e>
 8010d0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010d10:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010d14:	4640      	mov	r0, r8
 8010d16:	4632      	mov	r2, r6
 8010d18:	463b      	mov	r3, r7
 8010d1a:	4649      	mov	r1, r9
 8010d1c:	f7ef fac6 	bl	80002ac <__adddf3>
 8010d20:	e9cd 0100 	strd	r0, r1, [sp]
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4649      	mov	r1, r9
 8010d2c:	f7ef fabc 	bl	80002a8 <__aeabi_dsub>
 8010d30:	4632      	mov	r2, r6
 8010d32:	463b      	mov	r3, r7
 8010d34:	f7ef faba 	bl	80002ac <__adddf3>
 8010d38:	ed9d 7b00 	vldr	d7, [sp]
 8010d3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d40:	ed84 7b00 	vstr	d7, [r4]
 8010d44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d48:	e757      	b.n	8010bfa <__kernel_rem_pio2+0x51a>
 8010d4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010d4e:	f7ef faad 	bl	80002ac <__adddf3>
 8010d52:	3d01      	subs	r5, #1
 8010d54:	e75c      	b.n	8010c10 <__kernel_rem_pio2+0x530>
 8010d56:	9b04      	ldr	r3, [sp, #16]
 8010d58:	9a04      	ldr	r2, [sp, #16]
 8010d5a:	601f      	str	r7, [r3, #0]
 8010d5c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010d60:	605c      	str	r4, [r3, #4]
 8010d62:	609d      	str	r5, [r3, #8]
 8010d64:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010d68:	60d3      	str	r3, [r2, #12]
 8010d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d6e:	6110      	str	r0, [r2, #16]
 8010d70:	6153      	str	r3, [r2, #20]
 8010d72:	e727      	b.n	8010bc4 <__kernel_rem_pio2+0x4e4>
 8010d74:	41700000 	.word	0x41700000
 8010d78:	3e700000 	.word	0x3e700000
 8010d7c:	00000000 	.word	0x00000000

08010d80 <scalbn>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	ec55 4b10 	vmov	r4, r5, d0
 8010d86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	462b      	mov	r3, r5
 8010d8e:	b999      	cbnz	r1, 8010db8 <scalbn+0x38>
 8010d90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d94:	4323      	orrs	r3, r4
 8010d96:	d03f      	beq.n	8010e18 <scalbn+0x98>
 8010d98:	4b35      	ldr	r3, [pc, #212]	; (8010e70 <scalbn+0xf0>)
 8010d9a:	4629      	mov	r1, r5
 8010d9c:	ee10 0a10 	vmov	r0, s0
 8010da0:	2200      	movs	r2, #0
 8010da2:	f7ef fc39 	bl	8000618 <__aeabi_dmul>
 8010da6:	4b33      	ldr	r3, [pc, #204]	; (8010e74 <scalbn+0xf4>)
 8010da8:	429e      	cmp	r6, r3
 8010daa:	4604      	mov	r4, r0
 8010dac:	460d      	mov	r5, r1
 8010dae:	da10      	bge.n	8010dd2 <scalbn+0x52>
 8010db0:	a327      	add	r3, pc, #156	; (adr r3, 8010e50 <scalbn+0xd0>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	e01f      	b.n	8010df8 <scalbn+0x78>
 8010db8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010dbc:	4291      	cmp	r1, r2
 8010dbe:	d10c      	bne.n	8010dda <scalbn+0x5a>
 8010dc0:	ee10 2a10 	vmov	r2, s0
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	f7ef fa70 	bl	80002ac <__adddf3>
 8010dcc:	4604      	mov	r4, r0
 8010dce:	460d      	mov	r5, r1
 8010dd0:	e022      	b.n	8010e18 <scalbn+0x98>
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010dd8:	3936      	subs	r1, #54	; 0x36
 8010dda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010dde:	4296      	cmp	r6, r2
 8010de0:	dd0d      	ble.n	8010dfe <scalbn+0x7e>
 8010de2:	2d00      	cmp	r5, #0
 8010de4:	a11c      	add	r1, pc, #112	; (adr r1, 8010e58 <scalbn+0xd8>)
 8010de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dea:	da02      	bge.n	8010df2 <scalbn+0x72>
 8010dec:	a11c      	add	r1, pc, #112	; (adr r1, 8010e60 <scalbn+0xe0>)
 8010dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010df2:	a319      	add	r3, pc, #100	; (adr r3, 8010e58 <scalbn+0xd8>)
 8010df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df8:	f7ef fc0e 	bl	8000618 <__aeabi_dmul>
 8010dfc:	e7e6      	b.n	8010dcc <scalbn+0x4c>
 8010dfe:	1872      	adds	r2, r6, r1
 8010e00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010e04:	428a      	cmp	r2, r1
 8010e06:	dcec      	bgt.n	8010de2 <scalbn+0x62>
 8010e08:	2a00      	cmp	r2, #0
 8010e0a:	dd08      	ble.n	8010e1e <scalbn+0x9e>
 8010e0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010e18:	ec45 4b10 	vmov	d0, r4, r5
 8010e1c:	bd70      	pop	{r4, r5, r6, pc}
 8010e1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010e22:	da08      	bge.n	8010e36 <scalbn+0xb6>
 8010e24:	2d00      	cmp	r5, #0
 8010e26:	a10a      	add	r1, pc, #40	; (adr r1, 8010e50 <scalbn+0xd0>)
 8010e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e2c:	dac0      	bge.n	8010db0 <scalbn+0x30>
 8010e2e:	a10e      	add	r1, pc, #56	; (adr r1, 8010e68 <scalbn+0xe8>)
 8010e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e34:	e7bc      	b.n	8010db0 <scalbn+0x30>
 8010e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e3a:	3236      	adds	r2, #54	; 0x36
 8010e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010e44:	4620      	mov	r0, r4
 8010e46:	4b0c      	ldr	r3, [pc, #48]	; (8010e78 <scalbn+0xf8>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	e7d5      	b.n	8010df8 <scalbn+0x78>
 8010e4c:	f3af 8000 	nop.w
 8010e50:	c2f8f359 	.word	0xc2f8f359
 8010e54:	01a56e1f 	.word	0x01a56e1f
 8010e58:	8800759c 	.word	0x8800759c
 8010e5c:	7e37e43c 	.word	0x7e37e43c
 8010e60:	8800759c 	.word	0x8800759c
 8010e64:	fe37e43c 	.word	0xfe37e43c
 8010e68:	c2f8f359 	.word	0xc2f8f359
 8010e6c:	81a56e1f 	.word	0x81a56e1f
 8010e70:	43500000 	.word	0x43500000
 8010e74:	ffff3cb0 	.word	0xffff3cb0
 8010e78:	3c900000 	.word	0x3c900000

08010e7c <_init>:
 8010e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7e:	bf00      	nop
 8010e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e82:	bc08      	pop	{r3}
 8010e84:	469e      	mov	lr, r3
 8010e86:	4770      	bx	lr

08010e88 <_fini>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	bf00      	nop
 8010e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8e:	bc08      	pop	{r3}
 8010e90:	469e      	mov	lr, r3
 8010e92:	4770      	bx	lr
