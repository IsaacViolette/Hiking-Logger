
Display_NewBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002514  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da8  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003448  08003448  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003448  08003448  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003448  08003448  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003448  08003448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08003464  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08003464  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bca  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dea  00000000  00000000  00029c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cb  00000000  00000000  0002c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198ee  00000000  00000000  0002cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7bd  00000000  00000000  00046559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d48f  00000000  00000000  00052d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028d0  00000000  00000000  000f01a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f2a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002688 	.word	0x08002688

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08002688 	.word	0x08002688

080001cc <I2C_Start>:
//    -- Automatically generate a STOP condition after all bytes have been transmitted 
// Direction = 0: Master requests a write transfer
// Direction = 1: Master requests a read transfer
//=============================================================================== 

int8_t I2C_Start(I2C_TypeDef * I2Cx, uint32_t DevAddress, uint8_t Size, uint8_t Direction) {	
 80001cc:	b480      	push	{r7}
 80001ce:	b087      	sub	sp, #28
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	4611      	mov	r1, r2
 80001d8:	461a      	mov	r2, r3
 80001da:	460b      	mov	r3, r1
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	4613      	mov	r3, r2
 80001e0:	71bb      	strb	r3, [r7, #6]
	
	// Direction = 0: Master requests a write transfer
	// Direction = 1: Master requests a read transfer
	
	uint32_t tmpreg = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]
	
	// This bit is set by software, and cleared by hardware after the Start followed by the address
	// sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0.
	tmpreg = I2Cx->CR2;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	617b      	str	r3, [r7, #20]
	
	tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80001ec:	697a      	ldr	r2, [r7, #20]
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <I2C_Start+0x74>)
 80001f0:	4013      	ands	r3, r2
 80001f2:	617b      	str	r3, [r7, #20]
	
	if (Direction == READ_FROM_SLAVE)
 80001f4:	79bb      	ldrb	r3, [r7, #6]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d104      	bne.n	8000204 <I2C_Start+0x38>
		tmpreg |= I2C_CR2_RD_WRN;  // Read from Slave
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000200:	617b      	str	r3, [r7, #20]
 8000202:	e003      	b.n	800020c <I2C_Start+0x40>
	else
		tmpreg &= ~I2C_CR2_RD_WRN; // Write to Slave
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800020a:	617b      	str	r3, [r7, #20]
		
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES));
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	041b      	lsls	r3, r3, #16
 8000216:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800021a:	4313      	orrs	r3, r2
 800021c:	697a      	ldr	r2, [r7, #20]
 800021e:	4313      	orrs	r3, r2
 8000220:	617b      	str	r3, [r7, #20]
	
	tmpreg |= I2C_CR2_START;
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000228:	617b      	str	r3, [r7, #20]
	// RELOAD
	// 0: The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow).
	// 1: The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded).
	// tmpreg |= I2C_CR2_RELOAD;
	
	I2Cx->CR2 = tmpreg; 
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	605a      	str	r2, [r3, #4]
//	}
//	
//	if ( (I2Cx->ISR & I2C_ISR_NACKF) == I2C_ISR_NACKF )
//		return -1;  // Failed
	
   	return 0;  // Success
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	371c      	adds	r7, #28
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	fc009800 	.word	0xfc009800

08000244 <I2C_Stop>:

//===============================================================================
//                           I2C Stop
//=============================================================================== 
void I2C_Stop(I2C_TypeDef * I2Cx){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	// Master: Generate STOP bit after the current byte has been transferred 
	I2Cx->CR2 |= I2C_CR2_STOP;								
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	605a      	str	r2, [r3, #4]
	// Wait until STOPF flag is reset
	while( (I2Cx->ISR & I2C_ISR_STOPF) == 0 ); 
 8000258:	bf00      	nop
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0320 	and.w	r3, r3, #32
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <I2C_Stop+0x16>
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <I2C_WaitLineIdle>:

//===============================================================================
//                           Wait for the bus is ready
//=============================================================================== 
void I2C_WaitLineIdle(I2C_TypeDef * I2Cx){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	// Wait until I2C bus is ready
	while( (I2Cx->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY );	// If busy, wait
 800027c:	bf00      	nop
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800028a:	d0f8      	beq.n	800027e <I2C_WaitLineIdle+0xa>
}
 800028c:	bf00      	nop
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr

0800029a <I2C_SendData>:

//===============================================================================
//                           I2C Send Data
//=============================================================================== 
int8_t I2C_SendData(I2C_TypeDef * I2Cx, uint8_t DeviceAddress, uint8_t *pData, uint8_t Size) {
 800029a:	b580      	push	{r7, lr}
 800029c:	b086      	sub	sp, #24
 800029e:	af00      	add	r7, sp, #0
 80002a0:	60f8      	str	r0, [r7, #12]
 80002a2:	607a      	str	r2, [r7, #4]
 80002a4:	461a      	mov	r2, r3
 80002a6:	460b      	mov	r3, r1
 80002a8:	72fb      	strb	r3, [r7, #11]
 80002aa:	4613      	mov	r3, r2
 80002ac:	72bb      	strb	r3, [r7, #10]
	int i;
	
	if (Size <= 0 || pData == NULL) 
 80002ae:	7abb      	ldrb	r3, [r7, #10]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d002      	beq.n	80002ba <I2C_SendData+0x20>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d102      	bne.n	80002c0 <I2C_SendData+0x26>
		return -1;
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002be:	e040      	b.n	8000342 <I2C_SendData+0xa8>
	
	I2C_WaitLineIdle(I2Cx);
 80002c0:	68f8      	ldr	r0, [r7, #12]
 80002c2:	f7ff ffd7 	bl	8000274 <I2C_WaitLineIdle>
	
	if (I2C_Start(I2Cx, DeviceAddress, Size, WRITE_TO_SLAVE) < 0 )
 80002c6:	7af9      	ldrb	r1, [r7, #11]
 80002c8:	7aba      	ldrb	r2, [r7, #10]
 80002ca:	2300      	movs	r3, #0
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f7ff ff7d 	bl	80001cc <I2C_Start>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	da02      	bge.n	80002de <I2C_SendData+0x44>
		return -1;
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002dc:	e031      	b.n	8000342 <I2C_SendData+0xa8>
	// Send Data
	// Write the first data in DR register
	// while((I2Cx->ISR & I2C_ISR_TXE) == 0);
	// I2Cx->TXDR = pData[0] & I2C_TXDR_TXDATA;  

	for (i = 0; i < Size; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e010      	b.n	8000306 <I2C_SendData+0x6c>
		// TXE is set by hardware when the I2C_TXDR register is empty. It is cleared when the next
		// data to be sent is written in the I2C_TXDR register.
		while( (I2Cx->ISR & I2C_ISR_TXE) == 0 ); 
 80002e4:	bf00      	nop
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <I2C_SendData+0x4c>
		// TXIS bit is set by hardware when the I2C_TXDR register is empty and the data to be
		// transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be
		// sent is written in the I2C_TXDR register.
		// The TXIS flag is not set when a NACK is received.
		// while((I2Cx->ISR & I2C_ISR_TXIS) == 0 );
		I2Cx->TXDR = pData[i] & I2C_TXDR_TXDATA;  // TXE is cleared by writing to the TXDR register.
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	4413      	add	r3, r2
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < Size; i++) {
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	7abb      	ldrb	r3, [r7, #10]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	429a      	cmp	r2, r3
 800030c:	dbea      	blt.n	80002e4 <I2C_SendData+0x4a>
	}
	
	// Wait until TC flag is set 
	while((I2Cx->ISR & I2C_ISR_TC) == 0 && (I2Cx->ISR & I2C_ISR_NACKF) == 0);
 800030e:	bf00      	nop
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <I2C_SendData+0x8e>
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0310 	and.w	r3, r3, #16
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f3      	beq.n	8000310 <I2C_SendData+0x76>
	
	if ( (I2Cx->ISR & I2C_ISR_NACKF) != 0 )
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0310 	and.w	r3, r3, #16
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <I2C_SendData+0xa0>
		return -1;
 8000334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000338:	e003      	b.n	8000342 <I2C_SendData+0xa8>

	I2C_Stop(I2Cx);
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f7ff ff82 	bl	8000244 <I2C_Stop>
	return 0;
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <I2C1_EV_IRQHandler>:
	
	return 0;
}


void I2C1_EV_IRQHandler(void){
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
	// I2C1->ICR |= 
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
	...

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f000 fccb 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f833 	bl	80003dc <SystemClock_Config>
  //I2C_GPIO_init();
   //I2C_Initialization(I2C1);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000376:	f000 f8c1 	bl	80004fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800037a:	f000 f87f 	bl	800047c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char message[64] = "ABCDEFGHIJK";
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <main+0x68>)
 8000380:	463b      	mov	r3, r7
 8000382:	6810      	ldr	r0, [r2, #0]
 8000384:	6851      	ldr	r1, [r2, #4]
 8000386:	6892      	ldr	r2, [r2, #8]
 8000388:	c307      	stmia	r3!, {r0, r1, r2}
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2234      	movs	r2, #52	; 0x34
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f002 f94c 	bl	8002630 <memset>


       //ssd1306_TestAll();
    	ssd1306_Init();
 8000398:	f000 f9ba 	bl	8000710 <ssd1306_Init>
    	ssd1306_Fill(White);
 800039c:	2001      	movs	r0, #1
 800039e:	f000 fa2d 	bl	80007fc <ssd1306_Fill>
    	ssd1306_SetCursor(2,0);
 80003a2:	2100      	movs	r1, #0
 80003a4:	2002      	movs	r0, #2
 80003a6:	f000 fb83 	bl	8000ab0 <ssd1306_SetCursor>
    	ssd1306_WriteString(message, Font_11x18, Black);
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <main+0x6c>)
 80003ac:	4638      	mov	r0, r7
 80003ae:	2300      	movs	r3, #0
 80003b0:	ca06      	ldmia	r2, {r1, r2}
 80003b2:	f000 fb57 	bl	8000a64 <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 80003b6:	f000 fa45 	bl	8000844 <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <main+0x70>)
 80003c0:	f000 ffb2 	bl	8001328 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(500);
 80003c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c8:	f000 fd1a 	bl	8000e00 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 80003cc:	e7f5      	b.n	80003ba <main+0x52>
 80003ce:	bf00      	nop
 80003d0:	080026a0 	.word	0x080026a0
 80003d4:	20000000 	.word	0x20000000
 80003d8:	48000400 	.word	0x48000400

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b096      	sub	sp, #88	; 0x58
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	2244      	movs	r2, #68	; 0x44
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 f920 	bl	8002630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000402:	f001 f8eb 	bl	80015dc <HAL_PWREx_ControlVoltageScaling>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800040c:	f000 f912 	bl	8000634 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000410:	2310      	movs	r3, #16
 8000412:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800041c:	2360      	movs	r3, #96	; 0x60
 800041e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000424:	2301      	movs	r3, #1
 8000426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000428:	2301      	movs	r3, #1
 800042a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800042c:	2328      	movs	r3, #40	; 0x28
 800042e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000430:	2302      	movs	r3, #2
 8000432:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4618      	mov	r0, r3
 800043e:	f001 f923 	bl	8001688 <HAL_RCC_OscConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000448:	f000 f8f4 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	230f      	movs	r3, #15
 800044e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000450:	2303      	movs	r3, #3
 8000452:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000460:	463b      	mov	r3, r7
 8000462:	2104      	movs	r1, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fd71 	bl	8001f4c <HAL_RCC_ClockConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000470:	f000 f8e0 	bl	8000634 <Error_Handler>
  }
}
 8000474:	bf00      	nop
 8000476:	3758      	adds	r7, #88	; 0x58
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <MX_I2C1_Init+0x78>)
 8000484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000488:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <MX_I2C1_Init+0x7c>)
 800048a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000494:	2201      	movs	r2, #1
 8000496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004b8:	f000 ff50 	bl	800135c <HAL_I2C_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004c2:	f000 f8b7 	bl	8000634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004ca:	f000 ffe2 	bl	8001492 <HAL_I2CEx_ConfigAnalogFilter>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d4:	f000 f8ae 	bl	8000634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d8:	2100      	movs	r1, #0
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004dc:	f001 f824 	bl	8001528 <HAL_I2CEx_ConfigDigitalFilter>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e6:	f000 f8a5 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000030 	.word	0x20000030
 80004f4:	40005400 	.word	0x40005400
 80004f8:	10909cec 	.word	0x10909cec

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b45      	ldr	r3, [pc, #276]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a44      	ldr	r2, [pc, #272]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b42      	ldr	r3, [pc, #264]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <MX_GPIO_Init+0x12c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a38      	ldr	r2, [pc, #224]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b36      	ldr	r3, [pc, #216]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b33      	ldr	r3, [pc, #204]	; (8000628 <MX_GPIO_Init+0x12c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a32      	ldr	r2, [pc, #200]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b30      	ldr	r3, [pc, #192]	; (8000628 <MX_GPIO_Init+0x12c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	21b0      	movs	r1, #176	; 0xb0
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f000 febd 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <MX_GPIO_Init+0x130>)
 8000586:	f000 feb7 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000590:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4823      	ldr	r0, [pc, #140]	; (8000630 <MX_GPIO_Init+0x134>)
 80005a2:	f000 fd37 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a6:	230c      	movs	r3, #12
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005b6:	2307      	movs	r3, #7
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fd26 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80005c8:	23b0      	movs	r3, #176	; 0xb0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f000 fd17 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fd0a 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_GPIO_Init+0x130>)
 800061a:	f000 fcfb 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400
 8000630:	48000800 	.word	0x48000800

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>

0800063e <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "I2C.h"

void ssd1306_Reset(void) {
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
		uint8_t buffer[2];
		buffer[0] = 0x00;
 8000656:	2300      	movs	r3, #0
 8000658:	733b      	strb	r3, [r7, #12]
		buffer[1] = byte;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	737b      	strb	r3, [r7, #13]
		//I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	2302      	movs	r3, #2
 8000664:	2178      	movs	r1, #120	; 0x78
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <ssd1306_WriteCommand+0x28>)
 8000668:	f7ff fe17 	bl	800029a <I2C_SendData>
		//I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, &byte, 1);
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40005400 	.word	0x40005400

08000678 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000678:	b580      	push	{r7, lr}
 800067a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800067e:	af00      	add	r7, sp, #0
 8000680:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000684:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000688:	6018      	str	r0, [r3, #0]
 800068a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800068e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000692:	6019      	str	r1, [r3, #0]
		int i;
		uint8_t buffer2[SSD1306_BUFFER_SIZE+1];
		buffer2[0] = 0x40;
 8000694:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000698:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800069c:	2240      	movs	r2, #64	; 0x40
 800069e:	701a      	strb	r2, [r3, #0]
		for(i=0; i<buff_size;  i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80006a6:	e015      	b.n	80006d4 <ssd1306_WriteData+0x5c>
			buffer2[i+1] = buffer[i];
 80006a8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80006ac:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80006b0:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80006bc:	3301      	adds	r3, #1
 80006be:	7811      	ldrb	r1, [r2, #0]
 80006c0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80006c4:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 80006c8:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<buff_size;  i++)
 80006ca:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80006ce:	3301      	adds	r3, #1
 80006d0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80006d4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80006d8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80006dc:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 80006e0:	6812      	ldr	r2, [r2, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d8e0      	bhi.n	80006a8 <ssd1306_WriteData+0x30>
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer2, buff_size+1);
 80006e6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80006ea:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	2178      	movs	r1, #120	; 0x78
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <ssd1306_WriteData+0x94>)
 80006fe:	f7ff fdcc 	bl	800029a <I2C_SendData>
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8000702:	bf00      	nop
 8000704:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40005400 	.word	0x40005400

08000710 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
		volatile uint32_t i;
	
    // Reset OLED
    ssd1306_Reset();
 8000716:	f7ff ff92 	bl	800063e <ssd1306_Reset>

    // Wait for the screen to boot
    //delay(100);
	  for(i=0; i<100000; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e002      	b.n	8000726 <ssd1306_Init+0x16>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3301      	adds	r3, #1
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a32      	ldr	r2, [pc, #200]	; (80007f4 <ssd1306_Init+0xe4>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d9f8      	bls.n	8000720 <ssd1306_Init+0x10>
			;

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f9ea 	bl	8000b08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000734:	2020      	movs	r0, #32
 8000736:	f7ff ff89 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ff86 	bl	800064c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000740:	20b0      	movs	r0, #176	; 0xb0
 8000742:	f7ff ff83 	bl	800064c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000746:	20c8      	movs	r0, #200	; 0xc8
 8000748:	f7ff ff80 	bl	800064c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff7d 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000752:	2010      	movs	r0, #16
 8000754:	f7ff ff7a 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000758:	2040      	movs	r0, #64	; 0x40
 800075a:	f7ff ff77 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800075e:	20ff      	movs	r0, #255	; 0xff
 8000760:	f000 f9be 	bl	8000ae0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000764:	20a1      	movs	r0, #161	; 0xa1
 8000766:	f7ff ff71 	bl	800064c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800076a:	20a6      	movs	r0, #166	; 0xa6
 800076c:	f7ff ff6e 	bl	800064c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000770:	20a8      	movs	r0, #168	; 0xa8
 8000772:	f7ff ff6b 	bl	800064c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000776:	203f      	movs	r0, #63	; 0x3f
 8000778:	f7ff ff68 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800077c:	20a4      	movs	r0, #164	; 0xa4
 800077e:	f7ff ff65 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000782:	20d3      	movs	r0, #211	; 0xd3
 8000784:	f7ff ff62 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ff5f 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800078e:	20d5      	movs	r0, #213	; 0xd5
 8000790:	f7ff ff5c 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000794:	20f0      	movs	r0, #240	; 0xf0
 8000796:	f7ff ff59 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800079a:	20d9      	movs	r0, #217	; 0xd9
 800079c:	f7ff ff56 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80007a0:	2022      	movs	r0, #34	; 0x22
 80007a2:	f7ff ff53 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80007a6:	20da      	movs	r0, #218	; 0xda
 80007a8:	f7ff ff50 	bl	800064c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80007ac:	2012      	movs	r0, #18
 80007ae:	f7ff ff4d 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80007b2:	20db      	movs	r0, #219	; 0xdb
 80007b4:	f7ff ff4a 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80007b8:	2020      	movs	r0, #32
 80007ba:	f7ff ff47 	bl	800064c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80007be:	208d      	movs	r0, #141	; 0x8d
 80007c0:	f7ff ff44 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80007c4:	2014      	movs	r0, #20
 80007c6:	f7ff ff41 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 f99c 	bl	8000b08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f813 	bl	80007fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80007d6:	f000 f835 	bl	8000844 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <ssd1306_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <ssd1306_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <ssd1306_Init+0xe8>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	715a      	strb	r2, [r3, #5]
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0001869f 	.word	0x0001869f
 80007f8:	20000484 	.word	0x20000484

080007fc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e00d      	b.n	8000828 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <ssd1306_Fill+0x1a>
 8000812:	2100      	movs	r1, #0
 8000814:	e000      	b.n	8000818 <ssd1306_Fill+0x1c>
 8000816:	21ff      	movs	r1, #255	; 0xff
 8000818:	4a09      	ldr	r2, [pc, #36]	; (8000840 <ssd1306_Fill+0x44>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	460a      	mov	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800082e:	d3ed      	bcc.n	800080c <ssd1306_Fill+0x10>
    }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000084 	.word	0x20000084

08000844 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
		uint8_t i;
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
 800084e:	e016      	b.n	800087e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	3b50      	subs	r3, #80	; 0x50
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fef8 	bl	800064c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fef5 	bl	800064c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000862:	2010      	movs	r0, #16
 8000864:	f7ff fef2 	bl	800064c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <ssd1306_UpdateScreen+0x4c>)
 800086e:	4413      	add	r3, r2
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff00 	bl	8000678 <ssd1306_WriteData>
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	3301      	adds	r3, #1
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b07      	cmp	r3, #7
 8000882:	d9e5      	bls.n	8000850 <ssd1306_UpdateScreen+0xc>
    }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000084 	.word	0x20000084

08000894 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	460b      	mov	r3, r1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	4613      	mov	r3, r2
 80008a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db48      	blt.n	8000940 <ssd1306_DrawPixel+0xac>
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	2b3f      	cmp	r3, #63	; 0x3f
 80008b2:	d845      	bhi.n	8000940 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <ssd1306_DrawPixel+0xb8>)
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d006      	beq.n	80008ca <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80008ca:	797b      	ldrb	r3, [r7, #5]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d11a      	bne.n	8000906 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	4603      	mov	r3, r0
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4413      	add	r3, r2
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <ssd1306_DrawPixel+0xbc>)
 80008e0:	5cd3      	ldrb	r3, [r2, r3]
 80008e2:	b25a      	sxtb	r2, r3
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b259      	sxtb	r1, r3
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	4603      	mov	r3, r0
 80008fa:	01db      	lsls	r3, r3, #7
 80008fc:	4413      	add	r3, r2
 80008fe:	b2c9      	uxtb	r1, r1
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <ssd1306_DrawPixel+0xbc>)
 8000902:	54d1      	strb	r1, [r2, r3]
 8000904:	e01d      	b.n	8000942 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	b2d8      	uxtb	r0, r3
 800090e:	4603      	mov	r3, r0
 8000910:	01db      	lsls	r3, r3, #7
 8000912:	4413      	add	r3, r2
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <ssd1306_DrawPixel+0xbc>)
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	b25a      	sxtb	r2, r3
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	b25b      	sxtb	r3, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	b25b      	sxtb	r3, r3
 800092c:	4013      	ands	r3, r2
 800092e:	b259      	sxtb	r1, r3
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	4603      	mov	r3, r0
 8000934:	01db      	lsls	r3, r3, #7
 8000936:	4413      	add	r3, r2
 8000938:	b2c9      	uxtb	r1, r1
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <ssd1306_DrawPixel+0xbc>)
 800093c:	54d1      	strb	r1, [r2, r3]
 800093e:	e000      	b.n	8000942 <ssd1306_DrawPixel+0xae>
        return;
 8000940:	bf00      	nop
    }
}
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20000484 	.word	0x20000484
 8000950:	20000084 	.word	0x20000084

08000954 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	4604      	mov	r4, r0
 800095c:	1d38      	adds	r0, r7, #4
 800095e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000962:	461a      	mov	r2, r3
 8000964:	4623      	mov	r3, r4
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	4613      	mov	r3, r2
 800096a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2b1f      	cmp	r3, #31
 8000970:	d902      	bls.n	8000978 <ssd1306_WriteChar+0x24>
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b7e      	cmp	r3, #126	; 0x7e
 8000976:	d901      	bls.n	800097c <ssd1306_WriteChar+0x28>
        return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e06d      	b.n	8000a58 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	793b      	ldrb	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	2b80      	cmp	r3, #128	; 0x80
 8000988:	dc06      	bgt.n	8000998 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	461a      	mov	r2, r3
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000994:	2b40      	cmp	r3, #64	; 0x40
 8000996:	dd01      	ble.n	800099c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000998:	2300      	movs	r3, #0
 800099a:	e05d      	b.n	8000a58 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
 80009a0:	e04c      	b.n	8000a3c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	3b20      	subs	r3, #32
 80009a8:	7979      	ldrb	r1, [r7, #5]
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	440b      	add	r3, r1
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	e034      	b.n	8000a2c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d012      	beq.n	80009f8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4413      	add	r3, r2
 80009de:	b2d8      	uxtb	r0, r3
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 80009e2:	885b      	ldrh	r3, [r3, #2]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	7bba      	ldrb	r2, [r7, #14]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f7ff ff4f 	bl	8000894 <ssd1306_DrawPixel>
 80009f6:	e016      	b.n	8000a26 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4413      	add	r3, r2
 8000a04:	b2d8      	uxtb	r0, r3
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4413      	add	r3, r2
 8000a12:	b2d9      	uxtb	r1, r3
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf0c      	ite	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	f7ff ff37 	bl	8000894 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	793b      	ldrb	r3, [r7, #4]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d3c5      	bcc.n	80009c2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	797b      	ldrb	r3, [r7, #5]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d3ad      	bcc.n	80009a2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 8000a48:	881a      	ldrh	r2, [r3, #0]
 8000a4a:	793b      	ldrb	r3, [r7, #4]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <ssd1306_WriteChar+0x10c>)
 8000a54:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3724      	adds	r7, #36	; 0x24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	20000484 	.word	0x20000484

08000a64 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	1d38      	adds	r0, r7, #4
 8000a6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a72:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000a74:	e012      	b.n	8000a9c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	7818      	ldrb	r0, [r3, #0]
 8000a7a:	78fb      	ldrb	r3, [r7, #3]
 8000a7c:	1d3a      	adds	r2, r7, #4
 8000a7e:	ca06      	ldmia	r2, {r1, r2}
 8000a80:	f7ff ff68 	bl	8000954 <ssd1306_WriteChar>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d002      	beq.n	8000a96 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	e008      	b.n	8000aa8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1e8      	bne.n	8000a76 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <ssd1306_SetCursor+0x2c>)
 8000ac6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <ssd1306_SetCursor+0x2c>)
 8000ace:	805a      	strh	r2, [r3, #2]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000484 	.word	0x20000484

08000ae0 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000aea:	2381      	movs	r3, #129	; 0x81
 8000aec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fdab 	bl	800064c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fda7 	bl	800064c <ssd1306_WriteCommand>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d005      	beq.n	8000b24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000b18:	23af      	movs	r3, #175	; 0xaf
 8000b1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <ssd1306_SetDisplayOn+0x38>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	719a      	strb	r2, [r3, #6]
 8000b22:	e004      	b.n	8000b2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000b24:	23ae      	movs	r3, #174	; 0xae
 8000b26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <ssd1306_SetDisplayOn+0x38>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd8b 	bl	800064c <ssd1306_WriteCommand>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000484 	.word	0x20000484

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b096      	sub	sp, #88	; 0x58
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2234      	movs	r2, #52	; 0x34
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fd3f 	bl	8002630 <memset>
  if(hi2c->Instance==I2C1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <HAL_I2C_MspInit+0xa8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d137      	bne.n	8000c2c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bbc:	2340      	movs	r3, #64	; 0x40
 8000bbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fbab 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff fd2e 	bl	8000634 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0xac>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bdc:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <HAL_I2C_MspInit+0xac>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_I2C_MspInit+0xac>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bf0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bf4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fa00 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0xac>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_I2C_MspInit+0xac>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_I2C_MspInit+0xac>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f89a 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f001 fcad 	bl	8002640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fb3f 	bl	8000368 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cf8:	08003450 	.word	0x08003450
  ldr r2, =_sbss
 8000cfc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d00:	20000490 	.word	0x20000490

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_Init+0x3c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_Init+0x3c>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f000 f944 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f80f 	bl	8000d48 <HAL_InitTick>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff ff05 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_InitTick+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f941 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d809      	bhi.n	8000d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	f000 f919 	bl	8000fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_InitTick+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e004      	b.n	8000da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000010 	.word	0x20000010
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000000c 	.word	0x2000000c

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000010 	.word	0x20000010
 8000de4:	2000048c 	.word	0x2000048c

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000048c 	.word	0x2000048c

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000010 	.word	0x20000010

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff47 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5c 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb0 	bl	8000f68 <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e14e      	b.n	80012c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8140 	beq.w	80012bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 809a 	beq.w	80012bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b55      	ldr	r3, [pc, #340]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	; 0x60
 8001194:	4b52      	ldr	r3, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x1e0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a46      	ldr	r2, [pc, #280]	; (80012e8 <HAL_GPIO_Init+0x2d4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a45      	ldr	r2, [pc, #276]	; (80012ec <HAL_GPIO_Init+0x2d8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1d8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1d4>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011e8:	2307      	movs	r3, #7
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011f4:	2300      	movs	r3, #0
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001206:	4937      	ldr	r1, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f aea9 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43d9      	mvns	r1, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	400b      	ands	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e08d      	b.n	800148a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fc02 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d108      	bne.n	80013fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	e007      	b.n	800140e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800141c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69d9      	ldr	r1, [r3, #28]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b20      	cmp	r3, #32
 80014a6:	d138      	bne.n	800151a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e032      	b.n	800151c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2224      	movs	r2, #36	; 0x24
 80014c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2220      	movs	r2, #32
 800150a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800151a:	2302      	movs	r3, #2
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b20      	cmp	r3, #32
 800153c:	d139      	bne.n	80015b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001548:	2302      	movs	r3, #2
 800154a:	e033      	b.n	80015b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800157a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
  }
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40007000 	.word	0x40007000

080015dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ea:	d130      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f8:	d038      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2232      	movs	r2, #50	; 0x32
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	e002      	b.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b01      	subs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001634:	d102      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f2      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001648:	d110      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e00f      	b.n	800166e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d007      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000
 8001680:	20000008 	.word	0x20000008
 8001684:	431bde83 	.word	0x431bde83

08001688 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	f000 bc4f 	b.w	8001f3a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169c:	4b97      	ldr	r3, [pc, #604]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a6:	4b95      	ldr	r3, [pc, #596]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80e6 	beq.w	800188a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4c>
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	f040 808d 	bne.w	80017e6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 8089 	bne.w	80017e6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d4:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_RCC_OscConfig+0x66>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f000 bc26 	b.w	8001f3a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f2:	4b82      	ldr	r3, [pc, #520]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <HAL_RCC_OscConfig+0x80>
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001706:	e005      	b.n	8001714 <HAL_RCC_OscConfig+0x8c>
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001714:	4293      	cmp	r3, r2
 8001716:	d224      	bcs.n	8001762 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fda1 	bl	8002264 <RCC_SetFlashLatencyFromMSIRange>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f000 bc06 	b.w	8001f3a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172e:	4b73      	ldr	r3, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a72      	ldr	r2, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b70      	ldr	r3, [pc, #448]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	496d      	ldr	r1, [pc, #436]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4968      	ldr	r1, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e025      	b.n	80017ae <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001762:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a65      	ldr	r2, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	4960      	ldr	r1, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001780:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	495b      	ldr	r1, [pc, #364]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd60 	bl	8002264 <RCC_SetFlashLatencyFromMSIRange>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e3c5      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ae:	f000 fccd 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4950      	ldr	r1, [pc, #320]	; (8001900 <HAL_RCC_OscConfig+0x278>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fab8 	bl	8000d48 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d052      	beq.n	8001888 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	e3a9      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d032      	beq.n	8001854 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a42      	ldr	r2, [pc, #264]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fa:	f7ff faf5 	bl	8000de8 <HAL_GetTick>
 80017fe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001802:	f7ff faf1 	bl	8000de8 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e392      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a35      	ldr	r2, [pc, #212]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	4930      	ldr	r1, [pc, #192]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	492b      	ldr	r1, [pc, #172]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
 8001852:	e01a      	b.n	800188a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a28      	ldr	r2, [pc, #160]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001860:	f7ff fac2 	bl	8000de8 <HAL_GetTick>
 8001864:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001868:	f7ff fabe 	bl	8000de8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e35f      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e0>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d073      	beq.n	800197e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x220>
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d063      	beq.n	800197c <HAL_RCC_OscConfig+0x2f4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d15f      	bne.n	800197c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e33c      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x250>
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e025      	b.n	8001924 <HAL_RCC_OscConfig+0x29c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d114      	bne.n	800190c <HAL_RCC_OscConfig+0x284>
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a02      	ldr	r2, [pc, #8]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x29c>
 80018fc:	40021000 	.word	0x40021000
 8001900:	08003408 	.word	0x08003408
 8001904:	20000008 	.word	0x20000008
 8001908:	2000000c 	.word	0x2000000c
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a8e      	ldr	r2, [pc, #568]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fa5c 	bl	8000de8 <HAL_GetTick>
 8001930:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fa58 	bl	8000de8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2f9      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001946:	4b81      	ldr	r3, [pc, #516]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x2ac>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fa48 	bl	8000de8 <HAL_GetTick>
 8001958:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fa44 	bl	8000de8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e2e5      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196e:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x2d4>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d060      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d005      	beq.n	800199c <HAL_RCC_OscConfig+0x314>
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d119      	bne.n	80019ca <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x32c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e2c2      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	4962      	ldr	r1, [pc, #392]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	e040      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d023      	beq.n	8001a1a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d2:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a5d      	ldr	r2, [pc, #372]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fa03 	bl	8000de8 <HAL_GetTick>
 80019e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff f9ff 	bl	8000de8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e2a0      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b54      	ldr	r3, [pc, #336]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	494e      	ldr	r1, [pc, #312]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e018      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f9df 	bl	8000de8 <HAL_GetTick>
 8001a2a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f9db 	bl	8000de8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e27c      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a40:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8082 	beq.w	8001b5e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d05f      	beq.n	8001b22 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a68:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d037      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e254      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aaa:	f7ff f99d 	bl	8000de8 <HAL_GetTick>
 8001aae:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f999 	bl	8000de8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b11      	cmp	r3, #17
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e23a      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ef      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f023 0210 	bic.w	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	491a      	ldr	r1, [pc, #104]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f976 	bl	8000de8 <HAL_GetTick>
 8001afc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f972 	bl	8000de8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b11      	cmp	r3, #17
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e213      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ef      	beq.n	8001b00 <HAL_RCC_OscConfig+0x478>
 8001b20:	e01d      	b.n	8001b5e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff f959 	bl	8000de8 <HAL_GetTick>
 8001b36:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f955 	bl	8000de8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b11      	cmp	r3, #17
 8001b46:	d903      	bls.n	8001b50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1f6      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
 8001b4c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	4ba9      	ldr	r3, [pc, #676]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ed      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80bd 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b72:	4ba1      	ldr	r3, [pc, #644]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b9e      	ldr	r3, [pc, #632]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	4a9d      	ldr	r2, [pc, #628]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8a:	4b9b      	ldr	r3, [pc, #620]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	4b97      	ldr	r3, [pc, #604]	; (8001dfc <HAL_RCC_OscConfig+0x774>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d118      	bne.n	8001bda <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba8:	4b94      	ldr	r3, [pc, #592]	; (8001dfc <HAL_RCC_OscConfig+0x774>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a93      	ldr	r2, [pc, #588]	; (8001dfc <HAL_RCC_OscConfig+0x774>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f918 	bl	8000de8 <HAL_GetTick>
 8001bb8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7ff f914 	bl	8000de8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1b5      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x774>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001be6:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf8:	497f      	ldr	r1, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c0c:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	4a79      	ldr	r2, [pc, #484]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c1c:	4b76      	ldr	r3, [pc, #472]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a75      	ldr	r2, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2c:	e018      	b.n	8001c60 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	4a70      	ldr	r2, [pc, #448]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c40:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a6c      	ldr	r2, [pc, #432]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c50:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a68      	ldr	r2, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d016      	beq.n	8001c96 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff f8be 	bl	8000de8 <HAL_GetTick>
 8001c6c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8ba 	bl	8000de8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e159      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ed      	beq.n	8001c70 <HAL_RCC_OscConfig+0x5e8>
 8001c94:	e01d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff f8a7 	bl	8000de8 <HAL_GetTick>
 8001c9a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff f8a3 	bl	8000de8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e142      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ed      	bne.n	8001c9e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d00:	4a3d      	ldr	r2, [pc, #244]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f86d 	bl	8000de8 <HAL_GetTick>
 8001d0e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d12:	f7ff f869 	bl	8000de8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e10a      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ef      	beq.n	8001d12 <HAL_RCC_OscConfig+0x68a>
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3a:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff f850 	bl	8000de8 <HAL_GetTick>
 8001d48:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d4c:	f7ff f84c 	bl	8000de8 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0ed      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ef      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80e1 	beq.w	8001f38 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f040 80b5 	bne.w	8001eea <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d124      	bne.n	8001dde <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11b      	bne.n	8001dde <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d113      	bne.n	8001dde <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d05f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d05a      	beq.n	8001e9a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_RCC_OscConfig+0x770>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df0:	f7fe fffa 	bl	8000de8 <HAL_GetTick>
 8001df4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e00c      	b.n	8001e12 <HAL_RCC_OscConfig+0x78a>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe fff2 	bl	8000de8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e093      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e12:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0x8c0>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e38:	0212      	lsls	r2, r2, #8
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e40:	0852      	lsrs	r2, r2, #1
 8001e42:	3a01      	subs	r2, #1
 8001e44:	0552      	lsls	r2, r2, #21
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e4c:	0852      	lsrs	r2, r2, #1
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	0652      	lsls	r2, r2, #25
 8001e52:	430a      	orrs	r2, r1
 8001e54:	493b      	ldr	r1, [pc, #236]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e70:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e72:	f7fe ffb9 	bl	8000de8 <HAL_GetTick>
 8001e76:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7fe ffb5 	bl	8000de8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e056      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e98:	e04e      	b.n	8001f38 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e04d      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d146      	bne.n	8001f38 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec2:	f7fe ff91 	bl	8000de8 <HAL_GetTick>
 8001ec6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7fe ff8d 	bl	8000de8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e02e      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x842>
 8001ee8:	e026      	b.n	8001f38 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d021      	beq.n	8001f34 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff74 	bl	8000de8 <HAL_GetTick>
 8001f00:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7fe ff70 	bl	8000de8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e011      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_RCC_OscConfig+0x8bc>)
 8001f28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f2c:	f023 0303 	bic.w	r3, r3, #3
 8001f30:	60d3      	str	r3, [r2, #12]
 8001f32:	e001      	b.n	8001f38 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	f99f808c 	.word	0xf99f808c

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0e7      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b75      	ldr	r3, [pc, #468]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0207 	bic.w	r2, r3, #7
 8001f76:	4970      	ldr	r1, [pc, #448]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0cf      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4960      	ldr	r1, [pc, #384]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d04c      	beq.n	8002064 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d121      	bne.n	8002022 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0a6      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	4b54      	ldr	r3, [pc, #336]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e09a      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002002:	4b4e      	ldr	r3, [pc, #312]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e08e      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e086      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4943      	ldr	r1, [pc, #268]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002034:	f7fe fed8 	bl	8000de8 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe fed4 	bl	8000de8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e06e      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b3a      	ldr	r3, [pc, #232]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207c:	429a      	cmp	r2, r3
 800207e:	d208      	bcs.n	8002092 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	492b      	ldr	r1, [pc, #172]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d210      	bcs.n	80020c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 0207 	bic.w	r2, r3, #7
 80020a8:	4923      	ldr	r1, [pc, #140]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_ClockConfig+0x1ec>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e036      	b.n	8002130 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4918      	ldr	r1, [pc, #96]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4910      	ldr	r1, [pc, #64]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002100:	f000 f824 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	490b      	ldr	r1, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x1f4>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1fc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fe0f 	bl	8000d48 <HAL_InitTick>
 800212a:	4603      	mov	r3, r0
 800212c:	72fb      	strb	r3, [r7, #11]

  return status;
 800212e:	7afb      	ldrb	r3, [r7, #11]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
 8002140:	08003408 	.word	0x08003408
 8002144:	20000008 	.word	0x20000008
 8002148:	2000000c 	.word	0x2000000c

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x34>
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d121      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d11e      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800218c:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e005      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021a8:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10d      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_RCC_GetSysClockFreq+0x110>)
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	e004      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d134      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d003      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0xac>
 80021f0:	e005      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_RCC_GetSysClockFreq+0x110>)
 80021f4:	617b      	str	r3, [r7, #20]
      break;
 80021f6:	e005      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fa:	617b      	str	r3, [r7, #20]
      break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	fb03 f202 	mul.w	r2, r3, r2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_GetSysClockFreq+0x108>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	0e5b      	lsrs	r3, r3, #25
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	3301      	adds	r3, #1
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002244:	69bb      	ldr	r3, [r7, #24]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	08003418 	.word	0x08003418
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200

08002264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800227c:	f7ff f9a0 	bl	80015c0 <HAL_PWREx_GetVoltageRange>
 8002280:	6178      	str	r0, [r7, #20]
 8002282:	e014      	b.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800229c:	f7ff f990 	bl	80015c0 <HAL_PWREx_GetVoltageRange>
 80022a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d10b      	bne.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b80      	cmp	r3, #128	; 0x80
 80022ba:	d919      	bls.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2ba0      	cmp	r3, #160	; 0xa0
 80022c0:	d902      	bls.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c2:	2302      	movs	r3, #2
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e013      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c8:	2301      	movs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	e010      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d902      	bls.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d4:	2303      	movs	r3, #3
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	e00a      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d102      	bne.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e004      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b70      	cmp	r3, #112	; 0x70
 80022ea:	d101      	bne.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 0207 	bic.w	r2, r3, #7
 80022f8:	4909      	ldr	r1, [pc, #36]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	40022000 	.word	0x40022000

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800232c:	2300      	movs	r3, #0
 800232e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002330:	2300      	movs	r3, #0
 8002332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 809e 	beq.w	800247e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	; 0x58
 8002368:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002384:	f7fe fd30 	bl	8000de8 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238a:	e009      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe fd2c 	bl	8000de8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	74fb      	strb	r3, [r7, #19]
        break;
 800239e:	e005      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ef      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d15a      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01e      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d019      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d016      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fcec 	bl	8000de8 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	e00b      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fce8 	bl	8000de8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d902      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	74fb      	strb	r3, [r7, #19]
            break;
 800242a:	e006      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ec      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002456:	e009      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
 800245c:	e006      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246c:	7c7b      	ldrb	r3, [r7, #17]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b6e      	ldr	r3, [pc, #440]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a6d      	ldr	r2, [pc, #436]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248a:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 0203 	bic.w	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4964      	ldr	r1, [pc, #400]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ac:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 020c 	bic.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	495c      	ldr	r1, [pc, #368]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4953      	ldr	r1, [pc, #332]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f0:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	494b      	ldr	r1, [pc, #300]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4942      	ldr	r1, [pc, #264]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002534:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	493a      	ldr	r1, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002556:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	4931      	ldr	r1, [pc, #196]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002578:	4b2c      	ldr	r3, [pc, #176]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	4929      	ldr	r1, [pc, #164]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4920      	ldr	r1, [pc, #128]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	4918      	ldr	r1, [pc, #96]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025da:	d105      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	490a      	ldr	r1, [pc, #40]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002612:	d105      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800261a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002620:	7cbb      	ldrb	r3, [r7, #18]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <memset>:
 8002630:	4402      	add	r2, r0
 8002632:	4603      	mov	r3, r0
 8002634:	4293      	cmp	r3, r2
 8002636:	d100      	bne.n	800263a <memset+0xa>
 8002638:	4770      	bx	lr
 800263a:	f803 1b01 	strb.w	r1, [r3], #1
 800263e:	e7f9      	b.n	8002634 <memset+0x4>

08002640 <__libc_init_array>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	4d0d      	ldr	r5, [pc, #52]	; (8002678 <__libc_init_array+0x38>)
 8002644:	4c0d      	ldr	r4, [pc, #52]	; (800267c <__libc_init_array+0x3c>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	2600      	movs	r6, #0
 800264c:	42a6      	cmp	r6, r4
 800264e:	d109      	bne.n	8002664 <__libc_init_array+0x24>
 8002650:	4d0b      	ldr	r5, [pc, #44]	; (8002680 <__libc_init_array+0x40>)
 8002652:	4c0c      	ldr	r4, [pc, #48]	; (8002684 <__libc_init_array+0x44>)
 8002654:	f000 f818 	bl	8002688 <_init>
 8002658:	1b64      	subs	r4, r4, r5
 800265a:	10a4      	asrs	r4, r4, #2
 800265c:	2600      	movs	r6, #0
 800265e:	42a6      	cmp	r6, r4
 8002660:	d105      	bne.n	800266e <__libc_init_array+0x2e>
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	f855 3b04 	ldr.w	r3, [r5], #4
 8002668:	4798      	blx	r3
 800266a:	3601      	adds	r6, #1
 800266c:	e7ee      	b.n	800264c <__libc_init_array+0xc>
 800266e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002672:	4798      	blx	r3
 8002674:	3601      	adds	r6, #1
 8002676:	e7f2      	b.n	800265e <__libc_init_array+0x1e>
 8002678:	08003448 	.word	0x08003448
 800267c:	08003448 	.word	0x08003448
 8002680:	08003448 	.word	0x08003448
 8002684:	0800344c 	.word	0x0800344c

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
