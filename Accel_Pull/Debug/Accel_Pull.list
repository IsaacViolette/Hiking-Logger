
Accel_Pull.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a0  0800de40  0800de40  0001de40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0e0  0800f0e0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e8  0800f0e8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0ec  0800f0ec  0001f0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f0f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  200001f4  0800f2e4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000970  0800f2e4  00020970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159db  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003781  00000000  00000000  00035c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec8  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c505  00000000  00000000  0003b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b193  00000000  00000000  00057ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8ccc  00000000  00000000  00072c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006420  00000000  00000000  0011b944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00121d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de28 	.word	0x0800de28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800de28 	.word	0x0800de28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <I2C_Start>:
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	460b      	mov	r3, r1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	4613      	mov	r3, r2
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <I2C_Start+0x74>)
 8001014:	4013      	ands	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d104      	bne.n	8001028 <I2C_Start+0x38>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e003      	b.n	8001030 <I2C_Start+0x40>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800103e:	4313      	orrs	r3, r2
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4313      	orrs	r3, r2
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	2300      	movs	r3, #0
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	fc009800 	.word	0xfc009800

08001068 <I2C_Stop>:
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	bf00      	nop
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0320 	and.w	r3, r3, #32
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f9      	beq.n	800107e <I2C_Stop+0x16>
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <I2C_WaitLineIdle>:
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	bf00      	nop
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ae:	d0f8      	beq.n	80010a2 <I2C_WaitLineIdle+0xa>
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <I2C_SendData>:
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	72fb      	strb	r3, [r7, #11]
 80010ce:	4613      	mov	r3, r2
 80010d0:	72bb      	strb	r3, [r7, #10]
 80010d2:	7abb      	ldrb	r3, [r7, #10]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <I2C_SendData+0x20>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <I2C_SendData+0x26>
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e040      	b.n	8001166 <I2C_SendData+0xa8>
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff ffd7 	bl	8001098 <I2C_WaitLineIdle>
 80010ea:	7af9      	ldrb	r1, [r7, #11]
 80010ec:	7aba      	ldrb	r2, [r7, #10]
 80010ee:	2300      	movs	r3, #0
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff7d 	bl	8000ff0 <I2C_Start>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	da02      	bge.n	8001102 <I2C_SendData+0x44>
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e031      	b.n	8001166 <I2C_SendData+0xa8>
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e010      	b.n	800112a <I2C_SendData+0x6c>
 8001108:	bf00      	nop
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f9      	beq.n	800110a <I2C_SendData+0x4c>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	7abb      	ldrb	r3, [r7, #10]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbea      	blt.n	8001108 <I2C_SendData+0x4a>
 8001132:	bf00      	nop
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113c:	2b00      	cmp	r3, #0
 800113e:	d105      	bne.n	800114c <I2C_SendData+0x8e>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f3      	beq.n	8001134 <I2C_SendData+0x76>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <I2C_SendData+0xa0>
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	e003      	b.n	8001166 <I2C_SendData+0xa8>
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff ff82 	bl	8001068 <I2C_Stop>
 8001164:	2300      	movs	r3, #0
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <I2C1_EV_IRQHandler>:
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <I2C1_ER_IRQHandler>:
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <lis3dh_init>:
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2230      	movs	r2, #48	; 0x30
 80011a2:	809a      	strh	r2, [r3, #4]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	829a      	strh	r2, [r3, #20]
 80011b0:	200a      	movs	r0, #10
 80011b2:	f001 f983 	bl	80024bc <HAL_Delay>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8899      	ldrh	r1, [r3, #4]
 80011be:	2332      	movs	r3, #50	; 0x32
 80011c0:	2201      	movs	r2, #1
 80011c2:	f001 ff9d 	bl	8003100 <HAL_I2C_IsDeviceReady>
 80011c6:	4603      	mov	r3, r0
 80011c8:	75fb      	strb	r3, [r7, #23]
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <lis3dh_init+0x4a>
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	e02b      	b.n	800122c <lis3dh_init+0xa2>
 80011d4:	2201      	movs	r2, #1
 80011d6:	210f      	movs	r1, #15
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f849 	bl	8001270 <lis3dh_read>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <lis3dh_init+0x62>
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	e01f      	b.n	800122c <lis3dh_init+0xa2>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b33      	cmp	r3, #51	; 0x33
 80011f4:	d001      	beq.n	80011fa <lis3dh_init+0x70>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e018      	b.n	800122c <lis3dh_init+0xa2>
 80011fa:	2297      	movs	r2, #151	; 0x97
 80011fc:	2120      	movs	r1, #32
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f85d 	bl	80012be <lis3dh_write>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <lis3dh_init+0x88>
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	e00c      	b.n	800122c <lis3dh_init+0xa2>
 8001212:	2288      	movs	r2, #136	; 0x88
 8001214:	2123      	movs	r1, #35	; 0x23
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f851 	bl	80012be <lis3dh_write>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <lis3dh_init+0xa0>
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	e000      	b.n	800122c <lis3dh_init+0xa2>
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lis3dh_xyz_available>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	2127      	movs	r1, #39	; 0x27
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f815 	bl	8001270 <lis3dh_read>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <lis3dh_xyz_available+0x20>
 8001250:	2300      	movs	r3, #0
 8001252:	e009      	b.n	8001268 <lis3dh_xyz_available+0x34>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	bfcc      	ite	gt
 8001262:	2301      	movgt	r3, #1
 8001264:	2300      	movle	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <lis3dh_read>:
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b087      	sub	sp, #28
 8001274:	af04      	add	r7, sp, #16
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	803b      	strh	r3, [r7, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8a9b      	ldrh	r3, [r3, #20]
 8001284:	883a      	ldrh	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d901      	bls.n	800128e <lis3dh_read+0x1e>
 800128a:	2301      	movs	r3, #1
 800128c:	e013      	b.n	80012b6 <lis3dh_read+0x46>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	b299      	uxth	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	887c      	ldrh	r4, [r7, #2]
 80012a2:	2232      	movs	r2, #50	; 0x32
 80012a4:	9202      	str	r2, [sp, #8]
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	4622      	mov	r2, r4
 80012b0:	f001 fe0c 	bl	8002ecc <HAL_I2C_Mem_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}

080012be <lis3dh_write>:
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af04      	add	r7, sp, #16
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	707b      	strb	r3, [r7, #1]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8899      	ldrh	r1, [r3, #4]
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	2332      	movs	r3, #50	; 0x32
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	1c7b      	adds	r3, r7, #1
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	f001 fcdd 	bl	8002ca4 <HAL_I2C_Mem_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <lis3dh_get_xyz>:
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	8a9b      	ldrh	r3, [r3, #20]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d801      	bhi.n	8001308 <lis3dh_get_xyz+0x14>
 8001304:	2301      	movs	r3, #1
 8001306:	e04b      	b.n	80013a0 <lis3dh_get_xyz+0xac>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	889b      	ldrh	r3, [r3, #4]
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	b299      	uxth	r1, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	9202      	str	r2, [sp, #8]
 800131e:	2206      	movs	r2, #6
 8001320:	9201      	str	r2, [sp, #4]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	22a8      	movs	r2, #168	; 0xa8
 8001328:	f001 fdd0 	bl	8002ecc <HAL_I2C_Mem_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <lis3dh_get_xyz+0x5e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	e026      	b.n	80013a0 <lis3dh_get_xyz+0xac>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6992      	ldr	r2, [r2, #24]
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	3303      	adds	r3, #3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6992      	ldr	r2, [r2, #24]
 800137a:	3202      	adds	r2, #2
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	3305      	adds	r3, #5
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6992      	ldr	r2, [r2, #24]
 8001394:	3204      	adds	r2, #4
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	2300      	movs	r3, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 80013ae:	af00      	add	r7, sp, #0
	UINT bytesWrote;
	FRESULT fres;
	BYTE writeBuf1[20];

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b0:	f001 f80f 	bl	80023d2 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80013b4:	f000 f930 	bl	8001618 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013b8:	f000 fa6e 	bl	8001898 <MX_GPIO_Init>
	MX_I2C1_Init();
 80013bc:	f000 f97a 	bl	80016b4 <MX_I2C1_Init>
	MX_I2C2_Init();
 80013c0:	f000 f9b8 	bl	8001734 <MX_I2C2_Init>
	MX_SPI1_Init();
 80013c4:	f000 f9f6 	bl	80017b4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80013c8:	f000 fa32 	bl	8001830 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 80013cc:	f005 f912 	bl	80065f4 <MX_FATFS_Init>

	/* Create new file on MicroSD */
	HAL_Delay(1000);
 80013d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d4:	f001 f872 	bl	80024bc <HAL_Delay>
	f_mount(&FatFs, "", 1); //1=mount now
 80013d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80013dc:	2201      	movs	r2, #1
 80013de:	4983      	ldr	r1, [pc, #524]	; (80015ec <main+0x244>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 fb4f 	bl	8008a84 <f_mount>
	f_open(&fil, "accel.txt", FA_CREATE_ALWAYS | FA_OPEN_ALWAYS);
 80013e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ea:	2218      	movs	r2, #24
 80013ec:	4980      	ldr	r1, [pc, #512]	; (80015f0 <main+0x248>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fb8e 	bl	8008b10 <f_open>
	f_close(&fil);
 80013f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f007 ff2f 	bl	800925c <f_close>
	f_mount(NULL, "", 0); //0=demount
 80013fe:	2200      	movs	r2, #0
 8001400:	497a      	ldr	r1, [pc, #488]	; (80015ec <main+0x244>)
 8001402:	2000      	movs	r0, #0
 8001404:	f007 fb3e 	bl	8008a84 <f_mount>

	//char buf1[16];
	char sd1[35];
	uint8_t state = BELOW;
 8001408:	2301      	movs	r3, #1
 800140a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	uint16_t steps = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
	char message[64];

	status = lis3dh_init(&lis3dh, &hi2c1, xyz_buf, 6);
 8001414:	2306      	movs	r3, #6
 8001416:	4a77      	ldr	r2, [pc, #476]	; (80015f4 <main+0x24c>)
 8001418:	4977      	ldr	r1, [pc, #476]	; (80015f8 <main+0x250>)
 800141a:	4878      	ldr	r0, [pc, #480]	; (80015fc <main+0x254>)
 800141c:	f7ff feb5 	bl	800118a <lis3dh_init>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <main+0x258>)
 8001426:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001428:	4b75      	ldr	r3, [pc, #468]	; (8001600 <main+0x258>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <main+0x90>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001430:	2140      	movs	r1, #64	; 0x40
 8001432:	4874      	ldr	r0, [pc, #464]	; (8001604 <main+0x25c>)
 8001434:	f001 fb80 	bl	8002b38 <HAL_GPIO_TogglePin>
	}

	ssd1306_Init();
 8001438:	f000 fb1e 	bl	8001a78 <ssd1306_Init>
	ssd1306_Fill(Black);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 fb8f 	bl	8001b60 <ssd1306_Fill>
	ssd1306_SetCursor(2,0);
 8001442:	2100      	movs	r1, #0
 8001444:	2002      	movs	r0, #2
 8001446:	f000 fce5 	bl	8001e14 <ssd1306_SetCursor>
	ssd1306_WriteString("Steps:", Font_11x18, White);
 800144a:	4a6f      	ldr	r2, [pc, #444]	; (8001608 <main+0x260>)
 800144c:	2301      	movs	r3, #1
 800144e:	ca06      	ldmia	r2, {r1, r2}
 8001450:	486e      	ldr	r0, [pc, #440]	; (800160c <main+0x264>)
 8001452:	f000 fcb9 	bl	8001dc8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001456:	f000 fba7 	bl	8001ba8 <ssd1306_UpdateScreen>

	while (1)
	{
		for(int i = 0; i < NUM_SAMPLES; i++) //while data array is being filled
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8001460:	e0aa      	b.n	80015b8 <main+0x210>
		{
			HAL_Delay(50); //20Hz
 8001462:	2032      	movs	r0, #50	; 0x32
 8001464:	f001 f82a 	bl	80024bc <HAL_Delay>

			//scaling factor to convert the decimal data to int8 integers. calculated in matlab by taking the absolute value of all the data
			//and then calculating the max of that data. then divide that by 127 to get the scaling factor

			if(lis3dh_xyz_available(&lis3dh)) {
 8001468:	4864      	ldr	r0, [pc, #400]	; (80015fc <main+0x254>)
 800146a:	f7ff fee3 	bl	8001234 <lis3dh_xyz_available>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 809c 	beq.w	80015ae <main+0x206>
				status = lis3dh_get_xyz(&lis3dh);
 8001476:	4861      	ldr	r0, [pc, #388]	; (80015fc <main+0x254>)
 8001478:	f7ff ff3c 	bl	80012f4 <lis3dh_get_xyz>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <main+0x258>)
 8001482:	701a      	strb	r2, [r3, #0]
				float xx = lis3dh.x;//ACCEL_DATA_SCALER;
 8001484:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <main+0x254>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001490:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001494:	edc3 7a00 	vstr	s15, [r3]
				//float yy = lis3dh.y/ACCEL_DATA_SCALER;
				//float zz = lis3dh.z/ACCEL_DATA_SCALER;
				sprintf(sd1,"%f\n",xx);
 8001498:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80014aa:	4959      	ldr	r1, [pc, #356]	; (8001610 <main+0x268>)
 80014ac:	f009 fe1e 	bl	800b0ec <siprintf>

				fres = f_mount(&FatFs, "", 1); //1=mount now
 80014b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80014b4:	2201      	movs	r2, #1
 80014b6:	494d      	ldr	r1, [pc, #308]	; (80015ec <main+0x244>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 fae3 	bl	8008a84 <f_mount>
 80014be:	4603      	mov	r3, r0
 80014c0:	f887 34db 	strb.w	r3, [r7, #1243]	; 0x4db
				if(fres != FR_OK) {
 80014c4:	f897 34db 	ldrb.w	r3, [r7, #1243]	; 0x4db
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <main+0x12e>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	484d      	ldr	r0, [pc, #308]	; (8001604 <main+0x25c>)
 80014d0:	f001 fb32 	bl	8002b38 <HAL_GPIO_TogglePin>
					while(1);
 80014d4:	e7fe      	b.n	80014d4 <main+0x12c>
				}

				fres = f_open(&fil, "accel.txt", FA_WRITE | FA_OPEN_ALWAYS);
 80014d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014da:	2212      	movs	r2, #18
 80014dc:	4944      	ldr	r1, [pc, #272]	; (80015f0 <main+0x248>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f007 fb16 	bl	8008b10 <f_open>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 34db 	strb.w	r3, [r7, #1243]	; 0x4db
				if(fres == FR_OK) {
 80014ea:	f897 34db 	ldrb.w	r3, [r7, #1243]	; 0x4db
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d127      	bne.n	8001542 <main+0x19a>
					f_lseek(&fil, f_size(&fil));
 80014f2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80014f6:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f007 fed4 	bl	80092b0 <f_lseek>
					strncpy((char*)writeBuf1, sd1, 20);
 8001508:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800150c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001510:	2214      	movs	r2, #20
 8001512:	4618      	mov	r0, r3
 8001514:	f009 fe67 	bl	800b1e6 <strncpy>
					fres = f_write(&fil, writeBuf1, 20, &bytesWrote);
 8001518:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800151c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001520:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001524:	2214      	movs	r2, #20
 8001526:	f007 fcaf 	bl	8008e88 <f_write>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 34db 	strb.w	r3, [r7, #1243]	; 0x4db
					if(fres != FR_OK) {
 8001530:	f897 34db 	ldrb.w	r3, [r7, #1243]	; 0x4db
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <main+0x19a>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	4832      	ldr	r0, [pc, #200]	; (8001604 <main+0x25c>)
 800153c:	f001 fafc 	bl	8002b38 <HAL_GPIO_TogglePin>
						while(1);
 8001540:	e7fe      	b.n	8001540 <main+0x198>
					}
				}

				f_close(&fil);
 8001542:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001546:	4618      	mov	r0, r3
 8001548:	f007 fe88 	bl	800925c <f_close>

				f_mount(NULL, "", 0);
 800154c:	2200      	movs	r2, #0
 800154e:	4927      	ldr	r1, [pc, #156]	; (80015ec <main+0x244>)
 8001550:	2000      	movs	r0, #0
 8001552:	f007 fa97 	bl	8008a84 <f_mount>

				switch(state) {
 8001556:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <main+0x1bc>
 800155e:	2b01      	cmp	r3, #1
 8001560:	d015      	beq.n	800158e <main+0x1e6>
 8001562:	e024      	b.n	80015ae <main+0x206>
				case TOP:
					if(xx < THRESH) {
 8001564:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001614 <main+0x26c>
 8001570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	d400      	bmi.n	800157c <main+0x1d4>
						steps += 1;
						state = BELOW;
					}
					break;
 800157a:	e018      	b.n	80015ae <main+0x206>
						steps += 1;
 800157c:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 8001580:	3301      	adds	r3, #1
 8001582:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
						state = BELOW;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					break;
 800158c:	e00f      	b.n	80015ae <main+0x206>
				case BELOW:
					if(xx >= THRESH) {
 800158e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001614 <main+0x26c>
 800159a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	da00      	bge.n	80015a6 <main+0x1fe>
						state = TOP;
					}
					break;
 80015a4:	e002      	b.n	80015ac <main+0x204>
						state = TOP;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					break;
 80015ac:	bf00      	nop
		for(int i = 0; i < NUM_SAMPLES; i++) //while data array is being filled
 80015ae:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 80015b8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80015bc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80015c0:	f6ff af4f 	blt.w	8001462 <main+0xba>
				}
			}
		}
		ssd1306_SetCursor(2,15);
 80015c4:	210f      	movs	r1, #15
 80015c6:	2002      	movs	r0, #2
 80015c8:	f000 fc24 	bl	8001e14 <ssd1306_SetCursor>
		ssd1306_WriteString(itoa(steps,message,10), Font_11x18, White);
 80015cc:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 80015d0:	4639      	mov	r1, r7
 80015d2:	220a      	movs	r2, #10
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 f80c 	bl	80095f2 <itoa>
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <main+0x260>)
 80015dc:	2301      	movs	r3, #1
 80015de:	ca06      	ldmia	r2, {r1, r2}
 80015e0:	f000 fbf2 	bl	8001dc8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80015e4:	f000 fae0 	bl	8001ba8 <ssd1306_UpdateScreen>
		for(int i = 0; i < NUM_SAMPLES; i++) //while data array is being filled
 80015e8:	e737      	b.n	800145a <main+0xb2>
 80015ea:	bf00      	nop
 80015ec:	0800de40 	.word	0x0800de40
 80015f0:	0800de44 	.word	0x0800de44
 80015f4:	200003a4 	.word	0x200003a4
 80015f8:	20000210 	.word	0x20000210
 80015fc:	200003ac 	.word	0x200003ac
 8001600:	200003c8 	.word	0x200003c8
 8001604:	48000800 	.word	0x48000800
 8001608:	20000000 	.word	0x20000000
 800160c:	0800de50 	.word	0x0800de50
 8001610:	0800de58 	.word	0x0800de58
 8001614:	46500c00 	.word	0x46500c00

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b096      	sub	sp, #88	; 0x58
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2244      	movs	r2, #68	; 0x44
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f009 fdc3 	bl	800b1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800163a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800163e:	f002 f9c7 	bl	80039d0 <HAL_PWREx_ControlVoltageScaling>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001648:	f000 f9a8 	bl	800199c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2302      	movs	r3, #2
 8001658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165a:	2303      	movs	r3, #3
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001662:	2314      	movs	r3, #20
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166a:	2302      	movs	r3, #2
 800166c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fa02 	bl	8003a7c <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800167e:	f000 f98d 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2303      	movs	r3, #3
 8001688:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	2104      	movs	r1, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fe50 	bl	8004340 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016a6:	f000 f979 	bl	800199c <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3758      	adds	r7, #88	; 0x58
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_I2C1_Init+0x74>)
 80016ba:	4a1c      	ldr	r2, [pc, #112]	; (800172c <MX_I2C1_Init+0x78>)
 80016bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_I2C1_Init+0x74>)
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <MX_I2C1_Init+0x7c>)
 80016c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_I2C1_Init+0x74>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_I2C1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_I2C1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_I2C1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <MX_I2C1_Init+0x74>)
 80016f0:	f001 fa3c 	bl	8002b6c <HAL_I2C_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016fa:	f000 f94f 	bl	800199c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <MX_I2C1_Init+0x74>)
 8001702:	f002 f8bf 	bl	8003884 <HAL_I2CEx_ConfigAnalogFilter>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800170c:	f000 f946 	bl	800199c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001710:	2100      	movs	r1, #0
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_I2C1_Init+0x74>)
 8001714:	f002 f901 	bl	800391a <HAL_I2CEx_ConfigDigitalFilter>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800171e:	f000 f93d 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000210 	.word	0x20000210
 800172c:	40005400 	.word	0x40005400
 8001730:	10909cec 	.word	0x10909cec

08001734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_I2C2_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <MX_I2C2_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <MX_I2C2_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_I2C2_Init+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C2_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C2_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800176e:	480e      	ldr	r0, [pc, #56]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001770:	f001 f9fc 	bl	8002b6c <HAL_I2C_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800177a:	f000 f90f 	bl	800199c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177e:	2100      	movs	r1, #0
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001782:	f002 f87f 	bl	8003884 <HAL_I2CEx_ConfigAnalogFilter>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800178c:	f000 f906 	bl	800199c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_I2C2_Init+0x74>)
 8001794:	f002 f8c1 	bl	800391a <HAL_I2CEx_ConfigDigitalFilter>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800179e:	f000 f8fd 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000264 	.word	0x20000264
 80017ac:	40005800 	.word	0x40005800
 80017b0:	10909cec 	.word	0x10909cec

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_SPI1_Init+0x74>)
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <MX_SPI1_Init+0x78>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_SPI1_Init+0x74>)
 80017c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_SPI1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_SPI1_Init+0x74>)
 80017ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_SPI1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_SPI1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_SPI1_Init+0x74>)
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_SPI1_Init+0x74>)
 80017ea:	2238      	movs	r2, #56	; 0x38
 80017ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_SPI1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_SPI1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_SPI1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_SPI1_Init+0x74>)
 8001802:	2207      	movs	r2, #7
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_SPI1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_SPI1_Init+0x74>)
 800180e:	2208      	movs	r2, #8
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_SPI1_Init+0x74>)
 8001814:	f003 f93e 	bl	8004a94 <HAL_SPI_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800181e:	f000 f8bd 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200002b8 	.word	0x200002b8
 800182c:	40013000 	.word	0x40013000

08001830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <MX_USART1_UART_Init+0x64>)
 8001838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_USART1_UART_Init+0x60>)
 800183c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x60>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <MX_USART1_UART_Init+0x60>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x60>)
 800186e:	2210      	movs	r2, #16
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_USART1_UART_Init+0x60>)
 8001874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x60>)
 800187c:	f003 fea8 	bl	80055d0 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001886:	f000 f889 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000031c 	.word	0x2000031c
 8001894:	40013800 	.word	0x40013800

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a37      	ldr	r2, [pc, #220]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a31      	ldr	r2, [pc, #196]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a25      	ldr	r2, [pc, #148]	; (8001990 <MX_GPIO_Init+0xf8>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <MX_GPIO_Init+0xf8>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2110      	movs	r1, #16
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f001 f8f7 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <MX_GPIO_Init+0xfc>)
 8001922:	f001 f8f1 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2140      	movs	r1, #64	; 0x40
 800192a:	481b      	ldr	r0, [pc, #108]	; (8001998 <MX_GPIO_Init+0x100>)
 800192c:	f001 f8ec 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001930:	2310      	movs	r3, #16
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f000 ff6b 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800194e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <MX_GPIO_Init+0xfc>)
 8001968:	f000 ff5c 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196c:	2340      	movs	r3, #64	; 0x40
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_GPIO_Init+0x100>)
 8001984:	f000 ff4e 	bl	8002824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>

080019a6 <ssd1306_Reset>:
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <ssd1306_WriteCommand>:
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	2300      	movs	r3, #0
 80019c0:	733b      	strb	r3, [r7, #12]
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	737b      	strb	r3, [r7, #13]
 80019c6:	f107 020c 	add.w	r2, r7, #12
 80019ca:	2302      	movs	r3, #2
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <ssd1306_WriteCommand+0x28>)
 80019d0:	f7ff fb75 	bl	80010be <I2C_SendData>
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40005800 	.word	0x40005800

080019e0 <ssd1306_WriteData>:
 80019e0:	b580      	push	{r7, lr}
 80019e2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019ec:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80019f0:	6018      	str	r0, [r3, #0]
 80019f2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019f6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80019fa:	6019      	str	r1, [r3, #0]
 80019fc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a00:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001a0e:	e015      	b.n	8001a3c <ssd1306_WriteData+0x5c>
 8001a10:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a14:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001a18:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	441a      	add	r2, r3
 8001a20:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a24:	3301      	adds	r3, #1
 8001a26:	7811      	ldrb	r1, [r2, #0]
 8001a28:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001a2c:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8001a30:	54d1      	strb	r1, [r2, r3]
 8001a32:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a36:	3301      	adds	r3, #1
 8001a38:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001a3c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a40:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001a44:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d8e0      	bhi.n	8001a10 <ssd1306_WriteData+0x30>
 8001a4e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a52:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f107 0208 	add.w	r2, r7, #8
 8001a62:	2178      	movs	r1, #120	; 0x78
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <ssd1306_WriteData+0x94>)
 8001a66:	f7ff fb2a 	bl	80010be <I2C_SendData>
 8001a6a:	bf00      	nop
 8001a6c:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005800 	.word	0x40005800

08001a78 <ssd1306_Init>:
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	f7ff ff92 	bl	80019a6 <ssd1306_Reset>
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e002      	b.n	8001a8e <ssd1306_Init+0x16>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <ssd1306_Init+0xe0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d9f8      	bls.n	8001a88 <ssd1306_Init+0x10>
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f9e8 	bl	8001e6c <ssd1306_SetDisplayOn>
 8001a9c:	2020      	movs	r0, #32
 8001a9e:	f7ff ff89 	bl	80019b4 <ssd1306_WriteCommand>
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff ff86 	bl	80019b4 <ssd1306_WriteCommand>
 8001aa8:	20b0      	movs	r0, #176	; 0xb0
 8001aaa:	f7ff ff83 	bl	80019b4 <ssd1306_WriteCommand>
 8001aae:	20c8      	movs	r0, #200	; 0xc8
 8001ab0:	f7ff ff80 	bl	80019b4 <ssd1306_WriteCommand>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff ff7d 	bl	80019b4 <ssd1306_WriteCommand>
 8001aba:	2010      	movs	r0, #16
 8001abc:	f7ff ff7a 	bl	80019b4 <ssd1306_WriteCommand>
 8001ac0:	2040      	movs	r0, #64	; 0x40
 8001ac2:	f7ff ff77 	bl	80019b4 <ssd1306_WriteCommand>
 8001ac6:	20ff      	movs	r0, #255	; 0xff
 8001ac8:	f000 f9bc 	bl	8001e44 <ssd1306_SetContrast>
 8001acc:	20a1      	movs	r0, #161	; 0xa1
 8001ace:	f7ff ff71 	bl	80019b4 <ssd1306_WriteCommand>
 8001ad2:	20a6      	movs	r0, #166	; 0xa6
 8001ad4:	f7ff ff6e 	bl	80019b4 <ssd1306_WriteCommand>
 8001ad8:	203f      	movs	r0, #63	; 0x3f
 8001ada:	f7ff ff6b 	bl	80019b4 <ssd1306_WriteCommand>
 8001ade:	20a4      	movs	r0, #164	; 0xa4
 8001ae0:	f7ff ff68 	bl	80019b4 <ssd1306_WriteCommand>
 8001ae4:	20d3      	movs	r0, #211	; 0xd3
 8001ae6:	f7ff ff65 	bl	80019b4 <ssd1306_WriteCommand>
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff ff62 	bl	80019b4 <ssd1306_WriteCommand>
 8001af0:	20d5      	movs	r0, #213	; 0xd5
 8001af2:	f7ff ff5f 	bl	80019b4 <ssd1306_WriteCommand>
 8001af6:	20f0      	movs	r0, #240	; 0xf0
 8001af8:	f7ff ff5c 	bl	80019b4 <ssd1306_WriteCommand>
 8001afc:	20d9      	movs	r0, #217	; 0xd9
 8001afe:	f7ff ff59 	bl	80019b4 <ssd1306_WriteCommand>
 8001b02:	2022      	movs	r0, #34	; 0x22
 8001b04:	f7ff ff56 	bl	80019b4 <ssd1306_WriteCommand>
 8001b08:	20da      	movs	r0, #218	; 0xda
 8001b0a:	f7ff ff53 	bl	80019b4 <ssd1306_WriteCommand>
 8001b0e:	2012      	movs	r0, #18
 8001b10:	f7ff ff50 	bl	80019b4 <ssd1306_WriteCommand>
 8001b14:	20db      	movs	r0, #219	; 0xdb
 8001b16:	f7ff ff4d 	bl	80019b4 <ssd1306_WriteCommand>
 8001b1a:	2020      	movs	r0, #32
 8001b1c:	f7ff ff4a 	bl	80019b4 <ssd1306_WriteCommand>
 8001b20:	208d      	movs	r0, #141	; 0x8d
 8001b22:	f7ff ff47 	bl	80019b4 <ssd1306_WriteCommand>
 8001b26:	2014      	movs	r0, #20
 8001b28:	f7ff ff44 	bl	80019b4 <ssd1306_WriteCommand>
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f000 f99d 	bl	8001e6c <ssd1306_SetDisplayOn>
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f814 	bl	8001b60 <ssd1306_Fill>
 8001b38:	f000 f836 	bl	8001ba8 <ssd1306_UpdateScreen>
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <ssd1306_Init+0xe4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <ssd1306_Init+0xe4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	805a      	strh	r2, [r3, #2]
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <ssd1306_Init+0xe4>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	715a      	strb	r2, [r3, #5]
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0001869f 	.word	0x0001869f
 8001b5c:	200007cc 	.word	0x200007cc

08001b60 <ssd1306_Fill>:
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e00d      	b.n	8001b8c <ssd1306_Fill+0x2c>
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <ssd1306_Fill+0x1a>
 8001b76:	2100      	movs	r1, #0
 8001b78:	e000      	b.n	8001b7c <ssd1306_Fill+0x1c>
 8001b7a:	21ff      	movs	r1, #255	; 0xff
 8001b7c:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <ssd1306_Fill+0x44>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	460a      	mov	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d3ed      	bcc.n	8001b70 <ssd1306_Fill+0x10>
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200003cc 	.word	0x200003cc

08001ba8 <ssd1306_UpdateScreen>:
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e016      	b.n	8001be2 <ssd1306_UpdateScreen+0x3a>
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	3b50      	subs	r3, #80	; 0x50
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fefa 	bl	80019b4 <ssd1306_WriteCommand>
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fef7 	bl	80019b4 <ssd1306_WriteCommand>
 8001bc6:	2010      	movs	r0, #16
 8001bc8:	f7ff fef4 	bl	80019b4 <ssd1306_WriteCommand>
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <ssd1306_UpdateScreen+0x4c>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff02 	bl	80019e0 <ssd1306_WriteData>
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	3301      	adds	r3, #1
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d9e5      	bls.n	8001bb4 <ssd1306_UpdateScreen+0xc>
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003cc 	.word	0x200003cc

08001bf8 <ssd1306_DrawPixel>:
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	460b      	mov	r3, r1
 8001c04:	71bb      	strb	r3, [r7, #6]
 8001c06:	4613      	mov	r3, r2
 8001c08:	717b      	strb	r3, [r7, #5]
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db48      	blt.n	8001ca4 <ssd1306_DrawPixel+0xac>
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	2b3f      	cmp	r3, #63	; 0x3f
 8001c16:	d845      	bhi.n	8001ca4 <ssd1306_DrawPixel+0xac>
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <ssd1306_DrawPixel+0xb8>)
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <ssd1306_DrawPixel+0x36>
 8001c20:	797b      	ldrb	r3, [r7, #5]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	717b      	strb	r3, [r7, #5]
 8001c2e:	797b      	ldrb	r3, [r7, #5]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11a      	bne.n	8001c6a <ssd1306_DrawPixel+0x72>
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	b2d8      	uxtb	r0, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	01db      	lsls	r3, r3, #7
 8001c40:	4413      	add	r3, r2
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b259      	sxtb	r1, r3
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	01db      	lsls	r3, r3, #7
 8001c60:	4413      	add	r3, r2
 8001c62:	b2c9      	uxtb	r1, r1
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001c66:	54d1      	strb	r1, [r2, r3]
 8001c68:	e01d      	b.n	8001ca6 <ssd1306_DrawPixel+0xae>
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
 8001c6e:	08db      	lsrs	r3, r3, #3
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4413      	add	r3, r2
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	b259      	sxtb	r1, r3
 8001c94:	79fa      	ldrb	r2, [r7, #7]
 8001c96:	4603      	mov	r3, r0
 8001c98:	01db      	lsls	r3, r3, #7
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2c9      	uxtb	r1, r1
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <ssd1306_DrawPixel+0xbc>)
 8001ca0:	54d1      	strb	r1, [r2, r3]
 8001ca2:	e000      	b.n	8001ca6 <ssd1306_DrawPixel+0xae>
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	200007cc 	.word	0x200007cc
 8001cb4:	200003cc 	.word	0x200003cc

08001cb8 <ssd1306_WriteChar>:
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	1d38      	adds	r0, r7, #4
 8001cc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	73bb      	strb	r3, [r7, #14]
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b1f      	cmp	r3, #31
 8001cd4:	d902      	bls.n	8001cdc <ssd1306_WriteChar+0x24>
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b7e      	cmp	r3, #126	; 0x7e
 8001cda:	d901      	bls.n	8001ce0 <ssd1306_WriteChar+0x28>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e06d      	b.n	8001dbc <ssd1306_WriteChar+0x104>
 8001ce0:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	793b      	ldrb	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2b80      	cmp	r3, #128	; 0x80
 8001cec:	dc06      	bgt.n	8001cfc <ssd1306_WriteChar+0x44>
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001cf0:	885b      	ldrh	r3, [r3, #2]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	797b      	ldrb	r3, [r7, #5]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	dd01      	ble.n	8001d00 <ssd1306_WriteChar+0x48>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e05d      	b.n	8001dbc <ssd1306_WriteChar+0x104>
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	e04c      	b.n	8001da0 <ssd1306_WriteChar+0xe8>
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3b20      	subs	r3, #32
 8001d0c:	7979      	ldrb	r1, [r7, #5]
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	440b      	add	r3, r1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	e034      	b.n	8001d90 <ssd1306_WriteChar+0xd8>
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <ssd1306_WriteChar+0xa4>
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b2d8      	uxtb	r0, r3
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001d46:	885b      	ldrh	r3, [r3, #2]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	7bba      	ldrb	r2, [r7, #14]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7ff ff4f 	bl	8001bf8 <ssd1306_DrawPixel>
 8001d5a:	e016      	b.n	8001d8a <ssd1306_WriteChar+0xd2>
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	b2d8      	uxtb	r0, r3
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b2d9      	uxtb	r1, r3
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	f7ff ff37 	bl	8001bf8 <ssd1306_DrawPixel>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	793b      	ldrb	r3, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d3c5      	bcc.n	8001d26 <ssd1306_WriteChar+0x6e>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	461a      	mov	r2, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d3ad      	bcc.n	8001d06 <ssd1306_WriteChar+0x4e>
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	793b      	ldrb	r3, [r7, #4]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <ssd1306_WriteChar+0x10c>)
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	200007cc 	.word	0x200007cc

08001dc8 <ssd1306_WriteString>:
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	1d38      	adds	r0, r7, #4
 8001dd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dd6:	70fb      	strb	r3, [r7, #3]
 8001dd8:	e012      	b.n	8001e00 <ssd1306_WriteString+0x38>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	7818      	ldrb	r0, [r3, #0]
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	1d3a      	adds	r2, r7, #4
 8001de2:	ca06      	ldmia	r2, {r1, r2}
 8001de4:	f7ff ff68 	bl	8001cb8 <ssd1306_WriteChar>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d002      	beq.n	8001dfa <ssd1306_WriteString+0x32>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	e008      	b.n	8001e0c <ssd1306_WriteString+0x44>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e8      	bne.n	8001dda <ssd1306_WriteString+0x12>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <ssd1306_SetCursor>:
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <ssd1306_SetCursor+0x2c>)
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <ssd1306_SetCursor+0x2c>)
 8001e32:	805a      	strh	r2, [r3, #2]
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	200007cc 	.word	0x200007cc

08001e44 <ssd1306_SetContrast>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	2381      	movs	r3, #129	; 0x81
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fdad 	bl	80019b4 <ssd1306_WriteCommand>
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fda9 	bl	80019b4 <ssd1306_WriteCommand>
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <ssd1306_SetDisplayOn>:
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <ssd1306_SetDisplayOn+0x1c>
 8001e7c:	23af      	movs	r3, #175	; 0xaf
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <ssd1306_SetDisplayOn+0x38>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	719a      	strb	r2, [r3, #6]
 8001e86:	e004      	b.n	8001e92 <ssd1306_SetDisplayOn+0x26>
 8001e88:	23ae      	movs	r3, #174	; 0xae
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <ssd1306_SetDisplayOn+0x38>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	719a      	strb	r2, [r3, #6]
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fd8d 	bl	80019b4 <ssd1306_WriteCommand>
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200007cc 	.word	0x200007cc

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x44>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x44>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x44>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x44>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x44>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x44>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b098      	sub	sp, #96	; 0x60
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f08:	f107 0318 	add.w	r3, r7, #24
 8001f0c:	2234      	movs	r2, #52	; 0x34
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f009 f94e 	bl	800b1b2 <memset>
  if(hi2c->Instance==I2C1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a3e      	ldr	r2, [pc, #248]	; (8002014 <HAL_I2C_MspInit+0x124>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d138      	bne.n	8001f92 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f20:	2340      	movs	r3, #64	; 0x40
 8001f22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fc2b 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f38:	f7ff fd30 	bl	800199c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	4a35      	ldr	r2, [pc, #212]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f48:	4b33      	ldr	r3, [pc, #204]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 8001f54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5a:	2312      	movs	r3, #18
 8001f5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f66:	2304      	movs	r3, #4
 8001f68:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f000 fc56 	bl	8002824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f90:	e03b      	b.n	800200a <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_I2C_MspInit+0x12c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d136      	bne.n	800200a <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa4:	f107 0318 	add.w	r3, r7, #24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fbed 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 8001fb4:	f7ff fcf2 	bl	800199c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 8001fd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fea:	4619      	mov	r1, r3
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <HAL_I2C_MspInit+0x130>)
 8001fee:	f000 fc19 	bl	8002824 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8001ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_I2C_MspInit+0x128>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
}
 800200a:	bf00      	nop
 800200c:	3760      	adds	r7, #96	; 0x60
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40005400 	.word	0x40005400
 8002018:	40021000 	.word	0x40021000
 800201c:	40005800 	.word	0x40005800
 8002020:	48000400 	.word	0x48000400

08002024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_SPI_MspInit+0x7c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d128      	bne.n	8002098 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_SPI_MspInit+0x80>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_SPI_MspInit+0x80>)
 800204c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002050:	6613      	str	r3, [r2, #96]	; 0x60
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_SPI_MspInit+0x80>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_SPI_MspInit+0x80>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_SPI_MspInit+0x80>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_SPI_MspInit+0x80>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002076:	23c2      	movs	r3, #194	; 0xc2
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002086:	2305      	movs	r3, #5
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f000 fbc6 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40013000 	.word	0x40013000
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b096      	sub	sp, #88	; 0x58
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2234      	movs	r2, #52	; 0x34
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f009 f872 	bl	800b1b2 <memset>
  if(huart->Instance==USART1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_UART_MspInit+0xb4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d13d      	bne.n	8002154 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fb4f 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f0:	f7ff fc54 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_UART_MspInit+0xb8>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_UART_MspInit+0xb8>)
 80020fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_UART_MspInit+0xb8>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_UART_MspInit+0xb8>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_UART_MspInit+0xb8>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_UART_MspInit+0xb8>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002134:	2307      	movs	r3, #7
 8002136:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800213c:	4619      	mov	r1, r3
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <HAL_UART_MspInit+0xbc>)
 8002140:	f000 fb70 	bl	8002824 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	2025      	movs	r0, #37	; 0x25
 800214a:	f000 fab6 	bl	80026ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800214e:	2025      	movs	r0, #37	; 0x25
 8002150:	f000 facf 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3758      	adds	r7, #88	; 0x58
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40013800 	.word	0x40013800
 8002160:	40021000 	.word	0x40021000
 8002164:	48000400 	.word	0x48000400

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 f962 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <USART1_IRQHandler+0x10>)
 80021c2:	f003 fa53 	bl	800566c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000031c 	.word	0x2000031c

080021d0 <_getpid>:
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	2301      	movs	r3, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_kill>:
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	f009 f859 	bl	800b2a0 <__errno>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2216      	movs	r2, #22
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_exit>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffe7 	bl	80021e0 <_kill>
 8002212:	e7fe      	b.n	8002212 <_exit+0x12>

08002214 <_read>:
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e00a      	b.n	800223c <_read+0x28>
 8002226:	f3af 8000 	nop.w
 800222a:	4601      	mov	r1, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	b2ca      	uxtb	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf0      	blt.n	8002226 <_read+0x12>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_write>:
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e009      	b.n	8002274 <_write+0x26>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60ba      	str	r2, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f3af 8000 	nop.w
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf1      	blt.n	8002260 <_write+0x12>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_close>:
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_fstat>:
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	2300      	movs	r3, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_isatty>:
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	2301      	movs	r3, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_lseek>:
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	2300      	movs	r3, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <_sbrk>:
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
 8002320:	f008 ffbe 	bl	800b2a0 <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000a000 	.word	0x2000a000
 8002350:	00004000 	.word	0x00004000
 8002354:	200007d4 	.word	0x200007d4
 8002358:	20000970 	.word	0x20000970

0800235c <SystemInit>:
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopForever+0x2>
 8002384:	f7ff ffea 	bl	800235c <SystemInit>
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <LoopForever+0x6>)
 800238a:	490d      	ldr	r1, [pc, #52]	; (80023c0 <LoopForever+0xa>)
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <LoopForever+0xe>)
 800238e:	2300      	movs	r3, #0
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:
 8002392:	58d4      	ldr	r4, [r2, r3]
 8002394:	50c4      	str	r4, [r0, r3]
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:
 8002398:	18c4      	adds	r4, r0, r3
 800239a:	428c      	cmp	r4, r1
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <LoopForever+0x12>)
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <LoopForever+0x16>)
 80023a2:	2300      	movs	r3, #0
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:
 80023aa:	42a2      	cmp	r2, r4
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>
 80023ae:	f008 ff7d 	bl	800b2ac <__libc_init_array>
 80023b2:	f7fe fff9 	bl	80013a8 <main>

080023b6 <LoopForever>:
 80023b6:	e7fe      	b.n	80023b6 <LoopForever>
 80023b8:	2000a000 	.word	0x2000a000
 80023bc:	20000000 	.word	0x20000000
 80023c0:	200001f4 	.word	0x200001f4
 80023c4:	0800f0f0 	.word	0x0800f0f0
 80023c8:	200001f4 	.word	0x200001f4
 80023cc:	20000970 	.word	0x20000970

080023d0 <ADC1_2_IRQHandler>:
 80023d0:	e7fe      	b.n	80023d0 <ADC1_2_IRQHandler>

080023d2 <HAL_Init>:
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	2300      	movs	r3, #0
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	2003      	movs	r0, #3
 80023de:	f000 f961 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>
 80023e2:	200f      	movs	r0, #15
 80023e4:	f000 f80e 	bl	8002404 <HAL_InitTick>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_Init+0x22>
 80023ee:	2301      	movs	r3, #1
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	e001      	b.n	80023f8 <HAL_Init+0x26>
 80023f4:	f7ff fd58 	bl	8001ea8 <HAL_MspInit>
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_InitTick>:
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_InitTick+0x6c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d023      	beq.n	8002460 <HAL_InitTick+0x5c>
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_InitTick+0x70>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_InitTick+0x6c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002426:	fbb3 f3f1 	udiv	r3, r3, r1
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f96d 	bl	800270e <HAL_SYSTICK_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_InitTick+0x56>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d809      	bhi.n	8002454 <HAL_InitTick+0x50>
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f000 f937 	bl	80026ba <HAL_NVIC_SetPriority>
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_InitTick+0x74>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e007      	b.n	8002464 <HAL_InitTick+0x60>
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e004      	b.n	8002464 <HAL_InitTick+0x60>
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e001      	b.n	8002464 <HAL_InitTick+0x60>
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000010 	.word	0x20000010
 8002474:	20000008 	.word	0x20000008
 8002478:	2000000c 	.word	0x2000000c

0800247c <HAL_IncTick>:
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000010 	.word	0x20000010
 80024a0:	200007d8 	.word	0x200007d8

080024a4 <HAL_GetTick>:
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	200007d8 	.word	0x200007d8

080024bc <HAL_Delay>:
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000010 	.word	0x20000010

08002504 <__NVIC_SetPriorityGrouping>:
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
 8002650:	4313      	orrs	r3, r2
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	2300      	movs	r3, #0
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff29 	bl	8002504 <__NVIC_SetPriorityGrouping>
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	f7ff ff3e 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff31 	bl	8002568 <__NVIC_EnableIRQ>
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DMA_Abort>:
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d008      	beq.n	8002750 <HAL_DMA_Abort+0x2a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2204      	movs	r2, #4
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800274c:	2301      	movs	r3, #1
 800274e:	e022      	b.n	8002796 <HAL_DMA_Abort+0x70>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 020e 	bic.w	r2, r2, #14
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 021c 	and.w	r2, r3, #28
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_DMA_Abort_IT>:
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d005      	beq.n	80027c6 <HAL_DMA_Abort_IT+0x24>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e029      	b.n	800281a <HAL_DMA_Abort_IT+0x78>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 020e 	bic.w	r2, r2, #14
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f003 021c 	and.w	r2, r3, #28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_DMA_Abort_IT+0x78>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_GPIO_Init>:
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e14e      	b.n	8002ad2 <HAL_GPIO_Init+0x2ae>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8140 	beq.w	8002acc <HAL_GPIO_Init+0x2a8>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d005      	beq.n	8002864 <HAL_GPIO_Init+0x40>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d130      	bne.n	80028c6 <HAL_GPIO_Init+0xa2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	2201      	movs	r2, #1
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f003 0201 	and.w	r2, r3, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d017      	beq.n	8002902 <HAL_GPIO_Init+0xde>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d123      	bne.n	8002956 <HAL_GPIO_Init+0x132>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0203 	and.w	r2, r3, #3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 809a 	beq.w	8002acc <HAL_GPIO_Init+0x2a8>
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <HAL_GPIO_Init+0x2cc>)
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_GPIO_Init+0x2cc>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6613      	str	r3, [r2, #96]	; 0x60
 80029a4:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <HAL_GPIO_Init+0x2cc>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029da:	d013      	beq.n	8002a04 <HAL_GPIO_Init+0x1e0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <HAL_GPIO_Init+0x2d4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00d      	beq.n	8002a00 <HAL_GPIO_Init+0x1dc>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_GPIO_Init+0x2d8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <HAL_GPIO_Init+0x1d8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a44      	ldr	r2, [pc, #272]	; (8002b00 <HAL_GPIO_Init+0x2dc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_GPIO_Init+0x1d4>
 80029f4:	2303      	movs	r3, #3
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x1e2>
 80029f8:	2307      	movs	r3, #7
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x1e2>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x1e2>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x1e2>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a24:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x224>
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x24e>
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60d3      	str	r3, [r2, #12]
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x278>
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6053      	str	r3, [r2, #4]
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2a2>
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f aea9 	bne.w	8002834 <HAL_GPIO_Init+0x10>
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_WritePin>:
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_WritePin+0x24>
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_GPIO_TogglePin>:
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43d9      	mvns	r1, r3
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	400b      	ands	r3, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_I2C_Init>:
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e08d      	b.n	8002c9a <HAL_I2C_Init+0x12e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff f9ac 	bl	8001ef0 <HAL_I2C_MspInit>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_I2C_Init+0x7a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e006      	b.n	8002bf4 <HAL_I2C_Init+0x88>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d108      	bne.n	8002c0e <HAL_I2C_Init+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	e007      	b.n	8002c1e <HAL_I2C_Init+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c30:	6053      	str	r3, [r2, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	ea42 0103 	orr.w	r1, r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69d9      	ldr	r1, [r3, #28]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c98:	2300      	movs	r3, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_I2C_Mem_Write>:
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 80f9 	bne.w	8002ebe <HAL_I2C_Mem_Write+0x21a>
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x34>
 8002cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x40>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0ed      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Mem_Write+0x4e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0e6      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfa:	f7ff fbd3 	bl	80024a4 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2319      	movs	r3, #25
 8002d06:	2201      	movs	r2, #1
 8002d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbcd 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x78>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0d1      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2221      	movs	r2, #33	; 0x21
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34
 8002d44:	88f8      	ldrh	r0, [r7, #6]
 8002d46:	893a      	ldrh	r2, [r7, #8]
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4603      	mov	r3, r0
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fadd 	bl	8003314 <I2C_RequestMemoryWrite>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_I2C_Mem_Write+0xc8>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0a9      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d90e      	bls.n	8002d94 <HAL_I2C_Mem_Write+0xf0>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	8979      	ldrh	r1, [r7, #10]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fd47 	bl	8003820 <I2C_TransferConfig>
 8002d92:	e00f      	b.n	8002db4 <HAL_I2C_Mem_Write+0x110>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fd36 	bl	8003820 <I2C_TransferConfig>
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fbc6 	bl	800354a <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x124>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e07b      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d034      	beq.n	8002e6c <HAL_I2C_Mem_Write+0x1c8>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d130      	bne.n	8002e6c <HAL_I2C_Mem_Write+0x1c8>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fb49 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x180>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e04d      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2bff      	cmp	r3, #255	; 0xff
 8002e2c:	d90e      	bls.n	8002e4c <HAL_I2C_Mem_Write+0x1a8>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	22ff      	movs	r2, #255	; 0xff
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fceb 	bl	8003820 <I2C_TransferConfig>
 8002e4a:	e00f      	b.n	8002e6c <HAL_I2C_Mem_Write+0x1c8>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fcda 	bl	8003820 <I2C_TransferConfig>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d19e      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x110>
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fbac 	bl	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Mem_Write+0x1e6>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e01a      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	61da      	str	r2, [r3, #28]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_I2C_Mem_Write+0x224>)
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	6053      	str	r3, [r2, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	fe00e800 	.word	0xfe00e800

08002ecc <HAL_I2C_Mem_Read>:
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 80fd 	bne.w	80030ee <HAL_I2C_Mem_Read+0x222>
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x34>
 8002efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_I2C_Mem_Read+0x40>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0f1      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x4e>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0ea      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f22:	f7ff fabf 	bl	80024a4 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fab9 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x78>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d5      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2222      	movs	r2, #34	; 0x22
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f6c:	88f8      	ldrh	r0, [r7, #6]
 8002f6e:	893a      	ldrh	r2, [r7, #8]
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa1d 	bl	80033bc <I2C_RequestMemoryRead>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_I2C_Mem_Read+0xc8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0ad      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2bff      	cmp	r3, #255	; 0xff
 8002f9c:	d90e      	bls.n	8002fbc <HAL_I2C_Mem_Read+0xf0>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_I2C_Mem_Read+0x22c>)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fc33 	bl	8003820 <I2C_TransferConfig>
 8002fba:	e00f      	b.n	8002fdc <HAL_I2C_Mem_Read+0x110>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <HAL_I2C_Mem_Read+0x22c>)
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fc22 	bl	8003820 <I2C_TransferConfig>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa60 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Mem_Read+0x12a>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07c      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d034      	beq.n	800309c <HAL_I2C_Mem_Read+0x1d0>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d130      	bne.n	800309c <HAL_I2C_Mem_Read+0x1d0>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fa31 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Read+0x188>
 8003050:	2301      	movs	r3, #1
 8003052:	e04d      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2bff      	cmp	r3, #255	; 0xff
 800305c:	d90e      	bls.n	800307c <HAL_I2C_Mem_Read+0x1b0>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	22ff      	movs	r2, #255	; 0xff
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	b2da      	uxtb	r2, r3
 800306a:	8979      	ldrh	r1, [r7, #10]
 800306c:	2300      	movs	r3, #0
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fbd3 	bl	8003820 <I2C_TransferConfig>
 800307a:	e00f      	b.n	800309c <HAL_I2C_Mem_Read+0x1d0>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	b2da      	uxtb	r2, r3
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fbc2 	bl	8003820 <I2C_TransferConfig>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d19a      	bne.n	8002fdc <HAL_I2C_Mem_Read+0x110>
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa94 	bl	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Mem_Read+0x1ee>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01a      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2220      	movs	r2, #32
 80030c0:	61da      	str	r2, [r3, #28]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_I2C_Mem_Read+0x230>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	6053      	str	r3, [r2, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 80030ee:	2302      	movs	r3, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	80002400 	.word	0x80002400
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <HAL_I2C_IsDeviceReady>:
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	460b      	mov	r3, r1
 800310e:	817b      	strh	r3, [r7, #10]
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b20      	cmp	r3, #32
 800311e:	f040 80f3 	bne.w	8003308 <HAL_I2C_IsDeviceReady+0x208>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003130:	d101      	bne.n	8003136 <HAL_I2C_IsDeviceReady+0x36>
 8003132:	2302      	movs	r3, #2
 8003134:	e0e9      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2C_IsDeviceReady+0x44>
 8003140:	2302      	movs	r3, #2
 8003142:	e0e2      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_I2C_IsDeviceReady+0x72>
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800316c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003170:	e006      	b.n	8003180 <HAL_I2C_IsDeviceReady+0x80>
 8003172:	897b      	ldrh	r3, [r7, #10]
 8003174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800317c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	6053      	str	r3, [r2, #4]
 8003186:	f7ff f98d 	bl	80024a4 <HAL_GetTick>
 800318a:	61b8      	str	r0, [r7, #24]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b20      	cmp	r3, #32
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	77bb      	strb	r3, [r7, #30]
 80031b8:	e034      	b.n	8003224 <HAL_I2C_IsDeviceReady+0x124>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d01a      	beq.n	80031f8 <HAL_I2C_IsDeviceReady+0xf8>
 80031c2:	f7ff f96f 	bl	80024a4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <HAL_I2C_IsDeviceReady+0xd8>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_I2C_IsDeviceReady+0xf8>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f4:	2301      	movs	r3, #1
 80031f6:	e088      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b10      	cmp	r3, #16
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	77bb      	strb	r3, [r7, #30]
 8003224:	7ffb      	ldrb	r3, [r7, #31]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_I2C_IsDeviceReady+0x130>
 800322a:	7fbb      	ldrb	r3, [r7, #30]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0c4      	beq.n	80031ba <HAL_I2C_IsDeviceReady+0xba>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b10      	cmp	r3, #16
 800323c:	d01a      	beq.n	8003274 <HAL_I2C_IsDeviceReady+0x174>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2200      	movs	r2, #0
 8003246:	2120      	movs	r1, #32
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f92f 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_IsDeviceReady+0x158>
 8003254:	2301      	movs	r3, #1
 8003256:	e058      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	61da      	str	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	2300      	movs	r3, #0
 8003272:	e04a      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	2120      	movs	r1, #32
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f914 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_IsDeviceReady+0x18e>
 800328a:	2301      	movs	r3, #1
 800328c:	e03d      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	61da      	str	r2, [r3, #28]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2220      	movs	r2, #32
 800329c:	61da      	str	r2, [r3, #28]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d118      	bne.n	80032d8 <HAL_I2C_IsDeviceReady+0x1d8>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	2120      	movs	r1, #32
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f8f3 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_I2C_IsDeviceReady+0x1d0>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01c      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2220      	movs	r2, #32
 80032d6:	61da      	str	r2, [r3, #28]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3301      	adds	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	f63f af39 	bhi.w	800315a <HAL_I2C_IsDeviceReady+0x5a>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_I2C_IsDeviceReady+0x20a>
 8003308:	2302      	movs	r3, #2
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <I2C_RequestMemoryWrite>:
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	8979      	ldrh	r1, [r7, #10]
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <I2C_RequestMemoryWrite+0xa4>)
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fa6f 	bl	8003820 <I2C_TransferConfig>
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8ff 	bl	800354a <I2C_WaitOnTXISFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_RequestMemoryWrite+0x42>
 8003352:	2301      	movs	r3, #1
 8003354:	e02c      	b.n	80033b0 <I2C_RequestMemoryWrite+0x9c>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <I2C_RequestMemoryWrite+0x54>
 800335c:	893b      	ldrh	r3, [r7, #8]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
 8003366:	e015      	b.n	8003394 <I2C_RequestMemoryWrite+0x80>
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	629a      	str	r2, [r3, #40]	; 0x28
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	69b9      	ldr	r1, [r7, #24]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8e5 	bl	800354a <I2C_WaitOnTXISFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_RequestMemoryWrite+0x76>
 8003386:	2301      	movs	r3, #1
 8003388:	e012      	b.n	80033b0 <I2C_RequestMemoryWrite+0x9c>
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2200      	movs	r2, #0
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f884 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_RequestMemoryWrite+0x9a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <I2C_RequestMemoryWrite+0x9c>
 80033ae:	2300      	movs	r3, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	80002000 	.word	0x80002000

080033bc <I2C_RequestMemoryRead>:
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	8979      	ldrh	r1, [r7, #10]
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <I2C_RequestMemoryRead+0xa4>)
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa1c 	bl	8003820 <I2C_TransferConfig>
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	69b9      	ldr	r1, [r7, #24]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f8ac 	bl	800354a <I2C_WaitOnTXISFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_RequestMemoryRead+0x40>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e02c      	b.n	8003456 <I2C_RequestMemoryRead+0x9a>
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <I2C_RequestMemoryRead+0x52>
 8003402:	893b      	ldrh	r3, [r7, #8]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
 800340c:	e015      	b.n	800343a <I2C_RequestMemoryRead+0x7e>
 800340e:	893b      	ldrh	r3, [r7, #8]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	b29b      	uxth	r3, r3
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f892 	bl	800354a <I2C_WaitOnTXISFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <I2C_RequestMemoryRead+0x74>
 800342c:	2301      	movs	r3, #1
 800342e:	e012      	b.n	8003456 <I2C_RequestMemoryRead+0x9a>
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	629a      	str	r2, [r3, #40]	; 0x28
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2200      	movs	r2, #0
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f831 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <I2C_RequestMemoryRead+0x98>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <I2C_RequestMemoryRead+0x9a>
 8003454:	2300      	movs	r3, #0
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	80002000 	.word	0x80002000

08003464 <I2C_Flush_TXDR>:
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d103      	bne.n	8003482 <I2C_Flush_TXDR+0x1e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <I2C_Flush_TXDR+0x3c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	619a      	str	r2, [r3, #24]
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <I2C_WaitOnFlagUntilTimeout>:
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
 80034bc:	e031      	b.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x76>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d02d      	beq.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x76>
 80034c6:	f7fe ffed 	bl	80024a4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d122      	bne.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x76>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d113      	bne.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x76>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351e:	2301      	movs	r3, #1
 8003520:	e00f      	b.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x96>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d0be      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x12>
 8003540:	2300      	movs	r3, #0
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <I2C_WaitOnTXISFlagUntilTimeout>:
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	e033      	b.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f87f 	bl	8003660 <I2C_IsErrorOccurred>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8003568:	2301      	movs	r3, #1
 800356a:	e031      	b.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d025      	beq.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003574:	f7fe ff96 	bl	80024a4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11a      	bne.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d013      	beq.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	2301      	movs	r3, #1
 80035be:	e007      	b.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d1c4      	bne.n	8003558 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 80035ce:	2300      	movs	r3, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	e02f      	b.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f838 	bl	8003660 <I2C_IsErrorOccurred>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e02d      	b.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80035fa:	f7fe ff53 	bl	80024a4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11a      	bne.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b20      	cmp	r3, #32
 800361c:	d013      	beq.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b20      	cmp	r3, #32
 8003652:	d1c8      	bne.n	80035e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8003654:	2300      	movs	r3, #0
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <I2C_IsErrorOccurred>:
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d068      	beq.n	800375e <I2C_IsErrorOccurred+0xfe>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2210      	movs	r2, #16
 8003692:	61da      	str	r2, [r3, #28]
 8003694:	e049      	b.n	800372a <I2C_IsErrorOccurred+0xca>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d045      	beq.n	800372a <I2C_IsErrorOccurred+0xca>
 800369e:	f7fe ff01 	bl	80024a4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_IsErrorOccurred+0x54>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d13a      	bne.n	800372a <I2C_IsErrorOccurred+0xca>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036c6:	74fb      	strb	r3, [r7, #19]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d6:	d121      	bne.n	800371c <I2C_IsErrorOccurred+0xbc>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036de:	d01d      	beq.n	800371c <I2C_IsErrorOccurred+0xbc>
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d01a      	beq.n	800371c <I2C_IsErrorOccurred+0xbc>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	f7fe fed5 	bl	80024a4 <HAL_GetTick>
 80036fa:	61f8      	str	r0, [r7, #28]
 80036fc:	e00e      	b.n	800371c <I2C_IsErrorOccurred+0xbc>
 80036fe:	f7fe fed1 	bl	80024a4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b19      	cmp	r3, #25
 800370a:	d907      	bls.n	800371c <I2C_IsErrorOccurred+0xbc>
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800371a:	e006      	b.n	800372a <I2C_IsErrorOccurred+0xca>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b20      	cmp	r3, #32
 8003728:	d1e9      	bne.n	80036fe <I2C_IsErrorOccurred+0x9e>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d003      	beq.n	8003740 <I2C_IsErrorOccurred+0xe0>
 8003738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0aa      	beq.n	8003696 <I2C_IsErrorOccurred+0x36>
 8003740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <I2C_IsErrorOccurred+0xf0>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2220      	movs	r2, #32
 800374e:	61da      	str	r2, [r3, #28]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	623b      	str	r3, [r7, #32]
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <I2C_IsErrorOccurred+0x128>
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	623b      	str	r3, [r7, #32]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003780:	61da      	str	r2, [r3, #28]
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <I2C_IsErrorOccurred+0x14a>
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	623b      	str	r3, [r7, #32]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a2:	61da      	str	r2, [r3, #28]
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <I2C_IsErrorOccurred+0x16c>
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c4:	61da      	str	r2, [r3, #28]
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01c      	beq.n	800380e <I2C_IsErrorOccurred+0x1ae>
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff fe45 	bl	8003464 <I2C_Flush_TXDR>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <I2C_IsErrorOccurred+0x1bc>)
 80037e6:	400b      	ands	r3, r1
 80037e8:	6053      	str	r3, [r2, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003812:	4618      	mov	r0, r3
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	fe00e800 	.word	0xfe00e800

08003820 <I2C_TransferConfig>:
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	817b      	strh	r3, [r7, #10]
 800382e:	4613      	mov	r3, r2
 8003830:	727b      	strb	r3, [r7, #9]
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003838:	7a7b      	ldrb	r3, [r7, #9]
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	431a      	orrs	r2, r3
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	4313      	orrs	r3, r2
 800384a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	0d5b      	lsrs	r3, r3, #21
 800385a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <I2C_TransferConfig+0x60>)
 8003860:	430b      	orrs	r3, r1
 8003862:	43db      	mvns	r3, r3
 8003864:	ea02 0103 	and.w	r1, r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	03ff63ff 	.word	0x03ff63ff

08003884 <HAL_I2CEx_ConfigAnalogFilter>:
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b20      	cmp	r3, #32
 8003898:	d138      	bne.n	800390c <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e032      	b.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800390c:	2302      	movs	r3, #2
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_I2CEx_ConfigDigitalFilter>:
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	d139      	bne.n	80039a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800393a:	2302      	movs	r3, #2
 800393c:	e033      	b.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2224      	movs	r2, #36	; 0x24
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039a4:	2302      	movs	r3, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_PWREx_GetVoltageRange>:
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <HAL_PWREx_GetVoltageRange+0x18>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40007000 	.word	0x40007000

080039d0 <HAL_PWREx_ControlVoltageScaling>:
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039de:	d130      	bne.n	8003a42 <HAL_PWREx_ControlVoltageScaling+0x72>
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ec:	d038      	beq.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x90>
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039f6:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2232      	movs	r2, #50	; 0x32
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	3301      	adds	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e002      	b.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x4c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	d102      	bne.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f2      	bne.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x46>
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d110      	bne.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x90>
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e00f      	b.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0x92>
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d007      	beq.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x90>
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	2300      	movs	r3, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40007000 	.word	0x40007000
 8003a74:	20000008 	.word	0x20000008
 8003a78:	431bde83 	.word	0x431bde83

08003a7c <HAL_RCC_OscConfig>:
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x14>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f000 bc4f 	b.w	800432e <HAL_RCC_OscConfig+0x8b2>
 8003a90:	4b97      	ldr	r3, [pc, #604]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	4b95      	ldr	r3, [pc, #596]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80e6 	beq.w	8003c7e <HAL_RCC_OscConfig+0x202>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4c>
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	f040 808d 	bne.w	8003bda <HAL_RCC_OscConfig+0x15e>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	f040 8089 	bne.w	8003bda <HAL_RCC_OscConfig+0x15e>
 8003ac8:	4b89      	ldr	r3, [pc, #548]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x66>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x66>
 8003adc:	2301      	movs	r3, #1
 8003ade:	f000 bc26 	b.w	800432e <HAL_RCC_OscConfig+0x8b2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae6:	4b82      	ldr	r3, [pc, #520]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_RCC_OscConfig+0x80>
 8003af2:	4b7f      	ldr	r3, [pc, #508]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afa:	e005      	b.n	8003b08 <HAL_RCC_OscConfig+0x8c>
 8003afc:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d224      	bcs.n	8003b56 <HAL_RCC_OscConfig+0xda>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fdd9 	bl	80046c8 <RCC_SetFlashLatencyFromMSIRange>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_RCC_OscConfig+0xa6>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f000 bc06 	b.w	800432e <HAL_RCC_OscConfig+0x8b2>
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a72      	ldr	r2, [pc, #456]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b70      	ldr	r3, [pc, #448]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	496d      	ldr	r1, [pc, #436]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
 8003b40:	4b6b      	ldr	r3, [pc, #428]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	4968      	ldr	r1, [pc, #416]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	e025      	b.n	8003ba2 <HAL_RCC_OscConfig+0x126>
 8003b56:	4b66      	ldr	r3, [pc, #408]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	f043 0308 	orr.w	r3, r3, #8
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	4960      	ldr	r1, [pc, #384]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	495b      	ldr	r1, [pc, #364]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x126>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fd98 	bl	80046c8 <RCC_SetFlashLatencyFromMSIRange>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x126>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e3c5      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003ba2:	f000 fccd 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4950      	ldr	r1, [pc, #320]	; (8003cf4 <HAL_RCC_OscConfig+0x278>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a4e      	ldr	r2, [pc, #312]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fc1c 	bl	8002404 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d052      	beq.n	8003c7c <HAL_RCC_OscConfig+0x200>
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	e3a9      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d032      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1cc>
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	f7fe fc59 	bl	80024a4 <HAL_GetTick>
 8003bf2:	61b8      	str	r0, [r7, #24]
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x18c>
 8003bf6:	f7fe fc55 	bl	80024a4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x18c>
 8003c04:	2303      	movs	r3, #3
 8003c06:	e392      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003c08:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17a>
 8003c14:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c1a:	f043 0308 	orr.w	r3, r3, #8
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	4930      	ldr	r1, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	492b      	ldr	r1, [pc, #172]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
 8003c46:	e01a      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
 8003c48:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	f7fe fc26 	bl	80024a4 <HAL_GetTick>
 8003c58:	61b8      	str	r0, [r7, #24]
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1f2>
 8003c5c:	f7fe fc22 	bl	80024a4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1f2>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e35f      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1e0>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
 8003c7c:	bf00      	nop
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d073      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2f6>
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_OscConfig+0x220>
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d10e      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x238>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x238>
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d063      	beq.n	8003d70 <HAL_RCC_OscConfig+0x2f4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d15f      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2f4>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e33c      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCC_OscConfig+0x250>
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e025      	b.n	8003d18 <HAL_RCC_OscConfig+0x29c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd4:	d114      	bne.n	8003d00 <HAL_RCC_OscConfig+0x284>
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a02      	ldr	r2, [pc, #8]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e013      	b.n	8003d18 <HAL_RCC_OscConfig+0x29c>
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800ebc8 	.word	0x0800ebc8
 8003cf8:	20000008 	.word	0x20000008
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	4b8f      	ldr	r3, [pc, #572]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a8e      	ldr	r2, [pc, #568]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4b8c      	ldr	r3, [pc, #560]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a8b      	ldr	r2, [pc, #556]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2cc>
 8003d20:	f7fe fbc0 	bl	80024a4 <HAL_GetTick>
 8003d24:	61b8      	str	r0, [r7, #24]
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x2be>
 8003d28:	f7fe fbbc 	bl	80024a4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x2be>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e2f9      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003d3a:	4b81      	ldr	r3, [pc, #516]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2ac>
 8003d46:	e014      	b.n	8003d72 <HAL_RCC_OscConfig+0x2f6>
 8003d48:	f7fe fbac 	bl	80024a4 <HAL_GetTick>
 8003d4c:	61b8      	str	r0, [r7, #24]
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x2e6>
 8003d50:	f7fe fba8 	bl	80024a4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x2e6>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e2e5      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003d62:	4b77      	ldr	r3, [pc, #476]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x2f6>
 8003d70:	bf00      	nop
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d060      	beq.n	8003e40 <HAL_RCC_OscConfig+0x3c4>
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x314>
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_OscConfig+0x342>
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d116      	bne.n	8003dbe <HAL_RCC_OscConfig+0x342>
 8003d90:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_OscConfig+0x32c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_OscConfig+0x32c>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e2c2      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003da8:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	4962      	ldr	r1, [pc, #392]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
 8003dbc:	e040      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d023      	beq.n	8003e0e <HAL_RCC_OscConfig+0x392>
 8003dc6:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a5d      	ldr	r2, [pc, #372]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	f7fe fb67 	bl	80024a4 <HAL_GetTick>
 8003dd6:	61b8      	str	r0, [r7, #24]
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x370>
 8003dda:	f7fe fb63 	bl	80024a4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x370>
 8003de8:	2303      	movs	r3, #3
 8003dea:	e2a0      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003dec:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x35e>
 8003df8:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	494e      	ldr	r1, [pc, #312]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
 8003e0c:	e018      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c4>
 8003e0e:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	f7fe fb43 	bl	80024a4 <HAL_GetTick>
 8003e1e:	61b8      	str	r0, [r7, #24]
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x3b8>
 8003e22:	f7fe fb3f 	bl	80024a4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x3b8>
 8003e30:	2303      	movs	r3, #3
 8003e32:	e27c      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003e34:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3a6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8082 	beq.w	8003f52 <HAL_RCC_OscConfig+0x4d6>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d05f      	beq.n	8003f16 <HAL_RCC_OscConfig+0x49a>
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d037      	beq.n	8003edc <HAL_RCC_OscConfig+0x460>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <HAL_RCC_OscConfig+0x408>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_OscConfig+0x408>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e254      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01b      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x44a>
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e9e:	f7fe fb01 	bl	80024a4 <HAL_GetTick>
 8003ea2:	61b8      	str	r0, [r7, #24]
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x43c>
 8003ea6:	f7fe fafd 	bl	80024a4 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b11      	cmp	r3, #17
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x43c>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e23a      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ef      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x42a>
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ecc:	f023 0210 	bic.w	r2, r3, #16
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	491a      	ldr	r1, [pc, #104]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8003edc:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee2:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003eec:	f7fe fada 	bl	80024a4 <HAL_GetTick>
 8003ef0:	61b8      	str	r0, [r7, #24]
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x48a>
 8003ef4:	f7fe fad6 	bl	80024a4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b11      	cmp	r3, #17
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x48a>
 8003f02:	2303      	movs	r3, #3
 8003f04:	e213      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ef      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x478>
 8003f14:	e01d      	b.n	8003f52 <HAL_RCC_OscConfig+0x4d6>
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f26:	f7fe fabd 	bl	80024a4 <HAL_GetTick>
 8003f2a:	61b8      	str	r0, [r7, #24]
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x4c8>
 8003f2e:	f7fe fab9 	bl	80024a4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b11      	cmp	r3, #17
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCC_OscConfig+0x4c8>
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1f6      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003f40:	40021000 	.word	0x40021000
 8003f44:	4ba9      	ldr	r3, [pc, #676]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ed      	bne.n	8003f2e <HAL_RCC_OscConfig+0x4b2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80bd 	beq.w	80040da <HAL_RCC_OscConfig+0x65e>
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f66:	4ba1      	ldr	r3, [pc, #644]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_RCC_OscConfig+0x514>
 8003f72:	4b9e      	ldr	r3, [pc, #632]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	4a9d      	ldr	r2, [pc, #628]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f7e:	4b9b      	ldr	r3, [pc, #620]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f90:	4b97      	ldr	r3, [pc, #604]	; (80041f0 <HAL_RCC_OscConfig+0x774>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d118      	bne.n	8003fce <HAL_RCC_OscConfig+0x552>
 8003f9c:	4b94      	ldr	r3, [pc, #592]	; (80041f0 <HAL_RCC_OscConfig+0x774>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a93      	ldr	r2, [pc, #588]	; (80041f0 <HAL_RCC_OscConfig+0x774>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	f7fe fa7c 	bl	80024a4 <HAL_GetTick>
 8003fac:	61b8      	str	r0, [r7, #24]
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x546>
 8003fb0:	f7fe fa78 	bl	80024a4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x546>
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1b5      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8003fc2:	4b8b      	ldr	r3, [pc, #556]	; (80041f0 <HAL_RCC_OscConfig+0x774>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x534>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02c      	beq.n	8004034 <HAL_RCC_OscConfig+0x5b8>
 8003fda:	4b84      	ldr	r3, [pc, #528]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	497f      	ldr	r1, [pc, #508]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 8004000:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004008:	f043 0304 	orr.w	r3, r3, #4
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004010:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	4a75      	ldr	r2, [pc, #468]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x5d8>
 8004022:	4b72      	ldr	r3, [pc, #456]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a70      	ldr	r2, [pc, #448]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004032:	e00f      	b.n	8004054 <HAL_RCC_OscConfig+0x5d8>
 8004034:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a6c      	ldr	r2, [pc, #432]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004044:	4b69      	ldr	r3, [pc, #420]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a68      	ldr	r2, [pc, #416]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d016      	beq.n	800408a <HAL_RCC_OscConfig+0x60e>
 800405c:	f7fe fa22 	bl	80024a4 <HAL_GetTick>
 8004060:	61b8      	str	r0, [r7, #24]
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x5fe>
 8004064:	f7fe fa1e 	bl	80024a4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x5fe>
 8004076:	2303      	movs	r3, #3
 8004078:	e159      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ed      	beq.n	8004064 <HAL_RCC_OscConfig+0x5e8>
 8004088:	e01d      	b.n	80040c6 <HAL_RCC_OscConfig+0x64a>
 800408a:	f7fe fa0b 	bl	80024a4 <HAL_GetTick>
 800408e:	61b8      	str	r0, [r7, #24]
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x62c>
 8004092:	f7fe fa07 	bl	80024a4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x62c>
 80040a4:	2303      	movs	r3, #3
 80040a6:	e142      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 80040a8:	4b50      	ldr	r3, [pc, #320]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ed      	bne.n	8004092 <HAL_RCC_OscConfig+0x616>
 80040b6:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	4a4b      	ldr	r2, [pc, #300]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <HAL_RCC_OscConfig+0x65e>
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a46      	ldr	r2, [pc, #280]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03c      	beq.n	8004160 <HAL_RCC_OscConfig+0x6e4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01c      	beq.n	8004128 <HAL_RCC_OscConfig+0x6ac>
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f4:	4a3d      	ldr	r2, [pc, #244]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80040fe:	f7fe f9d1 	bl	80024a4 <HAL_GetTick>
 8004102:	61b8      	str	r0, [r7, #24]
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x69c>
 8004106:	f7fe f9cd 	bl	80024a4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x69c>
 8004114:	2303      	movs	r3, #3
 8004116:	e10a      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8004118:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 800411a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ef      	beq.n	8004106 <HAL_RCC_OscConfig+0x68a>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x6e4>
 8004128:	4b30      	ldr	r3, [pc, #192]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 800412a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412e:	4a2f      	ldr	r2, [pc, #188]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8004138:	f7fe f9b4 	bl	80024a4 <HAL_GetTick>
 800413c:	61b8      	str	r0, [r7, #24]
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x6d6>
 8004140:	f7fe f9b0 	bl	80024a4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x6d6>
 800414e:	2303      	movs	r3, #3
 8004150:	e0ed      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ef      	bne.n	8004140 <HAL_RCC_OscConfig+0x6c4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80e1 	beq.w	800432c <HAL_RCC_OscConfig+0x8b0>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	2b02      	cmp	r3, #2
 8004170:	f040 80b5 	bne.w	80042de <HAL_RCC_OscConfig+0x862>
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0203 	and.w	r2, r3, #3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	429a      	cmp	r2, r3
 8004186:	d124      	bne.n	80041d2 <HAL_RCC_OscConfig+0x756>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	3b01      	subs	r3, #1
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	429a      	cmp	r2, r3
 8004198:	d11b      	bne.n	80041d2 <HAL_RCC_OscConfig+0x756>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d113      	bne.n	80041d2 <HAL_RCC_OscConfig+0x756>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	055b      	lsls	r3, r3, #21
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_OscConfig+0x756>
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	065b      	lsls	r3, r3, #25
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d05f      	beq.n	8004292 <HAL_RCC_OscConfig+0x816>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	d05a      	beq.n	800428e <HAL_RCC_OscConfig+0x812>
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_RCC_OscConfig+0x770>)
 80041de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	f7fe f95e 	bl	80024a4 <HAL_GetTick>
 80041e8:	61b8      	str	r0, [r7, #24]
 80041ea:	e00c      	b.n	8004206 <HAL_RCC_OscConfig+0x78a>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
 80041f4:	f7fe f956 	bl	80024a4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x78a>
 8004202:	2303      	movs	r3, #3
 8004204:	e093      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8004206:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x778>
 8004212:	4b49      	ldr	r3, [pc, #292]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	4b49      	ldr	r3, [pc, #292]	; (800433c <HAL_RCC_OscConfig+0x8c0>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004222:	3a01      	subs	r2, #1
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	4311      	orrs	r1, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800422c:	0212      	lsls	r2, r2, #8
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0552      	lsls	r2, r2, #21
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004240:	0852      	lsrs	r2, r2, #1
 8004242:	3a01      	subs	r2, #1
 8004244:	0652      	lsls	r2, r2, #25
 8004246:	430a      	orrs	r2, r1
 8004248:	493b      	ldr	r1, [pc, #236]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60cb      	str	r3, [r1, #12]
 800424e:	4b3a      	ldr	r3, [pc, #232]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a39      	ldr	r2, [pc, #228]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4a36      	ldr	r2, [pc, #216]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004264:	60d3      	str	r3, [r2, #12]
 8004266:	f7fe f91d 	bl	80024a4 <HAL_GetTick>
 800426a:	61b8      	str	r0, [r7, #24]
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x804>
 800426e:	f7fe f919 	bl	80024a4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x804>
 800427c:	2303      	movs	r3, #3
 800427e:	e056      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8004280:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x7f2>
 800428c:	e04e      	b.n	800432c <HAL_RCC_OscConfig+0x8b0>
 800428e:	2301      	movs	r3, #1
 8004290:	e04d      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d146      	bne.n	800432c <HAL_RCC_OscConfig+0x8b0>
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a25      	ldr	r2, [pc, #148]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b23      	ldr	r3, [pc, #140]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b4:	60d3      	str	r3, [r2, #12]
 80042b6:	f7fe f8f5 	bl	80024a4 <HAL_GetTick>
 80042ba:	61b8      	str	r0, [r7, #24]
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x854>
 80042be:	f7fe f8f1 	bl	80024a4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x854>
 80042cc:	2303      	movs	r3, #3
 80042ce:	e02e      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x842>
 80042dc:	e026      	b.n	800432c <HAL_RCC_OscConfig+0x8b0>
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d021      	beq.n	8004328 <HAL_RCC_OscConfig+0x8ac>
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 80042ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	f7fe f8d8 	bl	80024a4 <HAL_GetTick>
 80042f4:	61b8      	str	r0, [r7, #24]
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x88e>
 80042f8:	f7fe f8d4 	bl	80024a4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x88e>
 8004306:	2303      	movs	r3, #3
 8004308:	e011      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x87c>
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_RCC_OscConfig+0x8bc>)
 800431c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004320:	f023 0303 	bic.w	r3, r3, #3
 8004324:	60d3      	str	r3, [r2, #12]
 8004326:	e001      	b.n	800432c <HAL_RCC_OscConfig+0x8b0>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x8b2>
 800432c:	2300      	movs	r3, #0
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	f99f808c 	.word	0xf99f808c

08004340 <HAL_RCC_ClockConfig>:
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
 8004350:	2301      	movs	r3, #1
 8004352:	e0e7      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 8004354:	4b75      	ldr	r3, [pc, #468]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d910      	bls.n	8004384 <HAL_RCC_ClockConfig+0x44>
 8004362:	4b72      	ldr	r3, [pc, #456]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4970      	ldr	r1, [pc, #448]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
 8004372:	4b6e      	ldr	r3, [pc, #440]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x44>
 8004380:	2301      	movs	r3, #1
 8004382:	e0cf      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x72>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b66      	ldr	r3, [pc, #408]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439c:	429a      	cmp	r2, r3
 800439e:	d908      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x72>
 80043a0:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4960      	ldr	r1, [pc, #384]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d04c      	beq.n	8004458 <HAL_RCC_ClockConfig+0x118>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0x96>
 80043c6:	4b5a      	ldr	r3, [pc, #360]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d121      	bne.n	8004416 <HAL_RCC_ClockConfig+0xd6>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0a6      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
 80043de:	4b54      	ldr	r3, [pc, #336]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d115      	bne.n	8004416 <HAL_RCC_ClockConfig+0xd6>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e09a      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xc6>
 80043f6:	4b4e      	ldr	r3, [pc, #312]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_RCC_ClockConfig+0xd6>
 8004402:	2301      	movs	r3, #1
 8004404:	e08e      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_ClockConfig+0xd6>
 8004412:	2301      	movs	r3, #1
 8004414:	e086      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 8004416:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f023 0203 	bic.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4943      	ldr	r1, [pc, #268]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	608b      	str	r3, [r1, #8]
 8004428:	f7fe f83c 	bl	80024a4 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x106>
 8004430:	f7fe f838 	bl	80024a4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x106>
 8004442:	2303      	movs	r3, #3
 8004444:	e06e      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 8004446:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 020c 	and.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	429a      	cmp	r2, r3
 8004456:	d1eb      	bne.n	8004430 <HAL_RCC_ClockConfig+0xf0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d010      	beq.n	8004486 <HAL_RCC_ClockConfig+0x146>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004470:	429a      	cmp	r2, r3
 8004472:	d208      	bcs.n	8004486 <HAL_RCC_ClockConfig+0x146>
 8004474:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	492b      	ldr	r1, [pc, #172]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d210      	bcs.n	80044b6 <HAL_RCC_ClockConfig+0x176>
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f023 0207 	bic.w	r2, r3, #7
 800449c:	4923      	ldr	r1, [pc, #140]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <HAL_RCC_ClockConfig+0x1ec>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x176>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e036      	b.n	8004524 <HAL_RCC_ClockConfig+0x1e4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x194>
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4918      	ldr	r1, [pc, #96]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x1b4>
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4910      	ldr	r1, [pc, #64]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
 80044f4:	f000 f824 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	490b      	ldr	r1, [pc, #44]	; (8004534 <HAL_RCC_ClockConfig+0x1f4>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <HAL_RCC_ClockConfig+0x1f8>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1fc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7fd ff73 	bl	8002404 <HAL_InitTick>
 800451e:	4603      	mov	r3, r0
 8004520:	72fb      	strb	r3, [r7, #11]
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40022000 	.word	0x40022000
 8004530:	40021000 	.word	0x40021000
 8004534:	0800ebc8 	.word	0x0800ebc8
 8004538:	20000008 	.word	0x20000008
 800453c:	2000000c 	.word	0x2000000c

08004540 <HAL_RCC_GetSysClockFreq>:
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	4b3b      	ldr	r3, [pc, #236]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x34>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b0c      	cmp	r3, #12
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_GetSysClockFreq+0x72>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d11e      	bne.n	80045b2 <HAL_RCC_GetSysClockFreq+0x72>
 8004574:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_RCC_GetSysClockFreq+0x50>
 8004580:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	e005      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x5c>
 8004590:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	4a2b      	ldr	r2, [pc, #172]	; (800464c <HAL_RCC_GetSysClockFreq+0x10c>)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_RCC_GetSysClockFreq+0x88>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x88>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d102      	bne.n	80045be <HAL_RCC_GetSysClockFreq+0x7e>
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	e004      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x88>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_GetSysClockFreq+0x88>
 80045c4:	4b23      	ldr	r3, [pc, #140]	; (8004654 <HAL_RCC_GetSysClockFreq+0x114>)
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d134      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0xf8>
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d003      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0xac>
 80045e4:	e005      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0xb2>
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_RCC_GetSysClockFreq+0x110>)
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e005      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0xb8>
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_GetSysClockFreq+0x114>)
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e002      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0xb8>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	bf00      	nop
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	3301      	adds	r3, #1
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	fb03 f202 	mul.w	r2, r3, r2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_RCC_GetSysClockFreq+0x108>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	0e5b      	lsrs	r3, r3, #25
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	3301      	adds	r3, #1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	4618      	mov	r0, r3
 800463c:	3724      	adds	r7, #36	; 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	0800ebe0 	.word	0x0800ebe0
 8004650:	00f42400 	.word	0x00f42400
 8004654:	007a1200 	.word	0x007a1200

08004658 <HAL_RCC_GetHCLKFreq>:
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_RCC_GetHCLKFreq+0x14>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000008 	.word	0x20000008

08004670 <HAL_RCC_GetPCLK1Freq>:
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
 8004674:	f7ff fff0 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	4904      	ldr	r1, [pc, #16]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004686:	5ccb      	ldrb	r3, [r1, r3]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	0800ebd8 	.word	0x0800ebd8

0800469c <HAL_RCC_GetPCLK2Freq>:
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
 80046a0:	f7ff ffda 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0adb      	lsrs	r3, r3, #11
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4904      	ldr	r1, [pc, #16]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	0800ebd8 	.word	0x0800ebd8

080046c8 <RCC_SetFlashLatencyFromMSIRange>:
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
 80046e0:	f7ff f968 	bl	80039b4 <HAL_PWREx_GetVoltageRange>
 80046e4:	6178      	str	r0, [r7, #20]
 80046e6:	e014      	b.n	8004712 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6593      	str	r3, [r2, #88]	; 0x58
 80046f4:	4b22      	ldr	r3, [pc, #136]	; (8004780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f7ff f958 	bl	80039b4 <HAL_PWREx_GetVoltageRange>
 8004704:	6178      	str	r0, [r7, #20]
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800470c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004710:	6593      	str	r3, [r2, #88]	; 0x58
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004718:	d10b      	bne.n	8004732 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d919      	bls.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2ba0      	cmp	r3, #160	; 0xa0
 8004724:	d902      	bls.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x64>
 8004726:	2302      	movs	r3, #2
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	e013      	b.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800472c:	2301      	movs	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e010      	b.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d902      	bls.n	800473e <RCC_SetFlashLatencyFromMSIRange+0x76>
 8004738:	2303      	movs	r3, #3
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	e00a      	b.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d102      	bne.n	800474a <RCC_SetFlashLatencyFromMSIRange+0x82>
 8004744:	2302      	movs	r3, #2
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	e004      	b.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b70      	cmp	r3, #112	; 0x70
 800474e:	d101      	bne.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8004750:	2301      	movs	r3, #1
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 0207 	bic.w	r2, r3, #7
 800475c:	4909      	ldr	r1, [pc, #36]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
 8004764:	4b07      	ldr	r3, [pc, #28]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	429a      	cmp	r2, r3
 8004770:	d001      	beq.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0xae>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8004776:	2300      	movs	r3, #0
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	40022000 	.word	0x40022000

08004788 <HAL_RCCEx_PeriphCLKConfig>:
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	2300      	movs	r3, #0
 8004792:	74fb      	strb	r3, [r7, #19]
 8004794:	2300      	movs	r3, #0
 8004796:	74bb      	strb	r3, [r7, #18]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 809e 	beq.w	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	747b      	strb	r3, [r7, #17]
 80047aa:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00d      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80047c0:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	4a3f      	ldr	r2, [pc, #252]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ca:	6593      	str	r3, [r2, #88]	; 0x58
 80047cc:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2301      	movs	r3, #1
 80047da:	747b      	strb	r3, [r7, #17]
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a39      	ldr	r2, [pc, #228]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	f7fd fe5c 	bl	80024a4 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	e009      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047f0:	f7fd fe58 	bl	80024a4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d902      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047fe:	2303      	movs	r3, #3
 8004800:	74fb      	strb	r3, [r7, #19]
 8004802:	e005      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004804:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ef      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d15a      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01e      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	429a      	cmp	r2, r3
 8004830:	d019      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485e:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d016      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004870:	f7fd fe18 	bl	80024a4 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	e00b      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004878:	f7fd fe14 	bl	80024a4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d902      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800488a:	2303      	movs	r3, #3
 800488c:	74fb      	strb	r3, [r7, #19]
 800488e:	e006      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ec      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	4904      	ldr	r1, [pc, #16]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048ba:	e009      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40007000 	.word	0x40007000
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
 80048d0:	7c7b      	ldrb	r3, [r7, #17]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80048d6:	4b6e      	ldr	r3, [pc, #440]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a6d      	ldr	r2, [pc, #436]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80048ee:	4b68      	ldr	r3, [pc, #416]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f023 0203 	bic.w	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4964      	ldr	r1, [pc, #400]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004910:	4b5f      	ldr	r3, [pc, #380]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f023 020c 	bic.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	495c      	ldr	r1, [pc, #368]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004932:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4953      	ldr	r1, [pc, #332]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004954:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	494b      	ldr	r1, [pc, #300]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004976:	4b46      	ldr	r3, [pc, #280]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4942      	ldr	r1, [pc, #264]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x226>
 8004998:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	493a      	ldr	r1, [pc, #232]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80049ba:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4931      	ldr	r1, [pc, #196]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80049dc:	4b2c      	ldr	r3, [pc, #176]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	4929      	ldr	r1, [pc, #164]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4920      	ldr	r1, [pc, #128]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	4918      	ldr	r1, [pc, #96]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4a:	60d3      	str	r3, [r2, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	490a      	ldr	r1, [pc, #40]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a76:	d105      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a82:	60d3      	str	r3, [r2, #12]
 8004a84:	7cbb      	ldrb	r3, [r7, #18]
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000

08004a94 <HAL_SPI_Init>:
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_SPI_Init+0x12>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e095      	b.n	8004bd2 <HAL_SPI_Init+0x13e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <HAL_SPI_Init+0x2c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab6:	d009      	beq.n	8004acc <HAL_SPI_Init+0x38>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	61da      	str	r2, [r3, #28]
 8004abe:	e005      	b.n	8004acc <HAL_SPI_Init+0x38>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	611a      	str	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	615a      	str	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_SPI_Init+0x58>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd fa9c 	bl	8002024 <HAL_SPI_MspInit>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b0c:	d902      	bls.n	8004b14 <HAL_SPI_Init+0x80>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e002      	b.n	8004b1a <HAL_SPI_Init+0x86>
 8004b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b22:	d007      	beq.n	8004b34 <HAL_SPI_Init+0xa0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Init+0xa0>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	ea42 0103 	orr.w	r1, r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	f003 0204 	and.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bb0:	ea42 0103 	orr.w	r1, r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	661a      	str	r2, [r3, #96]	; 0x60
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_SPI_Transmit>:
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b088      	sub	sp, #32
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Transmit+0x22>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e15f      	b.n	8004ebc <HAL_SPI_Transmit+0x2e2>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004c04:	f7fd fc4e 	bl	80024a4 <HAL_GetTick>
 8004c08:	61b8      	str	r0, [r7, #24]
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	82fb      	strh	r3, [r7, #22]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Transmit+0x46>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e148      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_SPI_Transmit+0x52>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x58>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e13f      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_SPI_Transmit+0xc4>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d007      	beq.n	8004cbc <HAL_SPI_Transmit+0xe2>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cc4:	d94f      	bls.n	8004d66 <HAL_SPI_Transmit+0x18c>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Transmit+0xfa>
 8004cce:	8afb      	ldrh	r3, [r7, #22]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d142      	bne.n	8004d5a <HAL_SPI_Transmit+0x180>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cf8:	e02f      	b.n	8004d5a <HAL_SPI_Transmit+0x180>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d112      	bne.n	8004d2e <HAL_SPI_Transmit+0x154>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d2c:	e015      	b.n	8004d5a <HAL_SPI_Transmit+0x180>
 8004d2e:	f7fd fbb9 	bl	80024a4 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d803      	bhi.n	8004d46 <HAL_SPI_Transmit+0x16c>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d102      	bne.n	8004d4c <HAL_SPI_Transmit+0x172>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_SPI_Transmit+0x180>
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004d58:	e0ab      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ca      	bne.n	8004cfa <HAL_SPI_Transmit+0x120>
 8004d64:	e080      	b.n	8004e68 <HAL_SPI_Transmit+0x28e>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_Transmit+0x19a>
 8004d6e:	8afb      	ldrh	r3, [r7, #22]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d174      	bne.n	8004e5e <HAL_SPI_Transmit+0x284>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d912      	bls.n	8004da4 <HAL_SPI_Transmit+0x1ca>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b02      	subs	r3, #2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da2:	e05c      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dca:	e048      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d12b      	bne.n	8004e32 <HAL_SPI_Transmit+0x258>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d912      	bls.n	8004e0a <HAL_SPI_Transmit+0x230>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b02      	subs	r3, #2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e08:	e029      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e30:	e015      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
 8004e32:	f7fd fb37 	bl	80024a4 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d803      	bhi.n	8004e4a <HAL_SPI_Transmit+0x270>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d102      	bne.n	8004e50 <HAL_SPI_Transmit+0x276>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_SPI_Transmit+0x284>
 8004e50:	2303      	movs	r3, #3
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004e5c:	e029      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1b1      	bne.n	8004dcc <HAL_SPI_Transmit+0x1f2>
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb69 	bl	8005544 <SPI_EndRxTxTransaction>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_SPI_Transmit+0x2a4>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <HAL_SPI_Transmit+0x2c2>
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x2d0>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e003      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_SPI_TransmitReceive>:
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	807b      	strh	r3, [r7, #2]
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x26>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e20a      	b.n	8005300 <HAL_SPI_TransmitReceive+0x43c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004ef2:	f7fd fad7 	bl	80024a4 <HAL_GetTick>
 8004ef6:	61f8      	str	r0, [r7, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004efe:	76fb      	strb	r3, [r7, #27]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	827b      	strh	r3, [r7, #18]
 8004f0a:	887b      	ldrh	r3, [r7, #2]
 8004f0c:	823b      	strh	r3, [r7, #16]
 8004f0e:	7efb      	ldrb	r3, [r7, #27]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d00e      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x6e>
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1a:	d106      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x66>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x66>
 8004f24:	7efb      	ldrb	r3, [r7, #27]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d003      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x6e>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f30:	e1e0      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x80>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x80>
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x88>
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e1d3      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d003      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x9c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2205      	movs	r2, #5
 8004f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	887a      	ldrh	r2, [r7, #2]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	651a      	str	r2, [r3, #80]	; 0x50
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa2:	d802      	bhi.n	8004faa <HAL_SPI_TransmitReceive+0xe6>
 8004fa4:	8a3b      	ldrh	r3, [r7, #16]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d908      	bls.n	8004fbc <HAL_SPI_TransmitReceive+0xf8>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	e007      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x108>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d007      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x126>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ff2:	f240 8081 	bls.w	80050f8 <HAL_SPI_TransmitReceive+0x234>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_TransmitReceive+0x140>
 8004ffe:	8a7b      	ldrh	r3, [r7, #18]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d16d      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005028:	e05a      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d11b      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x1ac>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x1ac>
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b01      	cmp	r3, #1
 8005046:	d113      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x1ac>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60da      	str	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11c      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x1f4>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x1f4>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	b292      	uxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050b4:	2301      	movs	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	f7fd f9f4 	bl	80024a4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d80b      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
 80050d0:	2303      	movs	r3, #3
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80050de:	e109      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19f      	bne.n	800502a <HAL_SPI_TransmitReceive+0x166>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d199      	bne.n	800502a <HAL_SPI_TransmitReceive+0x166>
 80050f6:	e0e3      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x3fc>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x244>
 8005100:	8a7b      	ldrh	r3, [r7, #18]
 8005102:	2b01      	cmp	r3, #1
 8005104:	f040 80cf 	bne.w	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d912      	bls.n	8005138 <HAL_SPI_TransmitReceive+0x274>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	881a      	ldrh	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b02      	subs	r3, #2
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005136:	e0b6      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800515e:	e0a2      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d134      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x314>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02f      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x314>
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2b01      	cmp	r3, #1
 800517c:	d12c      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x314>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d912      	bls.n	80051ae <HAL_SPI_TransmitReceive+0x2ea>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60da      	str	r2, [r3, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	1c9a      	adds	r2, r3, #2
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b02      	subs	r3, #2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ac:	e012      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x310>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d148      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x3b4>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d042      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x3b4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d923      	bls.n	8005246 <HAL_SPI_TransmitReceive+0x382>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	b292      	uxth	r2, r2
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b02      	subs	r3, #2
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d81f      	bhi.n	8005274 <HAL_SPI_TransmitReceive+0x3b0>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	e016      	b.n	8005274 <HAL_SPI_TransmitReceive+0x3b0>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f103 020c 	add.w	r2, r3, #12
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005274:	2301      	movs	r3, #1
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
 8005278:	f7fd f914 	bl	80024a4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005284:	429a      	cmp	r2, r3
 8005286:	d803      	bhi.n	8005290 <HAL_SPI_TransmitReceive+0x3cc>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x3d2>
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
 8005296:	2303      	movs	r3, #3
 8005298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80052a4:	e026      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f af57 	bne.w	8005160 <HAL_SPI_TransmitReceive+0x29c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f47f af50 	bne.w	8005160 <HAL_SPI_TransmitReceive+0x29c>
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f93d 	bl	8005544 <SPI_EndRxTxTransaction>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x418>
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	661a      	str	r2, [r3, #96]	; 0x60
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_SPI_TransmitReceive+0x428>
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e003      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80052fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005300:	4618      	mov	r0, r3
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <SPI_WaitFlagStateUntilTimeout>:
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	71fb      	strb	r3, [r7, #7]
 8005318:	f7fd f8c4 	bl	80024a4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4413      	add	r3, r2
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	f7fd f8bc 	bl	80024a4 <HAL_GetTick>
 800532c:	61b8      	str	r0, [r7, #24]
 800532e:	4b39      	ldr	r3, [pc, #228]	; (8005414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	015b      	lsls	r3, r3, #5
 8005334:	0d1b      	lsrs	r3, r3, #20
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e054      	b.n	80053ea <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d050      	beq.n	80053ea <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005348:	f7fd f8ac 	bl	80024a4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	429a      	cmp	r2, r3
 8005356:	d902      	bls.n	800535e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d13d      	bne.n	80053da <SPI_WaitFlagStateUntilTimeout+0xd2>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005376:	d111      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d004      	beq.n	800538c <SPI_WaitFlagStateUntilTimeout+0x84>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538a:	d107      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0x94>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a4:	d10f      	bne.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80053d6:	2303      	movs	r3, #3
 80053d8:	e017      	b.n	800540a <SPI_WaitFlagStateUntilTimeout+0x102>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80053e0:	2300      	movs	r3, #0
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d19b      	bne.n	8005340 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005408:	2300      	movs	r3, #0
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000008 	.word	0x20000008

08005418 <SPI_WaitFifoStateUntilTimeout>:
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
 800542a:	f7fd f83b 	bl	80024a4 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	4413      	add	r3, r2
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	f7fd f833 	bl	80024a4 <HAL_GetTick>
 800543e:	6238      	str	r0, [r7, #32]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	4b3d      	ldr	r3, [pc, #244]	; (8005540 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	00da      	lsls	r2, r3, #3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	0d1b      	lsrs	r3, r3, #20
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	e060      	b.n	8005524 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005468:	d107      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0x62>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	75fb      	strb	r3, [r7, #23]
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d050      	beq.n	8005524 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8005482:	f7fd f80f 	bl	80024a4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	429a      	cmp	r2, r3
 8005490:	d902      	bls.n	8005498 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d13d      	bne.n	8005514 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b0:	d111      	bne.n	80054d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ba:	d004      	beq.n	80054c6 <SPI_WaitFifoStateUntilTimeout+0xae>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d107      	bne.n	80054d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	d10f      	bne.n	8005500 <SPI_WaitFifoStateUntilTimeout+0xe8>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005510:	2303      	movs	r3, #3
 8005512:	e010      	b.n	8005536 <SPI_WaitFifoStateUntilTimeout+0x11e>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <SPI_WaitFifoStateUntilTimeout+0x106>
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	3b01      	subs	r3, #1
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d196      	bne.n	8005462 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005534:	2300      	movs	r3, #0
 8005536:	4618      	mov	r0, r3
 8005538:	3728      	adds	r7, #40	; 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000008 	.word	0x20000008

08005544 <SPI_EndRxTxTransaction>:
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff ff5b 	bl	8005418 <SPI_WaitFifoStateUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <SPI_EndRxTxTransaction+0x34>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
 8005574:	2303      	movs	r3, #3
 8005576:	e027      	b.n	80055c8 <SPI_EndRxTxTransaction+0x84>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff fec0 	bl	8005308 <SPI_WaitFlagStateUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <SPI_EndRxTxTransaction+0x5a>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	661a      	str	r2, [r3, #96]	; 0x60
 800559a:	2303      	movs	r3, #3
 800559c:	e014      	b.n	80055c8 <SPI_EndRxTxTransaction+0x84>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff34 	bl	8005418 <SPI_WaitFifoStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x82>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
 80055c2:	2303      	movs	r3, #3
 80055c4:	e000      	b.n	80055c8 <SPI_EndRxTxTransaction+0x84>
 80055c6:	2300      	movs	r3, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_Init>:
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Init+0x12>
 80055de:	2301      	movs	r3, #1
 80055e0:	e040      	b.n	8005664 <HAL_UART_Init+0x94>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_UART_Init+0x28>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fd58 	bl	80020a8 <HAL_UART_MspInit>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Init+0x4c>
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fd8c 	bl	8006134 <UART_AdvFeatureConfig>
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fb2f 	bl	8005c80 <UART_SetConfig>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_UART_Init+0x5c>
 8005628:	2301      	movs	r3, #1
 800562a:	e01b      	b.n	8005664 <HAL_UART_Init+0x94>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fe0b 	bl	8006278 <UART_CheckIdleState>
 8005662:	4603      	mov	r3, r0
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_IRQHandler>:
 800566c:	b580      	push	{r7, lr}
 800566e:	b0ba      	sub	sp, #232	; 0xe8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005692:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005696:	f640 030f 	movw	r3, #2063	; 0x80f
 800569a:	4013      	ands	r3, r2
 800569c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d115      	bne.n	80056d4 <HAL_UART_IRQHandler+0x68>
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00f      	beq.n	80056d4 <HAL_UART_IRQHandler+0x68>
 80056b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_UART_IRQHandler+0x68>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 82ae 	beq.w	8005c26 <HAL_UART_IRQHandler+0x5ba>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
 80056d2:	e2a8      	b.n	8005c26 <HAL_UART_IRQHandler+0x5ba>
 80056d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8117 	beq.w	800590c <HAL_UART_IRQHandler+0x2a0>
 80056de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_UART_IRQHandler+0x8c>
 80056ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056ee:	4b85      	ldr	r3, [pc, #532]	; (8005904 <HAL_UART_IRQHandler+0x298>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 810a 	beq.w	800590c <HAL_UART_IRQHandler+0x2a0>
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <HAL_UART_IRQHandler+0xbc>
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_UART_IRQHandler+0xbc>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	621a      	str	r2, [r3, #32]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d011      	beq.n	8005758 <HAL_UART_IRQHandler+0xec>
 8005734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_UART_IRQHandler+0xec>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2202      	movs	r2, #2
 8005746:	621a      	str	r2, [r3, #32]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d011      	beq.n	8005788 <HAL_UART_IRQHandler+0x11c>
 8005764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <HAL_UART_IRQHandler+0x11c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2204      	movs	r2, #4
 8005776:	621a      	str	r2, [r3, #32]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577e:	f043 0202 	orr.w	r2, r3, #2
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d017      	beq.n	80057c4 <HAL_UART_IRQHandler+0x158>
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_UART_IRQHandler+0x140>
 80057a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <HAL_UART_IRQHandler+0x158>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2208      	movs	r2, #8
 80057b2:	621a      	str	r2, [r3, #32]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ba:	f043 0208 	orr.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <HAL_UART_IRQHandler+0x18a>
 80057d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00c      	beq.n	80057f6 <HAL_UART_IRQHandler+0x18a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e4:	621a      	str	r2, [r3, #32]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8214 	beq.w	8005c2a <HAL_UART_IRQHandler+0x5be>
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <HAL_UART_IRQHandler+0x1be>
 800580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_UART_IRQHandler+0x1be>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_UART_IRQHandler+0x1be>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d005      	beq.n	800584e <HAL_UART_IRQHandler+0x1e2>
 8005842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005846:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d04f      	beq.n	80058ee <HAL_UART_IRQHandler+0x282>
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fe21 	bl	8006496 <UART_EndRxTransfer>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d141      	bne.n	80058e6 <HAL_UART_IRQHandler+0x27a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800586c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800587c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800588e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800589a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1d9      	bne.n	8005862 <HAL_UART_IRQHandler+0x1f6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d013      	beq.n	80058de <HAL_UART_IRQHandler+0x272>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <HAL_UART_IRQHandler+0x29c>)
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc ff6d 	bl	80027a2 <HAL_DMA_Abort_IT>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d017      	beq.n	80058fe <HAL_UART_IRQHandler+0x292>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058d8:	4610      	mov	r0, r2
 80058da:	4798      	blx	r3
 80058dc:	e00f      	b.n	80058fe <HAL_UART_IRQHandler+0x292>
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9b8 	bl	8005c54 <HAL_UART_ErrorCallback>
 80058e4:	e00b      	b.n	80058fe <HAL_UART_IRQHandler+0x292>
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9b4 	bl	8005c54 <HAL_UART_ErrorCallback>
 80058ec:	e007      	b.n	80058fe <HAL_UART_IRQHandler+0x292>
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9b0 	bl	8005c54 <HAL_UART_ErrorCallback>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80058fc:	e195      	b.n	8005c2a <HAL_UART_IRQHandler+0x5be>
 80058fe:	bf00      	nop
 8005900:	e193      	b.n	8005c2a <HAL_UART_IRQHandler+0x5be>
 8005902:	bf00      	nop
 8005904:	04000120 	.word	0x04000120
 8005908:	0800655f 	.word	0x0800655f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005910:	2b01      	cmp	r3, #1
 8005912:	f040 814e 	bne.w	8005bb2 <HAL_UART_IRQHandler+0x546>
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8147 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x546>
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8140 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x546>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2210      	movs	r2, #16
 8005938:	621a      	str	r2, [r3, #32]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	f040 80b8 	bne.w	8005aba <HAL_UART_IRQHandler+0x44e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8005956:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8167 	beq.w	8005c2e <HAL_UART_IRQHandler+0x5c2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800596a:	429a      	cmp	r2, r3
 800596c:	f080 815f 	bcs.w	8005c2e <HAL_UART_IRQHandler+0x5c2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005976:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 8086 	bne.w	8005a98 <HAL_UART_IRQHandler+0x42c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80059be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1da      	bne.n	800598c <HAL_UART_IRQHandler+0x320>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	677b      	str	r3, [r7, #116]	; 0x74
 80059de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	673b      	str	r3, [r7, #112]	; 0x70
 80059e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e1      	bne.n	80059d6 <HAL_UART_IRQHandler+0x36a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	667b      	str	r3, [r7, #100]	; 0x64
 8005a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e3      	bne.n	8005a12 <HAL_UART_IRQHandler+0x3a6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	661a      	str	r2, [r3, #96]	; 0x60
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a68:	f023 0310 	bic.w	r3, r3, #16
 8005a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a7c:	657a      	str	r2, [r7, #84]	; 0x54
 8005a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	653b      	str	r3, [r7, #80]	; 0x50
 8005a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e4      	bne.n	8005a58 <HAL_UART_IRQHandler+0x3ec>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fc fe47 	bl	8002726 <HAL_DMA_Abort>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	665a      	str	r2, [r3, #100]	; 0x64
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8d8 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 8005ab8:	e0b9      	b.n	8005c2e <HAL_UART_IRQHandler+0x5c2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80ab 	beq.w	8005c32 <HAL_UART_IRQHandler+0x5c6>
 8005adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a6 	beq.w	8005c32 <HAL_UART_IRQHandler+0x5c6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b08:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0a:	643a      	str	r2, [r7, #64]	; 0x40
 8005b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e4      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x47a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b40:	633a      	str	r2, [r7, #48]	; 0x30
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e3      	bne.n	8005b1c <HAL_UART_IRQHandler+0x4b0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	669a      	str	r2, [r3, #104]	; 0x68
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0310 	bic.w	r3, r3, #16
 8005b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	61ba      	str	r2, [r7, #24]
 8005b8e:	69b9      	ldr	r1, [r7, #24]
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e4      	bne.n	8005b68 <HAL_UART_IRQHandler+0x4fc>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	665a      	str	r2, [r3, #100]	; 0x64
 8005ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f85c 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 8005bb0:	e03f      	b.n	8005c32 <HAL_UART_IRQHandler+0x5c6>
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00e      	beq.n	8005bdc <HAL_UART_IRQHandler+0x570>
 8005bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_UART_IRQHandler+0x570>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bd2:	621a      	str	r2, [r3, #32]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fd02 	bl	80065de <HAL_UARTEx_WakeupCallback>
 8005bda:	e02d      	b.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00e      	beq.n	8005c06 <HAL_UART_IRQHandler+0x59a>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x59a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01c      	beq.n	8005c36 <HAL_UART_IRQHandler+0x5ca>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
 8005c04:	e017      	b.n	8005c36 <HAL_UART_IRQHandler+0x5ca>
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d012      	beq.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fcb3 	bl	800658a <UART_EndTransmit_IT>
 8005c24:	e008      	b.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c26:	bf00      	nop
 8005c28:	e006      	b.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c2a:	bf00      	nop
 8005c2c:	e004      	b.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <HAL_UART_IRQHandler+0x5cc>
 8005c36:	bf00      	nop
 8005c38:	37e8      	adds	r7, #232	; 0xe8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop

08005c40 <HAL_UART_TxCpltCallback>:
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UART_ErrorCallback>:
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_RxEventCallback>:
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	807b      	strh	r3, [r7, #2]
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_SetConfig>:
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b08a      	sub	sp, #40	; 0x28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b9e      	ldr	r3, [pc, #632]	; (8005f28 <UART_SetConfig+0x2a8>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a93      	ldr	r2, [pc, #588]	; (8005f2c <UART_SetConfig+0x2ac>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <UART_SetConfig+0x6c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a8a      	ldr	r2, [pc, #552]	; (8005f30 <UART_SetConfig+0x2b0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d126      	bne.n	8005d58 <UART_SetConfig+0xd8>
 8005d0a:	4b8a      	ldr	r3, [pc, #552]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d81b      	bhi.n	8005d50 <UART_SetConfig+0xd0>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0xa0>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e0ab      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e0a7      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e0a3      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4e:	e09f      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d56:	e09b      	b.n	8005e90 <UART_SetConfig+0x210>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a76      	ldr	r2, [pc, #472]	; (8005f38 <UART_SetConfig+0x2b8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d138      	bne.n	8005dd4 <UART_SetConfig+0x154>
 8005d62:	4b74      	ldr	r3, [pc, #464]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f003 030c 	and.w	r3, r3, #12
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	d82d      	bhi.n	8005dcc <UART_SetConfig+0x14c>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <UART_SetConfig+0xf8>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005dcd 	.word	0x08005dcd
 8005d84:	08005dcd 	.word	0x08005dcd
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005dcd 	.word	0x08005dcd
 8005d94:	08005dcd 	.word	0x08005dcd
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db2:	e06d      	b.n	8005e90 <UART_SetConfig+0x210>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dba:	e069      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e065      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e061      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e05d      	b.n	8005e90 <UART_SetConfig+0x210>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a58      	ldr	r2, [pc, #352]	; (8005f3c <UART_SetConfig+0x2bc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d125      	bne.n	8005e2a <UART_SetConfig+0x1aa>
 8005dde:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	d016      	beq.n	8005e1a <UART_SetConfig+0x19a>
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d818      	bhi.n	8005e22 <UART_SetConfig+0x1a2>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d00a      	beq.n	8005e0a <UART_SetConfig+0x18a>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d814      	bhi.n	8005e22 <UART_SetConfig+0x1a2>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <UART_SetConfig+0x182>
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d008      	beq.n	8005e12 <UART_SetConfig+0x192>
 8005e00:	e00f      	b.n	8005e22 <UART_SetConfig+0x1a2>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e08:	e042      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e10:	e03e      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e12:	2304      	movs	r3, #4
 8005e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e18:	e03a      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e20:	e036      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e22:	2310      	movs	r3, #16
 8005e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e28:	e032      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a3f      	ldr	r2, [pc, #252]	; (8005f2c <UART_SetConfig+0x2ac>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d12a      	bne.n	8005e8a <UART_SetConfig+0x20a>
 8005e34:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <UART_SetConfig+0x2b4>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e42:	d01a      	beq.n	8005e7a <UART_SetConfig+0x1fa>
 8005e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e48:	d81b      	bhi.n	8005e82 <UART_SetConfig+0x202>
 8005e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4e:	d00c      	beq.n	8005e6a <UART_SetConfig+0x1ea>
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e54:	d815      	bhi.n	8005e82 <UART_SetConfig+0x202>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <UART_SetConfig+0x1e2>
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5e:	d008      	beq.n	8005e72 <UART_SetConfig+0x1f2>
 8005e60:	e00f      	b.n	8005e82 <UART_SetConfig+0x202>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e68:	e012      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e70:	e00e      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e72:	2304      	movs	r3, #4
 8005e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e78:	e00a      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e80:	e006      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e82:	2310      	movs	r3, #16
 8005e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e88:	e002      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e8a:	2310      	movs	r3, #16
 8005e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <UART_SetConfig+0x2ac>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	f040 808a 	bne.w	8005fb0 <UART_SetConfig+0x330>
 8005e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d824      	bhi.n	8005eee <UART_SetConfig+0x26e>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x22c>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005edf 	.word	0x08005edf
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eef 	.word	0x08005eef
 8005ecc:	08005ee7 	.word	0x08005ee7
 8005ed0:	f7fe fbce 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	61f8      	str	r0, [r7, #28]
 8005ed6:	e010      	b.n	8005efa <UART_SetConfig+0x27a>
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <UART_SetConfig+0x2c0>)
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e00d      	b.n	8005efa <UART_SetConfig+0x27a>
 8005ede:	f7fe fb2f 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 8005ee2:	61f8      	str	r0, [r7, #28]
 8005ee4:	e009      	b.n	8005efa <UART_SetConfig+0x27a>
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	e005      	b.n	8005efa <UART_SetConfig+0x27a>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ef8:	bf00      	nop
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8109 	beq.w	8006114 <UART_SetConfig+0x494>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d305      	bcc.n	8005f1e <UART_SetConfig+0x29e>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d912      	bls.n	8005f44 <UART_SetConfig+0x2c4>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f24:	e0f6      	b.n	8006114 <UART_SetConfig+0x494>
 8005f26:	bf00      	nop
 8005f28:	efff69f3 	.word	0xefff69f3
 8005f2c:	40008000 	.word	0x40008000
 8005f30:	40013800 	.word	0x40013800
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40004400 	.word	0x40004400
 8005f3c:	40004800 	.word	0x40004800
 8005f40:	00f42400 	.word	0x00f42400
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2200      	movs	r2, #0
 8005f48:	461c      	mov	r4, r3
 8005f4a:	4615      	mov	r5, r2
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	022b      	lsls	r3, r5, #8
 8005f56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f5a:	0222      	lsls	r2, r4, #8
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	6849      	ldr	r1, [r1, #4]
 8005f60:	0849      	lsrs	r1, r1, #1
 8005f62:	2000      	movs	r0, #0
 8005f64:	4688      	mov	r8, r1
 8005f66:	4681      	mov	r9, r0
 8005f68:	eb12 0a08 	adds.w	sl, r2, r8
 8005f6c:	eb43 0b09 	adc.w	fp, r3, r9
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7e:	4650      	mov	r0, sl
 8005f80:	4659      	mov	r1, fp
 8005f82:	f7fa fe81 	bl	8000c88 <__aeabi_uldivmod>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f94:	d308      	bcc.n	8005fa8 <UART_SetConfig+0x328>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9c:	d204      	bcs.n	8005fa8 <UART_SetConfig+0x328>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	e0b5      	b.n	8006114 <UART_SetConfig+0x494>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fae:	e0b1      	b.n	8006114 <UART_SetConfig+0x494>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb8:	d15d      	bne.n	8006076 <UART_SetConfig+0x3f6>
 8005fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d827      	bhi.n	8006012 <UART_SetConfig+0x392>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <UART_SetConfig+0x348>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	08006013 	.word	0x08006013
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006013 	.word	0x08006013
 8005fe0:	08006013 	.word	0x08006013
 8005fe4:	08006013 	.word	0x08006013
 8005fe8:	0800600b 	.word	0x0800600b
 8005fec:	f7fe fb40 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
 8005ff2:	e014      	b.n	800601e <UART_SetConfig+0x39e>
 8005ff4:	f7fe fb52 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 8005ff8:	61f8      	str	r0, [r7, #28]
 8005ffa:	e010      	b.n	800601e <UART_SetConfig+0x39e>
 8005ffc:	4b4c      	ldr	r3, [pc, #304]	; (8006130 <UART_SetConfig+0x4b0>)
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	e00d      	b.n	800601e <UART_SetConfig+0x39e>
 8006002:	f7fe fa9d 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 8006006:	61f8      	str	r0, [r7, #28]
 8006008:	e009      	b.n	800601e <UART_SetConfig+0x39e>
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e005      	b.n	800601e <UART_SetConfig+0x39e>
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	2301      	movs	r3, #1
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800601c:	bf00      	nop
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d077      	beq.n	8006114 <UART_SetConfig+0x494>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	005a      	lsls	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	441a      	add	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b0f      	cmp	r3, #15
 800603e:	d916      	bls.n	800606e <UART_SetConfig+0x3ee>
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006046:	d212      	bcs.n	800606e <UART_SetConfig+0x3ee>
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f023 030f 	bic.w	r3, r3, #15
 8006050:	82fb      	strh	r3, [r7, #22]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	b29a      	uxth	r2, r3
 800605e:	8afb      	ldrh	r3, [r7, #22]
 8006060:	4313      	orrs	r3, r2
 8006062:	82fb      	strh	r3, [r7, #22]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	8afa      	ldrh	r2, [r7, #22]
 800606a:	60da      	str	r2, [r3, #12]
 800606c:	e052      	b.n	8006114 <UART_SetConfig+0x494>
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006074:	e04e      	b.n	8006114 <UART_SetConfig+0x494>
 8006076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800607a:	2b08      	cmp	r3, #8
 800607c:	d827      	bhi.n	80060ce <UART_SetConfig+0x44e>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x404>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060cf 	.word	0x080060cf
 8006094:	080060bf 	.word	0x080060bf
 8006098:	080060cf 	.word	0x080060cf
 800609c:	080060cf 	.word	0x080060cf
 80060a0:	080060cf 	.word	0x080060cf
 80060a4:	080060c7 	.word	0x080060c7
 80060a8:	f7fe fae2 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 80060ac:	61f8      	str	r0, [r7, #28]
 80060ae:	e014      	b.n	80060da <UART_SetConfig+0x45a>
 80060b0:	f7fe faf4 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 80060b4:	61f8      	str	r0, [r7, #28]
 80060b6:	e010      	b.n	80060da <UART_SetConfig+0x45a>
 80060b8:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <UART_SetConfig+0x4b0>)
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e00d      	b.n	80060da <UART_SetConfig+0x45a>
 80060be:	f7fe fa3f 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 80060c2:	61f8      	str	r0, [r7, #28]
 80060c4:	e009      	b.n	80060da <UART_SetConfig+0x45a>
 80060c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e005      	b.n	80060da <UART_SetConfig+0x45a>
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060d8:	bf00      	nop
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d019      	beq.n	8006114 <UART_SetConfig+0x494>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	085a      	lsrs	r2, r3, #1
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d909      	bls.n	800610e <UART_SetConfig+0x48e>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d205      	bcs.n	800610e <UART_SetConfig+0x48e>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60da      	str	r2, [r3, #12]
 800610c:	e002      	b.n	8006114 <UART_SetConfig+0x494>
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	669a      	str	r2, [r3, #104]	; 0x68
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	; 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612e:	bf00      	nop
 8006130:	00f42400 	.word	0x00f42400

08006134 <UART_AdvFeatureConfig>:
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x2a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x4c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x6e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x90>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0xb2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0xd4>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01a      	beq.n	800624a <UART_AdvFeatureConfig+0x116>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006232:	d10a      	bne.n	800624a <UART_AdvFeatureConfig+0x116>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x138>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <UART_CheckIdleState>:
 8006278:	b580      	push	{r7, lr}
 800627a:	b098      	sub	sp, #96	; 0x60
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006288:	f7fc f90c 	bl	80024a4 <HAL_GetTick>
 800628c:	6578      	str	r0, [r7, #84]	; 0x54
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d12e      	bne.n	80062fa <UART_CheckIdleState+0x82>
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f88c 	bl	80063c8 <UART_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d021      	beq.n	80062fa <UART_CheckIdleState+0x82>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
 80062c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	653b      	str	r3, [r7, #80]	; 0x50
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d4:	647b      	str	r3, [r7, #68]	; 0x44
 80062d6:	643a      	str	r2, [r7, #64]	; 0x40
 80062d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e6      	bne.n	80062b6 <UART_CheckIdleState+0x3e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80062f6:	2303      	movs	r3, #3
 80062f8:	e062      	b.n	80063c0 <UART_CheckIdleState+0x148>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b04      	cmp	r3, #4
 8006306:	d149      	bne.n	800639c <UART_CheckIdleState+0x124>
 8006308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f856 	bl	80063c8 <UART_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d03c      	beq.n	800639c <UART_CheckIdleState+0x124>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	633b      	str	r3, [r7, #48]	; 0x30
 8006342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_CheckIdleState+0xaa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_CheckIdleState+0xdc>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006398:	2303      	movs	r3, #3
 800639a:	e011      	b.n	80063c0 <UART_CheckIdleState+0x148>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	665a      	str	r2, [r3, #100]	; 0x64
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80063be:	2300      	movs	r3, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	3758      	adds	r7, #88	; 0x58
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <UART_WaitOnFlagUntilTimeout>:
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
 80063d8:	e049      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xa6>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d045      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xa6>
 80063e2:	f7fc f85f 	bl	80024a4 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <UART_WaitOnFlagUntilTimeout+0x34>
 80063f8:	2303      	movs	r3, #3
 80063fa:	e048      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xc6>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d031      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xa6>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d110      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0x72>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2208      	movs	r2, #8
 800641e:	621a      	str	r2, [r3, #32]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f838 	bl	8006496 <UART_EndRxTransfer>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2208      	movs	r2, #8
 800642a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8006436:	2301      	movs	r3, #1
 8006438:	e029      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xc6>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d111      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0xa6>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006452:	621a      	str	r2, [r3, #32]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f81e 	bl	8006496 <UART_EndRxTransfer>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800646a:	2303      	movs	r3, #3
 800646c:	e00f      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xc6>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	429a      	cmp	r2, r3
 800648a:	d0a6      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0x12>
 800648c:	2300      	movs	r3, #0
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <UART_EndRxTransfer>:
 8006496:	b480      	push	{r7}
 8006498:	b095      	sub	sp, #84	; 0x54
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	633b      	str	r3, [r7, #48]	; 0x30
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	643b      	str	r3, [r7, #64]	; 0x40
 80064be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e6      	bne.n	800649e <UART_EndRxTransfer+0x8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	623b      	str	r3, [r7, #32]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e5      	bne.n	80064d0 <UART_EndRxTransfer+0x3a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006508:	2b01      	cmp	r3, #1
 800650a:	d118      	bne.n	800653e <UART_EndRxTransfer+0xa8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f023 0310 	bic.w	r3, r3, #16
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	617a      	str	r2, [r7, #20]
 800652e:	6979      	ldr	r1, [r7, #20]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_EndRxTransfer+0x76>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	661a      	str	r2, [r3, #96]	; 0x60
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	669a      	str	r2, [r3, #104]	; 0x68
 8006552:	bf00      	nop
 8006554:	3754      	adds	r7, #84	; 0x54
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <UART_DMAAbortOnError>:
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fb69 	bl	8005c54 <HAL_UART_ErrorCallback>
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_EndTransmit_IT>:
 800658a:	b580      	push	{r7, lr}
 800658c:	b088      	sub	sp, #32
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	617a      	str	r2, [r7, #20]
 80065b4:	6979      	ldr	r1, [r7, #20]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e6      	bne.n	8006592 <UART_EndTransmit_IT+0x8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fb35 	bl	8005c40 <HAL_UART_TxCpltCallback>
 80065d6:	bf00      	nop
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_UARTEx_WakeupCallback>:
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80065f8:	4904      	ldr	r1, [pc, #16]	; (800660c <MX_FATFS_Init+0x18>)
 80065fa:	4805      	ldr	r0, [pc, #20]	; (8006610 <MX_FATFS_Init+0x1c>)
 80065fc:	f002 ffd2 	bl	80095a4 <FATFS_LinkDriver>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	4b03      	ldr	r3, [pc, #12]	; (8006614 <MX_FATFS_Init+0x20>)
 8006606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006608:	bf00      	nop
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200007e0 	.word	0x200007e0
 8006610:	20000014 	.word	0x20000014
 8006614:	200007dc 	.word	0x200007dc

08006618 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f9d1 	bl	80069cc <USER_SPI_initialize>
 800662a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return USER_SPI_status(pdrv); //ADD THIS LINE
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 faaf 	bl	8006ba4 <USER_SPI_status>
 8006646:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8006660:	7bf8      	ldrb	r0, [r7, #15]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	f000 fab2 	bl	8006bd0 <USER_SPI_read>
 800666c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4603      	mov	r3, r0
 8006684:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8006686:	7bf8      	ldrb	r0, [r7, #15]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	f000 fb05 	bl	8006c9c <USER_SPI_write>
 8006692:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4603      	mov	r3, r0
 80066a4:	603a      	str	r2, [r7, #0]
 80066a6:	71fb      	strb	r3, [r7, #7]
 80066a8:	460b      	mov	r3, r1
 80066aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80066ac:	79b9      	ldrb	r1, [r7, #6]
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fb6e 	bl	8006d94 <USER_SPI_ioctl>
 80066b8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80066cc:	f7fb feea 	bl	80024a4 <HAL_GetTick>
 80066d0:	4603      	mov	r3, r0
 80066d2:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <SPI_Timer_On+0x20>)
 80066d4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80066d6:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <SPI_Timer_On+0x24>)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	200007e8 	.word	0x200007e8
 80066e8:	200007ec 	.word	0x200007ec

080066ec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80066f0:	f7fb fed8 	bl	80024a4 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <SPI_Timer_Status+0x24>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <SPI_Timer_Status+0x28>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	bf34      	ite	cc
 8006704:	2301      	movcc	r3, #1
 8006706:	2300      	movcs	r3, #0
 8006708:	b2db      	uxtb	r3, r3
}
 800670a:	4618      	mov	r0, r3
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	200007e8 	.word	0x200007e8
 8006714:	200007ec 	.word	0x200007ec

08006718 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af02      	add	r7, sp, #8
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006722:	f107 020f 	add.w	r2, r7, #15
 8006726:	1df9      	adds	r1, r7, #7
 8006728:	2332      	movs	r3, #50	; 0x32
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2301      	movs	r3, #1
 800672e:	4804      	ldr	r0, [pc, #16]	; (8006740 <xchg_spi+0x28>)
 8006730:	f7fe fbc8 	bl	8004ec4 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	200002b8 	.word	0x200002b8

08006744 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e00a      	b.n	800676a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	18d4      	adds	r4, r2, r3
 800675a:	20ff      	movs	r0, #255	; 0xff
 800675c:	f7ff ffdc 	bl	8006718 <xchg_spi>
 8006760:	4603      	mov	r3, r0
 8006762:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d3f0      	bcc.n	8006754 <rcvr_spi_multi+0x10>
	}
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bd90      	pop	{r4, r7, pc}

0800677c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	b29a      	uxth	r2, r3
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4803      	ldr	r0, [pc, #12]	; (80067a0 <xmit_spi_multi+0x24>)
 8006792:	f7fe fa22 	bl	8004bda <HAL_SPI_Transmit>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	200002b8 	.word	0x200002b8

080067a4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80067ac:	f7fb fe7a 	bl	80024a4 <HAL_GetTick>
 80067b0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80067b6:	20ff      	movs	r0, #255	; 0xff
 80067b8:	f7ff ffae 	bl	8006718 <xchg_spi>
 80067bc:	4603      	mov	r3, r0
 80067be:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	2bff      	cmp	r3, #255	; 0xff
 80067c4:	d007      	beq.n	80067d6 <wait_ready+0x32>
 80067c6:	f7fb fe6d 	bl	80024a4 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d8ef      	bhi.n	80067b6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2bff      	cmp	r3, #255	; 0xff
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80067ee:	2201      	movs	r2, #1
 80067f0:	2110      	movs	r1, #16
 80067f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067f6:	f7fc f987 	bl	8002b08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80067fa:	20ff      	movs	r0, #255	; 0xff
 80067fc:	f7ff ff8c 	bl	8006718 <xchg_spi>

}
 8006800:	bf00      	nop
 8006802:	bd80      	pop	{r7, pc}

08006804 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006808:	2200      	movs	r2, #0
 800680a:	2110      	movs	r1, #16
 800680c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006810:	f7fc f97a 	bl	8002b08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006814:	20ff      	movs	r0, #255	; 0xff
 8006816:	f7ff ff7f 	bl	8006718 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800681a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800681e:	f7ff ffc1 	bl	80067a4 <wait_ready>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <spiselect+0x28>
 8006828:	2301      	movs	r3, #1
 800682a:	e002      	b.n	8006832 <spiselect+0x2e>

	despiselect();
 800682c:	f7ff ffdd 	bl	80067ea <despiselect>
	return 0;	/* Timeout */
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	bd80      	pop	{r7, pc}

08006836 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006840:	20c8      	movs	r0, #200	; 0xc8
 8006842:	f7ff ff3f 	bl	80066c4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006846:	20ff      	movs	r0, #255	; 0xff
 8006848:	f7ff ff66 	bl	8006718 <xchg_spi>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2bff      	cmp	r3, #255	; 0xff
 8006854:	d104      	bne.n	8006860 <rcvr_datablock+0x2a>
 8006856:	f7ff ff49 	bl	80066ec <SPI_Timer_Status>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f2      	bne.n	8006846 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2bfe      	cmp	r3, #254	; 0xfe
 8006864:	d001      	beq.n	800686a <rcvr_datablock+0x34>
 8006866:	2300      	movs	r3, #0
 8006868:	e00a      	b.n	8006880 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff69 	bl	8006744 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006872:	20ff      	movs	r0, #255	; 0xff
 8006874:	f7ff ff50 	bl	8006718 <xchg_spi>
 8006878:	20ff      	movs	r0, #255	; 0xff
 800687a:	f7ff ff4d 	bl	8006718 <xchg_spi>

	return 1;						/* Function succeeded */
 800687e:	2301      	movs	r3, #1
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006898:	f7ff ff84 	bl	80067a4 <wait_ready>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <xmit_datablock+0x1e>
 80068a2:	2300      	movs	r3, #0
 80068a4:	e01e      	b.n	80068e4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff ff35 	bl	8006718 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	2bfd      	cmp	r3, #253	; 0xfd
 80068b2:	d016      	beq.n	80068e2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80068b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff ff5f 	bl	800677c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80068be:	20ff      	movs	r0, #255	; 0xff
 80068c0:	f7ff ff2a 	bl	8006718 <xchg_spi>
 80068c4:	20ff      	movs	r0, #255	; 0xff
 80068c6:	f7ff ff27 	bl	8006718 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80068ca:	20ff      	movs	r0, #255	; 0xff
 80068cc:	f7ff ff24 	bl	8006718 <xchg_spi>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d001      	beq.n	80068e2 <xmit_datablock+0x5a>
 80068de:	2300      	movs	r3, #0
 80068e0:	e000      	b.n	80068e4 <xmit_datablock+0x5c>
	}
	return 1;
 80068e2:	2301      	movs	r3, #1
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	6039      	str	r1, [r7, #0]
 80068f6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80068f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da0e      	bge.n	800691e <send_cmd+0x32>
		cmd &= 0x7F;
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006906:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006908:	2100      	movs	r1, #0
 800690a:	2037      	movs	r0, #55	; 0x37
 800690c:	f7ff ffee 	bl	80068ec <send_cmd>
 8006910:	4603      	mov	r3, r0
 8006912:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d901      	bls.n	800691e <send_cmd+0x32>
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	e051      	b.n	80069c2 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d008      	beq.n	8006936 <send_cmd+0x4a>
		despiselect();
 8006924:	f7ff ff61 	bl	80067ea <despiselect>
		if (!spiselect()) return 0xFF;
 8006928:	f7ff ff6c 	bl	8006804 <spiselect>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <send_cmd+0x4a>
 8006932:	23ff      	movs	r3, #255	; 0xff
 8006934:	e045      	b.n	80069c2 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff feea 	bl	8006718 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	0e1b      	lsrs	r3, r3, #24
 8006948:	b2db      	uxtb	r3, r3
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fee4 	bl	8006718 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fede 	bl	8006718 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	b2db      	uxtb	r3, r3
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fed8 	bl	8006718 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fed3 	bl	8006718 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006972:	2301      	movs	r3, #1
 8006974:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <send_cmd+0x94>
 800697c:	2395      	movs	r3, #149	; 0x95
 800697e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b08      	cmp	r3, #8
 8006984:	d101      	bne.n	800698a <send_cmd+0x9e>
 8006986:	2387      	movs	r3, #135	; 0x87
 8006988:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fec3 	bl	8006718 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2b0c      	cmp	r3, #12
 8006996:	d102      	bne.n	800699e <send_cmd+0xb2>
 8006998:	20ff      	movs	r0, #255	; 0xff
 800699a:	f7ff febd 	bl	8006718 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800699e:	230a      	movs	r3, #10
 80069a0:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80069a2:	20ff      	movs	r0, #255	; 0xff
 80069a4:	f7ff feb8 	bl	8006718 <xchg_spi>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80069ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	da05      	bge.n	80069c0 <send_cmd+0xd4>
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f0      	bne.n	80069a2 <send_cmd+0xb6>

	return res;							/* Return received response */
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <USER_SPI_initialize+0x14>
 80069dc:	2301      	movs	r3, #1
 80069de:	e0d6      	b.n	8006b8e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80069e0:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <USER_SPI_initialize+0x1cc>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <USER_SPI_initialize+0x2a>
 80069ee:	4b6a      	ldr	r3, [pc, #424]	; (8006b98 <USER_SPI_initialize+0x1cc>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	e0cb      	b.n	8006b8e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80069f6:	4b69      	ldr	r3, [pc, #420]	; (8006b9c <USER_SPI_initialize+0x1d0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a00:	4b66      	ldr	r3, [pc, #408]	; (8006b9c <USER_SPI_initialize+0x1d0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006a08:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006a0a:	230a      	movs	r3, #10
 8006a0c:	73fb      	strb	r3, [r7, #15]
 8006a0e:	e005      	b.n	8006a1c <USER_SPI_initialize+0x50>
 8006a10:	20ff      	movs	r0, #255	; 0xff
 8006a12:	f7ff fe81 	bl	8006718 <xchg_spi>
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f6      	bne.n	8006a10 <USER_SPI_initialize+0x44>

	ty = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006a26:	2100      	movs	r1, #0
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f7ff ff5f 	bl	80068ec <send_cmd>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 808b 	bne.w	8006b4c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a3a:	f7ff fe43 	bl	80066c4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006a3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a42:	2008      	movs	r0, #8
 8006a44:	f7ff ff52 	bl	80068ec <send_cmd>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d151      	bne.n	8006af2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
 8006a52:	e00d      	b.n	8006a70 <USER_SPI_initialize+0xa4>
 8006a54:	7bfc      	ldrb	r4, [r7, #15]
 8006a56:	20ff      	movs	r0, #255	; 0xff
 8006a58:	f7ff fe5e 	bl	8006718 <xchg_spi>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f104 0310 	add.w	r3, r4, #16
 8006a64:	443b      	add	r3, r7
 8006a66:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d9ee      	bls.n	8006a54 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006a76:	7abb      	ldrb	r3, [r7, #10]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d167      	bne.n	8006b4c <USER_SPI_initialize+0x180>
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	2baa      	cmp	r3, #170	; 0xaa
 8006a80:	d164      	bne.n	8006b4c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006a82:	bf00      	nop
 8006a84:	f7ff fe32 	bl	80066ec <SPI_Timer_Status>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <USER_SPI_initialize+0xd2>
 8006a8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a92:	20a9      	movs	r0, #169	; 0xa9
 8006a94:	f7ff ff2a 	bl	80068ec <send_cmd>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f2      	bne.n	8006a84 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006a9e:	f7ff fe25 	bl	80066ec <SPI_Timer_Status>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d051      	beq.n	8006b4c <USER_SPI_initialize+0x180>
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	203a      	movs	r0, #58	; 0x3a
 8006aac:	f7ff ff1e 	bl	80068ec <send_cmd>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d14a      	bne.n	8006b4c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	e00d      	b.n	8006ad8 <USER_SPI_initialize+0x10c>
 8006abc:	7bfc      	ldrb	r4, [r7, #15]
 8006abe:	20ff      	movs	r0, #255	; 0xff
 8006ac0:	f7ff fe2a 	bl	8006718 <xchg_spi>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f104 0310 	add.w	r3, r4, #16
 8006acc:	443b      	add	r3, r7
 8006ace:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d9ee      	bls.n	8006abc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006ade:	7a3b      	ldrb	r3, [r7, #8]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USER_SPI_initialize+0x120>
 8006ae8:	230c      	movs	r3, #12
 8006aea:	e000      	b.n	8006aee <USER_SPI_initialize+0x122>
 8006aec:	2304      	movs	r3, #4
 8006aee:	737b      	strb	r3, [r7, #13]
 8006af0:	e02c      	b.n	8006b4c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006af2:	2100      	movs	r1, #0
 8006af4:	20a9      	movs	r0, #169	; 0xa9
 8006af6:	f7ff fef9 	bl	80068ec <send_cmd>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d804      	bhi.n	8006b0a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006b00:	2302      	movs	r3, #2
 8006b02:	737b      	strb	r3, [r7, #13]
 8006b04:	23a9      	movs	r3, #169	; 0xa9
 8006b06:	73bb      	strb	r3, [r7, #14]
 8006b08:	e003      	b.n	8006b12 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	737b      	strb	r3, [r7, #13]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006b12:	bf00      	nop
 8006b14:	f7ff fdea 	bl	80066ec <SPI_Timer_Status>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <USER_SPI_initialize+0x162>
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fee2 	bl	80068ec <send_cmd>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1f2      	bne.n	8006b14 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006b2e:	f7ff fddd 	bl	80066ec <SPI_Timer_Status>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <USER_SPI_initialize+0x17c>
 8006b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b3c:	2010      	movs	r0, #16
 8006b3e:	f7ff fed5 	bl	80068ec <send_cmd>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <USER_SPI_initialize+0x180>
				ty = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <USER_SPI_initialize+0x1d4>)
 8006b4e:	7b7b      	ldrb	r3, [r7, #13]
 8006b50:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006b52:	f7ff fe4a 	bl	80067ea <despiselect>

	if (ty) {			/* OK */
 8006b56:	7b7b      	ldrb	r3, [r7, #13]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d012      	beq.n	8006b82 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <USER_SPI_initialize+0x1d0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <USER_SPI_initialize+0x1d0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0210 	orr.w	r2, r2, #16
 8006b6e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006b70:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <USER_SPI_initialize+0x1cc>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <USER_SPI_initialize+0x1cc>)
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e002      	b.n	8006b88 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <USER_SPI_initialize+0x1cc>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <USER_SPI_initialize+0x1cc>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000028 	.word	0x20000028
 8006b9c:	200002b8 	.word	0x200002b8
 8006ba0:	200007e4 	.word	0x200007e4

08006ba4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <USER_SPI_status+0x14>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e002      	b.n	8006bbe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <USER_SPI_status+0x28>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b2db      	uxtb	r3, r3
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000028 	.word	0x20000028

08006bd0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <USER_SPI_read+0x1c>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <USER_SPI_read+0x20>
 8006bec:	2304      	movs	r3, #4
 8006bee:	e04d      	b.n	8006c8c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <USER_SPI_read+0xc4>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <USER_SPI_read+0x32>
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e044      	b.n	8006c8c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006c02:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <USER_SPI_read+0xc8>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <USER_SPI_read+0x44>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	025b      	lsls	r3, r3, #9
 8006c12:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d111      	bne.n	8006c3e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	2011      	movs	r0, #17
 8006c1e:	f7ff fe65 	bl	80068ec <send_cmd>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d129      	bne.n	8006c7c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c2c:	68b8      	ldr	r0, [r7, #8]
 8006c2e:	f7ff fe02 	bl	8006836 <rcvr_datablock>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d021      	beq.n	8006c7c <USER_SPI_read+0xac>
			count = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	e01e      	b.n	8006c7c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	2012      	movs	r0, #18
 8006c42:	f7ff fe53 	bl	80068ec <send_cmd>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d117      	bne.n	8006c7c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c50:	68b8      	ldr	r0, [r7, #8]
 8006c52:	f7ff fdf0 	bl	8006836 <rcvr_datablock>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <USER_SPI_read+0xa2>
				buff += 512;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1ed      	bne.n	8006c4c <USER_SPI_read+0x7c>
 8006c70:	e000      	b.n	8006c74 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006c72:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006c74:	2100      	movs	r1, #0
 8006c76:	200c      	movs	r0, #12
 8006c78:	f7ff fe38 	bl	80068ec <send_cmd>
		}
	}
	despiselect();
 8006c7c:	f7ff fdb5 	bl	80067ea <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf14      	ite	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000028 	.word	0x20000028
 8006c98:	200007e4 	.word	0x200007e4

08006c9c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4603      	mov	r3, r0
 8006caa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <USER_SPI_write+0x1c>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <USER_SPI_write+0x20>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	e063      	b.n	8006d84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006cbc:	4b33      	ldr	r3, [pc, #204]	; (8006d8c <USER_SPI_write+0xf0>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <USER_SPI_write+0x32>
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e05a      	b.n	8006d84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006cce:	4b2f      	ldr	r3, [pc, #188]	; (8006d8c <USER_SPI_write+0xf0>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <USER_SPI_write+0x44>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e051      	b.n	8006d84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <USER_SPI_write+0xf4>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <USER_SPI_write+0x56>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	025b      	lsls	r3, r3, #9
 8006cf0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d110      	bne.n	8006d1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	2018      	movs	r0, #24
 8006cfc:	f7ff fdf6 	bl	80068ec <send_cmd>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d136      	bne.n	8006d74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006d06:	21fe      	movs	r1, #254	; 0xfe
 8006d08:	68b8      	ldr	r0, [r7, #8]
 8006d0a:	f7ff fdbd 	bl	8006888 <xmit_datablock>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02f      	beq.n	8006d74 <USER_SPI_write+0xd8>
			count = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	e02c      	b.n	8006d74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <USER_SPI_write+0xf4>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f003 0306 	and.w	r3, r3, #6
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <USER_SPI_write+0x92>
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	2097      	movs	r0, #151	; 0x97
 8006d2a:	f7ff fddf 	bl	80068ec <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	2019      	movs	r0, #25
 8006d32:	f7ff fddb 	bl	80068ec <send_cmd>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d11b      	bne.n	8006d74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006d3c:	21fc      	movs	r1, #252	; 0xfc
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f7ff fda2 	bl	8006888 <xmit_datablock>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <USER_SPI_write+0xc4>
				buff += 512;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1ee      	bne.n	8006d3c <USER_SPI_write+0xa0>
 8006d5e:	e000      	b.n	8006d62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006d60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006d62:	21fd      	movs	r1, #253	; 0xfd
 8006d64:	2000      	movs	r0, #0
 8006d66:	f7ff fd8f 	bl	8006888 <xmit_datablock>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <USER_SPI_write+0xd8>
 8006d70:	2301      	movs	r3, #1
 8006d72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006d74:	f7ff fd39 	bl	80067ea <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf14      	ite	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	2300      	moveq	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000028 	.word	0x20000028
 8006d90:	200007e4 	.word	0x200007e4

08006d94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08c      	sub	sp, #48	; 0x30
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	603a      	str	r2, [r7, #0]
 8006d9e:	71fb      	strb	r3, [r7, #7]
 8006da0:	460b      	mov	r3, r1
 8006da2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <USER_SPI_ioctl+0x1a>
 8006daa:	2304      	movs	r3, #4
 8006dac:	e15a      	b.n	8007064 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006dae:	4baf      	ldr	r3, [pc, #700]	; (800706c <USER_SPI_ioctl+0x2d8>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <USER_SPI_ioctl+0x2c>
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e151      	b.n	8007064 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006dc6:	79bb      	ldrb	r3, [r7, #6]
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	f200 8136 	bhi.w	800703a <USER_SPI_ioctl+0x2a6>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <USER_SPI_ioctl+0x40>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006de9 	.word	0x08006de9
 8006dd8:	08006dfd 	.word	0x08006dfd
 8006ddc:	0800703b 	.word	0x0800703b
 8006de0:	08006ea9 	.word	0x08006ea9
 8006de4:	08006f9f 	.word	0x08006f9f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006de8:	f7ff fd0c 	bl	8006804 <spiselect>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8127 	beq.w	8007042 <USER_SPI_ioctl+0x2ae>
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006dfa:	e122      	b.n	8007042 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	2009      	movs	r0, #9
 8006e00:	f7ff fd74 	bl	80068ec <send_cmd>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 811d 	bne.w	8007046 <USER_SPI_ioctl+0x2b2>
 8006e0c:	f107 030c 	add.w	r3, r7, #12
 8006e10:	2110      	movs	r1, #16
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fd0f 	bl	8006836 <rcvr_datablock>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8113 	beq.w	8007046 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006e20:	7b3b      	ldrb	r3, [r7, #12]
 8006e22:	099b      	lsrs	r3, r3, #6
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d111      	bne.n	8006e4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006e2a:	7d7b      	ldrb	r3, [r7, #21]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	7d3b      	ldrb	r3, [r7, #20]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	4413      	add	r3, r2
 8006e34:	461a      	mov	r2, r3
 8006e36:	7cfb      	ldrb	r3, [r7, #19]
 8006e38:	041b      	lsls	r3, r3, #16
 8006e3a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006e3e:	4413      	add	r3, r2
 8006e40:	3301      	adds	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	029a      	lsls	r2, r3, #10
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e028      	b.n	8006ea0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006e4e:	7c7b      	ldrb	r3, [r7, #17]
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	7dbb      	ldrb	r3, [r7, #22]
 8006e58:	09db      	lsrs	r3, r3, #7
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	7d7b      	ldrb	r3, [r7, #21]
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 0306 	and.w	r3, r3, #6
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	3302      	adds	r3, #2
 8006e72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006e76:	7d3b      	ldrb	r3, [r7, #20]
 8006e78:	099b      	lsrs	r3, r3, #6
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	7cfb      	ldrb	r3, [r7, #19]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	441a      	add	r2, r3
 8006e84:	7cbb      	ldrb	r3, [r7, #18]
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006e92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e96:	3b09      	subs	r3, #9
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	409a      	lsls	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006ea6:	e0ce      	b.n	8007046 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006ea8:	4b71      	ldr	r3, [pc, #452]	; (8007070 <USER_SPI_ioctl+0x2dc>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d031      	beq.n	8006f18 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	208d      	movs	r0, #141	; 0x8d
 8006eb8:	f7ff fd18 	bl	80068ec <send_cmd>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 80c3 	bne.w	800704a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006ec4:	20ff      	movs	r0, #255	; 0xff
 8006ec6:	f7ff fc27 	bl	8006718 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006eca:	f107 030c 	add.w	r3, r7, #12
 8006ece:	2110      	movs	r1, #16
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fcb0 	bl	8006836 <rcvr_datablock>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80b6 	beq.w	800704a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006ede:	2330      	movs	r3, #48	; 0x30
 8006ee0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006ee4:	e007      	b.n	8006ef6 <USER_SPI_ioctl+0x162>
 8006ee6:	20ff      	movs	r0, #255	; 0xff
 8006ee8:	f7ff fc16 	bl	8006718 <xchg_spi>
 8006eec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f3      	bne.n	8006ee6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006efe:	7dbb      	ldrb	r3, [r7, #22]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	2310      	movs	r3, #16
 8006f08:	fa03 f202 	lsl.w	r2, r3, r2
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006f16:	e098      	b.n	800704a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006f18:	2100      	movs	r1, #0
 8006f1a:	2009      	movs	r0, #9
 8006f1c:	f7ff fce6 	bl	80068ec <send_cmd>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f040 8091 	bne.w	800704a <USER_SPI_ioctl+0x2b6>
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	2110      	movs	r1, #16
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff fc81 	bl	8006836 <rcvr_datablock>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8087 	beq.w	800704a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006f3c:	4b4c      	ldr	r3, [pc, #304]	; (8007070 <USER_SPI_ioctl+0x2dc>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006f48:	7dbb      	ldrb	r3, [r7, #22]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006f50:	7dfa      	ldrb	r2, [r7, #23]
 8006f52:	09d2      	lsrs	r2, r2, #7
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	4413      	add	r3, r2
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	7e7b      	ldrb	r3, [r7, #25]
 8006f5c:	099b      	lsrs	r3, r3, #6
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	3b01      	subs	r3, #1
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	461a      	mov	r2, r3
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e013      	b.n	8006f96 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	109b      	asrs	r3, r3, #2
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	3301      	adds	r3, #1
 8006f7a:	7dfa      	ldrb	r2, [r7, #23]
 8006f7c:	00d2      	lsls	r2, r2, #3
 8006f7e:	f002 0218 	and.w	r2, r2, #24
 8006f82:	7df9      	ldrb	r1, [r7, #23]
 8006f84:	0949      	lsrs	r1, r1, #5
 8006f86:	b2c9      	uxtb	r1, r1
 8006f88:	440a      	add	r2, r1
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	fb02 f303 	mul.w	r3, r2, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006f9c:	e055      	b.n	800704a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006f9e:	4b34      	ldr	r3, [pc, #208]	; (8007070 <USER_SPI_ioctl+0x2dc>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 0306 	and.w	r3, r3, #6
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d051      	beq.n	800704e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006faa:	f107 020c 	add.w	r2, r7, #12
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	210b      	movs	r1, #11
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff feee 	bl	8006d94 <USER_SPI_ioctl>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d149      	bne.n	8007052 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006fbe:	7b3b      	ldrb	r3, [r7, #12]
 8006fc0:	099b      	lsrs	r3, r3, #6
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USER_SPI_ioctl+0x23e>
 8006fc8:	7dbb      	ldrb	r3, [r7, #22]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d041      	beq.n	8007056 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	623b      	str	r3, [r7, #32]
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006fe2:	4b23      	ldr	r3, [pc, #140]	; (8007070 <USER_SPI_ioctl+0x2dc>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d105      	bne.n	8006ffa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	025b      	lsls	r3, r3, #9
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	025b      	lsls	r3, r3, #9
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ffc:	2020      	movs	r0, #32
 8006ffe:	f7ff fc75 	bl	80068ec <send_cmd>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d128      	bne.n	800705a <USER_SPI_ioctl+0x2c6>
 8007008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800700a:	2021      	movs	r0, #33	; 0x21
 800700c:	f7ff fc6e 	bl	80068ec <send_cmd>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d121      	bne.n	800705a <USER_SPI_ioctl+0x2c6>
 8007016:	2100      	movs	r1, #0
 8007018:	2026      	movs	r0, #38	; 0x26
 800701a:	f7ff fc67 	bl	80068ec <send_cmd>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11a      	bne.n	800705a <USER_SPI_ioctl+0x2c6>
 8007024:	f247 5030 	movw	r0, #30000	; 0x7530
 8007028:	f7ff fbbc 	bl	80067a4 <wait_ready>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d013      	beq.n	800705a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007032:	2300      	movs	r3, #0
 8007034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007038:	e00f      	b.n	800705a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800703a:	2304      	movs	r3, #4
 800703c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007040:	e00c      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		break;
 8007042:	bf00      	nop
 8007044:	e00a      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		break;
 8007046:	bf00      	nop
 8007048:	e008      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		break;
 800704a:	bf00      	nop
 800704c:	e006      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800704e:	bf00      	nop
 8007050:	e004      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <USER_SPI_ioctl+0x2c8>
		break;
 800705a:	bf00      	nop
	}

	despiselect();
 800705c:	f7ff fbc5 	bl	80067ea <despiselect>

	return res;
 8007060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007064:	4618      	mov	r0, r3
 8007066:	3730      	adds	r7, #48	; 0x30
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000028 	.word	0x20000028
 8007070:	200007e4 	.word	0x200007e4

08007074 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <disk_status+0x30>)
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	79fa      	ldrb	r2, [r7, #7]
 800708c:	4905      	ldr	r1, [pc, #20]	; (80070a4 <disk_status+0x30>)
 800708e:	440a      	add	r2, r1
 8007090:	7a12      	ldrb	r2, [r2, #8]
 8007092:	4610      	mov	r0, r2
 8007094:	4798      	blx	r3
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
  return stat;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000818 	.word	0x20000818

080070a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	4a0d      	ldr	r2, [pc, #52]	; (80070f0 <disk_initialize+0x48>)
 80070ba:	5cd3      	ldrb	r3, [r2, r3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d111      	bne.n	80070e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <disk_initialize+0x48>)
 80070c4:	2101      	movs	r1, #1
 80070c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <disk_initialize+0x48>)
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	79fa      	ldrb	r2, [r7, #7]
 80070d6:	4906      	ldr	r1, [pc, #24]	; (80070f0 <disk_initialize+0x48>)
 80070d8:	440a      	add	r2, r1
 80070da:	7a12      	ldrb	r2, [r2, #8]
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000818 	.word	0x20000818

080070f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <disk_read+0x3c>)
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	689c      	ldr	r4, [r3, #8]
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	4a07      	ldr	r2, [pc, #28]	; (8007130 <disk_read+0x3c>)
 8007114:	4413      	add	r3, r2
 8007116:	7a18      	ldrb	r0, [r3, #8]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	47a0      	blx	r4
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]
  return res;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd90      	pop	{r4, r7, pc}
 800712e:	bf00      	nop
 8007130:	20000818 	.word	0x20000818

08007134 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007134:	b590      	push	{r4, r7, lr}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	4a0a      	ldr	r2, [pc, #40]	; (8007170 <disk_write+0x3c>)
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68dc      	ldr	r4, [r3, #12]
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	4a07      	ldr	r2, [pc, #28]	; (8007170 <disk_write+0x3c>)
 8007154:	4413      	add	r3, r2
 8007156:	7a18      	ldrb	r0, [r3, #8]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	47a0      	blx	r4
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]
  return res;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
}
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}
 800716e:	bf00      	nop
 8007170:	20000818 	.word	0x20000818

08007174 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	603a      	str	r2, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
 8007180:	460b      	mov	r3, r1
 8007182:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	4a09      	ldr	r2, [pc, #36]	; (80071ac <disk_ioctl+0x38>)
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	79fa      	ldrb	r2, [r7, #7]
 8007192:	4906      	ldr	r1, [pc, #24]	; (80071ac <disk_ioctl+0x38>)
 8007194:	440a      	add	r2, r1
 8007196:	7a10      	ldrb	r0, [r2, #8]
 8007198:	79b9      	ldrb	r1, [r7, #6]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4798      	blx	r3
 800719e:	4603      	mov	r3, r0
 80071a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20000818 	.word	0x20000818

080071b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3301      	adds	r3, #1
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80071c0:	89fb      	ldrh	r3, [r7, #14]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	b21a      	sxth	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b21b      	sxth	r3, r3
 80071d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80071d2:	89fb      	ldrh	r3, [r7, #14]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3303      	adds	r3, #3
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	3202      	adds	r2, #2
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	3201      	adds	r2, #1
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
	return rv;
 8007218:	68fb      	ldr	r3, [r7, #12]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	887a      	ldrh	r2, [r7, #2]
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	887a      	ldrh	r2, [r7, #2]
 800724c:	b2d2      	uxtb	r2, r2
 800724e:	701a      	strb	r2, [r3, #0]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	0a1b      	lsrs	r3, r3, #8
 8007276:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	1c53      	adds	r3, r2, #1
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	6179      	str	r1, [r7, #20]
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	607b      	str	r3, [r7, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f1      	bne.n	80072ce <mem_cpy+0x1a>
	}
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80072f6:	b480      	push	{r7}
 80072f8:	b087      	sub	sp, #28
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	617a      	str	r2, [r7, #20]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3b01      	subs	r3, #1
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1f3      	bne.n	8007306 <mem_set+0x10>
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800732c:	b480      	push	{r7}
 800732e:	b089      	sub	sp, #36	; 0x24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	61fa      	str	r2, [r7, #28]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	4619      	mov	r1, r3
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	61ba      	str	r2, [r7, #24]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	1acb      	subs	r3, r1, r3
 8007358:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3b01      	subs	r3, #1
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <mem_cmp+0x40>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0eb      	beq.n	8007344 <mem_cmp+0x18>

	return r;
 800736c:	697b      	ldr	r3, [r7, #20]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3724      	adds	r7, #36	; 0x24
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007384:	e002      	b.n	800738c <chk_chr+0x12>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3301      	adds	r3, #1
 800738a:	607b      	str	r3, [r7, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <chk_chr+0x26>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	4293      	cmp	r3, r2
 800739e:	d1f2      	bne.n	8007386 <chk_chr+0xc>
	return *str;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	781b      	ldrb	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	e029      	b.n	8007418 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <chk_lock+0xb4>)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4413      	add	r3, r2
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01d      	beq.n	800740e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073d2:	4a24      	ldr	r2, [pc, #144]	; (8007464 <chk_lock+0xb4>)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	4413      	add	r3, r2
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d116      	bne.n	8007412 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80073e4:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <chk_lock+0xb4>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	4413      	add	r3, r2
 80073ec:	3304      	adds	r3, #4
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d10c      	bne.n	8007412 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073f8:	4a1a      	ldr	r2, [pc, #104]	; (8007464 <chk_lock+0xb4>)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	4413      	add	r3, r2
 8007400:	3308      	adds	r3, #8
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007408:	429a      	cmp	r2, r3
 800740a:	d102      	bne.n	8007412 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800740c:	e007      	b.n	800741e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800740e:	2301      	movs	r3, #1
 8007410:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d9d2      	bls.n	80073c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d109      	bne.n	8007438 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <chk_lock+0x80>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d101      	bne.n	8007434 <chk_lock+0x84>
 8007430:	2300      	movs	r3, #0
 8007432:	e010      	b.n	8007456 <chk_lock+0xa6>
 8007434:	2312      	movs	r3, #18
 8007436:	e00e      	b.n	8007456 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d108      	bne.n	8007450 <chk_lock+0xa0>
 800743e:	4a09      	ldr	r2, [pc, #36]	; (8007464 <chk_lock+0xb4>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	4413      	add	r3, r2
 8007446:	330c      	adds	r3, #12
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744e:	d101      	bne.n	8007454 <chk_lock+0xa4>
 8007450:	2310      	movs	r3, #16
 8007452:	e000      	b.n	8007456 <chk_lock+0xa6>
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	200007f8 	.word	0x200007f8

08007468 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e002      	b.n	800747a <enq_lock+0x12>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3301      	adds	r3, #1
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d806      	bhi.n	800748e <enq_lock+0x26>
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <enq_lock+0x40>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f2      	bne.n	8007474 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b02      	cmp	r3, #2
 8007492:	bf14      	ite	ne
 8007494:	2301      	movne	r3, #1
 8007496:	2300      	moveq	r3, #0
 8007498:	b2db      	uxtb	r3, r3
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	200007f8 	.word	0x200007f8

080074ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e01f      	b.n	80074fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80074bc:	4a41      	ldr	r2, [pc, #260]	; (80075c4 <inc_lock+0x118>)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	4413      	add	r3, r2
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d113      	bne.n	80074f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80074ce:	4a3d      	ldr	r2, [pc, #244]	; (80075c4 <inc_lock+0x118>)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	4413      	add	r3, r2
 80074d6:	3304      	adds	r3, #4
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80074de:	429a      	cmp	r2, r3
 80074e0:	d109      	bne.n	80074f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80074e2:	4a38      	ldr	r2, [pc, #224]	; (80075c4 <inc_lock+0x118>)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	4413      	add	r3, r2
 80074ea:	3308      	adds	r3, #8
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d006      	beq.n	8007504 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d9dc      	bls.n	80074bc <inc_lock+0x10>
 8007502:	e000      	b.n	8007506 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007504:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d132      	bne.n	8007572 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e002      	b.n	8007518 <inc_lock+0x6c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d806      	bhi.n	800752c <inc_lock+0x80>
 800751e:	4a29      	ldr	r2, [pc, #164]	; (80075c4 <inc_lock+0x118>)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	4413      	add	r3, r2
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f2      	bne.n	8007512 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d101      	bne.n	8007536 <inc_lock+0x8a>
 8007532:	2300      	movs	r3, #0
 8007534:	e040      	b.n	80075b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4922      	ldr	r1, [pc, #136]	; (80075c4 <inc_lock+0x118>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	440b      	add	r3, r1
 8007542:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	491e      	ldr	r1, [pc, #120]	; (80075c4 <inc_lock+0x118>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	440b      	add	r3, r1
 8007550:	3304      	adds	r3, #4
 8007552:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	695a      	ldr	r2, [r3, #20]
 8007558:	491a      	ldr	r1, [pc, #104]	; (80075c4 <inc_lock+0x118>)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	440b      	add	r3, r1
 8007560:	3308      	adds	r3, #8
 8007562:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007564:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <inc_lock+0x118>)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	4413      	add	r3, r2
 800756c:	330c      	adds	r3, #12
 800756e:	2200      	movs	r2, #0
 8007570:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <inc_lock+0xe0>
 8007578:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <inc_lock+0x118>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	4413      	add	r3, r2
 8007580:	330c      	adds	r3, #12
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <inc_lock+0xe0>
 8007588:	2300      	movs	r3, #0
 800758a:	e015      	b.n	80075b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d108      	bne.n	80075a4 <inc_lock+0xf8>
 8007592:	4a0c      	ldr	r2, [pc, #48]	; (80075c4 <inc_lock+0x118>)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	4413      	add	r3, r2
 800759a:	330c      	adds	r3, #12
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	e001      	b.n	80075a8 <inc_lock+0xfc>
 80075a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075a8:	4906      	ldr	r1, [pc, #24]	; (80075c4 <inc_lock+0x118>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	440b      	add	r3, r1
 80075b0:	330c      	adds	r3, #12
 80075b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	200007f8 	.word	0x200007f8

080075c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d825      	bhi.n	8007628 <dec_lock+0x60>
		n = Files[i].ctr;
 80075dc:	4a17      	ldr	r2, [pc, #92]	; (800763c <dec_lock+0x74>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	4413      	add	r3, r2
 80075e4:	330c      	adds	r3, #12
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f0:	d101      	bne.n	80075f6 <dec_lock+0x2e>
 80075f2:	2300      	movs	r3, #0
 80075f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80075f6:	89fb      	ldrh	r3, [r7, #14]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <dec_lock+0x3a>
 80075fc:	89fb      	ldrh	r3, [r7, #14]
 80075fe:	3b01      	subs	r3, #1
 8007600:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007602:	4a0e      	ldr	r2, [pc, #56]	; (800763c <dec_lock+0x74>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	330c      	adds	r3, #12
 800760c:	89fa      	ldrh	r2, [r7, #14]
 800760e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007610:	89fb      	ldrh	r3, [r7, #14]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d105      	bne.n	8007622 <dec_lock+0x5a>
 8007616:	4a09      	ldr	r2, [pc, #36]	; (800763c <dec_lock+0x74>)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	4413      	add	r3, r2
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	737b      	strb	r3, [r7, #13]
 8007626:	e001      	b.n	800762c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007628:	2302      	movs	r3, #2
 800762a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800762c:	7b7b      	ldrb	r3, [r7, #13]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	200007f8 	.word	0x200007f8

08007640 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e010      	b.n	8007670 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800764e:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <clear_lock+0x44>)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d105      	bne.n	800766a <clear_lock+0x2a>
 800765e:	4a09      	ldr	r2, [pc, #36]	; (8007684 <clear_lock+0x44>)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	4413      	add	r3, r2
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d9eb      	bls.n	800764e <clear_lock+0xe>
	}
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	200007f8 	.word	0x200007f8

08007688 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	78db      	ldrb	r3, [r3, #3]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d034      	beq.n	8007706 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7858      	ldrb	r0, [r3, #1]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076ac:	2301      	movs	r3, #1
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	f7ff fd40 	bl	8007134 <disk_write>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
 80076be:	e022      	b.n	8007706 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d217      	bcs.n	8007706 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	789b      	ldrb	r3, [r3, #2]
 80076da:	613b      	str	r3, [r7, #16]
 80076dc:	e010      	b.n	8007700 <sync_window+0x78>
					wsect += fs->fsize;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7858      	ldrb	r0, [r3, #1]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076f2:	2301      	movs	r3, #1
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	f7ff fd1d 	bl	8007134 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d8eb      	bhi.n	80076de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d01b      	beq.n	8007760 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ffad 	bl	8007688 <sync_window>
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d113      	bne.n	8007760 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7858      	ldrb	r0, [r3, #1]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007742:	2301      	movs	r3, #1
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	f7ff fcd5 	bl	80070f4 <disk_read>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007756:	2301      	movs	r3, #1
 8007758:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff ff87 	bl	8007688 <sync_window>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d158      	bne.n	8007836 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d148      	bne.n	800781e <sync_fs+0xb2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	791b      	ldrb	r3, [r3, #4]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d144      	bne.n	800781e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3330      	adds	r3, #48	; 0x30
 8007798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fda9 	bl	80072f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3330      	adds	r3, #48	; 0x30
 80077a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fd38 	bl	8007226 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3330      	adds	r3, #48	; 0x30
 80077ba:	4921      	ldr	r1, [pc, #132]	; (8007840 <sync_fs+0xd4>)
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff fd4d 	bl	800725c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3330      	adds	r3, #48	; 0x30
 80077c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077ca:	491e      	ldr	r1, [pc, #120]	; (8007844 <sync_fs+0xd8>)
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff fd45 	bl	800725c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3330      	adds	r3, #48	; 0x30
 80077d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7ff fd3b 	bl	800725c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3330      	adds	r3, #48	; 0x30
 80077ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7ff fd31 	bl	800725c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7858      	ldrb	r0, [r3, #1]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007812:	2301      	movs	r3, #1
 8007814:	f7ff fc8e 	bl	8007134 <disk_write>
			fs->fsi_flag = 0;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fca4 	bl	8007174 <disk_ioctl>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <sync_fs+0xca>
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	41615252 	.word	0x41615252
 8007844:	61417272 	.word	0x61417272

08007848 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	3b02      	subs	r3, #2
 8007856:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	3b02      	subs	r3, #2
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d301      	bcc.n	8007868 <clust2sect+0x20>
 8007864:	2300      	movs	r3, #0
 8007866:	e008      	b.n	800787a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	895b      	ldrh	r3, [r3, #10]
 800786c:	461a      	mov	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	fb03 f202 	mul.w	r2, r3, r2
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	4413      	add	r3, r2
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b086      	sub	sp, #24
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d904      	bls.n	80078a6 <get_fat+0x20>
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d302      	bcc.n	80078ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80078a6:	2301      	movs	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e08f      	b.n	80079cc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d062      	beq.n	8007980 <get_fat+0xfa>
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	dc7c      	bgt.n	80079b8 <get_fat+0x132>
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d002      	beq.n	80078c8 <get_fat+0x42>
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d042      	beq.n	800794c <get_fat+0xc6>
 80078c6:	e077      	b.n	80079b8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6a1a      	ldr	r2, [r3, #32]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	0a5b      	lsrs	r3, r3, #9
 80078de:	4413      	add	r3, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	6938      	ldr	r0, [r7, #16]
 80078e4:	f7ff ff14 	bl	8007710 <move_window>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d167      	bne.n	80079be <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	60fa      	str	r2, [r7, #12]
 80078f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4413      	add	r3, r2
 80078fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007900:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6a1a      	ldr	r2, [r3, #32]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	0a5b      	lsrs	r3, r3, #9
 800790a:	4413      	add	r3, r2
 800790c:	4619      	mov	r1, r3
 800790e:	6938      	ldr	r0, [r7, #16]
 8007910:	f7ff fefe 	bl	8007710 <move_window>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d153      	bne.n	80079c2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	4413      	add	r3, r2
 8007924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	461a      	mov	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4313      	orrs	r3, r2
 8007930:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <get_fat+0xbc>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	e002      	b.n	8007948 <get_fat+0xc2>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007948:	617b      	str	r3, [r7, #20]
			break;
 800794a:	e03f      	b.n	80079cc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6a1a      	ldr	r2, [r3, #32]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	4413      	add	r3, r2
 8007956:	4619      	mov	r1, r3
 8007958:	6938      	ldr	r0, [r7, #16]
 800795a:	f7ff fed9 	bl	8007710 <move_window>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d130      	bne.n	80079c6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007972:	4413      	add	r3, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fc1b 	bl	80071b0 <ld_word>
 800797a:	4603      	mov	r3, r0
 800797c:	617b      	str	r3, [r7, #20]
			break;
 800797e:	e025      	b.n	80079cc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	6a1a      	ldr	r2, [r3, #32]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	09db      	lsrs	r3, r3, #7
 8007988:	4413      	add	r3, r2
 800798a:	4619      	mov	r1, r3
 800798c:	6938      	ldr	r0, [r7, #16]
 800798e:	f7ff febf 	bl	8007710 <move_window>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d118      	bne.n	80079ca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80079a6:	4413      	add	r3, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff fc19 	bl	80071e0 <ld_dword>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80079b4:	617b      	str	r3, [r7, #20]
			break;
 80079b6:	e009      	b.n	80079cc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e006      	b.n	80079cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079be:	bf00      	nop
 80079c0:	e004      	b.n	80079cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079ca:	bf00      	nop
		}
	}

	return val;
 80079cc:	697b      	ldr	r3, [r7, #20]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80079d6:	b590      	push	{r4, r7, lr}
 80079d8:	b089      	sub	sp, #36	; 0x24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80079e2:	2302      	movs	r3, #2
 80079e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	f240 80d9 	bls.w	8007ba0 <put_fat+0x1ca>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	f080 80d3 	bcs.w	8007ba0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	f000 8096 	beq.w	8007b30 <put_fat+0x15a>
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	f300 80cb 	bgt.w	8007ba0 <put_fat+0x1ca>
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d002      	beq.n	8007a14 <put_fat+0x3e>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d06e      	beq.n	8007af0 <put_fat+0x11a>
 8007a12:	e0c5      	b.n	8007ba0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	4413      	add	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	0a5b      	lsrs	r3, r3, #9
 8007a2a:	4413      	add	r3, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fe6e 	bl	8007710 <move_window>
 8007a34:	4603      	mov	r3, r0
 8007a36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a38:	7ffb      	ldrb	r3, [r7, #31]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 80a9 	bne.w	8007b92 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	1c59      	adds	r1, r3, #1
 8007a4a:	61b9      	str	r1, [r7, #24]
 8007a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a50:	4413      	add	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00d      	beq.n	8007a7a <put_fat+0xa4>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b25b      	sxtb	r3, r3
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	b25a      	sxtb	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	b25b      	sxtb	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b25b      	sxtb	r3, r3
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	e001      	b.n	8007a7e <put_fat+0xa8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1a      	ldr	r2, [r3, #32]
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	0a5b      	lsrs	r3, r3, #9
 8007a90:	4413      	add	r3, r2
 8007a92:	4619      	mov	r1, r3
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff fe3b 	bl	8007710 <move_window>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a9e:	7ffb      	ldrb	r3, [r7, #31]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d178      	bne.n	8007b96 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab0:	4413      	add	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <put_fat+0xf0>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	091b      	lsrs	r3, r3, #4
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	e00e      	b.n	8007ae4 <put_fat+0x10e>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b25b      	sxtb	r3, r3
 8007acc:	f023 030f 	bic.w	r3, r3, #15
 8007ad0:	b25a      	sxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	0a1b      	lsrs	r3, r3, #8
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	70da      	strb	r2, [r3, #3]
			break;
 8007aee:	e057      	b.n	8007ba0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	4413      	add	r3, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff fe07 	bl	8007710 <move_window>
 8007b02:	4603      	mov	r3, r0
 8007b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b06:	7ffb      	ldrb	r3, [r7, #31]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d146      	bne.n	8007b9a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007b1a:	4413      	add	r3, r2
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff fb7f 	bl	8007226 <st_word>
			fs->wflag = 1;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	70da      	strb	r2, [r3, #3]
			break;
 8007b2e:	e037      	b.n	8007ba0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	09db      	lsrs	r3, r3, #7
 8007b38:	4413      	add	r3, r2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fde7 	bl	8007710 <move_window>
 8007b42:	4603      	mov	r3, r0
 8007b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d128      	bne.n	8007b9e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b60:	4413      	add	r3, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff fb3c 	bl	80071e0 <ld_dword>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b6e:	4323      	orrs	r3, r4
 8007b70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b80:	4413      	add	r3, r2
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fb69 	bl	800725c <st_dword>
			fs->wflag = 1;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	70da      	strb	r2, [r3, #3]
			break;
 8007b90:	e006      	b.n	8007ba0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b92:	bf00      	nop
 8007b94:	e004      	b.n	8007ba0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b96:	bf00      	nop
 8007b98:	e002      	b.n	8007ba0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007b9e:	bf00      	nop
		}
	}
	return res;
 8007ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3724      	adds	r7, #36	; 0x24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd90      	pop	{r4, r7, pc}

08007baa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b088      	sub	sp, #32
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d904      	bls.n	8007bd0 <remove_chain+0x26>
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d301      	bcc.n	8007bd4 <remove_chain+0x2a>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e04b      	b.n	8007c6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00c      	beq.n	8007bf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007bda:	f04f 32ff 	mov.w	r2, #4294967295
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	69b8      	ldr	r0, [r7, #24]
 8007be2:	f7ff fef8 	bl	80079d6 <put_fat>
 8007be6:	4603      	mov	r3, r0
 8007be8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007bea:	7ffb      	ldrb	r3, [r7, #31]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <remove_chain+0x4a>
 8007bf0:	7ffb      	ldrb	r3, [r7, #31]
 8007bf2:	e03b      	b.n	8007c6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fe45 	bl	8007886 <get_fat>
 8007bfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d031      	beq.n	8007c68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <remove_chain+0x64>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e02e      	b.n	8007c6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d101      	bne.n	8007c1a <remove_chain+0x70>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e028      	b.n	8007c6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	69b8      	ldr	r0, [r7, #24]
 8007c20:	f7ff fed9 	bl	80079d6 <put_fat>
 8007c24:	4603      	mov	r3, r0
 8007c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <remove_chain+0x88>
 8007c2e:	7ffb      	ldrb	r3, [r7, #31]
 8007c30:	e01c      	b.n	8007c6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	3b02      	subs	r3, #2
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d20b      	bcs.n	8007c58 <remove_chain+0xae>
			fs->free_clst++;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	791b      	ldrb	r3, [r3, #4]
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3c6      	bcc.n	8007bf4 <remove_chain+0x4a>
 8007c66:	e000      	b.n	8007c6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <create_chain+0x2c>
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d31b      	bcc.n	8007cd8 <create_chain+0x64>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	61bb      	str	r3, [r7, #24]
 8007ca4:	e018      	b.n	8007cd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fdec 	bl	8007886 <get_fat>
 8007cae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d801      	bhi.n	8007cba <create_chain+0x46>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e070      	b.n	8007d9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	d101      	bne.n	8007cc6 <create_chain+0x52>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	e06a      	b.n	8007d9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d201      	bcs.n	8007cd4 <create_chain+0x60>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	e063      	b.n	8007d9c <create_chain+0x128>
		scl = clst;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d307      	bcc.n	8007cfc <create_chain+0x88>
				ncl = 2;
 8007cec:	2302      	movs	r3, #2
 8007cee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d901      	bls.n	8007cfc <create_chain+0x88>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e04f      	b.n	8007d9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007cfc:	69f9      	ldr	r1, [r7, #28]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fdc1 	bl	8007886 <get_fat>
 8007d04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00e      	beq.n	8007d2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d003      	beq.n	8007d1a <create_chain+0xa6>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d101      	bne.n	8007d1e <create_chain+0xaa>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	e03e      	b.n	8007d9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d1da      	bne.n	8007cdc <create_chain+0x68>
 8007d26:	2300      	movs	r3, #0
 8007d28:	e038      	b.n	8007d9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007d2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d30:	69f9      	ldr	r1, [r7, #28]
 8007d32:	6938      	ldr	r0, [r7, #16]
 8007d34:	f7ff fe4f 	bl	80079d6 <put_fat>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <create_chain+0xe2>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d006      	beq.n	8007d56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6938      	ldr	r0, [r7, #16]
 8007d4e:	f7ff fe42 	bl	80079d6 <put_fat>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d116      	bne.n	8007d8a <create_chain+0x116>
		fs->last_clst = ncl;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	3b02      	subs	r3, #2
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d804      	bhi.n	8007d7a <create_chain+0x106>
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	791b      	ldrb	r3, [r3, #4]
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	711a      	strb	r2, [r3, #4]
 8007d88:	e007      	b.n	8007d9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <create_chain+0x122>
 8007d90:	f04f 33ff 	mov.w	r3, #4294967295
 8007d94:	e000      	b.n	8007d98 <create_chain+0x124>
 8007d96:	2301      	movs	r3, #1
 8007d98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007d9a:	69fb      	ldr	r3, [r7, #28]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dba:	d204      	bcs.n	8007dc6 <dir_sdi+0x22>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <dir_sdi+0x26>
		return FR_INT_ERR;
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e063      	b.n	8007e92 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <dir_sdi+0x46>
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d902      	bls.n	8007dea <dir_sdi+0x46>
		clst = fs->dirbase;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10c      	bne.n	8007e0a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	8912      	ldrh	r2, [r2, #8]
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d301      	bcc.n	8007e00 <dir_sdi+0x5c>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e048      	b.n	8007e92 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	61da      	str	r2, [r3, #28]
 8007e08:	e029      	b.n	8007e5e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	895b      	ldrh	r3, [r3, #10]
 8007e0e:	025b      	lsls	r3, r3, #9
 8007e10:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e12:	e019      	b.n	8007e48 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6979      	ldr	r1, [r7, #20]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fd34 	bl	8007886 <get_fat>
 8007e1e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e26:	d101      	bne.n	8007e2c <dir_sdi+0x88>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e032      	b.n	8007e92 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d904      	bls.n	8007e3c <dir_sdi+0x98>
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d301      	bcc.n	8007e40 <dir_sdi+0x9c>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e028      	b.n	8007e92 <dir_sdi+0xee>
			ofs -= csz;
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d2e1      	bcs.n	8007e14 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007e50:	6979      	ldr	r1, [r7, #20]
 8007e52:	6938      	ldr	r0, [r7, #16]
 8007e54:	f7ff fcf8 	bl	8007848 <clust2sect>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <dir_sdi+0xcc>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e010      	b.n	8007e92 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	0a5b      	lsrs	r3, r3, #9
 8007e78:	441a      	add	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	441a      	add	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	3320      	adds	r3, #32
 8007eb0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <dir_next+0x28>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec0:	d301      	bcc.n	8007ec6 <dir_next+0x2c>
 8007ec2:	2304      	movs	r3, #4
 8007ec4:	e0aa      	b.n	800801c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 8098 	bne.w	8008002 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10b      	bne.n	8007efc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	8912      	ldrh	r2, [r2, #8]
 8007eec:	4293      	cmp	r3, r2
 8007eee:	f0c0 8088 	bcc.w	8008002 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	61da      	str	r2, [r3, #28]
 8007ef8:	2304      	movs	r3, #4
 8007efa:	e08f      	b.n	800801c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	0a5b      	lsrs	r3, r3, #9
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	8952      	ldrh	r2, [r2, #10]
 8007f04:	3a01      	subs	r2, #1
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d17a      	bne.n	8008002 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7ff fcb6 	bl	8007886 <get_fat>
 8007f1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d801      	bhi.n	8007f26 <dir_next+0x8c>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e07a      	b.n	800801c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d101      	bne.n	8007f32 <dir_next+0x98>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e074      	b.n	800801c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d358      	bcc.n	8007fee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	61da      	str	r2, [r3, #28]
 8007f48:	2304      	movs	r3, #4
 8007f4a:	e067      	b.n	800801c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7ff fe8d 	bl	8007c74 <create_chain>
 8007f5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <dir_next+0xcc>
 8007f62:	2307      	movs	r3, #7
 8007f64:	e05a      	b.n	800801c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <dir_next+0xd6>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e055      	b.n	800801c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d101      	bne.n	8007f7c <dir_next+0xe2>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e04f      	b.n	800801c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff fb83 	bl	8007688 <sync_window>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <dir_next+0xf2>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e047      	b.n	800801c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3330      	adds	r3, #48	; 0x30
 8007f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff f9ad 	bl	80072f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	6979      	ldr	r1, [r7, #20]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff fc50 	bl	8007848 <clust2sect>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8007fae:	e012      	b.n	8007fd6 <dir_next+0x13c>
						fs->wflag = 1;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff fb66 	bl	8007688 <sync_window>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <dir_next+0x12c>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e02a      	b.n	800801c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	895b      	ldrh	r3, [r3, #10]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d3e6      	bcc.n	8007fb0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad2      	subs	r2, r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007ff4:	6979      	ldr	r1, [r7, #20]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff fc26 	bl	8007848 <clust2sect>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008014:	441a      	add	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff feb4 	bl	8007da4 <dir_sdi>
 800803c:	4603      	mov	r3, r0
 800803e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d12b      	bne.n	800809e <dir_alloc+0x7a>
		n = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4619      	mov	r1, r3
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fb5d 	bl	8007710 <move_window>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11d      	bne.n	800809c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2be5      	cmp	r3, #229	; 0xe5
 8008068:	d004      	beq.n	8008074 <dir_alloc+0x50>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d107      	bne.n	8008084 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	3301      	adds	r3, #1
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d102      	bne.n	8008088 <dir_alloc+0x64>
 8008082:	e00c      	b.n	800809e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008088:	2101      	movs	r1, #1
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff ff05 	bl	8007e9a <dir_next>
 8008090:	4603      	mov	r3, r0
 8008092:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0d7      	beq.n	800804a <dir_alloc+0x26>
 800809a:	e000      	b.n	800809e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800809c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d101      	bne.n	80080a8 <dir_alloc+0x84>
 80080a4:	2307      	movs	r3, #7
 80080a6:	75fb      	strb	r3, [r7, #23]
	return res;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	331a      	adds	r3, #26
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff f875 	bl	80071b0 <ld_word>
 80080c6:	4603      	mov	r3, r0
 80080c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d109      	bne.n	80080e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	3314      	adds	r3, #20
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff f86a 	bl	80071b0 <ld_word>
 80080dc:	4603      	mov	r3, r0
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80080e6:	68fb      	ldr	r3, [r7, #12]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	331a      	adds	r3, #26
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	b292      	uxth	r2, r2
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff f88d 	bl	8007226 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b03      	cmp	r3, #3
 8008112:	d109      	bne.n	8008128 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f103 0214 	add.w	r2, r3, #20
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	b29b      	uxth	r3, r3
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f7ff f87f 	bl	8007226 <st_word>
	}
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff fe2f 	bl	8007da4 <dir_sdi>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <dir_find+0x24>
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	e03e      	b.n	80081d2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	4619      	mov	r1, r3
 800815a:	6938      	ldr	r0, [r7, #16]
 800815c:	f7ff fad8 	bl	8007710 <move_window>
 8008160:	4603      	mov	r3, r0
 8008162:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d12f      	bne.n	80081ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d102      	bne.n	800817e <dir_find+0x4e>
 8008178:	2304      	movs	r3, #4
 800817a:	75fb      	strb	r3, [r7, #23]
 800817c:	e028      	b.n	80081d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	330b      	adds	r3, #11
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800818a:	b2da      	uxtb	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	330b      	adds	r3, #11
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <dir_find+0x86>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a18      	ldr	r0, [r3, #32]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	220b      	movs	r2, #11
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7ff f8be 	bl	800732c <mem_cmp>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80081b6:	2100      	movs	r1, #0
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fe6e 	bl	8007e9a <dir_next>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0c5      	beq.n	8008154 <dir_find+0x24>
 80081c8:	e002      	b.n	80081d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80081ca:	bf00      	nop
 80081cc:	e000      	b.n	80081d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80081ce:	bf00      	nop

	return res;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80081e8:	2101      	movs	r1, #1
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff ff1a 	bl	8008024 <dir_alloc>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11c      	bne.n	8008234 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	4619      	mov	r1, r3
 8008200:	68b8      	ldr	r0, [r7, #8]
 8008202:	f7ff fa85 	bl	8007710 <move_window>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d111      	bne.n	8008234 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	2220      	movs	r2, #32
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff f86c 	bl	80072f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a18      	ldr	r0, [r3, #32]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3324      	adds	r3, #36	; 0x24
 8008226:	220b      	movs	r2, #11
 8008228:	4619      	mov	r1, r3
 800822a:	f7ff f843 	bl	80072b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2201      	movs	r2, #1
 8008232:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3324      	adds	r3, #36	; 0x24
 8008254:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008256:	220b      	movs	r2, #11
 8008258:	2120      	movs	r1, #32
 800825a:	68b8      	ldr	r0, [r7, #8]
 800825c:	f7ff f84b 	bl	80072f6 <mem_set>
	si = i = 0; ni = 8;
 8008260:	2300      	movs	r3, #0
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	2308      	movs	r3, #8
 800826a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	61fa      	str	r2, [r7, #28]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800827a:	7efb      	ldrb	r3, [r7, #27]
 800827c:	2b20      	cmp	r3, #32
 800827e:	d94e      	bls.n	800831e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008280:	7efb      	ldrb	r3, [r7, #27]
 8008282:	2b2f      	cmp	r3, #47	; 0x2f
 8008284:	d006      	beq.n	8008294 <create_name+0x54>
 8008286:	7efb      	ldrb	r3, [r7, #27]
 8008288:	2b5c      	cmp	r3, #92	; 0x5c
 800828a:	d110      	bne.n	80082ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800828c:	e002      	b.n	8008294 <create_name+0x54>
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	3301      	adds	r3, #1
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b2f      	cmp	r3, #47	; 0x2f
 800829e:	d0f6      	beq.n	800828e <create_name+0x4e>
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b5c      	cmp	r3, #92	; 0x5c
 80082aa:	d0f0      	beq.n	800828e <create_name+0x4e>
			break;
 80082ac:	e038      	b.n	8008320 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80082ae:	7efb      	ldrb	r3, [r7, #27]
 80082b0:	2b2e      	cmp	r3, #46	; 0x2e
 80082b2:	d003      	beq.n	80082bc <create_name+0x7c>
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d30c      	bcc.n	80082d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b0b      	cmp	r3, #11
 80082c0:	d002      	beq.n	80082c8 <create_name+0x88>
 80082c2:	7efb      	ldrb	r3, [r7, #27]
 80082c4:	2b2e      	cmp	r3, #46	; 0x2e
 80082c6:	d001      	beq.n	80082cc <create_name+0x8c>
 80082c8:	2306      	movs	r3, #6
 80082ca:	e044      	b.n	8008356 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80082cc:	2308      	movs	r3, #8
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	230b      	movs	r3, #11
 80082d2:	617b      	str	r3, [r7, #20]
			continue;
 80082d4:	e022      	b.n	800831c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80082d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da04      	bge.n	80082e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80082de:	7efb      	ldrb	r3, [r7, #27]
 80082e0:	3b80      	subs	r3, #128	; 0x80
 80082e2:	4a1f      	ldr	r2, [pc, #124]	; (8008360 <create_name+0x120>)
 80082e4:	5cd3      	ldrb	r3, [r2, r3]
 80082e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80082e8:	7efb      	ldrb	r3, [r7, #27]
 80082ea:	4619      	mov	r1, r3
 80082ec:	481d      	ldr	r0, [pc, #116]	; (8008364 <create_name+0x124>)
 80082ee:	f7ff f844 	bl	800737a <chk_chr>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <create_name+0xbc>
 80082f8:	2306      	movs	r3, #6
 80082fa:	e02c      	b.n	8008356 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80082fc:	7efb      	ldrb	r3, [r7, #27]
 80082fe:	2b60      	cmp	r3, #96	; 0x60
 8008300:	d905      	bls.n	800830e <create_name+0xce>
 8008302:	7efb      	ldrb	r3, [r7, #27]
 8008304:	2b7a      	cmp	r3, #122	; 0x7a
 8008306:	d802      	bhi.n	800830e <create_name+0xce>
 8008308:	7efb      	ldrb	r3, [r7, #27]
 800830a:	3b20      	subs	r3, #32
 800830c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	613a      	str	r2, [r7, #16]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	4413      	add	r3, r2
 8008318:	7efa      	ldrb	r2, [r7, #27]
 800831a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800831c:	e7a6      	b.n	800826c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800831e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	441a      	add	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <create_name+0xf4>
 8008330:	2306      	movs	r3, #6
 8008332:	e010      	b.n	8008356 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2be5      	cmp	r3, #229	; 0xe5
 800833a:	d102      	bne.n	8008342 <create_name+0x102>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2205      	movs	r2, #5
 8008340:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008342:	7efb      	ldrb	r3, [r7, #27]
 8008344:	2b20      	cmp	r3, #32
 8008346:	d801      	bhi.n	800834c <create_name+0x10c>
 8008348:	2204      	movs	r2, #4
 800834a:	e000      	b.n	800834e <create_name+0x10e>
 800834c:	2200      	movs	r2, #0
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	330b      	adds	r3, #11
 8008352:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008354:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	0800ec10 	.word	0x0800ec10
 8008364:	0800de5c 	.word	0x0800de5c

08008368 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800837c:	e002      	b.n	8008384 <follow_path+0x1c>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	3301      	adds	r3, #1
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b2f      	cmp	r3, #47	; 0x2f
 800838a:	d0f8      	beq.n	800837e <follow_path+0x16>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b5c      	cmp	r3, #92	; 0x5c
 8008392:	d0f4      	beq.n	800837e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2200      	movs	r2, #0
 8008398:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b1f      	cmp	r3, #31
 80083a0:	d80a      	bhi.n	80083b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2280      	movs	r2, #128	; 0x80
 80083a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80083aa:	2100      	movs	r1, #0
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fcf9 	bl	8007da4 <dir_sdi>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]
 80083b6:	e043      	b.n	8008440 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083b8:	463b      	mov	r3, r7
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ff3f 	bl	8008240 <create_name>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d134      	bne.n	8008436 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff feaf 	bl	8008130 <dir_find>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80083dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d127      	bne.n	800843a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d122      	bne.n	800843a <follow_path+0xd2>
 80083f4:	2305      	movs	r3, #5
 80083f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80083f8:	e01f      	b.n	800843a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11c      	bne.n	800843e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	799b      	ldrb	r3, [r3, #6]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008410:	2305      	movs	r3, #5
 8008412:	75fb      	strb	r3, [r7, #23]
 8008414:	e014      	b.n	8008440 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008424:	4413      	add	r3, r2
 8008426:	4619      	mov	r1, r3
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7ff fe42 	bl	80080b2 <ld_clust>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008434:	e7c0      	b.n	80083b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <follow_path+0xd8>
				break;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800843e:	bf00      	nop
			}
		}
	}

	return res;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800844a:	b480      	push	{r7}
 800844c:	b087      	sub	sp, #28
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008452:	f04f 33ff 	mov.w	r3, #4294967295
 8008456:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d031      	beq.n	80084c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e002      	b.n	800846e <get_ldnumber+0x24>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3301      	adds	r3, #1
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b20      	cmp	r3, #32
 8008474:	d903      	bls.n	800847e <get_ldnumber+0x34>
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b3a      	cmp	r3, #58	; 0x3a
 800847c:	d1f4      	bne.n	8008468 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b3a      	cmp	r3, #58	; 0x3a
 8008484:	d11c      	bne.n	80084c0 <get_ldnumber+0x76>
			tp = *path;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	60fa      	str	r2, [r7, #12]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	3b30      	subs	r3, #48	; 0x30
 8008496:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b09      	cmp	r3, #9
 800849c:	d80e      	bhi.n	80084bc <get_ldnumber+0x72>
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d10a      	bne.n	80084bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d107      	bne.n	80084bc <get_ldnumber+0x72>
					vol = (int)i;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3301      	adds	r3, #1
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	e002      	b.n	80084c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80084c4:	693b      	ldr	r3, [r7, #16]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	70da      	strb	r2, [r3, #3]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff f90e 	bl	8007710 <move_window>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <check_fs+0x2a>
 80084fa:	2304      	movs	r3, #4
 80084fc:	e038      	b.n	8008570 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3330      	adds	r3, #48	; 0x30
 8008502:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fe52 	bl	80071b0 <ld_word>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <check_fs+0x48>
 8008518:	2303      	movs	r3, #3
 800851a:	e029      	b.n	8008570 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008522:	2be9      	cmp	r3, #233	; 0xe9
 8008524:	d009      	beq.n	800853a <check_fs+0x66>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800852c:	2beb      	cmp	r3, #235	; 0xeb
 800852e:	d11e      	bne.n	800856e <check_fs+0x9a>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008536:	2b90      	cmp	r3, #144	; 0x90
 8008538:	d119      	bne.n	800856e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3330      	adds	r3, #48	; 0x30
 800853e:	3336      	adds	r3, #54	; 0x36
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fe4d 	bl	80071e0 <ld_dword>
 8008546:	4603      	mov	r3, r0
 8008548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800854c:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <check_fs+0xa4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d101      	bne.n	8008556 <check_fs+0x82>
 8008552:	2300      	movs	r3, #0
 8008554:	e00c      	b.n	8008570 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3330      	adds	r3, #48	; 0x30
 800855a:	3352      	adds	r3, #82	; 0x52
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fe3f 	bl	80071e0 <ld_dword>
 8008562:	4603      	mov	r3, r0
 8008564:	4a05      	ldr	r2, [pc, #20]	; (800857c <check_fs+0xa8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d101      	bne.n	800856e <check_fs+0x9a>
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800856e:	2302      	movs	r3, #2
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	00544146 	.word	0x00544146
 800857c:	33544146 	.word	0x33544146

08008580 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b096      	sub	sp, #88	; 0x58
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff ff58 	bl	800844a <get_ldnumber>
 800859a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800859c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	da01      	bge.n	80085a6 <find_volume+0x26>
 80085a2:	230b      	movs	r3, #11
 80085a4:	e22d      	b.n	8008a02 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80085a6:	4aa1      	ldr	r2, [pc, #644]	; (800882c <find_volume+0x2ac>)
 80085a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <find_volume+0x3a>
 80085b6:	230c      	movs	r3, #12
 80085b8:	e223      	b.n	8008a02 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	f023 0301 	bic.w	r3, r3, #1
 80085c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01a      	beq.n	8008606 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fd4d 	bl	8007074 <disk_status>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10c      	bne.n	8008606 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <find_volume+0x82>
 80085f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80085fe:	230a      	movs	r3, #10
 8008600:	e1ff      	b.n	8008a02 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008602:	2300      	movs	r3, #0
 8008604:	e1fd      	b.n	8008a02 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	b2da      	uxtb	r2, r3
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fd45 	bl	80070a8 <disk_initialize>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008630:	2303      	movs	r3, #3
 8008632:	e1e6      	b.n	8008a02 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <find_volume+0xca>
 800863a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008646:	230a      	movs	r3, #10
 8008648:	e1db      	b.n	8008a02 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800864e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008652:	f7ff ff3f 	bl	80084d4 <check_fs>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800865c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008660:	2b02      	cmp	r3, #2
 8008662:	d149      	bne.n	80086f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008664:	2300      	movs	r3, #0
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
 8008668:	e01e      	b.n	80086a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008678:	4413      	add	r3, r2
 800867a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	3304      	adds	r3, #4
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d006      	beq.n	8008694 <find_volume+0x114>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	3308      	adds	r3, #8
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fda8 	bl	80071e0 <ld_dword>
 8008690:	4602      	mov	r2, r0
 8008692:	e000      	b.n	8008696 <find_volume+0x116>
 8008694:	2200      	movs	r2, #0
 8008696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	3358      	adds	r3, #88	; 0x58
 800869c:	443b      	add	r3, r7
 800869e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a4:	3301      	adds	r3, #1
 80086a6:	643b      	str	r3, [r7, #64]	; 0x40
 80086a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d9dd      	bls.n	800866a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80086ae:	2300      	movs	r3, #0
 80086b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80086b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <find_volume+0x13e>
 80086b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ba:	3b01      	subs	r3, #1
 80086bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80086be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	3358      	adds	r3, #88	; 0x58
 80086c4:	443b      	add	r3, r7
 80086c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <find_volume+0x15e>
 80086d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086d6:	f7ff fefd 	bl	80084d4 <check_fs>
 80086da:	4603      	mov	r3, r0
 80086dc:	e000      	b.n	80086e0 <find_volume+0x160>
 80086de:	2303      	movs	r3, #3
 80086e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d905      	bls.n	80086f8 <find_volume+0x178>
 80086ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ee:	3301      	adds	r3, #1
 80086f0:	643b      	str	r3, [r7, #64]	; 0x40
 80086f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d9e2      	bls.n	80086be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d101      	bne.n	8008704 <find_volume+0x184>
 8008700:	2301      	movs	r3, #1
 8008702:	e17e      	b.n	8008a02 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008708:	2b01      	cmp	r3, #1
 800870a:	d901      	bls.n	8008710 <find_volume+0x190>
 800870c:	230d      	movs	r3, #13
 800870e:	e178      	b.n	8008a02 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	3330      	adds	r3, #48	; 0x30
 8008714:	330b      	adds	r3, #11
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fd4a 	bl	80071b0 <ld_word>
 800871c:	4603      	mov	r3, r0
 800871e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008722:	d001      	beq.n	8008728 <find_volume+0x1a8>
 8008724:	230d      	movs	r3, #13
 8008726:	e16c      	b.n	8008a02 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	3330      	adds	r3, #48	; 0x30
 800872c:	3316      	adds	r3, #22
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fd3e 	bl	80071b0 <ld_word>
 8008734:	4603      	mov	r3, r0
 8008736:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <find_volume+0x1cc>
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	3330      	adds	r3, #48	; 0x30
 8008742:	3324      	adds	r3, #36	; 0x24
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fd4b 	bl	80071e0 <ld_dword>
 800874a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008750:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	789b      	ldrb	r3, [r3, #2]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d005      	beq.n	8008770 <find_volume+0x1f0>
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	789b      	ldrb	r3, [r3, #2]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d001      	beq.n	8008770 <find_volume+0x1f0>
 800876c:	230d      	movs	r3, #13
 800876e:	e148      	b.n	8008a02 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	789b      	ldrb	r3, [r3, #2]
 8008774:	461a      	mov	r2, r3
 8008776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008778:	fb02 f303 	mul.w	r3, r2, r3
 800877c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008784:	b29a      	uxth	r2, r3
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <find_volume+0x224>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	895b      	ldrh	r3, [r3, #10]
 8008796:	461a      	mov	r2, r3
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	895b      	ldrh	r3, [r3, #10]
 800879c:	3b01      	subs	r3, #1
 800879e:	4013      	ands	r3, r2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <find_volume+0x228>
 80087a4:	230d      	movs	r3, #13
 80087a6:	e12c      	b.n	8008a02 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	3330      	adds	r3, #48	; 0x30
 80087ac:	3311      	adds	r3, #17
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fcfe 	bl	80071b0 <ld_word>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	891b      	ldrh	r3, [r3, #8]
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <find_volume+0x24e>
 80087ca:	230d      	movs	r3, #13
 80087cc:	e119      	b.n	8008a02 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	3330      	adds	r3, #48	; 0x30
 80087d2:	3313      	adds	r3, #19
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fceb 	bl	80071b0 <ld_word>
 80087da:	4603      	mov	r3, r0
 80087dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <find_volume+0x272>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	3330      	adds	r3, #48	; 0x30
 80087e8:	3320      	adds	r3, #32
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fcf8 	bl	80071e0 <ld_dword>
 80087f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	3330      	adds	r3, #48	; 0x30
 80087f6:	330e      	adds	r3, #14
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fcd9 	bl	80071b0 <ld_word>
 80087fe:	4603      	mov	r3, r0
 8008800:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008802:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <find_volume+0x28c>
 8008808:	230d      	movs	r3, #13
 800880a:	e0fa      	b.n	8008a02 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800880c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800880e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008810:	4413      	add	r3, r2
 8008812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008814:	8912      	ldrh	r2, [r2, #8]
 8008816:	0912      	lsrs	r2, r2, #4
 8008818:	b292      	uxth	r2, r2
 800881a:	4413      	add	r3, r2
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800881e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	429a      	cmp	r2, r3
 8008824:	d204      	bcs.n	8008830 <find_volume+0x2b0>
 8008826:	230d      	movs	r3, #13
 8008828:	e0eb      	b.n	8008a02 <find_volume+0x482>
 800882a:	bf00      	nop
 800882c:	200007f0 	.word	0x200007f0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008838:	8952      	ldrh	r2, [r2, #10]
 800883a:	fbb3 f3f2 	udiv	r3, r3, r2
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <find_volume+0x2ca>
 8008846:	230d      	movs	r3, #13
 8008848:	e0db      	b.n	8008a02 <find_volume+0x482>
		fmt = FS_FAT32;
 800884a:	2303      	movs	r3, #3
 800884c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008856:	4293      	cmp	r3, r2
 8008858:	d802      	bhi.n	8008860 <find_volume+0x2e0>
 800885a:	2302      	movs	r3, #2
 800885c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008866:	4293      	cmp	r3, r2
 8008868:	d802      	bhi.n	8008870 <find_volume+0x2f0>
 800886a:	2301      	movs	r3, #1
 800886c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	1c9a      	adds	r2, r3, #2
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800887c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800887e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008882:	441a      	add	r2, r3
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	441a      	add	r2, r3
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008896:	2b03      	cmp	r3, #3
 8008898:	d11e      	bne.n	80088d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	3330      	adds	r3, #48	; 0x30
 800889e:	332a      	adds	r3, #42	; 0x2a
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe fc85 	bl	80071b0 <ld_word>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <find_volume+0x330>
 80088ac:	230d      	movs	r3, #13
 80088ae:	e0a8      	b.n	8008a02 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	891b      	ldrh	r3, [r3, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <find_volume+0x33c>
 80088b8:	230d      	movs	r3, #13
 80088ba:	e0a2      	b.n	8008a02 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	3330      	adds	r3, #48	; 0x30
 80088c0:	332c      	adds	r3, #44	; 0x2c
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fc8c 	bl	80071e0 <ld_dword>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	647b      	str	r3, [r7, #68]	; 0x44
 80088d6:	e01f      	b.n	8008918 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	891b      	ldrh	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <find_volume+0x364>
 80088e0:	230d      	movs	r3, #13
 80088e2:	e08e      	b.n	8008a02 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	6a1a      	ldr	r2, [r3, #32]
 80088e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ea:	441a      	add	r2, r3
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80088f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d103      	bne.n	8008900 <find_volume+0x380>
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	e00a      	b.n	8008916 <find_volume+0x396>
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	695a      	ldr	r2, [r3, #20]
 8008904:	4613      	mov	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4413      	add	r3, r2
 800890a:	085a      	lsrs	r2, r3, #1
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008916:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800891e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008922:	0a5b      	lsrs	r3, r3, #9
 8008924:	429a      	cmp	r2, r3
 8008926:	d201      	bcs.n	800892c <find_volume+0x3ac>
 8008928:	230d      	movs	r3, #13
 800892a:	e06a      	b.n	8008a02 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	f04f 32ff 	mov.w	r2, #4294967295
 8008932:	611a      	str	r2, [r3, #16]
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008946:	2b03      	cmp	r3, #3
 8008948:	d149      	bne.n	80089de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	3330      	adds	r3, #48	; 0x30
 800894e:	3330      	adds	r3, #48	; 0x30
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fc2d 	bl	80071b0 <ld_word>
 8008956:	4603      	mov	r3, r0
 8008958:	2b01      	cmp	r3, #1
 800895a:	d140      	bne.n	80089de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800895c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800895e:	3301      	adds	r3, #1
 8008960:	4619      	mov	r1, r3
 8008962:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008964:	f7fe fed4 	bl	8007710 <move_window>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d137      	bne.n	80089de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	2200      	movs	r2, #0
 8008972:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	3330      	adds	r3, #48	; 0x30
 8008978:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fc17 	bl	80071b0 <ld_word>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800898a:	429a      	cmp	r2, r3
 800898c:	d127      	bne.n	80089de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	3330      	adds	r3, #48	; 0x30
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fc24 	bl	80071e0 <ld_dword>
 8008998:	4603      	mov	r3, r0
 800899a:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <find_volume+0x48c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d11e      	bne.n	80089de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	3330      	adds	r3, #48	; 0x30
 80089a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fc19 	bl	80071e0 <ld_dword>
 80089ae:	4603      	mov	r3, r0
 80089b0:	4a17      	ldr	r2, [pc, #92]	; (8008a10 <find_volume+0x490>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d113      	bne.n	80089de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	3330      	adds	r3, #48	; 0x30
 80089ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fc0e 	bl	80071e0 <ld_dword>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	3330      	adds	r3, #48	; 0x30
 80089ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fc04 	bl	80071e0 <ld_dword>
 80089d8:	4602      	mov	r2, r0
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80089e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <find_volume+0x494>)
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <find_volume+0x494>)
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <find_volume+0x494>)
 80089f4:	881a      	ldrh	r2, [r3, #0]
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80089fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089fc:	f7fe fe20 	bl	8007640 <clear_lock>
#endif
	return FR_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3758      	adds	r7, #88	; 0x58
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	41615252 	.word	0x41615252
 8008a10:	61417272 	.word	0x61417272
 8008a14:	200007f4 	.word	0x200007f4

08008a18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008a22:	2309      	movs	r3, #9
 8008a24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01c      	beq.n	8008a66 <validate+0x4e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d018      	beq.n	8008a66 <validate+0x4e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d013      	beq.n	8008a66 <validate+0x4e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	889a      	ldrh	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d10c      	bne.n	8008a66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fb0e 	bl	8007074 <disk_status>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <validate+0x4e>
			res = FR_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <validate+0x5a>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	e000      	b.n	8008a74 <validate+0x5c>
 8008a72:	2300      	movs	r3, #0
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	6013      	str	r3, [r2, #0]
	return res;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a96:	f107 0310 	add.w	r3, r7, #16
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff fcd5 	bl	800844a <get_ldnumber>
 8008aa0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da01      	bge.n	8008aac <f_mount+0x28>
 8008aa8:	230b      	movs	r3, #11
 8008aaa:	e02b      	b.n	8008b04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008aac:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <f_mount+0x88>)
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008abc:	69b8      	ldr	r0, [r7, #24]
 8008abe:	f7fe fdbf 	bl	8007640 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	490d      	ldr	r1, [pc, #52]	; (8008b0c <f_mount+0x88>)
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <f_mount+0x66>
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d001      	beq.n	8008aee <f_mount+0x6a>
 8008aea:	2300      	movs	r3, #0
 8008aec:	e00a      	b.n	8008b04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008aee:	f107 010c 	add.w	r1, r7, #12
 8008af2:	f107 0308 	add.w	r3, r7, #8
 8008af6:	2200      	movs	r2, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fd41 	bl	8008580 <find_volume>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200007f0 	.word	0x200007f0

08008b10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b098      	sub	sp, #96	; 0x60
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <f_open+0x18>
 8008b24:	2309      	movs	r3, #9
 8008b26:	e1a9      	b.n	8008e7c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008b30:	79fa      	ldrb	r2, [r7, #7]
 8008b32:	f107 0110 	add.w	r1, r7, #16
 8008b36:	f107 0308 	add.w	r3, r7, #8
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fd20 	bl	8008580 <find_volume>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f040 818d 	bne.w	8008e6a <f_open+0x35a>
		dj.obj.fs = fs;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	f107 0314 	add.w	r3, r7, #20
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff fc03 	bl	8008368 <follow_path>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d11a      	bne.n	8008ba6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da03      	bge.n	8008b82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b7a:	2306      	movs	r3, #6
 8008b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b80:	e011      	b.n	8008ba6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bf14      	ite	ne
 8008b8c:	2301      	movne	r3, #1
 8008b8e:	2300      	moveq	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	f107 0314 	add.w	r3, r7, #20
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fc08 	bl	80073b0 <chk_lock>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	f003 031c 	and.w	r3, r3, #28
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d07e      	beq.n	8008cae <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8008bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d017      	beq.n	8008be8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d10e      	bne.n	8008bde <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008bc0:	f7fe fc52 	bl	8007468 <enq_lock>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <f_open+0xc8>
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fb03 	bl	80081da <dir_register>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	e000      	b.n	8008bda <f_open+0xca>
 8008bd8:	2312      	movs	r3, #18
 8008bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	f043 0308 	orr.w	r3, r3, #8
 8008be4:	71fb      	strb	r3, [r7, #7]
 8008be6:	e010      	b.n	8008c0a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008be8:	7ebb      	ldrb	r3, [r7, #26]
 8008bea:	f003 0311 	and.w	r3, r3, #17
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <f_open+0xea>
					res = FR_DENIED;
 8008bf2:	2307      	movs	r3, #7
 8008bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008bf8:	e007      	b.n	8008c0a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <f_open+0xfa>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d167      	bne.n	8008ce2 <f_open+0x1d2>
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d062      	beq.n	8008ce2 <f_open+0x1d2>
				dw = GET_FATTIME();
 8008c1c:	4b99      	ldr	r3, [pc, #612]	; (8008e84 <f_open+0x374>)
 8008c1e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c22:	330e      	adds	r3, #14
 8008c24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fb18 	bl	800725c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2e:	3316      	adds	r3, #22
 8008c30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fb12 	bl	800725c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3a:	330b      	adds	r3, #11
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fa33 	bl	80080b2 <ld_clust>
 8008c4c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c52:	2200      	movs	r2, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fa4b 	bl	80080f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	331c      	adds	r3, #28
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fafb 	bl	800725c <st_dword>
					fs->wflag = 1;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d037      	beq.n	8008ce2 <f_open+0x1d2>
						dw = fs->winsect;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe ff92 	bl	8007baa <remove_chain>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d126      	bne.n	8008ce2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fd39 	bl	8007710 <move_window>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ca8:	3a01      	subs	r2, #1
 8008caa:	60da      	str	r2, [r3, #12]
 8008cac:	e019      	b.n	8008ce2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d115      	bne.n	8008ce2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008cb6:	7ebb      	ldrb	r3, [r7, #26]
 8008cb8:	f003 0310 	and.w	r3, r3, #16
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <f_open+0x1b8>
					res = FR_NO_FILE;
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008cc6:	e00c      	b.n	8008ce2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <f_open+0x1d2>
 8008cd2:	7ebb      	ldrb	r3, [r7, #26]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <f_open+0x1d2>
						res = FR_DENIED;
 8008cdc:	2307      	movs	r3, #7
 8008cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d128      	bne.n	8008d3c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf14      	ite	ne
 8008d14:	2301      	movne	r3, #1
 8008d16:	2300      	moveq	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f107 0314 	add.w	r3, r7, #20
 8008d20:	4611      	mov	r1, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fbc2 	bl	80074ac <inc_lock>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <f_open+0x22c>
 8008d36:	2302      	movs	r3, #2
 8008d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 8092 	bne.w	8008e6a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff f9b0 	bl	80080b2 <ld_clust>
 8008d52:	4602      	mov	r2, r0
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	331c      	adds	r3, #28
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe fa3f 	bl	80071e0 <ld_dword>
 8008d62:	4602      	mov	r2, r0
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	88da      	ldrh	r2, [r3, #6]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	79fa      	ldrb	r2, [r7, #7]
 8008d7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	332c      	adds	r3, #44	; 0x2c
 8008d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe faac 	bl	80072f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d060      	beq.n	8008e6a <f_open+0x35a>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d05c      	beq.n	8008e6a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	895b      	ldrh	r3, [r3, #10]
 8008dbc:	025b      	lsls	r3, r3, #9
 8008dbe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	657b      	str	r3, [r7, #84]	; 0x54
 8008dcc:	e016      	b.n	8008dfc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fd57 	bl	8007886 <get_fat>
 8008dd8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d802      	bhi.n	8008de6 <f_open+0x2d6>
 8008de0:	2302      	movs	r3, #2
 8008de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d102      	bne.n	8008df4 <f_open+0x2e4>
 8008dee:	2301      	movs	r3, #1
 8008df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8008dfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <f_open+0x2fc>
 8008e04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d8e0      	bhi.n	8008dce <f_open+0x2be>
				}
				fp->clust = clst;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d127      	bne.n	8008e6a <f_open+0x35a>
 8008e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d022      	beq.n	8008e6a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fd0d 	bl	8007848 <clust2sect>
 8008e2e:	6478      	str	r0, [r7, #68]	; 0x44
 8008e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d103      	bne.n	8008e3e <f_open+0x32e>
						res = FR_INT_ERR;
 8008e36:	2302      	movs	r3, #2
 8008e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e3c:	e015      	b.n	8008e6a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e40:	0a5a      	lsrs	r2, r3, #9
 8008e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e44:	441a      	add	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	7858      	ldrb	r0, [r3, #1]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f7fe f94b 	bl	80070f4 <disk_read>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <f_open+0x35a>
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <f_open+0x368>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3760      	adds	r7, #96	; 0x60
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	46c40000 	.word	0x46c40000

08008e88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08c      	sub	sp, #48	; 0x30
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f107 0210 	add.w	r2, r7, #16
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff fdb5 	bl	8008a18 <validate>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <f_write+0x44>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	7d5b      	ldrb	r3, [r3, #21]
 8008ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <f_write+0x4a>
 8008ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ed0:	e13f      	b.n	8009152 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	7d1b      	ldrb	r3, [r3, #20]
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <f_write+0x5a>
 8008ede:	2307      	movs	r3, #7
 8008ee0:	e137      	b.n	8009152 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	441a      	add	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	f080 8121 	bcs.w	8009136 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008efc:	e11b      	b.n	8009136 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f040 80d7 	bne.w	80090ba <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	0a5b      	lsrs	r3, r3, #9
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	8952      	ldrh	r2, [r2, #10]
 8008f16:	3a01      	subs	r2, #1
 8008f18:	4013      	ands	r3, r2
 8008f1a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d137      	bne.n	8008f92 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10c      	bne.n	8008f44 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10e      	bne.n	8008f54 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe fe9a 	bl	8007c74 <create_chain>
 8008f40:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f42:	e007      	b.n	8008f54 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fe fe91 	bl	8007c74 <create_chain>
 8008f52:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80f2 	beq.w	8009140 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d104      	bne.n	8008f6c <f_write+0xe4>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2202      	movs	r2, #2
 8008f66:	755a      	strb	r2, [r3, #21]
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e0f2      	b.n	8009152 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f72:	d104      	bne.n	8008f7e <f_write+0xf6>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	755a      	strb	r2, [r3, #21]
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e0e9      	b.n	8009152 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f82:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d102      	bne.n	8008f92 <f_write+0x10a>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f90:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	7d1b      	ldrb	r3, [r3, #20]
 8008f96:	b25b      	sxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	da18      	bge.n	8008fce <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	7858      	ldrb	r0, [r3, #1]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a1a      	ldr	r2, [r3, #32]
 8008faa:	2301      	movs	r3, #1
 8008fac:	f7fe f8c2 	bl	8007134 <disk_write>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <f_write+0x138>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	755a      	strb	r2, [r3, #21]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0c8      	b.n	8009152 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	7d1b      	ldrb	r3, [r3, #20]
 8008fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7fe fc36 	bl	8007848 <clust2sect>
 8008fdc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <f_write+0x166>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	755a      	strb	r2, [r3, #21]
 8008fea:	2302      	movs	r3, #2
 8008fec:	e0b1      	b.n	8009152 <f_write+0x2ca>
			sect += csect;
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	0a5b      	lsrs	r3, r3, #9
 8008ffa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d03c      	beq.n	800907c <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	4413      	add	r3, r2
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	8952      	ldrh	r2, [r2, #10]
 800900c:	4293      	cmp	r3, r2
 800900e:	d905      	bls.n	800901c <f_write+0x194>
					cc = fs->csize - csect;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	895b      	ldrh	r3, [r3, #10]
 8009014:	461a      	mov	r2, r3
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	7858      	ldrb	r0, [r3, #1]
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	69f9      	ldr	r1, [r7, #28]
 8009026:	f7fe f885 	bl	8007134 <disk_write>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <f_write+0x1b2>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	755a      	strb	r2, [r3, #21]
 8009036:	2301      	movs	r3, #1
 8009038:	e08b      	b.n	8009152 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a1a      	ldr	r2, [r3, #32]
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	429a      	cmp	r2, r3
 8009046:	d915      	bls.n	8009074 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a1a      	ldr	r2, [r3, #32]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	025b      	lsls	r3, r3, #9
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	4413      	add	r3, r2
 800905c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009060:	4619      	mov	r1, r3
 8009062:	f7fe f927 	bl	80072b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	7d1b      	ldrb	r3, [r3, #20]
 800906a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800906e:	b2da      	uxtb	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	025b      	lsls	r3, r3, #9
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800907a:	e03f      	b.n	80090fc <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	429a      	cmp	r2, r3
 8009084:	d016      	beq.n	80090b4 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800908e:	429a      	cmp	r2, r3
 8009090:	d210      	bcs.n	80090b4 <f_write+0x22c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	7858      	ldrb	r0, [r3, #1]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800909c:	2301      	movs	r3, #1
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	f7fe f828 	bl	80070f4 <disk_read>
 80090a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	755a      	strb	r2, [r3, #21]
 80090b0:	2301      	movs	r3, #1
 80090b2:	e04e      	b.n	8009152 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80090c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d901      	bls.n	80090d4 <f_write+0x24c>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	4413      	add	r3, r2
 80090e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e6:	69f9      	ldr	r1, [r7, #28]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe f8e3 	bl	80072b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	7d1b      	ldrb	r3, [r3, #20]
 80090f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	4413      	add	r3, r2
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	699a      	ldr	r2, [r3, #24]
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	441a      	add	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	619a      	str	r2, [r3, #24]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	429a      	cmp	r2, r3
 800911a:	bf38      	it	cc
 800911c:	461a      	movcc	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	60da      	str	r2, [r3, #12]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	441a      	add	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f47f aee0 	bne.w	8008efe <f_write+0x76>
 800913e:	e000      	b.n	8009142 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009140:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	7d1b      	ldrb	r3, [r3, #20]
 8009146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914a:	b2da      	uxtb	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3730      	adds	r7, #48	; 0x30
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f107 0208 	add.w	r2, r7, #8
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff fc53 	bl	8008a18 <validate>
 8009172:	4603      	mov	r3, r0
 8009174:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d167      	bne.n	800924c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7d1b      	ldrb	r3, [r3, #20]
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d061      	beq.n	800924c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7d1b      	ldrb	r3, [r3, #20]
 800918c:	b25b      	sxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	da15      	bge.n	80091be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	7858      	ldrb	r0, [r3, #1]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1a      	ldr	r2, [r3, #32]
 80091a0:	2301      	movs	r3, #1
 80091a2:	f7fd ffc7 	bl	8007134 <disk_write>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <f_sync+0x54>
 80091ac:	2301      	movs	r3, #1
 80091ae:	e04e      	b.n	800924e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <f_sync+0xfc>)
 80091c0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe faa0 	bl	8007710 <move_window>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d138      	bne.n	800924c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	330b      	adds	r3, #11
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	330b      	adds	r3, #11
 80091ea:	f042 0220 	orr.w	r2, r2, #32
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	461a      	mov	r2, r3
 80091fc:	68f9      	ldr	r1, [r7, #12]
 80091fe:	f7fe ff77 	bl	80080f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f103 021c 	add.w	r2, r3, #28
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fe f824 	bl	800725c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3316      	adds	r3, #22
 8009218:	6939      	ldr	r1, [r7, #16]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe f81e 	bl	800725c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3312      	adds	r3, #18
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd fffd 	bl	8007226 <st_word>
					fs->wflag = 1;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2201      	movs	r2, #1
 8009230:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fa99 	bl	800776c <sync_fs>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7d1b      	ldrb	r3, [r3, #20]
 8009242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009246:	b2da      	uxtb	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800924c:	7dfb      	ldrb	r3, [r7, #23]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	46c40000 	.word	0x46c40000

0800925c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ff79 	bl	800915c <f_sync>
 800926a:	4603      	mov	r3, r0
 800926c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d118      	bne.n	80092a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f107 0208 	add.w	r2, r7, #8
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff fbcb 	bl	8008a18 <validate>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10c      	bne.n	80092a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe f999 	bl	80075c8 <dec_lock>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f107 0208 	add.w	r2, r7, #8
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff fba8 	bl	8008a18 <validate>
 80092c8:	4603      	mov	r3, r0
 80092ca:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 80092cc:	7ffb      	ldrb	r3, [r7, #31]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <f_lseek+0x28>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	7d5b      	ldrb	r3, [r3, #21]
 80092d6:	77fb      	strb	r3, [r7, #31]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80092d8:	7ffb      	ldrb	r3, [r7, #31]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <f_lseek+0x32>
 80092de:	7ffb      	ldrb	r3, [r7, #31]
 80092e0:	e10f      	b.n	8009502 <f_lseek+0x252>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d908      	bls.n	80092fe <f_lseek+0x4e>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7d1b      	ldrb	r3, [r3, #20]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80a7 	beq.w	8009464 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	895b      	ldrh	r3, [r3, #10]
 800931a:	025b      	lsls	r3, r3, #9
 800931c:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01b      	beq.n	800935c <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	1e5a      	subs	r2, r3, #1
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	fbb2 f2f3 	udiv	r2, r2, r3
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1e59      	subs	r1, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009338:	429a      	cmp	r2, r3
 800933a:	d30f      	bcc.n	800935c <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	1e5a      	subs	r2, r3, #1
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	425b      	negs	r3, r3
 8009344:	401a      	ands	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	61bb      	str	r3, [r7, #24]
 800935a:	e022      	b.n	80093a2 <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d119      	bne.n	800939c <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe fc81 	bl	8007c74 <create_chain>
 8009372:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d104      	bne.n	8009384 <f_lseek+0xd4>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2202      	movs	r2, #2
 800937e:	755a      	strb	r2, [r3, #21]
 8009380:	2302      	movs	r3, #2
 8009382:	e0be      	b.n	8009502 <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d104      	bne.n	8009396 <f_lseek+0xe6>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	755a      	strb	r2, [r3, #21]
 8009392:	2301      	movs	r3, #1
 8009394:	e0b5      	b.n	8009502 <f_lseek+0x252>
					fp->obj.sclust = clst;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d05d      	beq.n	8009464 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 80093a8:	e03a      	b.n	8009420 <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	441a      	add	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7d1b      	ldrb	r3, [r3, #20]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00b      	beq.n	80093e2 <f_lseek+0x132>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69b9      	ldr	r1, [r7, #24]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fc50 	bl	8007c74 <create_chain>
 80093d4:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d108      	bne.n	80093ee <f_lseek+0x13e>
							ofs = 0; break;
 80093dc:	2300      	movs	r3, #0
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	e022      	b.n	8009428 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	69b9      	ldr	r1, [r7, #24]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fa4d 	bl	8007886 <get_fat>
 80093ec:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d104      	bne.n	8009400 <f_lseek+0x150>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	755a      	strb	r2, [r3, #21]
 80093fc:	2301      	movs	r3, #1
 80093fe:	e080      	b.n	8009502 <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d904      	bls.n	8009410 <f_lseek+0x160>
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	429a      	cmp	r2, r3
 800940e:	d304      	bcc.n	800941a <f_lseek+0x16a>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	755a      	strb	r2, [r3, #21]
 8009416:	2302      	movs	r3, #2
 8009418:	e073      	b.n	8009502 <f_lseek+0x252>
					fp->clust = clst;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	429a      	cmp	r2, r3
 8009426:	d8c0      	bhi.n	80093aa <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699a      	ldr	r2, [r3, #24]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	441a      	add	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	2b00      	cmp	r3, #0
 800943c:	d012      	beq.n	8009464 <f_lseek+0x1b4>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	69b9      	ldr	r1, [r7, #24]
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fa00 	bl	8007848 <clust2sect>
 8009448:	6178      	str	r0, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <f_lseek+0x1aa>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	755a      	strb	r2, [r3, #21]
 8009456:	2302      	movs	r3, #2
 8009458:	e053      	b.n	8009502 <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	0a5b      	lsrs	r3, r3, #9
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4413      	add	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	429a      	cmp	r2, r3
 800946e:	d90a      	bls.n	8009486 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7d1b      	ldrb	r3, [r3, #20]
 800947c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009480:	b2da      	uxtb	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948e:	2b00      	cmp	r3, #0
 8009490:	d036      	beq.n	8009500 <f_lseek+0x250>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	429a      	cmp	r2, r3
 800949a:	d031      	beq.n	8009500 <f_lseek+0x250>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7d1b      	ldrb	r3, [r3, #20]
 80094a0:	b25b      	sxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da18      	bge.n	80094d8 <f_lseek+0x228>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	7858      	ldrb	r0, [r3, #1]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	2301      	movs	r3, #1
 80094b6:	f7fd fe3d 	bl	8007134 <disk_write>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <f_lseek+0x21a>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	755a      	strb	r2, [r3, #21]
 80094c6:	2301      	movs	r3, #1
 80094c8:	e01b      	b.n	8009502 <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7d1b      	ldrb	r3, [r3, #20]
 80094ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	7858      	ldrb	r0, [r3, #1]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80094e2:	2301      	movs	r3, #1
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	f7fd fe05 	bl	80070f4 <disk_read>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <f_lseek+0x24a>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	755a      	strb	r2, [r3, #21]
 80094f6:	2301      	movs	r3, #1
 80094f8:	e003      	b.n	8009502 <f_lseek+0x252>
#endif
			fp->sect = nsect;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009500:	7ffb      	ldrb	r3, [r7, #31]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3720      	adds	r7, #32
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009522:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009524:	7a5b      	ldrb	r3, [r3, #9]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	d131      	bne.n	8009590 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800952c:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800952e:	7a5b      	ldrb	r3, [r3, #9]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009536:	2100      	movs	r1, #0
 8009538:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800953a:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800953c:	7a5b      	ldrb	r3, [r3, #9]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800954a:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800954c:	7a5b      	ldrb	r3, [r3, #9]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009554:	4413      	add	r3, r2
 8009556:	79fa      	ldrb	r2, [r7, #7]
 8009558:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800955c:	7a5b      	ldrb	r3, [r3, #9]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	b2d1      	uxtb	r1, r2
 8009564:	4a0e      	ldr	r2, [pc, #56]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009566:	7251      	strb	r1, [r2, #9]
 8009568:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800956a:	7dbb      	ldrb	r3, [r7, #22]
 800956c:	3330      	adds	r3, #48	; 0x30
 800956e:	b2da      	uxtb	r2, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	3301      	adds	r3, #1
 8009578:	223a      	movs	r2, #58	; 0x3a
 800957a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	3302      	adds	r3, #2
 8009580:	222f      	movs	r2, #47	; 0x2f
 8009582:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3303      	adds	r3, #3
 8009588:	2200      	movs	r2, #0
 800958a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
}
 8009592:	4618      	mov	r0, r3
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20000818 	.word	0x20000818

080095a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095ae:	2200      	movs	r2, #0
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff ffaa 	bl	800950c <FATFS_LinkDriverEx>
 80095b8:	4603      	mov	r3, r0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <__itoa>:
 80095c2:	1e93      	subs	r3, r2, #2
 80095c4:	2b22      	cmp	r3, #34	; 0x22
 80095c6:	b510      	push	{r4, lr}
 80095c8:	460c      	mov	r4, r1
 80095ca:	d904      	bls.n	80095d6 <__itoa+0x14>
 80095cc:	2300      	movs	r3, #0
 80095ce:	700b      	strb	r3, [r1, #0]
 80095d0:	461c      	mov	r4, r3
 80095d2:	4620      	mov	r0, r4
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	2a0a      	cmp	r2, #10
 80095d8:	d109      	bne.n	80095ee <__itoa+0x2c>
 80095da:	2800      	cmp	r0, #0
 80095dc:	da07      	bge.n	80095ee <__itoa+0x2c>
 80095de:	232d      	movs	r3, #45	; 0x2d
 80095e0:	700b      	strb	r3, [r1, #0]
 80095e2:	4240      	negs	r0, r0
 80095e4:	2101      	movs	r1, #1
 80095e6:	4421      	add	r1, r4
 80095e8:	f000 fe18 	bl	800a21c <__utoa>
 80095ec:	e7f1      	b.n	80095d2 <__itoa+0x10>
 80095ee:	2100      	movs	r1, #0
 80095f0:	e7f9      	b.n	80095e6 <__itoa+0x24>

080095f2 <itoa>:
 80095f2:	f7ff bfe6 	b.w	80095c2 <__itoa>

080095f6 <sulp>:
 80095f6:	b570      	push	{r4, r5, r6, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	ec45 4b10 	vmov	d0, r4, r5
 8009600:	4616      	mov	r6, r2
 8009602:	f003 fd05 	bl	800d010 <__ulp>
 8009606:	ec51 0b10 	vmov	r0, r1, d0
 800960a:	b17e      	cbz	r6, 800962c <sulp+0x36>
 800960c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd09      	ble.n	800962c <sulp+0x36>
 8009618:	051b      	lsls	r3, r3, #20
 800961a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800961e:	2400      	movs	r4, #0
 8009620:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009624:	4622      	mov	r2, r4
 8009626:	462b      	mov	r3, r5
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009630 <_strtod_l>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ed2d 8b02 	vpush	{d8}
 8009638:	b09b      	sub	sp, #108	; 0x6c
 800963a:	4604      	mov	r4, r0
 800963c:	9213      	str	r2, [sp, #76]	; 0x4c
 800963e:	2200      	movs	r2, #0
 8009640:	9216      	str	r2, [sp, #88]	; 0x58
 8009642:	460d      	mov	r5, r1
 8009644:	f04f 0800 	mov.w	r8, #0
 8009648:	f04f 0900 	mov.w	r9, #0
 800964c:	460a      	mov	r2, r1
 800964e:	9215      	str	r2, [sp, #84]	; 0x54
 8009650:	7811      	ldrb	r1, [r2, #0]
 8009652:	292b      	cmp	r1, #43	; 0x2b
 8009654:	d04c      	beq.n	80096f0 <_strtod_l+0xc0>
 8009656:	d83a      	bhi.n	80096ce <_strtod_l+0x9e>
 8009658:	290d      	cmp	r1, #13
 800965a:	d834      	bhi.n	80096c6 <_strtod_l+0x96>
 800965c:	2908      	cmp	r1, #8
 800965e:	d834      	bhi.n	80096ca <_strtod_l+0x9a>
 8009660:	2900      	cmp	r1, #0
 8009662:	d03d      	beq.n	80096e0 <_strtod_l+0xb0>
 8009664:	2200      	movs	r2, #0
 8009666:	920a      	str	r2, [sp, #40]	; 0x28
 8009668:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800966a:	7832      	ldrb	r2, [r6, #0]
 800966c:	2a30      	cmp	r2, #48	; 0x30
 800966e:	f040 80b4 	bne.w	80097da <_strtod_l+0x1aa>
 8009672:	7872      	ldrb	r2, [r6, #1]
 8009674:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009678:	2a58      	cmp	r2, #88	; 0x58
 800967a:	d170      	bne.n	800975e <_strtod_l+0x12e>
 800967c:	9302      	str	r3, [sp, #8]
 800967e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	ab16      	add	r3, sp, #88	; 0x58
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4a8e      	ldr	r2, [pc, #568]	; (80098c0 <_strtod_l+0x290>)
 8009688:	ab17      	add	r3, sp, #92	; 0x5c
 800968a:	a915      	add	r1, sp, #84	; 0x54
 800968c:	4620      	mov	r0, r4
 800968e:	f002 fd9d 	bl	800c1cc <__gethex>
 8009692:	f010 070f 	ands.w	r7, r0, #15
 8009696:	4605      	mov	r5, r0
 8009698:	d005      	beq.n	80096a6 <_strtod_l+0x76>
 800969a:	2f06      	cmp	r7, #6
 800969c:	d12a      	bne.n	80096f4 <_strtod_l+0xc4>
 800969e:	3601      	adds	r6, #1
 80096a0:	2300      	movs	r3, #0
 80096a2:	9615      	str	r6, [sp, #84]	; 0x54
 80096a4:	930a      	str	r3, [sp, #40]	; 0x28
 80096a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 857f 	bne.w	800a1ac <_strtod_l+0xb7c>
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	b1db      	cbz	r3, 80096ea <_strtod_l+0xba>
 80096b2:	4642      	mov	r2, r8
 80096b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096b8:	ec43 2b10 	vmov	d0, r2, r3
 80096bc:	b01b      	add	sp, #108	; 0x6c
 80096be:	ecbd 8b02 	vpop	{d8}
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	2920      	cmp	r1, #32
 80096c8:	d1cc      	bne.n	8009664 <_strtod_l+0x34>
 80096ca:	3201      	adds	r2, #1
 80096cc:	e7bf      	b.n	800964e <_strtod_l+0x1e>
 80096ce:	292d      	cmp	r1, #45	; 0x2d
 80096d0:	d1c8      	bne.n	8009664 <_strtod_l+0x34>
 80096d2:	2101      	movs	r1, #1
 80096d4:	910a      	str	r1, [sp, #40]	; 0x28
 80096d6:	1c51      	adds	r1, r2, #1
 80096d8:	9115      	str	r1, [sp, #84]	; 0x54
 80096da:	7852      	ldrb	r2, [r2, #1]
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d1c3      	bne.n	8009668 <_strtod_l+0x38>
 80096e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096e2:	9515      	str	r5, [sp, #84]	; 0x54
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f040 855f 	bne.w	800a1a8 <_strtod_l+0xb78>
 80096ea:	4642      	mov	r2, r8
 80096ec:	464b      	mov	r3, r9
 80096ee:	e7e3      	b.n	80096b8 <_strtod_l+0x88>
 80096f0:	2100      	movs	r1, #0
 80096f2:	e7ef      	b.n	80096d4 <_strtod_l+0xa4>
 80096f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096f6:	b13a      	cbz	r2, 8009708 <_strtod_l+0xd8>
 80096f8:	2135      	movs	r1, #53	; 0x35
 80096fa:	a818      	add	r0, sp, #96	; 0x60
 80096fc:	f003 fd85 	bl	800d20a <__copybits>
 8009700:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009702:	4620      	mov	r0, r4
 8009704:	f003 f958 	bl	800c9b8 <_Bfree>
 8009708:	3f01      	subs	r7, #1
 800970a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800970c:	2f04      	cmp	r7, #4
 800970e:	d806      	bhi.n	800971e <_strtod_l+0xee>
 8009710:	e8df f007 	tbb	[pc, r7]
 8009714:	201d0314 	.word	0x201d0314
 8009718:	14          	.byte	0x14
 8009719:	00          	.byte	0x00
 800971a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800971e:	05e9      	lsls	r1, r5, #23
 8009720:	bf48      	it	mi
 8009722:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009726:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800972a:	0d1b      	lsrs	r3, r3, #20
 800972c:	051b      	lsls	r3, r3, #20
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1b9      	bne.n	80096a6 <_strtod_l+0x76>
 8009732:	f001 fdb5 	bl	800b2a0 <__errno>
 8009736:	2322      	movs	r3, #34	; 0x22
 8009738:	6003      	str	r3, [r0, #0]
 800973a:	e7b4      	b.n	80096a6 <_strtod_l+0x76>
 800973c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009740:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009744:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009748:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800974c:	e7e7      	b.n	800971e <_strtod_l+0xee>
 800974e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80098c8 <_strtod_l+0x298>
 8009752:	e7e4      	b.n	800971e <_strtod_l+0xee>
 8009754:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009758:	f04f 38ff 	mov.w	r8, #4294967295
 800975c:	e7df      	b.n	800971e <_strtod_l+0xee>
 800975e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	9215      	str	r2, [sp, #84]	; 0x54
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b30      	cmp	r3, #48	; 0x30
 8009768:	d0f9      	beq.n	800975e <_strtod_l+0x12e>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d09b      	beq.n	80096a6 <_strtod_l+0x76>
 800976e:	2301      	movs	r3, #1
 8009770:	f04f 0a00 	mov.w	sl, #0
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009778:	930b      	str	r3, [sp, #44]	; 0x2c
 800977a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800977e:	46d3      	mov	fp, sl
 8009780:	220a      	movs	r2, #10
 8009782:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009784:	7806      	ldrb	r6, [r0, #0]
 8009786:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800978a:	b2d9      	uxtb	r1, r3
 800978c:	2909      	cmp	r1, #9
 800978e:	d926      	bls.n	80097de <_strtod_l+0x1ae>
 8009790:	494c      	ldr	r1, [pc, #304]	; (80098c4 <_strtod_l+0x294>)
 8009792:	2201      	movs	r2, #1
 8009794:	f001 fd15 	bl	800b1c2 <strncmp>
 8009798:	2800      	cmp	r0, #0
 800979a:	d030      	beq.n	80097fe <_strtod_l+0x1ce>
 800979c:	2000      	movs	r0, #0
 800979e:	4632      	mov	r2, r6
 80097a0:	9005      	str	r0, [sp, #20]
 80097a2:	465e      	mov	r6, fp
 80097a4:	4603      	mov	r3, r0
 80097a6:	2a65      	cmp	r2, #101	; 0x65
 80097a8:	d001      	beq.n	80097ae <_strtod_l+0x17e>
 80097aa:	2a45      	cmp	r2, #69	; 0x45
 80097ac:	d113      	bne.n	80097d6 <_strtod_l+0x1a6>
 80097ae:	b91e      	cbnz	r6, 80097b8 <_strtod_l+0x188>
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	4302      	orrs	r2, r0
 80097b4:	d094      	beq.n	80096e0 <_strtod_l+0xb0>
 80097b6:	2600      	movs	r6, #0
 80097b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80097ba:	1c6a      	adds	r2, r5, #1
 80097bc:	9215      	str	r2, [sp, #84]	; 0x54
 80097be:	786a      	ldrb	r2, [r5, #1]
 80097c0:	2a2b      	cmp	r2, #43	; 0x2b
 80097c2:	d074      	beq.n	80098ae <_strtod_l+0x27e>
 80097c4:	2a2d      	cmp	r2, #45	; 0x2d
 80097c6:	d078      	beq.n	80098ba <_strtod_l+0x28a>
 80097c8:	f04f 0c00 	mov.w	ip, #0
 80097cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80097d0:	2909      	cmp	r1, #9
 80097d2:	d97f      	bls.n	80098d4 <_strtod_l+0x2a4>
 80097d4:	9515      	str	r5, [sp, #84]	; 0x54
 80097d6:	2700      	movs	r7, #0
 80097d8:	e09e      	b.n	8009918 <_strtod_l+0x2e8>
 80097da:	2300      	movs	r3, #0
 80097dc:	e7c8      	b.n	8009770 <_strtod_l+0x140>
 80097de:	f1bb 0f08 	cmp.w	fp, #8
 80097e2:	bfd8      	it	le
 80097e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80097e6:	f100 0001 	add.w	r0, r0, #1
 80097ea:	bfda      	itte	le
 80097ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80097f0:	9309      	strle	r3, [sp, #36]	; 0x24
 80097f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80097f6:	f10b 0b01 	add.w	fp, fp, #1
 80097fa:	9015      	str	r0, [sp, #84]	; 0x54
 80097fc:	e7c1      	b.n	8009782 <_strtod_l+0x152>
 80097fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	9215      	str	r2, [sp, #84]	; 0x54
 8009804:	785a      	ldrb	r2, [r3, #1]
 8009806:	f1bb 0f00 	cmp.w	fp, #0
 800980a:	d037      	beq.n	800987c <_strtod_l+0x24c>
 800980c:	9005      	str	r0, [sp, #20]
 800980e:	465e      	mov	r6, fp
 8009810:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009814:	2b09      	cmp	r3, #9
 8009816:	d912      	bls.n	800983e <_strtod_l+0x20e>
 8009818:	2301      	movs	r3, #1
 800981a:	e7c4      	b.n	80097a6 <_strtod_l+0x176>
 800981c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	9215      	str	r2, [sp, #84]	; 0x54
 8009822:	785a      	ldrb	r2, [r3, #1]
 8009824:	3001      	adds	r0, #1
 8009826:	2a30      	cmp	r2, #48	; 0x30
 8009828:	d0f8      	beq.n	800981c <_strtod_l+0x1ec>
 800982a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800982e:	2b08      	cmp	r3, #8
 8009830:	f200 84c1 	bhi.w	800a1b6 <_strtod_l+0xb86>
 8009834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009836:	9005      	str	r0, [sp, #20]
 8009838:	2000      	movs	r0, #0
 800983a:	930b      	str	r3, [sp, #44]	; 0x2c
 800983c:	4606      	mov	r6, r0
 800983e:	3a30      	subs	r2, #48	; 0x30
 8009840:	f100 0301 	add.w	r3, r0, #1
 8009844:	d014      	beq.n	8009870 <_strtod_l+0x240>
 8009846:	9905      	ldr	r1, [sp, #20]
 8009848:	4419      	add	r1, r3
 800984a:	9105      	str	r1, [sp, #20]
 800984c:	4633      	mov	r3, r6
 800984e:	eb00 0c06 	add.w	ip, r0, r6
 8009852:	210a      	movs	r1, #10
 8009854:	4563      	cmp	r3, ip
 8009856:	d113      	bne.n	8009880 <_strtod_l+0x250>
 8009858:	1833      	adds	r3, r6, r0
 800985a:	2b08      	cmp	r3, #8
 800985c:	f106 0601 	add.w	r6, r6, #1
 8009860:	4406      	add	r6, r0
 8009862:	dc1a      	bgt.n	800989a <_strtod_l+0x26a>
 8009864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009866:	230a      	movs	r3, #10
 8009868:	fb03 2301 	mla	r3, r3, r1, r2
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	2300      	movs	r3, #0
 8009870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009872:	1c51      	adds	r1, r2, #1
 8009874:	9115      	str	r1, [sp, #84]	; 0x54
 8009876:	7852      	ldrb	r2, [r2, #1]
 8009878:	4618      	mov	r0, r3
 800987a:	e7c9      	b.n	8009810 <_strtod_l+0x1e0>
 800987c:	4658      	mov	r0, fp
 800987e:	e7d2      	b.n	8009826 <_strtod_l+0x1f6>
 8009880:	2b08      	cmp	r3, #8
 8009882:	f103 0301 	add.w	r3, r3, #1
 8009886:	dc03      	bgt.n	8009890 <_strtod_l+0x260>
 8009888:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800988a:	434f      	muls	r7, r1
 800988c:	9709      	str	r7, [sp, #36]	; 0x24
 800988e:	e7e1      	b.n	8009854 <_strtod_l+0x224>
 8009890:	2b10      	cmp	r3, #16
 8009892:	bfd8      	it	le
 8009894:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009898:	e7dc      	b.n	8009854 <_strtod_l+0x224>
 800989a:	2e10      	cmp	r6, #16
 800989c:	bfdc      	itt	le
 800989e:	230a      	movle	r3, #10
 80098a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80098a4:	e7e3      	b.n	800986e <_strtod_l+0x23e>
 80098a6:	2300      	movs	r3, #0
 80098a8:	9305      	str	r3, [sp, #20]
 80098aa:	2301      	movs	r3, #1
 80098ac:	e780      	b.n	80097b0 <_strtod_l+0x180>
 80098ae:	f04f 0c00 	mov.w	ip, #0
 80098b2:	1caa      	adds	r2, r5, #2
 80098b4:	9215      	str	r2, [sp, #84]	; 0x54
 80098b6:	78aa      	ldrb	r2, [r5, #2]
 80098b8:	e788      	b.n	80097cc <_strtod_l+0x19c>
 80098ba:	f04f 0c01 	mov.w	ip, #1
 80098be:	e7f8      	b.n	80098b2 <_strtod_l+0x282>
 80098c0:	0800ec94 	.word	0x0800ec94
 80098c4:	0800ec90 	.word	0x0800ec90
 80098c8:	7ff00000 	.word	0x7ff00000
 80098cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098ce:	1c51      	adds	r1, r2, #1
 80098d0:	9115      	str	r1, [sp, #84]	; 0x54
 80098d2:	7852      	ldrb	r2, [r2, #1]
 80098d4:	2a30      	cmp	r2, #48	; 0x30
 80098d6:	d0f9      	beq.n	80098cc <_strtod_l+0x29c>
 80098d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80098dc:	2908      	cmp	r1, #8
 80098de:	f63f af7a 	bhi.w	80097d6 <_strtod_l+0x1a6>
 80098e2:	3a30      	subs	r2, #48	; 0x30
 80098e4:	9208      	str	r2, [sp, #32]
 80098e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098e8:	920c      	str	r2, [sp, #48]	; 0x30
 80098ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098ec:	1c57      	adds	r7, r2, #1
 80098ee:	9715      	str	r7, [sp, #84]	; 0x54
 80098f0:	7852      	ldrb	r2, [r2, #1]
 80098f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80098f6:	f1be 0f09 	cmp.w	lr, #9
 80098fa:	d938      	bls.n	800996e <_strtod_l+0x33e>
 80098fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098fe:	1a7f      	subs	r7, r7, r1
 8009900:	2f08      	cmp	r7, #8
 8009902:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009906:	dc03      	bgt.n	8009910 <_strtod_l+0x2e0>
 8009908:	9908      	ldr	r1, [sp, #32]
 800990a:	428f      	cmp	r7, r1
 800990c:	bfa8      	it	ge
 800990e:	460f      	movge	r7, r1
 8009910:	f1bc 0f00 	cmp.w	ip, #0
 8009914:	d000      	beq.n	8009918 <_strtod_l+0x2e8>
 8009916:	427f      	negs	r7, r7
 8009918:	2e00      	cmp	r6, #0
 800991a:	d14f      	bne.n	80099bc <_strtod_l+0x38c>
 800991c:	9904      	ldr	r1, [sp, #16]
 800991e:	4301      	orrs	r1, r0
 8009920:	f47f aec1 	bne.w	80096a6 <_strtod_l+0x76>
 8009924:	2b00      	cmp	r3, #0
 8009926:	f47f aedb 	bne.w	80096e0 <_strtod_l+0xb0>
 800992a:	2a69      	cmp	r2, #105	; 0x69
 800992c:	d029      	beq.n	8009982 <_strtod_l+0x352>
 800992e:	dc26      	bgt.n	800997e <_strtod_l+0x34e>
 8009930:	2a49      	cmp	r2, #73	; 0x49
 8009932:	d026      	beq.n	8009982 <_strtod_l+0x352>
 8009934:	2a4e      	cmp	r2, #78	; 0x4e
 8009936:	f47f aed3 	bne.w	80096e0 <_strtod_l+0xb0>
 800993a:	499b      	ldr	r1, [pc, #620]	; (8009ba8 <_strtod_l+0x578>)
 800993c:	a815      	add	r0, sp, #84	; 0x54
 800993e:	f002 fe85 	bl	800c64c <__match>
 8009942:	2800      	cmp	r0, #0
 8009944:	f43f aecc 	beq.w	80096e0 <_strtod_l+0xb0>
 8009948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b28      	cmp	r3, #40	; 0x28
 800994e:	d12f      	bne.n	80099b0 <_strtod_l+0x380>
 8009950:	4996      	ldr	r1, [pc, #600]	; (8009bac <_strtod_l+0x57c>)
 8009952:	aa18      	add	r2, sp, #96	; 0x60
 8009954:	a815      	add	r0, sp, #84	; 0x54
 8009956:	f002 fe8d 	bl	800c674 <__hexnan>
 800995a:	2805      	cmp	r0, #5
 800995c:	d128      	bne.n	80099b0 <_strtod_l+0x380>
 800995e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009960:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009964:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009968:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800996c:	e69b      	b.n	80096a6 <_strtod_l+0x76>
 800996e:	9f08      	ldr	r7, [sp, #32]
 8009970:	210a      	movs	r1, #10
 8009972:	fb01 2107 	mla	r1, r1, r7, r2
 8009976:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800997a:	9208      	str	r2, [sp, #32]
 800997c:	e7b5      	b.n	80098ea <_strtod_l+0x2ba>
 800997e:	2a6e      	cmp	r2, #110	; 0x6e
 8009980:	e7d9      	b.n	8009936 <_strtod_l+0x306>
 8009982:	498b      	ldr	r1, [pc, #556]	; (8009bb0 <_strtod_l+0x580>)
 8009984:	a815      	add	r0, sp, #84	; 0x54
 8009986:	f002 fe61 	bl	800c64c <__match>
 800998a:	2800      	cmp	r0, #0
 800998c:	f43f aea8 	beq.w	80096e0 <_strtod_l+0xb0>
 8009990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009992:	4988      	ldr	r1, [pc, #544]	; (8009bb4 <_strtod_l+0x584>)
 8009994:	3b01      	subs	r3, #1
 8009996:	a815      	add	r0, sp, #84	; 0x54
 8009998:	9315      	str	r3, [sp, #84]	; 0x54
 800999a:	f002 fe57 	bl	800c64c <__match>
 800999e:	b910      	cbnz	r0, 80099a6 <_strtod_l+0x376>
 80099a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099a2:	3301      	adds	r3, #1
 80099a4:	9315      	str	r3, [sp, #84]	; 0x54
 80099a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009bc4 <_strtod_l+0x594>
 80099aa:	f04f 0800 	mov.w	r8, #0
 80099ae:	e67a      	b.n	80096a6 <_strtod_l+0x76>
 80099b0:	4881      	ldr	r0, [pc, #516]	; (8009bb8 <_strtod_l+0x588>)
 80099b2:	f001 fcb1 	bl	800b318 <nan>
 80099b6:	ec59 8b10 	vmov	r8, r9, d0
 80099ba:	e674      	b.n	80096a6 <_strtod_l+0x76>
 80099bc:	9b05      	ldr	r3, [sp, #20]
 80099be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099c0:	1afb      	subs	r3, r7, r3
 80099c2:	f1bb 0f00 	cmp.w	fp, #0
 80099c6:	bf08      	it	eq
 80099c8:	46b3      	moveq	fp, r6
 80099ca:	2e10      	cmp	r6, #16
 80099cc:	9308      	str	r3, [sp, #32]
 80099ce:	4635      	mov	r5, r6
 80099d0:	bfa8      	it	ge
 80099d2:	2510      	movge	r5, #16
 80099d4:	f7f6 fd96 	bl	8000504 <__aeabi_ui2d>
 80099d8:	2e09      	cmp	r6, #9
 80099da:	4680      	mov	r8, r0
 80099dc:	4689      	mov	r9, r1
 80099de:	dd13      	ble.n	8009a08 <_strtod_l+0x3d8>
 80099e0:	4b76      	ldr	r3, [pc, #472]	; (8009bbc <_strtod_l+0x58c>)
 80099e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80099e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80099ea:	f7f6 fe05 	bl	80005f8 <__aeabi_dmul>
 80099ee:	4680      	mov	r8, r0
 80099f0:	4650      	mov	r0, sl
 80099f2:	4689      	mov	r9, r1
 80099f4:	f7f6 fd86 	bl	8000504 <__aeabi_ui2d>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fc44 	bl	800028c <__adddf3>
 8009a04:	4680      	mov	r8, r0
 8009a06:	4689      	mov	r9, r1
 8009a08:	2e0f      	cmp	r6, #15
 8009a0a:	dc38      	bgt.n	8009a7e <_strtod_l+0x44e>
 8009a0c:	9b08      	ldr	r3, [sp, #32]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f43f ae49 	beq.w	80096a6 <_strtod_l+0x76>
 8009a14:	dd24      	ble.n	8009a60 <_strtod_l+0x430>
 8009a16:	2b16      	cmp	r3, #22
 8009a18:	dc0b      	bgt.n	8009a32 <_strtod_l+0x402>
 8009a1a:	4968      	ldr	r1, [pc, #416]	; (8009bbc <_strtod_l+0x58c>)
 8009a1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a24:	4642      	mov	r2, r8
 8009a26:	464b      	mov	r3, r9
 8009a28:	f7f6 fde6 	bl	80005f8 <__aeabi_dmul>
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	4689      	mov	r9, r1
 8009a30:	e639      	b.n	80096a6 <_strtod_l+0x76>
 8009a32:	9a08      	ldr	r2, [sp, #32]
 8009a34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	db20      	blt.n	8009a7e <_strtod_l+0x44e>
 8009a3c:	4c5f      	ldr	r4, [pc, #380]	; (8009bbc <_strtod_l+0x58c>)
 8009a3e:	f1c6 060f 	rsb	r6, r6, #15
 8009a42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009a46:	4642      	mov	r2, r8
 8009a48:	464b      	mov	r3, r9
 8009a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4e:	f7f6 fdd3 	bl	80005f8 <__aeabi_dmul>
 8009a52:	9b08      	ldr	r3, [sp, #32]
 8009a54:	1b9e      	subs	r6, r3, r6
 8009a56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009a5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a5e:	e7e3      	b.n	8009a28 <_strtod_l+0x3f8>
 8009a60:	9b08      	ldr	r3, [sp, #32]
 8009a62:	3316      	adds	r3, #22
 8009a64:	db0b      	blt.n	8009a7e <_strtod_l+0x44e>
 8009a66:	9b05      	ldr	r3, [sp, #20]
 8009a68:	1bdf      	subs	r7, r3, r7
 8009a6a:	4b54      	ldr	r3, [pc, #336]	; (8009bbc <_strtod_l+0x58c>)
 8009a6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a74:	4640      	mov	r0, r8
 8009a76:	4649      	mov	r1, r9
 8009a78:	f7f6 fee8 	bl	800084c <__aeabi_ddiv>
 8009a7c:	e7d6      	b.n	8009a2c <_strtod_l+0x3fc>
 8009a7e:	9b08      	ldr	r3, [sp, #32]
 8009a80:	1b75      	subs	r5, r6, r5
 8009a82:	441d      	add	r5, r3
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	dd70      	ble.n	8009b6a <_strtod_l+0x53a>
 8009a88:	f015 030f 	ands.w	r3, r5, #15
 8009a8c:	d00a      	beq.n	8009aa4 <_strtod_l+0x474>
 8009a8e:	494b      	ldr	r1, [pc, #300]	; (8009bbc <_strtod_l+0x58c>)
 8009a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a94:	4642      	mov	r2, r8
 8009a96:	464b      	mov	r3, r9
 8009a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a9c:	f7f6 fdac 	bl	80005f8 <__aeabi_dmul>
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	4689      	mov	r9, r1
 8009aa4:	f035 050f 	bics.w	r5, r5, #15
 8009aa8:	d04d      	beq.n	8009b46 <_strtod_l+0x516>
 8009aaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009aae:	dd22      	ble.n	8009af6 <_strtod_l+0x4c6>
 8009ab0:	2500      	movs	r5, #0
 8009ab2:	46ab      	mov	fp, r5
 8009ab4:	9509      	str	r5, [sp, #36]	; 0x24
 8009ab6:	9505      	str	r5, [sp, #20]
 8009ab8:	2322      	movs	r3, #34	; 0x22
 8009aba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009bc4 <_strtod_l+0x594>
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	f04f 0800 	mov.w	r8, #0
 8009ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f43f aded 	beq.w	80096a6 <_strtod_l+0x76>
 8009acc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f002 ff72 	bl	800c9b8 <_Bfree>
 8009ad4:	9905      	ldr	r1, [sp, #20]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f002 ff6e 	bl	800c9b8 <_Bfree>
 8009adc:	4659      	mov	r1, fp
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f002 ff6a 	bl	800c9b8 <_Bfree>
 8009ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f002 ff66 	bl	800c9b8 <_Bfree>
 8009aec:	4629      	mov	r1, r5
 8009aee:	4620      	mov	r0, r4
 8009af0:	f002 ff62 	bl	800c9b8 <_Bfree>
 8009af4:	e5d7      	b.n	80096a6 <_strtod_l+0x76>
 8009af6:	4b32      	ldr	r3, [pc, #200]	; (8009bc0 <_strtod_l+0x590>)
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	2300      	movs	r3, #0
 8009afc:	112d      	asrs	r5, r5, #4
 8009afe:	4640      	mov	r0, r8
 8009b00:	4649      	mov	r1, r9
 8009b02:	469a      	mov	sl, r3
 8009b04:	2d01      	cmp	r5, #1
 8009b06:	dc21      	bgt.n	8009b4c <_strtod_l+0x51c>
 8009b08:	b10b      	cbz	r3, 8009b0e <_strtod_l+0x4de>
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	4689      	mov	r9, r1
 8009b0e:	492c      	ldr	r1, [pc, #176]	; (8009bc0 <_strtod_l+0x590>)
 8009b10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009b14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b20:	f7f6 fd6a 	bl	80005f8 <__aeabi_dmul>
 8009b24:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <_strtod_l+0x594>)
 8009b26:	460a      	mov	r2, r1
 8009b28:	400b      	ands	r3, r1
 8009b2a:	4927      	ldr	r1, [pc, #156]	; (8009bc8 <_strtod_l+0x598>)
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	4680      	mov	r8, r0
 8009b30:	d8be      	bhi.n	8009ab0 <_strtod_l+0x480>
 8009b32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b36:	428b      	cmp	r3, r1
 8009b38:	bf86      	itte	hi
 8009b3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009bcc <_strtod_l+0x59c>
 8009b3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009b42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009b46:	2300      	movs	r3, #0
 8009b48:	9304      	str	r3, [sp, #16]
 8009b4a:	e07b      	b.n	8009c44 <_strtod_l+0x614>
 8009b4c:	07ea      	lsls	r2, r5, #31
 8009b4e:	d505      	bpl.n	8009b5c <_strtod_l+0x52c>
 8009b50:	9b04      	ldr	r3, [sp, #16]
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	9a04      	ldr	r2, [sp, #16]
 8009b5e:	3208      	adds	r2, #8
 8009b60:	f10a 0a01 	add.w	sl, sl, #1
 8009b64:	106d      	asrs	r5, r5, #1
 8009b66:	9204      	str	r2, [sp, #16]
 8009b68:	e7cc      	b.n	8009b04 <_strtod_l+0x4d4>
 8009b6a:	d0ec      	beq.n	8009b46 <_strtod_l+0x516>
 8009b6c:	426d      	negs	r5, r5
 8009b6e:	f015 020f 	ands.w	r2, r5, #15
 8009b72:	d00a      	beq.n	8009b8a <_strtod_l+0x55a>
 8009b74:	4b11      	ldr	r3, [pc, #68]	; (8009bbc <_strtod_l+0x58c>)
 8009b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f7f6 fe63 	bl	800084c <__aeabi_ddiv>
 8009b86:	4680      	mov	r8, r0
 8009b88:	4689      	mov	r9, r1
 8009b8a:	112d      	asrs	r5, r5, #4
 8009b8c:	d0db      	beq.n	8009b46 <_strtod_l+0x516>
 8009b8e:	2d1f      	cmp	r5, #31
 8009b90:	dd1e      	ble.n	8009bd0 <_strtod_l+0x5a0>
 8009b92:	2500      	movs	r5, #0
 8009b94:	46ab      	mov	fp, r5
 8009b96:	9509      	str	r5, [sp, #36]	; 0x24
 8009b98:	9505      	str	r5, [sp, #20]
 8009b9a:	2322      	movs	r3, #34	; 0x22
 8009b9c:	f04f 0800 	mov.w	r8, #0
 8009ba0:	f04f 0900 	mov.w	r9, #0
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	e78d      	b.n	8009ac4 <_strtod_l+0x494>
 8009ba8:	0800ed1a 	.word	0x0800ed1a
 8009bac:	0800eca8 	.word	0x0800eca8
 8009bb0:	0800ed12 	.word	0x0800ed12
 8009bb4:	0800ed8d 	.word	0x0800ed8d
 8009bb8:	0800ed89 	.word	0x0800ed89
 8009bbc:	0800eef8 	.word	0x0800eef8
 8009bc0:	0800eed0 	.word	0x0800eed0
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	7ca00000 	.word	0x7ca00000
 8009bcc:	7fefffff 	.word	0x7fefffff
 8009bd0:	f015 0310 	ands.w	r3, r5, #16
 8009bd4:	bf18      	it	ne
 8009bd6:	236a      	movne	r3, #106	; 0x6a
 8009bd8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009f7c <_strtod_l+0x94c>
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	4640      	mov	r0, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	2300      	movs	r3, #0
 8009be4:	07ea      	lsls	r2, r5, #31
 8009be6:	d504      	bpl.n	8009bf2 <_strtod_l+0x5c2>
 8009be8:	e9da 2300 	ldrd	r2, r3, [sl]
 8009bec:	f7f6 fd04 	bl	80005f8 <__aeabi_dmul>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	106d      	asrs	r5, r5, #1
 8009bf4:	f10a 0a08 	add.w	sl, sl, #8
 8009bf8:	d1f4      	bne.n	8009be4 <_strtod_l+0x5b4>
 8009bfa:	b10b      	cbz	r3, 8009c00 <_strtod_l+0x5d0>
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	4689      	mov	r9, r1
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	b1bb      	cbz	r3, 8009c34 <_strtod_l+0x604>
 8009c04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009c08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	4649      	mov	r1, r9
 8009c10:	dd10      	ble.n	8009c34 <_strtod_l+0x604>
 8009c12:	2b1f      	cmp	r3, #31
 8009c14:	f340 811e 	ble.w	8009e54 <_strtod_l+0x824>
 8009c18:	2b34      	cmp	r3, #52	; 0x34
 8009c1a:	bfde      	ittt	le
 8009c1c:	f04f 33ff 	movle.w	r3, #4294967295
 8009c20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009c24:	4093      	lslle	r3, r2
 8009c26:	f04f 0800 	mov.w	r8, #0
 8009c2a:	bfcc      	ite	gt
 8009c2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c30:	ea03 0901 	andle.w	r9, r3, r1
 8009c34:	2200      	movs	r2, #0
 8009c36:	2300      	movs	r3, #0
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7f6 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1a6      	bne.n	8009b92 <_strtod_l+0x562>
 8009c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c4a:	4633      	mov	r3, r6
 8009c4c:	465a      	mov	r2, fp
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f002 ff1a 	bl	800ca88 <__s2b>
 8009c54:	9009      	str	r0, [sp, #36]	; 0x24
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f43f af2a 	beq.w	8009ab0 <_strtod_l+0x480>
 8009c5c:	9a08      	ldr	r2, [sp, #32]
 8009c5e:	9b05      	ldr	r3, [sp, #20]
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	eba3 0307 	sub.w	r3, r3, r7
 8009c66:	bfa8      	it	ge
 8009c68:	2300      	movge	r3, #0
 8009c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c6c:	2500      	movs	r5, #0
 8009c6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c72:	9312      	str	r3, [sp, #72]	; 0x48
 8009c74:	46ab      	mov	fp, r5
 8009c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c78:	4620      	mov	r0, r4
 8009c7a:	6859      	ldr	r1, [r3, #4]
 8009c7c:	f002 fe5c 	bl	800c938 <_Balloc>
 8009c80:	9005      	str	r0, [sp, #20]
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f43f af18 	beq.w	8009ab8 <_strtod_l+0x488>
 8009c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	f103 010c 	add.w	r1, r3, #12
 8009c92:	0092      	lsls	r2, r2, #2
 8009c94:	300c      	adds	r0, #12
 8009c96:	f001 fb2f 	bl	800b2f8 <memcpy>
 8009c9a:	ec49 8b10 	vmov	d0, r8, r9
 8009c9e:	aa18      	add	r2, sp, #96	; 0x60
 8009ca0:	a917      	add	r1, sp, #92	; 0x5c
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f003 fa24 	bl	800d0f0 <__d2b>
 8009ca8:	ec49 8b18 	vmov	d8, r8, r9
 8009cac:	9016      	str	r0, [sp, #88]	; 0x58
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f43f af02 	beq.w	8009ab8 <_strtod_l+0x488>
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f002 ff7e 	bl	800cbb8 <__i2b>
 8009cbc:	4683      	mov	fp, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f aefa 	beq.w	8009ab8 <_strtod_l+0x488>
 8009cc4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009cc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	bfab      	itete	ge
 8009ccc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009cce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009cd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009cd2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009cd6:	bfac      	ite	ge
 8009cd8:	eb06 0a03 	addge.w	sl, r6, r3
 8009cdc:	1b9f      	sublt	r7, r3, r6
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	1af6      	subs	r6, r6, r3
 8009ce2:	4416      	add	r6, r2
 8009ce4:	4ba0      	ldr	r3, [pc, #640]	; (8009f68 <_strtod_l+0x938>)
 8009ce6:	3e01      	subs	r6, #1
 8009ce8:	429e      	cmp	r6, r3
 8009cea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009cee:	f280 80c4 	bge.w	8009e7a <_strtod_l+0x84a>
 8009cf2:	1b9b      	subs	r3, r3, r6
 8009cf4:	2b1f      	cmp	r3, #31
 8009cf6:	eba2 0203 	sub.w	r2, r2, r3
 8009cfa:	f04f 0101 	mov.w	r1, #1
 8009cfe:	f300 80b0 	bgt.w	8009e62 <_strtod_l+0x832>
 8009d02:	fa01 f303 	lsl.w	r3, r1, r3
 8009d06:	930e      	str	r3, [sp, #56]	; 0x38
 8009d08:	2300      	movs	r3, #0
 8009d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d0c:	eb0a 0602 	add.w	r6, sl, r2
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	45b2      	cmp	sl, r6
 8009d14:	4417      	add	r7, r2
 8009d16:	441f      	add	r7, r3
 8009d18:	4653      	mov	r3, sl
 8009d1a:	bfa8      	it	ge
 8009d1c:	4633      	movge	r3, r6
 8009d1e:	42bb      	cmp	r3, r7
 8009d20:	bfa8      	it	ge
 8009d22:	463b      	movge	r3, r7
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfc2      	ittt	gt
 8009d28:	1af6      	subgt	r6, r6, r3
 8009d2a:	1aff      	subgt	r7, r7, r3
 8009d2c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dd17      	ble.n	8009d66 <_strtod_l+0x736>
 8009d36:	4659      	mov	r1, fp
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f002 fffc 	bl	800cd38 <__pow5mult>
 8009d40:	4683      	mov	fp, r0
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f aeb8 	beq.w	8009ab8 <_strtod_l+0x488>
 8009d48:	4601      	mov	r1, r0
 8009d4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f002 ff49 	bl	800cbe4 <__multiply>
 8009d52:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f43f aeaf 	beq.w	8009ab8 <_strtod_l+0x488>
 8009d5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f002 fe2b 	bl	800c9b8 <_Bfree>
 8009d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d64:	9316      	str	r3, [sp, #88]	; 0x58
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	f300 808c 	bgt.w	8009e84 <_strtod_l+0x854>
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dd08      	ble.n	8009d84 <_strtod_l+0x754>
 8009d72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d74:	9905      	ldr	r1, [sp, #20]
 8009d76:	4620      	mov	r0, r4
 8009d78:	f002 ffde 	bl	800cd38 <__pow5mult>
 8009d7c:	9005      	str	r0, [sp, #20]
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	f43f ae9a 	beq.w	8009ab8 <_strtod_l+0x488>
 8009d84:	2f00      	cmp	r7, #0
 8009d86:	dd08      	ble.n	8009d9a <_strtod_l+0x76a>
 8009d88:	9905      	ldr	r1, [sp, #20]
 8009d8a:	463a      	mov	r2, r7
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f003 f82d 	bl	800cdec <__lshift>
 8009d92:	9005      	str	r0, [sp, #20]
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f ae8f 	beq.w	8009ab8 <_strtod_l+0x488>
 8009d9a:	f1ba 0f00 	cmp.w	sl, #0
 8009d9e:	dd08      	ble.n	8009db2 <_strtod_l+0x782>
 8009da0:	4659      	mov	r1, fp
 8009da2:	4652      	mov	r2, sl
 8009da4:	4620      	mov	r0, r4
 8009da6:	f003 f821 	bl	800cdec <__lshift>
 8009daa:	4683      	mov	fp, r0
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f43f ae83 	beq.w	8009ab8 <_strtod_l+0x488>
 8009db2:	9a05      	ldr	r2, [sp, #20]
 8009db4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009db6:	4620      	mov	r0, r4
 8009db8:	f003 f8a0 	bl	800cefc <__mdiff>
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f ae7a 	beq.w	8009ab8 <_strtod_l+0x488>
 8009dc4:	68c3      	ldr	r3, [r0, #12]
 8009dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60c3      	str	r3, [r0, #12]
 8009dcc:	4659      	mov	r1, fp
 8009dce:	f003 f879 	bl	800cec4 <__mcmp>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	da60      	bge.n	8009e98 <_strtod_l+0x868>
 8009dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dd8:	ea53 0308 	orrs.w	r3, r3, r8
 8009ddc:	f040 8084 	bne.w	8009ee8 <_strtod_l+0x8b8>
 8009de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d17f      	bne.n	8009ee8 <_strtod_l+0x8b8>
 8009de8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dec:	0d1b      	lsrs	r3, r3, #20
 8009dee:	051b      	lsls	r3, r3, #20
 8009df0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009df4:	d978      	bls.n	8009ee8 <_strtod_l+0x8b8>
 8009df6:	696b      	ldr	r3, [r5, #20]
 8009df8:	b913      	cbnz	r3, 8009e00 <_strtod_l+0x7d0>
 8009dfa:	692b      	ldr	r3, [r5, #16]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	dd73      	ble.n	8009ee8 <_strtod_l+0x8b8>
 8009e00:	4629      	mov	r1, r5
 8009e02:	2201      	movs	r2, #1
 8009e04:	4620      	mov	r0, r4
 8009e06:	f002 fff1 	bl	800cdec <__lshift>
 8009e0a:	4659      	mov	r1, fp
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	f003 f859 	bl	800cec4 <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	dd68      	ble.n	8009ee8 <_strtod_l+0x8b8>
 8009e16:	9904      	ldr	r1, [sp, #16]
 8009e18:	4a54      	ldr	r2, [pc, #336]	; (8009f6c <_strtod_l+0x93c>)
 8009e1a:	464b      	mov	r3, r9
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	f000 8084 	beq.w	8009f2a <_strtod_l+0x8fa>
 8009e22:	ea02 0109 	and.w	r1, r2, r9
 8009e26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e2a:	dc7e      	bgt.n	8009f2a <_strtod_l+0x8fa>
 8009e2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e30:	f77f aeb3 	ble.w	8009b9a <_strtod_l+0x56a>
 8009e34:	4b4e      	ldr	r3, [pc, #312]	; (8009f70 <_strtod_l+0x940>)
 8009e36:	4640      	mov	r0, r8
 8009e38:	4649      	mov	r1, r9
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f7f6 fbdc 	bl	80005f8 <__aeabi_dmul>
 8009e40:	4b4a      	ldr	r3, [pc, #296]	; (8009f6c <_strtod_l+0x93c>)
 8009e42:	400b      	ands	r3, r1
 8009e44:	4680      	mov	r8, r0
 8009e46:	4689      	mov	r9, r1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f47f ae3f 	bne.w	8009acc <_strtod_l+0x49c>
 8009e4e:	2322      	movs	r3, #34	; 0x22
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	e63b      	b.n	8009acc <_strtod_l+0x49c>
 8009e54:	f04f 32ff 	mov.w	r2, #4294967295
 8009e58:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5c:	ea03 0808 	and.w	r8, r3, r8
 8009e60:	e6e8      	b.n	8009c34 <_strtod_l+0x604>
 8009e62:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009e66:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009e6a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009e6e:	36e2      	adds	r6, #226	; 0xe2
 8009e70:	fa01 f306 	lsl.w	r3, r1, r6
 8009e74:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009e78:	e748      	b.n	8009d0c <_strtod_l+0x6dc>
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009e82:	e743      	b.n	8009d0c <_strtod_l+0x6dc>
 8009e84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e86:	4632      	mov	r2, r6
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f002 ffaf 	bl	800cdec <__lshift>
 8009e8e:	9016      	str	r0, [sp, #88]	; 0x58
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f47f af6b 	bne.w	8009d6c <_strtod_l+0x73c>
 8009e96:	e60f      	b.n	8009ab8 <_strtod_l+0x488>
 8009e98:	46ca      	mov	sl, r9
 8009e9a:	d171      	bne.n	8009f80 <_strtod_l+0x950>
 8009e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ea2:	b352      	cbz	r2, 8009efa <_strtod_l+0x8ca>
 8009ea4:	4a33      	ldr	r2, [pc, #204]	; (8009f74 <_strtod_l+0x944>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d12a      	bne.n	8009f00 <_strtod_l+0x8d0>
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	4641      	mov	r1, r8
 8009eae:	b1fb      	cbz	r3, 8009ef0 <_strtod_l+0x8c0>
 8009eb0:	4b2e      	ldr	r3, [pc, #184]	; (8009f6c <_strtod_l+0x93c>)
 8009eb2:	ea09 0303 	and.w	r3, r9, r3
 8009eb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebe:	d81a      	bhi.n	8009ef6 <_strtod_l+0x8c6>
 8009ec0:	0d1b      	lsrs	r3, r3, #20
 8009ec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eca:	4299      	cmp	r1, r3
 8009ecc:	d118      	bne.n	8009f00 <_strtod_l+0x8d0>
 8009ece:	4b2a      	ldr	r3, [pc, #168]	; (8009f78 <_strtod_l+0x948>)
 8009ed0:	459a      	cmp	sl, r3
 8009ed2:	d102      	bne.n	8009eda <_strtod_l+0x8aa>
 8009ed4:	3101      	adds	r1, #1
 8009ed6:	f43f adef 	beq.w	8009ab8 <_strtod_l+0x488>
 8009eda:	4b24      	ldr	r3, [pc, #144]	; (8009f6c <_strtod_l+0x93c>)
 8009edc:	ea0a 0303 	and.w	r3, sl, r3
 8009ee0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009ee4:	f04f 0800 	mov.w	r8, #0
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1a2      	bne.n	8009e34 <_strtod_l+0x804>
 8009eee:	e5ed      	b.n	8009acc <_strtod_l+0x49c>
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef4:	e7e9      	b.n	8009eca <_strtod_l+0x89a>
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	e7e7      	b.n	8009eca <_strtod_l+0x89a>
 8009efa:	ea53 0308 	orrs.w	r3, r3, r8
 8009efe:	d08a      	beq.n	8009e16 <_strtod_l+0x7e6>
 8009f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f02:	b1e3      	cbz	r3, 8009f3e <_strtod_l+0x90e>
 8009f04:	ea13 0f0a 	tst.w	r3, sl
 8009f08:	d0ee      	beq.n	8009ee8 <_strtod_l+0x8b8>
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0c:	9a04      	ldr	r2, [sp, #16]
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4649      	mov	r1, r9
 8009f12:	b1c3      	cbz	r3, 8009f46 <_strtod_l+0x916>
 8009f14:	f7ff fb6f 	bl	80095f6 <sulp>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	ec51 0b18 	vmov	r0, r1, d8
 8009f20:	f7f6 f9b4 	bl	800028c <__adddf3>
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	e7de      	b.n	8009ee8 <_strtod_l+0x8b8>
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f34:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f38:	f04f 38ff 	mov.w	r8, #4294967295
 8009f3c:	e7d4      	b.n	8009ee8 <_strtod_l+0x8b8>
 8009f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f40:	ea13 0f08 	tst.w	r3, r8
 8009f44:	e7e0      	b.n	8009f08 <_strtod_l+0x8d8>
 8009f46:	f7ff fb56 	bl	80095f6 <sulp>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	ec51 0b18 	vmov	r0, r1, d8
 8009f52:	f7f6 f999 	bl	8000288 <__aeabi_dsub>
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	4689      	mov	r9, r1
 8009f5e:	f7f6 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d0c0      	beq.n	8009ee8 <_strtod_l+0x8b8>
 8009f66:	e618      	b.n	8009b9a <_strtod_l+0x56a>
 8009f68:	fffffc02 	.word	0xfffffc02
 8009f6c:	7ff00000 	.word	0x7ff00000
 8009f70:	39500000 	.word	0x39500000
 8009f74:	000fffff 	.word	0x000fffff
 8009f78:	7fefffff 	.word	0x7fefffff
 8009f7c:	0800ecc0 	.word	0x0800ecc0
 8009f80:	4659      	mov	r1, fp
 8009f82:	4628      	mov	r0, r5
 8009f84:	f003 f90e 	bl	800d1a4 <__ratio>
 8009f88:	ec57 6b10 	vmov	r6, r7, d0
 8009f8c:	ee10 0a10 	vmov	r0, s0
 8009f90:	2200      	movs	r2, #0
 8009f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 fdaa 	bl	8000af0 <__aeabi_dcmple>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d071      	beq.n	800a084 <_strtod_l+0xa54>
 8009fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d17c      	bne.n	800a0a0 <_strtod_l+0xa70>
 8009fa6:	f1b8 0f00 	cmp.w	r8, #0
 8009faa:	d15a      	bne.n	800a062 <_strtod_l+0xa32>
 8009fac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d15d      	bne.n	800a070 <_strtod_l+0xa40>
 8009fb4:	4b90      	ldr	r3, [pc, #576]	; (800a1f8 <_strtod_l+0xbc8>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 fd8e 	bl	8000adc <__aeabi_dcmplt>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d15c      	bne.n	800a07e <_strtod_l+0xa4e>
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	4b8c      	ldr	r3, [pc, #560]	; (800a1fc <_strtod_l+0xbcc>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f7f6 fb14 	bl	80005f8 <__aeabi_dmul>
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009fd8:	9606      	str	r6, [sp, #24]
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fe0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009fe4:	4b86      	ldr	r3, [pc, #536]	; (800a200 <_strtod_l+0xbd0>)
 8009fe6:	ea0a 0303 	and.w	r3, sl, r3
 8009fea:	930d      	str	r3, [sp, #52]	; 0x34
 8009fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fee:	4b85      	ldr	r3, [pc, #532]	; (800a204 <_strtod_l+0xbd4>)
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	f040 8090 	bne.w	800a116 <_strtod_l+0xae6>
 8009ff6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009ffa:	ec49 8b10 	vmov	d0, r8, r9
 8009ffe:	f003 f807 	bl	800d010 <__ulp>
 800a002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a006:	ec51 0b10 	vmov	r0, r1, d0
 800a00a:	f7f6 faf5 	bl	80005f8 <__aeabi_dmul>
 800a00e:	4642      	mov	r2, r8
 800a010:	464b      	mov	r3, r9
 800a012:	f7f6 f93b 	bl	800028c <__adddf3>
 800a016:	460b      	mov	r3, r1
 800a018:	4979      	ldr	r1, [pc, #484]	; (800a200 <_strtod_l+0xbd0>)
 800a01a:	4a7b      	ldr	r2, [pc, #492]	; (800a208 <_strtod_l+0xbd8>)
 800a01c:	4019      	ands	r1, r3
 800a01e:	4291      	cmp	r1, r2
 800a020:	4680      	mov	r8, r0
 800a022:	d944      	bls.n	800a0ae <_strtod_l+0xa7e>
 800a024:	ee18 2a90 	vmov	r2, s17
 800a028:	4b78      	ldr	r3, [pc, #480]	; (800a20c <_strtod_l+0xbdc>)
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d104      	bne.n	800a038 <_strtod_l+0xa08>
 800a02e:	ee18 3a10 	vmov	r3, s16
 800a032:	3301      	adds	r3, #1
 800a034:	f43f ad40 	beq.w	8009ab8 <_strtod_l+0x488>
 800a038:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a20c <_strtod_l+0xbdc>
 800a03c:	f04f 38ff 	mov.w	r8, #4294967295
 800a040:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a042:	4620      	mov	r0, r4
 800a044:	f002 fcb8 	bl	800c9b8 <_Bfree>
 800a048:	9905      	ldr	r1, [sp, #20]
 800a04a:	4620      	mov	r0, r4
 800a04c:	f002 fcb4 	bl	800c9b8 <_Bfree>
 800a050:	4659      	mov	r1, fp
 800a052:	4620      	mov	r0, r4
 800a054:	f002 fcb0 	bl	800c9b8 <_Bfree>
 800a058:	4629      	mov	r1, r5
 800a05a:	4620      	mov	r0, r4
 800a05c:	f002 fcac 	bl	800c9b8 <_Bfree>
 800a060:	e609      	b.n	8009c76 <_strtod_l+0x646>
 800a062:	f1b8 0f01 	cmp.w	r8, #1
 800a066:	d103      	bne.n	800a070 <_strtod_l+0xa40>
 800a068:	f1b9 0f00 	cmp.w	r9, #0
 800a06c:	f43f ad95 	beq.w	8009b9a <_strtod_l+0x56a>
 800a070:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a1c8 <_strtod_l+0xb98>
 800a074:	4f60      	ldr	r7, [pc, #384]	; (800a1f8 <_strtod_l+0xbc8>)
 800a076:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a07a:	2600      	movs	r6, #0
 800a07c:	e7ae      	b.n	8009fdc <_strtod_l+0x9ac>
 800a07e:	4f5f      	ldr	r7, [pc, #380]	; (800a1fc <_strtod_l+0xbcc>)
 800a080:	2600      	movs	r6, #0
 800a082:	e7a7      	b.n	8009fd4 <_strtod_l+0x9a4>
 800a084:	4b5d      	ldr	r3, [pc, #372]	; (800a1fc <_strtod_l+0xbcc>)
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	2200      	movs	r2, #0
 800a08c:	f7f6 fab4 	bl	80005f8 <__aeabi_dmul>
 800a090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a092:	4606      	mov	r6, r0
 800a094:	460f      	mov	r7, r1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d09c      	beq.n	8009fd4 <_strtod_l+0x9a4>
 800a09a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a09e:	e79d      	b.n	8009fdc <_strtod_l+0x9ac>
 800a0a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a1d0 <_strtod_l+0xba0>
 800a0a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0a8:	ec57 6b17 	vmov	r6, r7, d7
 800a0ac:	e796      	b.n	8009fdc <_strtod_l+0x9ac>
 800a0ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a0b2:	9b04      	ldr	r3, [sp, #16]
 800a0b4:	46ca      	mov	sl, r9
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1c2      	bne.n	800a040 <_strtod_l+0xa10>
 800a0ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c0:	0d1b      	lsrs	r3, r3, #20
 800a0c2:	051b      	lsls	r3, r3, #20
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d1bb      	bne.n	800a040 <_strtod_l+0xa10>
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 fdf4 	bl	8000cb8 <__aeabi_d2lz>
 800a0d0:	f7f6 fa64 	bl	800059c <__aeabi_l2d>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 f8d4 	bl	8000288 <__aeabi_dsub>
 800a0e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0e6:	ea43 0308 	orr.w	r3, r3, r8
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	460f      	mov	r7, r1
 800a0f0:	d054      	beq.n	800a19c <_strtod_l+0xb6c>
 800a0f2:	a339      	add	r3, pc, #228	; (adr r3, 800a1d8 <_strtod_l+0xba8>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	f7f6 fcf0 	bl	8000adc <__aeabi_dcmplt>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f47f ace5 	bne.w	8009acc <_strtod_l+0x49c>
 800a102:	a337      	add	r3, pc, #220	; (adr r3, 800a1e0 <_strtod_l+0xbb0>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 800a110:	2800      	cmp	r0, #0
 800a112:	d095      	beq.n	800a040 <_strtod_l+0xa10>
 800a114:	e4da      	b.n	8009acc <_strtod_l+0x49c>
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	b333      	cbz	r3, 800a168 <_strtod_l+0xb38>
 800a11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a11c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a120:	d822      	bhi.n	800a168 <_strtod_l+0xb38>
 800a122:	a331      	add	r3, pc, #196	; (adr r3, 800a1e8 <_strtod_l+0xbb8>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4630      	mov	r0, r6
 800a12a:	4639      	mov	r1, r7
 800a12c:	f7f6 fce0 	bl	8000af0 <__aeabi_dcmple>
 800a130:	b1a0      	cbz	r0, 800a15c <_strtod_l+0xb2c>
 800a132:	4639      	mov	r1, r7
 800a134:	4630      	mov	r0, r6
 800a136:	f7f6 fd37 	bl	8000ba8 <__aeabi_d2uiz>
 800a13a:	2801      	cmp	r0, #1
 800a13c:	bf38      	it	cc
 800a13e:	2001      	movcc	r0, #1
 800a140:	f7f6 f9e0 	bl	8000504 <__aeabi_ui2d>
 800a144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a146:	4606      	mov	r6, r0
 800a148:	460f      	mov	r7, r1
 800a14a:	bb23      	cbnz	r3, 800a196 <_strtod_l+0xb66>
 800a14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a150:	9010      	str	r0, [sp, #64]	; 0x40
 800a152:	9311      	str	r3, [sp, #68]	; 0x44
 800a154:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a158:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a15e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a160:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	930f      	str	r3, [sp, #60]	; 0x3c
 800a168:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a16c:	eeb0 0a48 	vmov.f32	s0, s16
 800a170:	eef0 0a68 	vmov.f32	s1, s17
 800a174:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a178:	f002 ff4a 	bl	800d010 <__ulp>
 800a17c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a180:	ec53 2b10 	vmov	r2, r3, d0
 800a184:	f7f6 fa38 	bl	80005f8 <__aeabi_dmul>
 800a188:	ec53 2b18 	vmov	r2, r3, d8
 800a18c:	f7f6 f87e 	bl	800028c <__adddf3>
 800a190:	4680      	mov	r8, r0
 800a192:	4689      	mov	r9, r1
 800a194:	e78d      	b.n	800a0b2 <_strtod_l+0xa82>
 800a196:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a19a:	e7db      	b.n	800a154 <_strtod_l+0xb24>
 800a19c:	a314      	add	r3, pc, #80	; (adr r3, 800a1f0 <_strtod_l+0xbc0>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800a1a6:	e7b3      	b.n	800a110 <_strtod_l+0xae0>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	f7ff ba7c 	b.w	80096ae <_strtod_l+0x7e>
 800a1b6:	2a65      	cmp	r2, #101	; 0x65
 800a1b8:	f43f ab75 	beq.w	80098a6 <_strtod_l+0x276>
 800a1bc:	2a45      	cmp	r2, #69	; 0x45
 800a1be:	f43f ab72 	beq.w	80098a6 <_strtod_l+0x276>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f7ff bbaa 	b.w	800991c <_strtod_l+0x2ec>
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	3ff00000 	.word	0x3ff00000
 800a1d8:	94a03595 	.word	0x94a03595
 800a1dc:	3fdfffff 	.word	0x3fdfffff
 800a1e0:	35afe535 	.word	0x35afe535
 800a1e4:	3fe00000 	.word	0x3fe00000
 800a1e8:	ffc00000 	.word	0xffc00000
 800a1ec:	41dfffff 	.word	0x41dfffff
 800a1f0:	94a03595 	.word	0x94a03595
 800a1f4:	3fcfffff 	.word	0x3fcfffff
 800a1f8:	3ff00000 	.word	0x3ff00000
 800a1fc:	3fe00000 	.word	0x3fe00000
 800a200:	7ff00000 	.word	0x7ff00000
 800a204:	7fe00000 	.word	0x7fe00000
 800a208:	7c9fffff 	.word	0x7c9fffff
 800a20c:	7fefffff 	.word	0x7fefffff

0800a210 <_strtod_r>:
 800a210:	4b01      	ldr	r3, [pc, #4]	; (800a218 <_strtod_r+0x8>)
 800a212:	f7ff ba0d 	b.w	8009630 <_strtod_l>
 800a216:	bf00      	nop
 800a218:	20000038 	.word	0x20000038

0800a21c <__utoa>:
 800a21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21e:	4c1f      	ldr	r4, [pc, #124]	; (800a29c <__utoa+0x80>)
 800a220:	b08b      	sub	sp, #44	; 0x2c
 800a222:	4605      	mov	r5, r0
 800a224:	460b      	mov	r3, r1
 800a226:	466e      	mov	r6, sp
 800a228:	f104 0c20 	add.w	ip, r4, #32
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	6861      	ldr	r1, [r4, #4]
 800a230:	4637      	mov	r7, r6
 800a232:	c703      	stmia	r7!, {r0, r1}
 800a234:	3408      	adds	r4, #8
 800a236:	4564      	cmp	r4, ip
 800a238:	463e      	mov	r6, r7
 800a23a:	d1f7      	bne.n	800a22c <__utoa+0x10>
 800a23c:	7921      	ldrb	r1, [r4, #4]
 800a23e:	7139      	strb	r1, [r7, #4]
 800a240:	1e91      	subs	r1, r2, #2
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	6038      	str	r0, [r7, #0]
 800a246:	2922      	cmp	r1, #34	; 0x22
 800a248:	f04f 0100 	mov.w	r1, #0
 800a24c:	d904      	bls.n	800a258 <__utoa+0x3c>
 800a24e:	7019      	strb	r1, [r3, #0]
 800a250:	460b      	mov	r3, r1
 800a252:	4618      	mov	r0, r3
 800a254:	b00b      	add	sp, #44	; 0x2c
 800a256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a258:	1e58      	subs	r0, r3, #1
 800a25a:	4684      	mov	ip, r0
 800a25c:	fbb5 f7f2 	udiv	r7, r5, r2
 800a260:	fb02 5617 	mls	r6, r2, r7, r5
 800a264:	3628      	adds	r6, #40	; 0x28
 800a266:	446e      	add	r6, sp
 800a268:	460c      	mov	r4, r1
 800a26a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a26e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a272:	462e      	mov	r6, r5
 800a274:	42b2      	cmp	r2, r6
 800a276:	f101 0101 	add.w	r1, r1, #1
 800a27a:	463d      	mov	r5, r7
 800a27c:	d9ee      	bls.n	800a25c <__utoa+0x40>
 800a27e:	2200      	movs	r2, #0
 800a280:	545a      	strb	r2, [r3, r1]
 800a282:	1919      	adds	r1, r3, r4
 800a284:	1aa5      	subs	r5, r4, r2
 800a286:	42aa      	cmp	r2, r5
 800a288:	dae3      	bge.n	800a252 <__utoa+0x36>
 800a28a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a28e:	780e      	ldrb	r6, [r1, #0]
 800a290:	7006      	strb	r6, [r0, #0]
 800a292:	3201      	adds	r2, #1
 800a294:	f801 5901 	strb.w	r5, [r1], #-1
 800a298:	e7f4      	b.n	800a284 <__utoa+0x68>
 800a29a:	bf00      	nop
 800a29c:	0800ece8 	.word	0x0800ece8

0800a2a0 <__cvt>:
 800a2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a4:	ec55 4b10 	vmov	r4, r5, d0
 800a2a8:	2d00      	cmp	r5, #0
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	bfbb      	ittet	lt
 800a2b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a2b6:	461d      	movlt	r5, r3
 800a2b8:	2300      	movge	r3, #0
 800a2ba:	232d      	movlt	r3, #45	; 0x2d
 800a2bc:	700b      	strb	r3, [r1, #0]
 800a2be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a2c4:	4691      	mov	r9, r2
 800a2c6:	f023 0820 	bic.w	r8, r3, #32
 800a2ca:	bfbc      	itt	lt
 800a2cc:	4622      	movlt	r2, r4
 800a2ce:	4614      	movlt	r4, r2
 800a2d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2d4:	d005      	beq.n	800a2e2 <__cvt+0x42>
 800a2d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a2da:	d100      	bne.n	800a2de <__cvt+0x3e>
 800a2dc:	3601      	adds	r6, #1
 800a2de:	2102      	movs	r1, #2
 800a2e0:	e000      	b.n	800a2e4 <__cvt+0x44>
 800a2e2:	2103      	movs	r1, #3
 800a2e4:	ab03      	add	r3, sp, #12
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	ab02      	add	r3, sp, #8
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	ec45 4b10 	vmov	d0, r4, r5
 800a2f0:	4653      	mov	r3, sl
 800a2f2:	4632      	mov	r2, r6
 800a2f4:	f001 f8c4 	bl	800b480 <_dtoa_r>
 800a2f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	d102      	bne.n	800a306 <__cvt+0x66>
 800a300:	f019 0f01 	tst.w	r9, #1
 800a304:	d022      	beq.n	800a34c <__cvt+0xac>
 800a306:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a30a:	eb07 0906 	add.w	r9, r7, r6
 800a30e:	d110      	bne.n	800a332 <__cvt+0x92>
 800a310:	783b      	ldrb	r3, [r7, #0]
 800a312:	2b30      	cmp	r3, #48	; 0x30
 800a314:	d10a      	bne.n	800a32c <__cvt+0x8c>
 800a316:	2200      	movs	r2, #0
 800a318:	2300      	movs	r3, #0
 800a31a:	4620      	mov	r0, r4
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7f6 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a322:	b918      	cbnz	r0, 800a32c <__cvt+0x8c>
 800a324:	f1c6 0601 	rsb	r6, r6, #1
 800a328:	f8ca 6000 	str.w	r6, [sl]
 800a32c:	f8da 3000 	ldr.w	r3, [sl]
 800a330:	4499      	add	r9, r3
 800a332:	2200      	movs	r2, #0
 800a334:	2300      	movs	r3, #0
 800a336:	4620      	mov	r0, r4
 800a338:	4629      	mov	r1, r5
 800a33a:	f7f6 fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a33e:	b108      	cbz	r0, 800a344 <__cvt+0xa4>
 800a340:	f8cd 900c 	str.w	r9, [sp, #12]
 800a344:	2230      	movs	r2, #48	; 0x30
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	454b      	cmp	r3, r9
 800a34a:	d307      	bcc.n	800a35c <__cvt+0xbc>
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a350:	1bdb      	subs	r3, r3, r7
 800a352:	4638      	mov	r0, r7
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	b004      	add	sp, #16
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35c:	1c59      	adds	r1, r3, #1
 800a35e:	9103      	str	r1, [sp, #12]
 800a360:	701a      	strb	r2, [r3, #0]
 800a362:	e7f0      	b.n	800a346 <__cvt+0xa6>

0800a364 <__exponent>:
 800a364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a366:	4603      	mov	r3, r0
 800a368:	2900      	cmp	r1, #0
 800a36a:	bfb8      	it	lt
 800a36c:	4249      	neglt	r1, r1
 800a36e:	f803 2b02 	strb.w	r2, [r3], #2
 800a372:	bfb4      	ite	lt
 800a374:	222d      	movlt	r2, #45	; 0x2d
 800a376:	222b      	movge	r2, #43	; 0x2b
 800a378:	2909      	cmp	r1, #9
 800a37a:	7042      	strb	r2, [r0, #1]
 800a37c:	dd2a      	ble.n	800a3d4 <__exponent+0x70>
 800a37e:	f10d 0207 	add.w	r2, sp, #7
 800a382:	4617      	mov	r7, r2
 800a384:	260a      	movs	r6, #10
 800a386:	4694      	mov	ip, r2
 800a388:	fb91 f5f6 	sdiv	r5, r1, r6
 800a38c:	fb06 1415 	mls	r4, r6, r5, r1
 800a390:	3430      	adds	r4, #48	; 0x30
 800a392:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a396:	460c      	mov	r4, r1
 800a398:	2c63      	cmp	r4, #99	; 0x63
 800a39a:	f102 32ff 	add.w	r2, r2, #4294967295
 800a39e:	4629      	mov	r1, r5
 800a3a0:	dcf1      	bgt.n	800a386 <__exponent+0x22>
 800a3a2:	3130      	adds	r1, #48	; 0x30
 800a3a4:	f1ac 0402 	sub.w	r4, ip, #2
 800a3a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a3ac:	1c41      	adds	r1, r0, #1
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	42ba      	cmp	r2, r7
 800a3b2:	d30a      	bcc.n	800a3ca <__exponent+0x66>
 800a3b4:	f10d 0209 	add.w	r2, sp, #9
 800a3b8:	eba2 020c 	sub.w	r2, r2, ip
 800a3bc:	42bc      	cmp	r4, r7
 800a3be:	bf88      	it	hi
 800a3c0:	2200      	movhi	r2, #0
 800a3c2:	4413      	add	r3, r2
 800a3c4:	1a18      	subs	r0, r3, r0
 800a3c6:	b003      	add	sp, #12
 800a3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a3ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a3d2:	e7ed      	b.n	800a3b0 <__exponent+0x4c>
 800a3d4:	2330      	movs	r3, #48	; 0x30
 800a3d6:	3130      	adds	r1, #48	; 0x30
 800a3d8:	7083      	strb	r3, [r0, #2]
 800a3da:	70c1      	strb	r1, [r0, #3]
 800a3dc:	1d03      	adds	r3, r0, #4
 800a3de:	e7f1      	b.n	800a3c4 <__exponent+0x60>

0800a3e0 <_printf_float>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	ed2d 8b02 	vpush	{d8}
 800a3e8:	b08d      	sub	sp, #52	; 0x34
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	f000 ff09 	bl	800b20c <_localeconv_r>
 800a3fa:	f8d0 a000 	ldr.w	sl, [r0]
 800a3fe:	4650      	mov	r0, sl
 800a400:	f7f5 ff36 	bl	8000270 <strlen>
 800a404:	2300      	movs	r3, #0
 800a406:	930a      	str	r3, [sp, #40]	; 0x28
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	f8d8 3000 	ldr.w	r3, [r8]
 800a410:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a414:	3307      	adds	r3, #7
 800a416:	f023 0307 	bic.w	r3, r3, #7
 800a41a:	f103 0208 	add.w	r2, r3, #8
 800a41e:	f8c8 2000 	str.w	r2, [r8]
 800a422:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a426:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a42a:	9307      	str	r3, [sp, #28]
 800a42c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a430:	ee08 0a10 	vmov	s16, r0
 800a434:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a43c:	4b9e      	ldr	r3, [pc, #632]	; (800a6b8 <_printf_float+0x2d8>)
 800a43e:	f04f 32ff 	mov.w	r2, #4294967295
 800a442:	f7f6 fb73 	bl	8000b2c <__aeabi_dcmpun>
 800a446:	bb88      	cbnz	r0, 800a4ac <_printf_float+0xcc>
 800a448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a44c:	4b9a      	ldr	r3, [pc, #616]	; (800a6b8 <_printf_float+0x2d8>)
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295
 800a452:	f7f6 fb4d 	bl	8000af0 <__aeabi_dcmple>
 800a456:	bb48      	cbnz	r0, 800a4ac <_printf_float+0xcc>
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	4640      	mov	r0, r8
 800a45e:	4649      	mov	r1, r9
 800a460:	f7f6 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800a464:	b110      	cbz	r0, 800a46c <_printf_float+0x8c>
 800a466:	232d      	movs	r3, #45	; 0x2d
 800a468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a46c:	4a93      	ldr	r2, [pc, #588]	; (800a6bc <_printf_float+0x2dc>)
 800a46e:	4b94      	ldr	r3, [pc, #592]	; (800a6c0 <_printf_float+0x2e0>)
 800a470:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a474:	bf94      	ite	ls
 800a476:	4690      	movls	r8, r2
 800a478:	4698      	movhi	r8, r3
 800a47a:	2303      	movs	r3, #3
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	9b05      	ldr	r3, [sp, #20]
 800a480:	f023 0304 	bic.w	r3, r3, #4
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	f04f 0900 	mov.w	r9, #0
 800a48a:	9700      	str	r7, [sp, #0]
 800a48c:	4633      	mov	r3, r6
 800a48e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a490:	4621      	mov	r1, r4
 800a492:	4628      	mov	r0, r5
 800a494:	f000 f9da 	bl	800a84c <_printf_common>
 800a498:	3001      	adds	r0, #1
 800a49a:	f040 8090 	bne.w	800a5be <_printf_float+0x1de>
 800a49e:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a2:	b00d      	add	sp, #52	; 0x34
 800a4a4:	ecbd 8b02 	vpop	{d8}
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	4642      	mov	r2, r8
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f7f6 fb3a 	bl	8000b2c <__aeabi_dcmpun>
 800a4b8:	b140      	cbz	r0, 800a4cc <_printf_float+0xec>
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfbc      	itt	lt
 800a4c0:	232d      	movlt	r3, #45	; 0x2d
 800a4c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a4c6:	4a7f      	ldr	r2, [pc, #508]	; (800a6c4 <_printf_float+0x2e4>)
 800a4c8:	4b7f      	ldr	r3, [pc, #508]	; (800a6c8 <_printf_float+0x2e8>)
 800a4ca:	e7d1      	b.n	800a470 <_printf_float+0x90>
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a4d2:	9206      	str	r2, [sp, #24]
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	d13f      	bne.n	800a558 <_printf_float+0x178>
 800a4d8:	2306      	movs	r3, #6
 800a4da:	6063      	str	r3, [r4, #4]
 800a4dc:	9b05      	ldr	r3, [sp, #20]
 800a4de:	6861      	ldr	r1, [r4, #4]
 800a4e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9303      	str	r3, [sp, #12]
 800a4e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a4ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a4ee:	ab09      	add	r3, sp, #36	; 0x24
 800a4f0:	ec49 8b10 	vmov	d0, r8, r9
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	6022      	str	r2, [r4, #0]
 800a4f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f7ff fecf 	bl	800a2a0 <__cvt>
 800a502:	9b06      	ldr	r3, [sp, #24]
 800a504:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a506:	2b47      	cmp	r3, #71	; 0x47
 800a508:	4680      	mov	r8, r0
 800a50a:	d108      	bne.n	800a51e <_printf_float+0x13e>
 800a50c:	1cc8      	adds	r0, r1, #3
 800a50e:	db02      	blt.n	800a516 <_printf_float+0x136>
 800a510:	6863      	ldr	r3, [r4, #4]
 800a512:	4299      	cmp	r1, r3
 800a514:	dd41      	ble.n	800a59a <_printf_float+0x1ba>
 800a516:	f1ab 0302 	sub.w	r3, fp, #2
 800a51a:	fa5f fb83 	uxtb.w	fp, r3
 800a51e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a522:	d820      	bhi.n	800a566 <_printf_float+0x186>
 800a524:	3901      	subs	r1, #1
 800a526:	465a      	mov	r2, fp
 800a528:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a52c:	9109      	str	r1, [sp, #36]	; 0x24
 800a52e:	f7ff ff19 	bl	800a364 <__exponent>
 800a532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a534:	1813      	adds	r3, r2, r0
 800a536:	2a01      	cmp	r2, #1
 800a538:	4681      	mov	r9, r0
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	dc02      	bgt.n	800a544 <_printf_float+0x164>
 800a53e:	6822      	ldr	r2, [r4, #0]
 800a540:	07d2      	lsls	r2, r2, #31
 800a542:	d501      	bpl.n	800a548 <_printf_float+0x168>
 800a544:	3301      	adds	r3, #1
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d09c      	beq.n	800a48a <_printf_float+0xaa>
 800a550:	232d      	movs	r3, #45	; 0x2d
 800a552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a556:	e798      	b.n	800a48a <_printf_float+0xaa>
 800a558:	9a06      	ldr	r2, [sp, #24]
 800a55a:	2a47      	cmp	r2, #71	; 0x47
 800a55c:	d1be      	bne.n	800a4dc <_printf_float+0xfc>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1bc      	bne.n	800a4dc <_printf_float+0xfc>
 800a562:	2301      	movs	r3, #1
 800a564:	e7b9      	b.n	800a4da <_printf_float+0xfa>
 800a566:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a56a:	d118      	bne.n	800a59e <_printf_float+0x1be>
 800a56c:	2900      	cmp	r1, #0
 800a56e:	6863      	ldr	r3, [r4, #4]
 800a570:	dd0b      	ble.n	800a58a <_printf_float+0x1aa>
 800a572:	6121      	str	r1, [r4, #16]
 800a574:	b913      	cbnz	r3, 800a57c <_printf_float+0x19c>
 800a576:	6822      	ldr	r2, [r4, #0]
 800a578:	07d0      	lsls	r0, r2, #31
 800a57a:	d502      	bpl.n	800a582 <_printf_float+0x1a2>
 800a57c:	3301      	adds	r3, #1
 800a57e:	440b      	add	r3, r1
 800a580:	6123      	str	r3, [r4, #16]
 800a582:	65a1      	str	r1, [r4, #88]	; 0x58
 800a584:	f04f 0900 	mov.w	r9, #0
 800a588:	e7de      	b.n	800a548 <_printf_float+0x168>
 800a58a:	b913      	cbnz	r3, 800a592 <_printf_float+0x1b2>
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	07d2      	lsls	r2, r2, #31
 800a590:	d501      	bpl.n	800a596 <_printf_float+0x1b6>
 800a592:	3302      	adds	r3, #2
 800a594:	e7f4      	b.n	800a580 <_printf_float+0x1a0>
 800a596:	2301      	movs	r3, #1
 800a598:	e7f2      	b.n	800a580 <_printf_float+0x1a0>
 800a59a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a0:	4299      	cmp	r1, r3
 800a5a2:	db05      	blt.n	800a5b0 <_printf_float+0x1d0>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	6121      	str	r1, [r4, #16]
 800a5a8:	07d8      	lsls	r0, r3, #31
 800a5aa:	d5ea      	bpl.n	800a582 <_printf_float+0x1a2>
 800a5ac:	1c4b      	adds	r3, r1, #1
 800a5ae:	e7e7      	b.n	800a580 <_printf_float+0x1a0>
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	bfd4      	ite	le
 800a5b4:	f1c1 0202 	rsble	r2, r1, #2
 800a5b8:	2201      	movgt	r2, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	e7e0      	b.n	800a580 <_printf_float+0x1a0>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	055a      	lsls	r2, r3, #21
 800a5c2:	d407      	bmi.n	800a5d4 <_printf_float+0x1f4>
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	47b8      	blx	r7
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	d12c      	bne.n	800a62c <_printf_float+0x24c>
 800a5d2:	e764      	b.n	800a49e <_printf_float+0xbe>
 800a5d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5d8:	f240 80e0 	bls.w	800a79c <_printf_float+0x3bc>
 800a5dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f7f6 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d034      	beq.n	800a656 <_printf_float+0x276>
 800a5ec:	4a37      	ldr	r2, [pc, #220]	; (800a6cc <_printf_float+0x2ec>)
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	47b8      	blx	r7
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	f43f af51 	beq.w	800a49e <_printf_float+0xbe>
 800a5fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a600:	429a      	cmp	r2, r3
 800a602:	db02      	blt.n	800a60a <_printf_float+0x22a>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	07d8      	lsls	r0, r3, #31
 800a608:	d510      	bpl.n	800a62c <_printf_float+0x24c>
 800a60a:	ee18 3a10 	vmov	r3, s16
 800a60e:	4652      	mov	r2, sl
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f af41 	beq.w	800a49e <_printf_float+0xbe>
 800a61c:	f04f 0800 	mov.w	r8, #0
 800a620:	f104 091a 	add.w	r9, r4, #26
 800a624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a626:	3b01      	subs	r3, #1
 800a628:	4543      	cmp	r3, r8
 800a62a:	dc09      	bgt.n	800a640 <_printf_float+0x260>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	079b      	lsls	r3, r3, #30
 800a630:	f100 8107 	bmi.w	800a842 <_printf_float+0x462>
 800a634:	68e0      	ldr	r0, [r4, #12]
 800a636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a638:	4298      	cmp	r0, r3
 800a63a:	bfb8      	it	lt
 800a63c:	4618      	movlt	r0, r3
 800a63e:	e730      	b.n	800a4a2 <_printf_float+0xc2>
 800a640:	2301      	movs	r3, #1
 800a642:	464a      	mov	r2, r9
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	f43f af27 	beq.w	800a49e <_printf_float+0xbe>
 800a650:	f108 0801 	add.w	r8, r8, #1
 800a654:	e7e6      	b.n	800a624 <_printf_float+0x244>
 800a656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dc39      	bgt.n	800a6d0 <_printf_float+0x2f0>
 800a65c:	4a1b      	ldr	r2, [pc, #108]	; (800a6cc <_printf_float+0x2ec>)
 800a65e:	2301      	movs	r3, #1
 800a660:	4631      	mov	r1, r6
 800a662:	4628      	mov	r0, r5
 800a664:	47b8      	blx	r7
 800a666:	3001      	adds	r0, #1
 800a668:	f43f af19 	beq.w	800a49e <_printf_float+0xbe>
 800a66c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a670:	4313      	orrs	r3, r2
 800a672:	d102      	bne.n	800a67a <_printf_float+0x29a>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	d5d8      	bpl.n	800a62c <_printf_float+0x24c>
 800a67a:	ee18 3a10 	vmov	r3, s16
 800a67e:	4652      	mov	r2, sl
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	f43f af09 	beq.w	800a49e <_printf_float+0xbe>
 800a68c:	f04f 0900 	mov.w	r9, #0
 800a690:	f104 0a1a 	add.w	sl, r4, #26
 800a694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a696:	425b      	negs	r3, r3
 800a698:	454b      	cmp	r3, r9
 800a69a:	dc01      	bgt.n	800a6a0 <_printf_float+0x2c0>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	e792      	b.n	800a5c6 <_printf_float+0x1e6>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	47b8      	blx	r7
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	f43f aef7 	beq.w	800a49e <_printf_float+0xbe>
 800a6b0:	f109 0901 	add.w	r9, r9, #1
 800a6b4:	e7ee      	b.n	800a694 <_printf_float+0x2b4>
 800a6b6:	bf00      	nop
 800a6b8:	7fefffff 	.word	0x7fefffff
 800a6bc:	0800ed0d 	.word	0x0800ed0d
 800a6c0:	0800ed11 	.word	0x0800ed11
 800a6c4:	0800ed15 	.word	0x0800ed15
 800a6c8:	0800ed19 	.word	0x0800ed19
 800a6cc:	0800ed1d 	.word	0x0800ed1d
 800a6d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	bfa8      	it	ge
 800a6d8:	461a      	movge	r2, r3
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	4691      	mov	r9, r2
 800a6de:	dc37      	bgt.n	800a750 <_printf_float+0x370>
 800a6e0:	f04f 0b00 	mov.w	fp, #0
 800a6e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6e8:	f104 021a 	add.w	r2, r4, #26
 800a6ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6ee:	9305      	str	r3, [sp, #20]
 800a6f0:	eba3 0309 	sub.w	r3, r3, r9
 800a6f4:	455b      	cmp	r3, fp
 800a6f6:	dc33      	bgt.n	800a760 <_printf_float+0x380>
 800a6f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	db3b      	blt.n	800a778 <_printf_float+0x398>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	07da      	lsls	r2, r3, #31
 800a704:	d438      	bmi.n	800a778 <_printf_float+0x398>
 800a706:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a70a:	eba2 0903 	sub.w	r9, r2, r3
 800a70e:	9b05      	ldr	r3, [sp, #20]
 800a710:	1ad2      	subs	r2, r2, r3
 800a712:	4591      	cmp	r9, r2
 800a714:	bfa8      	it	ge
 800a716:	4691      	movge	r9, r2
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	dc35      	bgt.n	800a78a <_printf_float+0x3aa>
 800a71e:	f04f 0800 	mov.w	r8, #0
 800a722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a726:	f104 0a1a 	add.w	sl, r4, #26
 800a72a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	eba3 0309 	sub.w	r3, r3, r9
 800a734:	4543      	cmp	r3, r8
 800a736:	f77f af79 	ble.w	800a62c <_printf_float+0x24c>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4652      	mov	r2, sl
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	47b8      	blx	r7
 800a744:	3001      	adds	r0, #1
 800a746:	f43f aeaa 	beq.w	800a49e <_printf_float+0xbe>
 800a74a:	f108 0801 	add.w	r8, r8, #1
 800a74e:	e7ec      	b.n	800a72a <_printf_float+0x34a>
 800a750:	4613      	mov	r3, r2
 800a752:	4631      	mov	r1, r6
 800a754:	4642      	mov	r2, r8
 800a756:	4628      	mov	r0, r5
 800a758:	47b8      	blx	r7
 800a75a:	3001      	adds	r0, #1
 800a75c:	d1c0      	bne.n	800a6e0 <_printf_float+0x300>
 800a75e:	e69e      	b.n	800a49e <_printf_float+0xbe>
 800a760:	2301      	movs	r3, #1
 800a762:	4631      	mov	r1, r6
 800a764:	4628      	mov	r0, r5
 800a766:	9205      	str	r2, [sp, #20]
 800a768:	47b8      	blx	r7
 800a76a:	3001      	adds	r0, #1
 800a76c:	f43f ae97 	beq.w	800a49e <_printf_float+0xbe>
 800a770:	9a05      	ldr	r2, [sp, #20]
 800a772:	f10b 0b01 	add.w	fp, fp, #1
 800a776:	e7b9      	b.n	800a6ec <_printf_float+0x30c>
 800a778:	ee18 3a10 	vmov	r3, s16
 800a77c:	4652      	mov	r2, sl
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	d1be      	bne.n	800a706 <_printf_float+0x326>
 800a788:	e689      	b.n	800a49e <_printf_float+0xbe>
 800a78a:	9a05      	ldr	r2, [sp, #20]
 800a78c:	464b      	mov	r3, r9
 800a78e:	4442      	add	r2, r8
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	d1c1      	bne.n	800a71e <_printf_float+0x33e>
 800a79a:	e680      	b.n	800a49e <_printf_float+0xbe>
 800a79c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a79e:	2a01      	cmp	r2, #1
 800a7a0:	dc01      	bgt.n	800a7a6 <_printf_float+0x3c6>
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d53a      	bpl.n	800a81c <_printf_float+0x43c>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b8      	blx	r7
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	f43f ae74 	beq.w	800a49e <_printf_float+0xbe>
 800a7b6:	ee18 3a10 	vmov	r3, s16
 800a7ba:	4652      	mov	r2, sl
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4628      	mov	r0, r5
 800a7c0:	47b8      	blx	r7
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	f43f ae6b 	beq.w	800a49e <_printf_float+0xbe>
 800a7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a7d4:	f7f6 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7d8:	b9d8      	cbnz	r0, 800a812 <_printf_float+0x432>
 800a7da:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7de:	f108 0201 	add.w	r2, r8, #1
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	47b8      	blx	r7
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d10e      	bne.n	800a80a <_printf_float+0x42a>
 800a7ec:	e657      	b.n	800a49e <_printf_float+0xbe>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	4652      	mov	r2, sl
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	47b8      	blx	r7
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f43f ae50 	beq.w	800a49e <_printf_float+0xbe>
 800a7fe:	f108 0801 	add.w	r8, r8, #1
 800a802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a804:	3b01      	subs	r3, #1
 800a806:	4543      	cmp	r3, r8
 800a808:	dcf1      	bgt.n	800a7ee <_printf_float+0x40e>
 800a80a:	464b      	mov	r3, r9
 800a80c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a810:	e6da      	b.n	800a5c8 <_printf_float+0x1e8>
 800a812:	f04f 0800 	mov.w	r8, #0
 800a816:	f104 0a1a 	add.w	sl, r4, #26
 800a81a:	e7f2      	b.n	800a802 <_printf_float+0x422>
 800a81c:	2301      	movs	r3, #1
 800a81e:	4642      	mov	r2, r8
 800a820:	e7df      	b.n	800a7e2 <_printf_float+0x402>
 800a822:	2301      	movs	r3, #1
 800a824:	464a      	mov	r2, r9
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	47b8      	blx	r7
 800a82c:	3001      	adds	r0, #1
 800a82e:	f43f ae36 	beq.w	800a49e <_printf_float+0xbe>
 800a832:	f108 0801 	add.w	r8, r8, #1
 800a836:	68e3      	ldr	r3, [r4, #12]
 800a838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a83a:	1a5b      	subs	r3, r3, r1
 800a83c:	4543      	cmp	r3, r8
 800a83e:	dcf0      	bgt.n	800a822 <_printf_float+0x442>
 800a840:	e6f8      	b.n	800a634 <_printf_float+0x254>
 800a842:	f04f 0800 	mov.w	r8, #0
 800a846:	f104 0919 	add.w	r9, r4, #25
 800a84a:	e7f4      	b.n	800a836 <_printf_float+0x456>

0800a84c <_printf_common>:
 800a84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a850:	4616      	mov	r6, r2
 800a852:	4699      	mov	r9, r3
 800a854:	688a      	ldr	r2, [r1, #8]
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	bfb8      	it	lt
 800a860:	4613      	movlt	r3, r2
 800a862:	6033      	str	r3, [r6, #0]
 800a864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a868:	4607      	mov	r7, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	b10a      	cbz	r2, 800a872 <_printf_common+0x26>
 800a86e:	3301      	adds	r3, #1
 800a870:	6033      	str	r3, [r6, #0]
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	0699      	lsls	r1, r3, #26
 800a876:	bf42      	ittt	mi
 800a878:	6833      	ldrmi	r3, [r6, #0]
 800a87a:	3302      	addmi	r3, #2
 800a87c:	6033      	strmi	r3, [r6, #0]
 800a87e:	6825      	ldr	r5, [r4, #0]
 800a880:	f015 0506 	ands.w	r5, r5, #6
 800a884:	d106      	bne.n	800a894 <_printf_common+0x48>
 800a886:	f104 0a19 	add.w	sl, r4, #25
 800a88a:	68e3      	ldr	r3, [r4, #12]
 800a88c:	6832      	ldr	r2, [r6, #0]
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	42ab      	cmp	r3, r5
 800a892:	dc26      	bgt.n	800a8e2 <_printf_common+0x96>
 800a894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a898:	1e13      	subs	r3, r2, #0
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	bf18      	it	ne
 800a89e:	2301      	movne	r3, #1
 800a8a0:	0692      	lsls	r2, r2, #26
 800a8a2:	d42b      	bmi.n	800a8fc <_printf_common+0xb0>
 800a8a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	47c0      	blx	r8
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d01e      	beq.n	800a8f0 <_printf_common+0xa4>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	6922      	ldr	r2, [r4, #16]
 800a8b6:	f003 0306 	and.w	r3, r3, #6
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	bf02      	ittt	eq
 800a8be:	68e5      	ldreq	r5, [r4, #12]
 800a8c0:	6833      	ldreq	r3, [r6, #0]
 800a8c2:	1aed      	subeq	r5, r5, r3
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	bf0c      	ite	eq
 800a8c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8cc:	2500      	movne	r5, #0
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	bfc4      	itt	gt
 800a8d2:	1a9b      	subgt	r3, r3, r2
 800a8d4:	18ed      	addgt	r5, r5, r3
 800a8d6:	2600      	movs	r6, #0
 800a8d8:	341a      	adds	r4, #26
 800a8da:	42b5      	cmp	r5, r6
 800a8dc:	d11a      	bne.n	800a914 <_printf_common+0xc8>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e008      	b.n	800a8f4 <_printf_common+0xa8>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	4652      	mov	r2, sl
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	47c0      	blx	r8
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d103      	bne.n	800a8f8 <_printf_common+0xac>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	3501      	adds	r5, #1
 800a8fa:	e7c6      	b.n	800a88a <_printf_common+0x3e>
 800a8fc:	18e1      	adds	r1, r4, r3
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	2030      	movs	r0, #48	; 0x30
 800a902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a906:	4422      	add	r2, r4
 800a908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a90c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a910:	3302      	adds	r3, #2
 800a912:	e7c7      	b.n	800a8a4 <_printf_common+0x58>
 800a914:	2301      	movs	r3, #1
 800a916:	4622      	mov	r2, r4
 800a918:	4649      	mov	r1, r9
 800a91a:	4638      	mov	r0, r7
 800a91c:	47c0      	blx	r8
 800a91e:	3001      	adds	r0, #1
 800a920:	d0e6      	beq.n	800a8f0 <_printf_common+0xa4>
 800a922:	3601      	adds	r6, #1
 800a924:	e7d9      	b.n	800a8da <_printf_common+0x8e>
	...

0800a928 <_printf_i>:
 800a928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	7e0f      	ldrb	r7, [r1, #24]
 800a92e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a930:	2f78      	cmp	r7, #120	; 0x78
 800a932:	4691      	mov	r9, r2
 800a934:	4680      	mov	r8, r0
 800a936:	460c      	mov	r4, r1
 800a938:	469a      	mov	sl, r3
 800a93a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a93e:	d807      	bhi.n	800a950 <_printf_i+0x28>
 800a940:	2f62      	cmp	r7, #98	; 0x62
 800a942:	d80a      	bhi.n	800a95a <_printf_i+0x32>
 800a944:	2f00      	cmp	r7, #0
 800a946:	f000 80d4 	beq.w	800aaf2 <_printf_i+0x1ca>
 800a94a:	2f58      	cmp	r7, #88	; 0x58
 800a94c:	f000 80c0 	beq.w	800aad0 <_printf_i+0x1a8>
 800a950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a958:	e03a      	b.n	800a9d0 <_printf_i+0xa8>
 800a95a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a95e:	2b15      	cmp	r3, #21
 800a960:	d8f6      	bhi.n	800a950 <_printf_i+0x28>
 800a962:	a101      	add	r1, pc, #4	; (adr r1, 800a968 <_printf_i+0x40>)
 800a964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a968:	0800a9c1 	.word	0x0800a9c1
 800a96c:	0800a9d5 	.word	0x0800a9d5
 800a970:	0800a951 	.word	0x0800a951
 800a974:	0800a951 	.word	0x0800a951
 800a978:	0800a951 	.word	0x0800a951
 800a97c:	0800a951 	.word	0x0800a951
 800a980:	0800a9d5 	.word	0x0800a9d5
 800a984:	0800a951 	.word	0x0800a951
 800a988:	0800a951 	.word	0x0800a951
 800a98c:	0800a951 	.word	0x0800a951
 800a990:	0800a951 	.word	0x0800a951
 800a994:	0800aad9 	.word	0x0800aad9
 800a998:	0800aa01 	.word	0x0800aa01
 800a99c:	0800aa93 	.word	0x0800aa93
 800a9a0:	0800a951 	.word	0x0800a951
 800a9a4:	0800a951 	.word	0x0800a951
 800a9a8:	0800aafb 	.word	0x0800aafb
 800a9ac:	0800a951 	.word	0x0800a951
 800a9b0:	0800aa01 	.word	0x0800aa01
 800a9b4:	0800a951 	.word	0x0800a951
 800a9b8:	0800a951 	.word	0x0800a951
 800a9bc:	0800aa9b 	.word	0x0800aa9b
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	1d1a      	adds	r2, r3, #4
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	602a      	str	r2, [r5, #0]
 800a9c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e09f      	b.n	800ab14 <_printf_i+0x1ec>
 800a9d4:	6820      	ldr	r0, [r4, #0]
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	0607      	lsls	r7, r0, #24
 800a9da:	f103 0104 	add.w	r1, r3, #4
 800a9de:	6029      	str	r1, [r5, #0]
 800a9e0:	d501      	bpl.n	800a9e6 <_printf_i+0xbe>
 800a9e2:	681e      	ldr	r6, [r3, #0]
 800a9e4:	e003      	b.n	800a9ee <_printf_i+0xc6>
 800a9e6:	0646      	lsls	r6, r0, #25
 800a9e8:	d5fb      	bpl.n	800a9e2 <_printf_i+0xba>
 800a9ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	da03      	bge.n	800a9fa <_printf_i+0xd2>
 800a9f2:	232d      	movs	r3, #45	; 0x2d
 800a9f4:	4276      	negs	r6, r6
 800a9f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9fa:	485a      	ldr	r0, [pc, #360]	; (800ab64 <_printf_i+0x23c>)
 800a9fc:	230a      	movs	r3, #10
 800a9fe:	e012      	b.n	800aa26 <_printf_i+0xfe>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	6820      	ldr	r0, [r4, #0]
 800aa04:	1d19      	adds	r1, r3, #4
 800aa06:	6029      	str	r1, [r5, #0]
 800aa08:	0605      	lsls	r5, r0, #24
 800aa0a:	d501      	bpl.n	800aa10 <_printf_i+0xe8>
 800aa0c:	681e      	ldr	r6, [r3, #0]
 800aa0e:	e002      	b.n	800aa16 <_printf_i+0xee>
 800aa10:	0641      	lsls	r1, r0, #25
 800aa12:	d5fb      	bpl.n	800aa0c <_printf_i+0xe4>
 800aa14:	881e      	ldrh	r6, [r3, #0]
 800aa16:	4853      	ldr	r0, [pc, #332]	; (800ab64 <_printf_i+0x23c>)
 800aa18:	2f6f      	cmp	r7, #111	; 0x6f
 800aa1a:	bf0c      	ite	eq
 800aa1c:	2308      	moveq	r3, #8
 800aa1e:	230a      	movne	r3, #10
 800aa20:	2100      	movs	r1, #0
 800aa22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa26:	6865      	ldr	r5, [r4, #4]
 800aa28:	60a5      	str	r5, [r4, #8]
 800aa2a:	2d00      	cmp	r5, #0
 800aa2c:	bfa2      	ittt	ge
 800aa2e:	6821      	ldrge	r1, [r4, #0]
 800aa30:	f021 0104 	bicge.w	r1, r1, #4
 800aa34:	6021      	strge	r1, [r4, #0]
 800aa36:	b90e      	cbnz	r6, 800aa3c <_printf_i+0x114>
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	d04b      	beq.n	800aad4 <_printf_i+0x1ac>
 800aa3c:	4615      	mov	r5, r2
 800aa3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa42:	fb03 6711 	mls	r7, r3, r1, r6
 800aa46:	5dc7      	ldrb	r7, [r0, r7]
 800aa48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa4c:	4637      	mov	r7, r6
 800aa4e:	42bb      	cmp	r3, r7
 800aa50:	460e      	mov	r6, r1
 800aa52:	d9f4      	bls.n	800aa3e <_printf_i+0x116>
 800aa54:	2b08      	cmp	r3, #8
 800aa56:	d10b      	bne.n	800aa70 <_printf_i+0x148>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	07de      	lsls	r6, r3, #31
 800aa5c:	d508      	bpl.n	800aa70 <_printf_i+0x148>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	6861      	ldr	r1, [r4, #4]
 800aa62:	4299      	cmp	r1, r3
 800aa64:	bfde      	ittt	le
 800aa66:	2330      	movle	r3, #48	; 0x30
 800aa68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa70:	1b52      	subs	r2, r2, r5
 800aa72:	6122      	str	r2, [r4, #16]
 800aa74:	f8cd a000 	str.w	sl, [sp]
 800aa78:	464b      	mov	r3, r9
 800aa7a:	aa03      	add	r2, sp, #12
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	4640      	mov	r0, r8
 800aa80:	f7ff fee4 	bl	800a84c <_printf_common>
 800aa84:	3001      	adds	r0, #1
 800aa86:	d14a      	bne.n	800ab1e <_printf_i+0x1f6>
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	b004      	add	sp, #16
 800aa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	f043 0320 	orr.w	r3, r3, #32
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	4833      	ldr	r0, [pc, #204]	; (800ab68 <_printf_i+0x240>)
 800aa9c:	2778      	movs	r7, #120	; 0x78
 800aa9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	6829      	ldr	r1, [r5, #0]
 800aaa6:	061f      	lsls	r7, r3, #24
 800aaa8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aaac:	d402      	bmi.n	800aab4 <_printf_i+0x18c>
 800aaae:	065f      	lsls	r7, r3, #25
 800aab0:	bf48      	it	mi
 800aab2:	b2b6      	uxthmi	r6, r6
 800aab4:	07df      	lsls	r7, r3, #31
 800aab6:	bf48      	it	mi
 800aab8:	f043 0320 	orrmi.w	r3, r3, #32
 800aabc:	6029      	str	r1, [r5, #0]
 800aabe:	bf48      	it	mi
 800aac0:	6023      	strmi	r3, [r4, #0]
 800aac2:	b91e      	cbnz	r6, 800aacc <_printf_i+0x1a4>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	f023 0320 	bic.w	r3, r3, #32
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	2310      	movs	r3, #16
 800aace:	e7a7      	b.n	800aa20 <_printf_i+0xf8>
 800aad0:	4824      	ldr	r0, [pc, #144]	; (800ab64 <_printf_i+0x23c>)
 800aad2:	e7e4      	b.n	800aa9e <_printf_i+0x176>
 800aad4:	4615      	mov	r5, r2
 800aad6:	e7bd      	b.n	800aa54 <_printf_i+0x12c>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	6826      	ldr	r6, [r4, #0]
 800aadc:	6961      	ldr	r1, [r4, #20]
 800aade:	1d18      	adds	r0, r3, #4
 800aae0:	6028      	str	r0, [r5, #0]
 800aae2:	0635      	lsls	r5, r6, #24
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	d501      	bpl.n	800aaec <_printf_i+0x1c4>
 800aae8:	6019      	str	r1, [r3, #0]
 800aaea:	e002      	b.n	800aaf2 <_printf_i+0x1ca>
 800aaec:	0670      	lsls	r0, r6, #25
 800aaee:	d5fb      	bpl.n	800aae8 <_printf_i+0x1c0>
 800aaf0:	8019      	strh	r1, [r3, #0]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	4615      	mov	r5, r2
 800aaf8:	e7bc      	b.n	800aa74 <_printf_i+0x14c>
 800aafa:	682b      	ldr	r3, [r5, #0]
 800aafc:	1d1a      	adds	r2, r3, #4
 800aafe:	602a      	str	r2, [r5, #0]
 800ab00:	681d      	ldr	r5, [r3, #0]
 800ab02:	6862      	ldr	r2, [r4, #4]
 800ab04:	2100      	movs	r1, #0
 800ab06:	4628      	mov	r0, r5
 800ab08:	f7f5 fb62 	bl	80001d0 <memchr>
 800ab0c:	b108      	cbz	r0, 800ab12 <_printf_i+0x1ea>
 800ab0e:	1b40      	subs	r0, r0, r5
 800ab10:	6060      	str	r0, [r4, #4]
 800ab12:	6863      	ldr	r3, [r4, #4]
 800ab14:	6123      	str	r3, [r4, #16]
 800ab16:	2300      	movs	r3, #0
 800ab18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1c:	e7aa      	b.n	800aa74 <_printf_i+0x14c>
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	462a      	mov	r2, r5
 800ab22:	4649      	mov	r1, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	47d0      	blx	sl
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d0ad      	beq.n	800aa88 <_printf_i+0x160>
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	079b      	lsls	r3, r3, #30
 800ab30:	d413      	bmi.n	800ab5a <_printf_i+0x232>
 800ab32:	68e0      	ldr	r0, [r4, #12]
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	4298      	cmp	r0, r3
 800ab38:	bfb8      	it	lt
 800ab3a:	4618      	movlt	r0, r3
 800ab3c:	e7a6      	b.n	800aa8c <_printf_i+0x164>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	4632      	mov	r2, r6
 800ab42:	4649      	mov	r1, r9
 800ab44:	4640      	mov	r0, r8
 800ab46:	47d0      	blx	sl
 800ab48:	3001      	adds	r0, #1
 800ab4a:	d09d      	beq.n	800aa88 <_printf_i+0x160>
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	68e3      	ldr	r3, [r4, #12]
 800ab50:	9903      	ldr	r1, [sp, #12]
 800ab52:	1a5b      	subs	r3, r3, r1
 800ab54:	42ab      	cmp	r3, r5
 800ab56:	dcf2      	bgt.n	800ab3e <_printf_i+0x216>
 800ab58:	e7eb      	b.n	800ab32 <_printf_i+0x20a>
 800ab5a:	2500      	movs	r5, #0
 800ab5c:	f104 0619 	add.w	r6, r4, #25
 800ab60:	e7f5      	b.n	800ab4e <_printf_i+0x226>
 800ab62:	bf00      	nop
 800ab64:	0800ed1f 	.word	0x0800ed1f
 800ab68:	0800ed30 	.word	0x0800ed30

0800ab6c <_scanf_float>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	b087      	sub	sp, #28
 800ab72:	4617      	mov	r7, r2
 800ab74:	9303      	str	r3, [sp, #12]
 800ab76:	688b      	ldr	r3, [r1, #8]
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab7e:	bf83      	ittte	hi
 800ab80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab84:	195b      	addhi	r3, r3, r5
 800ab86:	9302      	strhi	r3, [sp, #8]
 800ab88:	2300      	movls	r3, #0
 800ab8a:	bf86      	itte	hi
 800ab8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab90:	608b      	strhi	r3, [r1, #8]
 800ab92:	9302      	strls	r3, [sp, #8]
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	468b      	mov	fp, r1
 800ab98:	2500      	movs	r5, #0
 800ab9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ab9e:	f84b 3b1c 	str.w	r3, [fp], #28
 800aba2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aba6:	4680      	mov	r8, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	465e      	mov	r6, fp
 800abac:	46aa      	mov	sl, r5
 800abae:	46a9      	mov	r9, r5
 800abb0:	9501      	str	r5, [sp, #4]
 800abb2:	68a2      	ldr	r2, [r4, #8]
 800abb4:	b152      	cbz	r2, 800abcc <_scanf_float+0x60>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b4e      	cmp	r3, #78	; 0x4e
 800abbc:	d864      	bhi.n	800ac88 <_scanf_float+0x11c>
 800abbe:	2b40      	cmp	r3, #64	; 0x40
 800abc0:	d83c      	bhi.n	800ac3c <_scanf_float+0xd0>
 800abc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800abc6:	b2c8      	uxtb	r0, r1
 800abc8:	280e      	cmp	r0, #14
 800abca:	d93a      	bls.n	800ac42 <_scanf_float+0xd6>
 800abcc:	f1b9 0f00 	cmp.w	r9, #0
 800abd0:	d003      	beq.n	800abda <_scanf_float+0x6e>
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abde:	f1ba 0f01 	cmp.w	sl, #1
 800abe2:	f200 8113 	bhi.w	800ae0c <_scanf_float+0x2a0>
 800abe6:	455e      	cmp	r6, fp
 800abe8:	f200 8105 	bhi.w	800adf6 <_scanf_float+0x28a>
 800abec:	2501      	movs	r5, #1
 800abee:	4628      	mov	r0, r5
 800abf0:	b007      	add	sp, #28
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800abfa:	2a0d      	cmp	r2, #13
 800abfc:	d8e6      	bhi.n	800abcc <_scanf_float+0x60>
 800abfe:	a101      	add	r1, pc, #4	; (adr r1, 800ac04 <_scanf_float+0x98>)
 800ac00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac04:	0800ad43 	.word	0x0800ad43
 800ac08:	0800abcd 	.word	0x0800abcd
 800ac0c:	0800abcd 	.word	0x0800abcd
 800ac10:	0800abcd 	.word	0x0800abcd
 800ac14:	0800ada3 	.word	0x0800ada3
 800ac18:	0800ad7b 	.word	0x0800ad7b
 800ac1c:	0800abcd 	.word	0x0800abcd
 800ac20:	0800abcd 	.word	0x0800abcd
 800ac24:	0800ad51 	.word	0x0800ad51
 800ac28:	0800abcd 	.word	0x0800abcd
 800ac2c:	0800abcd 	.word	0x0800abcd
 800ac30:	0800abcd 	.word	0x0800abcd
 800ac34:	0800abcd 	.word	0x0800abcd
 800ac38:	0800ad09 	.word	0x0800ad09
 800ac3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ac40:	e7db      	b.n	800abfa <_scanf_float+0x8e>
 800ac42:	290e      	cmp	r1, #14
 800ac44:	d8c2      	bhi.n	800abcc <_scanf_float+0x60>
 800ac46:	a001      	add	r0, pc, #4	; (adr r0, 800ac4c <_scanf_float+0xe0>)
 800ac48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac4c:	0800acfb 	.word	0x0800acfb
 800ac50:	0800abcd 	.word	0x0800abcd
 800ac54:	0800acfb 	.word	0x0800acfb
 800ac58:	0800ad8f 	.word	0x0800ad8f
 800ac5c:	0800abcd 	.word	0x0800abcd
 800ac60:	0800aca9 	.word	0x0800aca9
 800ac64:	0800ace5 	.word	0x0800ace5
 800ac68:	0800ace5 	.word	0x0800ace5
 800ac6c:	0800ace5 	.word	0x0800ace5
 800ac70:	0800ace5 	.word	0x0800ace5
 800ac74:	0800ace5 	.word	0x0800ace5
 800ac78:	0800ace5 	.word	0x0800ace5
 800ac7c:	0800ace5 	.word	0x0800ace5
 800ac80:	0800ace5 	.word	0x0800ace5
 800ac84:	0800ace5 	.word	0x0800ace5
 800ac88:	2b6e      	cmp	r3, #110	; 0x6e
 800ac8a:	d809      	bhi.n	800aca0 <_scanf_float+0x134>
 800ac8c:	2b60      	cmp	r3, #96	; 0x60
 800ac8e:	d8b2      	bhi.n	800abf6 <_scanf_float+0x8a>
 800ac90:	2b54      	cmp	r3, #84	; 0x54
 800ac92:	d077      	beq.n	800ad84 <_scanf_float+0x218>
 800ac94:	2b59      	cmp	r3, #89	; 0x59
 800ac96:	d199      	bne.n	800abcc <_scanf_float+0x60>
 800ac98:	2d07      	cmp	r5, #7
 800ac9a:	d197      	bne.n	800abcc <_scanf_float+0x60>
 800ac9c:	2508      	movs	r5, #8
 800ac9e:	e029      	b.n	800acf4 <_scanf_float+0x188>
 800aca0:	2b74      	cmp	r3, #116	; 0x74
 800aca2:	d06f      	beq.n	800ad84 <_scanf_float+0x218>
 800aca4:	2b79      	cmp	r3, #121	; 0x79
 800aca6:	e7f6      	b.n	800ac96 <_scanf_float+0x12a>
 800aca8:	6821      	ldr	r1, [r4, #0]
 800acaa:	05c8      	lsls	r0, r1, #23
 800acac:	d51a      	bpl.n	800ace4 <_scanf_float+0x178>
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800acb4:	6021      	str	r1, [r4, #0]
 800acb6:	f109 0901 	add.w	r9, r9, #1
 800acba:	b11b      	cbz	r3, 800acc4 <_scanf_float+0x158>
 800acbc:	3b01      	subs	r3, #1
 800acbe:	3201      	adds	r2, #1
 800acc0:	9302      	str	r3, [sp, #8]
 800acc2:	60a2      	str	r2, [r4, #8]
 800acc4:	68a3      	ldr	r3, [r4, #8]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	60a3      	str	r3, [r4, #8]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	3301      	adds	r3, #1
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	607b      	str	r3, [r7, #4]
 800acd8:	f340 8084 	ble.w	800ade4 <_scanf_float+0x278>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	3301      	adds	r3, #1
 800ace0:	603b      	str	r3, [r7, #0]
 800ace2:	e766      	b.n	800abb2 <_scanf_float+0x46>
 800ace4:	eb1a 0f05 	cmn.w	sl, r5
 800ace8:	f47f af70 	bne.w	800abcc <_scanf_float+0x60>
 800acec:	6822      	ldr	r2, [r4, #0]
 800acee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800acf2:	6022      	str	r2, [r4, #0]
 800acf4:	f806 3b01 	strb.w	r3, [r6], #1
 800acf8:	e7e4      	b.n	800acc4 <_scanf_float+0x158>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	0610      	lsls	r0, r2, #24
 800acfe:	f57f af65 	bpl.w	800abcc <_scanf_float+0x60>
 800ad02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad06:	e7f4      	b.n	800acf2 <_scanf_float+0x186>
 800ad08:	f1ba 0f00 	cmp.w	sl, #0
 800ad0c:	d10e      	bne.n	800ad2c <_scanf_float+0x1c0>
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	d10e      	bne.n	800ad32 <_scanf_float+0x1c6>
 800ad14:	6822      	ldr	r2, [r4, #0]
 800ad16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad1e:	d108      	bne.n	800ad32 <_scanf_float+0x1c6>
 800ad20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad24:	6022      	str	r2, [r4, #0]
 800ad26:	f04f 0a01 	mov.w	sl, #1
 800ad2a:	e7e3      	b.n	800acf4 <_scanf_float+0x188>
 800ad2c:	f1ba 0f02 	cmp.w	sl, #2
 800ad30:	d055      	beq.n	800adde <_scanf_float+0x272>
 800ad32:	2d01      	cmp	r5, #1
 800ad34:	d002      	beq.n	800ad3c <_scanf_float+0x1d0>
 800ad36:	2d04      	cmp	r5, #4
 800ad38:	f47f af48 	bne.w	800abcc <_scanf_float+0x60>
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	b2ed      	uxtb	r5, r5
 800ad40:	e7d8      	b.n	800acf4 <_scanf_float+0x188>
 800ad42:	f1ba 0f01 	cmp.w	sl, #1
 800ad46:	f47f af41 	bne.w	800abcc <_scanf_float+0x60>
 800ad4a:	f04f 0a02 	mov.w	sl, #2
 800ad4e:	e7d1      	b.n	800acf4 <_scanf_float+0x188>
 800ad50:	b97d      	cbnz	r5, 800ad72 <_scanf_float+0x206>
 800ad52:	f1b9 0f00 	cmp.w	r9, #0
 800ad56:	f47f af3c 	bne.w	800abd2 <_scanf_float+0x66>
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad64:	f47f af39 	bne.w	800abda <_scanf_float+0x6e>
 800ad68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	2501      	movs	r5, #1
 800ad70:	e7c0      	b.n	800acf4 <_scanf_float+0x188>
 800ad72:	2d03      	cmp	r5, #3
 800ad74:	d0e2      	beq.n	800ad3c <_scanf_float+0x1d0>
 800ad76:	2d05      	cmp	r5, #5
 800ad78:	e7de      	b.n	800ad38 <_scanf_float+0x1cc>
 800ad7a:	2d02      	cmp	r5, #2
 800ad7c:	f47f af26 	bne.w	800abcc <_scanf_float+0x60>
 800ad80:	2503      	movs	r5, #3
 800ad82:	e7b7      	b.n	800acf4 <_scanf_float+0x188>
 800ad84:	2d06      	cmp	r5, #6
 800ad86:	f47f af21 	bne.w	800abcc <_scanf_float+0x60>
 800ad8a:	2507      	movs	r5, #7
 800ad8c:	e7b2      	b.n	800acf4 <_scanf_float+0x188>
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	0591      	lsls	r1, r2, #22
 800ad92:	f57f af1b 	bpl.w	800abcc <_scanf_float+0x60>
 800ad96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ad9a:	6022      	str	r2, [r4, #0]
 800ad9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ada0:	e7a8      	b.n	800acf4 <_scanf_float+0x188>
 800ada2:	6822      	ldr	r2, [r4, #0]
 800ada4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ada8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800adac:	d006      	beq.n	800adbc <_scanf_float+0x250>
 800adae:	0550      	lsls	r0, r2, #21
 800adb0:	f57f af0c 	bpl.w	800abcc <_scanf_float+0x60>
 800adb4:	f1b9 0f00 	cmp.w	r9, #0
 800adb8:	f43f af0f 	beq.w	800abda <_scanf_float+0x6e>
 800adbc:	0591      	lsls	r1, r2, #22
 800adbe:	bf58      	it	pl
 800adc0:	9901      	ldrpl	r1, [sp, #4]
 800adc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800adc6:	bf58      	it	pl
 800adc8:	eba9 0101 	subpl.w	r1, r9, r1
 800adcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800add0:	bf58      	it	pl
 800add2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800add6:	6022      	str	r2, [r4, #0]
 800add8:	f04f 0900 	mov.w	r9, #0
 800addc:	e78a      	b.n	800acf4 <_scanf_float+0x188>
 800adde:	f04f 0a03 	mov.w	sl, #3
 800ade2:	e787      	b.n	800acf4 <_scanf_float+0x188>
 800ade4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ade8:	4639      	mov	r1, r7
 800adea:	4640      	mov	r0, r8
 800adec:	4798      	blx	r3
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f aedf 	beq.w	800abb2 <_scanf_float+0x46>
 800adf4:	e6ea      	b.n	800abcc <_scanf_float+0x60>
 800adf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adfe:	463a      	mov	r2, r7
 800ae00:	4640      	mov	r0, r8
 800ae02:	4798      	blx	r3
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	6123      	str	r3, [r4, #16]
 800ae0a:	e6ec      	b.n	800abe6 <_scanf_float+0x7a>
 800ae0c:	1e6b      	subs	r3, r5, #1
 800ae0e:	2b06      	cmp	r3, #6
 800ae10:	d825      	bhi.n	800ae5e <_scanf_float+0x2f2>
 800ae12:	2d02      	cmp	r5, #2
 800ae14:	d836      	bhi.n	800ae84 <_scanf_float+0x318>
 800ae16:	455e      	cmp	r6, fp
 800ae18:	f67f aee8 	bls.w	800abec <_scanf_float+0x80>
 800ae1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae24:	463a      	mov	r2, r7
 800ae26:	4640      	mov	r0, r8
 800ae28:	4798      	blx	r3
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	6123      	str	r3, [r4, #16]
 800ae30:	e7f1      	b.n	800ae16 <_scanf_float+0x2aa>
 800ae32:	9802      	ldr	r0, [sp, #8]
 800ae34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ae3c:	9002      	str	r0, [sp, #8]
 800ae3e:	463a      	mov	r2, r7
 800ae40:	4640      	mov	r0, r8
 800ae42:	4798      	blx	r3
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae4e:	fa5f fa8a 	uxtb.w	sl, sl
 800ae52:	f1ba 0f02 	cmp.w	sl, #2
 800ae56:	d1ec      	bne.n	800ae32 <_scanf_float+0x2c6>
 800ae58:	3d03      	subs	r5, #3
 800ae5a:	b2ed      	uxtb	r5, r5
 800ae5c:	1b76      	subs	r6, r6, r5
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	05da      	lsls	r2, r3, #23
 800ae62:	d52f      	bpl.n	800aec4 <_scanf_float+0x358>
 800ae64:	055b      	lsls	r3, r3, #21
 800ae66:	d510      	bpl.n	800ae8a <_scanf_float+0x31e>
 800ae68:	455e      	cmp	r6, fp
 800ae6a:	f67f aebf 	bls.w	800abec <_scanf_float+0x80>
 800ae6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae76:	463a      	mov	r2, r7
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4798      	blx	r3
 800ae7c:	6923      	ldr	r3, [r4, #16]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	6123      	str	r3, [r4, #16]
 800ae82:	e7f1      	b.n	800ae68 <_scanf_float+0x2fc>
 800ae84:	46aa      	mov	sl, r5
 800ae86:	9602      	str	r6, [sp, #8]
 800ae88:	e7df      	b.n	800ae4a <_scanf_float+0x2de>
 800ae8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae8e:	6923      	ldr	r3, [r4, #16]
 800ae90:	2965      	cmp	r1, #101	; 0x65
 800ae92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae96:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae9a:	6123      	str	r3, [r4, #16]
 800ae9c:	d00c      	beq.n	800aeb8 <_scanf_float+0x34c>
 800ae9e:	2945      	cmp	r1, #69	; 0x45
 800aea0:	d00a      	beq.n	800aeb8 <_scanf_float+0x34c>
 800aea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aea6:	463a      	mov	r2, r7
 800aea8:	4640      	mov	r0, r8
 800aeaa:	4798      	blx	r3
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	1eb5      	subs	r5, r6, #2
 800aeb6:	6123      	str	r3, [r4, #16]
 800aeb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aebc:	463a      	mov	r2, r7
 800aebe:	4640      	mov	r0, r8
 800aec0:	4798      	blx	r3
 800aec2:	462e      	mov	r6, r5
 800aec4:	6825      	ldr	r5, [r4, #0]
 800aec6:	f015 0510 	ands.w	r5, r5, #16
 800aeca:	d158      	bne.n	800af7e <_scanf_float+0x412>
 800aecc:	7035      	strb	r5, [r6, #0]
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed8:	d11c      	bne.n	800af14 <_scanf_float+0x3a8>
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	454b      	cmp	r3, r9
 800aede:	eba3 0209 	sub.w	r2, r3, r9
 800aee2:	d124      	bne.n	800af2e <_scanf_float+0x3c2>
 800aee4:	2200      	movs	r2, #0
 800aee6:	4659      	mov	r1, fp
 800aee8:	4640      	mov	r0, r8
 800aeea:	f7ff f991 	bl	800a210 <_strtod_r>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	6821      	ldr	r1, [r4, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f011 0f02 	tst.w	r1, #2
 800aef8:	ec57 6b10 	vmov	r6, r7, d0
 800aefc:	f103 0204 	add.w	r2, r3, #4
 800af00:	d020      	beq.n	800af44 <_scanf_float+0x3d8>
 800af02:	9903      	ldr	r1, [sp, #12]
 800af04:	600a      	str	r2, [r1, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	e9c3 6700 	strd	r6, r7, [r3]
 800af0c:	68e3      	ldr	r3, [r4, #12]
 800af0e:	3301      	adds	r3, #1
 800af10:	60e3      	str	r3, [r4, #12]
 800af12:	e66c      	b.n	800abee <_scanf_float+0x82>
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0e4      	beq.n	800aee4 <_scanf_float+0x378>
 800af1a:	9905      	ldr	r1, [sp, #20]
 800af1c:	230a      	movs	r3, #10
 800af1e:	462a      	mov	r2, r5
 800af20:	3101      	adds	r1, #1
 800af22:	4640      	mov	r0, r8
 800af24:	f002 fa38 	bl	800d398 <_strtol_r>
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	9e05      	ldr	r6, [sp, #20]
 800af2c:	1ac2      	subs	r2, r0, r3
 800af2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800af32:	429e      	cmp	r6, r3
 800af34:	bf28      	it	cs
 800af36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800af3a:	4912      	ldr	r1, [pc, #72]	; (800af84 <_scanf_float+0x418>)
 800af3c:	4630      	mov	r0, r6
 800af3e:	f000 f8d5 	bl	800b0ec <siprintf>
 800af42:	e7cf      	b.n	800aee4 <_scanf_float+0x378>
 800af44:	f011 0f04 	tst.w	r1, #4
 800af48:	9903      	ldr	r1, [sp, #12]
 800af4a:	600a      	str	r2, [r1, #0]
 800af4c:	d1db      	bne.n	800af06 <_scanf_float+0x39a>
 800af4e:	f8d3 8000 	ldr.w	r8, [r3]
 800af52:	ee10 2a10 	vmov	r2, s0
 800af56:	ee10 0a10 	vmov	r0, s0
 800af5a:	463b      	mov	r3, r7
 800af5c:	4639      	mov	r1, r7
 800af5e:	f7f5 fde5 	bl	8000b2c <__aeabi_dcmpun>
 800af62:	b128      	cbz	r0, 800af70 <_scanf_float+0x404>
 800af64:	4808      	ldr	r0, [pc, #32]	; (800af88 <_scanf_float+0x41c>)
 800af66:	f000 f9df 	bl	800b328 <nanf>
 800af6a:	ed88 0a00 	vstr	s0, [r8]
 800af6e:	e7cd      	b.n	800af0c <_scanf_float+0x3a0>
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7f5 fe38 	bl	8000be8 <__aeabi_d2f>
 800af78:	f8c8 0000 	str.w	r0, [r8]
 800af7c:	e7c6      	b.n	800af0c <_scanf_float+0x3a0>
 800af7e:	2500      	movs	r5, #0
 800af80:	e635      	b.n	800abee <_scanf_float+0x82>
 800af82:	bf00      	nop
 800af84:	0800ed41 	.word	0x0800ed41
 800af88:	0800ed89 	.word	0x0800ed89

0800af8c <std>:
 800af8c:	2300      	movs	r3, #0
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	e9c0 3300 	strd	r3, r3, [r0]
 800af96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9a:	6083      	str	r3, [r0, #8]
 800af9c:	8181      	strh	r1, [r0, #12]
 800af9e:	6643      	str	r3, [r0, #100]	; 0x64
 800afa0:	81c2      	strh	r2, [r0, #14]
 800afa2:	6183      	str	r3, [r0, #24]
 800afa4:	4619      	mov	r1, r3
 800afa6:	2208      	movs	r2, #8
 800afa8:	305c      	adds	r0, #92	; 0x5c
 800afaa:	f000 f902 	bl	800b1b2 <memset>
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <std+0x38>)
 800afb0:	6263      	str	r3, [r4, #36]	; 0x24
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <std+0x3c>)
 800afb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x40>)
 800afb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <std+0x44>)
 800afbc:	6224      	str	r4, [r4, #32]
 800afbe:	6323      	str	r3, [r4, #48]	; 0x30
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	bf00      	nop
 800afc4:	0800b12d 	.word	0x0800b12d
 800afc8:	0800b14f 	.word	0x0800b14f
 800afcc:	0800b187 	.word	0x0800b187
 800afd0:	0800b1ab 	.word	0x0800b1ab

0800afd4 <stdio_exit_handler>:
 800afd4:	4a02      	ldr	r2, [pc, #8]	; (800afe0 <stdio_exit_handler+0xc>)
 800afd6:	4903      	ldr	r1, [pc, #12]	; (800afe4 <stdio_exit_handler+0x10>)
 800afd8:	4803      	ldr	r0, [pc, #12]	; (800afe8 <stdio_exit_handler+0x14>)
 800afda:	f000 b869 	b.w	800b0b0 <_fwalk_sglue>
 800afde:	bf00      	nop
 800afe0:	2000002c 	.word	0x2000002c
 800afe4:	0800d775 	.word	0x0800d775
 800afe8:	200001a4 	.word	0x200001a4

0800afec <cleanup_stdio>:
 800afec:	6841      	ldr	r1, [r0, #4]
 800afee:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <cleanup_stdio+0x34>)
 800aff0:	4299      	cmp	r1, r3
 800aff2:	b510      	push	{r4, lr}
 800aff4:	4604      	mov	r4, r0
 800aff6:	d001      	beq.n	800affc <cleanup_stdio+0x10>
 800aff8:	f002 fbbc 	bl	800d774 <_fflush_r>
 800affc:	68a1      	ldr	r1, [r4, #8]
 800affe:	4b09      	ldr	r3, [pc, #36]	; (800b024 <cleanup_stdio+0x38>)
 800b000:	4299      	cmp	r1, r3
 800b002:	d002      	beq.n	800b00a <cleanup_stdio+0x1e>
 800b004:	4620      	mov	r0, r4
 800b006:	f002 fbb5 	bl	800d774 <_fflush_r>
 800b00a:	68e1      	ldr	r1, [r4, #12]
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <cleanup_stdio+0x3c>)
 800b00e:	4299      	cmp	r1, r3
 800b010:	d004      	beq.n	800b01c <cleanup_stdio+0x30>
 800b012:	4620      	mov	r0, r4
 800b014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b018:	f002 bbac 	b.w	800d774 <_fflush_r>
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	bf00      	nop
 800b020:	20000824 	.word	0x20000824
 800b024:	2000088c 	.word	0x2000088c
 800b028:	200008f4 	.word	0x200008f4

0800b02c <global_stdio_init.part.0>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <global_stdio_init.part.0+0x30>)
 800b030:	4c0b      	ldr	r4, [pc, #44]	; (800b060 <global_stdio_init.part.0+0x34>)
 800b032:	4a0c      	ldr	r2, [pc, #48]	; (800b064 <global_stdio_init.part.0+0x38>)
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	4620      	mov	r0, r4
 800b038:	2200      	movs	r2, #0
 800b03a:	2104      	movs	r1, #4
 800b03c:	f7ff ffa6 	bl	800af8c <std>
 800b040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b044:	2201      	movs	r2, #1
 800b046:	2109      	movs	r1, #9
 800b048:	f7ff ffa0 	bl	800af8c <std>
 800b04c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b050:	2202      	movs	r2, #2
 800b052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b056:	2112      	movs	r1, #18
 800b058:	f7ff bf98 	b.w	800af8c <std>
 800b05c:	2000095c 	.word	0x2000095c
 800b060:	20000824 	.word	0x20000824
 800b064:	0800afd5 	.word	0x0800afd5

0800b068 <__sfp_lock_acquire>:
 800b068:	4801      	ldr	r0, [pc, #4]	; (800b070 <__sfp_lock_acquire+0x8>)
 800b06a:	f000 b943 	b.w	800b2f4 <__retarget_lock_acquire_recursive>
 800b06e:	bf00      	nop
 800b070:	20000965 	.word	0x20000965

0800b074 <__sfp_lock_release>:
 800b074:	4801      	ldr	r0, [pc, #4]	; (800b07c <__sfp_lock_release+0x8>)
 800b076:	f000 b93e 	b.w	800b2f6 <__retarget_lock_release_recursive>
 800b07a:	bf00      	nop
 800b07c:	20000965 	.word	0x20000965

0800b080 <__sinit>:
 800b080:	b510      	push	{r4, lr}
 800b082:	4604      	mov	r4, r0
 800b084:	f7ff fff0 	bl	800b068 <__sfp_lock_acquire>
 800b088:	6a23      	ldr	r3, [r4, #32]
 800b08a:	b11b      	cbz	r3, 800b094 <__sinit+0x14>
 800b08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b090:	f7ff bff0 	b.w	800b074 <__sfp_lock_release>
 800b094:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <__sinit+0x28>)
 800b096:	6223      	str	r3, [r4, #32]
 800b098:	4b04      	ldr	r3, [pc, #16]	; (800b0ac <__sinit+0x2c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1f5      	bne.n	800b08c <__sinit+0xc>
 800b0a0:	f7ff ffc4 	bl	800b02c <global_stdio_init.part.0>
 800b0a4:	e7f2      	b.n	800b08c <__sinit+0xc>
 800b0a6:	bf00      	nop
 800b0a8:	0800afed 	.word	0x0800afed
 800b0ac:	2000095c 	.word	0x2000095c

0800b0b0 <_fwalk_sglue>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	4688      	mov	r8, r1
 800b0b8:	4614      	mov	r4, r2
 800b0ba:	2600      	movs	r6, #0
 800b0bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b0c4:	d505      	bpl.n	800b0d2 <_fwalk_sglue+0x22>
 800b0c6:	6824      	ldr	r4, [r4, #0]
 800b0c8:	2c00      	cmp	r4, #0
 800b0ca:	d1f7      	bne.n	800b0bc <_fwalk_sglue+0xc>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	89ab      	ldrh	r3, [r5, #12]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d907      	bls.n	800b0e8 <_fwalk_sglue+0x38>
 800b0d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	d003      	beq.n	800b0e8 <_fwalk_sglue+0x38>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	47c0      	blx	r8
 800b0e6:	4306      	orrs	r6, r0
 800b0e8:	3568      	adds	r5, #104	; 0x68
 800b0ea:	e7e9      	b.n	800b0c0 <_fwalk_sglue+0x10>

0800b0ec <siprintf>:
 800b0ec:	b40e      	push	{r1, r2, r3}
 800b0ee:	b500      	push	{lr}
 800b0f0:	b09c      	sub	sp, #112	; 0x70
 800b0f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b0f4:	9002      	str	r0, [sp, #8]
 800b0f6:	9006      	str	r0, [sp, #24]
 800b0f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0fc:	4809      	ldr	r0, [pc, #36]	; (800b124 <siprintf+0x38>)
 800b0fe:	9107      	str	r1, [sp, #28]
 800b100:	9104      	str	r1, [sp, #16]
 800b102:	4909      	ldr	r1, [pc, #36]	; (800b128 <siprintf+0x3c>)
 800b104:	f853 2b04 	ldr.w	r2, [r3], #4
 800b108:	9105      	str	r1, [sp, #20]
 800b10a:	6800      	ldr	r0, [r0, #0]
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	a902      	add	r1, sp, #8
 800b110:	f002 f9ac 	bl	800d46c <_svfiprintf_r>
 800b114:	9b02      	ldr	r3, [sp, #8]
 800b116:	2200      	movs	r2, #0
 800b118:	701a      	strb	r2, [r3, #0]
 800b11a:	b01c      	add	sp, #112	; 0x70
 800b11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b120:	b003      	add	sp, #12
 800b122:	4770      	bx	lr
 800b124:	200001f0 	.word	0x200001f0
 800b128:	ffff0208 	.word	0xffff0208

0800b12c <__sread>:
 800b12c:	b510      	push	{r4, lr}
 800b12e:	460c      	mov	r4, r1
 800b130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b134:	f000 f890 	bl	800b258 <_read_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	bfab      	itete	ge
 800b13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b13e:	89a3      	ldrhlt	r3, [r4, #12]
 800b140:	181b      	addge	r3, r3, r0
 800b142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b146:	bfac      	ite	ge
 800b148:	6563      	strge	r3, [r4, #84]	; 0x54
 800b14a:	81a3      	strhlt	r3, [r4, #12]
 800b14c:	bd10      	pop	{r4, pc}

0800b14e <__swrite>:
 800b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	461f      	mov	r7, r3
 800b154:	898b      	ldrh	r3, [r1, #12]
 800b156:	05db      	lsls	r3, r3, #23
 800b158:	4605      	mov	r5, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4616      	mov	r6, r2
 800b15e:	d505      	bpl.n	800b16c <__swrite+0x1e>
 800b160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b164:	2302      	movs	r3, #2
 800b166:	2200      	movs	r2, #0
 800b168:	f000 f864 	bl	800b234 <_lseek_r>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	4632      	mov	r2, r6
 800b17a:	463b      	mov	r3, r7
 800b17c:	4628      	mov	r0, r5
 800b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b182:	f000 b87b 	b.w	800b27c <_write_r>

0800b186 <__sseek>:
 800b186:	b510      	push	{r4, lr}
 800b188:	460c      	mov	r4, r1
 800b18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18e:	f000 f851 	bl	800b234 <_lseek_r>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	bf15      	itete	ne
 800b198:	6560      	strne	r0, [r4, #84]	; 0x54
 800b19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1a2:	81a3      	strheq	r3, [r4, #12]
 800b1a4:	bf18      	it	ne
 800b1a6:	81a3      	strhne	r3, [r4, #12]
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <__sclose>:
 800b1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ae:	f000 b831 	b.w	800b214 <_close_r>

0800b1b2 <memset>:
 800b1b2:	4402      	add	r2, r0
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d100      	bne.n	800b1bc <memset+0xa>
 800b1ba:	4770      	bx	lr
 800b1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c0:	e7f9      	b.n	800b1b6 <memset+0x4>

0800b1c2 <strncmp>:
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	b16a      	cbz	r2, 800b1e2 <strncmp+0x20>
 800b1c6:	3901      	subs	r1, #1
 800b1c8:	1884      	adds	r4, r0, r2
 800b1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d103      	bne.n	800b1de <strncmp+0x1c>
 800b1d6:	42a0      	cmp	r0, r4
 800b1d8:	d001      	beq.n	800b1de <strncmp+0x1c>
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	d1f5      	bne.n	800b1ca <strncmp+0x8>
 800b1de:	1ad0      	subs	r0, r2, r3
 800b1e0:	bd10      	pop	{r4, pc}
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	e7fc      	b.n	800b1e0 <strncmp+0x1e>

0800b1e6 <strncpy>:
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	3901      	subs	r1, #1
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	b132      	cbz	r2, 800b1fc <strncpy+0x16>
 800b1ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1f2:	f803 4b01 	strb.w	r4, [r3], #1
 800b1f6:	3a01      	subs	r2, #1
 800b1f8:	2c00      	cmp	r4, #0
 800b1fa:	d1f7      	bne.n	800b1ec <strncpy+0x6>
 800b1fc:	441a      	add	r2, r3
 800b1fe:	2100      	movs	r1, #0
 800b200:	4293      	cmp	r3, r2
 800b202:	d100      	bne.n	800b206 <strncpy+0x20>
 800b204:	bd10      	pop	{r4, pc}
 800b206:	f803 1b01 	strb.w	r1, [r3], #1
 800b20a:	e7f9      	b.n	800b200 <strncpy+0x1a>

0800b20c <_localeconv_r>:
 800b20c:	4800      	ldr	r0, [pc, #0]	; (800b210 <_localeconv_r+0x4>)
 800b20e:	4770      	bx	lr
 800b210:	20000128 	.word	0x20000128

0800b214 <_close_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d06      	ldr	r5, [pc, #24]	; (800b230 <_close_r+0x1c>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	f7f7 f831 	bl	8002286 <_close>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_close_r+0x1a>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_close_r+0x1a>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20000960 	.word	0x20000960

0800b234 <_lseek_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	; (800b254 <_lseek_r+0x20>)
 800b238:	4604      	mov	r4, r0
 800b23a:	4608      	mov	r0, r1
 800b23c:	4611      	mov	r1, r2
 800b23e:	2200      	movs	r2, #0
 800b240:	602a      	str	r2, [r5, #0]
 800b242:	461a      	mov	r2, r3
 800b244:	f7f7 f846 	bl	80022d4 <_lseek>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d102      	bne.n	800b252 <_lseek_r+0x1e>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	b103      	cbz	r3, 800b252 <_lseek_r+0x1e>
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	20000960 	.word	0x20000960

0800b258 <_read_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d07      	ldr	r5, [pc, #28]	; (800b278 <_read_r+0x20>)
 800b25c:	4604      	mov	r4, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	4611      	mov	r1, r2
 800b262:	2200      	movs	r2, #0
 800b264:	602a      	str	r2, [r5, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	f7f6 ffd4 	bl	8002214 <_read>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_read_r+0x1e>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_read_r+0x1e>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20000960 	.word	0x20000960

0800b27c <_write_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4d07      	ldr	r5, [pc, #28]	; (800b29c <_write_r+0x20>)
 800b280:	4604      	mov	r4, r0
 800b282:	4608      	mov	r0, r1
 800b284:	4611      	mov	r1, r2
 800b286:	2200      	movs	r2, #0
 800b288:	602a      	str	r2, [r5, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f7f6 ffdf 	bl	800224e <_write>
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	d102      	bne.n	800b29a <_write_r+0x1e>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	b103      	cbz	r3, 800b29a <_write_r+0x1e>
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	20000960 	.word	0x20000960

0800b2a0 <__errno>:
 800b2a0:	4b01      	ldr	r3, [pc, #4]	; (800b2a8 <__errno+0x8>)
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	200001f0 	.word	0x200001f0

0800b2ac <__libc_init_array>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4d0d      	ldr	r5, [pc, #52]	; (800b2e4 <__libc_init_array+0x38>)
 800b2b0:	4c0d      	ldr	r4, [pc, #52]	; (800b2e8 <__libc_init_array+0x3c>)
 800b2b2:	1b64      	subs	r4, r4, r5
 800b2b4:	10a4      	asrs	r4, r4, #2
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	42a6      	cmp	r6, r4
 800b2ba:	d109      	bne.n	800b2d0 <__libc_init_array+0x24>
 800b2bc:	4d0b      	ldr	r5, [pc, #44]	; (800b2ec <__libc_init_array+0x40>)
 800b2be:	4c0c      	ldr	r4, [pc, #48]	; (800b2f0 <__libc_init_array+0x44>)
 800b2c0:	f002 fdb2 	bl	800de28 <_init>
 800b2c4:	1b64      	subs	r4, r4, r5
 800b2c6:	10a4      	asrs	r4, r4, #2
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	42a6      	cmp	r6, r4
 800b2cc:	d105      	bne.n	800b2da <__libc_init_array+0x2e>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d4:	4798      	blx	r3
 800b2d6:	3601      	adds	r6, #1
 800b2d8:	e7ee      	b.n	800b2b8 <__libc_init_array+0xc>
 800b2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2de:	4798      	blx	r3
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	e7f2      	b.n	800b2ca <__libc_init_array+0x1e>
 800b2e4:	0800f0e8 	.word	0x0800f0e8
 800b2e8:	0800f0e8 	.word	0x0800f0e8
 800b2ec:	0800f0e8 	.word	0x0800f0e8
 800b2f0:	0800f0ec 	.word	0x0800f0ec

0800b2f4 <__retarget_lock_acquire_recursive>:
 800b2f4:	4770      	bx	lr

0800b2f6 <__retarget_lock_release_recursive>:
 800b2f6:	4770      	bx	lr

0800b2f8 <memcpy>:
 800b2f8:	440a      	add	r2, r1
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b300:	d100      	bne.n	800b304 <memcpy+0xc>
 800b302:	4770      	bx	lr
 800b304:	b510      	push	{r4, lr}
 800b306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b30e:	4291      	cmp	r1, r2
 800b310:	d1f9      	bne.n	800b306 <memcpy+0xe>
 800b312:	bd10      	pop	{r4, pc}
 800b314:	0000      	movs	r0, r0
	...

0800b318 <nan>:
 800b318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b320 <nan+0x8>
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	00000000 	.word	0x00000000
 800b324:	7ff80000 	.word	0x7ff80000

0800b328 <nanf>:
 800b328:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b330 <nanf+0x8>
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	7fc00000 	.word	0x7fc00000

0800b334 <__assert_func>:
 800b334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b336:	4614      	mov	r4, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	4b09      	ldr	r3, [pc, #36]	; (800b360 <__assert_func+0x2c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4605      	mov	r5, r0
 800b340:	68d8      	ldr	r0, [r3, #12]
 800b342:	b14c      	cbz	r4, 800b358 <__assert_func+0x24>
 800b344:	4b07      	ldr	r3, [pc, #28]	; (800b364 <__assert_func+0x30>)
 800b346:	9100      	str	r1, [sp, #0]
 800b348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b34c:	4906      	ldr	r1, [pc, #24]	; (800b368 <__assert_func+0x34>)
 800b34e:	462b      	mov	r3, r5
 800b350:	f002 fa38 	bl	800d7c4 <fiprintf>
 800b354:	f002 fa72 	bl	800d83c <abort>
 800b358:	4b04      	ldr	r3, [pc, #16]	; (800b36c <__assert_func+0x38>)
 800b35a:	461c      	mov	r4, r3
 800b35c:	e7f3      	b.n	800b346 <__assert_func+0x12>
 800b35e:	bf00      	nop
 800b360:	200001f0 	.word	0x200001f0
 800b364:	0800ed4e 	.word	0x0800ed4e
 800b368:	0800ed5b 	.word	0x0800ed5b
 800b36c:	0800ed89 	.word	0x0800ed89

0800b370 <quorem>:
 800b370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	6903      	ldr	r3, [r0, #16]
 800b376:	690c      	ldr	r4, [r1, #16]
 800b378:	42a3      	cmp	r3, r4
 800b37a:	4607      	mov	r7, r0
 800b37c:	db7e      	blt.n	800b47c <quorem+0x10c>
 800b37e:	3c01      	subs	r4, #1
 800b380:	f101 0814 	add.w	r8, r1, #20
 800b384:	f100 0514 	add.w	r5, r0, #20
 800b388:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b396:	3301      	adds	r3, #1
 800b398:	429a      	cmp	r2, r3
 800b39a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b39e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3a6:	d331      	bcc.n	800b40c <quorem+0x9c>
 800b3a8:	f04f 0e00 	mov.w	lr, #0
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	46ac      	mov	ip, r5
 800b3b0:	46f2      	mov	sl, lr
 800b3b2:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3b6:	b293      	uxth	r3, r2
 800b3b8:	fb06 e303 	mla	r3, r6, r3, lr
 800b3bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b3c0:	0c1a      	lsrs	r2, r3, #16
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3c8:	f8dc a000 	ldr.w	sl, [ip]
 800b3cc:	fa13 f38a 	uxtah	r3, r3, sl
 800b3d0:	fb06 220e 	mla	r2, r6, lr, r2
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	9b00      	ldr	r3, [sp, #0]
 800b3d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b3dc:	b292      	uxth	r2, r2
 800b3de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b3e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3e6:	f8bd 3000 	ldrh.w	r3, [sp]
 800b3ea:	4581      	cmp	r9, r0
 800b3ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3f0:	f84c 3b04 	str.w	r3, [ip], #4
 800b3f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b3f8:	d2db      	bcs.n	800b3b2 <quorem+0x42>
 800b3fa:	f855 300b 	ldr.w	r3, [r5, fp]
 800b3fe:	b92b      	cbnz	r3, 800b40c <quorem+0x9c>
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	3b04      	subs	r3, #4
 800b404:	429d      	cmp	r5, r3
 800b406:	461a      	mov	r2, r3
 800b408:	d32c      	bcc.n	800b464 <quorem+0xf4>
 800b40a:	613c      	str	r4, [r7, #16]
 800b40c:	4638      	mov	r0, r7
 800b40e:	f001 fd59 	bl	800cec4 <__mcmp>
 800b412:	2800      	cmp	r0, #0
 800b414:	db22      	blt.n	800b45c <quorem+0xec>
 800b416:	3601      	adds	r6, #1
 800b418:	4629      	mov	r1, r5
 800b41a:	2000      	movs	r0, #0
 800b41c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b420:	f8d1 c000 	ldr.w	ip, [r1]
 800b424:	b293      	uxth	r3, r2
 800b426:	1ac3      	subs	r3, r0, r3
 800b428:	0c12      	lsrs	r2, r2, #16
 800b42a:	fa13 f38c 	uxtah	r3, r3, ip
 800b42e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b432:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b436:	b29b      	uxth	r3, r3
 800b438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b43c:	45c1      	cmp	r9, r8
 800b43e:	f841 3b04 	str.w	r3, [r1], #4
 800b442:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b446:	d2e9      	bcs.n	800b41c <quorem+0xac>
 800b448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b44c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b450:	b922      	cbnz	r2, 800b45c <quorem+0xec>
 800b452:	3b04      	subs	r3, #4
 800b454:	429d      	cmp	r5, r3
 800b456:	461a      	mov	r2, r3
 800b458:	d30a      	bcc.n	800b470 <quorem+0x100>
 800b45a:	613c      	str	r4, [r7, #16]
 800b45c:	4630      	mov	r0, r6
 800b45e:	b003      	add	sp, #12
 800b460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	3b04      	subs	r3, #4
 800b468:	2a00      	cmp	r2, #0
 800b46a:	d1ce      	bne.n	800b40a <quorem+0x9a>
 800b46c:	3c01      	subs	r4, #1
 800b46e:	e7c9      	b.n	800b404 <quorem+0x94>
 800b470:	6812      	ldr	r2, [r2, #0]
 800b472:	3b04      	subs	r3, #4
 800b474:	2a00      	cmp	r2, #0
 800b476:	d1f0      	bne.n	800b45a <quorem+0xea>
 800b478:	3c01      	subs	r4, #1
 800b47a:	e7eb      	b.n	800b454 <quorem+0xe4>
 800b47c:	2000      	movs	r0, #0
 800b47e:	e7ee      	b.n	800b45e <quorem+0xee>

0800b480 <_dtoa_r>:
 800b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b484:	ed2d 8b04 	vpush	{d8-d9}
 800b488:	69c5      	ldr	r5, [r0, #28]
 800b48a:	b093      	sub	sp, #76	; 0x4c
 800b48c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b490:	ec57 6b10 	vmov	r6, r7, d0
 800b494:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b498:	9107      	str	r1, [sp, #28]
 800b49a:	4604      	mov	r4, r0
 800b49c:	920a      	str	r2, [sp, #40]	; 0x28
 800b49e:	930d      	str	r3, [sp, #52]	; 0x34
 800b4a0:	b975      	cbnz	r5, 800b4c0 <_dtoa_r+0x40>
 800b4a2:	2010      	movs	r0, #16
 800b4a4:	f001 f982 	bl	800c7ac <malloc>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	61e0      	str	r0, [r4, #28]
 800b4ac:	b920      	cbnz	r0, 800b4b8 <_dtoa_r+0x38>
 800b4ae:	4bae      	ldr	r3, [pc, #696]	; (800b768 <_dtoa_r+0x2e8>)
 800b4b0:	21ef      	movs	r1, #239	; 0xef
 800b4b2:	48ae      	ldr	r0, [pc, #696]	; (800b76c <_dtoa_r+0x2ec>)
 800b4b4:	f7ff ff3e 	bl	800b334 <__assert_func>
 800b4b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4bc:	6005      	str	r5, [r0, #0]
 800b4be:	60c5      	str	r5, [r0, #12]
 800b4c0:	69e3      	ldr	r3, [r4, #28]
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	b151      	cbz	r1, 800b4dc <_dtoa_r+0x5c>
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	604a      	str	r2, [r1, #4]
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	4093      	lsls	r3, r2
 800b4ce:	608b      	str	r3, [r1, #8]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f001 fa71 	bl	800c9b8 <_Bfree>
 800b4d6:	69e3      	ldr	r3, [r4, #28]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	1e3b      	subs	r3, r7, #0
 800b4de:	bfbb      	ittet	lt
 800b4e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b4e4:	9303      	strlt	r3, [sp, #12]
 800b4e6:	2300      	movge	r3, #0
 800b4e8:	2201      	movlt	r2, #1
 800b4ea:	bfac      	ite	ge
 800b4ec:	f8c8 3000 	strge.w	r3, [r8]
 800b4f0:	f8c8 2000 	strlt.w	r2, [r8]
 800b4f4:	4b9e      	ldr	r3, [pc, #632]	; (800b770 <_dtoa_r+0x2f0>)
 800b4f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b4fa:	ea33 0308 	bics.w	r3, r3, r8
 800b4fe:	d11b      	bne.n	800b538 <_dtoa_r+0xb8>
 800b500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b502:	f242 730f 	movw	r3, #9999	; 0x270f
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b50c:	4333      	orrs	r3, r6
 800b50e:	f000 8593 	beq.w	800c038 <_dtoa_r+0xbb8>
 800b512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b514:	b963      	cbnz	r3, 800b530 <_dtoa_r+0xb0>
 800b516:	4b97      	ldr	r3, [pc, #604]	; (800b774 <_dtoa_r+0x2f4>)
 800b518:	e027      	b.n	800b56a <_dtoa_r+0xea>
 800b51a:	4b97      	ldr	r3, [pc, #604]	; (800b778 <_dtoa_r+0x2f8>)
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	9800      	ldr	r0, [sp, #0]
 800b526:	b013      	add	sp, #76	; 0x4c
 800b528:	ecbd 8b04 	vpop	{d8-d9}
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b530:	4b90      	ldr	r3, [pc, #576]	; (800b774 <_dtoa_r+0x2f4>)
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	3303      	adds	r3, #3
 800b536:	e7f3      	b.n	800b520 <_dtoa_r+0xa0>
 800b538:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b53c:	2200      	movs	r2, #0
 800b53e:	ec51 0b17 	vmov	r0, r1, d7
 800b542:	eeb0 8a47 	vmov.f32	s16, s14
 800b546:	eef0 8a67 	vmov.f32	s17, s15
 800b54a:	2300      	movs	r3, #0
 800b54c:	f7f5 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b550:	4681      	mov	r9, r0
 800b552:	b160      	cbz	r0, 800b56e <_dtoa_r+0xee>
 800b554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b556:	2301      	movs	r3, #1
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 8568 	beq.w	800c032 <_dtoa_r+0xbb2>
 800b562:	4b86      	ldr	r3, [pc, #536]	; (800b77c <_dtoa_r+0x2fc>)
 800b564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	3b01      	subs	r3, #1
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	e7da      	b.n	800b524 <_dtoa_r+0xa4>
 800b56e:	aa10      	add	r2, sp, #64	; 0x40
 800b570:	a911      	add	r1, sp, #68	; 0x44
 800b572:	4620      	mov	r0, r4
 800b574:	eeb0 0a48 	vmov.f32	s0, s16
 800b578:	eef0 0a68 	vmov.f32	s1, s17
 800b57c:	f001 fdb8 	bl	800d0f0 <__d2b>
 800b580:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b584:	4682      	mov	sl, r0
 800b586:	2d00      	cmp	r5, #0
 800b588:	d07f      	beq.n	800b68a <_dtoa_r+0x20a>
 800b58a:	ee18 3a90 	vmov	r3, s17
 800b58e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b592:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b596:	ec51 0b18 	vmov	r0, r1, d8
 800b59a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b59e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4b75      	ldr	r3, [pc, #468]	; (800b780 <_dtoa_r+0x300>)
 800b5ac:	f7f4 fe6c 	bl	8000288 <__aeabi_dsub>
 800b5b0:	a367      	add	r3, pc, #412	; (adr r3, 800b750 <_dtoa_r+0x2d0>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f5 f81f 	bl	80005f8 <__aeabi_dmul>
 800b5ba:	a367      	add	r3, pc, #412	; (adr r3, 800b758 <_dtoa_r+0x2d8>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f7f4 fe64 	bl	800028c <__adddf3>
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	460f      	mov	r7, r1
 800b5ca:	f7f4 ffab 	bl	8000524 <__aeabi_i2d>
 800b5ce:	a364      	add	r3, pc, #400	; (adr r3, 800b760 <_dtoa_r+0x2e0>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4630      	mov	r0, r6
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7f4 fe54 	bl	800028c <__adddf3>
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	460f      	mov	r7, r1
 800b5e8:	f7f5 fab6 	bl	8000b58 <__aeabi_d2iz>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4683      	mov	fp, r0
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f5 fa71 	bl	8000adc <__aeabi_dcmplt>
 800b5fa:	b148      	cbz	r0, 800b610 <_dtoa_r+0x190>
 800b5fc:	4658      	mov	r0, fp
 800b5fe:	f7f4 ff91 	bl	8000524 <__aeabi_i2d>
 800b602:	4632      	mov	r2, r6
 800b604:	463b      	mov	r3, r7
 800b606:	f7f5 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b60a:	b908      	cbnz	r0, 800b610 <_dtoa_r+0x190>
 800b60c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b610:	f1bb 0f16 	cmp.w	fp, #22
 800b614:	d857      	bhi.n	800b6c6 <_dtoa_r+0x246>
 800b616:	4b5b      	ldr	r3, [pc, #364]	; (800b784 <_dtoa_r+0x304>)
 800b618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	ec51 0b18 	vmov	r0, r1, d8
 800b624:	f7f5 fa5a 	bl	8000adc <__aeabi_dcmplt>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d04e      	beq.n	800b6ca <_dtoa_r+0x24a>
 800b62c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b630:	2300      	movs	r3, #0
 800b632:	930c      	str	r3, [sp, #48]	; 0x30
 800b634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b636:	1b5b      	subs	r3, r3, r5
 800b638:	1e5a      	subs	r2, r3, #1
 800b63a:	bf45      	ittet	mi
 800b63c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b640:	9305      	strmi	r3, [sp, #20]
 800b642:	2300      	movpl	r3, #0
 800b644:	2300      	movmi	r3, #0
 800b646:	9206      	str	r2, [sp, #24]
 800b648:	bf54      	ite	pl
 800b64a:	9305      	strpl	r3, [sp, #20]
 800b64c:	9306      	strmi	r3, [sp, #24]
 800b64e:	f1bb 0f00 	cmp.w	fp, #0
 800b652:	db3c      	blt.n	800b6ce <_dtoa_r+0x24e>
 800b654:	9b06      	ldr	r3, [sp, #24]
 800b656:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b65a:	445b      	add	r3, fp
 800b65c:	9306      	str	r3, [sp, #24]
 800b65e:	2300      	movs	r3, #0
 800b660:	9308      	str	r3, [sp, #32]
 800b662:	9b07      	ldr	r3, [sp, #28]
 800b664:	2b09      	cmp	r3, #9
 800b666:	d868      	bhi.n	800b73a <_dtoa_r+0x2ba>
 800b668:	2b05      	cmp	r3, #5
 800b66a:	bfc4      	itt	gt
 800b66c:	3b04      	subgt	r3, #4
 800b66e:	9307      	strgt	r3, [sp, #28]
 800b670:	9b07      	ldr	r3, [sp, #28]
 800b672:	f1a3 0302 	sub.w	r3, r3, #2
 800b676:	bfcc      	ite	gt
 800b678:	2500      	movgt	r5, #0
 800b67a:	2501      	movle	r5, #1
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	f200 8085 	bhi.w	800b78c <_dtoa_r+0x30c>
 800b682:	e8df f003 	tbb	[pc, r3]
 800b686:	3b2e      	.short	0x3b2e
 800b688:	5839      	.short	0x5839
 800b68a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b68e:	441d      	add	r5, r3
 800b690:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b694:	2b20      	cmp	r3, #32
 800b696:	bfc1      	itttt	gt
 800b698:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b69c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b6a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b6a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b6a8:	bfd6      	itet	le
 800b6aa:	f1c3 0320 	rsble	r3, r3, #32
 800b6ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800b6b2:	fa06 f003 	lslle.w	r0, r6, r3
 800b6b6:	f7f4 ff25 	bl	8000504 <__aeabi_ui2d>
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b6c0:	3d01      	subs	r5, #1
 800b6c2:	920e      	str	r2, [sp, #56]	; 0x38
 800b6c4:	e76f      	b.n	800b5a6 <_dtoa_r+0x126>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e7b3      	b.n	800b632 <_dtoa_r+0x1b2>
 800b6ca:	900c      	str	r0, [sp, #48]	; 0x30
 800b6cc:	e7b2      	b.n	800b634 <_dtoa_r+0x1b4>
 800b6ce:	9b05      	ldr	r3, [sp, #20]
 800b6d0:	eba3 030b 	sub.w	r3, r3, fp
 800b6d4:	9305      	str	r3, [sp, #20]
 800b6d6:	f1cb 0300 	rsb	r3, fp, #0
 800b6da:	9308      	str	r3, [sp, #32]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6e0:	e7bf      	b.n	800b662 <_dtoa_r+0x1e2>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dc52      	bgt.n	800b792 <_dtoa_r+0x312>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	9301      	str	r3, [sp, #4]
 800b6f0:	9304      	str	r3, [sp, #16]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b6f6:	e00b      	b.n	800b710 <_dtoa_r+0x290>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e7f3      	b.n	800b6e4 <_dtoa_r+0x264>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b702:	445b      	add	r3, fp
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	3301      	adds	r3, #1
 800b708:	2b01      	cmp	r3, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	bfb8      	it	lt
 800b70e:	2301      	movlt	r3, #1
 800b710:	69e0      	ldr	r0, [r4, #28]
 800b712:	2100      	movs	r1, #0
 800b714:	2204      	movs	r2, #4
 800b716:	f102 0614 	add.w	r6, r2, #20
 800b71a:	429e      	cmp	r6, r3
 800b71c:	d93d      	bls.n	800b79a <_dtoa_r+0x31a>
 800b71e:	6041      	str	r1, [r0, #4]
 800b720:	4620      	mov	r0, r4
 800b722:	f001 f909 	bl	800c938 <_Balloc>
 800b726:	9000      	str	r0, [sp, #0]
 800b728:	2800      	cmp	r0, #0
 800b72a:	d139      	bne.n	800b7a0 <_dtoa_r+0x320>
 800b72c:	4b16      	ldr	r3, [pc, #88]	; (800b788 <_dtoa_r+0x308>)
 800b72e:	4602      	mov	r2, r0
 800b730:	f240 11af 	movw	r1, #431	; 0x1af
 800b734:	e6bd      	b.n	800b4b2 <_dtoa_r+0x32>
 800b736:	2301      	movs	r3, #1
 800b738:	e7e1      	b.n	800b6fe <_dtoa_r+0x27e>
 800b73a:	2501      	movs	r5, #1
 800b73c:	2300      	movs	r3, #0
 800b73e:	9307      	str	r3, [sp, #28]
 800b740:	9509      	str	r5, [sp, #36]	; 0x24
 800b742:	f04f 33ff 	mov.w	r3, #4294967295
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	2200      	movs	r2, #0
 800b74c:	2312      	movs	r3, #18
 800b74e:	e7d1      	b.n	800b6f4 <_dtoa_r+0x274>
 800b750:	636f4361 	.word	0x636f4361
 800b754:	3fd287a7 	.word	0x3fd287a7
 800b758:	8b60c8b3 	.word	0x8b60c8b3
 800b75c:	3fc68a28 	.word	0x3fc68a28
 800b760:	509f79fb 	.word	0x509f79fb
 800b764:	3fd34413 	.word	0x3fd34413
 800b768:	0800ed97 	.word	0x0800ed97
 800b76c:	0800edae 	.word	0x0800edae
 800b770:	7ff00000 	.word	0x7ff00000
 800b774:	0800ed93 	.word	0x0800ed93
 800b778:	0800ed8a 	.word	0x0800ed8a
 800b77c:	0800ed1e 	.word	0x0800ed1e
 800b780:	3ff80000 	.word	0x3ff80000
 800b784:	0800eef8 	.word	0x0800eef8
 800b788:	0800ee06 	.word	0x0800ee06
 800b78c:	2301      	movs	r3, #1
 800b78e:	9309      	str	r3, [sp, #36]	; 0x24
 800b790:	e7d7      	b.n	800b742 <_dtoa_r+0x2c2>
 800b792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	e7ba      	b.n	800b710 <_dtoa_r+0x290>
 800b79a:	3101      	adds	r1, #1
 800b79c:	0052      	lsls	r2, r2, #1
 800b79e:	e7ba      	b.n	800b716 <_dtoa_r+0x296>
 800b7a0:	69e3      	ldr	r3, [r4, #28]
 800b7a2:	9a00      	ldr	r2, [sp, #0]
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	9b04      	ldr	r3, [sp, #16]
 800b7a8:	2b0e      	cmp	r3, #14
 800b7aa:	f200 80a8 	bhi.w	800b8fe <_dtoa_r+0x47e>
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	f000 80a5 	beq.w	800b8fe <_dtoa_r+0x47e>
 800b7b4:	f1bb 0f00 	cmp.w	fp, #0
 800b7b8:	dd38      	ble.n	800b82c <_dtoa_r+0x3ac>
 800b7ba:	4bc0      	ldr	r3, [pc, #768]	; (800babc <_dtoa_r+0x63c>)
 800b7bc:	f00b 020f 	and.w	r2, fp, #15
 800b7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b7c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b7cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b7d0:	d019      	beq.n	800b806 <_dtoa_r+0x386>
 800b7d2:	4bbb      	ldr	r3, [pc, #748]	; (800bac0 <_dtoa_r+0x640>)
 800b7d4:	ec51 0b18 	vmov	r0, r1, d8
 800b7d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7dc:	f7f5 f836 	bl	800084c <__aeabi_ddiv>
 800b7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7e4:	f008 080f 	and.w	r8, r8, #15
 800b7e8:	2503      	movs	r5, #3
 800b7ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bac0 <_dtoa_r+0x640>
 800b7ee:	f1b8 0f00 	cmp.w	r8, #0
 800b7f2:	d10a      	bne.n	800b80a <_dtoa_r+0x38a>
 800b7f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	f7f5 f826 	bl	800084c <__aeabi_ddiv>
 800b800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b804:	e02b      	b.n	800b85e <_dtoa_r+0x3de>
 800b806:	2502      	movs	r5, #2
 800b808:	e7ef      	b.n	800b7ea <_dtoa_r+0x36a>
 800b80a:	f018 0f01 	tst.w	r8, #1
 800b80e:	d008      	beq.n	800b822 <_dtoa_r+0x3a2>
 800b810:	4630      	mov	r0, r6
 800b812:	4639      	mov	r1, r7
 800b814:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b818:	f7f4 feee 	bl	80005f8 <__aeabi_dmul>
 800b81c:	3501      	adds	r5, #1
 800b81e:	4606      	mov	r6, r0
 800b820:	460f      	mov	r7, r1
 800b822:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b826:	f109 0908 	add.w	r9, r9, #8
 800b82a:	e7e0      	b.n	800b7ee <_dtoa_r+0x36e>
 800b82c:	f000 809f 	beq.w	800b96e <_dtoa_r+0x4ee>
 800b830:	f1cb 0600 	rsb	r6, fp, #0
 800b834:	4ba1      	ldr	r3, [pc, #644]	; (800babc <_dtoa_r+0x63c>)
 800b836:	4fa2      	ldr	r7, [pc, #648]	; (800bac0 <_dtoa_r+0x640>)
 800b838:	f006 020f 	and.w	r2, r6, #15
 800b83c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	ec51 0b18 	vmov	r0, r1, d8
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b850:	1136      	asrs	r6, r6, #4
 800b852:	2300      	movs	r3, #0
 800b854:	2502      	movs	r5, #2
 800b856:	2e00      	cmp	r6, #0
 800b858:	d17e      	bne.n	800b958 <_dtoa_r+0x4d8>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1d0      	bne.n	800b800 <_dtoa_r+0x380>
 800b85e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b860:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 8084 	beq.w	800b972 <_dtoa_r+0x4f2>
 800b86a:	4b96      	ldr	r3, [pc, #600]	; (800bac4 <_dtoa_r+0x644>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	4640      	mov	r0, r8
 800b870:	4649      	mov	r1, r9
 800b872:	f7f5 f933 	bl	8000adc <__aeabi_dcmplt>
 800b876:	2800      	cmp	r0, #0
 800b878:	d07b      	beq.n	800b972 <_dtoa_r+0x4f2>
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d078      	beq.n	800b972 <_dtoa_r+0x4f2>
 800b880:	9b01      	ldr	r3, [sp, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dd39      	ble.n	800b8fa <_dtoa_r+0x47a>
 800b886:	4b90      	ldr	r3, [pc, #576]	; (800bac8 <_dtoa_r+0x648>)
 800b888:	2200      	movs	r2, #0
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f7f4 feb3 	bl	80005f8 <__aeabi_dmul>
 800b892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b896:	9e01      	ldr	r6, [sp, #4]
 800b898:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b89c:	3501      	adds	r5, #1
 800b89e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	f7f4 fe3e 	bl	8000524 <__aeabi_i2d>
 800b8a8:	4642      	mov	r2, r8
 800b8aa:	464b      	mov	r3, r9
 800b8ac:	f7f4 fea4 	bl	80005f8 <__aeabi_dmul>
 800b8b0:	4b86      	ldr	r3, [pc, #536]	; (800bacc <_dtoa_r+0x64c>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7f4 fcea 	bl	800028c <__adddf3>
 800b8b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c0:	9303      	str	r3, [sp, #12]
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	d158      	bne.n	800b978 <_dtoa_r+0x4f8>
 800b8c6:	4b82      	ldr	r3, [pc, #520]	; (800bad0 <_dtoa_r+0x650>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	f7f4 fcdb 	bl	8000288 <__aeabi_dsub>
 800b8d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4689      	mov	r9, r1
 800b8da:	f7f5 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f040 8296 	bne.w	800be10 <_dtoa_r+0x990>
 800b8e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f5 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f040 8289 	bne.w	800be0c <_dtoa_r+0x98c>
 800b8fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b8fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b900:	2b00      	cmp	r3, #0
 800b902:	f2c0 814e 	blt.w	800bba2 <_dtoa_r+0x722>
 800b906:	f1bb 0f0e 	cmp.w	fp, #14
 800b90a:	f300 814a 	bgt.w	800bba2 <_dtoa_r+0x722>
 800b90e:	4b6b      	ldr	r3, [pc, #428]	; (800babc <_dtoa_r+0x63c>)
 800b910:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b914:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f280 80dc 	bge.w	800bad8 <_dtoa_r+0x658>
 800b920:	9b04      	ldr	r3, [sp, #16]
 800b922:	2b00      	cmp	r3, #0
 800b924:	f300 80d8 	bgt.w	800bad8 <_dtoa_r+0x658>
 800b928:	f040 826f 	bne.w	800be0a <_dtoa_r+0x98a>
 800b92c:	4b68      	ldr	r3, [pc, #416]	; (800bad0 <_dtoa_r+0x650>)
 800b92e:	2200      	movs	r2, #0
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b93c:	f7f5 f8e2 	bl	8000b04 <__aeabi_dcmpge>
 800b940:	9e04      	ldr	r6, [sp, #16]
 800b942:	4637      	mov	r7, r6
 800b944:	2800      	cmp	r0, #0
 800b946:	f040 8245 	bne.w	800bdd4 <_dtoa_r+0x954>
 800b94a:	9d00      	ldr	r5, [sp, #0]
 800b94c:	2331      	movs	r3, #49	; 0x31
 800b94e:	f805 3b01 	strb.w	r3, [r5], #1
 800b952:	f10b 0b01 	add.w	fp, fp, #1
 800b956:	e241      	b.n	800bddc <_dtoa_r+0x95c>
 800b958:	07f2      	lsls	r2, r6, #31
 800b95a:	d505      	bpl.n	800b968 <_dtoa_r+0x4e8>
 800b95c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b960:	f7f4 fe4a 	bl	80005f8 <__aeabi_dmul>
 800b964:	3501      	adds	r5, #1
 800b966:	2301      	movs	r3, #1
 800b968:	1076      	asrs	r6, r6, #1
 800b96a:	3708      	adds	r7, #8
 800b96c:	e773      	b.n	800b856 <_dtoa_r+0x3d6>
 800b96e:	2502      	movs	r5, #2
 800b970:	e775      	b.n	800b85e <_dtoa_r+0x3de>
 800b972:	9e04      	ldr	r6, [sp, #16]
 800b974:	465f      	mov	r7, fp
 800b976:	e792      	b.n	800b89e <_dtoa_r+0x41e>
 800b978:	9900      	ldr	r1, [sp, #0]
 800b97a:	4b50      	ldr	r3, [pc, #320]	; (800babc <_dtoa_r+0x63c>)
 800b97c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b980:	4431      	add	r1, r6
 800b982:	9102      	str	r1, [sp, #8]
 800b984:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b986:	eeb0 9a47 	vmov.f32	s18, s14
 800b98a:	eef0 9a67 	vmov.f32	s19, s15
 800b98e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b996:	2900      	cmp	r1, #0
 800b998:	d044      	beq.n	800ba24 <_dtoa_r+0x5a4>
 800b99a:	494e      	ldr	r1, [pc, #312]	; (800bad4 <_dtoa_r+0x654>)
 800b99c:	2000      	movs	r0, #0
 800b99e:	f7f4 ff55 	bl	800084c <__aeabi_ddiv>
 800b9a2:	ec53 2b19 	vmov	r2, r3, d9
 800b9a6:	f7f4 fc6f 	bl	8000288 <__aeabi_dsub>
 800b9aa:	9d00      	ldr	r5, [sp, #0]
 800b9ac:	ec41 0b19 	vmov	d9, r0, r1
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f7f5 f8d0 	bl	8000b58 <__aeabi_d2iz>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	f7f4 fdb3 	bl	8000524 <__aeabi_i2d>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f4 fc5f 	bl	8000288 <__aeabi_dsub>
 800b9ca:	3630      	adds	r6, #48	; 0x30
 800b9cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b9d0:	ec53 2b19 	vmov	r2, r3, d9
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	4689      	mov	r9, r1
 800b9d8:	f7f5 f880 	bl	8000adc <__aeabi_dcmplt>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d164      	bne.n	800baaa <_dtoa_r+0x62a>
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	4937      	ldr	r1, [pc, #220]	; (800bac4 <_dtoa_r+0x644>)
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f7f4 fc4e 	bl	8000288 <__aeabi_dsub>
 800b9ec:	ec53 2b19 	vmov	r2, r3, d9
 800b9f0:	f7f5 f874 	bl	8000adc <__aeabi_dcmplt>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f040 80b6 	bne.w	800bb66 <_dtoa_r+0x6e6>
 800b9fa:	9b02      	ldr	r3, [sp, #8]
 800b9fc:	429d      	cmp	r5, r3
 800b9fe:	f43f af7c 	beq.w	800b8fa <_dtoa_r+0x47a>
 800ba02:	4b31      	ldr	r3, [pc, #196]	; (800bac8 <_dtoa_r+0x648>)
 800ba04:	ec51 0b19 	vmov	r0, r1, d9
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f7f4 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ba0e:	4b2e      	ldr	r3, [pc, #184]	; (800bac8 <_dtoa_r+0x648>)
 800ba10:	ec41 0b19 	vmov	d9, r0, r1
 800ba14:	2200      	movs	r2, #0
 800ba16:	4640      	mov	r0, r8
 800ba18:	4649      	mov	r1, r9
 800ba1a:	f7f4 fded 	bl	80005f8 <__aeabi_dmul>
 800ba1e:	4680      	mov	r8, r0
 800ba20:	4689      	mov	r9, r1
 800ba22:	e7c5      	b.n	800b9b0 <_dtoa_r+0x530>
 800ba24:	ec51 0b17 	vmov	r0, r1, d7
 800ba28:	f7f4 fde6 	bl	80005f8 <__aeabi_dmul>
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	9d00      	ldr	r5, [sp, #0]
 800ba30:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba32:	ec41 0b19 	vmov	d9, r0, r1
 800ba36:	4649      	mov	r1, r9
 800ba38:	4640      	mov	r0, r8
 800ba3a:	f7f5 f88d 	bl	8000b58 <__aeabi_d2iz>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	f7f4 fd70 	bl	8000524 <__aeabi_i2d>
 800ba44:	3630      	adds	r6, #48	; 0x30
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	f7f4 fc1b 	bl	8000288 <__aeabi_dsub>
 800ba52:	f805 6b01 	strb.w	r6, [r5], #1
 800ba56:	9b02      	ldr	r3, [sp, #8]
 800ba58:	429d      	cmp	r5, r3
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	4689      	mov	r9, r1
 800ba5e:	f04f 0200 	mov.w	r2, #0
 800ba62:	d124      	bne.n	800baae <_dtoa_r+0x62e>
 800ba64:	4b1b      	ldr	r3, [pc, #108]	; (800bad4 <_dtoa_r+0x654>)
 800ba66:	ec51 0b19 	vmov	r0, r1, d9
 800ba6a:	f7f4 fc0f 	bl	800028c <__adddf3>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f7f5 f84f 	bl	8000b18 <__aeabi_dcmpgt>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d173      	bne.n	800bb66 <_dtoa_r+0x6e6>
 800ba7e:	ec53 2b19 	vmov	r2, r3, d9
 800ba82:	4914      	ldr	r1, [pc, #80]	; (800bad4 <_dtoa_r+0x654>)
 800ba84:	2000      	movs	r0, #0
 800ba86:	f7f4 fbff 	bl	8000288 <__aeabi_dsub>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4640      	mov	r0, r8
 800ba90:	4649      	mov	r1, r9
 800ba92:	f7f5 f823 	bl	8000adc <__aeabi_dcmplt>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f af2f 	beq.w	800b8fa <_dtoa_r+0x47a>
 800ba9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba9e:	1e6b      	subs	r3, r5, #1
 800baa0:	930f      	str	r3, [sp, #60]	; 0x3c
 800baa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800baa6:	2b30      	cmp	r3, #48	; 0x30
 800baa8:	d0f8      	beq.n	800ba9c <_dtoa_r+0x61c>
 800baaa:	46bb      	mov	fp, r7
 800baac:	e04a      	b.n	800bb44 <_dtoa_r+0x6c4>
 800baae:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <_dtoa_r+0x648>)
 800bab0:	f7f4 fda2 	bl	80005f8 <__aeabi_dmul>
 800bab4:	4680      	mov	r8, r0
 800bab6:	4689      	mov	r9, r1
 800bab8:	e7bd      	b.n	800ba36 <_dtoa_r+0x5b6>
 800baba:	bf00      	nop
 800babc:	0800eef8 	.word	0x0800eef8
 800bac0:	0800eed0 	.word	0x0800eed0
 800bac4:	3ff00000 	.word	0x3ff00000
 800bac8:	40240000 	.word	0x40240000
 800bacc:	401c0000 	.word	0x401c0000
 800bad0:	40140000 	.word	0x40140000
 800bad4:	3fe00000 	.word	0x3fe00000
 800bad8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800badc:	9d00      	ldr	r5, [sp, #0]
 800bade:	4642      	mov	r2, r8
 800bae0:	464b      	mov	r3, r9
 800bae2:	4630      	mov	r0, r6
 800bae4:	4639      	mov	r1, r7
 800bae6:	f7f4 feb1 	bl	800084c <__aeabi_ddiv>
 800baea:	f7f5 f835 	bl	8000b58 <__aeabi_d2iz>
 800baee:	9001      	str	r0, [sp, #4]
 800baf0:	f7f4 fd18 	bl	8000524 <__aeabi_i2d>
 800baf4:	4642      	mov	r2, r8
 800baf6:	464b      	mov	r3, r9
 800baf8:	f7f4 fd7e 	bl	80005f8 <__aeabi_dmul>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4630      	mov	r0, r6
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f4 fbc0 	bl	8000288 <__aeabi_dsub>
 800bb08:	9e01      	ldr	r6, [sp, #4]
 800bb0a:	9f04      	ldr	r7, [sp, #16]
 800bb0c:	3630      	adds	r6, #48	; 0x30
 800bb0e:	f805 6b01 	strb.w	r6, [r5], #1
 800bb12:	9e00      	ldr	r6, [sp, #0]
 800bb14:	1bae      	subs	r6, r5, r6
 800bb16:	42b7      	cmp	r7, r6
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	d134      	bne.n	800bb88 <_dtoa_r+0x708>
 800bb1e:	f7f4 fbb5 	bl	800028c <__adddf3>
 800bb22:	4642      	mov	r2, r8
 800bb24:	464b      	mov	r3, r9
 800bb26:	4606      	mov	r6, r0
 800bb28:	460f      	mov	r7, r1
 800bb2a:	f7f4 fff5 	bl	8000b18 <__aeabi_dcmpgt>
 800bb2e:	b9c8      	cbnz	r0, 800bb64 <_dtoa_r+0x6e4>
 800bb30:	4642      	mov	r2, r8
 800bb32:	464b      	mov	r3, r9
 800bb34:	4630      	mov	r0, r6
 800bb36:	4639      	mov	r1, r7
 800bb38:	f7f4 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb3c:	b110      	cbz	r0, 800bb44 <_dtoa_r+0x6c4>
 800bb3e:	9b01      	ldr	r3, [sp, #4]
 800bb40:	07db      	lsls	r3, r3, #31
 800bb42:	d40f      	bmi.n	800bb64 <_dtoa_r+0x6e4>
 800bb44:	4651      	mov	r1, sl
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 ff36 	bl	800c9b8 <_Bfree>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb50:	702b      	strb	r3, [r5, #0]
 800bb52:	f10b 0301 	add.w	r3, fp, #1
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f43f ace2 	beq.w	800b524 <_dtoa_r+0xa4>
 800bb60:	601d      	str	r5, [r3, #0]
 800bb62:	e4df      	b.n	800b524 <_dtoa_r+0xa4>
 800bb64:	465f      	mov	r7, fp
 800bb66:	462b      	mov	r3, r5
 800bb68:	461d      	mov	r5, r3
 800bb6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb6e:	2a39      	cmp	r2, #57	; 0x39
 800bb70:	d106      	bne.n	800bb80 <_dtoa_r+0x700>
 800bb72:	9a00      	ldr	r2, [sp, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d1f7      	bne.n	800bb68 <_dtoa_r+0x6e8>
 800bb78:	9900      	ldr	r1, [sp, #0]
 800bb7a:	2230      	movs	r2, #48	; 0x30
 800bb7c:	3701      	adds	r7, #1
 800bb7e:	700a      	strb	r2, [r1, #0]
 800bb80:	781a      	ldrb	r2, [r3, #0]
 800bb82:	3201      	adds	r2, #1
 800bb84:	701a      	strb	r2, [r3, #0]
 800bb86:	e790      	b.n	800baaa <_dtoa_r+0x62a>
 800bb88:	4ba3      	ldr	r3, [pc, #652]	; (800be18 <_dtoa_r+0x998>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f7f4 fd34 	bl	80005f8 <__aeabi_dmul>
 800bb90:	2200      	movs	r2, #0
 800bb92:	2300      	movs	r3, #0
 800bb94:	4606      	mov	r6, r0
 800bb96:	460f      	mov	r7, r1
 800bb98:	f7f4 ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d09e      	beq.n	800bade <_dtoa_r+0x65e>
 800bba0:	e7d0      	b.n	800bb44 <_dtoa_r+0x6c4>
 800bba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba4:	2a00      	cmp	r2, #0
 800bba6:	f000 80ca 	beq.w	800bd3e <_dtoa_r+0x8be>
 800bbaa:	9a07      	ldr	r2, [sp, #28]
 800bbac:	2a01      	cmp	r2, #1
 800bbae:	f300 80ad 	bgt.w	800bd0c <_dtoa_r+0x88c>
 800bbb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbb4:	2a00      	cmp	r2, #0
 800bbb6:	f000 80a5 	beq.w	800bd04 <_dtoa_r+0x884>
 800bbba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbbe:	9e08      	ldr	r6, [sp, #32]
 800bbc0:	9d05      	ldr	r5, [sp, #20]
 800bbc2:	9a05      	ldr	r2, [sp, #20]
 800bbc4:	441a      	add	r2, r3
 800bbc6:	9205      	str	r2, [sp, #20]
 800bbc8:	9a06      	ldr	r2, [sp, #24]
 800bbca:	2101      	movs	r1, #1
 800bbcc:	441a      	add	r2, r3
 800bbce:	4620      	mov	r0, r4
 800bbd0:	9206      	str	r2, [sp, #24]
 800bbd2:	f000 fff1 	bl	800cbb8 <__i2b>
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	b165      	cbz	r5, 800bbf4 <_dtoa_r+0x774>
 800bbda:	9b06      	ldr	r3, [sp, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	dd09      	ble.n	800bbf4 <_dtoa_r+0x774>
 800bbe0:	42ab      	cmp	r3, r5
 800bbe2:	9a05      	ldr	r2, [sp, #20]
 800bbe4:	bfa8      	it	ge
 800bbe6:	462b      	movge	r3, r5
 800bbe8:	1ad2      	subs	r2, r2, r3
 800bbea:	9205      	str	r2, [sp, #20]
 800bbec:	9a06      	ldr	r2, [sp, #24]
 800bbee:	1aed      	subs	r5, r5, r3
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	9306      	str	r3, [sp, #24]
 800bbf4:	9b08      	ldr	r3, [sp, #32]
 800bbf6:	b1f3      	cbz	r3, 800bc36 <_dtoa_r+0x7b6>
 800bbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 80a3 	beq.w	800bd46 <_dtoa_r+0x8c6>
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	dd10      	ble.n	800bc26 <_dtoa_r+0x7a6>
 800bc04:	4639      	mov	r1, r7
 800bc06:	4632      	mov	r2, r6
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f001 f895 	bl	800cd38 <__pow5mult>
 800bc0e:	4652      	mov	r2, sl
 800bc10:	4601      	mov	r1, r0
 800bc12:	4607      	mov	r7, r0
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 ffe5 	bl	800cbe4 <__multiply>
 800bc1a:	4651      	mov	r1, sl
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 feca 	bl	800c9b8 <_Bfree>
 800bc24:	46c2      	mov	sl, r8
 800bc26:	9b08      	ldr	r3, [sp, #32]
 800bc28:	1b9a      	subs	r2, r3, r6
 800bc2a:	d004      	beq.n	800bc36 <_dtoa_r+0x7b6>
 800bc2c:	4651      	mov	r1, sl
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f001 f882 	bl	800cd38 <__pow5mult>
 800bc34:	4682      	mov	sl, r0
 800bc36:	2101      	movs	r1, #1
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f000 ffbd 	bl	800cbb8 <__i2b>
 800bc3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	4606      	mov	r6, r0
 800bc44:	f340 8081 	ble.w	800bd4a <_dtoa_r+0x8ca>
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f001 f873 	bl	800cd38 <__pow5mult>
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	4606      	mov	r6, r0
 800bc58:	dd7a      	ble.n	800bd50 <_dtoa_r+0x8d0>
 800bc5a:	f04f 0800 	mov.w	r8, #0
 800bc5e:	6933      	ldr	r3, [r6, #16]
 800bc60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc64:	6918      	ldr	r0, [r3, #16]
 800bc66:	f000 ff59 	bl	800cb1c <__hi0bits>
 800bc6a:	f1c0 0020 	rsb	r0, r0, #32
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	4418      	add	r0, r3
 800bc72:	f010 001f 	ands.w	r0, r0, #31
 800bc76:	f000 8094 	beq.w	800bda2 <_dtoa_r+0x922>
 800bc7a:	f1c0 0320 	rsb	r3, r0, #32
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	f340 8085 	ble.w	800bd8e <_dtoa_r+0x90e>
 800bc84:	9b05      	ldr	r3, [sp, #20]
 800bc86:	f1c0 001c 	rsb	r0, r0, #28
 800bc8a:	4403      	add	r3, r0
 800bc8c:	9305      	str	r3, [sp, #20]
 800bc8e:	9b06      	ldr	r3, [sp, #24]
 800bc90:	4403      	add	r3, r0
 800bc92:	4405      	add	r5, r0
 800bc94:	9306      	str	r3, [sp, #24]
 800bc96:	9b05      	ldr	r3, [sp, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dd05      	ble.n	800bca8 <_dtoa_r+0x828>
 800bc9c:	4651      	mov	r1, sl
 800bc9e:	461a      	mov	r2, r3
 800bca0:	4620      	mov	r0, r4
 800bca2:	f001 f8a3 	bl	800cdec <__lshift>
 800bca6:	4682      	mov	sl, r0
 800bca8:	9b06      	ldr	r3, [sp, #24]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dd05      	ble.n	800bcba <_dtoa_r+0x83a>
 800bcae:	4631      	mov	r1, r6
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f001 f89a 	bl	800cdec <__lshift>
 800bcb8:	4606      	mov	r6, r0
 800bcba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d072      	beq.n	800bda6 <_dtoa_r+0x926>
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4650      	mov	r0, sl
 800bcc4:	f001 f8fe 	bl	800cec4 <__mcmp>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	da6c      	bge.n	800bda6 <_dtoa_r+0x926>
 800bccc:	2300      	movs	r3, #0
 800bcce:	4651      	mov	r1, sl
 800bcd0:	220a      	movs	r2, #10
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 fe92 	bl	800c9fc <__multadd>
 800bcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcde:	4682      	mov	sl, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 81b0 	beq.w	800c046 <_dtoa_r+0xbc6>
 800bce6:	2300      	movs	r3, #0
 800bce8:	4639      	mov	r1, r7
 800bcea:	220a      	movs	r2, #10
 800bcec:	4620      	mov	r0, r4
 800bcee:	f000 fe85 	bl	800c9fc <__multadd>
 800bcf2:	9b01      	ldr	r3, [sp, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	f300 8096 	bgt.w	800be28 <_dtoa_r+0x9a8>
 800bcfc:	9b07      	ldr	r3, [sp, #28]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	dc59      	bgt.n	800bdb6 <_dtoa_r+0x936>
 800bd02:	e091      	b.n	800be28 <_dtoa_r+0x9a8>
 800bd04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd0a:	e758      	b.n	800bbbe <_dtoa_r+0x73e>
 800bd0c:	9b04      	ldr	r3, [sp, #16]
 800bd0e:	1e5e      	subs	r6, r3, #1
 800bd10:	9b08      	ldr	r3, [sp, #32]
 800bd12:	42b3      	cmp	r3, r6
 800bd14:	bfbf      	itttt	lt
 800bd16:	9b08      	ldrlt	r3, [sp, #32]
 800bd18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bd1a:	9608      	strlt	r6, [sp, #32]
 800bd1c:	1af3      	sublt	r3, r6, r3
 800bd1e:	bfb4      	ite	lt
 800bd20:	18d2      	addlt	r2, r2, r3
 800bd22:	1b9e      	subge	r6, r3, r6
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	bfbc      	itt	lt
 800bd28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bd2a:	2600      	movlt	r6, #0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	bfb7      	itett	lt
 800bd30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bd34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bd38:	1a9d      	sublt	r5, r3, r2
 800bd3a:	2300      	movlt	r3, #0
 800bd3c:	e741      	b.n	800bbc2 <_dtoa_r+0x742>
 800bd3e:	9e08      	ldr	r6, [sp, #32]
 800bd40:	9d05      	ldr	r5, [sp, #20]
 800bd42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bd44:	e748      	b.n	800bbd8 <_dtoa_r+0x758>
 800bd46:	9a08      	ldr	r2, [sp, #32]
 800bd48:	e770      	b.n	800bc2c <_dtoa_r+0x7ac>
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	dc19      	bgt.n	800bd84 <_dtoa_r+0x904>
 800bd50:	9b02      	ldr	r3, [sp, #8]
 800bd52:	b9bb      	cbnz	r3, 800bd84 <_dtoa_r+0x904>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd5a:	b99b      	cbnz	r3, 800bd84 <_dtoa_r+0x904>
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd62:	0d1b      	lsrs	r3, r3, #20
 800bd64:	051b      	lsls	r3, r3, #20
 800bd66:	b183      	cbz	r3, 800bd8a <_dtoa_r+0x90a>
 800bd68:	9b05      	ldr	r3, [sp, #20]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	9b06      	ldr	r3, [sp, #24]
 800bd70:	3301      	adds	r3, #1
 800bd72:	9306      	str	r3, [sp, #24]
 800bd74:	f04f 0801 	mov.w	r8, #1
 800bd78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f47f af6f 	bne.w	800bc5e <_dtoa_r+0x7de>
 800bd80:	2001      	movs	r0, #1
 800bd82:	e774      	b.n	800bc6e <_dtoa_r+0x7ee>
 800bd84:	f04f 0800 	mov.w	r8, #0
 800bd88:	e7f6      	b.n	800bd78 <_dtoa_r+0x8f8>
 800bd8a:	4698      	mov	r8, r3
 800bd8c:	e7f4      	b.n	800bd78 <_dtoa_r+0x8f8>
 800bd8e:	d082      	beq.n	800bc96 <_dtoa_r+0x816>
 800bd90:	9a05      	ldr	r2, [sp, #20]
 800bd92:	331c      	adds	r3, #28
 800bd94:	441a      	add	r2, r3
 800bd96:	9205      	str	r2, [sp, #20]
 800bd98:	9a06      	ldr	r2, [sp, #24]
 800bd9a:	441a      	add	r2, r3
 800bd9c:	441d      	add	r5, r3
 800bd9e:	9206      	str	r2, [sp, #24]
 800bda0:	e779      	b.n	800bc96 <_dtoa_r+0x816>
 800bda2:	4603      	mov	r3, r0
 800bda4:	e7f4      	b.n	800bd90 <_dtoa_r+0x910>
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	dc37      	bgt.n	800be1c <_dtoa_r+0x99c>
 800bdac:	9b07      	ldr	r3, [sp, #28]
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	dd34      	ble.n	800be1c <_dtoa_r+0x99c>
 800bdb2:	9b04      	ldr	r3, [sp, #16]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	b963      	cbnz	r3, 800bdd4 <_dtoa_r+0x954>
 800bdba:	4631      	mov	r1, r6
 800bdbc:	2205      	movs	r2, #5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 fe1c 	bl	800c9fc <__multadd>
 800bdc4:	4601      	mov	r1, r0
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	4650      	mov	r0, sl
 800bdca:	f001 f87b 	bl	800cec4 <__mcmp>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f73f adbb 	bgt.w	800b94a <_dtoa_r+0x4ca>
 800bdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd6:	9d00      	ldr	r5, [sp, #0]
 800bdd8:	ea6f 0b03 	mvn.w	fp, r3
 800bddc:	f04f 0800 	mov.w	r8, #0
 800bde0:	4631      	mov	r1, r6
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 fde8 	bl	800c9b8 <_Bfree>
 800bde8:	2f00      	cmp	r7, #0
 800bdea:	f43f aeab 	beq.w	800bb44 <_dtoa_r+0x6c4>
 800bdee:	f1b8 0f00 	cmp.w	r8, #0
 800bdf2:	d005      	beq.n	800be00 <_dtoa_r+0x980>
 800bdf4:	45b8      	cmp	r8, r7
 800bdf6:	d003      	beq.n	800be00 <_dtoa_r+0x980>
 800bdf8:	4641      	mov	r1, r8
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 fddc 	bl	800c9b8 <_Bfree>
 800be00:	4639      	mov	r1, r7
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fdd8 	bl	800c9b8 <_Bfree>
 800be08:	e69c      	b.n	800bb44 <_dtoa_r+0x6c4>
 800be0a:	2600      	movs	r6, #0
 800be0c:	4637      	mov	r7, r6
 800be0e:	e7e1      	b.n	800bdd4 <_dtoa_r+0x954>
 800be10:	46bb      	mov	fp, r7
 800be12:	4637      	mov	r7, r6
 800be14:	e599      	b.n	800b94a <_dtoa_r+0x4ca>
 800be16:	bf00      	nop
 800be18:	40240000 	.word	0x40240000
 800be1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 80c8 	beq.w	800bfb4 <_dtoa_r+0xb34>
 800be24:	9b04      	ldr	r3, [sp, #16]
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	2d00      	cmp	r5, #0
 800be2a:	dd05      	ble.n	800be38 <_dtoa_r+0x9b8>
 800be2c:	4639      	mov	r1, r7
 800be2e:	462a      	mov	r2, r5
 800be30:	4620      	mov	r0, r4
 800be32:	f000 ffdb 	bl	800cdec <__lshift>
 800be36:	4607      	mov	r7, r0
 800be38:	f1b8 0f00 	cmp.w	r8, #0
 800be3c:	d05b      	beq.n	800bef6 <_dtoa_r+0xa76>
 800be3e:	6879      	ldr	r1, [r7, #4]
 800be40:	4620      	mov	r0, r4
 800be42:	f000 fd79 	bl	800c938 <_Balloc>
 800be46:	4605      	mov	r5, r0
 800be48:	b928      	cbnz	r0, 800be56 <_dtoa_r+0x9d6>
 800be4a:	4b83      	ldr	r3, [pc, #524]	; (800c058 <_dtoa_r+0xbd8>)
 800be4c:	4602      	mov	r2, r0
 800be4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800be52:	f7ff bb2e 	b.w	800b4b2 <_dtoa_r+0x32>
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	3202      	adds	r2, #2
 800be5a:	0092      	lsls	r2, r2, #2
 800be5c:	f107 010c 	add.w	r1, r7, #12
 800be60:	300c      	adds	r0, #12
 800be62:	f7ff fa49 	bl	800b2f8 <memcpy>
 800be66:	2201      	movs	r2, #1
 800be68:	4629      	mov	r1, r5
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 ffbe 	bl	800cdec <__lshift>
 800be70:	9b00      	ldr	r3, [sp, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	9304      	str	r3, [sp, #16]
 800be76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be7a:	4413      	add	r3, r2
 800be7c:	9308      	str	r3, [sp, #32]
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	f003 0301 	and.w	r3, r3, #1
 800be84:	46b8      	mov	r8, r7
 800be86:	9306      	str	r3, [sp, #24]
 800be88:	4607      	mov	r7, r0
 800be8a:	9b04      	ldr	r3, [sp, #16]
 800be8c:	4631      	mov	r1, r6
 800be8e:	3b01      	subs	r3, #1
 800be90:	4650      	mov	r0, sl
 800be92:	9301      	str	r3, [sp, #4]
 800be94:	f7ff fa6c 	bl	800b370 <quorem>
 800be98:	4641      	mov	r1, r8
 800be9a:	9002      	str	r0, [sp, #8]
 800be9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bea0:	4650      	mov	r0, sl
 800bea2:	f001 f80f 	bl	800cec4 <__mcmp>
 800bea6:	463a      	mov	r2, r7
 800bea8:	9005      	str	r0, [sp, #20]
 800beaa:	4631      	mov	r1, r6
 800beac:	4620      	mov	r0, r4
 800beae:	f001 f825 	bl	800cefc <__mdiff>
 800beb2:	68c2      	ldr	r2, [r0, #12]
 800beb4:	4605      	mov	r5, r0
 800beb6:	bb02      	cbnz	r2, 800befa <_dtoa_r+0xa7a>
 800beb8:	4601      	mov	r1, r0
 800beba:	4650      	mov	r0, sl
 800bebc:	f001 f802 	bl	800cec4 <__mcmp>
 800bec0:	4602      	mov	r2, r0
 800bec2:	4629      	mov	r1, r5
 800bec4:	4620      	mov	r0, r4
 800bec6:	9209      	str	r2, [sp, #36]	; 0x24
 800bec8:	f000 fd76 	bl	800c9b8 <_Bfree>
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed0:	9d04      	ldr	r5, [sp, #16]
 800bed2:	ea43 0102 	orr.w	r1, r3, r2
 800bed6:	9b06      	ldr	r3, [sp, #24]
 800bed8:	4319      	orrs	r1, r3
 800beda:	d110      	bne.n	800befe <_dtoa_r+0xa7e>
 800bedc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bee0:	d029      	beq.n	800bf36 <_dtoa_r+0xab6>
 800bee2:	9b05      	ldr	r3, [sp, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dd02      	ble.n	800beee <_dtoa_r+0xa6e>
 800bee8:	9b02      	ldr	r3, [sp, #8]
 800beea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	f883 9000 	strb.w	r9, [r3]
 800bef4:	e774      	b.n	800bde0 <_dtoa_r+0x960>
 800bef6:	4638      	mov	r0, r7
 800bef8:	e7ba      	b.n	800be70 <_dtoa_r+0x9f0>
 800befa:	2201      	movs	r2, #1
 800befc:	e7e1      	b.n	800bec2 <_dtoa_r+0xa42>
 800befe:	9b05      	ldr	r3, [sp, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	db04      	blt.n	800bf0e <_dtoa_r+0xa8e>
 800bf04:	9907      	ldr	r1, [sp, #28]
 800bf06:	430b      	orrs	r3, r1
 800bf08:	9906      	ldr	r1, [sp, #24]
 800bf0a:	430b      	orrs	r3, r1
 800bf0c:	d120      	bne.n	800bf50 <_dtoa_r+0xad0>
 800bf0e:	2a00      	cmp	r2, #0
 800bf10:	dded      	ble.n	800beee <_dtoa_r+0xa6e>
 800bf12:	4651      	mov	r1, sl
 800bf14:	2201      	movs	r2, #1
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 ff68 	bl	800cdec <__lshift>
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4682      	mov	sl, r0
 800bf20:	f000 ffd0 	bl	800cec4 <__mcmp>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	dc03      	bgt.n	800bf30 <_dtoa_r+0xab0>
 800bf28:	d1e1      	bne.n	800beee <_dtoa_r+0xa6e>
 800bf2a:	f019 0f01 	tst.w	r9, #1
 800bf2e:	d0de      	beq.n	800beee <_dtoa_r+0xa6e>
 800bf30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bf34:	d1d8      	bne.n	800bee8 <_dtoa_r+0xa68>
 800bf36:	9a01      	ldr	r2, [sp, #4]
 800bf38:	2339      	movs	r3, #57	; 0x39
 800bf3a:	7013      	strb	r3, [r2, #0]
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	461d      	mov	r5, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf46:	2a39      	cmp	r2, #57	; 0x39
 800bf48:	d06c      	beq.n	800c024 <_dtoa_r+0xba4>
 800bf4a:	3201      	adds	r2, #1
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	e747      	b.n	800bde0 <_dtoa_r+0x960>
 800bf50:	2a00      	cmp	r2, #0
 800bf52:	dd07      	ble.n	800bf64 <_dtoa_r+0xae4>
 800bf54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bf58:	d0ed      	beq.n	800bf36 <_dtoa_r+0xab6>
 800bf5a:	9a01      	ldr	r2, [sp, #4]
 800bf5c:	f109 0301 	add.w	r3, r9, #1
 800bf60:	7013      	strb	r3, [r2, #0]
 800bf62:	e73d      	b.n	800bde0 <_dtoa_r+0x960>
 800bf64:	9b04      	ldr	r3, [sp, #16]
 800bf66:	9a08      	ldr	r2, [sp, #32]
 800bf68:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d043      	beq.n	800bff8 <_dtoa_r+0xb78>
 800bf70:	4651      	mov	r1, sl
 800bf72:	2300      	movs	r3, #0
 800bf74:	220a      	movs	r2, #10
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 fd40 	bl	800c9fc <__multadd>
 800bf7c:	45b8      	cmp	r8, r7
 800bf7e:	4682      	mov	sl, r0
 800bf80:	f04f 0300 	mov.w	r3, #0
 800bf84:	f04f 020a 	mov.w	r2, #10
 800bf88:	4641      	mov	r1, r8
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	d107      	bne.n	800bf9e <_dtoa_r+0xb1e>
 800bf8e:	f000 fd35 	bl	800c9fc <__multadd>
 800bf92:	4680      	mov	r8, r0
 800bf94:	4607      	mov	r7, r0
 800bf96:	9b04      	ldr	r3, [sp, #16]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	9304      	str	r3, [sp, #16]
 800bf9c:	e775      	b.n	800be8a <_dtoa_r+0xa0a>
 800bf9e:	f000 fd2d 	bl	800c9fc <__multadd>
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 fd26 	bl	800c9fc <__multadd>
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	e7f0      	b.n	800bf96 <_dtoa_r+0xb16>
 800bfb4:	9b04      	ldr	r3, [sp, #16]
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	9d00      	ldr	r5, [sp, #0]
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4650      	mov	r0, sl
 800bfbe:	f7ff f9d7 	bl	800b370 <quorem>
 800bfc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bfc6:	9b00      	ldr	r3, [sp, #0]
 800bfc8:	f805 9b01 	strb.w	r9, [r5], #1
 800bfcc:	1aea      	subs	r2, r5, r3
 800bfce:	9b01      	ldr	r3, [sp, #4]
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	dd07      	ble.n	800bfe4 <_dtoa_r+0xb64>
 800bfd4:	4651      	mov	r1, sl
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	220a      	movs	r2, #10
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 fd0e 	bl	800c9fc <__multadd>
 800bfe0:	4682      	mov	sl, r0
 800bfe2:	e7ea      	b.n	800bfba <_dtoa_r+0xb3a>
 800bfe4:	9b01      	ldr	r3, [sp, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	bfc8      	it	gt
 800bfea:	461d      	movgt	r5, r3
 800bfec:	9b00      	ldr	r3, [sp, #0]
 800bfee:	bfd8      	it	le
 800bff0:	2501      	movle	r5, #1
 800bff2:	441d      	add	r5, r3
 800bff4:	f04f 0800 	mov.w	r8, #0
 800bff8:	4651      	mov	r1, sl
 800bffa:	2201      	movs	r2, #1
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 fef5 	bl	800cdec <__lshift>
 800c002:	4631      	mov	r1, r6
 800c004:	4682      	mov	sl, r0
 800c006:	f000 ff5d 	bl	800cec4 <__mcmp>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	dc96      	bgt.n	800bf3c <_dtoa_r+0xabc>
 800c00e:	d102      	bne.n	800c016 <_dtoa_r+0xb96>
 800c010:	f019 0f01 	tst.w	r9, #1
 800c014:	d192      	bne.n	800bf3c <_dtoa_r+0xabc>
 800c016:	462b      	mov	r3, r5
 800c018:	461d      	mov	r5, r3
 800c01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c01e:	2a30      	cmp	r2, #48	; 0x30
 800c020:	d0fa      	beq.n	800c018 <_dtoa_r+0xb98>
 800c022:	e6dd      	b.n	800bde0 <_dtoa_r+0x960>
 800c024:	9a00      	ldr	r2, [sp, #0]
 800c026:	429a      	cmp	r2, r3
 800c028:	d189      	bne.n	800bf3e <_dtoa_r+0xabe>
 800c02a:	f10b 0b01 	add.w	fp, fp, #1
 800c02e:	2331      	movs	r3, #49	; 0x31
 800c030:	e796      	b.n	800bf60 <_dtoa_r+0xae0>
 800c032:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <_dtoa_r+0xbdc>)
 800c034:	f7ff ba99 	b.w	800b56a <_dtoa_r+0xea>
 800c038:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f47f aa6d 	bne.w	800b51a <_dtoa_r+0x9a>
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <_dtoa_r+0xbe0>)
 800c042:	f7ff ba92 	b.w	800b56a <_dtoa_r+0xea>
 800c046:	9b01      	ldr	r3, [sp, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dcb5      	bgt.n	800bfb8 <_dtoa_r+0xb38>
 800c04c:	9b07      	ldr	r3, [sp, #28]
 800c04e:	2b02      	cmp	r3, #2
 800c050:	f73f aeb1 	bgt.w	800bdb6 <_dtoa_r+0x936>
 800c054:	e7b0      	b.n	800bfb8 <_dtoa_r+0xb38>
 800c056:	bf00      	nop
 800c058:	0800ee06 	.word	0x0800ee06
 800c05c:	0800ed1d 	.word	0x0800ed1d
 800c060:	0800ed8a 	.word	0x0800ed8a

0800c064 <_free_r>:
 800c064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c066:	2900      	cmp	r1, #0
 800c068:	d044      	beq.n	800c0f4 <_free_r+0x90>
 800c06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06e:	9001      	str	r0, [sp, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f1a1 0404 	sub.w	r4, r1, #4
 800c076:	bfb8      	it	lt
 800c078:	18e4      	addlt	r4, r4, r3
 800c07a:	f000 fc51 	bl	800c920 <__malloc_lock>
 800c07e:	4a1e      	ldr	r2, [pc, #120]	; (800c0f8 <_free_r+0x94>)
 800c080:	9801      	ldr	r0, [sp, #4]
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	b933      	cbnz	r3, 800c094 <_free_r+0x30>
 800c086:	6063      	str	r3, [r4, #4]
 800c088:	6014      	str	r4, [r2, #0]
 800c08a:	b003      	add	sp, #12
 800c08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c090:	f000 bc4c 	b.w	800c92c <__malloc_unlock>
 800c094:	42a3      	cmp	r3, r4
 800c096:	d908      	bls.n	800c0aa <_free_r+0x46>
 800c098:	6825      	ldr	r5, [r4, #0]
 800c09a:	1961      	adds	r1, r4, r5
 800c09c:	428b      	cmp	r3, r1
 800c09e:	bf01      	itttt	eq
 800c0a0:	6819      	ldreq	r1, [r3, #0]
 800c0a2:	685b      	ldreq	r3, [r3, #4]
 800c0a4:	1949      	addeq	r1, r1, r5
 800c0a6:	6021      	streq	r1, [r4, #0]
 800c0a8:	e7ed      	b.n	800c086 <_free_r+0x22>
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	b10b      	cbz	r3, 800c0b4 <_free_r+0x50>
 800c0b0:	42a3      	cmp	r3, r4
 800c0b2:	d9fa      	bls.n	800c0aa <_free_r+0x46>
 800c0b4:	6811      	ldr	r1, [r2, #0]
 800c0b6:	1855      	adds	r5, r2, r1
 800c0b8:	42a5      	cmp	r5, r4
 800c0ba:	d10b      	bne.n	800c0d4 <_free_r+0x70>
 800c0bc:	6824      	ldr	r4, [r4, #0]
 800c0be:	4421      	add	r1, r4
 800c0c0:	1854      	adds	r4, r2, r1
 800c0c2:	42a3      	cmp	r3, r4
 800c0c4:	6011      	str	r1, [r2, #0]
 800c0c6:	d1e0      	bne.n	800c08a <_free_r+0x26>
 800c0c8:	681c      	ldr	r4, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	6053      	str	r3, [r2, #4]
 800c0ce:	440c      	add	r4, r1
 800c0d0:	6014      	str	r4, [r2, #0]
 800c0d2:	e7da      	b.n	800c08a <_free_r+0x26>
 800c0d4:	d902      	bls.n	800c0dc <_free_r+0x78>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	e7d6      	b.n	800c08a <_free_r+0x26>
 800c0dc:	6825      	ldr	r5, [r4, #0]
 800c0de:	1961      	adds	r1, r4, r5
 800c0e0:	428b      	cmp	r3, r1
 800c0e2:	bf04      	itt	eq
 800c0e4:	6819      	ldreq	r1, [r3, #0]
 800c0e6:	685b      	ldreq	r3, [r3, #4]
 800c0e8:	6063      	str	r3, [r4, #4]
 800c0ea:	bf04      	itt	eq
 800c0ec:	1949      	addeq	r1, r1, r5
 800c0ee:	6021      	streq	r1, [r4, #0]
 800c0f0:	6054      	str	r4, [r2, #4]
 800c0f2:	e7ca      	b.n	800c08a <_free_r+0x26>
 800c0f4:	b003      	add	sp, #12
 800c0f6:	bd30      	pop	{r4, r5, pc}
 800c0f8:	20000968 	.word	0x20000968

0800c0fc <rshift>:
 800c0fc:	6903      	ldr	r3, [r0, #16]
 800c0fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c106:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c10a:	f100 0414 	add.w	r4, r0, #20
 800c10e:	dd45      	ble.n	800c19c <rshift+0xa0>
 800c110:	f011 011f 	ands.w	r1, r1, #31
 800c114:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c118:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c11c:	d10c      	bne.n	800c138 <rshift+0x3c>
 800c11e:	f100 0710 	add.w	r7, r0, #16
 800c122:	4629      	mov	r1, r5
 800c124:	42b1      	cmp	r1, r6
 800c126:	d334      	bcc.n	800c192 <rshift+0x96>
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	1eea      	subs	r2, r5, #3
 800c12e:	4296      	cmp	r6, r2
 800c130:	bf38      	it	cc
 800c132:	2300      	movcc	r3, #0
 800c134:	4423      	add	r3, r4
 800c136:	e015      	b.n	800c164 <rshift+0x68>
 800c138:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c13c:	f1c1 0820 	rsb	r8, r1, #32
 800c140:	40cf      	lsrs	r7, r1
 800c142:	f105 0e04 	add.w	lr, r5, #4
 800c146:	46a1      	mov	r9, r4
 800c148:	4576      	cmp	r6, lr
 800c14a:	46f4      	mov	ip, lr
 800c14c:	d815      	bhi.n	800c17a <rshift+0x7e>
 800c14e:	1a9a      	subs	r2, r3, r2
 800c150:	0092      	lsls	r2, r2, #2
 800c152:	3a04      	subs	r2, #4
 800c154:	3501      	adds	r5, #1
 800c156:	42ae      	cmp	r6, r5
 800c158:	bf38      	it	cc
 800c15a:	2200      	movcc	r2, #0
 800c15c:	18a3      	adds	r3, r4, r2
 800c15e:	50a7      	str	r7, [r4, r2]
 800c160:	b107      	cbz	r7, 800c164 <rshift+0x68>
 800c162:	3304      	adds	r3, #4
 800c164:	1b1a      	subs	r2, r3, r4
 800c166:	42a3      	cmp	r3, r4
 800c168:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c16c:	bf08      	it	eq
 800c16e:	2300      	moveq	r3, #0
 800c170:	6102      	str	r2, [r0, #16]
 800c172:	bf08      	it	eq
 800c174:	6143      	streq	r3, [r0, #20]
 800c176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c17a:	f8dc c000 	ldr.w	ip, [ip]
 800c17e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c182:	ea4c 0707 	orr.w	r7, ip, r7
 800c186:	f849 7b04 	str.w	r7, [r9], #4
 800c18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c18e:	40cf      	lsrs	r7, r1
 800c190:	e7da      	b.n	800c148 <rshift+0x4c>
 800c192:	f851 cb04 	ldr.w	ip, [r1], #4
 800c196:	f847 cf04 	str.w	ip, [r7, #4]!
 800c19a:	e7c3      	b.n	800c124 <rshift+0x28>
 800c19c:	4623      	mov	r3, r4
 800c19e:	e7e1      	b.n	800c164 <rshift+0x68>

0800c1a0 <__hexdig_fun>:
 800c1a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c1a4:	2b09      	cmp	r3, #9
 800c1a6:	d802      	bhi.n	800c1ae <__hexdig_fun+0xe>
 800c1a8:	3820      	subs	r0, #32
 800c1aa:	b2c0      	uxtb	r0, r0
 800c1ac:	4770      	bx	lr
 800c1ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d801      	bhi.n	800c1ba <__hexdig_fun+0x1a>
 800c1b6:	3847      	subs	r0, #71	; 0x47
 800c1b8:	e7f7      	b.n	800c1aa <__hexdig_fun+0xa>
 800c1ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c1be:	2b05      	cmp	r3, #5
 800c1c0:	d801      	bhi.n	800c1c6 <__hexdig_fun+0x26>
 800c1c2:	3827      	subs	r0, #39	; 0x27
 800c1c4:	e7f1      	b.n	800c1aa <__hexdig_fun+0xa>
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	4770      	bx	lr
	...

0800c1cc <__gethex>:
 800c1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d0:	4617      	mov	r7, r2
 800c1d2:	680a      	ldr	r2, [r1, #0]
 800c1d4:	b085      	sub	sp, #20
 800c1d6:	f102 0b02 	add.w	fp, r2, #2
 800c1da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c1de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c1e2:	4681      	mov	r9, r0
 800c1e4:	468a      	mov	sl, r1
 800c1e6:	9302      	str	r3, [sp, #8]
 800c1e8:	32fe      	adds	r2, #254	; 0xfe
 800c1ea:	eb02 030b 	add.w	r3, r2, fp
 800c1ee:	46d8      	mov	r8, fp
 800c1f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	2830      	cmp	r0, #48	; 0x30
 800c1f8:	d0f7      	beq.n	800c1ea <__gethex+0x1e>
 800c1fa:	f7ff ffd1 	bl	800c1a0 <__hexdig_fun>
 800c1fe:	4604      	mov	r4, r0
 800c200:	2800      	cmp	r0, #0
 800c202:	d138      	bne.n	800c276 <__gethex+0xaa>
 800c204:	49a7      	ldr	r1, [pc, #668]	; (800c4a4 <__gethex+0x2d8>)
 800c206:	2201      	movs	r2, #1
 800c208:	4640      	mov	r0, r8
 800c20a:	f7fe ffda 	bl	800b1c2 <strncmp>
 800c20e:	4606      	mov	r6, r0
 800c210:	2800      	cmp	r0, #0
 800c212:	d169      	bne.n	800c2e8 <__gethex+0x11c>
 800c214:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c218:	465d      	mov	r5, fp
 800c21a:	f7ff ffc1 	bl	800c1a0 <__hexdig_fun>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d064      	beq.n	800c2ec <__gethex+0x120>
 800c222:	465a      	mov	r2, fp
 800c224:	7810      	ldrb	r0, [r2, #0]
 800c226:	2830      	cmp	r0, #48	; 0x30
 800c228:	4690      	mov	r8, r2
 800c22a:	f102 0201 	add.w	r2, r2, #1
 800c22e:	d0f9      	beq.n	800c224 <__gethex+0x58>
 800c230:	f7ff ffb6 	bl	800c1a0 <__hexdig_fun>
 800c234:	2301      	movs	r3, #1
 800c236:	fab0 f480 	clz	r4, r0
 800c23a:	0964      	lsrs	r4, r4, #5
 800c23c:	465e      	mov	r6, fp
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	4642      	mov	r2, r8
 800c242:	4615      	mov	r5, r2
 800c244:	3201      	adds	r2, #1
 800c246:	7828      	ldrb	r0, [r5, #0]
 800c248:	f7ff ffaa 	bl	800c1a0 <__hexdig_fun>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d1f8      	bne.n	800c242 <__gethex+0x76>
 800c250:	4994      	ldr	r1, [pc, #592]	; (800c4a4 <__gethex+0x2d8>)
 800c252:	2201      	movs	r2, #1
 800c254:	4628      	mov	r0, r5
 800c256:	f7fe ffb4 	bl	800b1c2 <strncmp>
 800c25a:	b978      	cbnz	r0, 800c27c <__gethex+0xb0>
 800c25c:	b946      	cbnz	r6, 800c270 <__gethex+0xa4>
 800c25e:	1c6e      	adds	r6, r5, #1
 800c260:	4632      	mov	r2, r6
 800c262:	4615      	mov	r5, r2
 800c264:	3201      	adds	r2, #1
 800c266:	7828      	ldrb	r0, [r5, #0]
 800c268:	f7ff ff9a 	bl	800c1a0 <__hexdig_fun>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d1f8      	bne.n	800c262 <__gethex+0x96>
 800c270:	1b73      	subs	r3, r6, r5
 800c272:	009e      	lsls	r6, r3, #2
 800c274:	e004      	b.n	800c280 <__gethex+0xb4>
 800c276:	2400      	movs	r4, #0
 800c278:	4626      	mov	r6, r4
 800c27a:	e7e1      	b.n	800c240 <__gethex+0x74>
 800c27c:	2e00      	cmp	r6, #0
 800c27e:	d1f7      	bne.n	800c270 <__gethex+0xa4>
 800c280:	782b      	ldrb	r3, [r5, #0]
 800c282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c286:	2b50      	cmp	r3, #80	; 0x50
 800c288:	d13d      	bne.n	800c306 <__gethex+0x13a>
 800c28a:	786b      	ldrb	r3, [r5, #1]
 800c28c:	2b2b      	cmp	r3, #43	; 0x2b
 800c28e:	d02f      	beq.n	800c2f0 <__gethex+0x124>
 800c290:	2b2d      	cmp	r3, #45	; 0x2d
 800c292:	d031      	beq.n	800c2f8 <__gethex+0x12c>
 800c294:	1c69      	adds	r1, r5, #1
 800c296:	f04f 0b00 	mov.w	fp, #0
 800c29a:	7808      	ldrb	r0, [r1, #0]
 800c29c:	f7ff ff80 	bl	800c1a0 <__hexdig_fun>
 800c2a0:	1e42      	subs	r2, r0, #1
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	2a18      	cmp	r2, #24
 800c2a6:	d82e      	bhi.n	800c306 <__gethex+0x13a>
 800c2a8:	f1a0 0210 	sub.w	r2, r0, #16
 800c2ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c2b0:	f7ff ff76 	bl	800c1a0 <__hexdig_fun>
 800c2b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2b8:	fa5f fc8c 	uxtb.w	ip, ip
 800c2bc:	f1bc 0f18 	cmp.w	ip, #24
 800c2c0:	d91d      	bls.n	800c2fe <__gethex+0x132>
 800c2c2:	f1bb 0f00 	cmp.w	fp, #0
 800c2c6:	d000      	beq.n	800c2ca <__gethex+0xfe>
 800c2c8:	4252      	negs	r2, r2
 800c2ca:	4416      	add	r6, r2
 800c2cc:	f8ca 1000 	str.w	r1, [sl]
 800c2d0:	b1dc      	cbz	r4, 800c30a <__gethex+0x13e>
 800c2d2:	9b01      	ldr	r3, [sp, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bf14      	ite	ne
 800c2d8:	f04f 0800 	movne.w	r8, #0
 800c2dc:	f04f 0806 	moveq.w	r8, #6
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	b005      	add	sp, #20
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	4645      	mov	r5, r8
 800c2ea:	4626      	mov	r6, r4
 800c2ec:	2401      	movs	r4, #1
 800c2ee:	e7c7      	b.n	800c280 <__gethex+0xb4>
 800c2f0:	f04f 0b00 	mov.w	fp, #0
 800c2f4:	1ca9      	adds	r1, r5, #2
 800c2f6:	e7d0      	b.n	800c29a <__gethex+0xce>
 800c2f8:	f04f 0b01 	mov.w	fp, #1
 800c2fc:	e7fa      	b.n	800c2f4 <__gethex+0x128>
 800c2fe:	230a      	movs	r3, #10
 800c300:	fb03 0002 	mla	r0, r3, r2, r0
 800c304:	e7d0      	b.n	800c2a8 <__gethex+0xdc>
 800c306:	4629      	mov	r1, r5
 800c308:	e7e0      	b.n	800c2cc <__gethex+0x100>
 800c30a:	eba5 0308 	sub.w	r3, r5, r8
 800c30e:	3b01      	subs	r3, #1
 800c310:	4621      	mov	r1, r4
 800c312:	2b07      	cmp	r3, #7
 800c314:	dc0a      	bgt.n	800c32c <__gethex+0x160>
 800c316:	4648      	mov	r0, r9
 800c318:	f000 fb0e 	bl	800c938 <_Balloc>
 800c31c:	4604      	mov	r4, r0
 800c31e:	b940      	cbnz	r0, 800c332 <__gethex+0x166>
 800c320:	4b61      	ldr	r3, [pc, #388]	; (800c4a8 <__gethex+0x2dc>)
 800c322:	4602      	mov	r2, r0
 800c324:	21e4      	movs	r1, #228	; 0xe4
 800c326:	4861      	ldr	r0, [pc, #388]	; (800c4ac <__gethex+0x2e0>)
 800c328:	f7ff f804 	bl	800b334 <__assert_func>
 800c32c:	3101      	adds	r1, #1
 800c32e:	105b      	asrs	r3, r3, #1
 800c330:	e7ef      	b.n	800c312 <__gethex+0x146>
 800c332:	f100 0a14 	add.w	sl, r0, #20
 800c336:	2300      	movs	r3, #0
 800c338:	495a      	ldr	r1, [pc, #360]	; (800c4a4 <__gethex+0x2d8>)
 800c33a:	f8cd a004 	str.w	sl, [sp, #4]
 800c33e:	469b      	mov	fp, r3
 800c340:	45a8      	cmp	r8, r5
 800c342:	d342      	bcc.n	800c3ca <__gethex+0x1fe>
 800c344:	9801      	ldr	r0, [sp, #4]
 800c346:	f840 bb04 	str.w	fp, [r0], #4
 800c34a:	eba0 000a 	sub.w	r0, r0, sl
 800c34e:	1080      	asrs	r0, r0, #2
 800c350:	6120      	str	r0, [r4, #16]
 800c352:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c356:	4658      	mov	r0, fp
 800c358:	f000 fbe0 	bl	800cb1c <__hi0bits>
 800c35c:	683d      	ldr	r5, [r7, #0]
 800c35e:	eba8 0000 	sub.w	r0, r8, r0
 800c362:	42a8      	cmp	r0, r5
 800c364:	dd59      	ble.n	800c41a <__gethex+0x24e>
 800c366:	eba0 0805 	sub.w	r8, r0, r5
 800c36a:	4641      	mov	r1, r8
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 ff6f 	bl	800d250 <__any_on>
 800c372:	4683      	mov	fp, r0
 800c374:	b1b8      	cbz	r0, 800c3a6 <__gethex+0x1da>
 800c376:	f108 33ff 	add.w	r3, r8, #4294967295
 800c37a:	1159      	asrs	r1, r3, #5
 800c37c:	f003 021f 	and.w	r2, r3, #31
 800c380:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c384:	f04f 0b01 	mov.w	fp, #1
 800c388:	fa0b f202 	lsl.w	r2, fp, r2
 800c38c:	420a      	tst	r2, r1
 800c38e:	d00a      	beq.n	800c3a6 <__gethex+0x1da>
 800c390:	455b      	cmp	r3, fp
 800c392:	dd06      	ble.n	800c3a2 <__gethex+0x1d6>
 800c394:	f1a8 0102 	sub.w	r1, r8, #2
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 ff59 	bl	800d250 <__any_on>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d138      	bne.n	800c414 <__gethex+0x248>
 800c3a2:	f04f 0b02 	mov.w	fp, #2
 800c3a6:	4641      	mov	r1, r8
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f7ff fea7 	bl	800c0fc <rshift>
 800c3ae:	4446      	add	r6, r8
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	42b3      	cmp	r3, r6
 800c3b4:	da41      	bge.n	800c43a <__gethex+0x26e>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4648      	mov	r0, r9
 800c3ba:	f000 fafd 	bl	800c9b8 <_Bfree>
 800c3be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c3c8:	e78a      	b.n	800c2e0 <__gethex+0x114>
 800c3ca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c3ce:	2a2e      	cmp	r2, #46	; 0x2e
 800c3d0:	d014      	beq.n	800c3fc <__gethex+0x230>
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	d106      	bne.n	800c3e4 <__gethex+0x218>
 800c3d6:	9b01      	ldr	r3, [sp, #4]
 800c3d8:	f843 bb04 	str.w	fp, [r3], #4
 800c3dc:	f04f 0b00 	mov.w	fp, #0
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	465b      	mov	r3, fp
 800c3e4:	7828      	ldrb	r0, [r5, #0]
 800c3e6:	9303      	str	r3, [sp, #12]
 800c3e8:	f7ff feda 	bl	800c1a0 <__hexdig_fun>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	f000 000f 	and.w	r0, r0, #15
 800c3f2:	4098      	lsls	r0, r3
 800c3f4:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	e7a1      	b.n	800c340 <__gethex+0x174>
 800c3fc:	45a8      	cmp	r8, r5
 800c3fe:	d8e8      	bhi.n	800c3d2 <__gethex+0x206>
 800c400:	2201      	movs	r2, #1
 800c402:	4628      	mov	r0, r5
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	f7fe fedc 	bl	800b1c2 <strncmp>
 800c40a:	4926      	ldr	r1, [pc, #152]	; (800c4a4 <__gethex+0x2d8>)
 800c40c:	9b03      	ldr	r3, [sp, #12]
 800c40e:	2800      	cmp	r0, #0
 800c410:	d1df      	bne.n	800c3d2 <__gethex+0x206>
 800c412:	e795      	b.n	800c340 <__gethex+0x174>
 800c414:	f04f 0b03 	mov.w	fp, #3
 800c418:	e7c5      	b.n	800c3a6 <__gethex+0x1da>
 800c41a:	da0b      	bge.n	800c434 <__gethex+0x268>
 800c41c:	eba5 0800 	sub.w	r8, r5, r0
 800c420:	4621      	mov	r1, r4
 800c422:	4642      	mov	r2, r8
 800c424:	4648      	mov	r0, r9
 800c426:	f000 fce1 	bl	800cdec <__lshift>
 800c42a:	eba6 0608 	sub.w	r6, r6, r8
 800c42e:	4604      	mov	r4, r0
 800c430:	f100 0a14 	add.w	sl, r0, #20
 800c434:	f04f 0b00 	mov.w	fp, #0
 800c438:	e7ba      	b.n	800c3b0 <__gethex+0x1e4>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	42b3      	cmp	r3, r6
 800c43e:	dd73      	ble.n	800c528 <__gethex+0x35c>
 800c440:	1b9e      	subs	r6, r3, r6
 800c442:	42b5      	cmp	r5, r6
 800c444:	dc34      	bgt.n	800c4b0 <__gethex+0x2e4>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d023      	beq.n	800c494 <__gethex+0x2c8>
 800c44c:	2b03      	cmp	r3, #3
 800c44e:	d025      	beq.n	800c49c <__gethex+0x2d0>
 800c450:	2b01      	cmp	r3, #1
 800c452:	d115      	bne.n	800c480 <__gethex+0x2b4>
 800c454:	42b5      	cmp	r5, r6
 800c456:	d113      	bne.n	800c480 <__gethex+0x2b4>
 800c458:	2d01      	cmp	r5, #1
 800c45a:	d10b      	bne.n	800c474 <__gethex+0x2a8>
 800c45c:	9a02      	ldr	r2, [sp, #8]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6013      	str	r3, [r2, #0]
 800c462:	2301      	movs	r3, #1
 800c464:	6123      	str	r3, [r4, #16]
 800c466:	f8ca 3000 	str.w	r3, [sl]
 800c46a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c46c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c470:	601c      	str	r4, [r3, #0]
 800c472:	e735      	b.n	800c2e0 <__gethex+0x114>
 800c474:	1e69      	subs	r1, r5, #1
 800c476:	4620      	mov	r0, r4
 800c478:	f000 feea 	bl	800d250 <__any_on>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d1ed      	bne.n	800c45c <__gethex+0x290>
 800c480:	4621      	mov	r1, r4
 800c482:	4648      	mov	r0, r9
 800c484:	f000 fa98 	bl	800c9b8 <_Bfree>
 800c488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c48a:	2300      	movs	r3, #0
 800c48c:	6013      	str	r3, [r2, #0]
 800c48e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c492:	e725      	b.n	800c2e0 <__gethex+0x114>
 800c494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1f2      	bne.n	800c480 <__gethex+0x2b4>
 800c49a:	e7df      	b.n	800c45c <__gethex+0x290>
 800c49c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1dc      	bne.n	800c45c <__gethex+0x290>
 800c4a2:	e7ed      	b.n	800c480 <__gethex+0x2b4>
 800c4a4:	0800ec90 	.word	0x0800ec90
 800c4a8:	0800ee06 	.word	0x0800ee06
 800c4ac:	0800ee17 	.word	0x0800ee17
 800c4b0:	f106 38ff 	add.w	r8, r6, #4294967295
 800c4b4:	f1bb 0f00 	cmp.w	fp, #0
 800c4b8:	d133      	bne.n	800c522 <__gethex+0x356>
 800c4ba:	f1b8 0f00 	cmp.w	r8, #0
 800c4be:	d004      	beq.n	800c4ca <__gethex+0x2fe>
 800c4c0:	4641      	mov	r1, r8
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 fec4 	bl	800d250 <__any_on>
 800c4c8:	4683      	mov	fp, r0
 800c4ca:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c4d4:	f008 081f 	and.w	r8, r8, #31
 800c4d8:	fa03 f308 	lsl.w	r3, r3, r8
 800c4dc:	4213      	tst	r3, r2
 800c4de:	4631      	mov	r1, r6
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	bf18      	it	ne
 800c4e4:	f04b 0b02 	orrne.w	fp, fp, #2
 800c4e8:	1bad      	subs	r5, r5, r6
 800c4ea:	f7ff fe07 	bl	800c0fc <rshift>
 800c4ee:	687e      	ldr	r6, [r7, #4]
 800c4f0:	f04f 0802 	mov.w	r8, #2
 800c4f4:	f1bb 0f00 	cmp.w	fp, #0
 800c4f8:	d04a      	beq.n	800c590 <__gethex+0x3c4>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d016      	beq.n	800c52e <__gethex+0x362>
 800c500:	2b03      	cmp	r3, #3
 800c502:	d018      	beq.n	800c536 <__gethex+0x36a>
 800c504:	2b01      	cmp	r3, #1
 800c506:	d109      	bne.n	800c51c <__gethex+0x350>
 800c508:	f01b 0f02 	tst.w	fp, #2
 800c50c:	d006      	beq.n	800c51c <__gethex+0x350>
 800c50e:	f8da 3000 	ldr.w	r3, [sl]
 800c512:	ea4b 0b03 	orr.w	fp, fp, r3
 800c516:	f01b 0f01 	tst.w	fp, #1
 800c51a:	d10f      	bne.n	800c53c <__gethex+0x370>
 800c51c:	f048 0810 	orr.w	r8, r8, #16
 800c520:	e036      	b.n	800c590 <__gethex+0x3c4>
 800c522:	f04f 0b01 	mov.w	fp, #1
 800c526:	e7d0      	b.n	800c4ca <__gethex+0x2fe>
 800c528:	f04f 0801 	mov.w	r8, #1
 800c52c:	e7e2      	b.n	800c4f4 <__gethex+0x328>
 800c52e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c530:	f1c3 0301 	rsb	r3, r3, #1
 800c534:	930f      	str	r3, [sp, #60]	; 0x3c
 800c536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d0ef      	beq.n	800c51c <__gethex+0x350>
 800c53c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c540:	f104 0214 	add.w	r2, r4, #20
 800c544:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c54e:	2300      	movs	r3, #0
 800c550:	4694      	mov	ip, r2
 800c552:	f852 1b04 	ldr.w	r1, [r2], #4
 800c556:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c55a:	d01e      	beq.n	800c59a <__gethex+0x3ce>
 800c55c:	3101      	adds	r1, #1
 800c55e:	f8cc 1000 	str.w	r1, [ip]
 800c562:	f1b8 0f02 	cmp.w	r8, #2
 800c566:	f104 0214 	add.w	r2, r4, #20
 800c56a:	d13d      	bne.n	800c5e8 <__gethex+0x41c>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	3b01      	subs	r3, #1
 800c570:	42ab      	cmp	r3, r5
 800c572:	d10b      	bne.n	800c58c <__gethex+0x3c0>
 800c574:	1169      	asrs	r1, r5, #5
 800c576:	2301      	movs	r3, #1
 800c578:	f005 051f 	and.w	r5, r5, #31
 800c57c:	fa03 f505 	lsl.w	r5, r3, r5
 800c580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c584:	421d      	tst	r5, r3
 800c586:	bf18      	it	ne
 800c588:	f04f 0801 	movne.w	r8, #1
 800c58c:	f048 0820 	orr.w	r8, r8, #32
 800c590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c592:	601c      	str	r4, [r3, #0]
 800c594:	9b02      	ldr	r3, [sp, #8]
 800c596:	601e      	str	r6, [r3, #0]
 800c598:	e6a2      	b.n	800c2e0 <__gethex+0x114>
 800c59a:	4290      	cmp	r0, r2
 800c59c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c5a0:	d8d6      	bhi.n	800c550 <__gethex+0x384>
 800c5a2:	68a2      	ldr	r2, [r4, #8]
 800c5a4:	4593      	cmp	fp, r2
 800c5a6:	db17      	blt.n	800c5d8 <__gethex+0x40c>
 800c5a8:	6861      	ldr	r1, [r4, #4]
 800c5aa:	4648      	mov	r0, r9
 800c5ac:	3101      	adds	r1, #1
 800c5ae:	f000 f9c3 	bl	800c938 <_Balloc>
 800c5b2:	4682      	mov	sl, r0
 800c5b4:	b918      	cbnz	r0, 800c5be <__gethex+0x3f2>
 800c5b6:	4b1b      	ldr	r3, [pc, #108]	; (800c624 <__gethex+0x458>)
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	2184      	movs	r1, #132	; 0x84
 800c5bc:	e6b3      	b.n	800c326 <__gethex+0x15a>
 800c5be:	6922      	ldr	r2, [r4, #16]
 800c5c0:	3202      	adds	r2, #2
 800c5c2:	f104 010c 	add.w	r1, r4, #12
 800c5c6:	0092      	lsls	r2, r2, #2
 800c5c8:	300c      	adds	r0, #12
 800c5ca:	f7fe fe95 	bl	800b2f8 <memcpy>
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4648      	mov	r0, r9
 800c5d2:	f000 f9f1 	bl	800c9b8 <_Bfree>
 800c5d6:	4654      	mov	r4, sl
 800c5d8:	6922      	ldr	r2, [r4, #16]
 800c5da:	1c51      	adds	r1, r2, #1
 800c5dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c5e0:	6121      	str	r1, [r4, #16]
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	6151      	str	r1, [r2, #20]
 800c5e6:	e7bc      	b.n	800c562 <__gethex+0x396>
 800c5e8:	6921      	ldr	r1, [r4, #16]
 800c5ea:	4559      	cmp	r1, fp
 800c5ec:	dd0b      	ble.n	800c606 <__gethex+0x43a>
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f7ff fd83 	bl	800c0fc <rshift>
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	42b3      	cmp	r3, r6
 800c5fc:	f6ff aedb 	blt.w	800c3b6 <__gethex+0x1ea>
 800c600:	f04f 0801 	mov.w	r8, #1
 800c604:	e7c2      	b.n	800c58c <__gethex+0x3c0>
 800c606:	f015 051f 	ands.w	r5, r5, #31
 800c60a:	d0f9      	beq.n	800c600 <__gethex+0x434>
 800c60c:	9b01      	ldr	r3, [sp, #4]
 800c60e:	441a      	add	r2, r3
 800c610:	f1c5 0520 	rsb	r5, r5, #32
 800c614:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c618:	f000 fa80 	bl	800cb1c <__hi0bits>
 800c61c:	42a8      	cmp	r0, r5
 800c61e:	dbe6      	blt.n	800c5ee <__gethex+0x422>
 800c620:	e7ee      	b.n	800c600 <__gethex+0x434>
 800c622:	bf00      	nop
 800c624:	0800ee06 	.word	0x0800ee06

0800c628 <L_shift>:
 800c628:	f1c2 0208 	rsb	r2, r2, #8
 800c62c:	0092      	lsls	r2, r2, #2
 800c62e:	b570      	push	{r4, r5, r6, lr}
 800c630:	f1c2 0620 	rsb	r6, r2, #32
 800c634:	6843      	ldr	r3, [r0, #4]
 800c636:	6804      	ldr	r4, [r0, #0]
 800c638:	fa03 f506 	lsl.w	r5, r3, r6
 800c63c:	432c      	orrs	r4, r5
 800c63e:	40d3      	lsrs	r3, r2
 800c640:	6004      	str	r4, [r0, #0]
 800c642:	f840 3f04 	str.w	r3, [r0, #4]!
 800c646:	4288      	cmp	r0, r1
 800c648:	d3f4      	bcc.n	800c634 <L_shift+0xc>
 800c64a:	bd70      	pop	{r4, r5, r6, pc}

0800c64c <__match>:
 800c64c:	b530      	push	{r4, r5, lr}
 800c64e:	6803      	ldr	r3, [r0, #0]
 800c650:	3301      	adds	r3, #1
 800c652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c656:	b914      	cbnz	r4, 800c65e <__match+0x12>
 800c658:	6003      	str	r3, [r0, #0]
 800c65a:	2001      	movs	r0, #1
 800c65c:	bd30      	pop	{r4, r5, pc}
 800c65e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c662:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c666:	2d19      	cmp	r5, #25
 800c668:	bf98      	it	ls
 800c66a:	3220      	addls	r2, #32
 800c66c:	42a2      	cmp	r2, r4
 800c66e:	d0f0      	beq.n	800c652 <__match+0x6>
 800c670:	2000      	movs	r0, #0
 800c672:	e7f3      	b.n	800c65c <__match+0x10>

0800c674 <__hexnan>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	680b      	ldr	r3, [r1, #0]
 800c67a:	6801      	ldr	r1, [r0, #0]
 800c67c:	115e      	asrs	r6, r3, #5
 800c67e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c682:	f013 031f 	ands.w	r3, r3, #31
 800c686:	b087      	sub	sp, #28
 800c688:	bf18      	it	ne
 800c68a:	3604      	addne	r6, #4
 800c68c:	2500      	movs	r5, #0
 800c68e:	1f37      	subs	r7, r6, #4
 800c690:	4682      	mov	sl, r0
 800c692:	4690      	mov	r8, r2
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	f846 5c04 	str.w	r5, [r6, #-4]
 800c69a:	46b9      	mov	r9, r7
 800c69c:	463c      	mov	r4, r7
 800c69e:	9502      	str	r5, [sp, #8]
 800c6a0:	46ab      	mov	fp, r5
 800c6a2:	784a      	ldrb	r2, [r1, #1]
 800c6a4:	1c4b      	adds	r3, r1, #1
 800c6a6:	9303      	str	r3, [sp, #12]
 800c6a8:	b342      	cbz	r2, 800c6fc <__hexnan+0x88>
 800c6aa:	4610      	mov	r0, r2
 800c6ac:	9105      	str	r1, [sp, #20]
 800c6ae:	9204      	str	r2, [sp, #16]
 800c6b0:	f7ff fd76 	bl	800c1a0 <__hexdig_fun>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d14f      	bne.n	800c758 <__hexnan+0xe4>
 800c6b8:	9a04      	ldr	r2, [sp, #16]
 800c6ba:	9905      	ldr	r1, [sp, #20]
 800c6bc:	2a20      	cmp	r2, #32
 800c6be:	d818      	bhi.n	800c6f2 <__hexnan+0x7e>
 800c6c0:	9b02      	ldr	r3, [sp, #8]
 800c6c2:	459b      	cmp	fp, r3
 800c6c4:	dd13      	ble.n	800c6ee <__hexnan+0x7a>
 800c6c6:	454c      	cmp	r4, r9
 800c6c8:	d206      	bcs.n	800c6d8 <__hexnan+0x64>
 800c6ca:	2d07      	cmp	r5, #7
 800c6cc:	dc04      	bgt.n	800c6d8 <__hexnan+0x64>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f7ff ffa8 	bl	800c628 <L_shift>
 800c6d8:	4544      	cmp	r4, r8
 800c6da:	d950      	bls.n	800c77e <__hexnan+0x10a>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f1a4 0904 	sub.w	r9, r4, #4
 800c6e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6e6:	f8cd b008 	str.w	fp, [sp, #8]
 800c6ea:	464c      	mov	r4, r9
 800c6ec:	461d      	mov	r5, r3
 800c6ee:	9903      	ldr	r1, [sp, #12]
 800c6f0:	e7d7      	b.n	800c6a2 <__hexnan+0x2e>
 800c6f2:	2a29      	cmp	r2, #41	; 0x29
 800c6f4:	d155      	bne.n	800c7a2 <__hexnan+0x12e>
 800c6f6:	3102      	adds	r1, #2
 800c6f8:	f8ca 1000 	str.w	r1, [sl]
 800c6fc:	f1bb 0f00 	cmp.w	fp, #0
 800c700:	d04f      	beq.n	800c7a2 <__hexnan+0x12e>
 800c702:	454c      	cmp	r4, r9
 800c704:	d206      	bcs.n	800c714 <__hexnan+0xa0>
 800c706:	2d07      	cmp	r5, #7
 800c708:	dc04      	bgt.n	800c714 <__hexnan+0xa0>
 800c70a:	462a      	mov	r2, r5
 800c70c:	4649      	mov	r1, r9
 800c70e:	4620      	mov	r0, r4
 800c710:	f7ff ff8a 	bl	800c628 <L_shift>
 800c714:	4544      	cmp	r4, r8
 800c716:	d934      	bls.n	800c782 <__hexnan+0x10e>
 800c718:	f1a8 0204 	sub.w	r2, r8, #4
 800c71c:	4623      	mov	r3, r4
 800c71e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c722:	f842 1f04 	str.w	r1, [r2, #4]!
 800c726:	429f      	cmp	r7, r3
 800c728:	d2f9      	bcs.n	800c71e <__hexnan+0xaa>
 800c72a:	1b3b      	subs	r3, r7, r4
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	3304      	adds	r3, #4
 800c732:	3e03      	subs	r6, #3
 800c734:	3401      	adds	r4, #1
 800c736:	42a6      	cmp	r6, r4
 800c738:	bf38      	it	cc
 800c73a:	2304      	movcc	r3, #4
 800c73c:	4443      	add	r3, r8
 800c73e:	2200      	movs	r2, #0
 800c740:	f843 2b04 	str.w	r2, [r3], #4
 800c744:	429f      	cmp	r7, r3
 800c746:	d2fb      	bcs.n	800c740 <__hexnan+0xcc>
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	b91b      	cbnz	r3, 800c754 <__hexnan+0xe0>
 800c74c:	4547      	cmp	r7, r8
 800c74e:	d126      	bne.n	800c79e <__hexnan+0x12a>
 800c750:	2301      	movs	r3, #1
 800c752:	603b      	str	r3, [r7, #0]
 800c754:	2005      	movs	r0, #5
 800c756:	e025      	b.n	800c7a4 <__hexnan+0x130>
 800c758:	3501      	adds	r5, #1
 800c75a:	2d08      	cmp	r5, #8
 800c75c:	f10b 0b01 	add.w	fp, fp, #1
 800c760:	dd06      	ble.n	800c770 <__hexnan+0xfc>
 800c762:	4544      	cmp	r4, r8
 800c764:	d9c3      	bls.n	800c6ee <__hexnan+0x7a>
 800c766:	2300      	movs	r3, #0
 800c768:	f844 3c04 	str.w	r3, [r4, #-4]
 800c76c:	2501      	movs	r5, #1
 800c76e:	3c04      	subs	r4, #4
 800c770:	6822      	ldr	r2, [r4, #0]
 800c772:	f000 000f 	and.w	r0, r0, #15
 800c776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c77a:	6020      	str	r0, [r4, #0]
 800c77c:	e7b7      	b.n	800c6ee <__hexnan+0x7a>
 800c77e:	2508      	movs	r5, #8
 800c780:	e7b5      	b.n	800c6ee <__hexnan+0x7a>
 800c782:	9b01      	ldr	r3, [sp, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0df      	beq.n	800c748 <__hexnan+0xd4>
 800c788:	f1c3 0320 	rsb	r3, r3, #32
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	40da      	lsrs	r2, r3
 800c792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c796:	4013      	ands	r3, r2
 800c798:	f846 3c04 	str.w	r3, [r6, #-4]
 800c79c:	e7d4      	b.n	800c748 <__hexnan+0xd4>
 800c79e:	3f04      	subs	r7, #4
 800c7a0:	e7d2      	b.n	800c748 <__hexnan+0xd4>
 800c7a2:	2004      	movs	r0, #4
 800c7a4:	b007      	add	sp, #28
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c7ac <malloc>:
 800c7ac:	4b02      	ldr	r3, [pc, #8]	; (800c7b8 <malloc+0xc>)
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	6818      	ldr	r0, [r3, #0]
 800c7b2:	f000 b823 	b.w	800c7fc <_malloc_r>
 800c7b6:	bf00      	nop
 800c7b8:	200001f0 	.word	0x200001f0

0800c7bc <sbrk_aligned>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	4e0e      	ldr	r6, [pc, #56]	; (800c7f8 <sbrk_aligned+0x3c>)
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	6831      	ldr	r1, [r6, #0]
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	b911      	cbnz	r1, 800c7ce <sbrk_aligned+0x12>
 800c7c8:	f001 f828 	bl	800d81c <_sbrk_r>
 800c7cc:	6030      	str	r0, [r6, #0]
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	f001 f823 	bl	800d81c <_sbrk_r>
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	d00a      	beq.n	800c7f0 <sbrk_aligned+0x34>
 800c7da:	1cc4      	adds	r4, r0, #3
 800c7dc:	f024 0403 	bic.w	r4, r4, #3
 800c7e0:	42a0      	cmp	r0, r4
 800c7e2:	d007      	beq.n	800c7f4 <sbrk_aligned+0x38>
 800c7e4:	1a21      	subs	r1, r4, r0
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f001 f818 	bl	800d81c <_sbrk_r>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d101      	bne.n	800c7f4 <sbrk_aligned+0x38>
 800c7f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	2000096c 	.word	0x2000096c

0800c7fc <_malloc_r>:
 800c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c800:	1ccd      	adds	r5, r1, #3
 800c802:	f025 0503 	bic.w	r5, r5, #3
 800c806:	3508      	adds	r5, #8
 800c808:	2d0c      	cmp	r5, #12
 800c80a:	bf38      	it	cc
 800c80c:	250c      	movcc	r5, #12
 800c80e:	2d00      	cmp	r5, #0
 800c810:	4607      	mov	r7, r0
 800c812:	db01      	blt.n	800c818 <_malloc_r+0x1c>
 800c814:	42a9      	cmp	r1, r5
 800c816:	d905      	bls.n	800c824 <_malloc_r+0x28>
 800c818:	230c      	movs	r3, #12
 800c81a:	603b      	str	r3, [r7, #0]
 800c81c:	2600      	movs	r6, #0
 800c81e:	4630      	mov	r0, r6
 800c820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c824:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c8f8 <_malloc_r+0xfc>
 800c828:	f000 f87a 	bl	800c920 <__malloc_lock>
 800c82c:	f8d8 3000 	ldr.w	r3, [r8]
 800c830:	461c      	mov	r4, r3
 800c832:	bb5c      	cbnz	r4, 800c88c <_malloc_r+0x90>
 800c834:	4629      	mov	r1, r5
 800c836:	4638      	mov	r0, r7
 800c838:	f7ff ffc0 	bl	800c7bc <sbrk_aligned>
 800c83c:	1c43      	adds	r3, r0, #1
 800c83e:	4604      	mov	r4, r0
 800c840:	d155      	bne.n	800c8ee <_malloc_r+0xf2>
 800c842:	f8d8 4000 	ldr.w	r4, [r8]
 800c846:	4626      	mov	r6, r4
 800c848:	2e00      	cmp	r6, #0
 800c84a:	d145      	bne.n	800c8d8 <_malloc_r+0xdc>
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	d048      	beq.n	800c8e2 <_malloc_r+0xe6>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	4631      	mov	r1, r6
 800c854:	4638      	mov	r0, r7
 800c856:	eb04 0903 	add.w	r9, r4, r3
 800c85a:	f000 ffdf 	bl	800d81c <_sbrk_r>
 800c85e:	4581      	cmp	r9, r0
 800c860:	d13f      	bne.n	800c8e2 <_malloc_r+0xe6>
 800c862:	6821      	ldr	r1, [r4, #0]
 800c864:	1a6d      	subs	r5, r5, r1
 800c866:	4629      	mov	r1, r5
 800c868:	4638      	mov	r0, r7
 800c86a:	f7ff ffa7 	bl	800c7bc <sbrk_aligned>
 800c86e:	3001      	adds	r0, #1
 800c870:	d037      	beq.n	800c8e2 <_malloc_r+0xe6>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	442b      	add	r3, r5
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	f8d8 3000 	ldr.w	r3, [r8]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d038      	beq.n	800c8f2 <_malloc_r+0xf6>
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	42a2      	cmp	r2, r4
 800c884:	d12b      	bne.n	800c8de <_malloc_r+0xe2>
 800c886:	2200      	movs	r2, #0
 800c888:	605a      	str	r2, [r3, #4]
 800c88a:	e00f      	b.n	800c8ac <_malloc_r+0xb0>
 800c88c:	6822      	ldr	r2, [r4, #0]
 800c88e:	1b52      	subs	r2, r2, r5
 800c890:	d41f      	bmi.n	800c8d2 <_malloc_r+0xd6>
 800c892:	2a0b      	cmp	r2, #11
 800c894:	d917      	bls.n	800c8c6 <_malloc_r+0xca>
 800c896:	1961      	adds	r1, r4, r5
 800c898:	42a3      	cmp	r3, r4
 800c89a:	6025      	str	r5, [r4, #0]
 800c89c:	bf18      	it	ne
 800c89e:	6059      	strne	r1, [r3, #4]
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	bf08      	it	eq
 800c8a4:	f8c8 1000 	streq.w	r1, [r8]
 800c8a8:	5162      	str	r2, [r4, r5]
 800c8aa:	604b      	str	r3, [r1, #4]
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f104 060b 	add.w	r6, r4, #11
 800c8b2:	f000 f83b 	bl	800c92c <__malloc_unlock>
 800c8b6:	f026 0607 	bic.w	r6, r6, #7
 800c8ba:	1d23      	adds	r3, r4, #4
 800c8bc:	1af2      	subs	r2, r6, r3
 800c8be:	d0ae      	beq.n	800c81e <_malloc_r+0x22>
 800c8c0:	1b9b      	subs	r3, r3, r6
 800c8c2:	50a3      	str	r3, [r4, r2]
 800c8c4:	e7ab      	b.n	800c81e <_malloc_r+0x22>
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	6862      	ldr	r2, [r4, #4]
 800c8ca:	d1dd      	bne.n	800c888 <_malloc_r+0x8c>
 800c8cc:	f8c8 2000 	str.w	r2, [r8]
 800c8d0:	e7ec      	b.n	800c8ac <_malloc_r+0xb0>
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	6864      	ldr	r4, [r4, #4]
 800c8d6:	e7ac      	b.n	800c832 <_malloc_r+0x36>
 800c8d8:	4634      	mov	r4, r6
 800c8da:	6876      	ldr	r6, [r6, #4]
 800c8dc:	e7b4      	b.n	800c848 <_malloc_r+0x4c>
 800c8de:	4613      	mov	r3, r2
 800c8e0:	e7cc      	b.n	800c87c <_malloc_r+0x80>
 800c8e2:	230c      	movs	r3, #12
 800c8e4:	603b      	str	r3, [r7, #0]
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	f000 f820 	bl	800c92c <__malloc_unlock>
 800c8ec:	e797      	b.n	800c81e <_malloc_r+0x22>
 800c8ee:	6025      	str	r5, [r4, #0]
 800c8f0:	e7dc      	b.n	800c8ac <_malloc_r+0xb0>
 800c8f2:	605b      	str	r3, [r3, #4]
 800c8f4:	deff      	udf	#255	; 0xff
 800c8f6:	bf00      	nop
 800c8f8:	20000968 	.word	0x20000968

0800c8fc <__ascii_mbtowc>:
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	b901      	cbnz	r1, 800c902 <__ascii_mbtowc+0x6>
 800c900:	a901      	add	r1, sp, #4
 800c902:	b142      	cbz	r2, 800c916 <__ascii_mbtowc+0x1a>
 800c904:	b14b      	cbz	r3, 800c91a <__ascii_mbtowc+0x1e>
 800c906:	7813      	ldrb	r3, [r2, #0]
 800c908:	600b      	str	r3, [r1, #0]
 800c90a:	7812      	ldrb	r2, [r2, #0]
 800c90c:	1e10      	subs	r0, r2, #0
 800c90e:	bf18      	it	ne
 800c910:	2001      	movne	r0, #1
 800c912:	b002      	add	sp, #8
 800c914:	4770      	bx	lr
 800c916:	4610      	mov	r0, r2
 800c918:	e7fb      	b.n	800c912 <__ascii_mbtowc+0x16>
 800c91a:	f06f 0001 	mvn.w	r0, #1
 800c91e:	e7f8      	b.n	800c912 <__ascii_mbtowc+0x16>

0800c920 <__malloc_lock>:
 800c920:	4801      	ldr	r0, [pc, #4]	; (800c928 <__malloc_lock+0x8>)
 800c922:	f7fe bce7 	b.w	800b2f4 <__retarget_lock_acquire_recursive>
 800c926:	bf00      	nop
 800c928:	20000964 	.word	0x20000964

0800c92c <__malloc_unlock>:
 800c92c:	4801      	ldr	r0, [pc, #4]	; (800c934 <__malloc_unlock+0x8>)
 800c92e:	f7fe bce2 	b.w	800b2f6 <__retarget_lock_release_recursive>
 800c932:	bf00      	nop
 800c934:	20000964 	.word	0x20000964

0800c938 <_Balloc>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	69c6      	ldr	r6, [r0, #28]
 800c93c:	4604      	mov	r4, r0
 800c93e:	460d      	mov	r5, r1
 800c940:	b976      	cbnz	r6, 800c960 <_Balloc+0x28>
 800c942:	2010      	movs	r0, #16
 800c944:	f7ff ff32 	bl	800c7ac <malloc>
 800c948:	4602      	mov	r2, r0
 800c94a:	61e0      	str	r0, [r4, #28]
 800c94c:	b920      	cbnz	r0, 800c958 <_Balloc+0x20>
 800c94e:	4b18      	ldr	r3, [pc, #96]	; (800c9b0 <_Balloc+0x78>)
 800c950:	4818      	ldr	r0, [pc, #96]	; (800c9b4 <_Balloc+0x7c>)
 800c952:	216b      	movs	r1, #107	; 0x6b
 800c954:	f7fe fcee 	bl	800b334 <__assert_func>
 800c958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c95c:	6006      	str	r6, [r0, #0]
 800c95e:	60c6      	str	r6, [r0, #12]
 800c960:	69e6      	ldr	r6, [r4, #28]
 800c962:	68f3      	ldr	r3, [r6, #12]
 800c964:	b183      	cbz	r3, 800c988 <_Balloc+0x50>
 800c966:	69e3      	ldr	r3, [r4, #28]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c96e:	b9b8      	cbnz	r0, 800c9a0 <_Balloc+0x68>
 800c970:	2101      	movs	r1, #1
 800c972:	fa01 f605 	lsl.w	r6, r1, r5
 800c976:	1d72      	adds	r2, r6, #5
 800c978:	0092      	lsls	r2, r2, #2
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 ff65 	bl	800d84a <_calloc_r>
 800c980:	b160      	cbz	r0, 800c99c <_Balloc+0x64>
 800c982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c986:	e00e      	b.n	800c9a6 <_Balloc+0x6e>
 800c988:	2221      	movs	r2, #33	; 0x21
 800c98a:	2104      	movs	r1, #4
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 ff5c 	bl	800d84a <_calloc_r>
 800c992:	69e3      	ldr	r3, [r4, #28]
 800c994:	60f0      	str	r0, [r6, #12]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1e4      	bne.n	800c966 <_Balloc+0x2e>
 800c99c:	2000      	movs	r0, #0
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	6802      	ldr	r2, [r0, #0]
 800c9a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9ac:	e7f7      	b.n	800c99e <_Balloc+0x66>
 800c9ae:	bf00      	nop
 800c9b0:	0800ed97 	.word	0x0800ed97
 800c9b4:	0800ee77 	.word	0x0800ee77

0800c9b8 <_Bfree>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	69c6      	ldr	r6, [r0, #28]
 800c9bc:	4605      	mov	r5, r0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	b976      	cbnz	r6, 800c9e0 <_Bfree+0x28>
 800c9c2:	2010      	movs	r0, #16
 800c9c4:	f7ff fef2 	bl	800c7ac <malloc>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	61e8      	str	r0, [r5, #28]
 800c9cc:	b920      	cbnz	r0, 800c9d8 <_Bfree+0x20>
 800c9ce:	4b09      	ldr	r3, [pc, #36]	; (800c9f4 <_Bfree+0x3c>)
 800c9d0:	4809      	ldr	r0, [pc, #36]	; (800c9f8 <_Bfree+0x40>)
 800c9d2:	218f      	movs	r1, #143	; 0x8f
 800c9d4:	f7fe fcae 	bl	800b334 <__assert_func>
 800c9d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9dc:	6006      	str	r6, [r0, #0]
 800c9de:	60c6      	str	r6, [r0, #12]
 800c9e0:	b13c      	cbz	r4, 800c9f2 <_Bfree+0x3a>
 800c9e2:	69eb      	ldr	r3, [r5, #28]
 800c9e4:	6862      	ldr	r2, [r4, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9ec:	6021      	str	r1, [r4, #0]
 800c9ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	0800ed97 	.word	0x0800ed97
 800c9f8:	0800ee77 	.word	0x0800ee77

0800c9fc <__multadd>:
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	690d      	ldr	r5, [r1, #16]
 800ca02:	4607      	mov	r7, r0
 800ca04:	460c      	mov	r4, r1
 800ca06:	461e      	mov	r6, r3
 800ca08:	f101 0c14 	add.w	ip, r1, #20
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca12:	b299      	uxth	r1, r3
 800ca14:	fb02 6101 	mla	r1, r2, r1, r6
 800ca18:	0c1e      	lsrs	r6, r3, #16
 800ca1a:	0c0b      	lsrs	r3, r1, #16
 800ca1c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca20:	b289      	uxth	r1, r1
 800ca22:	3001      	adds	r0, #1
 800ca24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca28:	4285      	cmp	r5, r0
 800ca2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca32:	dcec      	bgt.n	800ca0e <__multadd+0x12>
 800ca34:	b30e      	cbz	r6, 800ca7a <__multadd+0x7e>
 800ca36:	68a3      	ldr	r3, [r4, #8]
 800ca38:	42ab      	cmp	r3, r5
 800ca3a:	dc19      	bgt.n	800ca70 <__multadd+0x74>
 800ca3c:	6861      	ldr	r1, [r4, #4]
 800ca3e:	4638      	mov	r0, r7
 800ca40:	3101      	adds	r1, #1
 800ca42:	f7ff ff79 	bl	800c938 <_Balloc>
 800ca46:	4680      	mov	r8, r0
 800ca48:	b928      	cbnz	r0, 800ca56 <__multadd+0x5a>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	4b0c      	ldr	r3, [pc, #48]	; (800ca80 <__multadd+0x84>)
 800ca4e:	480d      	ldr	r0, [pc, #52]	; (800ca84 <__multadd+0x88>)
 800ca50:	21ba      	movs	r1, #186	; 0xba
 800ca52:	f7fe fc6f 	bl	800b334 <__assert_func>
 800ca56:	6922      	ldr	r2, [r4, #16]
 800ca58:	3202      	adds	r2, #2
 800ca5a:	f104 010c 	add.w	r1, r4, #12
 800ca5e:	0092      	lsls	r2, r2, #2
 800ca60:	300c      	adds	r0, #12
 800ca62:	f7fe fc49 	bl	800b2f8 <memcpy>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff ffa5 	bl	800c9b8 <_Bfree>
 800ca6e:	4644      	mov	r4, r8
 800ca70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca74:	3501      	adds	r5, #1
 800ca76:	615e      	str	r6, [r3, #20]
 800ca78:	6125      	str	r5, [r4, #16]
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca80:	0800ee06 	.word	0x0800ee06
 800ca84:	0800ee77 	.word	0x0800ee77

0800ca88 <__s2b>:
 800ca88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	4615      	mov	r5, r2
 800ca90:	461f      	mov	r7, r3
 800ca92:	2209      	movs	r2, #9
 800ca94:	3308      	adds	r3, #8
 800ca96:	4606      	mov	r6, r0
 800ca98:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	2201      	movs	r2, #1
 800caa0:	429a      	cmp	r2, r3
 800caa2:	db09      	blt.n	800cab8 <__s2b+0x30>
 800caa4:	4630      	mov	r0, r6
 800caa6:	f7ff ff47 	bl	800c938 <_Balloc>
 800caaa:	b940      	cbnz	r0, 800cabe <__s2b+0x36>
 800caac:	4602      	mov	r2, r0
 800caae:	4b19      	ldr	r3, [pc, #100]	; (800cb14 <__s2b+0x8c>)
 800cab0:	4819      	ldr	r0, [pc, #100]	; (800cb18 <__s2b+0x90>)
 800cab2:	21d3      	movs	r1, #211	; 0xd3
 800cab4:	f7fe fc3e 	bl	800b334 <__assert_func>
 800cab8:	0052      	lsls	r2, r2, #1
 800caba:	3101      	adds	r1, #1
 800cabc:	e7f0      	b.n	800caa0 <__s2b+0x18>
 800cabe:	9b08      	ldr	r3, [sp, #32]
 800cac0:	6143      	str	r3, [r0, #20]
 800cac2:	2d09      	cmp	r5, #9
 800cac4:	f04f 0301 	mov.w	r3, #1
 800cac8:	6103      	str	r3, [r0, #16]
 800caca:	dd16      	ble.n	800cafa <__s2b+0x72>
 800cacc:	f104 0909 	add.w	r9, r4, #9
 800cad0:	46c8      	mov	r8, r9
 800cad2:	442c      	add	r4, r5
 800cad4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cad8:	4601      	mov	r1, r0
 800cada:	3b30      	subs	r3, #48	; 0x30
 800cadc:	220a      	movs	r2, #10
 800cade:	4630      	mov	r0, r6
 800cae0:	f7ff ff8c 	bl	800c9fc <__multadd>
 800cae4:	45a0      	cmp	r8, r4
 800cae6:	d1f5      	bne.n	800cad4 <__s2b+0x4c>
 800cae8:	f1a5 0408 	sub.w	r4, r5, #8
 800caec:	444c      	add	r4, r9
 800caee:	1b2d      	subs	r5, r5, r4
 800caf0:	1963      	adds	r3, r4, r5
 800caf2:	42bb      	cmp	r3, r7
 800caf4:	db04      	blt.n	800cb00 <__s2b+0x78>
 800caf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cafa:	340a      	adds	r4, #10
 800cafc:	2509      	movs	r5, #9
 800cafe:	e7f6      	b.n	800caee <__s2b+0x66>
 800cb00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb04:	4601      	mov	r1, r0
 800cb06:	3b30      	subs	r3, #48	; 0x30
 800cb08:	220a      	movs	r2, #10
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7ff ff76 	bl	800c9fc <__multadd>
 800cb10:	e7ee      	b.n	800caf0 <__s2b+0x68>
 800cb12:	bf00      	nop
 800cb14:	0800ee06 	.word	0x0800ee06
 800cb18:	0800ee77 	.word	0x0800ee77

0800cb1c <__hi0bits>:
 800cb1c:	0c03      	lsrs	r3, r0, #16
 800cb1e:	041b      	lsls	r3, r3, #16
 800cb20:	b9d3      	cbnz	r3, 800cb58 <__hi0bits+0x3c>
 800cb22:	0400      	lsls	r0, r0, #16
 800cb24:	2310      	movs	r3, #16
 800cb26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb2a:	bf04      	itt	eq
 800cb2c:	0200      	lsleq	r0, r0, #8
 800cb2e:	3308      	addeq	r3, #8
 800cb30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb34:	bf04      	itt	eq
 800cb36:	0100      	lsleq	r0, r0, #4
 800cb38:	3304      	addeq	r3, #4
 800cb3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb3e:	bf04      	itt	eq
 800cb40:	0080      	lsleq	r0, r0, #2
 800cb42:	3302      	addeq	r3, #2
 800cb44:	2800      	cmp	r0, #0
 800cb46:	db05      	blt.n	800cb54 <__hi0bits+0x38>
 800cb48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb4c:	f103 0301 	add.w	r3, r3, #1
 800cb50:	bf08      	it	eq
 800cb52:	2320      	moveq	r3, #32
 800cb54:	4618      	mov	r0, r3
 800cb56:	4770      	bx	lr
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e7e4      	b.n	800cb26 <__hi0bits+0xa>

0800cb5c <__lo0bits>:
 800cb5c:	6803      	ldr	r3, [r0, #0]
 800cb5e:	f013 0207 	ands.w	r2, r3, #7
 800cb62:	d00c      	beq.n	800cb7e <__lo0bits+0x22>
 800cb64:	07d9      	lsls	r1, r3, #31
 800cb66:	d422      	bmi.n	800cbae <__lo0bits+0x52>
 800cb68:	079a      	lsls	r2, r3, #30
 800cb6a:	bf49      	itett	mi
 800cb6c:	085b      	lsrmi	r3, r3, #1
 800cb6e:	089b      	lsrpl	r3, r3, #2
 800cb70:	6003      	strmi	r3, [r0, #0]
 800cb72:	2201      	movmi	r2, #1
 800cb74:	bf5c      	itt	pl
 800cb76:	6003      	strpl	r3, [r0, #0]
 800cb78:	2202      	movpl	r2, #2
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	4770      	bx	lr
 800cb7e:	b299      	uxth	r1, r3
 800cb80:	b909      	cbnz	r1, 800cb86 <__lo0bits+0x2a>
 800cb82:	0c1b      	lsrs	r3, r3, #16
 800cb84:	2210      	movs	r2, #16
 800cb86:	b2d9      	uxtb	r1, r3
 800cb88:	b909      	cbnz	r1, 800cb8e <__lo0bits+0x32>
 800cb8a:	3208      	adds	r2, #8
 800cb8c:	0a1b      	lsrs	r3, r3, #8
 800cb8e:	0719      	lsls	r1, r3, #28
 800cb90:	bf04      	itt	eq
 800cb92:	091b      	lsreq	r3, r3, #4
 800cb94:	3204      	addeq	r2, #4
 800cb96:	0799      	lsls	r1, r3, #30
 800cb98:	bf04      	itt	eq
 800cb9a:	089b      	lsreq	r3, r3, #2
 800cb9c:	3202      	addeq	r2, #2
 800cb9e:	07d9      	lsls	r1, r3, #31
 800cba0:	d403      	bmi.n	800cbaa <__lo0bits+0x4e>
 800cba2:	085b      	lsrs	r3, r3, #1
 800cba4:	f102 0201 	add.w	r2, r2, #1
 800cba8:	d003      	beq.n	800cbb2 <__lo0bits+0x56>
 800cbaa:	6003      	str	r3, [r0, #0]
 800cbac:	e7e5      	b.n	800cb7a <__lo0bits+0x1e>
 800cbae:	2200      	movs	r2, #0
 800cbb0:	e7e3      	b.n	800cb7a <__lo0bits+0x1e>
 800cbb2:	2220      	movs	r2, #32
 800cbb4:	e7e1      	b.n	800cb7a <__lo0bits+0x1e>
	...

0800cbb8 <__i2b>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	460c      	mov	r4, r1
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	f7ff febb 	bl	800c938 <_Balloc>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	b928      	cbnz	r0, 800cbd2 <__i2b+0x1a>
 800cbc6:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <__i2b+0x24>)
 800cbc8:	4805      	ldr	r0, [pc, #20]	; (800cbe0 <__i2b+0x28>)
 800cbca:	f240 1145 	movw	r1, #325	; 0x145
 800cbce:	f7fe fbb1 	bl	800b334 <__assert_func>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	6144      	str	r4, [r0, #20]
 800cbd6:	6103      	str	r3, [r0, #16]
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	bf00      	nop
 800cbdc:	0800ee06 	.word	0x0800ee06
 800cbe0:	0800ee77 	.word	0x0800ee77

0800cbe4 <__multiply>:
 800cbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe8:	4691      	mov	r9, r2
 800cbea:	690a      	ldr	r2, [r1, #16]
 800cbec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	bfb8      	it	lt
 800cbf4:	460b      	movlt	r3, r1
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	bfbc      	itt	lt
 800cbfa:	464c      	movlt	r4, r9
 800cbfc:	4699      	movlt	r9, r3
 800cbfe:	6927      	ldr	r7, [r4, #16]
 800cc00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc04:	68a3      	ldr	r3, [r4, #8]
 800cc06:	6861      	ldr	r1, [r4, #4]
 800cc08:	eb07 060a 	add.w	r6, r7, sl
 800cc0c:	42b3      	cmp	r3, r6
 800cc0e:	b085      	sub	sp, #20
 800cc10:	bfb8      	it	lt
 800cc12:	3101      	addlt	r1, #1
 800cc14:	f7ff fe90 	bl	800c938 <_Balloc>
 800cc18:	b930      	cbnz	r0, 800cc28 <__multiply+0x44>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	4b44      	ldr	r3, [pc, #272]	; (800cd30 <__multiply+0x14c>)
 800cc1e:	4845      	ldr	r0, [pc, #276]	; (800cd34 <__multiply+0x150>)
 800cc20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cc24:	f7fe fb86 	bl	800b334 <__assert_func>
 800cc28:	f100 0514 	add.w	r5, r0, #20
 800cc2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc30:	462b      	mov	r3, r5
 800cc32:	2200      	movs	r2, #0
 800cc34:	4543      	cmp	r3, r8
 800cc36:	d321      	bcc.n	800cc7c <__multiply+0x98>
 800cc38:	f104 0314 	add.w	r3, r4, #20
 800cc3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc40:	f109 0314 	add.w	r3, r9, #20
 800cc44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc48:	9202      	str	r2, [sp, #8]
 800cc4a:	1b3a      	subs	r2, r7, r4
 800cc4c:	3a15      	subs	r2, #21
 800cc4e:	f022 0203 	bic.w	r2, r2, #3
 800cc52:	3204      	adds	r2, #4
 800cc54:	f104 0115 	add.w	r1, r4, #21
 800cc58:	428f      	cmp	r7, r1
 800cc5a:	bf38      	it	cc
 800cc5c:	2204      	movcc	r2, #4
 800cc5e:	9201      	str	r2, [sp, #4]
 800cc60:	9a02      	ldr	r2, [sp, #8]
 800cc62:	9303      	str	r3, [sp, #12]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d80c      	bhi.n	800cc82 <__multiply+0x9e>
 800cc68:	2e00      	cmp	r6, #0
 800cc6a:	dd03      	ble.n	800cc74 <__multiply+0x90>
 800cc6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d05b      	beq.n	800cd2c <__multiply+0x148>
 800cc74:	6106      	str	r6, [r0, #16]
 800cc76:	b005      	add	sp, #20
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7c:	f843 2b04 	str.w	r2, [r3], #4
 800cc80:	e7d8      	b.n	800cc34 <__multiply+0x50>
 800cc82:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc86:	f1ba 0f00 	cmp.w	sl, #0
 800cc8a:	d024      	beq.n	800ccd6 <__multiply+0xf2>
 800cc8c:	f104 0e14 	add.w	lr, r4, #20
 800cc90:	46a9      	mov	r9, r5
 800cc92:	f04f 0c00 	mov.w	ip, #0
 800cc96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc9a:	f8d9 1000 	ldr.w	r1, [r9]
 800cc9e:	fa1f fb82 	uxth.w	fp, r2
 800cca2:	b289      	uxth	r1, r1
 800cca4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cca8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ccac:	f8d9 2000 	ldr.w	r2, [r9]
 800ccb0:	4461      	add	r1, ip
 800ccb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ccbe:	b289      	uxth	r1, r1
 800ccc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccc4:	4577      	cmp	r7, lr
 800ccc6:	f849 1b04 	str.w	r1, [r9], #4
 800ccca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccce:	d8e2      	bhi.n	800cc96 <__multiply+0xb2>
 800ccd0:	9a01      	ldr	r2, [sp, #4]
 800ccd2:	f845 c002 	str.w	ip, [r5, r2]
 800ccd6:	9a03      	ldr	r2, [sp, #12]
 800ccd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ccdc:	3304      	adds	r3, #4
 800ccde:	f1b9 0f00 	cmp.w	r9, #0
 800cce2:	d021      	beq.n	800cd28 <__multiply+0x144>
 800cce4:	6829      	ldr	r1, [r5, #0]
 800cce6:	f104 0c14 	add.w	ip, r4, #20
 800ccea:	46ae      	mov	lr, r5
 800ccec:	f04f 0a00 	mov.w	sl, #0
 800ccf0:	f8bc b000 	ldrh.w	fp, [ip]
 800ccf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ccf8:	fb09 220b 	mla	r2, r9, fp, r2
 800ccfc:	4452      	add	r2, sl
 800ccfe:	b289      	uxth	r1, r1
 800cd00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd04:	f84e 1b04 	str.w	r1, [lr], #4
 800cd08:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd10:	f8be 1000 	ldrh.w	r1, [lr]
 800cd14:	fb09 110a 	mla	r1, r9, sl, r1
 800cd18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cd1c:	4567      	cmp	r7, ip
 800cd1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd22:	d8e5      	bhi.n	800ccf0 <__multiply+0x10c>
 800cd24:	9a01      	ldr	r2, [sp, #4]
 800cd26:	50a9      	str	r1, [r5, r2]
 800cd28:	3504      	adds	r5, #4
 800cd2a:	e799      	b.n	800cc60 <__multiply+0x7c>
 800cd2c:	3e01      	subs	r6, #1
 800cd2e:	e79b      	b.n	800cc68 <__multiply+0x84>
 800cd30:	0800ee06 	.word	0x0800ee06
 800cd34:	0800ee77 	.word	0x0800ee77

0800cd38 <__pow5mult>:
 800cd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	4615      	mov	r5, r2
 800cd3e:	f012 0203 	ands.w	r2, r2, #3
 800cd42:	4606      	mov	r6, r0
 800cd44:	460f      	mov	r7, r1
 800cd46:	d007      	beq.n	800cd58 <__pow5mult+0x20>
 800cd48:	4c25      	ldr	r4, [pc, #148]	; (800cde0 <__pow5mult+0xa8>)
 800cd4a:	3a01      	subs	r2, #1
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd52:	f7ff fe53 	bl	800c9fc <__multadd>
 800cd56:	4607      	mov	r7, r0
 800cd58:	10ad      	asrs	r5, r5, #2
 800cd5a:	d03d      	beq.n	800cdd8 <__pow5mult+0xa0>
 800cd5c:	69f4      	ldr	r4, [r6, #28]
 800cd5e:	b97c      	cbnz	r4, 800cd80 <__pow5mult+0x48>
 800cd60:	2010      	movs	r0, #16
 800cd62:	f7ff fd23 	bl	800c7ac <malloc>
 800cd66:	4602      	mov	r2, r0
 800cd68:	61f0      	str	r0, [r6, #28]
 800cd6a:	b928      	cbnz	r0, 800cd78 <__pow5mult+0x40>
 800cd6c:	4b1d      	ldr	r3, [pc, #116]	; (800cde4 <__pow5mult+0xac>)
 800cd6e:	481e      	ldr	r0, [pc, #120]	; (800cde8 <__pow5mult+0xb0>)
 800cd70:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cd74:	f7fe fade 	bl	800b334 <__assert_func>
 800cd78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd7c:	6004      	str	r4, [r0, #0]
 800cd7e:	60c4      	str	r4, [r0, #12]
 800cd80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cd84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd88:	b94c      	cbnz	r4, 800cd9e <__pow5mult+0x66>
 800cd8a:	f240 2171 	movw	r1, #625	; 0x271
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f7ff ff12 	bl	800cbb8 <__i2b>
 800cd94:	2300      	movs	r3, #0
 800cd96:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	6003      	str	r3, [r0, #0]
 800cd9e:	f04f 0900 	mov.w	r9, #0
 800cda2:	07eb      	lsls	r3, r5, #31
 800cda4:	d50a      	bpl.n	800cdbc <__pow5mult+0x84>
 800cda6:	4639      	mov	r1, r7
 800cda8:	4622      	mov	r2, r4
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7ff ff1a 	bl	800cbe4 <__multiply>
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f7ff fdff 	bl	800c9b8 <_Bfree>
 800cdba:	4647      	mov	r7, r8
 800cdbc:	106d      	asrs	r5, r5, #1
 800cdbe:	d00b      	beq.n	800cdd8 <__pow5mult+0xa0>
 800cdc0:	6820      	ldr	r0, [r4, #0]
 800cdc2:	b938      	cbnz	r0, 800cdd4 <__pow5mult+0x9c>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7ff ff0b 	bl	800cbe4 <__multiply>
 800cdce:	6020      	str	r0, [r4, #0]
 800cdd0:	f8c0 9000 	str.w	r9, [r0]
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	e7e4      	b.n	800cda2 <__pow5mult+0x6a>
 800cdd8:	4638      	mov	r0, r7
 800cdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdde:	bf00      	nop
 800cde0:	0800efc0 	.word	0x0800efc0
 800cde4:	0800ed97 	.word	0x0800ed97
 800cde8:	0800ee77 	.word	0x0800ee77

0800cdec <__lshift>:
 800cdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	6849      	ldr	r1, [r1, #4]
 800cdf4:	6923      	ldr	r3, [r4, #16]
 800cdf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdfa:	68a3      	ldr	r3, [r4, #8]
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	4691      	mov	r9, r2
 800ce00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce04:	f108 0601 	add.w	r6, r8, #1
 800ce08:	42b3      	cmp	r3, r6
 800ce0a:	db0b      	blt.n	800ce24 <__lshift+0x38>
 800ce0c:	4638      	mov	r0, r7
 800ce0e:	f7ff fd93 	bl	800c938 <_Balloc>
 800ce12:	4605      	mov	r5, r0
 800ce14:	b948      	cbnz	r0, 800ce2a <__lshift+0x3e>
 800ce16:	4602      	mov	r2, r0
 800ce18:	4b28      	ldr	r3, [pc, #160]	; (800cebc <__lshift+0xd0>)
 800ce1a:	4829      	ldr	r0, [pc, #164]	; (800cec0 <__lshift+0xd4>)
 800ce1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ce20:	f7fe fa88 	bl	800b334 <__assert_func>
 800ce24:	3101      	adds	r1, #1
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	e7ee      	b.n	800ce08 <__lshift+0x1c>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f100 0114 	add.w	r1, r0, #20
 800ce30:	f100 0210 	add.w	r2, r0, #16
 800ce34:	4618      	mov	r0, r3
 800ce36:	4553      	cmp	r3, sl
 800ce38:	db33      	blt.n	800cea2 <__lshift+0xb6>
 800ce3a:	6920      	ldr	r0, [r4, #16]
 800ce3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce40:	f104 0314 	add.w	r3, r4, #20
 800ce44:	f019 091f 	ands.w	r9, r9, #31
 800ce48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce50:	d02b      	beq.n	800ceaa <__lshift+0xbe>
 800ce52:	f1c9 0e20 	rsb	lr, r9, #32
 800ce56:	468a      	mov	sl, r1
 800ce58:	2200      	movs	r2, #0
 800ce5a:	6818      	ldr	r0, [r3, #0]
 800ce5c:	fa00 f009 	lsl.w	r0, r0, r9
 800ce60:	4310      	orrs	r0, r2
 800ce62:	f84a 0b04 	str.w	r0, [sl], #4
 800ce66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce6a:	459c      	cmp	ip, r3
 800ce6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce70:	d8f3      	bhi.n	800ce5a <__lshift+0x6e>
 800ce72:	ebac 0304 	sub.w	r3, ip, r4
 800ce76:	3b15      	subs	r3, #21
 800ce78:	f023 0303 	bic.w	r3, r3, #3
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	f104 0015 	add.w	r0, r4, #21
 800ce82:	4584      	cmp	ip, r0
 800ce84:	bf38      	it	cc
 800ce86:	2304      	movcc	r3, #4
 800ce88:	50ca      	str	r2, [r1, r3]
 800ce8a:	b10a      	cbz	r2, 800ce90 <__lshift+0xa4>
 800ce8c:	f108 0602 	add.w	r6, r8, #2
 800ce90:	3e01      	subs	r6, #1
 800ce92:	4638      	mov	r0, r7
 800ce94:	612e      	str	r6, [r5, #16]
 800ce96:	4621      	mov	r1, r4
 800ce98:	f7ff fd8e 	bl	800c9b8 <_Bfree>
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cea6:	3301      	adds	r3, #1
 800cea8:	e7c5      	b.n	800ce36 <__lshift+0x4a>
 800ceaa:	3904      	subs	r1, #4
 800ceac:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ceb4:	459c      	cmp	ip, r3
 800ceb6:	d8f9      	bhi.n	800ceac <__lshift+0xc0>
 800ceb8:	e7ea      	b.n	800ce90 <__lshift+0xa4>
 800ceba:	bf00      	nop
 800cebc:	0800ee06 	.word	0x0800ee06
 800cec0:	0800ee77 	.word	0x0800ee77

0800cec4 <__mcmp>:
 800cec4:	b530      	push	{r4, r5, lr}
 800cec6:	6902      	ldr	r2, [r0, #16]
 800cec8:	690c      	ldr	r4, [r1, #16]
 800ceca:	1b12      	subs	r2, r2, r4
 800cecc:	d10e      	bne.n	800ceec <__mcmp+0x28>
 800cece:	f100 0314 	add.w	r3, r0, #20
 800ced2:	3114      	adds	r1, #20
 800ced4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ced8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cedc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cee4:	42a5      	cmp	r5, r4
 800cee6:	d003      	beq.n	800cef0 <__mcmp+0x2c>
 800cee8:	d305      	bcc.n	800cef6 <__mcmp+0x32>
 800ceea:	2201      	movs	r2, #1
 800ceec:	4610      	mov	r0, r2
 800ceee:	bd30      	pop	{r4, r5, pc}
 800cef0:	4283      	cmp	r3, r0
 800cef2:	d3f3      	bcc.n	800cedc <__mcmp+0x18>
 800cef4:	e7fa      	b.n	800ceec <__mcmp+0x28>
 800cef6:	f04f 32ff 	mov.w	r2, #4294967295
 800cefa:	e7f7      	b.n	800ceec <__mcmp+0x28>

0800cefc <__mdiff>:
 800cefc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	460c      	mov	r4, r1
 800cf02:	4606      	mov	r6, r0
 800cf04:	4611      	mov	r1, r2
 800cf06:	4620      	mov	r0, r4
 800cf08:	4690      	mov	r8, r2
 800cf0a:	f7ff ffdb 	bl	800cec4 <__mcmp>
 800cf0e:	1e05      	subs	r5, r0, #0
 800cf10:	d110      	bne.n	800cf34 <__mdiff+0x38>
 800cf12:	4629      	mov	r1, r5
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7ff fd0f 	bl	800c938 <_Balloc>
 800cf1a:	b930      	cbnz	r0, 800cf2a <__mdiff+0x2e>
 800cf1c:	4b3a      	ldr	r3, [pc, #232]	; (800d008 <__mdiff+0x10c>)
 800cf1e:	4602      	mov	r2, r0
 800cf20:	f240 2137 	movw	r1, #567	; 0x237
 800cf24:	4839      	ldr	r0, [pc, #228]	; (800d00c <__mdiff+0x110>)
 800cf26:	f7fe fa05 	bl	800b334 <__assert_func>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf34:	bfa4      	itt	ge
 800cf36:	4643      	movge	r3, r8
 800cf38:	46a0      	movge	r8, r4
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf40:	bfa6      	itte	ge
 800cf42:	461c      	movge	r4, r3
 800cf44:	2500      	movge	r5, #0
 800cf46:	2501      	movlt	r5, #1
 800cf48:	f7ff fcf6 	bl	800c938 <_Balloc>
 800cf4c:	b920      	cbnz	r0, 800cf58 <__mdiff+0x5c>
 800cf4e:	4b2e      	ldr	r3, [pc, #184]	; (800d008 <__mdiff+0x10c>)
 800cf50:	4602      	mov	r2, r0
 800cf52:	f240 2145 	movw	r1, #581	; 0x245
 800cf56:	e7e5      	b.n	800cf24 <__mdiff+0x28>
 800cf58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf5c:	6926      	ldr	r6, [r4, #16]
 800cf5e:	60c5      	str	r5, [r0, #12]
 800cf60:	f104 0914 	add.w	r9, r4, #20
 800cf64:	f108 0514 	add.w	r5, r8, #20
 800cf68:	f100 0e14 	add.w	lr, r0, #20
 800cf6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf74:	f108 0210 	add.w	r2, r8, #16
 800cf78:	46f2      	mov	sl, lr
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf84:	fa11 f88b 	uxtah	r8, r1, fp
 800cf88:	b299      	uxth	r1, r3
 800cf8a:	0c1b      	lsrs	r3, r3, #16
 800cf8c:	eba8 0801 	sub.w	r8, r8, r1
 800cf90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf98:	fa1f f888 	uxth.w	r8, r8
 800cf9c:	1419      	asrs	r1, r3, #16
 800cf9e:	454e      	cmp	r6, r9
 800cfa0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cfa4:	f84a 3b04 	str.w	r3, [sl], #4
 800cfa8:	d8e8      	bhi.n	800cf7c <__mdiff+0x80>
 800cfaa:	1b33      	subs	r3, r6, r4
 800cfac:	3b15      	subs	r3, #21
 800cfae:	f023 0303 	bic.w	r3, r3, #3
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	3415      	adds	r4, #21
 800cfb6:	42a6      	cmp	r6, r4
 800cfb8:	bf38      	it	cc
 800cfba:	2304      	movcc	r3, #4
 800cfbc:	441d      	add	r5, r3
 800cfbe:	4473      	add	r3, lr
 800cfc0:	469e      	mov	lr, r3
 800cfc2:	462e      	mov	r6, r5
 800cfc4:	4566      	cmp	r6, ip
 800cfc6:	d30e      	bcc.n	800cfe6 <__mdiff+0xea>
 800cfc8:	f10c 0203 	add.w	r2, ip, #3
 800cfcc:	1b52      	subs	r2, r2, r5
 800cfce:	f022 0203 	bic.w	r2, r2, #3
 800cfd2:	3d03      	subs	r5, #3
 800cfd4:	45ac      	cmp	ip, r5
 800cfd6:	bf38      	it	cc
 800cfd8:	2200      	movcc	r2, #0
 800cfda:	4413      	add	r3, r2
 800cfdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cfe0:	b17a      	cbz	r2, 800d002 <__mdiff+0x106>
 800cfe2:	6107      	str	r7, [r0, #16]
 800cfe4:	e7a4      	b.n	800cf30 <__mdiff+0x34>
 800cfe6:	f856 8b04 	ldr.w	r8, [r6], #4
 800cfea:	fa11 f288 	uxtah	r2, r1, r8
 800cfee:	1414      	asrs	r4, r2, #16
 800cff0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cff4:	b292      	uxth	r2, r2
 800cff6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cffa:	f84e 2b04 	str.w	r2, [lr], #4
 800cffe:	1421      	asrs	r1, r4, #16
 800d000:	e7e0      	b.n	800cfc4 <__mdiff+0xc8>
 800d002:	3f01      	subs	r7, #1
 800d004:	e7ea      	b.n	800cfdc <__mdiff+0xe0>
 800d006:	bf00      	nop
 800d008:	0800ee06 	.word	0x0800ee06
 800d00c:	0800ee77 	.word	0x0800ee77

0800d010 <__ulp>:
 800d010:	b082      	sub	sp, #8
 800d012:	ed8d 0b00 	vstr	d0, [sp]
 800d016:	9a01      	ldr	r2, [sp, #4]
 800d018:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <__ulp+0x48>)
 800d01a:	4013      	ands	r3, r2
 800d01c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d020:	2b00      	cmp	r3, #0
 800d022:	dc08      	bgt.n	800d036 <__ulp+0x26>
 800d024:	425b      	negs	r3, r3
 800d026:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d02a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d02e:	da04      	bge.n	800d03a <__ulp+0x2a>
 800d030:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d034:	4113      	asrs	r3, r2
 800d036:	2200      	movs	r2, #0
 800d038:	e008      	b.n	800d04c <__ulp+0x3c>
 800d03a:	f1a2 0314 	sub.w	r3, r2, #20
 800d03e:	2b1e      	cmp	r3, #30
 800d040:	bfda      	itte	le
 800d042:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d046:	40da      	lsrle	r2, r3
 800d048:	2201      	movgt	r2, #1
 800d04a:	2300      	movs	r3, #0
 800d04c:	4619      	mov	r1, r3
 800d04e:	4610      	mov	r0, r2
 800d050:	ec41 0b10 	vmov	d0, r0, r1
 800d054:	b002      	add	sp, #8
 800d056:	4770      	bx	lr
 800d058:	7ff00000 	.word	0x7ff00000

0800d05c <__b2d>:
 800d05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d060:	6906      	ldr	r6, [r0, #16]
 800d062:	f100 0814 	add.w	r8, r0, #20
 800d066:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d06a:	1f37      	subs	r7, r6, #4
 800d06c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d070:	4610      	mov	r0, r2
 800d072:	f7ff fd53 	bl	800cb1c <__hi0bits>
 800d076:	f1c0 0320 	rsb	r3, r0, #32
 800d07a:	280a      	cmp	r0, #10
 800d07c:	600b      	str	r3, [r1, #0]
 800d07e:	491b      	ldr	r1, [pc, #108]	; (800d0ec <__b2d+0x90>)
 800d080:	dc15      	bgt.n	800d0ae <__b2d+0x52>
 800d082:	f1c0 0c0b 	rsb	ip, r0, #11
 800d086:	fa22 f30c 	lsr.w	r3, r2, ip
 800d08a:	45b8      	cmp	r8, r7
 800d08c:	ea43 0501 	orr.w	r5, r3, r1
 800d090:	bf34      	ite	cc
 800d092:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d096:	2300      	movcs	r3, #0
 800d098:	3015      	adds	r0, #21
 800d09a:	fa02 f000 	lsl.w	r0, r2, r0
 800d09e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d0a2:	4303      	orrs	r3, r0
 800d0a4:	461c      	mov	r4, r3
 800d0a6:	ec45 4b10 	vmov	d0, r4, r5
 800d0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ae:	45b8      	cmp	r8, r7
 800d0b0:	bf3a      	itte	cc
 800d0b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d0b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d0ba:	2300      	movcs	r3, #0
 800d0bc:	380b      	subs	r0, #11
 800d0be:	d012      	beq.n	800d0e6 <__b2d+0x8a>
 800d0c0:	f1c0 0120 	rsb	r1, r0, #32
 800d0c4:	fa23 f401 	lsr.w	r4, r3, r1
 800d0c8:	4082      	lsls	r2, r0
 800d0ca:	4322      	orrs	r2, r4
 800d0cc:	4547      	cmp	r7, r8
 800d0ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d0d2:	bf8c      	ite	hi
 800d0d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d0d8:	2200      	movls	r2, #0
 800d0da:	4083      	lsls	r3, r0
 800d0dc:	40ca      	lsrs	r2, r1
 800d0de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	e7de      	b.n	800d0a4 <__b2d+0x48>
 800d0e6:	ea42 0501 	orr.w	r5, r2, r1
 800d0ea:	e7db      	b.n	800d0a4 <__b2d+0x48>
 800d0ec:	3ff00000 	.word	0x3ff00000

0800d0f0 <__d2b>:
 800d0f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0f4:	460f      	mov	r7, r1
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	ec59 8b10 	vmov	r8, r9, d0
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	f7ff fc1b 	bl	800c938 <_Balloc>
 800d102:	4604      	mov	r4, r0
 800d104:	b930      	cbnz	r0, 800d114 <__d2b+0x24>
 800d106:	4602      	mov	r2, r0
 800d108:	4b24      	ldr	r3, [pc, #144]	; (800d19c <__d2b+0xac>)
 800d10a:	4825      	ldr	r0, [pc, #148]	; (800d1a0 <__d2b+0xb0>)
 800d10c:	f240 310f 	movw	r1, #783	; 0x30f
 800d110:	f7fe f910 	bl	800b334 <__assert_func>
 800d114:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d11c:	bb2d      	cbnz	r5, 800d16a <__d2b+0x7a>
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	f1b8 0300 	subs.w	r3, r8, #0
 800d124:	d026      	beq.n	800d174 <__d2b+0x84>
 800d126:	4668      	mov	r0, sp
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	f7ff fd17 	bl	800cb5c <__lo0bits>
 800d12e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d132:	b1e8      	cbz	r0, 800d170 <__d2b+0x80>
 800d134:	f1c0 0320 	rsb	r3, r0, #32
 800d138:	fa02 f303 	lsl.w	r3, r2, r3
 800d13c:	430b      	orrs	r3, r1
 800d13e:	40c2      	lsrs	r2, r0
 800d140:	6163      	str	r3, [r4, #20]
 800d142:	9201      	str	r2, [sp, #4]
 800d144:	9b01      	ldr	r3, [sp, #4]
 800d146:	61a3      	str	r3, [r4, #24]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bf14      	ite	ne
 800d14c:	2202      	movne	r2, #2
 800d14e:	2201      	moveq	r2, #1
 800d150:	6122      	str	r2, [r4, #16]
 800d152:	b1bd      	cbz	r5, 800d184 <__d2b+0x94>
 800d154:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d158:	4405      	add	r5, r0
 800d15a:	603d      	str	r5, [r7, #0]
 800d15c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d160:	6030      	str	r0, [r6, #0]
 800d162:	4620      	mov	r0, r4
 800d164:	b003      	add	sp, #12
 800d166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d16e:	e7d6      	b.n	800d11e <__d2b+0x2e>
 800d170:	6161      	str	r1, [r4, #20]
 800d172:	e7e7      	b.n	800d144 <__d2b+0x54>
 800d174:	a801      	add	r0, sp, #4
 800d176:	f7ff fcf1 	bl	800cb5c <__lo0bits>
 800d17a:	9b01      	ldr	r3, [sp, #4]
 800d17c:	6163      	str	r3, [r4, #20]
 800d17e:	3020      	adds	r0, #32
 800d180:	2201      	movs	r2, #1
 800d182:	e7e5      	b.n	800d150 <__d2b+0x60>
 800d184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d18c:	6038      	str	r0, [r7, #0]
 800d18e:	6918      	ldr	r0, [r3, #16]
 800d190:	f7ff fcc4 	bl	800cb1c <__hi0bits>
 800d194:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d198:	e7e2      	b.n	800d160 <__d2b+0x70>
 800d19a:	bf00      	nop
 800d19c:	0800ee06 	.word	0x0800ee06
 800d1a0:	0800ee77 	.word	0x0800ee77

0800d1a4 <__ratio>:
 800d1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a8:	4688      	mov	r8, r1
 800d1aa:	4669      	mov	r1, sp
 800d1ac:	4681      	mov	r9, r0
 800d1ae:	f7ff ff55 	bl	800d05c <__b2d>
 800d1b2:	a901      	add	r1, sp, #4
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	ec55 4b10 	vmov	r4, r5, d0
 800d1ba:	f7ff ff4f 	bl	800d05c <__b2d>
 800d1be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d1c6:	eba3 0c02 	sub.w	ip, r3, r2
 800d1ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d1d4:	ec51 0b10 	vmov	r0, r1, d0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	bfd6      	itet	le
 800d1dc:	460a      	movle	r2, r1
 800d1de:	462a      	movgt	r2, r5
 800d1e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1e4:	468b      	mov	fp, r1
 800d1e6:	462f      	mov	r7, r5
 800d1e8:	bfd4      	ite	le
 800d1ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d1ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	ee10 2a10 	vmov	r2, s0
 800d1f8:	465b      	mov	r3, fp
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 fb26 	bl	800084c <__aeabi_ddiv>
 800d200:	ec41 0b10 	vmov	d0, r0, r1
 800d204:	b003      	add	sp, #12
 800d206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d20a <__copybits>:
 800d20a:	3901      	subs	r1, #1
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	1149      	asrs	r1, r1, #5
 800d210:	6914      	ldr	r4, [r2, #16]
 800d212:	3101      	adds	r1, #1
 800d214:	f102 0314 	add.w	r3, r2, #20
 800d218:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d21c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d220:	1f05      	subs	r5, r0, #4
 800d222:	42a3      	cmp	r3, r4
 800d224:	d30c      	bcc.n	800d240 <__copybits+0x36>
 800d226:	1aa3      	subs	r3, r4, r2
 800d228:	3b11      	subs	r3, #17
 800d22a:	f023 0303 	bic.w	r3, r3, #3
 800d22e:	3211      	adds	r2, #17
 800d230:	42a2      	cmp	r2, r4
 800d232:	bf88      	it	hi
 800d234:	2300      	movhi	r3, #0
 800d236:	4418      	add	r0, r3
 800d238:	2300      	movs	r3, #0
 800d23a:	4288      	cmp	r0, r1
 800d23c:	d305      	bcc.n	800d24a <__copybits+0x40>
 800d23e:	bd70      	pop	{r4, r5, r6, pc}
 800d240:	f853 6b04 	ldr.w	r6, [r3], #4
 800d244:	f845 6f04 	str.w	r6, [r5, #4]!
 800d248:	e7eb      	b.n	800d222 <__copybits+0x18>
 800d24a:	f840 3b04 	str.w	r3, [r0], #4
 800d24e:	e7f4      	b.n	800d23a <__copybits+0x30>

0800d250 <__any_on>:
 800d250:	f100 0214 	add.w	r2, r0, #20
 800d254:	6900      	ldr	r0, [r0, #16]
 800d256:	114b      	asrs	r3, r1, #5
 800d258:	4298      	cmp	r0, r3
 800d25a:	b510      	push	{r4, lr}
 800d25c:	db11      	blt.n	800d282 <__any_on+0x32>
 800d25e:	dd0a      	ble.n	800d276 <__any_on+0x26>
 800d260:	f011 011f 	ands.w	r1, r1, #31
 800d264:	d007      	beq.n	800d276 <__any_on+0x26>
 800d266:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d26a:	fa24 f001 	lsr.w	r0, r4, r1
 800d26e:	fa00 f101 	lsl.w	r1, r0, r1
 800d272:	428c      	cmp	r4, r1
 800d274:	d10b      	bne.n	800d28e <__any_on+0x3e>
 800d276:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d803      	bhi.n	800d286 <__any_on+0x36>
 800d27e:	2000      	movs	r0, #0
 800d280:	bd10      	pop	{r4, pc}
 800d282:	4603      	mov	r3, r0
 800d284:	e7f7      	b.n	800d276 <__any_on+0x26>
 800d286:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d28a:	2900      	cmp	r1, #0
 800d28c:	d0f5      	beq.n	800d27a <__any_on+0x2a>
 800d28e:	2001      	movs	r0, #1
 800d290:	e7f6      	b.n	800d280 <__any_on+0x30>
	...

0800d294 <_strtol_l.constprop.0>:
 800d294:	2b01      	cmp	r3, #1
 800d296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29a:	d001      	beq.n	800d2a0 <_strtol_l.constprop.0+0xc>
 800d29c:	2b24      	cmp	r3, #36	; 0x24
 800d29e:	d906      	bls.n	800d2ae <_strtol_l.constprop.0+0x1a>
 800d2a0:	f7fd fffe 	bl	800b2a0 <__errno>
 800d2a4:	2316      	movs	r3, #22
 800d2a6:	6003      	str	r3, [r0, #0]
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d394 <_strtol_l.constprop.0+0x100>
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	462e      	mov	r6, r5
 800d2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d2be:	f017 0708 	ands.w	r7, r7, #8
 800d2c2:	d1f7      	bne.n	800d2b4 <_strtol_l.constprop.0+0x20>
 800d2c4:	2c2d      	cmp	r4, #45	; 0x2d
 800d2c6:	d132      	bne.n	800d32e <_strtol_l.constprop.0+0x9a>
 800d2c8:	782c      	ldrb	r4, [r5, #0]
 800d2ca:	2701      	movs	r7, #1
 800d2cc:	1cb5      	adds	r5, r6, #2
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d05b      	beq.n	800d38a <_strtol_l.constprop.0+0xf6>
 800d2d2:	2b10      	cmp	r3, #16
 800d2d4:	d109      	bne.n	800d2ea <_strtol_l.constprop.0+0x56>
 800d2d6:	2c30      	cmp	r4, #48	; 0x30
 800d2d8:	d107      	bne.n	800d2ea <_strtol_l.constprop.0+0x56>
 800d2da:	782c      	ldrb	r4, [r5, #0]
 800d2dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d2e0:	2c58      	cmp	r4, #88	; 0x58
 800d2e2:	d14d      	bne.n	800d380 <_strtol_l.constprop.0+0xec>
 800d2e4:	786c      	ldrb	r4, [r5, #1]
 800d2e6:	2310      	movs	r3, #16
 800d2e8:	3502      	adds	r5, #2
 800d2ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d2ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2f2:	f04f 0e00 	mov.w	lr, #0
 800d2f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800d2fa:	4676      	mov	r6, lr
 800d2fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800d300:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d304:	f1bc 0f09 	cmp.w	ip, #9
 800d308:	d816      	bhi.n	800d338 <_strtol_l.constprop.0+0xa4>
 800d30a:	4664      	mov	r4, ip
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	dd24      	ble.n	800d35a <_strtol_l.constprop.0+0xc6>
 800d310:	f1be 3fff 	cmp.w	lr, #4294967295
 800d314:	d008      	beq.n	800d328 <_strtol_l.constprop.0+0x94>
 800d316:	45b1      	cmp	r9, r6
 800d318:	d31c      	bcc.n	800d354 <_strtol_l.constprop.0+0xc0>
 800d31a:	d101      	bne.n	800d320 <_strtol_l.constprop.0+0x8c>
 800d31c:	45a2      	cmp	sl, r4
 800d31e:	db19      	blt.n	800d354 <_strtol_l.constprop.0+0xc0>
 800d320:	fb06 4603 	mla	r6, r6, r3, r4
 800d324:	f04f 0e01 	mov.w	lr, #1
 800d328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d32c:	e7e8      	b.n	800d300 <_strtol_l.constprop.0+0x6c>
 800d32e:	2c2b      	cmp	r4, #43	; 0x2b
 800d330:	bf04      	itt	eq
 800d332:	782c      	ldrbeq	r4, [r5, #0]
 800d334:	1cb5      	addeq	r5, r6, #2
 800d336:	e7ca      	b.n	800d2ce <_strtol_l.constprop.0+0x3a>
 800d338:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d33c:	f1bc 0f19 	cmp.w	ip, #25
 800d340:	d801      	bhi.n	800d346 <_strtol_l.constprop.0+0xb2>
 800d342:	3c37      	subs	r4, #55	; 0x37
 800d344:	e7e2      	b.n	800d30c <_strtol_l.constprop.0+0x78>
 800d346:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d34a:	f1bc 0f19 	cmp.w	ip, #25
 800d34e:	d804      	bhi.n	800d35a <_strtol_l.constprop.0+0xc6>
 800d350:	3c57      	subs	r4, #87	; 0x57
 800d352:	e7db      	b.n	800d30c <_strtol_l.constprop.0+0x78>
 800d354:	f04f 3eff 	mov.w	lr, #4294967295
 800d358:	e7e6      	b.n	800d328 <_strtol_l.constprop.0+0x94>
 800d35a:	f1be 3fff 	cmp.w	lr, #4294967295
 800d35e:	d105      	bne.n	800d36c <_strtol_l.constprop.0+0xd8>
 800d360:	2322      	movs	r3, #34	; 0x22
 800d362:	6003      	str	r3, [r0, #0]
 800d364:	4646      	mov	r6, r8
 800d366:	b942      	cbnz	r2, 800d37a <_strtol_l.constprop.0+0xe6>
 800d368:	4630      	mov	r0, r6
 800d36a:	e79e      	b.n	800d2aa <_strtol_l.constprop.0+0x16>
 800d36c:	b107      	cbz	r7, 800d370 <_strtol_l.constprop.0+0xdc>
 800d36e:	4276      	negs	r6, r6
 800d370:	2a00      	cmp	r2, #0
 800d372:	d0f9      	beq.n	800d368 <_strtol_l.constprop.0+0xd4>
 800d374:	f1be 0f00 	cmp.w	lr, #0
 800d378:	d000      	beq.n	800d37c <_strtol_l.constprop.0+0xe8>
 800d37a:	1e69      	subs	r1, r5, #1
 800d37c:	6011      	str	r1, [r2, #0]
 800d37e:	e7f3      	b.n	800d368 <_strtol_l.constprop.0+0xd4>
 800d380:	2430      	movs	r4, #48	; 0x30
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1b1      	bne.n	800d2ea <_strtol_l.constprop.0+0x56>
 800d386:	2308      	movs	r3, #8
 800d388:	e7af      	b.n	800d2ea <_strtol_l.constprop.0+0x56>
 800d38a:	2c30      	cmp	r4, #48	; 0x30
 800d38c:	d0a5      	beq.n	800d2da <_strtol_l.constprop.0+0x46>
 800d38e:	230a      	movs	r3, #10
 800d390:	e7ab      	b.n	800d2ea <_strtol_l.constprop.0+0x56>
 800d392:	bf00      	nop
 800d394:	0800efcd 	.word	0x0800efcd

0800d398 <_strtol_r>:
 800d398:	f7ff bf7c 	b.w	800d294 <_strtol_l.constprop.0>

0800d39c <__ascii_wctomb>:
 800d39c:	b149      	cbz	r1, 800d3b2 <__ascii_wctomb+0x16>
 800d39e:	2aff      	cmp	r2, #255	; 0xff
 800d3a0:	bf85      	ittet	hi
 800d3a2:	238a      	movhi	r3, #138	; 0x8a
 800d3a4:	6003      	strhi	r3, [r0, #0]
 800d3a6:	700a      	strbls	r2, [r1, #0]
 800d3a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3ac:	bf98      	it	ls
 800d3ae:	2001      	movls	r0, #1
 800d3b0:	4770      	bx	lr
 800d3b2:	4608      	mov	r0, r1
 800d3b4:	4770      	bx	lr

0800d3b6 <__ssputs_r>:
 800d3b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ba:	688e      	ldr	r6, [r1, #8]
 800d3bc:	461f      	mov	r7, r3
 800d3be:	42be      	cmp	r6, r7
 800d3c0:	680b      	ldr	r3, [r1, #0]
 800d3c2:	4682      	mov	sl, r0
 800d3c4:	460c      	mov	r4, r1
 800d3c6:	4690      	mov	r8, r2
 800d3c8:	d82c      	bhi.n	800d424 <__ssputs_r+0x6e>
 800d3ca:	898a      	ldrh	r2, [r1, #12]
 800d3cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3d0:	d026      	beq.n	800d420 <__ssputs_r+0x6a>
 800d3d2:	6965      	ldr	r5, [r4, #20]
 800d3d4:	6909      	ldr	r1, [r1, #16]
 800d3d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3da:	eba3 0901 	sub.w	r9, r3, r1
 800d3de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3e2:	1c7b      	adds	r3, r7, #1
 800d3e4:	444b      	add	r3, r9
 800d3e6:	106d      	asrs	r5, r5, #1
 800d3e8:	429d      	cmp	r5, r3
 800d3ea:	bf38      	it	cc
 800d3ec:	461d      	movcc	r5, r3
 800d3ee:	0553      	lsls	r3, r2, #21
 800d3f0:	d527      	bpl.n	800d442 <__ssputs_r+0x8c>
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	f7ff fa02 	bl	800c7fc <_malloc_r>
 800d3f8:	4606      	mov	r6, r0
 800d3fa:	b360      	cbz	r0, 800d456 <__ssputs_r+0xa0>
 800d3fc:	6921      	ldr	r1, [r4, #16]
 800d3fe:	464a      	mov	r2, r9
 800d400:	f7fd ff7a 	bl	800b2f8 <memcpy>
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d40e:	81a3      	strh	r3, [r4, #12]
 800d410:	6126      	str	r6, [r4, #16]
 800d412:	6165      	str	r5, [r4, #20]
 800d414:	444e      	add	r6, r9
 800d416:	eba5 0509 	sub.w	r5, r5, r9
 800d41a:	6026      	str	r6, [r4, #0]
 800d41c:	60a5      	str	r5, [r4, #8]
 800d41e:	463e      	mov	r6, r7
 800d420:	42be      	cmp	r6, r7
 800d422:	d900      	bls.n	800d426 <__ssputs_r+0x70>
 800d424:	463e      	mov	r6, r7
 800d426:	6820      	ldr	r0, [r4, #0]
 800d428:	4632      	mov	r2, r6
 800d42a:	4641      	mov	r1, r8
 800d42c:	f000 f9dc 	bl	800d7e8 <memmove>
 800d430:	68a3      	ldr	r3, [r4, #8]
 800d432:	1b9b      	subs	r3, r3, r6
 800d434:	60a3      	str	r3, [r4, #8]
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	4433      	add	r3, r6
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	2000      	movs	r0, #0
 800d43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d442:	462a      	mov	r2, r5
 800d444:	f000 fa17 	bl	800d876 <_realloc_r>
 800d448:	4606      	mov	r6, r0
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d1e0      	bne.n	800d410 <__ssputs_r+0x5a>
 800d44e:	6921      	ldr	r1, [r4, #16]
 800d450:	4650      	mov	r0, sl
 800d452:	f7fe fe07 	bl	800c064 <_free_r>
 800d456:	230c      	movs	r3, #12
 800d458:	f8ca 3000 	str.w	r3, [sl]
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	f04f 30ff 	mov.w	r0, #4294967295
 800d468:	e7e9      	b.n	800d43e <__ssputs_r+0x88>
	...

0800d46c <_svfiprintf_r>:
 800d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	4698      	mov	r8, r3
 800d472:	898b      	ldrh	r3, [r1, #12]
 800d474:	061b      	lsls	r3, r3, #24
 800d476:	b09d      	sub	sp, #116	; 0x74
 800d478:	4607      	mov	r7, r0
 800d47a:	460d      	mov	r5, r1
 800d47c:	4614      	mov	r4, r2
 800d47e:	d50e      	bpl.n	800d49e <_svfiprintf_r+0x32>
 800d480:	690b      	ldr	r3, [r1, #16]
 800d482:	b963      	cbnz	r3, 800d49e <_svfiprintf_r+0x32>
 800d484:	2140      	movs	r1, #64	; 0x40
 800d486:	f7ff f9b9 	bl	800c7fc <_malloc_r>
 800d48a:	6028      	str	r0, [r5, #0]
 800d48c:	6128      	str	r0, [r5, #16]
 800d48e:	b920      	cbnz	r0, 800d49a <_svfiprintf_r+0x2e>
 800d490:	230c      	movs	r3, #12
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	e0d0      	b.n	800d63c <_svfiprintf_r+0x1d0>
 800d49a:	2340      	movs	r3, #64	; 0x40
 800d49c:	616b      	str	r3, [r5, #20]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a2:	2320      	movs	r3, #32
 800d4a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ac:	2330      	movs	r3, #48	; 0x30
 800d4ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d654 <_svfiprintf_r+0x1e8>
 800d4b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4b6:	f04f 0901 	mov.w	r9, #1
 800d4ba:	4623      	mov	r3, r4
 800d4bc:	469a      	mov	sl, r3
 800d4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c2:	b10a      	cbz	r2, 800d4c8 <_svfiprintf_r+0x5c>
 800d4c4:	2a25      	cmp	r2, #37	; 0x25
 800d4c6:	d1f9      	bne.n	800d4bc <_svfiprintf_r+0x50>
 800d4c8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4cc:	d00b      	beq.n	800d4e6 <_svfiprintf_r+0x7a>
 800d4ce:	465b      	mov	r3, fp
 800d4d0:	4622      	mov	r2, r4
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	f7ff ff6e 	bl	800d3b6 <__ssputs_r>
 800d4da:	3001      	adds	r0, #1
 800d4dc:	f000 80a9 	beq.w	800d632 <_svfiprintf_r+0x1c6>
 800d4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4e2:	445a      	add	r2, fp
 800d4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 80a1 	beq.w	800d632 <_svfiprintf_r+0x1c6>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4fa:	f10a 0a01 	add.w	sl, sl, #1
 800d4fe:	9304      	str	r3, [sp, #16]
 800d500:	9307      	str	r3, [sp, #28]
 800d502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d506:	931a      	str	r3, [sp, #104]	; 0x68
 800d508:	4654      	mov	r4, sl
 800d50a:	2205      	movs	r2, #5
 800d50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d510:	4850      	ldr	r0, [pc, #320]	; (800d654 <_svfiprintf_r+0x1e8>)
 800d512:	f7f2 fe5d 	bl	80001d0 <memchr>
 800d516:	9a04      	ldr	r2, [sp, #16]
 800d518:	b9d8      	cbnz	r0, 800d552 <_svfiprintf_r+0xe6>
 800d51a:	06d0      	lsls	r0, r2, #27
 800d51c:	bf44      	itt	mi
 800d51e:	2320      	movmi	r3, #32
 800d520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d524:	0711      	lsls	r1, r2, #28
 800d526:	bf44      	itt	mi
 800d528:	232b      	movmi	r3, #43	; 0x2b
 800d52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d52e:	f89a 3000 	ldrb.w	r3, [sl]
 800d532:	2b2a      	cmp	r3, #42	; 0x2a
 800d534:	d015      	beq.n	800d562 <_svfiprintf_r+0xf6>
 800d536:	9a07      	ldr	r2, [sp, #28]
 800d538:	4654      	mov	r4, sl
 800d53a:	2000      	movs	r0, #0
 800d53c:	f04f 0c0a 	mov.w	ip, #10
 800d540:	4621      	mov	r1, r4
 800d542:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d546:	3b30      	subs	r3, #48	; 0x30
 800d548:	2b09      	cmp	r3, #9
 800d54a:	d94d      	bls.n	800d5e8 <_svfiprintf_r+0x17c>
 800d54c:	b1b0      	cbz	r0, 800d57c <_svfiprintf_r+0x110>
 800d54e:	9207      	str	r2, [sp, #28]
 800d550:	e014      	b.n	800d57c <_svfiprintf_r+0x110>
 800d552:	eba0 0308 	sub.w	r3, r0, r8
 800d556:	fa09 f303 	lsl.w	r3, r9, r3
 800d55a:	4313      	orrs	r3, r2
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	46a2      	mov	sl, r4
 800d560:	e7d2      	b.n	800d508 <_svfiprintf_r+0x9c>
 800d562:	9b03      	ldr	r3, [sp, #12]
 800d564:	1d19      	adds	r1, r3, #4
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	9103      	str	r1, [sp, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bfbb      	ittet	lt
 800d56e:	425b      	neglt	r3, r3
 800d570:	f042 0202 	orrlt.w	r2, r2, #2
 800d574:	9307      	strge	r3, [sp, #28]
 800d576:	9307      	strlt	r3, [sp, #28]
 800d578:	bfb8      	it	lt
 800d57a:	9204      	strlt	r2, [sp, #16]
 800d57c:	7823      	ldrb	r3, [r4, #0]
 800d57e:	2b2e      	cmp	r3, #46	; 0x2e
 800d580:	d10c      	bne.n	800d59c <_svfiprintf_r+0x130>
 800d582:	7863      	ldrb	r3, [r4, #1]
 800d584:	2b2a      	cmp	r3, #42	; 0x2a
 800d586:	d134      	bne.n	800d5f2 <_svfiprintf_r+0x186>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	1d1a      	adds	r2, r3, #4
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	9203      	str	r2, [sp, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	bfb8      	it	lt
 800d594:	f04f 33ff 	movlt.w	r3, #4294967295
 800d598:	3402      	adds	r4, #2
 800d59a:	9305      	str	r3, [sp, #20]
 800d59c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d664 <_svfiprintf_r+0x1f8>
 800d5a0:	7821      	ldrb	r1, [r4, #0]
 800d5a2:	2203      	movs	r2, #3
 800d5a4:	4650      	mov	r0, sl
 800d5a6:	f7f2 fe13 	bl	80001d0 <memchr>
 800d5aa:	b138      	cbz	r0, 800d5bc <_svfiprintf_r+0x150>
 800d5ac:	9b04      	ldr	r3, [sp, #16]
 800d5ae:	eba0 000a 	sub.w	r0, r0, sl
 800d5b2:	2240      	movs	r2, #64	; 0x40
 800d5b4:	4082      	lsls	r2, r0
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	3401      	adds	r4, #1
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5c0:	4825      	ldr	r0, [pc, #148]	; (800d658 <_svfiprintf_r+0x1ec>)
 800d5c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5c6:	2206      	movs	r2, #6
 800d5c8:	f7f2 fe02 	bl	80001d0 <memchr>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d038      	beq.n	800d642 <_svfiprintf_r+0x1d6>
 800d5d0:	4b22      	ldr	r3, [pc, #136]	; (800d65c <_svfiprintf_r+0x1f0>)
 800d5d2:	bb1b      	cbnz	r3, 800d61c <_svfiprintf_r+0x1b0>
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	3307      	adds	r3, #7
 800d5d8:	f023 0307 	bic.w	r3, r3, #7
 800d5dc:	3308      	adds	r3, #8
 800d5de:	9303      	str	r3, [sp, #12]
 800d5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e2:	4433      	add	r3, r6
 800d5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e6:	e768      	b.n	800d4ba <_svfiprintf_r+0x4e>
 800d5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	e7a6      	b.n	800d540 <_svfiprintf_r+0xd4>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	3401      	adds	r4, #1
 800d5f6:	9305      	str	r3, [sp, #20]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	f04f 0c0a 	mov.w	ip, #10
 800d5fe:	4620      	mov	r0, r4
 800d600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d604:	3a30      	subs	r2, #48	; 0x30
 800d606:	2a09      	cmp	r2, #9
 800d608:	d903      	bls.n	800d612 <_svfiprintf_r+0x1a6>
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d0c6      	beq.n	800d59c <_svfiprintf_r+0x130>
 800d60e:	9105      	str	r1, [sp, #20]
 800d610:	e7c4      	b.n	800d59c <_svfiprintf_r+0x130>
 800d612:	fb0c 2101 	mla	r1, ip, r1, r2
 800d616:	4604      	mov	r4, r0
 800d618:	2301      	movs	r3, #1
 800d61a:	e7f0      	b.n	800d5fe <_svfiprintf_r+0x192>
 800d61c:	ab03      	add	r3, sp, #12
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	462a      	mov	r2, r5
 800d622:	4b0f      	ldr	r3, [pc, #60]	; (800d660 <_svfiprintf_r+0x1f4>)
 800d624:	a904      	add	r1, sp, #16
 800d626:	4638      	mov	r0, r7
 800d628:	f7fc feda 	bl	800a3e0 <_printf_float>
 800d62c:	1c42      	adds	r2, r0, #1
 800d62e:	4606      	mov	r6, r0
 800d630:	d1d6      	bne.n	800d5e0 <_svfiprintf_r+0x174>
 800d632:	89ab      	ldrh	r3, [r5, #12]
 800d634:	065b      	lsls	r3, r3, #25
 800d636:	f53f af2d 	bmi.w	800d494 <_svfiprintf_r+0x28>
 800d63a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d63c:	b01d      	add	sp, #116	; 0x74
 800d63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d642:	ab03      	add	r3, sp, #12
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	462a      	mov	r2, r5
 800d648:	4b05      	ldr	r3, [pc, #20]	; (800d660 <_svfiprintf_r+0x1f4>)
 800d64a:	a904      	add	r1, sp, #16
 800d64c:	4638      	mov	r0, r7
 800d64e:	f7fd f96b 	bl	800a928 <_printf_i>
 800d652:	e7eb      	b.n	800d62c <_svfiprintf_r+0x1c0>
 800d654:	0800f0cd 	.word	0x0800f0cd
 800d658:	0800f0d7 	.word	0x0800f0d7
 800d65c:	0800a3e1 	.word	0x0800a3e1
 800d660:	0800d3b7 	.word	0x0800d3b7
 800d664:	0800f0d3 	.word	0x0800f0d3

0800d668 <__sflush_r>:
 800d668:	898a      	ldrh	r2, [r1, #12]
 800d66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66e:	4605      	mov	r5, r0
 800d670:	0710      	lsls	r0, r2, #28
 800d672:	460c      	mov	r4, r1
 800d674:	d458      	bmi.n	800d728 <__sflush_r+0xc0>
 800d676:	684b      	ldr	r3, [r1, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	dc05      	bgt.n	800d688 <__sflush_r+0x20>
 800d67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d67e:	2b00      	cmp	r3, #0
 800d680:	dc02      	bgt.n	800d688 <__sflush_r+0x20>
 800d682:	2000      	movs	r0, #0
 800d684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	d0f9      	beq.n	800d682 <__sflush_r+0x1a>
 800d68e:	2300      	movs	r3, #0
 800d690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d694:	682f      	ldr	r7, [r5, #0]
 800d696:	6a21      	ldr	r1, [r4, #32]
 800d698:	602b      	str	r3, [r5, #0]
 800d69a:	d032      	beq.n	800d702 <__sflush_r+0x9a>
 800d69c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d69e:	89a3      	ldrh	r3, [r4, #12]
 800d6a0:	075a      	lsls	r2, r3, #29
 800d6a2:	d505      	bpl.n	800d6b0 <__sflush_r+0x48>
 800d6a4:	6863      	ldr	r3, [r4, #4]
 800d6a6:	1ac0      	subs	r0, r0, r3
 800d6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6aa:	b10b      	cbz	r3, 800d6b0 <__sflush_r+0x48>
 800d6ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6ae:	1ac0      	subs	r0, r0, r3
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b6:	6a21      	ldr	r1, [r4, #32]
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	47b0      	blx	r6
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	89a3      	ldrh	r3, [r4, #12]
 800d6c0:	d106      	bne.n	800d6d0 <__sflush_r+0x68>
 800d6c2:	6829      	ldr	r1, [r5, #0]
 800d6c4:	291d      	cmp	r1, #29
 800d6c6:	d82b      	bhi.n	800d720 <__sflush_r+0xb8>
 800d6c8:	4a29      	ldr	r2, [pc, #164]	; (800d770 <__sflush_r+0x108>)
 800d6ca:	410a      	asrs	r2, r1
 800d6cc:	07d6      	lsls	r6, r2, #31
 800d6ce:	d427      	bmi.n	800d720 <__sflush_r+0xb8>
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	6062      	str	r2, [r4, #4]
 800d6d4:	04d9      	lsls	r1, r3, #19
 800d6d6:	6922      	ldr	r2, [r4, #16]
 800d6d8:	6022      	str	r2, [r4, #0]
 800d6da:	d504      	bpl.n	800d6e6 <__sflush_r+0x7e>
 800d6dc:	1c42      	adds	r2, r0, #1
 800d6de:	d101      	bne.n	800d6e4 <__sflush_r+0x7c>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b903      	cbnz	r3, 800d6e6 <__sflush_r+0x7e>
 800d6e4:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6e8:	602f      	str	r7, [r5, #0]
 800d6ea:	2900      	cmp	r1, #0
 800d6ec:	d0c9      	beq.n	800d682 <__sflush_r+0x1a>
 800d6ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f2:	4299      	cmp	r1, r3
 800d6f4:	d002      	beq.n	800d6fc <__sflush_r+0x94>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f7fe fcb4 	bl	800c064 <_free_r>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	6360      	str	r0, [r4, #52]	; 0x34
 800d700:	e7c0      	b.n	800d684 <__sflush_r+0x1c>
 800d702:	2301      	movs	r3, #1
 800d704:	4628      	mov	r0, r5
 800d706:	47b0      	blx	r6
 800d708:	1c41      	adds	r1, r0, #1
 800d70a:	d1c8      	bne.n	800d69e <__sflush_r+0x36>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0c5      	beq.n	800d69e <__sflush_r+0x36>
 800d712:	2b1d      	cmp	r3, #29
 800d714:	d001      	beq.n	800d71a <__sflush_r+0xb2>
 800d716:	2b16      	cmp	r3, #22
 800d718:	d101      	bne.n	800d71e <__sflush_r+0xb6>
 800d71a:	602f      	str	r7, [r5, #0]
 800d71c:	e7b1      	b.n	800d682 <__sflush_r+0x1a>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	e7ad      	b.n	800d684 <__sflush_r+0x1c>
 800d728:	690f      	ldr	r7, [r1, #16]
 800d72a:	2f00      	cmp	r7, #0
 800d72c:	d0a9      	beq.n	800d682 <__sflush_r+0x1a>
 800d72e:	0793      	lsls	r3, r2, #30
 800d730:	680e      	ldr	r6, [r1, #0]
 800d732:	bf08      	it	eq
 800d734:	694b      	ldreq	r3, [r1, #20]
 800d736:	600f      	str	r7, [r1, #0]
 800d738:	bf18      	it	ne
 800d73a:	2300      	movne	r3, #0
 800d73c:	eba6 0807 	sub.w	r8, r6, r7
 800d740:	608b      	str	r3, [r1, #8]
 800d742:	f1b8 0f00 	cmp.w	r8, #0
 800d746:	dd9c      	ble.n	800d682 <__sflush_r+0x1a>
 800d748:	6a21      	ldr	r1, [r4, #32]
 800d74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d74c:	4643      	mov	r3, r8
 800d74e:	463a      	mov	r2, r7
 800d750:	4628      	mov	r0, r5
 800d752:	47b0      	blx	r6
 800d754:	2800      	cmp	r0, #0
 800d756:	dc06      	bgt.n	800d766 <__sflush_r+0xfe>
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75e:	81a3      	strh	r3, [r4, #12]
 800d760:	f04f 30ff 	mov.w	r0, #4294967295
 800d764:	e78e      	b.n	800d684 <__sflush_r+0x1c>
 800d766:	4407      	add	r7, r0
 800d768:	eba8 0800 	sub.w	r8, r8, r0
 800d76c:	e7e9      	b.n	800d742 <__sflush_r+0xda>
 800d76e:	bf00      	nop
 800d770:	dfbffffe 	.word	0xdfbffffe

0800d774 <_fflush_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	690b      	ldr	r3, [r1, #16]
 800d778:	4605      	mov	r5, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	b913      	cbnz	r3, 800d784 <_fflush_r+0x10>
 800d77e:	2500      	movs	r5, #0
 800d780:	4628      	mov	r0, r5
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	b118      	cbz	r0, 800d78e <_fflush_r+0x1a>
 800d786:	6a03      	ldr	r3, [r0, #32]
 800d788:	b90b      	cbnz	r3, 800d78e <_fflush_r+0x1a>
 800d78a:	f7fd fc79 	bl	800b080 <__sinit>
 800d78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0f3      	beq.n	800d77e <_fflush_r+0xa>
 800d796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d798:	07d0      	lsls	r0, r2, #31
 800d79a:	d404      	bmi.n	800d7a6 <_fflush_r+0x32>
 800d79c:	0599      	lsls	r1, r3, #22
 800d79e:	d402      	bmi.n	800d7a6 <_fflush_r+0x32>
 800d7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7a2:	f7fd fda7 	bl	800b2f4 <__retarget_lock_acquire_recursive>
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	f7ff ff5d 	bl	800d668 <__sflush_r>
 800d7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7b0:	07da      	lsls	r2, r3, #31
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	d4e4      	bmi.n	800d780 <_fflush_r+0xc>
 800d7b6:	89a3      	ldrh	r3, [r4, #12]
 800d7b8:	059b      	lsls	r3, r3, #22
 800d7ba:	d4e1      	bmi.n	800d780 <_fflush_r+0xc>
 800d7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7be:	f7fd fd9a 	bl	800b2f6 <__retarget_lock_release_recursive>
 800d7c2:	e7dd      	b.n	800d780 <_fflush_r+0xc>

0800d7c4 <fiprintf>:
 800d7c4:	b40e      	push	{r1, r2, r3}
 800d7c6:	b503      	push	{r0, r1, lr}
 800d7c8:	4601      	mov	r1, r0
 800d7ca:	ab03      	add	r3, sp, #12
 800d7cc:	4805      	ldr	r0, [pc, #20]	; (800d7e4 <fiprintf+0x20>)
 800d7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d2:	6800      	ldr	r0, [r0, #0]
 800d7d4:	9301      	str	r3, [sp, #4]
 800d7d6:	f000 f8a7 	bl	800d928 <_vfiprintf_r>
 800d7da:	b002      	add	sp, #8
 800d7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e0:	b003      	add	sp, #12
 800d7e2:	4770      	bx	lr
 800d7e4:	200001f0 	.word	0x200001f0

0800d7e8 <memmove>:
 800d7e8:	4288      	cmp	r0, r1
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	eb01 0402 	add.w	r4, r1, r2
 800d7f0:	d902      	bls.n	800d7f8 <memmove+0x10>
 800d7f2:	4284      	cmp	r4, r0
 800d7f4:	4623      	mov	r3, r4
 800d7f6:	d807      	bhi.n	800d808 <memmove+0x20>
 800d7f8:	1e43      	subs	r3, r0, #1
 800d7fa:	42a1      	cmp	r1, r4
 800d7fc:	d008      	beq.n	800d810 <memmove+0x28>
 800d7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d802:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d806:	e7f8      	b.n	800d7fa <memmove+0x12>
 800d808:	4402      	add	r2, r0
 800d80a:	4601      	mov	r1, r0
 800d80c:	428a      	cmp	r2, r1
 800d80e:	d100      	bne.n	800d812 <memmove+0x2a>
 800d810:	bd10      	pop	{r4, pc}
 800d812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d81a:	e7f7      	b.n	800d80c <memmove+0x24>

0800d81c <_sbrk_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4d06      	ldr	r5, [pc, #24]	; (800d838 <_sbrk_r+0x1c>)
 800d820:	2300      	movs	r3, #0
 800d822:	4604      	mov	r4, r0
 800d824:	4608      	mov	r0, r1
 800d826:	602b      	str	r3, [r5, #0]
 800d828:	f7f4 fd62 	bl	80022f0 <_sbrk>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d102      	bne.n	800d836 <_sbrk_r+0x1a>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	b103      	cbz	r3, 800d836 <_sbrk_r+0x1a>
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	20000960 	.word	0x20000960

0800d83c <abort>:
 800d83c:	b508      	push	{r3, lr}
 800d83e:	2006      	movs	r0, #6
 800d840:	f000 fa4a 	bl	800dcd8 <raise>
 800d844:	2001      	movs	r0, #1
 800d846:	f7f4 fcdb 	bl	8002200 <_exit>

0800d84a <_calloc_r>:
 800d84a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d84c:	fba1 2402 	umull	r2, r4, r1, r2
 800d850:	b94c      	cbnz	r4, 800d866 <_calloc_r+0x1c>
 800d852:	4611      	mov	r1, r2
 800d854:	9201      	str	r2, [sp, #4]
 800d856:	f7fe ffd1 	bl	800c7fc <_malloc_r>
 800d85a:	9a01      	ldr	r2, [sp, #4]
 800d85c:	4605      	mov	r5, r0
 800d85e:	b930      	cbnz	r0, 800d86e <_calloc_r+0x24>
 800d860:	4628      	mov	r0, r5
 800d862:	b003      	add	sp, #12
 800d864:	bd30      	pop	{r4, r5, pc}
 800d866:	220c      	movs	r2, #12
 800d868:	6002      	str	r2, [r0, #0]
 800d86a:	2500      	movs	r5, #0
 800d86c:	e7f8      	b.n	800d860 <_calloc_r+0x16>
 800d86e:	4621      	mov	r1, r4
 800d870:	f7fd fc9f 	bl	800b1b2 <memset>
 800d874:	e7f4      	b.n	800d860 <_calloc_r+0x16>

0800d876 <_realloc_r>:
 800d876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87a:	4680      	mov	r8, r0
 800d87c:	4614      	mov	r4, r2
 800d87e:	460e      	mov	r6, r1
 800d880:	b921      	cbnz	r1, 800d88c <_realloc_r+0x16>
 800d882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d886:	4611      	mov	r1, r2
 800d888:	f7fe bfb8 	b.w	800c7fc <_malloc_r>
 800d88c:	b92a      	cbnz	r2, 800d89a <_realloc_r+0x24>
 800d88e:	f7fe fbe9 	bl	800c064 <_free_r>
 800d892:	4625      	mov	r5, r4
 800d894:	4628      	mov	r0, r5
 800d896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89a:	f000 fa39 	bl	800dd10 <_malloc_usable_size_r>
 800d89e:	4284      	cmp	r4, r0
 800d8a0:	4607      	mov	r7, r0
 800d8a2:	d802      	bhi.n	800d8aa <_realloc_r+0x34>
 800d8a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8a8:	d812      	bhi.n	800d8d0 <_realloc_r+0x5a>
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	f7fe ffa5 	bl	800c7fc <_malloc_r>
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d0ed      	beq.n	800d894 <_realloc_r+0x1e>
 800d8b8:	42bc      	cmp	r4, r7
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	4631      	mov	r1, r6
 800d8be:	bf28      	it	cs
 800d8c0:	463a      	movcs	r2, r7
 800d8c2:	f7fd fd19 	bl	800b2f8 <memcpy>
 800d8c6:	4631      	mov	r1, r6
 800d8c8:	4640      	mov	r0, r8
 800d8ca:	f7fe fbcb 	bl	800c064 <_free_r>
 800d8ce:	e7e1      	b.n	800d894 <_realloc_r+0x1e>
 800d8d0:	4635      	mov	r5, r6
 800d8d2:	e7df      	b.n	800d894 <_realloc_r+0x1e>

0800d8d4 <__sfputc_r>:
 800d8d4:	6893      	ldr	r3, [r2, #8]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	b410      	push	{r4}
 800d8dc:	6093      	str	r3, [r2, #8]
 800d8de:	da08      	bge.n	800d8f2 <__sfputc_r+0x1e>
 800d8e0:	6994      	ldr	r4, [r2, #24]
 800d8e2:	42a3      	cmp	r3, r4
 800d8e4:	db01      	blt.n	800d8ea <__sfputc_r+0x16>
 800d8e6:	290a      	cmp	r1, #10
 800d8e8:	d103      	bne.n	800d8f2 <__sfputc_r+0x1e>
 800d8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8ee:	f000 b935 	b.w	800db5c <__swbuf_r>
 800d8f2:	6813      	ldr	r3, [r2, #0]
 800d8f4:	1c58      	adds	r0, r3, #1
 800d8f6:	6010      	str	r0, [r2, #0]
 800d8f8:	7019      	strb	r1, [r3, #0]
 800d8fa:	4608      	mov	r0, r1
 800d8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <__sfputs_r>:
 800d902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d904:	4606      	mov	r6, r0
 800d906:	460f      	mov	r7, r1
 800d908:	4614      	mov	r4, r2
 800d90a:	18d5      	adds	r5, r2, r3
 800d90c:	42ac      	cmp	r4, r5
 800d90e:	d101      	bne.n	800d914 <__sfputs_r+0x12>
 800d910:	2000      	movs	r0, #0
 800d912:	e007      	b.n	800d924 <__sfputs_r+0x22>
 800d914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d918:	463a      	mov	r2, r7
 800d91a:	4630      	mov	r0, r6
 800d91c:	f7ff ffda 	bl	800d8d4 <__sfputc_r>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d1f3      	bne.n	800d90c <__sfputs_r+0xa>
 800d924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d928 <_vfiprintf_r>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	460d      	mov	r5, r1
 800d92e:	b09d      	sub	sp, #116	; 0x74
 800d930:	4614      	mov	r4, r2
 800d932:	4698      	mov	r8, r3
 800d934:	4606      	mov	r6, r0
 800d936:	b118      	cbz	r0, 800d940 <_vfiprintf_r+0x18>
 800d938:	6a03      	ldr	r3, [r0, #32]
 800d93a:	b90b      	cbnz	r3, 800d940 <_vfiprintf_r+0x18>
 800d93c:	f7fd fba0 	bl	800b080 <__sinit>
 800d940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d942:	07d9      	lsls	r1, r3, #31
 800d944:	d405      	bmi.n	800d952 <_vfiprintf_r+0x2a>
 800d946:	89ab      	ldrh	r3, [r5, #12]
 800d948:	059a      	lsls	r2, r3, #22
 800d94a:	d402      	bmi.n	800d952 <_vfiprintf_r+0x2a>
 800d94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d94e:	f7fd fcd1 	bl	800b2f4 <__retarget_lock_acquire_recursive>
 800d952:	89ab      	ldrh	r3, [r5, #12]
 800d954:	071b      	lsls	r3, r3, #28
 800d956:	d501      	bpl.n	800d95c <_vfiprintf_r+0x34>
 800d958:	692b      	ldr	r3, [r5, #16]
 800d95a:	b99b      	cbnz	r3, 800d984 <_vfiprintf_r+0x5c>
 800d95c:	4629      	mov	r1, r5
 800d95e:	4630      	mov	r0, r6
 800d960:	f000 f93a 	bl	800dbd8 <__swsetup_r>
 800d964:	b170      	cbz	r0, 800d984 <_vfiprintf_r+0x5c>
 800d966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d968:	07dc      	lsls	r4, r3, #31
 800d96a:	d504      	bpl.n	800d976 <_vfiprintf_r+0x4e>
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295
 800d970:	b01d      	add	sp, #116	; 0x74
 800d972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d976:	89ab      	ldrh	r3, [r5, #12]
 800d978:	0598      	lsls	r0, r3, #22
 800d97a:	d4f7      	bmi.n	800d96c <_vfiprintf_r+0x44>
 800d97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d97e:	f7fd fcba 	bl	800b2f6 <__retarget_lock_release_recursive>
 800d982:	e7f3      	b.n	800d96c <_vfiprintf_r+0x44>
 800d984:	2300      	movs	r3, #0
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	2320      	movs	r3, #32
 800d98a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d992:	2330      	movs	r3, #48	; 0x30
 800d994:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800db48 <_vfiprintf_r+0x220>
 800d998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d99c:	f04f 0901 	mov.w	r9, #1
 800d9a0:	4623      	mov	r3, r4
 800d9a2:	469a      	mov	sl, r3
 800d9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9a8:	b10a      	cbz	r2, 800d9ae <_vfiprintf_r+0x86>
 800d9aa:	2a25      	cmp	r2, #37	; 0x25
 800d9ac:	d1f9      	bne.n	800d9a2 <_vfiprintf_r+0x7a>
 800d9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d9b2:	d00b      	beq.n	800d9cc <_vfiprintf_r+0xa4>
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	f7ff ffa1 	bl	800d902 <__sfputs_r>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	f000 80a9 	beq.w	800db18 <_vfiprintf_r+0x1f0>
 800d9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c8:	445a      	add	r2, fp
 800d9ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 80a1 	beq.w	800db18 <_vfiprintf_r+0x1f0>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9e0:	f10a 0a01 	add.w	sl, sl, #1
 800d9e4:	9304      	str	r3, [sp, #16]
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d9ee:	4654      	mov	r4, sl
 800d9f0:	2205      	movs	r2, #5
 800d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f6:	4854      	ldr	r0, [pc, #336]	; (800db48 <_vfiprintf_r+0x220>)
 800d9f8:	f7f2 fbea 	bl	80001d0 <memchr>
 800d9fc:	9a04      	ldr	r2, [sp, #16]
 800d9fe:	b9d8      	cbnz	r0, 800da38 <_vfiprintf_r+0x110>
 800da00:	06d1      	lsls	r1, r2, #27
 800da02:	bf44      	itt	mi
 800da04:	2320      	movmi	r3, #32
 800da06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da0a:	0713      	lsls	r3, r2, #28
 800da0c:	bf44      	itt	mi
 800da0e:	232b      	movmi	r3, #43	; 0x2b
 800da10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da14:	f89a 3000 	ldrb.w	r3, [sl]
 800da18:	2b2a      	cmp	r3, #42	; 0x2a
 800da1a:	d015      	beq.n	800da48 <_vfiprintf_r+0x120>
 800da1c:	9a07      	ldr	r2, [sp, #28]
 800da1e:	4654      	mov	r4, sl
 800da20:	2000      	movs	r0, #0
 800da22:	f04f 0c0a 	mov.w	ip, #10
 800da26:	4621      	mov	r1, r4
 800da28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da2c:	3b30      	subs	r3, #48	; 0x30
 800da2e:	2b09      	cmp	r3, #9
 800da30:	d94d      	bls.n	800dace <_vfiprintf_r+0x1a6>
 800da32:	b1b0      	cbz	r0, 800da62 <_vfiprintf_r+0x13a>
 800da34:	9207      	str	r2, [sp, #28]
 800da36:	e014      	b.n	800da62 <_vfiprintf_r+0x13a>
 800da38:	eba0 0308 	sub.w	r3, r0, r8
 800da3c:	fa09 f303 	lsl.w	r3, r9, r3
 800da40:	4313      	orrs	r3, r2
 800da42:	9304      	str	r3, [sp, #16]
 800da44:	46a2      	mov	sl, r4
 800da46:	e7d2      	b.n	800d9ee <_vfiprintf_r+0xc6>
 800da48:	9b03      	ldr	r3, [sp, #12]
 800da4a:	1d19      	adds	r1, r3, #4
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	9103      	str	r1, [sp, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	bfbb      	ittet	lt
 800da54:	425b      	neglt	r3, r3
 800da56:	f042 0202 	orrlt.w	r2, r2, #2
 800da5a:	9307      	strge	r3, [sp, #28]
 800da5c:	9307      	strlt	r3, [sp, #28]
 800da5e:	bfb8      	it	lt
 800da60:	9204      	strlt	r2, [sp, #16]
 800da62:	7823      	ldrb	r3, [r4, #0]
 800da64:	2b2e      	cmp	r3, #46	; 0x2e
 800da66:	d10c      	bne.n	800da82 <_vfiprintf_r+0x15a>
 800da68:	7863      	ldrb	r3, [r4, #1]
 800da6a:	2b2a      	cmp	r3, #42	; 0x2a
 800da6c:	d134      	bne.n	800dad8 <_vfiprintf_r+0x1b0>
 800da6e:	9b03      	ldr	r3, [sp, #12]
 800da70:	1d1a      	adds	r2, r3, #4
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	9203      	str	r2, [sp, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	bfb8      	it	lt
 800da7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800da7e:	3402      	adds	r4, #2
 800da80:	9305      	str	r3, [sp, #20]
 800da82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800db58 <_vfiprintf_r+0x230>
 800da86:	7821      	ldrb	r1, [r4, #0]
 800da88:	2203      	movs	r2, #3
 800da8a:	4650      	mov	r0, sl
 800da8c:	f7f2 fba0 	bl	80001d0 <memchr>
 800da90:	b138      	cbz	r0, 800daa2 <_vfiprintf_r+0x17a>
 800da92:	9b04      	ldr	r3, [sp, #16]
 800da94:	eba0 000a 	sub.w	r0, r0, sl
 800da98:	2240      	movs	r2, #64	; 0x40
 800da9a:	4082      	lsls	r2, r0
 800da9c:	4313      	orrs	r3, r2
 800da9e:	3401      	adds	r4, #1
 800daa0:	9304      	str	r3, [sp, #16]
 800daa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa6:	4829      	ldr	r0, [pc, #164]	; (800db4c <_vfiprintf_r+0x224>)
 800daa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daac:	2206      	movs	r2, #6
 800daae:	f7f2 fb8f 	bl	80001d0 <memchr>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d03f      	beq.n	800db36 <_vfiprintf_r+0x20e>
 800dab6:	4b26      	ldr	r3, [pc, #152]	; (800db50 <_vfiprintf_r+0x228>)
 800dab8:	bb1b      	cbnz	r3, 800db02 <_vfiprintf_r+0x1da>
 800daba:	9b03      	ldr	r3, [sp, #12]
 800dabc:	3307      	adds	r3, #7
 800dabe:	f023 0307 	bic.w	r3, r3, #7
 800dac2:	3308      	adds	r3, #8
 800dac4:	9303      	str	r3, [sp, #12]
 800dac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac8:	443b      	add	r3, r7
 800daca:	9309      	str	r3, [sp, #36]	; 0x24
 800dacc:	e768      	b.n	800d9a0 <_vfiprintf_r+0x78>
 800dace:	fb0c 3202 	mla	r2, ip, r2, r3
 800dad2:	460c      	mov	r4, r1
 800dad4:	2001      	movs	r0, #1
 800dad6:	e7a6      	b.n	800da26 <_vfiprintf_r+0xfe>
 800dad8:	2300      	movs	r3, #0
 800dada:	3401      	adds	r4, #1
 800dadc:	9305      	str	r3, [sp, #20]
 800dade:	4619      	mov	r1, r3
 800dae0:	f04f 0c0a 	mov.w	ip, #10
 800dae4:	4620      	mov	r0, r4
 800dae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daea:	3a30      	subs	r2, #48	; 0x30
 800daec:	2a09      	cmp	r2, #9
 800daee:	d903      	bls.n	800daf8 <_vfiprintf_r+0x1d0>
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0c6      	beq.n	800da82 <_vfiprintf_r+0x15a>
 800daf4:	9105      	str	r1, [sp, #20]
 800daf6:	e7c4      	b.n	800da82 <_vfiprintf_r+0x15a>
 800daf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dafc:	4604      	mov	r4, r0
 800dafe:	2301      	movs	r3, #1
 800db00:	e7f0      	b.n	800dae4 <_vfiprintf_r+0x1bc>
 800db02:	ab03      	add	r3, sp, #12
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	462a      	mov	r2, r5
 800db08:	4b12      	ldr	r3, [pc, #72]	; (800db54 <_vfiprintf_r+0x22c>)
 800db0a:	a904      	add	r1, sp, #16
 800db0c:	4630      	mov	r0, r6
 800db0e:	f7fc fc67 	bl	800a3e0 <_printf_float>
 800db12:	4607      	mov	r7, r0
 800db14:	1c78      	adds	r0, r7, #1
 800db16:	d1d6      	bne.n	800dac6 <_vfiprintf_r+0x19e>
 800db18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db1a:	07d9      	lsls	r1, r3, #31
 800db1c:	d405      	bmi.n	800db2a <_vfiprintf_r+0x202>
 800db1e:	89ab      	ldrh	r3, [r5, #12]
 800db20:	059a      	lsls	r2, r3, #22
 800db22:	d402      	bmi.n	800db2a <_vfiprintf_r+0x202>
 800db24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db26:	f7fd fbe6 	bl	800b2f6 <__retarget_lock_release_recursive>
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	065b      	lsls	r3, r3, #25
 800db2e:	f53f af1d 	bmi.w	800d96c <_vfiprintf_r+0x44>
 800db32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db34:	e71c      	b.n	800d970 <_vfiprintf_r+0x48>
 800db36:	ab03      	add	r3, sp, #12
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	462a      	mov	r2, r5
 800db3c:	4b05      	ldr	r3, [pc, #20]	; (800db54 <_vfiprintf_r+0x22c>)
 800db3e:	a904      	add	r1, sp, #16
 800db40:	4630      	mov	r0, r6
 800db42:	f7fc fef1 	bl	800a928 <_printf_i>
 800db46:	e7e4      	b.n	800db12 <_vfiprintf_r+0x1ea>
 800db48:	0800f0cd 	.word	0x0800f0cd
 800db4c:	0800f0d7 	.word	0x0800f0d7
 800db50:	0800a3e1 	.word	0x0800a3e1
 800db54:	0800d903 	.word	0x0800d903
 800db58:	0800f0d3 	.word	0x0800f0d3

0800db5c <__swbuf_r>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	460e      	mov	r6, r1
 800db60:	4614      	mov	r4, r2
 800db62:	4605      	mov	r5, r0
 800db64:	b118      	cbz	r0, 800db6e <__swbuf_r+0x12>
 800db66:	6a03      	ldr	r3, [r0, #32]
 800db68:	b90b      	cbnz	r3, 800db6e <__swbuf_r+0x12>
 800db6a:	f7fd fa89 	bl	800b080 <__sinit>
 800db6e:	69a3      	ldr	r3, [r4, #24]
 800db70:	60a3      	str	r3, [r4, #8]
 800db72:	89a3      	ldrh	r3, [r4, #12]
 800db74:	071a      	lsls	r2, r3, #28
 800db76:	d525      	bpl.n	800dbc4 <__swbuf_r+0x68>
 800db78:	6923      	ldr	r3, [r4, #16]
 800db7a:	b31b      	cbz	r3, 800dbc4 <__swbuf_r+0x68>
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	6922      	ldr	r2, [r4, #16]
 800db80:	1a98      	subs	r0, r3, r2
 800db82:	6963      	ldr	r3, [r4, #20]
 800db84:	b2f6      	uxtb	r6, r6
 800db86:	4283      	cmp	r3, r0
 800db88:	4637      	mov	r7, r6
 800db8a:	dc04      	bgt.n	800db96 <__swbuf_r+0x3a>
 800db8c:	4621      	mov	r1, r4
 800db8e:	4628      	mov	r0, r5
 800db90:	f7ff fdf0 	bl	800d774 <_fflush_r>
 800db94:	b9e0      	cbnz	r0, 800dbd0 <__swbuf_r+0x74>
 800db96:	68a3      	ldr	r3, [r4, #8]
 800db98:	3b01      	subs	r3, #1
 800db9a:	60a3      	str	r3, [r4, #8]
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	6022      	str	r2, [r4, #0]
 800dba2:	701e      	strb	r6, [r3, #0]
 800dba4:	6962      	ldr	r2, [r4, #20]
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d004      	beq.n	800dbb6 <__swbuf_r+0x5a>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	07db      	lsls	r3, r3, #31
 800dbb0:	d506      	bpl.n	800dbc0 <__swbuf_r+0x64>
 800dbb2:	2e0a      	cmp	r6, #10
 800dbb4:	d104      	bne.n	800dbc0 <__swbuf_r+0x64>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff fddb 	bl	800d774 <_fflush_r>
 800dbbe:	b938      	cbnz	r0, 800dbd0 <__swbuf_r+0x74>
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f000 f806 	bl	800dbd8 <__swsetup_r>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d0d5      	beq.n	800db7c <__swbuf_r+0x20>
 800dbd0:	f04f 37ff 	mov.w	r7, #4294967295
 800dbd4:	e7f4      	b.n	800dbc0 <__swbuf_r+0x64>
	...

0800dbd8 <__swsetup_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4b2a      	ldr	r3, [pc, #168]	; (800dc84 <__swsetup_r+0xac>)
 800dbdc:	4605      	mov	r5, r0
 800dbde:	6818      	ldr	r0, [r3, #0]
 800dbe0:	460c      	mov	r4, r1
 800dbe2:	b118      	cbz	r0, 800dbec <__swsetup_r+0x14>
 800dbe4:	6a03      	ldr	r3, [r0, #32]
 800dbe6:	b90b      	cbnz	r3, 800dbec <__swsetup_r+0x14>
 800dbe8:	f7fd fa4a 	bl	800b080 <__sinit>
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbf2:	0718      	lsls	r0, r3, #28
 800dbf4:	d422      	bmi.n	800dc3c <__swsetup_r+0x64>
 800dbf6:	06d9      	lsls	r1, r3, #27
 800dbf8:	d407      	bmi.n	800dc0a <__swsetup_r+0x32>
 800dbfa:	2309      	movs	r3, #9
 800dbfc:	602b      	str	r3, [r5, #0]
 800dbfe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc02:	81a3      	strh	r3, [r4, #12]
 800dc04:	f04f 30ff 	mov.w	r0, #4294967295
 800dc08:	e034      	b.n	800dc74 <__swsetup_r+0x9c>
 800dc0a:	0758      	lsls	r0, r3, #29
 800dc0c:	d512      	bpl.n	800dc34 <__swsetup_r+0x5c>
 800dc0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc10:	b141      	cbz	r1, 800dc24 <__swsetup_r+0x4c>
 800dc12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc16:	4299      	cmp	r1, r3
 800dc18:	d002      	beq.n	800dc20 <__swsetup_r+0x48>
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f7fe fa22 	bl	800c064 <_free_r>
 800dc20:	2300      	movs	r3, #0
 800dc22:	6363      	str	r3, [r4, #52]	; 0x34
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc2a:	81a3      	strh	r3, [r4, #12]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	6063      	str	r3, [r4, #4]
 800dc30:	6923      	ldr	r3, [r4, #16]
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	f043 0308 	orr.w	r3, r3, #8
 800dc3a:	81a3      	strh	r3, [r4, #12]
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	b94b      	cbnz	r3, 800dc54 <__swsetup_r+0x7c>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc4a:	d003      	beq.n	800dc54 <__swsetup_r+0x7c>
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	4628      	mov	r0, r5
 800dc50:	f000 f88c 	bl	800dd6c <__smakebuf_r>
 800dc54:	89a0      	ldrh	r0, [r4, #12]
 800dc56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc5a:	f010 0301 	ands.w	r3, r0, #1
 800dc5e:	d00a      	beq.n	800dc76 <__swsetup_r+0x9e>
 800dc60:	2300      	movs	r3, #0
 800dc62:	60a3      	str	r3, [r4, #8]
 800dc64:	6963      	ldr	r3, [r4, #20]
 800dc66:	425b      	negs	r3, r3
 800dc68:	61a3      	str	r3, [r4, #24]
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	b943      	cbnz	r3, 800dc80 <__swsetup_r+0xa8>
 800dc6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc72:	d1c4      	bne.n	800dbfe <__swsetup_r+0x26>
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	0781      	lsls	r1, r0, #30
 800dc78:	bf58      	it	pl
 800dc7a:	6963      	ldrpl	r3, [r4, #20]
 800dc7c:	60a3      	str	r3, [r4, #8]
 800dc7e:	e7f4      	b.n	800dc6a <__swsetup_r+0x92>
 800dc80:	2000      	movs	r0, #0
 800dc82:	e7f7      	b.n	800dc74 <__swsetup_r+0x9c>
 800dc84:	200001f0 	.word	0x200001f0

0800dc88 <_raise_r>:
 800dc88:	291f      	cmp	r1, #31
 800dc8a:	b538      	push	{r3, r4, r5, lr}
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	460d      	mov	r5, r1
 800dc90:	d904      	bls.n	800dc9c <_raise_r+0x14>
 800dc92:	2316      	movs	r3, #22
 800dc94:	6003      	str	r3, [r0, #0]
 800dc96:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9a:	bd38      	pop	{r3, r4, r5, pc}
 800dc9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc9e:	b112      	cbz	r2, 800dca6 <_raise_r+0x1e>
 800dca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dca4:	b94b      	cbnz	r3, 800dcba <_raise_r+0x32>
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 f830 	bl	800dd0c <_getpid_r>
 800dcac:	462a      	mov	r2, r5
 800dcae:	4601      	mov	r1, r0
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcb6:	f000 b817 	b.w	800dce8 <_kill_r>
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d00a      	beq.n	800dcd4 <_raise_r+0x4c>
 800dcbe:	1c59      	adds	r1, r3, #1
 800dcc0:	d103      	bne.n	800dcca <_raise_r+0x42>
 800dcc2:	2316      	movs	r3, #22
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	e7e7      	b.n	800dc9a <_raise_r+0x12>
 800dcca:	2400      	movs	r4, #0
 800dccc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	4798      	blx	r3
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	e7e0      	b.n	800dc9a <_raise_r+0x12>

0800dcd8 <raise>:
 800dcd8:	4b02      	ldr	r3, [pc, #8]	; (800dce4 <raise+0xc>)
 800dcda:	4601      	mov	r1, r0
 800dcdc:	6818      	ldr	r0, [r3, #0]
 800dcde:	f7ff bfd3 	b.w	800dc88 <_raise_r>
 800dce2:	bf00      	nop
 800dce4:	200001f0 	.word	0x200001f0

0800dce8 <_kill_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d07      	ldr	r5, [pc, #28]	; (800dd08 <_kill_r+0x20>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	602b      	str	r3, [r5, #0]
 800dcf6:	f7f4 fa73 	bl	80021e0 <_kill>
 800dcfa:	1c43      	adds	r3, r0, #1
 800dcfc:	d102      	bne.n	800dd04 <_kill_r+0x1c>
 800dcfe:	682b      	ldr	r3, [r5, #0]
 800dd00:	b103      	cbz	r3, 800dd04 <_kill_r+0x1c>
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	bd38      	pop	{r3, r4, r5, pc}
 800dd06:	bf00      	nop
 800dd08:	20000960 	.word	0x20000960

0800dd0c <_getpid_r>:
 800dd0c:	f7f4 ba60 	b.w	80021d0 <_getpid>

0800dd10 <_malloc_usable_size_r>:
 800dd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd14:	1f18      	subs	r0, r3, #4
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bfbc      	itt	lt
 800dd1a:	580b      	ldrlt	r3, [r1, r0]
 800dd1c:	18c0      	addlt	r0, r0, r3
 800dd1e:	4770      	bx	lr

0800dd20 <__swhatbuf_r>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	460c      	mov	r4, r1
 800dd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd28:	2900      	cmp	r1, #0
 800dd2a:	b096      	sub	sp, #88	; 0x58
 800dd2c:	4615      	mov	r5, r2
 800dd2e:	461e      	mov	r6, r3
 800dd30:	da0d      	bge.n	800dd4e <__swhatbuf_r+0x2e>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd38:	f04f 0100 	mov.w	r1, #0
 800dd3c:	bf0c      	ite	eq
 800dd3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd42:	2340      	movne	r3, #64	; 0x40
 800dd44:	2000      	movs	r0, #0
 800dd46:	6031      	str	r1, [r6, #0]
 800dd48:	602b      	str	r3, [r5, #0]
 800dd4a:	b016      	add	sp, #88	; 0x58
 800dd4c:	bd70      	pop	{r4, r5, r6, pc}
 800dd4e:	466a      	mov	r2, sp
 800dd50:	f000 f848 	bl	800dde4 <_fstat_r>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	dbec      	blt.n	800dd32 <__swhatbuf_r+0x12>
 800dd58:	9901      	ldr	r1, [sp, #4]
 800dd5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd62:	4259      	negs	r1, r3
 800dd64:	4159      	adcs	r1, r3
 800dd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd6a:	e7eb      	b.n	800dd44 <__swhatbuf_r+0x24>

0800dd6c <__smakebuf_r>:
 800dd6c:	898b      	ldrh	r3, [r1, #12]
 800dd6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd70:	079d      	lsls	r5, r3, #30
 800dd72:	4606      	mov	r6, r0
 800dd74:	460c      	mov	r4, r1
 800dd76:	d507      	bpl.n	800dd88 <__smakebuf_r+0x1c>
 800dd78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	6123      	str	r3, [r4, #16]
 800dd80:	2301      	movs	r3, #1
 800dd82:	6163      	str	r3, [r4, #20]
 800dd84:	b002      	add	sp, #8
 800dd86:	bd70      	pop	{r4, r5, r6, pc}
 800dd88:	ab01      	add	r3, sp, #4
 800dd8a:	466a      	mov	r2, sp
 800dd8c:	f7ff ffc8 	bl	800dd20 <__swhatbuf_r>
 800dd90:	9900      	ldr	r1, [sp, #0]
 800dd92:	4605      	mov	r5, r0
 800dd94:	4630      	mov	r0, r6
 800dd96:	f7fe fd31 	bl	800c7fc <_malloc_r>
 800dd9a:	b948      	cbnz	r0, 800ddb0 <__smakebuf_r+0x44>
 800dd9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dda0:	059a      	lsls	r2, r3, #22
 800dda2:	d4ef      	bmi.n	800dd84 <__smakebuf_r+0x18>
 800dda4:	f023 0303 	bic.w	r3, r3, #3
 800dda8:	f043 0302 	orr.w	r3, r3, #2
 800ddac:	81a3      	strh	r3, [r4, #12]
 800ddae:	e7e3      	b.n	800dd78 <__smakebuf_r+0xc>
 800ddb0:	89a3      	ldrh	r3, [r4, #12]
 800ddb2:	6020      	str	r0, [r4, #0]
 800ddb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddb8:	81a3      	strh	r3, [r4, #12]
 800ddba:	9b00      	ldr	r3, [sp, #0]
 800ddbc:	6163      	str	r3, [r4, #20]
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	6120      	str	r0, [r4, #16]
 800ddc2:	b15b      	cbz	r3, 800dddc <__smakebuf_r+0x70>
 800ddc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddc8:	4630      	mov	r0, r6
 800ddca:	f000 f81d 	bl	800de08 <_isatty_r>
 800ddce:	b128      	cbz	r0, 800dddc <__smakebuf_r+0x70>
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	f023 0303 	bic.w	r3, r3, #3
 800ddd6:	f043 0301 	orr.w	r3, r3, #1
 800ddda:	81a3      	strh	r3, [r4, #12]
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	431d      	orrs	r5, r3
 800dde0:	81a5      	strh	r5, [r4, #12]
 800dde2:	e7cf      	b.n	800dd84 <__smakebuf_r+0x18>

0800dde4 <_fstat_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4d07      	ldr	r5, [pc, #28]	; (800de04 <_fstat_r+0x20>)
 800dde8:	2300      	movs	r3, #0
 800ddea:	4604      	mov	r4, r0
 800ddec:	4608      	mov	r0, r1
 800ddee:	4611      	mov	r1, r2
 800ddf0:	602b      	str	r3, [r5, #0]
 800ddf2:	f7f4 fa54 	bl	800229e <_fstat>
 800ddf6:	1c43      	adds	r3, r0, #1
 800ddf8:	d102      	bne.n	800de00 <_fstat_r+0x1c>
 800ddfa:	682b      	ldr	r3, [r5, #0]
 800ddfc:	b103      	cbz	r3, 800de00 <_fstat_r+0x1c>
 800ddfe:	6023      	str	r3, [r4, #0]
 800de00:	bd38      	pop	{r3, r4, r5, pc}
 800de02:	bf00      	nop
 800de04:	20000960 	.word	0x20000960

0800de08 <_isatty_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4d06      	ldr	r5, [pc, #24]	; (800de24 <_isatty_r+0x1c>)
 800de0c:	2300      	movs	r3, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	602b      	str	r3, [r5, #0]
 800de14:	f7f4 fa53 	bl	80022be <_isatty>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_isatty_r+0x1a>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_isatty_r+0x1a>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	20000960 	.word	0x20000960

0800de28 <_init>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	bf00      	nop
 800de2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2e:	bc08      	pop	{r3}
 800de30:	469e      	mov	lr, r3
 800de32:	4770      	bx	lr

0800de34 <_fini>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	bf00      	nop
 800de38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de3a:	bc08      	pop	{r3}
 800de3c:	469e      	mov	lr, r3
 800de3e:	4770      	bx	lr
