
PCBv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  080113a8  080113a8  000213a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130f0  080130f0  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  080130f0  080130f0  000230f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130f8  080130f8  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130f8  080130f8  000230f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130fc  080130fc  000230fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08013100  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e74  20000220  08013320  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20001094  08013320  00031094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001648e  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e6  00000000  00000000  00046721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0004a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f47  00000000  00000000  0004b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dfde  00000000  00000000  0004c447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2b8  00000000  00000000  0006a425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8f7b  00000000  00000000  000866dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d0c  00000000  00000000  0012f658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00136364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801138c 	.word	0x0801138c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0801138c 	.word	0x0801138c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <get_lat>:
#include <gps.h>
#include <string.h>
#include <stdlib.h>

double get_lat(char *gga)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0c6      	sub	sp, #280	; 0x118
 8001014:	af00      	add	r7, sp, #0
 8001016:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800101a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800101e:	6018      	str	r0, [r3, #0]
	double latitude = 0.0;
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 800102c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001030:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001034:	f107 000c 	add.w	r0, r7, #12
 8001038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	f00b faf3 	bl	800c628 <strncpy>

	char *token = strtok(gga_cpy, ",");
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4919      	ldr	r1, [pc, #100]	; (80010ac <get_lat+0x9c>)
 8001048:	4618      	mov	r0, r3
 800104a:	f00b fb01 	bl	800c650 <strtok>
 800104e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8001052:	e01b      	b.n	800108c <get_lat+0x7c>
	{
		if ((strcmp(token, "N") == 0) || (strcmp(token, "S") == 0))
 8001054:	4916      	ldr	r1, [pc, #88]	; (80010b0 <get_lat+0xa0>)
 8001056:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800105a:	f7ff f8b9 	bl	80001d0 <strcmp>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d017      	beq.n	8001094 <get_lat+0x84>
 8001064:	4913      	ldr	r1, [pc, #76]	; (80010b4 <get_lat+0xa4>)
 8001066:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800106a:	f7ff f8b1 	bl	80001d0 <strcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00f      	beq.n	8001094 <get_lat+0x84>
		{
			break;
		}
		else
		{
			latitude = atof(token);
 8001074:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001078:	f009 fe91 	bl	800ad9e <atof>
 800107c:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001080:	490a      	ldr	r1, [pc, #40]	; (80010ac <get_lat+0x9c>)
 8001082:	2000      	movs	r0, #0
 8001084:	f00b fae4 	bl	800c650 <strtok>
 8001088:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 800108c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1df      	bne.n	8001054 <get_lat+0x44>
	}

		return latitude;
 8001094:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001098:	ec43 2b17 	vmov	d7, r2, r3
}
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	080113a8 	.word	0x080113a8
 80010b0:	080113ac 	.word	0x080113ac
 80010b4:	080113b0 	.word	0x080113b0

080010b8 <get_lon>:

double get_lon(char *gga)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0c6      	sub	sp, #280	; 0x118
 80010bc:	af00      	add	r7, sp, #0
 80010be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010c6:	6018      	str	r0, [r3, #0]
	double longitude = 0.0;
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 80010d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010dc:	f107 000c 	add.w	r0, r7, #12
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	f00b fa9f 	bl	800c628 <strncpy>

	char *token = strtok(gga_cpy, ",");
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4919      	ldr	r1, [pc, #100]	; (8001154 <get_lon+0x9c>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00b faad 	bl	800c650 <strtok>
 80010f6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 80010fa:	e01b      	b.n	8001134 <get_lon+0x7c>
	{
		if ((strcmp(token, "W") == 0) || (strcmp(token, "E") == 0))
 80010fc:	4916      	ldr	r1, [pc, #88]	; (8001158 <get_lon+0xa0>)
 80010fe:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001102:	f7ff f865 	bl	80001d0 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d017      	beq.n	800113c <get_lon+0x84>
 800110c:	4913      	ldr	r1, [pc, #76]	; (800115c <get_lon+0xa4>)
 800110e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001112:	f7ff f85d 	bl	80001d0 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00f      	beq.n	800113c <get_lon+0x84>
		{
			break;
		}
		else
		{
			longitude = atof(token);
 800111c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001120:	f009 fe3d 	bl	800ad9e <atof>
 8001124:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001128:	490a      	ldr	r1, [pc, #40]	; (8001154 <get_lon+0x9c>)
 800112a:	2000      	movs	r0, #0
 800112c:	f00b fa90 	bl	800c650 <strtok>
 8001130:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 8001134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1df      	bne.n	80010fc <get_lon+0x44>
	}

		return longitude;
 800113c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001140:	ec43 2b17 	vmov	d7, r2, r3
}
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	eef0 0a67 	vmov.f32	s1, s15
 800114c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	080113a8 	.word	0x080113a8
 8001158:	080113b4 	.word	0x080113b4
 800115c:	080113b8 	.word	0x080113b8

08001160 <get_time>:

void get_time(char *gga, char *time)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	int hours, minutes, seconds;
	char *comma1 = strchr(gga, ',');
 800116a:	212c      	movs	r1, #44	; 0x2c
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f00b fa3c 	bl	800c5ea <strchr>
 8001172:	61f8      	str	r0, [r7, #28]
	char *comma2 = strchr(comma1 + 1, ',');
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	212c      	movs	r1, #44	; 0x2c
 800117a:	4618      	mov	r0, r3
 800117c:	f00b fa35 	bl	800c5ea <strchr>
 8001180:	61b8      	str	r0, [r7, #24]

	size_t length = comma2 - (comma1 + 1);
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]

	strncpy(time, comma1 + 1, length);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3301      	adds	r3, #1
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4619      	mov	r1, r3
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f00b fa47 	bl	800c628 <strncpy>
	time[length] = '\0';
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	4413      	add	r3, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

	sscanf(time, "%2d%2d%2d", &hours, &minutes, &seconds);
 80011a4:	f107 010c 	add.w	r1, r7, #12
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	460b      	mov	r3, r1
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <get_time+0x88>)
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f00b f99e 	bl	800c4f8 <siscanf>

	hours -= 5;
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	3b05      	subs	r3, #5
 80011c0:	613b      	str	r3, [r7, #16]

	if (hours < 0) {
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da02      	bge.n	80011ce <get_time+0x6e>
		hours += 24;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	3318      	adds	r3, #24
 80011cc:	613b      	str	r3, [r7, #16]
	}

	sprintf(time, "%02d:%02d:%02d\n", hours, minutes, seconds);
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68f9      	ldr	r1, [r7, #12]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	460b      	mov	r3, r1
 80011d8:	4904      	ldr	r1, [pc, #16]	; (80011ec <get_time+0x8c>)
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f00b f96c 	bl	800c4b8 <siprintf>
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	080113bc 	.word	0x080113bc
 80011ec:	080113c8 	.word	0x080113c8

080011f0 <get_alt>:

double get_alt(char *gga)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0c6      	sub	sp, #280	; 0x118
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011fe:	6018      	str	r0, [r3, #0]
	double altitude = 0.0;
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 800120c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001210:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001214:	f107 000c 	add.w	r0, r7, #12
 8001218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121c:	6819      	ldr	r1, [r3, #0]
 800121e:	f00b fa03 	bl	800c628 <strncpy>

	char *token = strtok(gga_cpy, ",");
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4916      	ldr	r1, [pc, #88]	; (8001280 <get_alt+0x90>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00b fa11 	bl	800c650 <strtok>
 800122e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8001232:	e013      	b.n	800125c <get_alt+0x6c>
	{
		if (strcmp(token, "M") == 0)
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <get_alt+0x94>)
 8001236:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800123a:	f7fe ffc9 	bl	80001d0 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d010      	beq.n	8001266 <get_alt+0x76>
		{
			break;
		}
		else
		{
			altitude = atof(token);
 8001244:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001248:	f009 fda9 	bl	800ad9e <atof>
 800124c:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001250:	490b      	ldr	r1, [pc, #44]	; (8001280 <get_alt+0x90>)
 8001252:	2000      	movs	r0, #0
 8001254:	f00b f9fc 	bl	800c650 <strtok>
 8001258:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 800125c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e7      	bne.n	8001234 <get_alt+0x44>
 8001264:	e000      	b.n	8001268 <get_alt+0x78>
			break;
 8001266:	bf00      	nop
	}

		return altitude;
 8001268:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800126c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001270:	eeb0 0a47 	vmov.f32	s0, s14
 8001274:	eef0 0a67 	vmov.f32	s1, s15
 8001278:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	080113a8 	.word	0x080113a8
 8001284:	080113d8 	.word	0x080113d8

08001288 <ddm2dd>:

double ddm2dd(double ddm) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0b00 	vstr	d0, [r7]
    double degrees = floor(ddm / 100.0);
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <ddm2dd+0x8c>)
 8001298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129c:	f7ff fae6 	bl	800086c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b17 	vmov	d7, r2, r3
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	eef0 0a67 	vmov.f32	s1, s15
 80012b0:	f00e fdf6 	bl	800fea0 <floor>
 80012b4:	ed87 0b06 	vstr	d0, [r7, #24]
    double minutes = ddm - degrees * 100.0;
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <ddm2dd+0x8c>)
 80012be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c2:	f7ff f9a9 	bl	8000618 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ce:	f7fe ffeb 	bl	80002a8 <__aeabi_dsub>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double dd = degrees + minutes / 60.0;
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <ddm2dd+0x90>)
 80012e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e4:	f7ff fac2 	bl	800086c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012f0:	f7fe ffdc 	bl	80002ac <__adddf3>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return dd;
 80012fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001300:	ec43 2b17 	vmov	d7, r2, r3
}
 8001304:	eeb0 0a47 	vmov.f32	s0, s14
 8001308:	eef0 0a67 	vmov.f32	s1, s15
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40590000 	.word	0x40590000
 8001318:	404e0000 	.word	0x404e0000
 800131c:	00000000 	.word	0x00000000

08001320 <degreesToRadians>:

// Function to convert degrees to radians
double degreesToRadians(double degrees) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0b00 	vstr	d0, [r7]
    return degrees * M_PI / 180.0;
 800132a:	a30e      	add	r3, pc, #56	; (adr r3, 8001364 <degreesToRadians+0x44>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001334:	f7ff f970 	bl	8000618 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <degreesToRadians+0x40>)
 8001346:	f7ff fa91 	bl	800086c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001352:	eeb0 0a47 	vmov.f32	s0, s14
 8001356:	eef0 0a67 	vmov.f32	s1, s15
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40668000 	.word	0x40668000
 8001364:	54442d18 	.word	0x54442d18
 8001368:	400921fb 	.word	0x400921fb
 800136c:	00000000 	.word	0x00000000

08001370 <calculateDistance>:

// Function to calculate the distance between two coordinates using Haversine formula
double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
 8001370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001374:	ed2d 8b02 	vpush	{d8}
 8001378:	b092      	sub	sp, #72	; 0x48
 800137a:	af00      	add	r7, sp, #0
 800137c:	ed87 0b06 	vstr	d0, [r7, #24]
 8001380:	ed87 1b04 	vstr	d1, [r7, #16]
 8001384:	ed87 2b02 	vstr	d2, [r7, #8]
 8001388:	ed87 3b00 	vstr	d3, [r7]
    // Convert latitude and longitude from degrees to radians
    lat1 = degreesToRadians(ddm2dd(lat1));
 800138c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001390:	f7ff ff7a 	bl	8001288 <ddm2dd>
 8001394:	eeb0 7a40 	vmov.f32	s14, s0
 8001398:	eef0 7a60 	vmov.f32	s15, s1
 800139c:	eeb0 0a47 	vmov.f32	s0, s14
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	f7ff ffbc 	bl	8001320 <degreesToRadians>
 80013a8:	ed87 0b06 	vstr	d0, [r7, #24]
    lon1 = degreesToRadians(ddm2dd(lon1));
 80013ac:	ed97 0b04 	vldr	d0, [r7, #16]
 80013b0:	f7ff ff6a 	bl	8001288 <ddm2dd>
 80013b4:	eeb0 7a40 	vmov.f32	s14, s0
 80013b8:	eef0 7a60 	vmov.f32	s15, s1
 80013bc:	eeb0 0a47 	vmov.f32	s0, s14
 80013c0:	eef0 0a67 	vmov.f32	s1, s15
 80013c4:	f7ff ffac 	bl	8001320 <degreesToRadians>
 80013c8:	ed87 0b04 	vstr	d0, [r7, #16]
    lat2 = degreesToRadians(ddm2dd(lat2));
 80013cc:	ed97 0b02 	vldr	d0, [r7, #8]
 80013d0:	f7ff ff5a 	bl	8001288 <ddm2dd>
 80013d4:	eeb0 7a40 	vmov.f32	s14, s0
 80013d8:	eef0 7a60 	vmov.f32	s15, s1
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	eef0 0a67 	vmov.f32	s1, s15
 80013e4:	f7ff ff9c 	bl	8001320 <degreesToRadians>
 80013e8:	ed87 0b02 	vstr	d0, [r7, #8]
    lon2 = degreesToRadians(ddm2dd(lon2));
 80013ec:	ed97 0b00 	vldr	d0, [r7]
 80013f0:	f7ff ff4a 	bl	8001288 <ddm2dd>
 80013f4:	eeb0 7a40 	vmov.f32	s14, s0
 80013f8:	eef0 7a60 	vmov.f32	s15, s1
 80013fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001400:	eef0 0a67 	vmov.f32	s1, s15
 8001404:	f7ff ff8c 	bl	8001320 <degreesToRadians>
 8001408:	ed87 0b00 	vstr	d0, [r7]

    // Haversine formula
    double dlat = lat2 - lat1;
 800140c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001414:	f7fe ff48 	bl	80002a8 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double dlon = lon2 - lon1;
 8001420:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001428:	f7fe ff3e 	bl	80002a8 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double a = sin(dlat/2) * sin(dlat/2) + cos(lat1) * cos(lat2) * sin(dlon/2) * sin(dlon/2);
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001440:	f7ff fa14 	bl	800086c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	ec43 2b17 	vmov	d7, r2, r3
 800144c:	eeb0 0a47 	vmov.f32	s0, s14
 8001450:	eef0 0a67 	vmov.f32	s1, s15
 8001454:	f00e fbf0 	bl	800fc38 <sin>
 8001458:	ec55 4b10 	vmov	r4, r5, d0
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001464:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001468:	f7ff fa00 	bl	800086c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b17 	vmov	d7, r2, r3
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f00e fbdc 	bl	800fc38 <sin>
 8001480:	ec53 2b10 	vmov	r2, r3, d0
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7ff f8c6 	bl	8000618 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4614      	mov	r4, r2
 8001492:	461d      	mov	r5, r3
 8001494:	ed97 0b06 	vldr	d0, [r7, #24]
 8001498:	f00e fb7a 	bl	800fb90 <cos>
 800149c:	ec59 8b10 	vmov	r8, r9, d0
 80014a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80014a4:	f00e fb74 	bl	800fb90 <cos>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4640      	mov	r0, r8
 80014ae:	4649      	mov	r1, r9
 80014b0:	f7ff f8b2 	bl	8000618 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4690      	mov	r8, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014c8:	f7ff f9d0 	bl	800086c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	ec43 2b17 	vmov	d7, r2, r3
 80014d4:	eeb0 0a47 	vmov.f32	s0, s14
 80014d8:	eef0 0a67 	vmov.f32	s1, s15
 80014dc:	f00e fbac 	bl	800fc38 <sin>
 80014e0:	ec53 2b10 	vmov	r2, r3, d0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f896 	bl	8000618 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4690      	mov	r8, r2
 80014f2:	4699      	mov	r9, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001500:	f7ff f9b4 	bl	800086c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b17 	vmov	d7, r2, r3
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	f00e fb90 	bl	800fc38 <sin>
 8001518:	ec53 2b10 	vmov	r2, r3, d0
 800151c:	4640      	mov	r0, r8
 800151e:	4649      	mov	r1, r9
 8001520:	f7ff f87a 	bl	8000618 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7fe febe 	bl	80002ac <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8001538:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800153c:	f00e fafc 	bl	800fb38 <sqrt>
 8001540:	eeb0 8a40 	vmov.f32	s16, s0
 8001544:	eef0 8a60 	vmov.f32	s17, s1
 8001548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	4921      	ldr	r1, [pc, #132]	; (80015d8 <calculateDistance+0x268>)
 8001552:	f7fe fea9 	bl	80002a8 <__aeabi_dsub>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	ec43 2b17 	vmov	d7, r2, r3
 800155e:	eeb0 0a47 	vmov.f32	s0, s14
 8001562:	eef0 0a67 	vmov.f32	s1, s15
 8001566:	f00e fae7 	bl	800fb38 <sqrt>
 800156a:	eeb0 7a40 	vmov.f32	s14, s0
 800156e:	eef0 7a60 	vmov.f32	s15, s1
 8001572:	eeb0 1a47 	vmov.f32	s2, s14
 8001576:	eef0 1a67 	vmov.f32	s3, s15
 800157a:	eeb0 0a48 	vmov.f32	s0, s16
 800157e:	eef0 0a68 	vmov.f32	s1, s17
 8001582:	f00e fad7 	bl	800fb34 <atan2>
 8001586:	ec51 0b10 	vmov	r0, r1, d0
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	f7fe fe8d 	bl	80002ac <__adddf3>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double distance = RADIUS_OF_EARTH * c;
 800159a:	a30d      	add	r3, pc, #52	; (adr r3, 80015d0 <calculateDistance+0x260>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015a4:	f7ff f838 	bl	8000618 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return distance;
 80015b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80015b8:	eeb0 0a47 	vmov.f32	s0, s14
 80015bc:	eef0 0a67 	vmov.f32	s1, s15
 80015c0:	3748      	adds	r7, #72	; 0x48
 80015c2:	46bd      	mov	sp, r7
 80015c4:	ecbd 8b02 	vpop	{d8}
 80015c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	41584dae 	.word	0x41584dae
 80015d8:	3ff00000 	.word	0x3ff00000

080015dc <I2C_Start>:
//    -- Automatically generate a STOP condition after all bytes have been transmitted 
// Direction = 0: Master requests a write transfer
// Direction = 1: Master requests a read transfer
//=============================================================================== 

int8_t I2C_Start(I2C_TypeDef * I2Cx, uint32_t DevAddress, uint8_t Size, uint8_t Direction) {	
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	460b      	mov	r3, r1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	4613      	mov	r3, r2
 80015f0:	71bb      	strb	r3, [r7, #6]
	
	// Direction = 0: Master requests a write transfer
	// Direction = 1: Master requests a read transfer
	
	uint32_t tmpreg = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	
	// This bit is set by software, and cleared by hardware after the Start followed by the address
	// sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0.
	tmpreg = I2Cx->CR2;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	617b      	str	r3, [r7, #20]
	
	tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <I2C_Start+0x74>)
 8001600:	4013      	ands	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
	
	if (Direction == READ_FROM_SLAVE)
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d104      	bne.n	8001614 <I2C_Start+0x38>
		tmpreg |= I2C_CR2_RD_WRN;  // Read from Slave
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e003      	b.n	800161c <I2C_Start+0x40>
	else
		tmpreg &= ~I2C_CR2_RD_WRN; // Write to Slave
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800161a:	617b      	str	r3, [r7, #20]
		
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES));
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800162a:	4313      	orrs	r3, r2
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
	
	tmpreg |= I2C_CR2_START;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001638:	617b      	str	r3, [r7, #20]
	// RELOAD
	// 0: The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow).
	// 1: The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded).
	// tmpreg |= I2C_CR2_RELOAD;
	
	I2Cx->CR2 = tmpreg; 
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	605a      	str	r2, [r3, #4]
	
   	return 0;  // Success
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	fc009800 	.word	0xfc009800

08001654 <I2C_Stop>:

//===============================================================================
//                           I2C Stop
//=============================================================================== 
void I2C_Stop(I2C_TypeDef * I2Cx){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	// Master: Generate STOP bit after the current byte has been transferred 
	I2Cx->CR2 |= I2C_CR2_STOP;								
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
	// Wait until STOPF flag is reset
	while( (I2Cx->ISR & I2C_ISR_STOPF) == 0 ); 
 8001668:	bf00      	nop
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f9      	beq.n	800166a <I2C_Stop+0x16>
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <I2C_WaitLineIdle>:

//===============================================================================
//                           Wait for the bus is ready
//=============================================================================== 
void I2C_WaitLineIdle(I2C_TypeDef * I2Cx){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	// Wait until I2C bus is ready
	while( (I2Cx->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY );	// If busy, wait
 800168c:	bf00      	nop
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169a:	d0f8      	beq.n	800168e <I2C_WaitLineIdle+0xa>
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <I2C_SendData>:

//===============================================================================
//                           I2C Send Data
//=============================================================================== 
int8_t I2C_SendData(I2C_TypeDef * I2Cx, uint8_t DeviceAddress, uint8_t *pData, uint8_t Size) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	461a      	mov	r2, r3
 80016b6:	460b      	mov	r3, r1
 80016b8:	72fb      	strb	r3, [r7, #11]
 80016ba:	4613      	mov	r3, r2
 80016bc:	72bb      	strb	r3, [r7, #10]
	int i;
	
	if (Size <= 0 || pData == NULL) 
 80016be:	7abb      	ldrb	r3, [r7, #10]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <I2C_SendData+0x20>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <I2C_SendData+0x26>
		return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e040      	b.n	8001752 <I2C_SendData+0xa8>
	
	I2C_WaitLineIdle(I2Cx);
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff ffd7 	bl	8001684 <I2C_WaitLineIdle>
	
	if (I2C_Start(I2Cx, DeviceAddress, Size, WRITE_TO_SLAVE) < 0 )
 80016d6:	7af9      	ldrb	r1, [r7, #11]
 80016d8:	7aba      	ldrb	r2, [r7, #10]
 80016da:	2300      	movs	r3, #0
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff7d 	bl	80015dc <I2C_Start>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da02      	bge.n	80016ee <I2C_SendData+0x44>
		return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	e031      	b.n	8001752 <I2C_SendData+0xa8>
	// Send Data
	// Write the first data in DR register
	// while((I2Cx->ISR & I2C_ISR_TXE) == 0);
	// I2Cx->TXDR = pData[0] & I2C_TXDR_TXDATA;  

	for (i = 0; i < Size; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e010      	b.n	8001716 <I2C_SendData+0x6c>
		// TXE is set by hardware when the I2C_TXDR register is empty. It is cleared when the next
		// data to be sent is written in the I2C_TXDR register.
		while( (I2Cx->ISR & I2C_ISR_TXE) == 0 ); 
 80016f4:	bf00      	nop
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f9      	beq.n	80016f6 <I2C_SendData+0x4c>
		// TXIS bit is set by hardware when the I2C_TXDR register is empty and the data to be
		// transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be
		// sent is written in the I2C_TXDR register.
		// The TXIS flag is not set when a NACK is received.
		// while((I2Cx->ISR & I2C_ISR_TXIS) == 0 );
		I2Cx->TXDR = pData[i] & I2C_TXDR_TXDATA;  // TXE is cleared by writing to the TXDR register.
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < Size; i++) {
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	7abb      	ldrb	r3, [r7, #10]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbea      	blt.n	80016f4 <I2C_SendData+0x4a>
	}
	
	// Wait until TC flag is set 
	while((I2Cx->ISR & I2C_ISR_TC) == 0 && (I2Cx->ISR & I2C_ISR_NACKF) == 0);
 800171e:	bf00      	nop
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <I2C_SendData+0x8e>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f3      	beq.n	8001720 <I2C_SendData+0x76>
	
	if ( (I2Cx->ISR & I2C_ISR_NACKF) != 0 )
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <I2C_SendData+0xa0>
		return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	e003      	b.n	8001752 <I2C_SendData+0xa8>

	I2C_Stop(I2Cx);
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff ff82 	bl	8001654 <I2C_Stop>
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <I2C1_EV_IRQHandler>:
	
	return 0;
}


void I2C1_EV_IRQHandler(void){
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
	// I2C1->ICR |= 
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SquareRoot>:
 *
 * \param[in] a_nInput - unsigned integer for which to find the square root
 *
 * \return Integer square root of the input value.
 */
static uint32_t SquareRoot(uint32_t a_nInput) {
 8001776:	b480      	push	{r7}
 8001778:	b087      	sub	sp, #28
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
    uint32_t op  = a_nInput;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	617b      	str	r3, [r7, #20]
    uint32_t res = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
    uint32_t one = 1uL << 30; // The second-to-top bit is set: use 1u << 14 for uint16_t type; use 1uL<<30 for uint32_t type
 8001786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178a:	60fb      	str	r3, [r7, #12]

    // "one" starts at the highest power of four <= than the argument.
    while (one > op) {
 800178c:	e002      	b.n	8001794 <SquareRoot+0x1e>
        one >>= 2;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
    while (one > op) {
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f8      	bhi.n	800178e <SquareRoot+0x18>
    }

    while (one != 0) {
 800179c:	e016      	b.n	80017cc <SquareRoot+0x56>
        if (op >= res + one) {
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d30a      	bcc.n	80017c0 <SquareRoot+0x4a>
            op  = op - (res + one);
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
            res = res +  2 * one;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4413      	add	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        res >>= 1;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
        one >>= 2;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
    while (one != 0) {
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e5      	bne.n	800179e <SquareRoot+0x28>
    }
    return res;
 80017d2:	693b      	ldr	r3, [r7, #16]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <get_autocorr_peak_stats>:
//take a look at the original autocorrelation signal at index i and see if
//its a real peak or if its just a fake "noisy" peak corresponding to
//non-walking. basically just count the number of points of the
//autocorrelation peak to the right and left of the peak. this function gets
//the number of points to the right and left of the peak, as well as the delta amplitude
static void get_autocorr_peak_stats(int64_t *autocorr_buff, uint8_t *neg_slope_count, int64_t *delta_amplitude_right, uint8_t *pos_slope_count, int64_t *delta_amplitude_left, uint8_t peak_ind) {
 80017e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017e4:	b088      	sub	sp, #32
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6178      	str	r0, [r7, #20]
 80017ea:	6139      	str	r1, [r7, #16]
 80017ec:	60fa      	str	r2, [r7, #12]
 80017ee:	60bb      	str	r3, [r7, #8]

    //first look to the right of the peak. walk forward until the slope begins decreasing
    uint8_t  neg_slope_ind = peak_ind;
 80017f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80017f4:	77fb      	strb	r3, [r7, #31]
    uint16_t loop_limit    = NUM_AUTOCORR_LAGS-1;
 80017f6:	2331      	movs	r3, #49	; 0x31
 80017f8:	83bb      	strh	r3, [r7, #28]
    while ((autocorr_buff[neg_slope_ind+1] - autocorr_buff[neg_slope_ind] < 0) && (neg_slope_ind < loop_limit)) {
 80017fa:	e008      	b.n	800180e <get_autocorr_peak_stats+0x2e>
        *neg_slope_count = *neg_slope_count + 1;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	701a      	strb	r2, [r3, #0]
        neg_slope_ind    = neg_slope_ind + 1;
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	3301      	adds	r3, #1
 800180c:	77fb      	strb	r3, [r7, #31]
    while ((autocorr_buff[neg_slope_ind+1] - autocorr_buff[neg_slope_ind] < 0) && (neg_slope_ind < loop_limit)) {
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	3301      	adds	r3, #1
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4413      	add	r3, r2
 8001818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181c:	7ffb      	ldrb	r3, [r7, #31]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	1a86      	subs	r6, r0, r2
 800182a:	603e      	str	r6, [r7, #0]
 800182c:	eb61 0303 	sbc.w	r3, r1, r3
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da04      	bge.n	8001842 <get_autocorr_peak_stats+0x62>
 8001838:	7ffb      	ldrb	r3, [r7, #31]
 800183a:	b29b      	uxth	r3, r3
 800183c:	8bba      	ldrh	r2, [r7, #28]
 800183e:	429a      	cmp	r2, r3
 8001840:	d8dc      	bhi.n	80017fc <get_autocorr_peak_stats+0x1c>
    }

    //get the delta amplitude between peak and right trough
    *delta_amplitude_right = autocorr_buff[peak_ind] - autocorr_buff[neg_slope_ind];
 8001842:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4413      	add	r3, r2
 800184c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4413      	add	r3, r2
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	ebb0 0a02 	subs.w	sl, r0, r2
 8001860:	eb61 0b03 	sbc.w	fp, r1, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	e9c3 ab00 	strd	sl, fp, [r3]

    //next look to the left of the peak. walk backward until the slope begins increasing
    uint8_t pos_slope_ind = peak_ind;
 800186a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800186e:	77bb      	strb	r3, [r7, #30]
    loop_limit    = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	83bb      	strh	r3, [r7, #28]
    while ((autocorr_buff[pos_slope_ind] - autocorr_buff[pos_slope_ind-1] > 0) && (pos_slope_ind > loop_limit)) {
 8001874:	e008      	b.n	8001888 <get_autocorr_peak_stats+0xa8>
        *pos_slope_count = *pos_slope_count + 1;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	701a      	strb	r2, [r3, #0]
        pos_slope_ind    = pos_slope_ind - 1;
 8001882:	7fbb      	ldrb	r3, [r7, #30]
 8001884:	3b01      	subs	r3, #1
 8001886:	77bb      	strb	r3, [r7, #30]
    while ((autocorr_buff[pos_slope_ind] - autocorr_buff[pos_slope_ind-1] > 0) && (pos_slope_ind > loop_limit)) {
 8001888:	7fbb      	ldrb	r3, [r7, #30]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	4413      	add	r3, r2
 8001890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001894:	7fbb      	ldrb	r3, [r7, #30]
 8001896:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800189a:	3b01      	subs	r3, #1
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4413      	add	r3, r2
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	1a84      	subs	r4, r0, r2
 80018a8:	eb61 0503 	sbc.w	r5, r1, r3
 80018ac:	2c01      	cmp	r4, #1
 80018ae:	f175 0300 	sbcs.w	r3, r5, #0
 80018b2:	db04      	blt.n	80018be <get_autocorr_peak_stats+0xde>
 80018b4:	7fbb      	ldrb	r3, [r7, #30]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	8bba      	ldrh	r2, [r7, #28]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3db      	bcc.n	8001876 <get_autocorr_peak_stats+0x96>
    }

    //get the delta amplitude between the peak and the left trough
    *delta_amplitude_left = autocorr_buff[peak_ind] - autocorr_buff[pos_slope_ind];
 80018be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	4413      	add	r3, r2
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	7fbb      	ldrb	r3, [r7, #30]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	ebb0 0802 	subs.w	r8, r0, r2
 80018dc:	eb61 0903 	sbc.w	r9, r1, r3
 80018e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e2:	e9c3 8900 	strd	r8, r9, [r3]
}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018f0:	4770      	bx	lr

080018f2 <get_precise_peakind>:


//use the original autocorrelation signal to hone in on the
//exact peak index. this corresponds to the point where the points to the
//left and right are less than the current point
static uint8_t get_precise_peakind(int64_t *autocorr_buff, uint8_t peak_ind) {
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
    uint8_t loop_limit = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
    if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1])) {
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	78f9      	ldrb	r1, [r7, #3]
 8001910:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001914:	3901      	subs	r1, #1
 8001916:	00c9      	lsls	r1, r1, #3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4401      	add	r1, r0
 800191c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001920:	4290      	cmp	r0, r2
 8001922:	eb71 0303 	sbcs.w	r3, r1, r3
 8001926:	da11      	bge.n	800194c <get_precise_peakind+0x5a>
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	78f9      	ldrb	r1, [r7, #3]
 8001936:	3101      	adds	r1, #1
 8001938:	00c9      	lsls	r1, r1, #3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4401      	add	r1, r0
 800193e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001942:	4290      	cmp	r0, r2
 8001944:	eb71 0303 	sbcs.w	r3, r1, r3
 8001948:	f2c0 8087 	blt.w	8001a5a <get_precise_peakind+0x168>
        //peak_ind is perfectly set at the peak. nothing to do
    }
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	78f9      	ldrb	r1, [r7, #3]
 800195a:	3101      	adds	r1, #1
 800195c:	00c9      	lsls	r1, r1, #3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4401      	add	r1, r0
 8001962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001966:	4290      	cmp	r0, r2
 8001968:	eb71 0303 	sbcs.w	r3, r1, r3
 800196c:	da43      	bge.n	80019f6 <get_precise_peakind+0x104>
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001980:	3b01      	subs	r3, #1
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	4290      	cmp	r0, r2
 800198e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001992:	da30      	bge.n	80019f6 <get_precise_peakind+0x104>
        //peak is to the left. keep moving in that direction
        loop_limit = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1]) && (loop_limit < 10)) {
 8001998:	e005      	b.n	80019a6 <get_precise_peakind+0xb4>
            peak_ind = peak_ind - 1;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	3b01      	subs	r3, #1
 800199e:	70fb      	strb	r3, [r7, #3]
            loop_limit++;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1]) && (loop_limit < 10)) {
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	78f9      	ldrb	r1, [r7, #3]
 80019b4:	3101      	adds	r1, #1
 80019b6:	00c9      	lsls	r1, r1, #3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4401      	add	r1, r0
 80019bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c0:	4290      	cmp	r0, r2
 80019c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80019c6:	da47      	bge.n	8001a58 <get_precise_peakind+0x166>
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019da:	3b01      	subs	r3, #1
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	4290      	cmp	r0, r2
 80019e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80019ec:	da34      	bge.n	8001a58 <get_precise_peakind+0x166>
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b09      	cmp	r3, #9
 80019f2:	d9d2      	bls.n	800199a <get_precise_peakind+0xa8>
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 80019f4:	e030      	b.n	8001a58 <get_precise_peakind+0x166>
        }
    }
    else {
        //peak is to the right. keep moving in that direction
        loop_limit = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind+1]) && (loop_limit < 10)) {
 80019fa:	e005      	b.n	8001a08 <get_precise_peakind+0x116>
            peak_ind = peak_ind + 1;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	3301      	adds	r3, #1
 8001a00:	70fb      	strb	r3, [r7, #3]
            loop_limit++;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	3301      	adds	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind+1]) && (loop_limit < 10)) {
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	78f9      	ldrb	r1, [r7, #3]
 8001a16:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001a1a:	3901      	subs	r1, #1
 8001a1c:	00c9      	lsls	r1, r1, #3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4401      	add	r1, r0
 8001a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a26:	4290      	cmp	r0, r2
 8001a28:	eb71 0303 	sbcs.w	r3, r1, r3
 8001a2c:	da15      	bge.n	8001a5a <get_precise_peakind+0x168>
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	4290      	cmp	r0, r2
 8001a4a:	eb71 0303 	sbcs.w	r3, r1, r3
 8001a4e:	da04      	bge.n	8001a5a <get_precise_peakind+0x168>
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d9d2      	bls.n	80019fc <get_precise_peakind+0x10a>
 8001a56:	e000      	b.n	8001a5a <get_precise_peakind+0x168>
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 8001a58:	bf00      	nop
        }
    }
    return peak_ind;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <derivative>:


//calculate deriviative via FIR filter
static void derivative(int64_t *autocorr_buff, int64_t *deriv) {
 8001a68:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]

    uint8_t n          = 0;
 8001a74:	2100      	movs	r1, #0
 8001a76:	75f9      	strb	r1, [r7, #23]
    uint8_t i          = 0;
 8001a78:	2100      	movs	r1, #0
 8001a7a:	75b9      	strb	r1, [r7, #22]
    int64_t temp_deriv = 0;
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	e9c7 0102 	strd	r0, r1, [r7, #8]
    for (n = 0; n < NUM_AUTOCORR_LAGS; n++) {
 8001a88:	2100      	movs	r1, #0
 8001a8a:	75f9      	strb	r1, [r7, #23]
 8001a8c:	e03e      	b.n	8001b0c <derivative+0xa4>
        temp_deriv = 0;
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	e9c7 0102 	strd	r0, r1, [r7, #8]
        for (i = 0; i < DERIV_FILT_LEN; i++) {
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	75b9      	strb	r1, [r7, #22]
 8001a9e:	e027      	b.n	8001af0 <derivative+0x88>
            if (n-i >= 0) {     //handle the case when n < filter length
 8001aa0:	7df8      	ldrb	r0, [r7, #23]
 8001aa2:	7db9      	ldrb	r1, [r7, #22]
 8001aa4:	1a41      	subs	r1, r0, r1
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	db1f      	blt.n	8001aea <derivative+0x82>
                temp_deriv += deriv_coeffs[i]*autocorr_buff[n-i];
 8001aaa:	7db9      	ldrb	r1, [r7, #22]
 8001aac:	481c      	ldr	r0, [pc, #112]	; (8001b20 <derivative+0xb8>)
 8001aae:	5641      	ldrsb	r1, [r0, r1]
 8001ab0:	b249      	sxtb	r1, r1
 8001ab2:	17c8      	asrs	r0, r1, #31
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4605      	mov	r5, r0
 8001ab8:	7df8      	ldrb	r0, [r7, #23]
 8001aba:	7db9      	ldrb	r1, [r7, #22]
 8001abc:	1a41      	subs	r1, r0, r1
 8001abe:	00c9      	lsls	r1, r1, #3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4401      	add	r1, r0
 8001ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ac8:	fb00 fc05 	mul.w	ip, r0, r5
 8001acc:	fb04 f601 	mul.w	r6, r4, r1
 8001ad0:	4466      	add	r6, ip
 8001ad2:	fba4 2300 	umull	r2, r3, r4, r0
 8001ad6:	18f1      	adds	r1, r6, r3
 8001ad8:	460b      	mov	r3, r1
 8001ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ade:	eb10 0802 	adds.w	r8, r0, r2
 8001ae2:	eb41 0903 	adc.w	r9, r1, r3
 8001ae6:	e9c7 8902 	strd	r8, r9, [r7, #8]
        for (i = 0; i < DERIV_FILT_LEN; i++) {
 8001aea:	7db9      	ldrb	r1, [r7, #22]
 8001aec:	3101      	adds	r1, #1
 8001aee:	75b9      	strb	r1, [r7, #22]
 8001af0:	7db9      	ldrb	r1, [r7, #22]
 8001af2:	2904      	cmp	r1, #4
 8001af4:	d9d4      	bls.n	8001aa0 <derivative+0x38>
            }
        }
        deriv[n] = temp_deriv;
 8001af6:	7df9      	ldrb	r1, [r7, #23]
 8001af8:	00c9      	lsls	r1, r1, #3
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	1846      	adds	r6, r0, r1
 8001afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b02:	e9c6 0100 	strd	r0, r1, [r6]
    for (n = 0; n < NUM_AUTOCORR_LAGS; n++) {
 8001b06:	7df9      	ldrb	r1, [r7, #23]
 8001b08:	3101      	adds	r1, #1
 8001b0a:	75f9      	strb	r1, [r7, #23]
 8001b0c:	7df9      	ldrb	r1, [r7, #23]
 8001b0e:	2931      	cmp	r1, #49	; 0x31
 8001b10:	d9bd      	bls.n	8001a8e <derivative+0x26>
    }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001b1e:	4770      	bx	lr
 8001b20:	20000000 	.word	0x20000000

08001b24 <autocorr>:


//autocorrelation function
//this takes a lot of computation. there are efficient implementations, but this is more intuitive
static void autocorr(int32_t *lpf, int64_t *autocorr_buff) {
 8001b24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]

    uint8_t lag;
    uint16_t i;
    int64_t temp_ac;
    for (lag = 0; lag < NUM_AUTOCORR_LAGS; lag++) {
 8001b30:	2100      	movs	r1, #0
 8001b32:	75f9      	strb	r1, [r7, #23]
 8001b34:	e03f      	b.n	8001bb6 <autocorr+0x92>
        temp_ac = 0;
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        for (i = 0; i < NUM_TUPLES-lag; i++) {
 8001b42:	2100      	movs	r1, #0
 8001b44:	82b9      	strh	r1, [r7, #20]
 8001b46:	e025      	b.n	8001b94 <autocorr+0x70>
            temp_ac += (int64_t)lpf[i]*(int64_t)lpf[i+lag];
 8001b48:	8ab9      	ldrh	r1, [r7, #20]
 8001b4a:	0089      	lsls	r1, r1, #2
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4401      	add	r1, r0
 8001b50:	6809      	ldr	r1, [r1, #0]
 8001b52:	17c8      	asrs	r0, r1, #31
 8001b54:	460c      	mov	r4, r1
 8001b56:	4605      	mov	r5, r0
 8001b58:	8ab8      	ldrh	r0, [r7, #20]
 8001b5a:	7df9      	ldrb	r1, [r7, #23]
 8001b5c:	4401      	add	r1, r0
 8001b5e:	0089      	lsls	r1, r1, #2
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4401      	add	r1, r0
 8001b64:	6809      	ldr	r1, [r1, #0]
 8001b66:	17c8      	asrs	r0, r1, #31
 8001b68:	4688      	mov	r8, r1
 8001b6a:	4681      	mov	r9, r0
 8001b6c:	fb08 f005 	mul.w	r0, r8, r5
 8001b70:	fb04 f109 	mul.w	r1, r4, r9
 8001b74:	4401      	add	r1, r0
 8001b76:	fba4 2308 	umull	r2, r3, r4, r8
 8001b7a:	4419      	add	r1, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b82:	eb10 0a02 	adds.w	sl, r0, r2
 8001b86:	eb41 0b03 	adc.w	fp, r1, r3
 8001b8a:	e9c7 ab02 	strd	sl, fp, [r7, #8]
        for (i = 0; i < NUM_TUPLES-lag; i++) {
 8001b8e:	8ab9      	ldrh	r1, [r7, #20]
 8001b90:	3101      	adds	r1, #1
 8001b92:	82b9      	strh	r1, [r7, #20]
 8001b94:	8ab8      	ldrh	r0, [r7, #20]
 8001b96:	7df9      	ldrb	r1, [r7, #23]
 8001b98:	f1c1 0150 	rsb	r1, r1, #80	; 0x50
 8001b9c:	4288      	cmp	r0, r1
 8001b9e:	dbd3      	blt.n	8001b48 <autocorr+0x24>
        }
        autocorr_buff[lag] = temp_ac;
 8001ba0:	7df9      	ldrb	r1, [r7, #23]
 8001ba2:	00c9      	lsls	r1, r1, #3
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	1846      	adds	r6, r0, r1
 8001ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bac:	e9c6 0100 	strd	r0, r1, [r6]
    for (lag = 0; lag < NUM_AUTOCORR_LAGS; lag++) {
 8001bb0:	7df9      	ldrb	r1, [r7, #23]
 8001bb2:	3101      	adds	r1, #1
 8001bb4:	75f9      	strb	r1, [r7, #23]
 8001bb6:	7df9      	ldrb	r1, [r7, #23]
 8001bb8:	2931      	cmp	r1, #49	; 0x31
 8001bba:	d9bc      	bls.n	8001b36 <autocorr+0x12>
    }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bc8:	4770      	bx	lr
	...

08001bcc <remove_mean>:


//calculate and remove the mean
static void remove_mean(int32_t *lpf) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

    int32_t sum = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
    uint16_t i;
    for (i = 0; i < NUM_TUPLES; i++) {
 8001bd8:	2300      	movs	r3, #0
 8001bda:	817b      	strh	r3, [r7, #10]
 8001bdc:	e00a      	b.n	8001bf4 <remove_mean+0x28>
        sum += lpf[i];
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_TUPLES; i++) {
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	2b4f      	cmp	r3, #79	; 0x4f
 8001bf8:	d9f1      	bls.n	8001bde <remove_mean+0x12>
    }
    sum = sum/(NUM_TUPLES);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <remove_mean+0x78>)
 8001bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8001c02:	1152      	asrs	r2, r2, #5
 8001c04:	17db      	asrs	r3, r3, #31
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NUM_TUPLES; i++) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	e00e      	b.n	8001c2e <remove_mean+0x62>
        lpf[i] = lpf[i] - sum;
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	1a8a      	subs	r2, r1, r2
 8001c26:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_TUPLES; i++) {
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	817b      	strh	r3, [r7, #10]
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	2b4f      	cmp	r3, #79	; 0x4f
 8001c32:	d9ed      	bls.n	8001c10 <remove_mean+0x44>
    }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	66666667 	.word	0x66666667

08001c48 <lowpassfilt>:


//FIR low pass filter
static void lowpassfilt(uint8_t *mag_sqrt, int32_t *lpf) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]

    uint16_t n;
    uint8_t i;
    int32_t temp_lpf;
    for (n = 0; n < NUM_TUPLES; n++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	81fb      	strh	r3, [r7, #14]
 8001c56:	e028      	b.n	8001caa <lowpassfilt+0x62>
        temp_lpf = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < LPF_FILT_LEN; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	737b      	strb	r3, [r7, #13]
 8001c60:	e017      	b.n	8001c92 <lowpassfilt+0x4a>
            if (n-i >= 0) {     //handle the case when n < filter length
 8001c62:	89fa      	ldrh	r2, [r7, #14]
 8001c64:	7b7b      	ldrb	r3, [r7, #13]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0f      	blt.n	8001c8c <lowpassfilt+0x44>
                temp_lpf += (int32_t)lpf_coeffs[i]*(int32_t)mag_sqrt[n-i];
 8001c6c:	7b7b      	ldrb	r3, [r7, #13]
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <lowpassfilt+0x78>)
 8001c70:	56d3      	ldrsb	r3, [r2, r3]
 8001c72:	4619      	mov	r1, r3
 8001c74:	89fa      	ldrh	r2, [r7, #14]
 8001c76:	7b7b      	ldrb	r3, [r7, #13]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < LPF_FILT_LEN; i++) {
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	737b      	strb	r3, [r7, #13]
 8001c92:	7b7b      	ldrb	r3, [r7, #13]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d9e4      	bls.n	8001c62 <lowpassfilt+0x1a>
            }
        }
        lpf[n] = temp_lpf;
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	601a      	str	r2, [r3, #0]
    for (n = 0; n < NUM_TUPLES; n++) {
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	2b4f      	cmp	r3, #79	; 0x4f
 8001cae:	d9d3      	bls.n	8001c58 <lowpassfilt+0x10>
    }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <count_steps>:


//algorithm interface
uint8_t count_steps(int8_t *data) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
    //assume data is in the format data = [x1,y1,z1,x2,y2,z2...etc]
    //calculate the magnitude of each of triplet ie temp_mag = [x1^2+y1^2+z1^2]
    //then temp_mag = sqrt(temp_mag)
    uint16_t i;
    uint16_t temp_mag;
    for (i = 0; i < NUM_TUPLES; i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001cd4:	e054      	b.n	8001d80 <count_steps+0xb8>
        temp_mag = (uint16_t)((uint16_t)data[i*3+0]*(uint16_t)data[i*3+0] + (uint16_t)data[i*3+1]*(uint16_t)data[i*3+1] + (uint16_t)data[i*3+2]*(uint16_t)data[i*3+2]);
 8001cd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	fb11 f303 	smulbb	r3, r1, r3
 8001d02:	b299      	uxth	r1, r3
 8001d04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	f993 3000 	ldrsb.w	r3, [r3]
 8001d16:	b298      	uxth	r0, r3
 8001d18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	3301      	adds	r3, #1
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	fb10 f303 	smulbb	r3, r0, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	440b      	add	r3, r1
 8001d34:	b299      	uxth	r1, r3
 8001d36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	f993 3000 	ldrsb.w	r3, [r3]
 8001d48:	b298      	uxth	r0, r3
 8001d4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	3302      	adds	r3, #2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	f993 3000 	ldrsb.w	r3, [r3]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	fb10 f303 	smulbb	r3, r0, r3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	847b      	strh	r3, [r7, #34]	; 0x22
        mag_sqrt[i] = (uint8_t)SquareRoot(temp_mag);
 8001d68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fd03 	bl	8001776 <SquareRoot>
 8001d70:	4602      	mov	r2, r0
 8001d72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d74:	b2d1      	uxtb	r1, r2
 8001d76:	4a5a      	ldr	r2, [pc, #360]	; (8001ee0 <count_steps+0x218>)
 8001d78:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < NUM_TUPLES; i++) {
 8001d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d82:	2b4f      	cmp	r3, #79	; 0x4f
 8001d84:	d9a7      	bls.n	8001cd6 <count_steps+0xe>
    }

    //apply low pass filter to mag_sqrt, result is stored in lpf
    lowpassfilt(mag_sqrt, lpf);
 8001d86:	4957      	ldr	r1, [pc, #348]	; (8001ee4 <count_steps+0x21c>)
 8001d88:	4855      	ldr	r0, [pc, #340]	; (8001ee0 <count_steps+0x218>)
 8001d8a:	f7ff ff5d 	bl	8001c48 <lowpassfilt>

    //remove mean from lpf, store result in lpf
    remove_mean(lpf);
 8001d8e:	4855      	ldr	r0, [pc, #340]	; (8001ee4 <count_steps+0x21c>)
 8001d90:	f7ff ff1c 	bl	8001bcc <remove_mean>

    //do the autocorrelation on the lpf buffer, store the result in autocorr_buff
    autocorr(lpf, autocorr_buff);
 8001d94:	4954      	ldr	r1, [pc, #336]	; (8001ee8 <count_steps+0x220>)
 8001d96:	4853      	ldr	r0, [pc, #332]	; (8001ee4 <count_steps+0x21c>)
 8001d98:	f7ff fec4 	bl	8001b24 <autocorr>

    //get the derivative of the autocorr_buff, store in deriv
    derivative(autocorr_buff, deriv);
 8001d9c:	4953      	ldr	r1, [pc, #332]	; (8001eec <count_steps+0x224>)
 8001d9e:	4852      	ldr	r0, [pc, #328]	; (8001ee8 <count_steps+0x220>)
 8001da0:	f7ff fe62 	bl	8001a68 <derivative>

    //look for first zero crossing where derivative goes from positive to negative. that
    //corresponds to the first positive peak in the autocorrelation. look at two samples
    //instead of just one to maybe reduce the chances of getting tricked by noise
    uint8_t peak_ind = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    //start index is set to 8 lags, which corresponds to a walking rate of 2.5Hz @20Hz sampling rate. its probably
    //running if its faster than this
    for (i = 8; i < NUM_AUTOCORR_LAGS; i++) {
 8001daa:	2308      	movs	r3, #8
 8001dac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dae:	e02f      	b.n	8001e10 <count_steps+0x148>
        if ((deriv[i] > 0) && (deriv[i-1] > 0) && (deriv[i-2] < 0) && (deriv[i-3] < 0)) {
 8001db0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001db2:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <count_steps+0x224>)
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	2a01      	cmp	r2, #1
 8001dbe:	f173 0300 	sbcs.w	r3, r3, #0
 8001dc2:	db22      	blt.n	8001e0a <count_steps+0x142>
 8001dc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <count_steps+0x224>)
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	2a01      	cmp	r2, #1
 8001dd4:	f173 0300 	sbcs.w	r3, r3, #0
 8001dd8:	db17      	blt.n	8001e0a <count_steps+0x142>
 8001dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ddc:	3b02      	subs	r3, #2
 8001dde:	4a43      	ldr	r2, [pc, #268]	; (8001eec <count_steps+0x224>)
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da0e      	bge.n	8001e0a <count_steps+0x142>
 8001dec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dee:	3b03      	subs	r3, #3
 8001df0:	4a3e      	ldr	r2, [pc, #248]	; (8001eec <count_steps+0x224>)
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da05      	bge.n	8001e0a <count_steps+0x142>
            peak_ind = i-1;
 8001dfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            break;
 8001e08:	e005      	b.n	8001e16 <count_steps+0x14e>
    for (i = 8; i < NUM_AUTOCORR_LAGS; i++) {
 8001e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e12:	2b31      	cmp	r3, #49	; 0x31
 8001e14:	d9cc      	bls.n	8001db0 <count_steps+0xe8>
        }
    }

    //hone in on the exact peak index
    peak_ind = get_precise_peakind(autocorr_buff, peak_ind);
 8001e16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4832      	ldr	r0, [pc, #200]	; (8001ee8 <count_steps+0x220>)
 8001e1e:	f7ff fd68 	bl	80018f2 <get_precise_peakind>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    //get autocorrelation peak stats
    uint8_t neg_slope_count = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    int64_t delta_amplitude_right = 0;
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint8_t pos_slope_count = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    int64_t delta_amplitude_left = 0;
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9c7 2302 	strd	r2, r3, [r7, #8]
    get_autocorr_peak_stats(autocorr_buff, &neg_slope_count, &delta_amplitude_right, &pos_slope_count, &delta_amplitude_left, peak_ind);
 8001e4a:	f107 0017 	add.w	r0, r7, #23
 8001e4e:	f107 0218 	add.w	r2, r7, #24
 8001e52:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8001e56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4603      	mov	r3, r0
 8001e64:	4820      	ldr	r0, [pc, #128]	; (8001ee8 <count_steps+0x220>)
 8001e66:	f7ff fcbb 	bl	80017e0 <get_autocorr_peak_stats>

    //now check the conditions to see if it was a real peak or not, and if so, calculate the number of steps
    uint8_t num_steps = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if ((pos_slope_count > AUTOCORR_MIN_HALF_LEN) && (neg_slope_count > AUTOCORR_MIN_HALF_LEN) && (delta_amplitude_right > AUTOCORR_DELTA_AMPLITUDE_THRESH) && (delta_amplitude_left > AUTOCORR_DELTA_AMPLITUDE_THRESH)) {
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d927      	bls.n	8001ec6 <count_steps+0x1fe>
 8001e76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d923      	bls.n	8001ec6 <count_steps+0x1fe>
 8001e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fb99 	bl	80005bc <__aeabi_l2d>
 8001e8a:	a313      	add	r3, pc, #76	; (adr r3, 8001ed8 <count_steps+0x210>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fe52 	bl	8000b38 <__aeabi_dcmpgt>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <count_steps+0x1fe>
 8001e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fb8b 	bl	80005bc <__aeabi_l2d>
 8001ea6:	a30c      	add	r3, pc, #48	; (adr r3, 8001ed8 <count_steps+0x210>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fe44 	bl	8000b38 <__aeabi_dcmpgt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <count_steps+0x1fe>
        //the period is peak_ind/sampling_rate seconds. that corresponds to a frequency of 1/period
        //with the frequency known, and the number of seconds is 4 seconds, you can then find out the number of steps
        num_steps = (SAMPLING_RATE*WINDOW_LENGTH)/peak_ind;
 8001eb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eba:	2250      	movs	r2, #80	; 0x50
 8001ebc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ec0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001ec4:	e002      	b.n	8001ecc <count_steps+0x204>
    } else {
        //not a valid autocorrelation peak
        num_steps = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    }

    return num_steps;
 8001ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	41bdcd65 	.word	0x41bdcd65
 8001ee0:	2000023c 	.word	0x2000023c
 8001ee4:	2000028c 	.word	0x2000028c
 8001ee8:	200003d0 	.word	0x200003d0
 8001eec:	20000560 	.word	0x20000560

08001ef0 <lis3dh_init>:

#define I2C_READ_BIT   (1)
#define I2C_WRITE_BIT  (0)
#define TIMEOUT_MS     (50)

HAL_StatusTypeDef lis3dh_init(lis3dh_t *lis3dh, I2C_HandleTypeDef *i2c, uint8_t *buf, uint16_t bufsize) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	lis3dh->i2c = i2c;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	601a      	str	r2, [r3, #0]
	lis3dh->i2c_addr = LIS3DH_ADDR << 1;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2230      	movs	r2, #48	; 0x30
 8001f08:	809a      	strh	r2, [r3, #4]
	lis3dh->buf = buf;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
	lis3dh->bufsize = bufsize;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	829a      	strh	r2, [r3, #20]

	/* Let device wake up. */
	HAL_Delay(LID3DH_POWER_UP_MS);
 8001f16:	200a      	movs	r0, #10
 8001f18:	f001 fbf0 	bl	80036fc <HAL_Delay>

	/* Check if device is ready */
	status = HAL_I2C_IsDeviceReady(lis3dh->i2c, lis3dh->i2c_addr, 1, TIMEOUT_MS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8899      	ldrh	r1, [r3, #4]
 8001f24:	2332      	movs	r3, #50	; 0x32
 8001f26:	2201      	movs	r2, #1
 8001f28:	f002 fa0a 	bl	8004340 <HAL_I2C_IsDeviceReady>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <lis3dh_init+0x4a>
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	e02b      	b.n	8001f92 <lis3dh_init+0xa2>

    /* Confirm the device identifies itself as expected. */
	status = lis3dh_read(lis3dh, REG_WHO_AM_I, 1);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f849 	bl	8001fd6 <lis3dh_read>
 8001f44:	4603      	mov	r3, r0
 8001f46:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <lis3dh_init+0x62>
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	e01f      	b.n	8001f92 <lis3dh_init+0xa2>
	if (lis3dh->buf[0] != LIS3DH_DEVICE_ID) return HAL_ERROR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b33      	cmp	r3, #51	; 0x33
 8001f5a:	d001      	beq.n	8001f60 <lis3dh_init+0x70>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e018      	b.n	8001f92 <lis3dh_init+0xa2>

	// Set power mode to operational; Enable all axes; Normal operation.
	status = lis3dh_write(lis3dh, REG_CTRL_REG1, DATA_RATE_NORM_1kHz344 | 0x07);
 8001f60:	2297      	movs	r2, #151	; 0x97
 8001f62:	2120      	movs	r1, #32
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f85d 	bl	8002024 <lis3dh_write>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <lis3dh_init+0x88>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	e00c      	b.n	8001f92 <lis3dh_init+0xa2>

	// High resolution; BDU enabled.
	status = lis3dh_write(lis3dh, REG_CTRL_REG4, 0x88);
 8001f78:	2288      	movs	r2, #136	; 0x88
 8001f7a:	2123      	movs	r1, #35	; 0x23
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f851 	bl	8002024 <lis3dh_write>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <lis3dh_init+0xa0>
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	e000      	b.n	8001f92 <lis3dh_init+0xa2>

	return status;
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <lis3dh_xyz_available>:

bool lis3dh_xyz_available(lis3dh_t *lis3dh) {
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	/*
	 * Read STATUS_REG bit 2 (ZYXDA): New X, Y, Z data available.
	 */
	HAL_StatusTypeDef status;
	status = lis3dh_read(lis3dh, REG_STATUS_REG, 1);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2127      	movs	r1, #39	; 0x27
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f815 	bl	8001fd6 <lis3dh_read>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return false;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <lis3dh_xyz_available+0x20>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e009      	b.n	8001fce <lis3dh_xyz_available+0x34>

	return (lis3dh->buf[0] & 2) > 0;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bfcc      	ite	gt
 8001fc8:	2301      	movgt	r3, #1
 8001fca:	2300      	movle	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <lis3dh_read>:

HAL_StatusTypeDef lis3dh_read(lis3dh_t* lis3dh, uint16_t reg, uint16_t bufsize) {
 8001fd6:	b590      	push	{r4, r7, lr}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af04      	add	r7, sp, #16
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	807b      	strh	r3, [r7, #2]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	803b      	strh	r3, [r7, #0]
	if (bufsize > lis3dh->bufsize) return HAL_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8a9b      	ldrh	r3, [r3, #20]
 8001fea:	883a      	ldrh	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d901      	bls.n	8001ff4 <lis3dh_read+0x1e>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e013      	b.n	800201c <lis3dh_read+0x46>

	return HAL_I2C_Mem_Read(lis3dh->i2c, lis3dh->i2c_addr | I2C_READ_BIT, reg, 1, lis3dh->buf, bufsize, TIMEOUT_MS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	889b      	ldrh	r3, [r3, #4]
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b299      	uxth	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	887c      	ldrh	r4, [r7, #2]
 8002008:	2232      	movs	r2, #50	; 0x32
 800200a:	9202      	str	r2, [sp, #8]
 800200c:	883a      	ldrh	r2, [r7, #0]
 800200e:	9201      	str	r2, [sp, #4]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2301      	movs	r3, #1
 8002014:	4622      	mov	r2, r4
 8002016:	f002 f879 	bl	800410c <HAL_I2C_Mem_Read>
 800201a:	4603      	mov	r3, r0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}

08002024 <lis3dh_write>:

HAL_StatusTypeDef lis3dh_write(lis3dh_t* lis3dh, uint16_t reg, uint8_t data) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af04      	add	r7, sp, #16
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
	return HAL_I2C_Mem_Write(lis3dh->i2c, lis3dh->i2c_addr, reg, 1, &data, 1, TIMEOUT_MS);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	8899      	ldrh	r1, [r3, #4]
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	2332      	movs	r3, #50	; 0x32
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2301      	movs	r3, #1
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	1c7b      	adds	r3, r7, #1
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	f001 ff4a 	bl	8003ee4 <HAL_I2C_Mem_Write>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <lis3dh_get_xyz>:

HAL_StatusTypeDef lis3dh_get_xyz(lis3dh_t* lis3dh) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b088      	sub	sp, #32
 800205e:	af04      	add	r7, sp, #16
 8002060:	6078      	str	r0, [r7, #4]
	if (lis3dh->bufsize < 6) return HAL_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	8a9b      	ldrh	r3, [r3, #20]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d801      	bhi.n	800206e <lis3dh_get_xyz+0x14>
 800206a:	2301      	movs	r3, #1
 800206c:	e04b      	b.n	8002106 <lis3dh_get_xyz+0xac>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
			lis3dh->i2c,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
			lis3dh->i2c_addr | I2C_READ_BIT,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	889b      	ldrh	r3, [r3, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b299      	uxth	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2232      	movs	r2, #50	; 0x32
 8002082:	9202      	str	r2, [sp, #8]
 8002084:	2206      	movs	r2, #6
 8002086:	9201      	str	r2, [sp, #4]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	22a8      	movs	r2, #168	; 0xa8
 800208e:	f002 f83d 	bl	800410c <HAL_I2C_Mem_Read>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]
			1,
			lis3dh->buf,
			6,
			TIMEOUT_MS);

	if (status != HAL_OK) {
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <lis3dh_get_xyz+0x5e>
		lis3dh->x = -1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f04f 32ff 	mov.w	r2, #4294967295
 80020a2:	609a      	str	r2, [r3, #8]
		lis3dh->y = -1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f04f 32ff 	mov.w	r2, #4294967295
 80020aa:	60da      	str	r2, [r3, #12]
		lis3dh->z = -1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	611a      	str	r2, [r3, #16]
		return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	e026      	b.n	8002106 <lis3dh_get_xyz+0xac>
	}

	lis3dh->x = (int) (((int8_t) lis3dh->buf[1]) << 8) | lis3dh->buf[0];
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	3301      	adds	r3, #1
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6992      	ldr	r2, [r2, #24]
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
	lis3dh->y = (int) (((int8_t) lis3dh->buf[3]) << 8) | lis3dh->buf[2];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6992      	ldr	r2, [r2, #24]
 80020e0:	3202      	adds	r2, #2
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
	lis3dh->z = (int) (((int8_t) lis3dh->buf[5]) << 8) | lis3dh->buf[4];
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6992      	ldr	r2, [r2, #24]
 80020fa:	3204      	adds	r2, #4
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]

	return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_UART_RxCpltCallback>:
char cur_time[9];
char pre_time[9];
double alt = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a2f      	ldr	r2, [pc, #188]	; (80021d8 <HAL_UART_RxCpltCallback+0xc8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d157      	bne.n	80021d0 <HAL_UART_RxCpltCallback+0xc0>

        nmea_buf[i++] = nmea;
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_UART_RxCpltCallback+0xcc>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	b2d1      	uxtb	r1, r2
 8002128:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <HAL_UART_RxCpltCallback+0xcc>)
 800212a:	7011      	strb	r1, [r2, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_UART_RxCpltCallback+0xd0>)
 8002130:	7819      	ldrb	r1, [r3, #0]
 8002132:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002134:	5499      	strb	r1, [r3, r2]

        if (nmea == '\n' || i >= sizeof(nmea_buf) - 1) {
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_UART_RxCpltCallback+0xd0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b0a      	cmp	r3, #10
 800213c:	d003      	beq.n	8002146 <HAL_UART_RxCpltCallback+0x36>
 800213e:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_UART_RxCpltCallback+0xcc>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	d13f      	bne.n	80021c6 <HAL_UART_RxCpltCallback+0xb6>
        	if(nmea_buf[3]=='G' && nmea_buf[4]=='G' && nmea_buf[5] == 'A')
 8002146:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002148:	78db      	ldrb	r3, [r3, #3]
 800214a:	2b47      	cmp	r3, #71	; 0x47
 800214c:	d132      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0xa4>
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002150:	791b      	ldrb	r3, [r3, #4]
 8002152:	2b47      	cmp	r3, #71	; 0x47
 8002154:	d12e      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0xa4>
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002158:	795b      	ldrb	r3, [r3, #5]
 800215a:	2b41      	cmp	r3, #65	; 0x41
 800215c:	d12a      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0xa4>
        	{
        		memcpy(nmea_gga, nmea_buf, 256);
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216a:	461a      	mov	r2, r3
 800216c:	f00a fb4a 	bl	800c804 <memcpy>
        		cur_lat = get_lat(nmea_gga);
 8002170:	481d      	ldr	r0, [pc, #116]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002172:	f7fe ff4d 	bl	8001010 <get_lat>
 8002176:	eeb0 7a40 	vmov.f32	s14, s0
 800217a:	eef0 7a60 	vmov.f32	s15, s1
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_UART_RxCpltCallback+0xdc>)
 8002180:	ed83 7b00 	vstr	d7, [r3]
        		cur_lon = get_lon(nmea_gga);
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 8002186:	f7fe ff97 	bl	80010b8 <get_lon>
 800218a:	eeb0 7a40 	vmov.f32	s14, s0
 800218e:	eef0 7a60 	vmov.f32	s15, s1
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_UART_RxCpltCallback+0xe0>)
 8002194:	ed83 7b00 	vstr	d7, [r3]
        		get_time(nmea_gga, pre_time);
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_UART_RxCpltCallback+0xe4>)
 800219a:	4813      	ldr	r0, [pc, #76]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 800219c:	f7fe ffe0 	bl	8001160 <get_time>
        		alt = get_alt(nmea_gga);
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <HAL_UART_RxCpltCallback+0xd8>)
 80021a2:	f7ff f825 	bl	80011f0 <get_alt>
 80021a6:	eeb0 7a40 	vmov.f32	s14, s0
 80021aa:	eef0 7a60 	vmov.f32	s15, s1
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_UART_RxCpltCallback+0xe8>)
 80021b0:	ed83 7b00 	vstr	d7, [r3]
        	}

            memset(nmea_buf, 0, sizeof(nmea_buf));
 80021b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b8:	2100      	movs	r1, #0
 80021ba:	480a      	ldr	r0, [pc, #40]	; (80021e4 <HAL_UART_RxCpltCallback+0xd4>)
 80021bc:	f00a fa0d 	bl	800c5da <memset>
            i = 0;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_UART_RxCpltCallback+0xcc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
        }

        // Start the next reception
        HAL_UART_Receive_IT(&huart1, &nmea, 1);
 80021c6:	2201      	movs	r2, #1
 80021c8:	4905      	ldr	r1, [pc, #20]	; (80021e0 <HAL_UART_RxCpltCallback+0xd0>)
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <HAL_UART_RxCpltCallback+0xc8>)
 80021cc:	f004 fb6e 	bl	80068ac <HAL_UART_Receive_IT>
    }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200007fc 	.word	0x200007fc
 80021dc:	20000aac 	.word	0x20000aac
 80021e0:	200008a9 	.word	0x200008a9
 80021e4:	200008ac 	.word	0x200008ac
 80021e8:	200009ac 	.word	0x200009ac
 80021ec:	20000ab0 	.word	0x20000ab0
 80021f0:	20000ab8 	.word	0x20000ab8
 80021f4:	20000adc 	.word	0x20000adc
 80021f8:	20000ae8 	.word	0x20000ae8
 80021fc:	00000000 	.word	0x00000000

08002200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	f5ad 6d3d 	sub.w	sp, sp, #3024	; 0xbd0
 8002206:	af04      	add	r7, sp, #16
	UINT bytesWrote;
	FRESULT fres;
	BYTE writeBuf1[35];

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002208:	f001 fa03 	bl	8003612 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800220c:	f000 fb24 	bl	8002858 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002210:	f000 fc62 	bl	8002ad8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002214:	f000 fb6e 	bl	80028f4 <MX_I2C1_Init>
	MX_I2C2_Init();
 8002218:	f000 fbac 	bl	8002974 <MX_I2C2_Init>
	MX_SPI1_Init();
 800221c:	f000 fbea 	bl	80029f4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8002220:	f000 fc26 	bl	8002a70 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8002224:	f005 fdd4 	bl	8007dd0 <MX_FATFS_Init>

	/* Create new file on MicroSD */
	HAL_Delay(1000);
 8002228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800222c:	f001 fa66 	bl	80036fc <HAL_Delay>
	f_mount(&FatFs, "", 1); //1=mount now
 8002230:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8002234:	2201      	movs	r2, #1
 8002236:	49a0      	ldr	r1, [pc, #640]	; (80024b8 <main+0x2b8>)
 8002238:	4618      	mov	r0, r3
 800223a:	f008 f811 	bl	800a260 <f_mount>
	f_open(&fil, "crds.txt", FA_CREATE_ALWAYS | FA_OPEN_ALWAYS);
 800223e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8002242:	2218      	movs	r2, #24
 8002244:	499d      	ldr	r1, [pc, #628]	; (80024bc <main+0x2bc>)
 8002246:	4618      	mov	r0, r3
 8002248:	f008 f850 	bl	800a2ec <f_open>
	f_close(&fil);
 800224c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8002250:	4618      	mov	r0, r3
 8002252:	f008 fbf1 	bl	800aa38 <f_close>
	f_mount(NULL, "", 0); //0=demount
 8002256:	2200      	movs	r2, #0
 8002258:	4997      	ldr	r1, [pc, #604]	; (80024b8 <main+0x2b8>)
 800225a:	2000      	movs	r0, #0
 800225c:	f008 f800 	bl	800a260 <f_mount>

	char buf1[16];
	char sd1[35];
	char message[64];

	status = lis3dh_init(&lis3dh, &hi2c1, xyz_buf, 6);
 8002260:	2306      	movs	r3, #6
 8002262:	4a97      	ldr	r2, [pc, #604]	; (80024c0 <main+0x2c0>)
 8002264:	4997      	ldr	r1, [pc, #604]	; (80024c4 <main+0x2c4>)
 8002266:	4898      	ldr	r0, [pc, #608]	; (80024c8 <main+0x2c8>)
 8002268:	f7ff fe42 	bl	8001ef0 <lis3dh_init>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b96      	ldr	r3, [pc, #600]	; (80024cc <main+0x2cc>)
 8002272:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8002274:	4b95      	ldr	r3, [pc, #596]	; (80024cc <main+0x2cc>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <main+0x84>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800227c:	2140      	movs	r1, #64	; 0x40
 800227e:	4894      	ldr	r0, [pc, #592]	; (80024d0 <main+0x2d0>)
 8002280:	f001 fd7a 	bl	8003d78 <HAL_GPIO_TogglePin>
	}

	ssd1306_Init();
 8002284:	f000 fd18 	bl	8002cb8 <ssd1306_Init>
	ssd1306_SetCursor(2,0);
 8002288:	2100      	movs	r1, #0
 800228a:	2002      	movs	r0, #2
 800228c:	f000 fee2 	bl	8003054 <ssd1306_SetCursor>
	ssd1306_WriteString("Steps:", Font_11x18, White);
 8002290:	4a90      	ldr	r2, [pc, #576]	; (80024d4 <main+0x2d4>)
 8002292:	2301      	movs	r3, #1
 8002294:	ca06      	ldmia	r2, {r1, r2}
 8002296:	4890      	ldr	r0, [pc, #576]	; (80024d8 <main+0x2d8>)
 8002298:	f000 feb6 	bl	8003008 <ssd1306_WriteString>
	ssd1306_SetCursor(2,30);
 800229c:	211e      	movs	r1, #30
 800229e:	2002      	movs	r0, #2
 80022a0:	f000 fed8 	bl	8003054 <ssd1306_SetCursor>
	ssd1306_WriteString("Distance:", Font_11x18, White);
 80022a4:	4a8b      	ldr	r2, [pc, #556]	; (80024d4 <main+0x2d4>)
 80022a6:	2301      	movs	r3, #1
 80022a8:	ca06      	ldmia	r2, {r1, r2}
 80022aa:	488c      	ldr	r0, [pc, #560]	; (80024dc <main+0x2dc>)
 80022ac:	f000 feac 	bl	8003008 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80022b0:	f000 fd9a 	bl	8002de8 <ssd1306_UpdateScreen>


	uint16_t  num_steps  = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8a7 3bbe 	strh.w	r3, [r7, #3006]	; 0xbbe
	float total_distance = 0;
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 80022c2:	6013      	str	r3, [r2, #0]
	float new_distance;
	float miles;
	HAL_UART_Receive_IT(&huart1, &nmea, 1);
 80022c4:	2201      	movs	r2, #1
 80022c6:	4986      	ldr	r1, [pc, #536]	; (80024e0 <main+0x2e0>)
 80022c8:	4886      	ldr	r0, [pc, #536]	; (80024e4 <main+0x2e4>)
 80022ca:	f004 faef 	bl	80068ac <HAL_UART_Receive_IT>

	while (1)
	{
		//hold the data from the CSV file in a fifo-like data structure where the accelerometer data looks like
		//[x1,y1,z1,x2,y2,z2...x400,y400,z400]
		int8_t acc[NUM_SAMPLES*3] = {0};
 80022ce:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80022d2:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	3304      	adds	r3, #4
 80022dc:	f240 529c 	movw	r2, #1436	; 0x59c
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00a f979 	bl	800c5da <memset>
		uint16_t i    = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8a7 3bb6 	strh.w	r3, [r7, #2998]	; 0xbb6
		float    temp = 0;
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f507 623b 	add.w	r2, r7, #2992	; 0xbb0
 80022f6:	6013      	str	r3, [r2, #0]
		while(i < NUM_SAMPLES*3) //while data array is being filled
 80022f8:	e0b9      	b.n	800246e <main+0x26e>
		{
			HAL_Delay(50); //20Hz
 80022fa:	2032      	movs	r0, #50	; 0x32
 80022fc:	f001 f9fe 	bl	80036fc <HAL_Delay>

			//scaling factor to convert the decimal data to int8 integers. calculated in matlab by taking the absolute value of all the data
			//and then calculating the max of that data. then divide that by 127 to get the scaling factor
			float scale_factor = 55.3293;
 8002300:	4b79      	ldr	r3, [pc, #484]	; (80024e8 <main+0x2e8>)
 8002302:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002306:	6013      	str	r3, [r2, #0]

			if(lis3dh_xyz_available(&lis3dh)) {
 8002308:	486f      	ldr	r0, [pc, #444]	; (80024c8 <main+0x2c8>)
 800230a:	f7ff fe46 	bl	8001f9a <lis3dh_xyz_available>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ac 	beq.w	800246e <main+0x26e>
				status = lis3dh_get_xyz(&lis3dh);
 8002316:	486c      	ldr	r0, [pc, #432]	; (80024c8 <main+0x2c8>)
 8002318:	f7ff fe9f 	bl	800205a <lis3dh_get_xyz>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <main+0x2cc>)
 8002322:	701a      	strb	r2, [r3, #0]
				float xx = lis3dh.x/ACCEL_DATA_SCALER;
 8002324:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <main+0x2c8>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	da02      	bge.n	8002332 <main+0x132>
 800232c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	139b      	asrs	r3, r3, #14
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233c:	f607 339c 	addw	r3, r7, #2972	; 0xb9c
 8002340:	edc3 7a00 	vstr	s15, [r3]
				float yy = lis3dh.y/ACCEL_DATA_SCALER;
 8002344:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <main+0x2c8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da02      	bge.n	8002352 <main+0x152>
 800234c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002350:	333f      	adds	r3, #63	; 0x3f
 8002352:	139b      	asrs	r3, r3, #14
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235c:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8002360:	edc3 7a00 	vstr	s15, [r3]
				float zz = lis3dh.z/ACCEL_DATA_SCALER;
 8002364:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <main+0x2c8>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da02      	bge.n	8002372 <main+0x172>
 800236c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002370:	333f      	adds	r3, #63	; 0x3f
 8002372:	139b      	asrs	r3, r3, #14
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8002380:	edc3 7a00 	vstr	s15, [r3]

				temp     = roundf(xx*scale_factor);
 8002384:	f607 339c 	addw	r3, r7, #2972	; 0xb9c
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	eeb0 0a67 	vmov.f32	s0, s15
 800239c:	f00d fe00 	bl	800ffa0 <roundf>
 80023a0:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80023a4:	ed83 0a00 	vstr	s0, [r3]
				acc[i++] = (int8_t)temp;
 80023a8:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	f8a7 2bb6 	strh.w	r2, [r7, #2998]	; 0xbb6
 80023b2:	461a      	mov	r2, r3
 80023b4:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80023c4:	793b      	ldrb	r3, [r7, #4]
 80023c6:	b259      	sxtb	r1, r3
 80023c8:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80023cc:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 80023d0:	5499      	strb	r1, [r3, r2]

				temp     = roundf(yy*scale_factor);
 80023d2:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ea:	f00d fdd9 	bl	800ffa0 <roundf>
 80023ee:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80023f2:	ed83 0a00 	vstr	s0, [r3]
				acc[i++] = (int8_t)temp;
 80023f6:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	f8a7 2bb6 	strh.w	r2, [r7, #2998]	; 0xbb6
 8002400:	461a      	mov	r2, r3
 8002402:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002412:	793b      	ldrb	r3, [r7, #4]
 8002414:	b259      	sxtb	r1, r3
 8002416:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 800241a:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 800241e:	5499      	strb	r1, [r3, r2]

				temp     = roundf(zz*scale_factor);
 8002420:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8002424:	ed93 7a00 	vldr	s14, [r3]
 8002428:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	f00d fdb2 	bl	800ffa0 <roundf>
 800243c:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8002440:	ed83 0a00 	vstr	s0, [r3]
				acc[i++] = (int8_t)temp;
 8002444:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	f8a7 2bb6 	strh.w	r2, [r7, #2998]	; 0xbb6
 800244e:	461a      	mov	r2, r3
 8002450:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002460:	793b      	ldrb	r3, [r7, #4]
 8002462:	b259      	sxtb	r1, r3
 8002464:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8002468:	f6a3 23c4 	subw	r3, r3, #2756	; 0xac4
 800246c:	5499      	strb	r1, [r3, r2]
		while(i < NUM_SAMPLES*3) //while data array is being filled
 800246e:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 8002472:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8002476:	f4ff af40 	bcc.w	80022fa <main+0xfa>
			}
		}
		//pass data to step counting algorithm, 4 seconds at a time (which is the WINDOW_LENGTH). put the data into a temporary buffer each loop
		int8_t   data[NUM_TUPLES*3] = {0};
 800247a:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 800247e:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	3304      	adds	r3, #4
 8002488:	22ec      	movs	r2, #236	; 0xec
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f00a f8a4 	bl	800c5da <memset>
		uint8_t  num_segments       = NUM_SAMPLES/(SAMPLING_RATE*WINDOW_LENGTH);
 8002492:	2306      	movs	r3, #6
 8002494:	f887 3baf 	strb.w	r3, [r7, #2991]	; 0xbaf
		uint16_t j                  = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	f8a7 3bb4 	strh.w	r3, [r7, #2996]	; 0xbb4

		for(i = 0; i < num_segments; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	f8a7 3bb6 	strh.w	r3, [r7, #2998]	; 0xbb6
 80024a4:	e058      	b.n	8002558 <main+0x358>
			for(j = SAMPLING_RATE*WINDOW_LENGTH*i*3; j < SAMPLING_RATE*WINDOW_LENGTH*(i+1)*3; j++) {
 80024a6:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 80024aa:	461a      	mov	r2, r3
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	f8a7 3bb4 	strh.w	r3, [r7, #2996]	; 0xbb4
 80024b6:	e033      	b.n	8002520 <main+0x320>
 80024b8:	080113dc 	.word	0x080113dc
 80024bc:	080113e0 	.word	0x080113e0
 80024c0:	20000884 	.word	0x20000884
 80024c4:	200006f0 	.word	0x200006f0
 80024c8:	2000088c 	.word	0x2000088c
 80024cc:	200008a8 	.word	0x200008a8
 80024d0:	48000800 	.word	0x48000800
 80024d4:	2000001c 	.word	0x2000001c
 80024d8:	080113ec 	.word	0x080113ec
 80024dc:	080113f4 	.word	0x080113f4
 80024e0:	200008a9 	.word	0x200008a9
 80024e4:	200007fc 	.word	0x200007fc
 80024e8:	425d5134 	.word	0x425d5134
				data[j-SAMPLING_RATE*WINDOW_LENGTH*i*3] = acc[j];
 80024ec:	f8b7 1bb4 	ldrh.w	r1, [r7, #2996]	; 0xbb4
 80024f0:	f8b7 0bb4 	ldrh.w	r0, [r7, #2996]	; 0xbb4
 80024f4:	f8b7 2bb6 	ldrh.w	r2, [r7, #2998]	; 0xbb6
 80024f8:	4613      	mov	r3, r2
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4403      	add	r3, r0
 8002502:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8002506:	f6a2 22c4 	subw	r2, r2, #2756	; 0xac4
 800250a:	5651      	ldrsb	r1, [r2, r1]
 800250c:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8002510:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 8002514:	54d1      	strb	r1, [r2, r3]
			for(j = SAMPLING_RATE*WINDOW_LENGTH*i*3; j < SAMPLING_RATE*WINDOW_LENGTH*(i+1)*3; j++) {
 8002516:	f8b7 3bb4 	ldrh.w	r3, [r7, #2996]	; 0xbb4
 800251a:	3301      	adds	r3, #1
 800251c:	f8a7 3bb4 	strh.w	r3, [r7, #2996]	; 0xbb4
 8002520:	f8b7 1bb4 	ldrh.w	r1, [r7, #2996]	; 0xbb4
 8002524:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4299      	cmp	r1, r3
 8002534:	dbda      	blt.n	80024ec <main+0x2ec>
			}
			num_steps += count_steps(data);
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fbc4 	bl	8001cc8 <count_steps>
 8002540:	4603      	mov	r3, r0
 8002542:	b29a      	uxth	r2, r3
 8002544:	f8b7 3bbe 	ldrh.w	r3, [r7, #3006]	; 0xbbe
 8002548:	4413      	add	r3, r2
 800254a:	f8a7 3bbe 	strh.w	r3, [r7, #3006]	; 0xbbe
		for(i = 0; i < num_segments; i++) {
 800254e:	f8b7 3bb6 	ldrh.w	r3, [r7, #2998]	; 0xbb6
 8002552:	3301      	adds	r3, #1
 8002554:	f8a7 3bb6 	strh.w	r3, [r7, #2998]	; 0xbb6
 8002558:	f897 3baf 	ldrb.w	r3, [r7, #2991]	; 0xbaf
 800255c:	b29b      	uxth	r3, r3
 800255e:	f8b7 2bb6 	ldrh.w	r2, [r7, #2998]	; 0xbb6
 8002562:	429a      	cmp	r2, r3
 8002564:	d39f      	bcc.n	80024a6 <main+0x2a6>
		}

		ssd1306_Fill(Black);
 8002566:	2000      	movs	r0, #0
 8002568:	f000 fc1a 	bl	8002da0 <ssd1306_Fill>
		ssd1306_SetCursor(2,0);
 800256c:	2100      	movs	r1, #0
 800256e:	2002      	movs	r0, #2
 8002570:	f000 fd70 	bl	8003054 <ssd1306_SetCursor>
		ssd1306_WriteString("Steps:", Font_11x18, White);
 8002574:	4aa6      	ldr	r2, [pc, #664]	; (8002810 <main+0x610>)
 8002576:	2301      	movs	r3, #1
 8002578:	ca06      	ldmia	r2, {r1, r2}
 800257a:	48a6      	ldr	r0, [pc, #664]	; (8002814 <main+0x614>)
 800257c:	f000 fd44 	bl	8003008 <ssd1306_WriteString>
		ssd1306_SetCursor(2,15);
 8002580:	210f      	movs	r1, #15
 8002582:	2002      	movs	r0, #2
 8002584:	f000 fd66 	bl	8003054 <ssd1306_SetCursor>
		ssd1306_WriteString(itoa(num_steps,message,10), Font_11x18, White);
 8002588:	f8b7 3bbe 	ldrh.w	r3, [r7, #3006]	; 0xbbe
 800258c:	f207 619c 	addw	r1, r7, #1692	; 0x69c
 8002590:	220a      	movs	r2, #10
 8002592:	4618      	mov	r0, r3
 8002594:	f008 fc1e 	bl	800add4 <itoa>
 8002598:	4a9d      	ldr	r2, [pc, #628]	; (8002810 <main+0x610>)
 800259a:	2301      	movs	r3, #1
 800259c:	ca06      	ldmia	r2, {r1, r2}
 800259e:	f000 fd33 	bl	8003008 <ssd1306_WriteString>
		ssd1306_SetCursor(2,30);
 80025a2:	211e      	movs	r1, #30
 80025a4:	2002      	movs	r0, #2
 80025a6:	f000 fd55 	bl	8003054 <ssd1306_SetCursor>
		ssd1306_WriteString("Distance:", Font_11x18, White);
 80025aa:	4a99      	ldr	r2, [pc, #612]	; (8002810 <main+0x610>)
 80025ac:	2301      	movs	r3, #1
 80025ae:	ca06      	ldmia	r2, {r1, r2}
 80025b0:	4899      	ldr	r0, [pc, #612]	; (8002818 <main+0x618>)
 80025b2:	f000 fd29 	bl	8003008 <ssd1306_WriteString>

		if((pre_lat == 0) && (pre_lon == 0)) {
 80025b6:	4b99      	ldr	r3, [pc, #612]	; (800281c <main+0x61c>)
 80025b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	f7fe fa90 	bl	8000ae8 <__aeabi_dcmpeq>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d018      	beq.n	8002600 <main+0x400>
 80025ce:	4b94      	ldr	r3, [pc, #592]	; (8002820 <main+0x620>)
 80025d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f7fe fa84 	bl	8000ae8 <__aeabi_dcmpeq>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <main+0x400>
		  ssd1306_SetCursor(2,50);
 80025e6:	2132      	movs	r1, #50	; 0x32
 80025e8:	2002      	movs	r0, #2
 80025ea:	f000 fd33 	bl	8003054 <ssd1306_SetCursor>
		  ssd1306_WriteString("Need GPS Lock", Font_7x10, White);
 80025ee:	4a8d      	ldr	r2, [pc, #564]	; (8002824 <main+0x624>)
 80025f0:	2301      	movs	r3, #1
 80025f2:	ca06      	ldmia	r2, {r1, r2}
 80025f4:	488c      	ldr	r0, [pc, #560]	; (8002828 <main+0x628>)
 80025f6:	f000 fd07 	bl	8003008 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80025fa:	f000 fbf5 	bl	8002de8 <ssd1306_UpdateScreen>
 80025fe:	e0ef      	b.n	80027e0 <main+0x5e0>
		}
		else {
			sprintf(sd1,"%fN,%fW,%s",pre_lat,pre_lon,pre_time);
 8002600:	4b86      	ldr	r3, [pc, #536]	; (800281c <main+0x61c>)
 8002602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002606:	4b86      	ldr	r3, [pc, #536]	; (8002820 <main+0x620>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f207 64dc 	addw	r4, r7, #1756	; 0x6dc
 8002610:	4d86      	ldr	r5, [pc, #536]	; (800282c <main+0x62c>)
 8002612:	9502      	str	r5, [sp, #8]
 8002614:	e9cd 2300 	strd	r2, r3, [sp]
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4984      	ldr	r1, [pc, #528]	; (8002830 <main+0x630>)
 800261e:	4620      	mov	r0, r4
 8002620:	f009 ff4a 	bl	800c4b8 <siprintf>

			fres = f_mount(&FatFs, "", 1); //1=mount now
 8002624:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8002628:	2201      	movs	r2, #1
 800262a:	4982      	ldr	r1, [pc, #520]	; (8002834 <main+0x634>)
 800262c:	4618      	mov	r0, r3
 800262e:	f007 fe17 	bl	800a260 <f_mount>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 3bae 	strb.w	r3, [r7, #2990]	; 0xbae
			if(fres != FR_OK) {
 8002638:	f897 3bae 	ldrb.w	r3, [r7, #2990]	; 0xbae
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <main+0x44a>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	487d      	ldr	r0, [pc, #500]	; (8002838 <main+0x638>)
 8002644:	f001 fb98 	bl	8003d78 <HAL_GPIO_TogglePin>
				while(1);
 8002648:	e7fe      	b.n	8002648 <main+0x448>
			}

			fres = f_open(&fil, "crds.txt", FA_WRITE | FA_OPEN_ALWAYS);
 800264a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800264e:	2212      	movs	r2, #18
 8002650:	497a      	ldr	r1, [pc, #488]	; (800283c <main+0x63c>)
 8002652:	4618      	mov	r0, r3
 8002654:	f007 fe4a 	bl	800a2ec <f_open>
 8002658:	4603      	mov	r3, r0
 800265a:	f887 3bae 	strb.w	r3, [r7, #2990]	; 0xbae
			if(fres == FR_OK) {
 800265e:	f897 3bae 	ldrb.w	r3, [r7, #2990]	; 0xbae
 8002662:	2b00      	cmp	r3, #0
 8002664:	d127      	bne.n	80026b6 <main+0x4b6>
				f_lseek(&fil, f_size(&fil));
 8002666:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 800266a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f008 fa08 	bl	800aa8c <f_lseek>
				strncpy((char*)writeBuf1, sd1, 35);
 800267c:	f207 61dc 	addw	r1, r7, #1756	; 0x6dc
 8002680:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002684:	2223      	movs	r2, #35	; 0x23
 8002686:	4618      	mov	r0, r3
 8002688:	f009 ffce 	bl	800c628 <strncpy>
				fres = f_write(&fil, writeBuf1, 35, &bytesWrote);
 800268c:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8002690:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8002694:	f507 60e7 	add.w	r0, r7, #1848	; 0x738
 8002698:	2223      	movs	r2, #35	; 0x23
 800269a:	f007 ffe3 	bl	800a664 <f_write>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 3bae 	strb.w	r3, [r7, #2990]	; 0xbae
				if(fres != FR_OK) {
 80026a4:	f897 3bae 	ldrb.w	r3, [r7, #2990]	; 0xbae
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <main+0x4c0>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	4862      	ldr	r0, [pc, #392]	; (8002838 <main+0x638>)
 80026b0:	f001 fb62 	bl	8003d78 <HAL_GPIO_TogglePin>
					while(1);
 80026b4:	e7fe      	b.n	80026b4 <main+0x4b4>
				}
			}
			else {
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80026b6:	2140      	movs	r1, #64	; 0x40
 80026b8:	485f      	ldr	r0, [pc, #380]	; (8002838 <main+0x638>)
 80026ba:	f001 fb5d 	bl	8003d78 <HAL_GPIO_TogglePin>
				while(1);
 80026be:	e7fe      	b.n	80026be <main+0x4be>
			}

			f_close(&fil);
 80026c0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80026c4:	4618      	mov	r0, r3
 80026c6:	f008 f9b7 	bl	800aa38 <f_close>

			f_mount(NULL, "", 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	4959      	ldr	r1, [pc, #356]	; (8002834 <main+0x634>)
 80026ce:	2000      	movs	r0, #0
 80026d0:	f007 fdc6 	bl	800a260 <f_mount>

			new_distance = calculateDistance(pre_lat, pre_lon, cur_lat, cur_lon);
 80026d4:	4b51      	ldr	r3, [pc, #324]	; (800281c <main+0x61c>)
 80026d6:	ed93 7b00 	vldr	d7, [r3]
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <main+0x620>)
 80026dc:	ed93 6b00 	vldr	d6, [r3]
 80026e0:	4b57      	ldr	r3, [pc, #348]	; (8002840 <main+0x640>)
 80026e2:	ed93 5b00 	vldr	d5, [r3]
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <main+0x644>)
 80026e8:	ed93 4b00 	vldr	d4, [r3]
 80026ec:	eeb0 3a44 	vmov.f32	s6, s8
 80026f0:	eef0 3a64 	vmov.f32	s7, s9
 80026f4:	eeb0 2a45 	vmov.f32	s4, s10
 80026f8:	eef0 2a65 	vmov.f32	s5, s11
 80026fc:	eeb0 1a46 	vmov.f32	s2, s12
 8002700:	eef0 1a66 	vmov.f32	s3, s13
 8002704:	eeb0 0a47 	vmov.f32	s0, s14
 8002708:	eef0 0a67 	vmov.f32	s1, s15
 800270c:	f7fe fe30 	bl	8001370 <calculateDistance>
 8002710:	ec53 2b10 	vmov	r2, r3, d0
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f7fe fa76 	bl	8000c08 <__aeabi_d2f>
 800271c:	4603      	mov	r3, r0
 800271e:	f607 32a8 	addw	r2, r7, #2984	; 0xba8
 8002722:	6013      	str	r3, [r2, #0]
			if (new_distance > MIN_GPS_DISTANCE){
 8002724:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	dd0d      	ble.n	8002756 <main+0x556>
			  total_distance += new_distance;
 800273a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8002752:	edc3 7a00 	vstr	s15, [r3]
			}
			if (total_distance < 400)
 8002756:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002848 <main+0x648>
 8002762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d50c      	bpl.n	8002786 <main+0x586>
			{
			  sprintf(buf1,"%0.2f meters",total_distance);
 800276c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	f7fd fef9 	bl	8000568 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	f507 60e0 	add.w	r0, r7, #1792	; 0x700
 800277e:	4933      	ldr	r1, [pc, #204]	; (800284c <main+0x64c>)
 8002780:	f009 fe9a 	bl	800c4b8 <siprintf>
 8002784:	e01f      	b.n	80027c6 <main+0x5c6>
			}
			else{
			  miles = total_distance / METERS_TO_MILES;
 8002786:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	f7fd feec 	bl	8000568 <__aeabi_f2d>
 8002790:	a31d      	add	r3, pc, #116	; (adr r3, 8002808 <main+0x608>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fe f869 	bl	800086c <__aeabi_ddiv>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe fa31 	bl	8000c08 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f607 32a4 	addw	r2, r7, #2980	; 0xba4
 80027ac:	6013      	str	r3, [r2, #0]
			  sprintf(buf1,"%0.2f miles",miles);
 80027ae:	f607 33a4 	addw	r3, r7, #2980	; 0xba4
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	f7fd fed8 	bl	8000568 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	f507 60e0 	add.w	r0, r7, #1792	; 0x700
 80027c0:	4923      	ldr	r1, [pc, #140]	; (8002850 <main+0x650>)
 80027c2:	f009 fe79 	bl	800c4b8 <siprintf>
			}
			ssd1306_SetCursor(2,45);
 80027c6:	212d      	movs	r1, #45	; 0x2d
 80027c8:	2002      	movs	r0, #2
 80027ca:	f000 fc43 	bl	8003054 <ssd1306_SetCursor>
			ssd1306_WriteString(buf1, Font_11x18, White);
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <main+0x610>)
 80027d0:	f507 60e0 	add.w	r0, r7, #1792	; 0x700
 80027d4:	2301      	movs	r3, #1
 80027d6:	ca06      	ldmia	r2, {r1, r2}
 80027d8:	f000 fc16 	bl	8003008 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80027dc:	f000 fb04 	bl	8002de8 <ssd1306_UpdateScreen>

		}
			  pre_lat = cur_lat;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <main+0x640>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <main+0x61c>)
 80027e8:	e9c1 2300 	strd	r2, r3, [r1]
			  pre_lon = cur_lon;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <main+0x644>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	490b      	ldr	r1, [pc, #44]	; (8002820 <main+0x620>)
 80027f4:	e9c1 2300 	strd	r2, r3, [r1]
			  strcpy(pre_time, cur_time);
 80027f8:	4916      	ldr	r1, [pc, #88]	; (8002854 <main+0x654>)
 80027fa:	480c      	ldr	r0, [pc, #48]	; (800282c <main+0x62c>)
 80027fc:	f009 fffa 	bl	800c7f4 <strcpy>
	{
 8002800:	e565      	b.n	80022ce <main+0xce>
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	28f5c28f 	.word	0x28f5c28f
 800280c:	4099255c 	.word	0x4099255c
 8002810:	2000001c 	.word	0x2000001c
 8002814:	080113ec 	.word	0x080113ec
 8002818:	080113f4 	.word	0x080113f4
 800281c:	20000ac0 	.word	0x20000ac0
 8002820:	20000ac8 	.word	0x20000ac8
 8002824:	20000014 	.word	0x20000014
 8002828:	08011400 	.word	0x08011400
 800282c:	20000adc 	.word	0x20000adc
 8002830:	08011410 	.word	0x08011410
 8002834:	080113dc 	.word	0x080113dc
 8002838:	48000800 	.word	0x48000800
 800283c:	080113e0 	.word	0x080113e0
 8002840:	20000ab0 	.word	0x20000ab0
 8002844:	20000ab8 	.word	0x20000ab8
 8002848:	43c80000 	.word	0x43c80000
 800284c:	0801141c 	.word	0x0801141c
 8002850:	0801142c 	.word	0x0801142c
 8002854:	20000ad0 	.word	0x20000ad0

08002858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b096      	sub	sp, #88	; 0x58
 800285c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2244      	movs	r2, #68	; 0x44
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f009 feb7 	bl	800c5da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800286c:	463b      	mov	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800287a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800287e:	f002 f9c7 	bl	8004c10 <HAL_PWREx_ControlVoltageScaling>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002888:	f000 f9a8 	bl	8002bdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002896:	2302      	movs	r3, #2
 8002898:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800289a:	2303      	movs	r3, #3
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 20;
 80028a2:	2314      	movs	r3, #20
 80028a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028a6:	2302      	movs	r3, #2
 80028a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028aa:	2302      	movs	r3, #2
 80028ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fa02 	bl	8004cbc <HAL_RCC_OscConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80028be:	f000 f98d 	bl	8002bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	230f      	movs	r3, #15
 80028c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c6:	2303      	movs	r3, #3
 80028c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028d6:	463b      	mov	r3, r7
 80028d8:	2104      	movs	r1, #4
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fe50 	bl	8005580 <HAL_RCC_ClockConfig>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80028e6:	f000 f979 	bl	8002bdc <Error_Handler>
  }
}
 80028ea:	bf00      	nop
 80028ec:	3758      	adds	r7, #88	; 0x58
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_I2C1_Init+0x74>)
 80028fa:	4a1c      	ldr	r2, [pc, #112]	; (800296c <MX_I2C1_Init+0x78>)
 80028fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_I2C1_Init+0x74>)
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <MX_I2C1_Init+0x7c>)
 8002902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_I2C1_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <MX_I2C1_Init+0x74>)
 800290c:	2201      	movs	r2, #1
 800290e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_I2C1_Init+0x74>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <MX_I2C1_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <MX_I2C1_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_I2C1_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <MX_I2C1_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800292e:	480e      	ldr	r0, [pc, #56]	; (8002968 <MX_I2C1_Init+0x74>)
 8002930:	f001 fa3c 	bl	8003dac <HAL_I2C_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800293a:	f000 f94f 	bl	8002bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800293e:	2100      	movs	r1, #0
 8002940:	4809      	ldr	r0, [pc, #36]	; (8002968 <MX_I2C1_Init+0x74>)
 8002942:	f002 f8bf 	bl	8004ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800294c:	f000 f946 	bl	8002bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002950:	2100      	movs	r1, #0
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_I2C1_Init+0x74>)
 8002954:	f002 f901 	bl	8004b5a <HAL_I2CEx_ConfigDigitalFilter>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800295e:	f000 f93d 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200006f0 	.word	0x200006f0
 800296c:	40005400 	.word	0x40005400
 8002970:	10909cec 	.word	0x10909cec

08002974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MX_I2C2_Init+0x74>)
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <MX_I2C2_Init+0x78>)
 800297c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <MX_I2C2_Init+0x74>)
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <MX_I2C2_Init+0x7c>)
 8002982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <MX_I2C2_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_I2C2_Init+0x74>)
 800298c:	2201      	movs	r2, #1
 800298e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <MX_I2C2_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_I2C2_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <MX_I2C2_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <MX_I2C2_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MX_I2C2_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029ae:	480e      	ldr	r0, [pc, #56]	; (80029e8 <MX_I2C2_Init+0x74>)
 80029b0:	f001 f9fc 	bl	8003dac <HAL_I2C_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80029ba:	f000 f90f 	bl	8002bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029be:	2100      	movs	r1, #0
 80029c0:	4809      	ldr	r0, [pc, #36]	; (80029e8 <MX_I2C2_Init+0x74>)
 80029c2:	f002 f87f 	bl	8004ac4 <HAL_I2CEx_ConfigAnalogFilter>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80029cc:	f000 f906 	bl	8002bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029d0:	2100      	movs	r1, #0
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_I2C2_Init+0x74>)
 80029d4:	f002 f8c1 	bl	8004b5a <HAL_I2CEx_ConfigDigitalFilter>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80029de:	f000 f8fd 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000744 	.word	0x20000744
 80029ec:	40005800 	.word	0x40005800
 80029f0:	10909cec 	.word	0x10909cec

080029f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <MX_SPI1_Init+0x74>)
 80029fa:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <MX_SPI1_Init+0x78>)
 80029fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a2a:	2238      	movs	r2, #56	; 0x38
 8002a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a42:	2207      	movs	r2, #7
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a4e:	2208      	movs	r2, #8
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_SPI1_Init+0x74>)
 8002a54:	f003 f93e 	bl	8005cd4 <HAL_SPI_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a5e:	f000 f8bd 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000798 	.word	0x20000798
 8002a6c:	40013000 	.word	0x40013000

08002a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <MX_USART1_UART_Init+0x64>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002aae:	2210      	movs	r2, #16
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_USART1_UART_Init+0x60>)
 8002abc:	f003 fea8 	bl	8006810 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002ac6:	f000 f889 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200007fc 	.word	0x200007fc
 8002ad4:	40013800 	.word	0x40013800

08002ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afa:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <MX_GPIO_Init+0xf8>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2110      	movs	r1, #16
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f001 f8f7 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b60:	481c      	ldr	r0, [pc, #112]	; (8002bd4 <MX_GPIO_Init+0xfc>)
 8002b62:	f001 f8f1 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	481b      	ldr	r0, [pc, #108]	; (8002bd8 <MX_GPIO_Init+0x100>)
 8002b6c:	f001 f8ec 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002b70:	2310      	movs	r3, #16
 8002b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f000 ff6b 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480b      	ldr	r0, [pc, #44]	; (8002bd4 <MX_GPIO_Init+0xfc>)
 8002ba8:	f000 ff5c 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bac:	2340      	movs	r3, #64	; 0x40
 8002bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <MX_GPIO_Init+0x100>)
 8002bc4:	f000 ff4e 	bl	8003a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	48000800 	.word	0x48000800

08002bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <Error_Handler+0x8>

08002be6 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "I2C.h"

void ssd1306_Reset(void) {
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
		uint8_t buffer[2];
		buffer[0] = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	733b      	strb	r3, [r7, #12]
		buffer[1] = byte;
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	737b      	strb	r3, [r7, #13]
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
 8002c06:	f107 020c 	add.w	r2, r7, #12
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	2178      	movs	r1, #120	; 0x78
 8002c0e:	4803      	ldr	r0, [pc, #12]	; (8002c1c <ssd1306_WriteCommand+0x28>)
 8002c10:	f7fe fd4b 	bl	80016aa <I2C_SendData>
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40005800 	.word	0x40005800

08002c20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c2c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002c30:	6018      	str	r0, [r3, #0]
 8002c32:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c36:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002c3a:	6019      	str	r1, [r3, #0]
		int i;
		uint8_t buffer2[SSD1306_BUFFER_SIZE+1];
		buffer2[0] = 0x40;
 8002c3c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c40:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	701a      	strb	r2, [r3, #0]
		for(i=0; i<buff_size;  i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8002c4e:	e015      	b.n	8002c7c <ssd1306_WriteData+0x5c>
			buffer2[i+1] = buffer[i];
 8002c50:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002c54:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002c58:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	441a      	add	r2, r3
 8002c60:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002c64:	3301      	adds	r3, #1
 8002c66:	7811      	ldrb	r1, [r2, #0]
 8002c68:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002c6c:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8002c70:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<buff_size;  i++)
 8002c72:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002c76:	3301      	adds	r3, #1
 8002c78:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8002c7c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002c80:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002c84:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d8e0      	bhi.n	8002c50 <ssd1306_WriteData+0x30>
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer2, buff_size+1);
 8002c8e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c92:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f107 0208 	add.w	r2, r7, #8
 8002ca2:	2178      	movs	r1, #120	; 0x78
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <ssd1306_WriteData+0x94>)
 8002ca6:	f7fe fd00 	bl	80016aa <I2C_SendData>
}
 8002caa:	bf00      	nop
 8002cac:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40005800 	.word	0x40005800

08002cb8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
		volatile uint32_t i;
	
    // Reset OLED
    ssd1306_Reset();
 8002cbe:	f7ff ff92 	bl	8002be6 <ssd1306_Reset>

    // Wait for the screen to boot
	  for(i=0; i<100000; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	e002      	b.n	8002cce <ssd1306_Init+0x16>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <ssd1306_Init+0xe0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d9f8      	bls.n	8002cc8 <ssd1306_Init+0x10>
			;

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f000 f9e8 	bl	80030ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002cdc:	2020      	movs	r0, #32
 8002cde:	f7ff ff89 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff ff86 	bl	8002bf4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ce8:	20b0      	movs	r0, #176	; 0xb0
 8002cea:	f7ff ff83 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002cee:	20c8      	movs	r0, #200	; 0xc8
 8002cf0:	f7ff ff80 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x00); //---set low column address
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7ff ff7d 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002cfa:	2010      	movs	r0, #16
 8002cfc:	f7ff ff7a 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002d00:	2040      	movs	r0, #64	; 0x40
 8002d02:	f7ff ff77 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d06:	20ff      	movs	r0, #255	; 0xff
 8002d08:	f000 f9bc 	bl	8003084 <ssd1306_SetContrast>

    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d0c:	20a1      	movs	r0, #161	; 0xa1
 8002d0e:	f7ff ff71 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d12:	20a6      	movs	r0, #166	; 0xa6
 8002d14:	f7ff ff6e 	bl	8002bf4 <ssd1306_WriteCommand>

    // Set multiplex ratio.
    ssd1306_WriteCommand(0x3F); //for 64 height display
 8002d18:	203f      	movs	r0, #63	; 0x3f
 8002d1a:	f7ff ff6b 	bl	8002bf4 <ssd1306_WriteCommand>


    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d1e:	20a4      	movs	r0, #164	; 0xa4
 8002d20:	f7ff ff68 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002d24:	20d3      	movs	r0, #211	; 0xd3
 8002d26:	f7ff ff65 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7ff ff62 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d30:	20d5      	movs	r0, #213	; 0xd5
 8002d32:	f7ff ff5f 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d36:	20f0      	movs	r0, #240	; 0xf0
 8002d38:	f7ff ff5c 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002d3c:	20d9      	movs	r0, #217	; 0xd9
 8002d3e:	f7ff ff59 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002d42:	2022      	movs	r0, #34	; 0x22
 8002d44:	f7ff ff56 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002d48:	20da      	movs	r0, #218	; 0xda
 8002d4a:	f7ff ff53 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);// for 64 height display
 8002d4e:	2012      	movs	r0, #18
 8002d50:	f7ff ff50 	bl	8002bf4 <ssd1306_WriteCommand>


    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002d54:	20db      	movs	r0, #219	; 0xdb
 8002d56:	f7ff ff4d 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002d5a:	2020      	movs	r0, #32
 8002d5c:	f7ff ff4a 	bl	8002bf4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002d60:	208d      	movs	r0, #141	; 0x8d
 8002d62:	f7ff ff47 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002d66:	2014      	movs	r0, #20
 8002d68:	f7ff ff44 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f000 f99d 	bl	80030ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f000 f814 	bl	8002da0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002d78:	f000 f836 	bl	8002de8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <ssd1306_Init+0xe4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <ssd1306_Init+0xe4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <ssd1306_Init+0xe4>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	715a      	strb	r2, [r3, #5]
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0001869f 	.word	0x0001869f
 8002d9c:	20000ef0 	.word	0x20000ef0

08002da0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e00d      	b.n	8002dcc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <ssd1306_Fill+0x1a>
 8002db6:	2100      	movs	r1, #0
 8002db8:	e000      	b.n	8002dbc <ssd1306_Fill+0x1c>
 8002dba:	21ff      	movs	r1, #255	; 0xff
 8002dbc:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <ssd1306_Fill+0x44>)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	460a      	mov	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d3ed      	bcc.n	8002db0 <ssd1306_Fill+0x10>
    }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000af0 	.word	0x20000af0

08002de8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
		uint8_t i;
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002dee:	2300      	movs	r3, #0
 8002df0:	71fb      	strb	r3, [r7, #7]
 8002df2:	e016      	b.n	8002e22 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	3b50      	subs	r3, #80	; 0x50
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fefa 	bl	8002bf4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff fef7 	bl	8002bf4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002e06:	2010      	movs	r0, #16
 8002e08:	f7ff fef4 	bl	8002bf4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	01db      	lsls	r3, r3, #7
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <ssd1306_UpdateScreen+0x4c>)
 8002e12:	4413      	add	r3, r2
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff02 	bl	8002c20 <ssd1306_WriteData>
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	d9e5      	bls.n	8002df4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000af0 	.word	0x20000af0

08002e38 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
 8002e42:	460b      	mov	r3, r1
 8002e44:	71bb      	strb	r3, [r7, #6]
 8002e46:	4613      	mov	r3, r2
 8002e48:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db48      	blt.n	8002ee4 <ssd1306_DrawPixel+0xac>
 8002e52:	79bb      	ldrb	r3, [r7, #6]
 8002e54:	2b3f      	cmp	r3, #63	; 0x3f
 8002e56:	d845      	bhi.n	8002ee4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <ssd1306_DrawPixel+0xb8>)
 8002e5a:	791b      	ldrb	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002e60:	797b      	ldrb	r3, [r7, #5]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002e6e:	797b      	ldrb	r3, [r7, #5]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d11a      	bne.n	8002eaa <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e74:	79fa      	ldrb	r2, [r7, #7]
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	b2d8      	uxtb	r0, r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	4413      	add	r3, r2
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <ssd1306_DrawPixel+0xbc>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	b25a      	sxtb	r2, r3
 8002e88:	79bb      	ldrb	r3, [r7, #6]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b259      	sxtb	r1, r3
 8002e9a:	79fa      	ldrb	r2, [r7, #7]
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	01db      	lsls	r3, r3, #7
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b2c9      	uxtb	r1, r1
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <ssd1306_DrawPixel+0xbc>)
 8002ea6:	54d1      	strb	r1, [r2, r3]
 8002ea8:	e01d      	b.n	8002ee6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	79bb      	ldrb	r3, [r7, #6]
 8002eae:	08db      	lsrs	r3, r3, #3
 8002eb0:	b2d8      	uxtb	r0, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	01db      	lsls	r3, r3, #7
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <ssd1306_DrawPixel+0xbc>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	b25a      	sxtb	r2, r3
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	b25b      	sxtb	r3, r3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b259      	sxtb	r1, r3
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	01db      	lsls	r3, r3, #7
 8002eda:	4413      	add	r3, r2
 8002edc:	b2c9      	uxtb	r1, r1
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <ssd1306_DrawPixel+0xbc>)
 8002ee0:	54d1      	strb	r1, [r2, r3]
 8002ee2:	e000      	b.n	8002ee6 <ssd1306_DrawPixel+0xae>
        return;
 8002ee4:	bf00      	nop
    }
}
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	20000ef0 	.word	0x20000ef0
 8002ef4:	20000af0 	.word	0x20000af0

08002ef8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4604      	mov	r4, r0
 8002f00:	1d38      	adds	r0, r7, #4
 8002f02:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f06:	461a      	mov	r2, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b1f      	cmp	r3, #31
 8002f14:	d902      	bls.n	8002f1c <ssd1306_WriteChar+0x24>
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b7e      	cmp	r3, #126	; 0x7e
 8002f1a:	d901      	bls.n	8002f20 <ssd1306_WriteChar+0x28>
        return 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e06d      	b.n	8002ffc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f20:	4b38      	ldr	r3, [pc, #224]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	793b      	ldrb	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	dc06      	bgt.n	8002f3c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002f2e:	4b35      	ldr	r3, [pc, #212]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002f30:	885b      	ldrh	r3, [r3, #2]
 8002f32:	461a      	mov	r2, r3
 8002f34:	797b      	ldrb	r3, [r7, #5]
 8002f36:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	dd01      	ble.n	8002f40 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e05d      	b.n	8002ffc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	e04c      	b.n	8002fe0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	3b20      	subs	r3, #32
 8002f4c:	7979      	ldrb	r1, [r7, #5]
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	440b      	add	r3, r1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e034      	b.n	8002fd0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f76:	4b23      	ldr	r3, [pc, #140]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	b2d8      	uxtb	r0, r3
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002f86:	885b      	ldrh	r3, [r3, #2]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	7bba      	ldrb	r2, [r7, #14]
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7ff ff4f 	bl	8002e38 <ssd1306_DrawPixel>
 8002f9a:	e016      	b.n	8002fca <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b2d8      	uxtb	r0, r3
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002fac:	885b      	ldrh	r3, [r3, #2]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b2d9      	uxtb	r1, r3
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f7ff ff37 	bl	8002e38 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	793b      	ldrb	r3, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d3c5      	bcc.n	8002f66 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	797b      	ldrb	r3, [r7, #5]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d3ad      	bcc.n	8002f46 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	793b      	ldrb	r3, [r7, #4]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	4b03      	ldr	r3, [pc, #12]	; (8003004 <ssd1306_WriteChar+0x10c>)
 8002ff8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3724      	adds	r7, #36	; 0x24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	20000ef0 	.word	0x20000ef0

08003008 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	1d38      	adds	r0, r7, #4
 8003012:	e880 0006 	stmia.w	r0, {r1, r2}
 8003016:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003018:	e012      	b.n	8003040 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	7818      	ldrb	r0, [r3, #0]
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	1d3a      	adds	r2, r7, #4
 8003022:	ca06      	ldmia	r2, {r1, r2}
 8003024:	f7ff ff68 	bl	8002ef8 <ssd1306_WriteChar>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d002      	beq.n	800303a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	e008      	b.n	800304c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3301      	adds	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e8      	bne.n	800301a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	781b      	ldrb	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	460a      	mov	r2, r1
 800305e:	71fb      	strb	r3, [r7, #7]
 8003060:	4613      	mov	r3, r2
 8003062:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	b29a      	uxth	r2, r3
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <ssd1306_SetCursor+0x2c>)
 800306a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <ssd1306_SetCursor+0x2c>)
 8003072:	805a      	strh	r2, [r3, #2]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	20000ef0 	.word	0x20000ef0

08003084 <ssd1306_SetContrast>:


void ssd1306_SetContrast(const uint8_t value) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800308e:	2381      	movs	r3, #129	; 0x81
 8003090:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fdad 	bl	8002bf4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fda9 	bl	8002bf4 <ssd1306_WriteCommand>
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80030bc:	23af      	movs	r3, #175	; 0xaf
 80030be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <ssd1306_SetDisplayOn+0x38>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	719a      	strb	r2, [r3, #6]
 80030c6:	e004      	b.n	80030d2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80030c8:	23ae      	movs	r3, #174	; 0xae
 80030ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <ssd1306_SetDisplayOn+0x38>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fd8d 	bl	8002bf4 <ssd1306_WriteCommand>
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000ef0 	.word	0x20000ef0

080030e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_MspInit+0x44>)
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_MspInit+0x44>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6613      	str	r3, [r2, #96]	; 0x60
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_MspInit+0x44>)
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_MspInit+0x44>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a08      	ldr	r2, [pc, #32]	; (800312c <HAL_MspInit+0x44>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_MspInit+0x44>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000

08003130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b098      	sub	sp, #96	; 0x60
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003148:	f107 0318 	add.w	r3, r7, #24
 800314c:	2234      	movs	r2, #52	; 0x34
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f009 fa42 	bl	800c5da <memset>
  if(hi2c->Instance==I2C1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3e      	ldr	r2, [pc, #248]	; (8003254 <HAL_I2C_MspInit+0x124>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d138      	bne.n	80031d2 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003160:	2340      	movs	r3, #64	; 0x40
 8003162:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003168:	f107 0318 	add.w	r3, r7, #24
 800316c:	4618      	mov	r0, r3
 800316e:	f002 fc2b 	bl	80059c8 <HAL_RCCEx_PeriphCLKConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003178:	f7ff fd30 	bl	8002bdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_I2C_MspInit+0x128>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	4a35      	ldr	r2, [pc, #212]	; (8003258 <HAL_I2C_MspInit+0x128>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_I2C_MspInit+0x128>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 8003194:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003198:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319a:	2312      	movs	r3, #18
 800319c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031a6:	2304      	movs	r3, #4
 80031a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ae:	4619      	mov	r1, r3
 80031b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b4:	f000 fc56 	bl	8003a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_I2C_MspInit+0x128>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <HAL_I2C_MspInit+0x128>)
 80031be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c2:	6593      	str	r3, [r2, #88]	; 0x58
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_I2C_MspInit+0x128>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031d0:	e03b      	b.n	800324a <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_I2C_MspInit+0x12c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d136      	bne.n	800324a <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031e4:	f107 0318 	add.w	r3, r7, #24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f002 fbed 	bl	80059c8 <HAL_RCCEx_PeriphCLKConfig>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80031f4:	f7ff fcf2 	bl	8002bdc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_I2C_MspInit+0x128>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_I2C_MspInit+0x128>)
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_I2C_MspInit+0x128>)
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 8003210:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003214:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003216:	2312      	movs	r3, #18
 8003218:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321e:	2303      	movs	r3, #3
 8003220:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003222:	2304      	movs	r3, #4
 8003224:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800322a:	4619      	mov	r1, r3
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <HAL_I2C_MspInit+0x130>)
 800322e:	f000 fc19 	bl	8003a64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_I2C_MspInit+0x128>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <HAL_I2C_MspInit+0x128>)
 8003238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_I2C_MspInit+0x128>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
}
 800324a:	bf00      	nop
 800324c:	3760      	adds	r7, #96	; 0x60
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40005400 	.word	0x40005400
 8003258:	40021000 	.word	0x40021000
 800325c:	40005800 	.word	0x40005800
 8003260:	48000400 	.word	0x48000400

08003264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_SPI_MspInit+0x7c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d128      	bne.n	80032d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_SPI_MspInit+0x80>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_SPI_MspInit+0x80>)
 800328c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003290:	6613      	str	r3, [r2, #96]	; 0x60
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_SPI_MspInit+0x80>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_SPI_MspInit+0x80>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <HAL_SPI_MspInit+0x80>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_SPI_MspInit+0x80>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80032b6:	23c2      	movs	r3, #194	; 0xc2
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032c6:	2305      	movs	r3, #5
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d4:	f000 fbc6 	bl	8003a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032d8:	bf00      	nop
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40013000 	.word	0x40013000
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b096      	sub	sp, #88	; 0x58
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003300:	f107 0310 	add.w	r3, r7, #16
 8003304:	2234      	movs	r2, #52	; 0x34
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f009 f966 	bl	800c5da <memset>
  if(huart->Instance==USART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_UART_MspInit+0xb4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d13d      	bne.n	8003394 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003318:	2301      	movs	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fb4f 	bl	80059c8 <HAL_RCCEx_PeriphCLKConfig>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003330:	f7ff fc54 	bl	8002bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_UART_MspInit+0xb8>)
 8003336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <HAL_UART_MspInit+0xb8>)
 800333a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333e:	6613      	str	r3, [r2, #96]	; 0x60
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_UART_MspInit+0xb8>)
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_UART_MspInit+0xb8>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <HAL_UART_MspInit+0xb8>)
 8003352:	f043 0302 	orr.w	r3, r3, #2
 8003356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_UART_MspInit+0xb8>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003374:	2307      	movs	r3, #7
 8003376:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800337c:	4619      	mov	r1, r3
 800337e:	4809      	ldr	r0, [pc, #36]	; (80033a4 <HAL_UART_MspInit+0xbc>)
 8003380:	f000 fb70 	bl	8003a64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003384:	2200      	movs	r2, #0
 8003386:	2100      	movs	r1, #0
 8003388:	2025      	movs	r0, #37	; 0x25
 800338a:	f000 fab6 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800338e:	2025      	movs	r0, #37	; 0x25
 8003390:	f000 facf 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003394:	bf00      	nop
 8003396:	3758      	adds	r7, #88	; 0x58
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40013800 	.word	0x40013800
 80033a0:	40021000 	.word	0x40021000
 80033a4:	48000400 	.word	0x48000400

080033a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033ac:	e7fe      	b.n	80033ac <NMI_Handler+0x4>

080033ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033b2:	e7fe      	b.n	80033b2 <HardFault_Handler+0x4>

080033b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <MemManage_Handler+0x4>

080033ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <BusFault_Handler+0x4>

080033c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <UsageFault_Handler+0x4>

080033c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f4:	f000 f962 	bl	80036bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}

080033fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <USART1_IRQHandler+0x10>)
 8003402:	f003 fa9f 	bl	8006944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200007fc 	.word	0x200007fc

08003410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return 1;
 8003414:	2301      	movs	r3, #1
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_kill>:

int _kill(int pid, int sig)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800342a:	f009 f9b7 	bl	800c79c <__errno>
 800342e:	4603      	mov	r3, r0
 8003430:	2216      	movs	r2, #22
 8003432:	601a      	str	r2, [r3, #0]
  return -1;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_exit>:

void _exit (int status)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003448:	f04f 31ff 	mov.w	r1, #4294967295
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ffe7 	bl	8003420 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003452:	e7fe      	b.n	8003452 <_exit+0x12>

08003454 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e00a      	b.n	800347c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003466:	f3af 8000 	nop.w
 800346a:	4601      	mov	r1, r0
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	60ba      	str	r2, [r7, #8]
 8003472:	b2ca      	uxtb	r2, r1
 8003474:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	dbf0      	blt.n	8003466 <_read+0x12>
  }

  return len;
 8003484:	687b      	ldr	r3, [r7, #4]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e009      	b.n	80034b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60ba      	str	r2, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	3301      	adds	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dbf1      	blt.n	80034a0 <_write+0x12>
  }
  return len;
 80034bc:	687b      	ldr	r3, [r7, #4]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_close>:

int _close(int file)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ee:	605a      	str	r2, [r3, #4]
  return 0;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_isatty>:

int _isatty(int file)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003506:	2301      	movs	r3, #1
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <_sbrk+0x5c>)
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <_sbrk+0x60>)
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <_sbrk+0x64>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <_sbrk+0x64>)
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <_sbrk+0x68>)
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <_sbrk+0x64>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d207      	bcs.n	8003570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003560:	f009 f91c 	bl	800c79c <__errno>
 8003564:	4603      	mov	r3, r0
 8003566:	220c      	movs	r2, #12
 8003568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e009      	b.n	8003584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <_sbrk+0x64>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <_sbrk+0x64>)
 8003580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	2000a000 	.word	0x2000a000
 8003590:	00004000 	.word	0x00004000
 8003594:	20000ef8 	.word	0x20000ef8
 8003598:	20001098 	.word	0x20001098

0800359c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <SystemInit+0x20>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <SystemInit+0x20>)
 80035a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035c4:	f7ff ffea 	bl	800359c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <LoopForever+0x6>)
  ldr r1, =_edata
 80035ca:	490d      	ldr	r1, [pc, #52]	; (8003600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <LoopForever+0xe>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035e0:	4c0a      	ldr	r4, [pc, #40]	; (800360c <LoopForever+0x16>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035ee:	f009 f8db 	bl	800c7a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035f2:	f7fe fe05 	bl	8002200 <main>

080035f6 <LoopForever>:

LoopForever:
    b LoopForever
 80035f6:	e7fe      	b.n	80035f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80035f8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003600:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003604:	08013100 	.word	0x08013100
  ldr r2, =_sbss
 8003608:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 800360c:	20001094 	.word	0x20001094

08003610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003610:	e7fe      	b.n	8003610 <ADC1_2_IRQHandler>

08003612 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 f961 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003622:	200f      	movs	r0, #15
 8003624:	f000 f80e 	bl	8003644 <HAL_InitTick>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	71fb      	strb	r3, [r7, #7]
 8003632:	e001      	b.n	8003638 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003634:	f7ff fd58 	bl	80030e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003638:	79fb      	ldrb	r3, [r7, #7]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_InitTick+0x6c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_InitTick+0x70>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <HAL_InitTick+0x6c>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4619      	mov	r1, r3
 8003662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003666:	fbb3 f3f1 	udiv	r3, r3, r1
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f96d 	bl	800394e <HAL_SYSTICK_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d809      	bhi.n	8003694 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003680:	2200      	movs	r2, #0
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f000 f937 	bl	80038fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_InitTick+0x74>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e007      	b.n	80036a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e004      	b.n	80036a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e001      	b.n	80036a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2000002c 	.word	0x2000002c
 80036b4:	20000024 	.word	0x20000024
 80036b8:	20000028 	.word	0x20000028

080036bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_IncTick+0x20>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_IncTick+0x24>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_IncTick+0x24>)
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	2000002c 	.word	0x2000002c
 80036e0:	20000efc 	.word	0x20000efc

080036e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return uwTick;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_GetTick+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000efc 	.word	0x20000efc

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff ffee 	bl	80036e4 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_Delay+0x44>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003722:	bf00      	nop
 8003724:	f7ff ffde 	bl	80036e4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000002c 	.word	0x2000002c

08003744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800376c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	f003 0307 	and.w	r3, r3, #7
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db0b      	blt.n	80037d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4907      	ldr	r1, [pc, #28]	; (80037e0 <__NVIC_EnableIRQ+0x38>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e100 	.word	0xe000e100

080037e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db0a      	blt.n	800380e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	490c      	ldr	r1, [pc, #48]	; (8003830 <__NVIC_SetPriority+0x4c>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	440b      	add	r3, r1
 8003808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800380c:	e00a      	b.n	8003824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4908      	ldr	r1, [pc, #32]	; (8003834 <__NVIC_SetPriority+0x50>)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	3b04      	subs	r3, #4
 800381c:	0112      	lsls	r2, r2, #4
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	440b      	add	r3, r1
 8003822:	761a      	strb	r2, [r3, #24]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000e100 	.word	0xe000e100
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f1c3 0307 	rsb	r3, r3, #7
 8003852:	2b04      	cmp	r3, #4
 8003854:	bf28      	it	cs
 8003856:	2304      	movcs	r3, #4
 8003858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3304      	adds	r3, #4
 800385e:	2b06      	cmp	r3, #6
 8003860:	d902      	bls.n	8003868 <NVIC_EncodePriority+0x30>
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3b03      	subs	r3, #3
 8003866:	e000      	b.n	800386a <NVIC_EncodePriority+0x32>
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	f04f 32ff 	mov.w	r2, #4294967295
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	401a      	ands	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003880:	f04f 31ff 	mov.w	r1, #4294967295
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa01 f303 	lsl.w	r3, r1, r3
 800388a:	43d9      	mvns	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	4313      	orrs	r3, r2
         );
}
 8003892:	4618      	mov	r0, r3
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	d301      	bcc.n	80038b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00f      	b.n	80038d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <SysTick_Config+0x40>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038be:	210f      	movs	r1, #15
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f7ff ff8e 	bl	80037e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SysTick_Config+0x40>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <SysTick_Config+0x40>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff29 	bl	8003744 <__NVIC_SetPriorityGrouping>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff3e 	bl	800378c <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff8e 	bl	8003838 <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5d 	bl	80037e4 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff31 	bl	80037a8 <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa2 	bl	80038a0 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d008      	beq.n	8003990 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e022      	b.n	80039d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 020e 	bic.w	r2, r2, #14
 800399e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f003 021c 	and.w	r2, r3, #28
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f202 	lsl.w	r2, r1, r2
 80039c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d005      	beq.n	8003a06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e029      	b.n	8003a5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 020e 	bic.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 021c 	and.w	r2, r3, #28
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
    }
  }
  return status;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a72:	e14e      	b.n	8003d12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8140 	beq.w	8003d0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d005      	beq.n	8003aa4 <HAL_GPIO_Init+0x40>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d130      	bne.n	8003b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2203      	movs	r2, #3
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ada:	2201      	movs	r2, #1
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 0201 	and.w	r2, r3, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d017      	beq.n	8003b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d123      	bne.n	8003b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3208      	adds	r2, #8
 8003b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	220f      	movs	r2, #15
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	08da      	lsrs	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3208      	adds	r2, #8
 8003b90:	6939      	ldr	r1, [r7, #16]
 8003b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0203 	and.w	r2, r3, #3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 809a 	beq.w	8003d0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <HAL_GPIO_Init+0x2cc>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	4a54      	ldr	r2, [pc, #336]	; (8003d30 <HAL_GPIO_Init+0x2cc>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6613      	str	r3, [r2, #96]	; 0x60
 8003be4:	4b52      	ldr	r3, [pc, #328]	; (8003d30 <HAL_GPIO_Init+0x2cc>)
 8003be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	220f      	movs	r2, #15
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c1a:	d013      	beq.n	8003c44 <HAL_GPIO_Init+0x1e0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a46      	ldr	r2, [pc, #280]	; (8003d38 <HAL_GPIO_Init+0x2d4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00d      	beq.n	8003c40 <HAL_GPIO_Init+0x1dc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a45      	ldr	r2, [pc, #276]	; (8003d3c <HAL_GPIO_Init+0x2d8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <HAL_GPIO_Init+0x1d8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a44      	ldr	r2, [pc, #272]	; (8003d40 <HAL_GPIO_Init+0x2dc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_GPIO_Init+0x1d4>
 8003c34:	2303      	movs	r3, #3
 8003c36:	e006      	b.n	8003c46 <HAL_GPIO_Init+0x1e2>
 8003c38:	2307      	movs	r3, #7
 8003c3a:	e004      	b.n	8003c46 <HAL_GPIO_Init+0x1e2>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e002      	b.n	8003c46 <HAL_GPIO_Init+0x1e2>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_GPIO_Init+0x1e2>
 8003c44:	2300      	movs	r3, #0
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	f002 0203 	and.w	r2, r2, #3
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	4093      	lsls	r3, r2
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c56:	4937      	ldr	r1, [pc, #220]	; (8003d34 <HAL_GPIO_Init+0x2d0>)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c64:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c88:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cb2:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cb8:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cdc:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d06:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <HAL_GPIO_Init+0x2e0>)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f47f aea9 	bne.w	8003a74 <HAL_GPIO_Init+0x10>
  }
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40010000 	.word	0x40010000
 8003d38:	48000400 	.word	0x48000400
 8003d3c:	48000800 	.word	0x48000800
 8003d40:	48000c00 	.word	0x48000c00
 8003d44:	40010400 	.word	0x40010400

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d58:	787b      	ldrb	r3, [r7, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	041a      	lsls	r2, r3, #16
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43d9      	mvns	r1, r3
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	400b      	ands	r3, r1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	619a      	str	r2, [r3, #24]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e08d      	b.n	8003eda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff f9ac 	bl	8003130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e006      	b.n	8003e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d108      	bne.n	8003e4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	e007      	b.n	8003e5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	f040 80f9 	bne.w	80040fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_I2C_Mem_Write+0x34>
 8003f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0ed      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Mem_Write+0x4e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0e6      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f3a:	f7ff fbd3 	bl	80036e4 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2319      	movs	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fbcd 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d1      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2221      	movs	r2, #33	; 0x21
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f84:	88f8      	ldrh	r0, [r7, #6]
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	8979      	ldrh	r1, [r7, #10]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4603      	mov	r3, r0
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fadd 	bl	8004554 <I2C_RequestMemoryWrite>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0a9      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2bff      	cmp	r3, #255	; 0xff
 8003fb4:	d90e      	bls.n	8003fd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	8979      	ldrh	r1, [r7, #10]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fd47 	bl	8004a60 <I2C_TransferConfig>
 8003fd2:	e00f      	b.n	8003ff4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	8979      	ldrh	r1, [r7, #10]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fd36 	bl	8004a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fbc6 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e07b      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d034      	beq.n	80040ac <HAL_I2C_Mem_Write+0x1c8>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d130      	bne.n	80040ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	2200      	movs	r2, #0
 8004052:	2180      	movs	r1, #128	; 0x80
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fb49 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04d      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d90e      	bls.n	800408c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	b2da      	uxtb	r2, r3
 800407a:	8979      	ldrh	r1, [r7, #10]
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fceb 	bl	8004a60 <I2C_TransferConfig>
 800408a:	e00f      	b.n	80040ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	b2da      	uxtb	r2, r3
 800409c:	8979      	ldrh	r1, [r7, #10]
 800409e:	2300      	movs	r3, #0
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fcda 	bl	8004a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d19e      	bne.n	8003ff4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fbac 	bl	8004818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e01a      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2220      	movs	r2, #32
 80040d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_I2C_Mem_Write+0x224>)
 80040de:	400b      	ands	r3, r1
 80040e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	fe00e800 	.word	0xfe00e800

0800410c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	460b      	mov	r3, r1
 8004120:	813b      	strh	r3, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b20      	cmp	r3, #32
 8004130:	f040 80fd 	bne.w	800432e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_I2C_Mem_Read+0x34>
 800413a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0f1      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_I2C_Mem_Read+0x4e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ea      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004162:	f7ff fabf 	bl	80036e4 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2319      	movs	r3, #25
 800416e:	2201      	movs	r2, #1
 8004170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fab9 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0d5      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2222      	movs	r2, #34	; 0x22
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a3a      	ldr	r2, [r7, #32]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ac:	88f8      	ldrh	r0, [r7, #6]
 80041ae:	893a      	ldrh	r2, [r7, #8]
 80041b0:	8979      	ldrh	r1, [r7, #10]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4603      	mov	r3, r0
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fa1d 	bl	80045fc <I2C_RequestMemoryRead>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0ad      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2bff      	cmp	r3, #255	; 0xff
 80041dc:	d90e      	bls.n	80041fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	22ff      	movs	r2, #255	; 0xff
 80041e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	8979      	ldrh	r1, [r7, #10]
 80041ec:	4b52      	ldr	r3, [pc, #328]	; (8004338 <HAL_I2C_Mem_Read+0x22c>)
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fc33 	bl	8004a60 <I2C_TransferConfig>
 80041fa:	e00f      	b.n	800421c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	b2da      	uxtb	r2, r3
 800420c:	8979      	ldrh	r1, [r7, #10]
 800420e:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <HAL_I2C_Mem_Read+0x22c>)
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fc22 	bl	8004a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2200      	movs	r2, #0
 8004224:	2104      	movs	r1, #4
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fa60 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07c      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d034      	beq.n	80042dc <HAL_I2C_Mem_Read+0x1d0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d130      	bne.n	80042dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa31 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e04d      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2bff      	cmp	r3, #255	; 0xff
 800429c:	d90e      	bls.n	80042bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	8979      	ldrh	r1, [r7, #10]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fbd3 	bl	8004a60 <I2C_TransferConfig>
 80042ba:	e00f      	b.n	80042dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	8979      	ldrh	r1, [r7, #10]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fbc2 	bl	8004a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d19a      	bne.n	800421c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fa94 	bl	8004818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e01a      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2220      	movs	r2, #32
 8004300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_I2C_Mem_Read+0x230>)
 800430e:	400b      	ands	r3, r1
 8004310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	80002400 	.word	0x80002400
 800433c:	fe00e800 	.word	0xfe00e800

08004340 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	460b      	mov	r3, r1
 800434e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	f040 80f3 	bne.w	8004548 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d101      	bne.n	8004376 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	e0e9      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_I2C_IsDeviceReady+0x44>
 8004380:	2302      	movs	r3, #2
 8004382:	e0e2      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d107      	bne.n	80043b2 <HAL_I2C_IsDeviceReady+0x72>
 80043a2:	897b      	ldrh	r3, [r7, #10]
 80043a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043b0:	e006      	b.n	80043c0 <HAL_I2C_IsDeviceReady+0x80>
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043bc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80043c6:	f7ff f98d 	bl	80036e4 <HAL_GetTick>
 80043ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043f8:	e034      	b.n	8004464 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d01a      	beq.n	8004438 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7ff f96f 	bl	80036e4 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <HAL_I2C_IsDeviceReady+0xd8>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10f      	bne.n	8004438 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e088      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b20      	cmp	r3, #32
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004464:	7ffb      	ldrb	r3, [r7, #31]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_I2C_IsDeviceReady+0x130>
 800446a:	7fbb      	ldrb	r3, [r7, #30]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0c4      	beq.n	80043fa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d01a      	beq.n	80044b4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2200      	movs	r2, #0
 8004486:	2120      	movs	r1, #32
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f92f 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e058      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2220      	movs	r2, #32
 800449e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e04a      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2120      	movs	r1, #32
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f914 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e03d      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2220      	movs	r2, #32
 80044dc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d118      	bne.n	8004518 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2120      	movs	r1, #32
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f8f3 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e01c      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2220      	movs	r2, #32
 8004516:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3301      	adds	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	f63f af39 	bhi.w	800439a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	8979      	ldrh	r1, [r7, #10]
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <I2C_RequestMemoryWrite+0xa4>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fa6f 	bl	8004a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	69b9      	ldr	r1, [r7, #24]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f8ff 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e02c      	b.n	80045f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
 80045a6:	e015      	b.n	80045d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045a8:	893b      	ldrh	r3, [r7, #8]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	69b9      	ldr	r1, [r7, #24]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f8e5 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e012      	b.n	80045f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ca:	893b      	ldrh	r3, [r7, #8]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2200      	movs	r2, #0
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f884 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	80002000 	.word	0x80002000

080045fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	4608      	mov	r0, r1
 8004606:	4611      	mov	r1, r2
 8004608:	461a      	mov	r2, r3
 800460a:	4603      	mov	r3, r0
 800460c:	817b      	strh	r3, [r7, #10]
 800460e:	460b      	mov	r3, r1
 8004610:	813b      	strh	r3, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	8979      	ldrh	r1, [r7, #10]
 800461c:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <I2C_RequestMemoryRead+0xa4>)
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa1c 	bl	8004a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f8ac 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e02c      	b.n	8004696 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
 800464c:	e015      	b.n	800467a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800464e:	893b      	ldrh	r3, [r7, #8]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	b29b      	uxth	r3, r3
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f892 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e012      	b.n	8004696 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2200      	movs	r2, #0
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f831 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	80002000 	.word	0x80002000

080046a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d103      	bne.n	80046c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d007      	beq.n	80046e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	619a      	str	r2, [r3, #24]
  }
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046fc:	e031      	b.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d02d      	beq.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fe ffed 	bl	80036e4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d122      	bne.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4013      	ands	r3, r2
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	429a      	cmp	r2, r3
 8004738:	d113      	bne.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e00f      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d0be      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004796:	e033      	b.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f87f 	bl	80048a0 <I2C_IsErrorOccurred>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e031      	b.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d025      	beq.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fe ff96 	bl	80036e4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11a      	bne.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d013      	beq.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e007      	b.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b02      	cmp	r3, #2
 800480c:	d1c4      	bne.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004824:	e02f      	b.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f838 	bl	80048a0 <I2C_IsErrorOccurred>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e02d      	b.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fe ff53 	bl	80036e4 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11a      	bne.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b20      	cmp	r3, #32
 800485c:	d013      	beq.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e007      	b.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d1c8      	bne.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d068      	beq.n	800499e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2210      	movs	r2, #16
 80048d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d4:	e049      	b.n	800496a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d045      	beq.n	800496a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fe ff01 	bl	80036e4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_IsErrorOccurred+0x54>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d13a      	bne.n	800496a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004916:	d121      	bne.n	800495c <I2C_IsErrorOccurred+0xbc>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491e:	d01d      	beq.n	800495c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b20      	cmp	r3, #32
 8004924:	d01a      	beq.n	800495c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004936:	f7fe fed5 	bl	80036e4 <HAL_GetTick>
 800493a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800493c:	e00e      	b.n	800495c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800493e:	f7fe fed1 	bl	80036e4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b19      	cmp	r3, #25
 800494a:	d907      	bls.n	800495c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f043 0320 	orr.w	r3, r3, #32
 8004952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800495a:	e006      	b.n	800496a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d1e9      	bne.n	800493e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b20      	cmp	r3, #32
 8004976:	d003      	beq.n	8004980 <I2C_IsErrorOccurred+0xe0>
 8004978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0aa      	beq.n	80048d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2220      	movs	r2, #32
 800498e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f043 0304 	orr.w	r3, r3, #4
 8004996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f043 0308 	orr.w	r3, r3, #8
 80049d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f043 0302 	orr.w	r3, r3, #2
 80049fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01c      	beq.n	8004a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fe45 	bl	80046a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <I2C_IsErrorOccurred+0x1bc>)
 8004a26:	400b      	ands	r3, r1
 8004a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3728      	adds	r7, #40	; 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	fe00e800 	.word	0xfe00e800

08004a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a78:	7a7b      	ldrb	r3, [r7, #9]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	0d5b      	lsrs	r3, r3, #21
 8004a9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <I2C_TransferConfig+0x60>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	ea02 0103 	and.w	r1, r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	03ff63ff 	.word	0x03ff63ff

08004ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d138      	bne.n	8004b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e032      	b.n	8004b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d139      	bne.n	8004be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e033      	b.n	8004be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2224      	movs	r2, #36	; 0x24
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40007000 	.word	0x40007000

08004c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1e:	d130      	bne.n	8004c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c20:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d038      	beq.n	8004ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2232      	movs	r2, #50	; 0x32
 8004c44:	fb02 f303 	mul.w	r3, r2, r3
 8004c48:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0c9b      	lsrs	r3, r3, #18
 8004c50:	3301      	adds	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c54:	e002      	b.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d102      	bne.n	8004c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f2      	bne.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7c:	d110      	bne.n	8004ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e00f      	b.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d007      	beq.n	8004ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c98:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	20000024 	.word	0x20000024
 8004cb8:	431bde83 	.word	0x431bde83

08004cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f000 bc4f 	b.w	800556e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd0:	4b97      	ldr	r3, [pc, #604]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cda:	4b95      	ldr	r3, [pc, #596]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80e6 	beq.w	8004ebe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <HAL_RCC_OscConfig+0x4c>
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	f040 808d 	bne.w	8004e1a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 8089 	bne.w	8004e1a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d08:	4b89      	ldr	r3, [pc, #548]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <HAL_RCC_OscConfig+0x66>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f000 bc26 	b.w	800556e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d26:	4b82      	ldr	r3, [pc, #520]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <HAL_RCC_OscConfig+0x80>
 8004d32:	4b7f      	ldr	r3, [pc, #508]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d3a:	e005      	b.n	8004d48 <HAL_RCC_OscConfig+0x8c>
 8004d3c:	4b7c      	ldr	r3, [pc, #496]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d224      	bcs.n	8004d96 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fdd9 	bl	8005908 <RCC_SetFlashLatencyFromMSIRange>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f000 bc06 	b.w	800556e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d62:	4b73      	ldr	r3, [pc, #460]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a72      	ldr	r2, [pc, #456]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	4b70      	ldr	r3, [pc, #448]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	496d      	ldr	r1, [pc, #436]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d80:	4b6b      	ldr	r3, [pc, #428]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	4968      	ldr	r1, [pc, #416]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
 8004d94:	e025      	b.n	8004de2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d96:	4b66      	ldr	r3, [pc, #408]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a65      	ldr	r2, [pc, #404]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	f043 0308 	orr.w	r3, r3, #8
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	4960      	ldr	r1, [pc, #384]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db4:	4b5e      	ldr	r3, [pc, #376]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	495b      	ldr	r1, [pc, #364]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fd98 	bl	8005908 <RCC_SetFlashLatencyFromMSIRange>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e3c5      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004de2:	f000 fccd 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8004de6:	4602      	mov	r2, r0
 8004de8:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	4950      	ldr	r1, [pc, #320]	; (8004f34 <HAL_RCC_OscConfig+0x278>)
 8004df4:	5ccb      	ldrb	r3, [r1, r3]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	4a4e      	ldr	r2, [pc, #312]	; (8004f38 <HAL_RCC_OscConfig+0x27c>)
 8004e00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <HAL_RCC_OscConfig+0x280>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fc1c 	bl	8003644 <HAL_InitTick>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d052      	beq.n	8004ebc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	e3a9      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d032      	beq.n	8004e88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e22:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a42      	ldr	r2, [pc, #264]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e2e:	f7fe fc59 	bl	80036e4 <HAL_GetTick>
 8004e32:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e36:	f7fe fc55 	bl	80036e4 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e392      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e48:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a35      	ldr	r2, [pc, #212]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e5a:	f043 0308 	orr.w	r3, r3, #8
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	4930      	ldr	r1, [pc, #192]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e72:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	492b      	ldr	r1, [pc, #172]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
 8004e86:	e01a      	b.n	8004ebe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e94:	f7fe fc26 	bl	80036e4 <HAL_GetTick>
 8004e98:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e9c:	f7fe fc22 	bl	80036e4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e35f      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1e0>
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ebc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d073      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_OscConfig+0x220>
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d063      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x2f4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d15f      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e33c      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x250>
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e025      	b.n	8004f58 <HAL_RCC_OscConfig+0x29c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d114      	bne.n	8004f40 <HAL_RCC_OscConfig+0x284>
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a02      	ldr	r2, [pc, #8]	; (8004f30 <HAL_RCC_OscConfig+0x274>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e013      	b.n	8004f58 <HAL_RCC_OscConfig+0x29c>
 8004f30:	40021000 	.word	0x40021000
 8004f34:	0801291c 	.word	0x0801291c
 8004f38:	20000024 	.word	0x20000024
 8004f3c:	20000028 	.word	0x20000028
 8004f40:	4b8f      	ldr	r3, [pc, #572]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a8e      	ldr	r2, [pc, #568]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b8c      	ldr	r3, [pc, #560]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a8b      	ldr	r2, [pc, #556]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fe fbc0 	bl	80036e4 <HAL_GetTick>
 8004f64:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fe fbbc 	bl	80036e4 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e2f9      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f7a:	4b81      	ldr	r3, [pc, #516]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x2ac>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fe fbac 	bl	80036e4 <HAL_GetTick>
 8004f8c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fe fba8 	bl	80036e4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e2e5      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fa2:	4b77      	ldr	r3, [pc, #476]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x2d4>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d060      	beq.n	8005080 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x314>
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	d119      	bne.n	8004ffe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d116      	bne.n	8004ffe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fd0:	4b6b      	ldr	r3, [pc, #428]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x32c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e2c2      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe8:	4b65      	ldr	r3, [pc, #404]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	4962      	ldr	r1, [pc, #392]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ffc:	e040      	b.n	8005080 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d023      	beq.n	800504e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005006:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5d      	ldr	r2, [pc, #372]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fe fb67 	bl	80036e4 <HAL_GetTick>
 8005016:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501a:	f7fe fb63 	bl	80036e4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e2a0      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800502c:	4b54      	ldr	r3, [pc, #336]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	494e      	ldr	r1, [pc, #312]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
 800504c:	e018      	b.n	8005080 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504e:	4b4c      	ldr	r3, [pc, #304]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4b      	ldr	r2, [pc, #300]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fe fb43 	bl	80036e4 <HAL_GetTick>
 800505e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005062:	f7fe fb3f 	bl	80036e4 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e27c      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005074:	4b42      	ldr	r3, [pc, #264]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8082 	beq.w	8005192 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d05f      	beq.n	8005156 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005096:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d037      	beq.n	800511c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e254      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01b      	beq.n	8005106 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80050ce:	4b2c      	ldr	r3, [pc, #176]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	f023 0301 	bic.w	r3, r3, #1
 80050da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050de:	f7fe fb01 	bl	80036e4 <HAL_GetTick>
 80050e2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e6:	f7fe fafd 	bl	80036e4 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b11      	cmp	r3, #17
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e23a      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 80050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ef      	bne.n	80050e6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800510c:	f023 0210 	bic.w	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	491a      	ldr	r1, [pc, #104]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511c:	4b18      	ldr	r3, [pc, #96]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800511e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005122:	4a17      	ldr	r2, [pc, #92]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fe fada 	bl	80036e4 <HAL_GetTick>
 8005130:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005134:	f7fe fad6 	bl	80036e4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b11      	cmp	r3, #17
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e213      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0ef      	beq.n	8005134 <HAL_RCC_OscConfig+0x478>
 8005154:	e01d      	b.n	8005192 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <HAL_RCC_OscConfig+0x4c4>)
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005166:	f7fe fabd 	bl	80036e4 <HAL_GetTick>
 800516a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800516e:	f7fe fab9 	bl	80036e4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b11      	cmp	r3, #17
 800517a:	d903      	bls.n	8005184 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1f6      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
 8005180:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005184:	4ba9      	ldr	r3, [pc, #676]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1ed      	bne.n	800516e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80bd 	beq.w	800531a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051a6:	4ba1      	ldr	r3, [pc, #644]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10e      	bne.n	80051d0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	4b9e      	ldr	r3, [pc, #632]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	4a9d      	ldr	r2, [pc, #628]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	; 0x58
 80051be:	4b9b      	ldr	r3, [pc, #620]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d0:	4b97      	ldr	r3, [pc, #604]	; (8005430 <HAL_RCC_OscConfig+0x774>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d118      	bne.n	800520e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051dc:	4b94      	ldr	r3, [pc, #592]	; (8005430 <HAL_RCC_OscConfig+0x774>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a93      	ldr	r2, [pc, #588]	; (8005430 <HAL_RCC_OscConfig+0x774>)
 80051e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e8:	f7fe fa7c 	bl	80036e4 <HAL_GetTick>
 80051ec:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f0:	f7fe fa78 	bl	80036e4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e1b5      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005202:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <HAL_RCC_OscConfig+0x774>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02c      	beq.n	8005274 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800521a:	4b84      	ldr	r3, [pc, #528]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	497f      	ldr	r1, [pc, #508]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005240:	4b7a      	ldr	r3, [pc, #488]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	4a79      	ldr	r2, [pc, #484]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005250:	4b76      	ldr	r3, [pc, #472]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	4a75      	ldr	r2, [pc, #468]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005260:	e018      	b.n	8005294 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005262:	4b72      	ldr	r3, [pc, #456]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005268:	4a70      	ldr	r2, [pc, #448]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005272:	e00f      	b.n	8005294 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005274:	4b6d      	ldr	r3, [pc, #436]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	4a6c      	ldr	r2, [pc, #432]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005284:	4b69      	ldr	r3, [pc, #420]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	4a68      	ldr	r2, [pc, #416]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fe fa22 	bl	80036e4 <HAL_GetTick>
 80052a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fe fa1e 	bl	80036e4 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e159      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4b5c      	ldr	r3, [pc, #368]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ed      	beq.n	80052a4 <HAL_RCC_OscConfig+0x5e8>
 80052c8:	e01d      	b.n	8005306 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fe fa0b 	bl	80036e4 <HAL_GetTick>
 80052ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7fe fa07 	bl	80036e4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e142      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e8:	4b50      	ldr	r3, [pc, #320]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ed      	bne.n	80052d2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80052f6:	4b4d      	ldr	r3, [pc, #308]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	4a4b      	ldr	r2, [pc, #300]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80052fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4b47      	ldr	r3, [pc, #284]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	4a46      	ldr	r2, [pc, #280]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005318:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d03c      	beq.n	80053a0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01c      	beq.n	8005368 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005334:	4a3d      	ldr	r2, [pc, #244]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533e:	f7fe f9d1 	bl	80036e4 <HAL_GetTick>
 8005342:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005346:	f7fe f9cd 	bl	80036e4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e10a      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005358:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800535a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ef      	beq.n	8005346 <HAL_RCC_OscConfig+0x68a>
 8005366:	e01b      	b.n	80053a0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005368:	4b30      	ldr	r3, [pc, #192]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800536a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800536e:	4a2f      	ldr	r2, [pc, #188]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fe f9b4 	bl	80036e4 <HAL_GetTick>
 800537c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005380:	f7fe f9b0 	bl	80036e4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0ed      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005392:	4b26      	ldr	r3, [pc, #152]	; (800542c <HAL_RCC_OscConfig+0x770>)
 8005394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1ef      	bne.n	8005380 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80e1 	beq.w	800556c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	f040 80b5 	bne.w	800551e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053b4:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_RCC_OscConfig+0x770>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0203 	and.w	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d124      	bne.n	8005412 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	3b01      	subs	r3, #1
 80053d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d11b      	bne.n	8005412 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d113      	bne.n	8005412 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	3b01      	subs	r3, #1
 80053f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d109      	bne.n	8005412 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	3b01      	subs	r3, #1
 800540c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800540e:	429a      	cmp	r2, r3
 8005410:	d05f      	beq.n	80054d2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	d05a      	beq.n	80054ce <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a03      	ldr	r2, [pc, #12]	; (800542c <HAL_RCC_OscConfig+0x770>)
 800541e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005422:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005424:	f7fe f95e 	bl	80036e4 <HAL_GetTick>
 8005428:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800542a:	e00c      	b.n	8005446 <HAL_RCC_OscConfig+0x78a>
 800542c:	40021000 	.word	0x40021000
 8005430:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7fe f956 	bl	80036e4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e093      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005446:	4b4c      	ldr	r3, [pc, #304]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005452:	4b49      	ldr	r3, [pc, #292]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	4b49      	ldr	r3, [pc, #292]	; (800557c <HAL_RCC_OscConfig+0x8c0>)
 8005458:	4013      	ands	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005462:	3a01      	subs	r2, #1
 8005464:	0112      	lsls	r2, r2, #4
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800546c:	0212      	lsls	r2, r2, #8
 800546e:	4311      	orrs	r1, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005474:	0852      	lsrs	r2, r2, #1
 8005476:	3a01      	subs	r2, #1
 8005478:	0552      	lsls	r2, r2, #21
 800547a:	4311      	orrs	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005480:	0852      	lsrs	r2, r2, #1
 8005482:	3a01      	subs	r2, #1
 8005484:	0652      	lsls	r2, r2, #25
 8005486:	430a      	orrs	r2, r1
 8005488:	493b      	ldr	r1, [pc, #236]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 800548a:	4313      	orrs	r3, r2
 800548c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800548e:	4b3a      	ldr	r3, [pc, #232]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a39      	ldr	r2, [pc, #228]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005498:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800549a:	4b37      	ldr	r3, [pc, #220]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4a36      	ldr	r2, [pc, #216]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054a6:	f7fe f91d 	bl	80036e4 <HAL_GetTick>
 80054aa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ae:	f7fe f919 	bl	80036e4 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e056      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c0:	4b2d      	ldr	r3, [pc, #180]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054cc:	e04e      	b.n	800556c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e04d      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d2:	4b29      	ldr	r3, [pc, #164]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d146      	bne.n	800556c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 80054f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054f6:	f7fe f8f5 	bl	80036e4 <HAL_GetTick>
 80054fa:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fe:	f7fe f8f1 	bl	80036e4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e02e      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x842>
 800551c:	e026      	b.n	800556c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d021      	beq.n	8005568 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 800552a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fe f8d8 	bl	80036e4 <HAL_GetTick>
 8005534:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005538:	f7fe f8d4 	bl	80036e4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e011      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a07      	ldr	r2, [pc, #28]	; (8005578 <HAL_RCC_OscConfig+0x8bc>)
 800555c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005560:	f023 0303 	bic.w	r3, r3, #3
 8005564:	60d3      	str	r3, [r2, #12]
 8005566:	e001      	b.n	800556c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3728      	adds	r7, #40	; 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	f99f808c 	.word	0xf99f808c

08005580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0e7      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005594:	4b75      	ldr	r3, [pc, #468]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d910      	bls.n	80055c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b72      	ldr	r3, [pc, #456]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 0207 	bic.w	r2, r3, #7
 80055aa:	4970      	ldr	r1, [pc, #448]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b6e      	ldr	r3, [pc, #440]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0cf      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b66      	ldr	r3, [pc, #408]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055dc:	429a      	cmp	r2, r3
 80055de:	d908      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b63      	ldr	r3, [pc, #396]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4960      	ldr	r1, [pc, #384]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04c      	beq.n	8005698 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	4b5a      	ldr	r3, [pc, #360]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d121      	bne.n	8005656 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0a6      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d107      	bne.n	800562e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561e:	4b54      	ldr	r3, [pc, #336]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d115      	bne.n	8005656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e09a      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005636:	4b4e      	ldr	r3, [pc, #312]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e08e      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005646:	4b4a      	ldr	r3, [pc, #296]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e086      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005656:	4b46      	ldr	r3, [pc, #280]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 0203 	bic.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4943      	ldr	r1, [pc, #268]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005664:	4313      	orrs	r3, r2
 8005666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005668:	f7fe f83c 	bl	80036e4 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566e:	e00a      	b.n	8005686 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005670:	f7fe f838 	bl	80036e4 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e06e      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 020c 	and.w	r2, r3, #12
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	429a      	cmp	r2, r3
 8005696:	d1eb      	bne.n	8005670 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4b31      	ldr	r3, [pc, #196]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d208      	bcs.n	80056c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b4:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	492b      	ldr	r1, [pc, #172]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c6:	4b29      	ldr	r3, [pc, #164]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d210      	bcs.n	80056f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 0207 	bic.w	r2, r3, #7
 80056dc:	4923      	ldr	r1, [pc, #140]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_ClockConfig+0x1ec>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d001      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e036      	b.n	8005764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005702:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	4918      	ldr	r1, [pc, #96]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4910      	ldr	r1, [pc, #64]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 8005730:	4313      	orrs	r3, r2
 8005732:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005734:	f000 f824 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	091b      	lsrs	r3, r3, #4
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	490b      	ldr	r1, [pc, #44]	; (8005774 <HAL_RCC_ClockConfig+0x1f4>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	4a09      	ldr	r2, [pc, #36]	; (8005778 <HAL_RCC_ClockConfig+0x1f8>)
 8005752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1fc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7fd ff73 	bl	8003644 <HAL_InitTick>
 800575e:	4603      	mov	r3, r0
 8005760:	72fb      	strb	r3, [r7, #11]

  return status;
 8005762:	7afb      	ldrb	r3, [r7, #11]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40022000 	.word	0x40022000
 8005770:	40021000 	.word	0x40021000
 8005774:	0801291c 	.word	0x0801291c
 8005778:	20000024 	.word	0x20000024
 800577c:	20000028 	.word	0x20000028

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	2300      	movs	r3, #0
 800578c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800578e:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005798:	4b3b      	ldr	r3, [pc, #236]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x34>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d121      	bne.n	80057f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d11e      	bne.n	80057f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057b4:	4b34      	ldr	r3, [pc, #208]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057c0:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e005      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057d0:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <HAL_RCC_GetSysClockFreq+0x10c>)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10d      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057f0:	e00a      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d102      	bne.n	80057fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <HAL_RCC_GetSysClockFreq+0x110>)
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	e004      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d101      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005804:	4b23      	ldr	r3, [pc, #140]	; (8005894 <HAL_RCC_GetSysClockFreq+0x114>)
 8005806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d134      	bne.n	8005878 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800580e:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d003      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0xa6>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d003      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0xac>
 8005824:	e005      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <HAL_RCC_GetSysClockFreq+0x110>)
 8005828:	617b      	str	r3, [r7, #20]
      break;
 800582a:	e005      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800582c:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_RCC_GetSysClockFreq+0x114>)
 800582e:	617b      	str	r3, [r7, #20]
      break;
 8005830:	e002      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	617b      	str	r3, [r7, #20]
      break;
 8005836:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005838:	4b13      	ldr	r3, [pc, #76]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	3301      	adds	r3, #1
 8005844:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	fb03 f202 	mul.w	r2, r3, r2
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_RCC_GetSysClockFreq+0x108>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	0e5b      	lsrs	r3, r3, #25
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	3301      	adds	r3, #1
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005878:	69bb      	ldr	r3, [r7, #24]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3724      	adds	r7, #36	; 0x24
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40021000 	.word	0x40021000
 800588c:	08012934 	.word	0x08012934
 8005890:	00f42400 	.word	0x00f42400
 8005894:	007a1200 	.word	0x007a1200

08005898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCC_GetHCLKFreq+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000024 	.word	0x20000024

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058b4:	f7ff fff0 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4904      	ldr	r1, [pc, #16]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40021000 	.word	0x40021000
 80058d8:	0801292c 	.word	0x0801292c

080058dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058e0:	f7ff ffda 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0adb      	lsrs	r3, r3, #11
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4904      	ldr	r1, [pc, #16]	; (8005904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000
 8005904:	0801292c 	.word	0x0801292c

08005908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005914:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005920:	f7ff f968 	bl	8004bf4 <HAL_PWREx_GetVoltageRange>
 8005924:	6178      	str	r0, [r7, #20]
 8005926:	e014      	b.n	8005952 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005928:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	4a24      	ldr	r2, [pc, #144]	; (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005932:	6593      	str	r3, [r2, #88]	; 0x58
 8005934:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005940:	f7ff f958 	bl	8004bf4 <HAL_PWREx_GetVoltageRange>
 8005944:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005946:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594a:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005950:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005958:	d10b      	bne.n	8005972 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d919      	bls.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2ba0      	cmp	r3, #160	; 0xa0
 8005964:	d902      	bls.n	800596c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005966:	2302      	movs	r3, #2
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	e013      	b.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800596c:	2301      	movs	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	e010      	b.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b80      	cmp	r3, #128	; 0x80
 8005976:	d902      	bls.n	800597e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005978:	2303      	movs	r3, #3
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	e00a      	b.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d102      	bne.n	800598a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005984:	2302      	movs	r3, #2
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e004      	b.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d101      	bne.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005990:	2301      	movs	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005994:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f023 0207 	bic.w	r2, r3, #7
 800599c:	4909      	ldr	r1, [pc, #36]	; (80059c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d001      	beq.n	80059b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40022000 	.word	0x40022000

080059c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059d0:	2300      	movs	r3, #0
 80059d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059d4:	2300      	movs	r3, #0
 80059d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 809e 	beq.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059ea:	4b46      	ldr	r3, [pc, #280]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00d      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a00:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	4a3f      	ldr	r2, [pc, #252]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a1c:	4b3a      	ldr	r3, [pc, #232]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a39      	ldr	r2, [pc, #228]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a28:	f7fd fe5c 	bl	80036e4 <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a2e:	e009      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a30:	f7fd fe58 	bl	80036e4 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d902      	bls.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	74fb      	strb	r3, [r7, #19]
        break;
 8005a42:	e005      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a44:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ef      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d15a      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a56:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01e      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d019      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a84:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a9e:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d016      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fe18 	bl	80036e4 <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fd fe14 	bl	80036e4 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d902      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	74fb      	strb	r3, [r7, #19]
            break;
 8005ace:	e006      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0ec      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005ade:	7cfb      	ldrb	r3, [r7, #19]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	4904      	ldr	r1, [pc, #16]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005afa:	e009      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005afc:	7cfb      	ldrb	r3, [r7, #19]
 8005afe:	74bb      	strb	r3, [r7, #18]
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b10:	7c7b      	ldrb	r3, [r7, #17]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b16:	4b6e      	ldr	r3, [pc, #440]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	4a6d      	ldr	r2, [pc, #436]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b2e:	4b68      	ldr	r3, [pc, #416]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b34:	f023 0203 	bic.w	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4964      	ldr	r1, [pc, #400]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b50:	4b5f      	ldr	r3, [pc, #380]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f023 020c 	bic.w	r2, r3, #12
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	495c      	ldr	r1, [pc, #368]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b72:	4b57      	ldr	r3, [pc, #348]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4953      	ldr	r1, [pc, #332]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b94:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	494b      	ldr	r1, [pc, #300]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bb6:	4b46      	ldr	r3, [pc, #280]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	4942      	ldr	r1, [pc, #264]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bd8:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	493a      	ldr	r1, [pc, #232]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bfa:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	4931      	ldr	r1, [pc, #196]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c1c:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	4929      	ldr	r1, [pc, #164]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4920      	ldr	r1, [pc, #128]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d015      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	4918      	ldr	r1, [pc, #96]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d015      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	490a      	ldr	r1, [pc, #40]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000

08005cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e095      	b.n	8005e12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf6:	d009      	beq.n	8005d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61da      	str	r2, [r3, #28]
 8005cfe:	e005      	b.n	8005d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fd fa9c 	bl	8003264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d4c:	d902      	bls.n	8005d54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e002      	b.n	8005d5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d62:	d007      	beq.n	8005d74 <HAL_SPI_Init+0xa0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	ea42 0103 	orr.w	r1, r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	f003 0204 	and.w	r2, r3, #4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005df0:	ea42 0103 	orr.w	r1, r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b088      	sub	sp, #32
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_SPI_Transmit+0x22>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e15f      	b.n	80060fc <HAL_SPI_Transmit+0x2e2>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e44:	f7fd fc4e 	bl	80036e4 <HAL_GetTick>
 8005e48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d002      	beq.n	8005e60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e5e:	e148      	b.n	80060f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Transmit+0x52>
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e70:	e13f      	b.n	80060f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2203      	movs	r2, #3
 8005e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d10f      	bne.n	8005ede <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ecc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005edc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d007      	beq.n	8005efc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f04:	d94f      	bls.n	8005fa6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_SPI_Transmit+0xfa>
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d142      	bne.n	8005f9a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f38:	e02f      	b.n	8005f9a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d112      	bne.n	8005f6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f6c:	e015      	b.n	8005f9a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6e:	f7fd fbb9 	bl	80036e4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d803      	bhi.n	8005f86 <HAL_SPI_Transmit+0x16c>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d102      	bne.n	8005f8c <HAL_SPI_Transmit+0x172>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005f98:	e0ab      	b.n	80060f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1ca      	bne.n	8005f3a <HAL_SPI_Transmit+0x120>
 8005fa4:	e080      	b.n	80060a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0x19a>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d174      	bne.n	800609e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d912      	bls.n	8005fe4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	1c9a      	adds	r2, r3, #2
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b02      	subs	r3, #2
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe2:	e05c      	b.n	800609e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800600a:	e048      	b.n	800609e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d12b      	bne.n	8006072 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d912      	bls.n	800604a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b02      	subs	r3, #2
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006048:	e029      	b.n	800609e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006070:	e015      	b.n	800609e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006072:	f7fd fb37 	bl	80036e4 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d803      	bhi.n	800608a <HAL_SPI_Transmit+0x270>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d102      	bne.n	8006090 <HAL_SPI_Transmit+0x276>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800609c:	e029      	b.n	80060f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1b1      	bne.n	800600c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fb69 	bl	8006784 <SPI_EndRxTxTransaction>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e003      	b.n	80060f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006112:	2301      	movs	r3, #1
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_SPI_TransmitReceive+0x26>
 8006126:	2302      	movs	r3, #2
 8006128:	e20a      	b.n	8006540 <HAL_SPI_TransmitReceive+0x43c>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006132:	f7fd fad7 	bl	80036e4 <HAL_GetTick>
 8006136:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800613e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800614a:	887b      	ldrh	r3, [r7, #2]
 800614c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800614e:	7efb      	ldrb	r3, [r7, #27]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d00e      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x6e>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615a:	d106      	bne.n	800616a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <HAL_SPI_TransmitReceive+0x66>
 8006164:	7efb      	ldrb	r3, [r7, #27]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d003      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800616a:	2302      	movs	r3, #2
 800616c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006170:	e1e0      	b.n	8006534 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_SPI_TransmitReceive+0x80>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_SPI_TransmitReceive+0x80>
 800617e:	887b      	ldrh	r3, [r7, #2]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800618a:	e1d3      	b.n	8006534 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b04      	cmp	r3, #4
 8006196:	d003      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2205      	movs	r2, #5
 800619c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	887a      	ldrh	r2, [r7, #2]
 80061b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	887a      	ldrh	r2, [r7, #2]
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	887a      	ldrh	r2, [r7, #2]
 80061cc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e2:	d802      	bhi.n	80061ea <HAL_SPI_TransmitReceive+0xe6>
 80061e4:	8a3b      	ldrh	r3, [r7, #16]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d908      	bls.n	80061fc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	e007      	b.n	800620c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800620a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d007      	beq.n	800622a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006228:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006232:	f240 8081 	bls.w	8006338 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x140>
 800623e:	8a7b      	ldrh	r3, [r7, #18]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d16d      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006268:	e05a      	b.n	8006320 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d11b      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x1ac>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x1ac>
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	2b01      	cmp	r3, #1
 8006286:	d113      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	1c9a      	adds	r2, r3, #2
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d11c      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x1f4>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	b292      	uxth	r2, r2
 80062d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	1c9a      	adds	r2, r3, #2
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062f8:	f7fd f9f4 	bl	80036e4 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006304:	429a      	cmp	r2, r3
 8006306:	d80b      	bhi.n	8006320 <HAL_SPI_TransmitReceive+0x21c>
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d007      	beq.n	8006320 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800631e:	e109      	b.n	8006534 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d19f      	bne.n	800626a <HAL_SPI_TransmitReceive+0x166>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d199      	bne.n	800626a <HAL_SPI_TransmitReceive+0x166>
 8006336:	e0e3      	b.n	8006500 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_SPI_TransmitReceive+0x244>
 8006340:	8a7b      	ldrh	r3, [r7, #18]
 8006342:	2b01      	cmp	r3, #1
 8006344:	f040 80cf 	bne.w	80064e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d912      	bls.n	8006378 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	1c9a      	adds	r2, r3, #2
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b02      	subs	r3, #2
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006376:	e0b6      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	e0a2      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d134      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x314>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02f      	beq.n	8006418 <HAL_SPI_TransmitReceive+0x314>
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d12c      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d912      	bls.n	80063ee <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	881a      	ldrh	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b02      	subs	r3, #2
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ec:	e012      	b.n	8006414 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	7812      	ldrb	r2, [r2, #0]
 80063fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b01      	cmp	r3, #1
 8006424:	d148      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x3b4>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d042      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b01      	cmp	r3, #1
 800643c:	d923      	bls.n	8006486 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	b292      	uxth	r2, r2
 800644a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b02      	subs	r3, #2
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d81f      	bhi.n	80064b4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	e016      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f103 020c 	add.w	r2, r3, #12
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	7812      	ldrb	r2, [r2, #0]
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064b4:	2301      	movs	r3, #1
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064b8:	f7fd f914 	bl	80036e4 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d803      	bhi.n	80064d0 <HAL_SPI_TransmitReceive+0x3cc>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x3d2>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80064e4:	e026      	b.n	8006534 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f af57 	bne.w	80063a0 <HAL_SPI_TransmitReceive+0x29c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f47f af50 	bne.w	80063a0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f93d 	bl	8006784 <SPI_EndRxTxTransaction>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652a:	e003      	b.n	8006534 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800653c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006540:	4618      	mov	r0, r3
 8006542:	3728      	adds	r7, #40	; 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006558:	f7fd f8c4 	bl	80036e4 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4413      	add	r3, r2
 8006566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006568:	f7fd f8bc 	bl	80036e4 <HAL_GetTick>
 800656c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800656e:	4b39      	ldr	r3, [pc, #228]	; (8006654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	015b      	lsls	r3, r3, #5
 8006574:	0d1b      	lsrs	r3, r3, #20
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657e:	e054      	b.n	800662a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d050      	beq.n	800662a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006588:	f7fd f8ac 	bl	80036e4 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	429a      	cmp	r2, r3
 8006596:	d902      	bls.n	800659e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d13d      	bne.n	800661a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b6:	d111      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c0:	d004      	beq.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ca:	d107      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e4:	d10f      	bne.n	8006606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e017      	b.n	800664a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3b01      	subs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4013      	ands	r3, r2
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	429a      	cmp	r2, r3
 8006646:	d19b      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000024 	.word	0x20000024

08006658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800666a:	f7fd f83b 	bl	80036e4 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	4413      	add	r3, r2
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800667a:	f7fd f833 	bl	80036e4 <HAL_GetTick>
 800667e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006688:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	00da      	lsls	r2, r3, #3
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	0d1b      	lsrs	r3, r3, #20
 8006698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066a0:	e060      	b.n	8006764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066a8:	d107      	bne.n	80066ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d050      	beq.n	8006764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066c2:	f7fd f80f 	bl	80036e4 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d902      	bls.n	80066d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13d      	bne.n	8006754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f0:	d111      	bne.n	8006716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fa:	d004      	beq.n	8006706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006704:	d107      	bne.n	8006716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671e:	d10f      	bne.n	8006740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800673e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e010      	b.n	8006776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3b01      	subs	r3, #1
 8006762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d196      	bne.n	80066a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3728      	adds	r7, #40	; 0x28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000024 	.word	0x20000024

08006784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff ff5b 	bl	8006658 <SPI_WaitFifoStateUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e027      	b.n	8006808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fec0 	bl	8006548 <SPI_WaitFlagStateUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e014      	b.n	8006808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff ff34 	bl	8006658 <SPI_WaitFifoStateUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	f043 0220 	orr.w	r2, r3, #32
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e000      	b.n	8006808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e040      	b.n	80068a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fc fd58 	bl	80032e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2224      	movs	r2, #36	; 0x24
 800683c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fdd8 	bl	800740c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb7b 	bl	8006f58 <UART_SetConfig>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e01b      	b.n	80068a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800687a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800688a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fe57 	bl	8007550 <UART_CheckIdleState>
 80068a2:	4603      	mov	r3, r0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08a      	sub	sp, #40	; 0x28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d137      	bne.n	8006934 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_UART_Receive_IT+0x24>
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e030      	b.n	8006936 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <HAL_UART_Receive_IT+0x94>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01f      	beq.n	8006924 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d018      	beq.n	8006924 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	69f9      	ldr	r1, [r7, #28]
 8006916:	6a3a      	ldr	r2, [r7, #32]
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	61bb      	str	r3, [r7, #24]
   return(result);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	461a      	mov	r2, r3
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 ff20 	bl	8007770 <UART_Start_Receive_IT>
 8006930:	4603      	mov	r3, r0
 8006932:	e000      	b.n	8006936 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006934:	2302      	movs	r3, #2
  }
}
 8006936:	4618      	mov	r0, r3
 8006938:	3728      	adds	r7, #40	; 0x28
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40008000 	.word	0x40008000

08006944 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b0ba      	sub	sp, #232	; 0xe8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800696a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800696e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006972:	4013      	ands	r3, r2
 8006974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d115      	bne.n	80069ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00f      	beq.n	80069ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 82ae 	beq.w	8006efe <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
      }
      return;
 80069aa:	e2a8      	b.n	8006efe <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80069ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8117 	beq.w	8006be4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069c6:	4b85      	ldr	r3, [pc, #532]	; (8006bdc <HAL_UART_IRQHandler+0x298>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 810a 	beq.w	8006be4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_UART_IRQHandler+0xbc>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2201      	movs	r2, #1
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <HAL_UART_IRQHandler+0xec>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d011      	beq.n	8006a60 <HAL_UART_IRQHandler+0x11c>
 8006a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a56:	f043 0202 	orr.w	r2, r3, #2
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a92:	f043 0208 	orr.w	r2, r3, #8
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d012      	beq.n	8006ace <HAL_UART_IRQHandler+0x18a>
 8006aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8214 	beq.w	8006f02 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d005      	beq.n	8006b26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d04f      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fee8 	bl	80078fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	d141      	bne.n	8006bbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1d9      	bne.n	8006b3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d013      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b92:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <HAL_UART_IRQHandler+0x29c>)
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fc ff21 	bl	80039e2 <HAL_DMA_Abort_IT>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	e00f      	b.n	8006bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9b8 	bl	8006f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbc:	e00b      	b.n	8006bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9b4 	bl	8006f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc4:	e007      	b.n	8006bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9b0 	bl	8006f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006bd4:	e195      	b.n	8006f02 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd6:	bf00      	nop
    return;
 8006bd8:	e193      	b.n	8006f02 <HAL_UART_IRQHandler+0x5be>
 8006bda:	bf00      	nop
 8006bdc:	04000120 	.word	0x04000120
 8006be0:	080079c5 	.word	0x080079c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	f040 814e 	bne.w	8006e8a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8147 	beq.w	8006e8a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8140 	beq.w	8006e8a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2210      	movs	r2, #16
 8006c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	f040 80b8 	bne.w	8006d92 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8167 	beq.w	8006f06 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c42:	429a      	cmp	r2, r3
 8006c44:	f080 815f 	bcs.w	8006f06 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f040 8086 	bne.w	8006d70 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1da      	bne.n	8006c64 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e1      	bne.n	8006cae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e3      	bne.n	8006cea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d40:	f023 0310 	bic.w	r3, r3, #16
 8006d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e4      	bne.n	8006d30 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fc fdfb 	bl	8003966 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8d8 	bl	8006f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d90:	e0b9      	b.n	8006f06 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 80ab 	beq.w	8006f0a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80a6 	beq.w	8006f0a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
 8006de2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e4      	bne.n	8006dbe <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	623b      	str	r3, [r7, #32]
   return(result);
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3308      	adds	r3, #8
 8006e14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e18:	633a      	str	r2, [r7, #48]	; 0x30
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e3      	bne.n	8006df4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f023 0310 	bic.w	r3, r3, #16
 8006e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	69b9      	ldr	r1, [r7, #24]
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e4      	bne.n	8006e40 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f85c 	bl	8006f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e88:	e03f      	b.n	8006f0a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00e      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x570>
 8006e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006eaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 ff85 	bl	8007dbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eb2:	e02d      	b.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01c      	beq.n	8006f0e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
    }
    return;
 8006edc:	e017      	b.n	8006f0e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d012      	beq.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
 8006eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fd7a 	bl	80079f0 <UART_EndTransmit_IT>
    return;
 8006efc:	e008      	b.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006efe:	bf00      	nop
 8006f00:	e006      	b.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006f02:	bf00      	nop
 8006f04:	e004      	b.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006f06:	bf00      	nop
 8006f08:	e002      	b.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006f0e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006f10:	37e8      	adds	r7, #232	; 0xe8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop

08006f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f5c:	b08a      	sub	sp, #40	; 0x28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b9e      	ldr	r3, [pc, #632]	; (8007200 <UART_SetConfig+0x2a8>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a93      	ldr	r2, [pc, #588]	; (8007204 <UART_SetConfig+0x2ac>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a8a      	ldr	r2, [pc, #552]	; (8007208 <UART_SetConfig+0x2b0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d126      	bne.n	8007030 <UART_SetConfig+0xd8>
 8006fe2:	4b8a      	ldr	r3, [pc, #552]	; (800720c <UART_SetConfig+0x2b4>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d81b      	bhi.n	8007028 <UART_SetConfig+0xd0>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0xa0>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007009 	.word	0x08007009
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007011 	.word	0x08007011
 8007004:	08007021 	.word	0x08007021
 8007008:	2301      	movs	r3, #1
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700e:	e0ab      	b.n	8007168 <UART_SetConfig+0x210>
 8007010:	2302      	movs	r3, #2
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007016:	e0a7      	b.n	8007168 <UART_SetConfig+0x210>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701e:	e0a3      	b.n	8007168 <UART_SetConfig+0x210>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007026:	e09f      	b.n	8007168 <UART_SetConfig+0x210>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702e:	e09b      	b.n	8007168 <UART_SetConfig+0x210>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a76      	ldr	r2, [pc, #472]	; (8007210 <UART_SetConfig+0x2b8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d138      	bne.n	80070ac <UART_SetConfig+0x154>
 800703a:	4b74      	ldr	r3, [pc, #464]	; (800720c <UART_SetConfig+0x2b4>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007040:	f003 030c 	and.w	r3, r3, #12
 8007044:	2b0c      	cmp	r3, #12
 8007046:	d82d      	bhi.n	80070a4 <UART_SetConfig+0x14c>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0xf8>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007085 	.word	0x08007085
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070a5 	.word	0x080070a5
 8007060:	08007095 	.word	0x08007095
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	0800708d 	.word	0x0800708d
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070a5 	.word	0x080070a5
 8007080:	0800709d 	.word	0x0800709d
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800708a:	e06d      	b.n	8007168 <UART_SetConfig+0x210>
 800708c:	2302      	movs	r3, #2
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007092:	e069      	b.n	8007168 <UART_SetConfig+0x210>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800709a:	e065      	b.n	8007168 <UART_SetConfig+0x210>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a2:	e061      	b.n	8007168 <UART_SetConfig+0x210>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070aa:	e05d      	b.n	8007168 <UART_SetConfig+0x210>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a58      	ldr	r2, [pc, #352]	; (8007214 <UART_SetConfig+0x2bc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d125      	bne.n	8007102 <UART_SetConfig+0x1aa>
 80070b6:	4b55      	ldr	r3, [pc, #340]	; (800720c <UART_SetConfig+0x2b4>)
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070c0:	2b30      	cmp	r3, #48	; 0x30
 80070c2:	d016      	beq.n	80070f2 <UART_SetConfig+0x19a>
 80070c4:	2b30      	cmp	r3, #48	; 0x30
 80070c6:	d818      	bhi.n	80070fa <UART_SetConfig+0x1a2>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d00a      	beq.n	80070e2 <UART_SetConfig+0x18a>
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d814      	bhi.n	80070fa <UART_SetConfig+0x1a2>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <UART_SetConfig+0x182>
 80070d4:	2b10      	cmp	r3, #16
 80070d6:	d008      	beq.n	80070ea <UART_SetConfig+0x192>
 80070d8:	e00f      	b.n	80070fa <UART_SetConfig+0x1a2>
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e0:	e042      	b.n	8007168 <UART_SetConfig+0x210>
 80070e2:	2302      	movs	r3, #2
 80070e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e8:	e03e      	b.n	8007168 <UART_SetConfig+0x210>
 80070ea:	2304      	movs	r3, #4
 80070ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f0:	e03a      	b.n	8007168 <UART_SetConfig+0x210>
 80070f2:	2308      	movs	r3, #8
 80070f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f8:	e036      	b.n	8007168 <UART_SetConfig+0x210>
 80070fa:	2310      	movs	r3, #16
 80070fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007100:	e032      	b.n	8007168 <UART_SetConfig+0x210>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a3f      	ldr	r2, [pc, #252]	; (8007204 <UART_SetConfig+0x2ac>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d12a      	bne.n	8007162 <UART_SetConfig+0x20a>
 800710c:	4b3f      	ldr	r3, [pc, #252]	; (800720c <UART_SetConfig+0x2b4>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007112:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800711a:	d01a      	beq.n	8007152 <UART_SetConfig+0x1fa>
 800711c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007120:	d81b      	bhi.n	800715a <UART_SetConfig+0x202>
 8007122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007126:	d00c      	beq.n	8007142 <UART_SetConfig+0x1ea>
 8007128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712c:	d815      	bhi.n	800715a <UART_SetConfig+0x202>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <UART_SetConfig+0x1e2>
 8007132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007136:	d008      	beq.n	800714a <UART_SetConfig+0x1f2>
 8007138:	e00f      	b.n	800715a <UART_SetConfig+0x202>
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007140:	e012      	b.n	8007168 <UART_SetConfig+0x210>
 8007142:	2302      	movs	r3, #2
 8007144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007148:	e00e      	b.n	8007168 <UART_SetConfig+0x210>
 800714a:	2304      	movs	r3, #4
 800714c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007150:	e00a      	b.n	8007168 <UART_SetConfig+0x210>
 8007152:	2308      	movs	r3, #8
 8007154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007158:	e006      	b.n	8007168 <UART_SetConfig+0x210>
 800715a:	2310      	movs	r3, #16
 800715c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007160:	e002      	b.n	8007168 <UART_SetConfig+0x210>
 8007162:	2310      	movs	r3, #16
 8007164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a25      	ldr	r2, [pc, #148]	; (8007204 <UART_SetConfig+0x2ac>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f040 808a 	bne.w	8007288 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007178:	2b08      	cmp	r3, #8
 800717a:	d824      	bhi.n	80071c6 <UART_SetConfig+0x26e>
 800717c:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <UART_SetConfig+0x22c>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071c7 	.word	0x080071c7
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071b7 	.word	0x080071b7
 8007198:	080071c7 	.word	0x080071c7
 800719c:	080071c7 	.word	0x080071c7
 80071a0:	080071c7 	.word	0x080071c7
 80071a4:	080071bf 	.word	0x080071bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a8:	f7fe fb82 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 80071ac:	61f8      	str	r0, [r7, #28]
        break;
 80071ae:	e010      	b.n	80071d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b0:	4b19      	ldr	r3, [pc, #100]	; (8007218 <UART_SetConfig+0x2c0>)
 80071b2:	61fb      	str	r3, [r7, #28]
        break;
 80071b4:	e00d      	b.n	80071d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b6:	f7fe fae3 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 80071ba:	61f8      	str	r0, [r7, #28]
        break;
 80071bc:	e009      	b.n	80071d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c2:	61fb      	str	r3, [r7, #28]
        break;
 80071c4:	e005      	b.n	80071d2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8109 	beq.w	80073ec <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d305      	bcc.n	80071f6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d912      	bls.n	800721c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071fc:	e0f6      	b.n	80073ec <UART_SetConfig+0x494>
 80071fe:	bf00      	nop
 8007200:	efff69f3 	.word	0xefff69f3
 8007204:	40008000 	.word	0x40008000
 8007208:	40013800 	.word	0x40013800
 800720c:	40021000 	.word	0x40021000
 8007210:	40004400 	.word	0x40004400
 8007214:	40004800 	.word	0x40004800
 8007218:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	2200      	movs	r2, #0
 8007220:	461c      	mov	r4, r3
 8007222:	4615      	mov	r5, r2
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	022b      	lsls	r3, r5, #8
 800722e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007232:	0222      	lsls	r2, r4, #8
 8007234:	68f9      	ldr	r1, [r7, #12]
 8007236:	6849      	ldr	r1, [r1, #4]
 8007238:	0849      	lsrs	r1, r1, #1
 800723a:	2000      	movs	r0, #0
 800723c:	4688      	mov	r8, r1
 800723e:	4681      	mov	r9, r0
 8007240:	eb12 0a08 	adds.w	sl, r2, r8
 8007244:	eb43 0b09 	adc.w	fp, r3, r9
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007256:	4650      	mov	r0, sl
 8007258:	4659      	mov	r1, fp
 800725a:	f7f9 fd25 	bl	8000ca8 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4613      	mov	r3, r2
 8007264:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726c:	d308      	bcc.n	8007280 <UART_SetConfig+0x328>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007274:	d204      	bcs.n	8007280 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	60da      	str	r2, [r3, #12]
 800727e:	e0b5      	b.n	80073ec <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007286:	e0b1      	b.n	80073ec <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007290:	d15d      	bne.n	800734e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007296:	2b08      	cmp	r3, #8
 8007298:	d827      	bhi.n	80072ea <UART_SetConfig+0x392>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x348>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072c5 	.word	0x080072c5
 80072a4:	080072cd 	.word	0x080072cd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	080072eb 	.word	0x080072eb
 80072b0:	080072db 	.word	0x080072db
 80072b4:	080072eb 	.word	0x080072eb
 80072b8:	080072eb 	.word	0x080072eb
 80072bc:	080072eb 	.word	0x080072eb
 80072c0:	080072e3 	.word	0x080072e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c4:	f7fe faf4 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 80072c8:	61f8      	str	r0, [r7, #28]
        break;
 80072ca:	e014      	b.n	80072f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072cc:	f7fe fb06 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 80072d0:	61f8      	str	r0, [r7, #28]
        break;
 80072d2:	e010      	b.n	80072f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d4:	4b4c      	ldr	r3, [pc, #304]	; (8007408 <UART_SetConfig+0x4b0>)
 80072d6:	61fb      	str	r3, [r7, #28]
        break;
 80072d8:	e00d      	b.n	80072f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072da:	f7fe fa51 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 80072de:	61f8      	str	r0, [r7, #28]
        break;
 80072e0:	e009      	b.n	80072f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072e6:	61fb      	str	r3, [r7, #28]
        break;
 80072e8:	e005      	b.n	80072f6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d077      	beq.n	80073ec <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	005a      	lsls	r2, r3, #1
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	441a      	add	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b0f      	cmp	r3, #15
 8007316:	d916      	bls.n	8007346 <UART_SetConfig+0x3ee>
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731e:	d212      	bcs.n	8007346 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f023 030f 	bic.w	r3, r3, #15
 8007328:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	b29b      	uxth	r3, r3
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	b29a      	uxth	r2, r3
 8007336:	8afb      	ldrh	r3, [r7, #22]
 8007338:	4313      	orrs	r3, r2
 800733a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	8afa      	ldrh	r2, [r7, #22]
 8007342:	60da      	str	r2, [r3, #12]
 8007344:	e052      	b.n	80073ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800734c:	e04e      	b.n	80073ec <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800734e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007352:	2b08      	cmp	r3, #8
 8007354:	d827      	bhi.n	80073a6 <UART_SetConfig+0x44e>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x404>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	08007381 	.word	0x08007381
 8007360:	08007389 	.word	0x08007389
 8007364:	08007391 	.word	0x08007391
 8007368:	080073a7 	.word	0x080073a7
 800736c:	08007397 	.word	0x08007397
 8007370:	080073a7 	.word	0x080073a7
 8007374:	080073a7 	.word	0x080073a7
 8007378:	080073a7 	.word	0x080073a7
 800737c:	0800739f 	.word	0x0800739f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007380:	f7fe fa96 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8007384:	61f8      	str	r0, [r7, #28]
        break;
 8007386:	e014      	b.n	80073b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007388:	f7fe faa8 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 800738c:	61f8      	str	r0, [r7, #28]
        break;
 800738e:	e010      	b.n	80073b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007390:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <UART_SetConfig+0x4b0>)
 8007392:	61fb      	str	r3, [r7, #28]
        break;
 8007394:	e00d      	b.n	80073b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007396:	f7fe f9f3 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 800739a:	61f8      	str	r0, [r7, #28]
        break;
 800739c:	e009      	b.n	80073b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a2:	61fb      	str	r3, [r7, #28]
        break;
 80073a4:	e005      	b.n	80073b2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073b0:	bf00      	nop
    }

    if (pclk != 0U)
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	085a      	lsrs	r2, r3, #1
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	441a      	add	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b0f      	cmp	r3, #15
 80073d0:	d909      	bls.n	80073e6 <UART_SetConfig+0x48e>
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d8:	d205      	bcs.n	80073e6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e002      	b.n	80073ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007406:	bf00      	nop
 8007408:	00f42400 	.word	0x00f42400

0800740c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01a      	beq.n	8007522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750a:	d10a      	bne.n	8007522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b098      	sub	sp, #96	; 0x60
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007560:	f7fc f8c0 	bl	80036e4 <HAL_GetTick>
 8007564:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b08      	cmp	r3, #8
 8007572:	d12e      	bne.n	80075d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800757c:	2200      	movs	r2, #0
 800757e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f88c 	bl	80076a0 <UART_WaitOnFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d021      	beq.n	80075d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a2:	653b      	str	r3, [r7, #80]	; 0x50
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
 80075ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e062      	b.n	8007698 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d149      	bne.n	8007674 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e8:	2200      	movs	r2, #0
 80075ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f856 	bl	80076a0 <UART_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d03c      	beq.n	8007674 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	623b      	str	r3, [r7, #32]
   return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800760e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	633b      	str	r3, [r7, #48]	; 0x30
 800761a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60fb      	str	r3, [r7, #12]
   return(result);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764c:	61fa      	str	r2, [r7, #28]
 800764e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	69b9      	ldr	r1, [r7, #24]
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	617b      	str	r3, [r7, #20]
   return(result);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e011      	b.n	8007698 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3758      	adds	r7, #88	; 0x58
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	4613      	mov	r3, r2
 80076ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b0:	e049      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d045      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ba:	f7fc f813 	bl	80036e4 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e048      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d031      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d110      	bne.n	8007712 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2208      	movs	r2, #8
 80076f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f8ff 	bl	80078fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2208      	movs	r2, #8
 8007702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e029      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007720:	d111      	bne.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f8e5 	bl	80078fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e00f      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4013      	ands	r3, r2
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	429a      	cmp	r2, r3
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	429a      	cmp	r2, r3
 8007762:	d0a6      	beq.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007770:	b480      	push	{r7}
 8007772:	b097      	sub	sp, #92	; 0x5c
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a2:	d10e      	bne.n	80077c2 <UART_Start_Receive_IT+0x52>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <UART_Start_Receive_IT+0x48>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b6:	e02d      	b.n	8007814 <UART_Start_Receive_IT+0xa4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	22ff      	movs	r2, #255	; 0xff
 80077bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c0:	e028      	b.n	8007814 <UART_Start_Receive_IT+0xa4>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10d      	bne.n	80077e6 <UART_Start_Receive_IT+0x76>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d104      	bne.n	80077dc <UART_Start_Receive_IT+0x6c>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077da:	e01b      	b.n	8007814 <UART_Start_Receive_IT+0xa4>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	227f      	movs	r2, #127	; 0x7f
 80077e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077e4:	e016      	b.n	8007814 <UART_Start_Receive_IT+0xa4>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ee:	d10d      	bne.n	800780c <UART_Start_Receive_IT+0x9c>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <UART_Start_Receive_IT+0x92>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	227f      	movs	r2, #127	; 0x7f
 80077fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007800:	e008      	b.n	8007814 <UART_Start_Receive_IT+0xa4>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	223f      	movs	r2, #63	; 0x3f
 8007806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800780a:	e003      	b.n	8007814 <UART_Start_Receive_IT+0xa4>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2222      	movs	r2, #34	; 0x22
 8007820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	657b      	str	r3, [r7, #84]	; 0x54
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007844:	64ba      	str	r2, [r7, #72]	; 0x48
 8007846:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800784a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e5      	bne.n	8007824 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d107      	bne.n	8007872 <UART_Start_Receive_IT+0x102>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4a21      	ldr	r2, [pc, #132]	; (80078f4 <UART_Start_Receive_IT+0x184>)
 800786e:	669a      	str	r2, [r3, #104]	; 0x68
 8007870:	e002      	b.n	8007878 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <UART_Start_Receive_IT+0x188>)
 8007876:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d019      	beq.n	80078b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789e:	637b      	str	r3, [r7, #52]	; 0x34
 80078a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_Start_Receive_IT+0x110>
 80078b2:	e018      	b.n	80078e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	613b      	str	r3, [r7, #16]
   return(result);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f043 0320 	orr.w	r3, r3, #32
 80078c8:	653b      	str	r3, [r7, #80]	; 0x50
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d2:	623b      	str	r3, [r7, #32]
 80078d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	69f9      	ldr	r1, [r7, #28]
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e6      	bne.n	80078b4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	375c      	adds	r7, #92	; 0x5c
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	08007c01 	.word	0x08007c01
 80078f8:	08007a45 	.word	0x08007a45

080078fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b095      	sub	sp, #84	; 0x54
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007922:	643b      	str	r3, [r7, #64]	; 0x40
 8007924:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	61fb      	str	r3, [r7, #28]
   return(result);
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	64bb      	str	r3, [r7, #72]	; 0x48
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800795c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796e:	2b01      	cmp	r3, #1
 8007970:	d118      	bne.n	80079a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 0310 	bic.w	r3, r3, #16
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e6      	bne.n	8007972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079b8:	bf00      	nop
 80079ba:	3754      	adds	r7, #84	; 0x54
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff faa2 	bl	8006f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	613b      	str	r3, [r7, #16]
   return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fa6e 	bl	8006f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a3c:	bf00      	nop
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b09c      	sub	sp, #112	; 0x70
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5c:	2b22      	cmp	r3, #34	; 0x22
 8007a5e:	f040 80be 	bne.w	8007bde <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007a70:	b2d9      	uxtb	r1, r3
 8007a72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	400a      	ands	r2, r1
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f040 80a3 	bne.w	8007bf2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aca:	65bb      	str	r3, [r7, #88]	; 0x58
 8007acc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e6      	bne.n	8007aac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	667b      	str	r3, [r7, #100]	; 0x64
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007afe:	647a      	str	r2, [r7, #68]	; 0x44
 8007b00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e5      	bne.n	8007ade <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a34      	ldr	r2, [pc, #208]	; (8007bfc <UART_RxISR_8BIT+0x1b8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d01f      	beq.n	8007b70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d018      	beq.n	8007b70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b52:	663b      	str	r3, [r7, #96]	; 0x60
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e6      	bne.n	8007b3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d12e      	bne.n	8007bd6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0310 	bic.w	r3, r3, #16
 8007b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	69b9      	ldr	r1, [r7, #24]
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d103      	bne.n	8007bc6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff f9b6 	bl	8006f40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bd4:	e00d      	b.n	8007bf2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fa fa9a 	bl	8002110 <HAL_UART_RxCpltCallback>
}
 8007bdc:	e009      	b.n	8007bf2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	8b1b      	ldrh	r3, [r3, #24]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0208 	orr.w	r2, r2, #8
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	831a      	strh	r2, [r3, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	3770      	adds	r7, #112	; 0x70
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40008000 	.word	0x40008000

08007c00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b09c      	sub	sp, #112	; 0x70
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c18:	2b22      	cmp	r3, #34	; 0x22
 8007c1a:	f040 80be 	bne.w	8007d9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007c32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007c36:	4013      	ands	r3, r2
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	1c9a      	adds	r2, r3, #2
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f040 80a3 	bne.w	8007dae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c86:	657b      	str	r3, [r7, #84]	; 0x54
 8007c88:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e6      	bne.n	8007c68 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cba:	643a      	str	r2, [r7, #64]	; 0x40
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <UART_RxISR_16BIT+0x1b8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d01f      	beq.n	8007d2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d018      	beq.n	8007d2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e6      	bne.n	8007cfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d12e      	bne.n	8007d92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f023 0310 	bic.w	r3, r3, #16
 8007d4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6979      	ldr	r1, [r7, #20]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	613b      	str	r3, [r7, #16]
   return(result);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d103      	bne.n	8007d82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2210      	movs	r2, #16
 8007d80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff f8d8 	bl	8006f40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d90:	e00d      	b.n	8007dae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fa f9bc 	bl	8002110 <HAL_UART_RxCpltCallback>
}
 8007d98:	e009      	b.n	8007dae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	8b1b      	ldrh	r3, [r3, #24]
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0208 	orr.w	r2, r2, #8
 8007daa:	b292      	uxth	r2, r2
 8007dac:	831a      	strh	r2, [r3, #24]
}
 8007dae:	bf00      	nop
 8007db0:	3770      	adds	r7, #112	; 0x70
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40008000 	.word	0x40008000

08007dbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007dd4:	4904      	ldr	r1, [pc, #16]	; (8007de8 <MX_FATFS_Init+0x18>)
 8007dd6:	4805      	ldr	r0, [pc, #20]	; (8007dec <MX_FATFS_Init+0x1c>)
 8007dd8:	f002 ffd2 	bl	800ad80 <FATFS_LinkDriver>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <MX_FATFS_Init+0x20>)
 8007de2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007de4:	bf00      	nop
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000f04 	.word	0x20000f04
 8007dec:	20000030 	.word	0x20000030
 8007df0:	20000f00 	.word	0x20000f00

08007df4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f9d1 	bl	80081a8 <USER_SPI_initialize>
 8007e06:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return USER_SPI_status(pdrv); //ADD THIS LINE
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 faaf 	bl	8008380 <USER_SPI_status>
 8007e22:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8007e3c:	7bf8      	ldrb	r0, [r7, #15]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	f000 fab2 	bl	80083ac <USER_SPI_read>
 8007e48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007e62:	7bf8      	ldrb	r0, [r7, #15]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	f000 fb05 	bl	8008478 <USER_SPI_write>
 8007e6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	603a      	str	r2, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
 8007e84:	460b      	mov	r3, r1
 8007e86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8007e88:	79b9      	ldrb	r1, [r7, #6]
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb6e 	bl	8008570 <USER_SPI_ioctl>
 8007e94:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007ea8:	f7fb fc1c 	bl	80036e4 <HAL_GetTick>
 8007eac:	4603      	mov	r3, r0
 8007eae:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <SPI_Timer_On+0x20>)
 8007eb0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007eb2:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <SPI_Timer_On+0x24>)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6013      	str	r3, [r2, #0]
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000f0c 	.word	0x20000f0c
 8007ec4:	20000f10 	.word	0x20000f10

08007ec8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007ecc:	f7fb fc0a 	bl	80036e4 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <SPI_Timer_Status+0x24>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <SPI_Timer_Status+0x28>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	bf34      	ite	cc
 8007ee0:	2301      	movcc	r3, #1
 8007ee2:	2300      	movcs	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000f0c 	.word	0x20000f0c
 8007ef0:	20000f10 	.word	0x20000f10

08007ef4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007efe:	f107 020f 	add.w	r2, r7, #15
 8007f02:	1df9      	adds	r1, r7, #7
 8007f04:	2332      	movs	r3, #50	; 0x32
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	4804      	ldr	r0, [pc, #16]	; (8007f1c <xchg_spi+0x28>)
 8007f0c:	f7fe f8fa 	bl	8006104 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000798 	.word	0x20000798

08007f20 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e00a      	b.n	8007f46 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	18d4      	adds	r4, r2, r3
 8007f36:	20ff      	movs	r0, #255	; 0xff
 8007f38:	f7ff ffdc 	bl	8007ef4 <xchg_spi>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3301      	adds	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3f0      	bcc.n	8007f30 <rcvr_spi_multi+0x10>
	}
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd90      	pop	{r4, r7, pc}

08007f58 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4803      	ldr	r0, [pc, #12]	; (8007f7c <xmit_spi_multi+0x24>)
 8007f6e:	f7fd ff54 	bl	8005e1a <HAL_SPI_Transmit>
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000798 	.word	0x20000798

08007f80 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007f88:	f7fb fbac 	bl	80036e4 <HAL_GetTick>
 8007f8c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007f92:	20ff      	movs	r0, #255	; 0xff
 8007f94:	f7ff ffae 	bl	8007ef4 <xchg_spi>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2bff      	cmp	r3, #255	; 0xff
 8007fa0:	d007      	beq.n	8007fb2 <wait_ready+0x32>
 8007fa2:	f7fb fb9f 	bl	80036e4 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d8ef      	bhi.n	8007f92 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2bff      	cmp	r3, #255	; 0xff
 8007fb6:	bf0c      	ite	eq
 8007fb8:	2301      	moveq	r3, #1
 8007fba:	2300      	movne	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007fca:	2201      	movs	r2, #1
 8007fcc:	2110      	movs	r1, #16
 8007fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007fd2:	f7fb feb9 	bl	8003d48 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007fd6:	20ff      	movs	r0, #255	; 0xff
 8007fd8:	f7ff ff8c 	bl	8007ef4 <xchg_spi>

}
 8007fdc:	bf00      	nop
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2110      	movs	r1, #16
 8007fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007fec:	f7fb feac 	bl	8003d48 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007ff0:	20ff      	movs	r0, #255	; 0xff
 8007ff2:	f7ff ff7f 	bl	8007ef4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ffa:	f7ff ffc1 	bl	8007f80 <wait_ready>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <spiselect+0x28>
 8008004:	2301      	movs	r3, #1
 8008006:	e002      	b.n	800800e <spiselect+0x2e>

	despiselect();
 8008008:	f7ff ffdd 	bl	8007fc6 <despiselect>
	return 0;	/* Timeout */
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	bd80      	pop	{r7, pc}

08008012 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800801c:	20c8      	movs	r0, #200	; 0xc8
 800801e:	f7ff ff3f 	bl	8007ea0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008022:	20ff      	movs	r0, #255	; 0xff
 8008024:	f7ff ff66 	bl	8007ef4 <xchg_spi>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2bff      	cmp	r3, #255	; 0xff
 8008030:	d104      	bne.n	800803c <rcvr_datablock+0x2a>
 8008032:	f7ff ff49 	bl	8007ec8 <SPI_Timer_Status>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f2      	bne.n	8008022 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	2bfe      	cmp	r3, #254	; 0xfe
 8008040:	d001      	beq.n	8008046 <rcvr_datablock+0x34>
 8008042:	2300      	movs	r3, #0
 8008044:	e00a      	b.n	800805c <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff69 	bl	8007f20 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800804e:	20ff      	movs	r0, #255	; 0xff
 8008050:	f7ff ff50 	bl	8007ef4 <xchg_spi>
 8008054:	20ff      	movs	r0, #255	; 0xff
 8008056:	f7ff ff4d 	bl	8007ef4 <xchg_spi>

	return 1;						/* Function succeeded */
 800805a:	2301      	movs	r3, #1
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008074:	f7ff ff84 	bl	8007f80 <wait_ready>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <xmit_datablock+0x1e>
 800807e:	2300      	movs	r3, #0
 8008080:	e01e      	b.n	80080c0 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff ff35 	bl	8007ef4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	2bfd      	cmp	r3, #253	; 0xfd
 800808e:	d016      	beq.n	80080be <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff5f 	bl	8007f58 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800809a:	20ff      	movs	r0, #255	; 0xff
 800809c:	f7ff ff2a 	bl	8007ef4 <xchg_spi>
 80080a0:	20ff      	movs	r0, #255	; 0xff
 80080a2:	f7ff ff27 	bl	8007ef4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80080a6:	20ff      	movs	r0, #255	; 0xff
 80080a8:	f7ff ff24 	bl	8007ef4 <xchg_spi>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d001      	beq.n	80080be <xmit_datablock+0x5a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <xmit_datablock+0x5c>
	}
	return 1;
 80080be:	2301      	movs	r3, #1
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80080d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da0e      	bge.n	80080fa <send_cmd+0x32>
		cmd &= 0x7F;
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80080e4:	2100      	movs	r1, #0
 80080e6:	2037      	movs	r0, #55	; 0x37
 80080e8:	f7ff ffee 	bl	80080c8 <send_cmd>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d901      	bls.n	80080fa <send_cmd+0x32>
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	e051      	b.n	800819e <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	2b0c      	cmp	r3, #12
 80080fe:	d008      	beq.n	8008112 <send_cmd+0x4a>
		despiselect();
 8008100:	f7ff ff61 	bl	8007fc6 <despiselect>
		if (!spiselect()) return 0xFF;
 8008104:	f7ff ff6c 	bl	8007fe0 <spiselect>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <send_cmd+0x4a>
 800810e:	23ff      	movs	r3, #255	; 0xff
 8008110:	e045      	b.n	800819e <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008118:	b2db      	uxtb	r3, r3
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff feea 	bl	8007ef4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	0e1b      	lsrs	r3, r3, #24
 8008124:	b2db      	uxtb	r3, r3
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff fee4 	bl	8007ef4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	0c1b      	lsrs	r3, r3, #16
 8008130:	b2db      	uxtb	r3, r3
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff fede 	bl	8007ef4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	0a1b      	lsrs	r3, r3, #8
 800813c:	b2db      	uxtb	r3, r3
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff fed8 	bl	8007ef4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fed3 	bl	8007ef4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800814e:	2301      	movs	r3, #1
 8008150:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <send_cmd+0x94>
 8008158:	2395      	movs	r3, #149	; 0x95
 800815a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2b08      	cmp	r3, #8
 8008160:	d101      	bne.n	8008166 <send_cmd+0x9e>
 8008162:	2387      	movs	r3, #135	; 0x87
 8008164:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fec3 	bl	8007ef4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	2b0c      	cmp	r3, #12
 8008172:	d102      	bne.n	800817a <send_cmd+0xb2>
 8008174:	20ff      	movs	r0, #255	; 0xff
 8008176:	f7ff febd 	bl	8007ef4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800817a:	230a      	movs	r3, #10
 800817c:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800817e:	20ff      	movs	r0, #255	; 0xff
 8008180:	f7ff feb8 	bl	8007ef4 <xchg_spi>
 8008184:	4603      	mov	r3, r0
 8008186:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	da05      	bge.n	800819c <send_cmd+0xd4>
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	3b01      	subs	r3, #1
 8008194:	73fb      	strb	r3, [r7, #15]
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f0      	bne.n	800817e <send_cmd+0xb6>

	return res;							/* Return received response */
 800819c:	7bbb      	ldrb	r3, [r7, #14]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <USER_SPI_initialize+0x14>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0d6      	b.n	800836a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80081bc:	4b6d      	ldr	r3, [pc, #436]	; (8008374 <USER_SPI_initialize+0x1cc>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <USER_SPI_initialize+0x2a>
 80081ca:	4b6a      	ldr	r3, [pc, #424]	; (8008374 <USER_SPI_initialize+0x1cc>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	e0cb      	b.n	800836a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80081d2:	4b69      	ldr	r3, [pc, #420]	; (8008378 <USER_SPI_initialize+0x1d0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081dc:	4b66      	ldr	r3, [pc, #408]	; (8008378 <USER_SPI_initialize+0x1d0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80081e4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80081e6:	230a      	movs	r3, #10
 80081e8:	73fb      	strb	r3, [r7, #15]
 80081ea:	e005      	b.n	80081f8 <USER_SPI_initialize+0x50>
 80081ec:	20ff      	movs	r0, #255	; 0xff
 80081ee:	f7ff fe81 	bl	8007ef4 <xchg_spi>
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f6      	bne.n	80081ec <USER_SPI_initialize+0x44>

	ty = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008202:	2100      	movs	r1, #0
 8008204:	2000      	movs	r0, #0
 8008206:	f7ff ff5f 	bl	80080c8 <send_cmd>
 800820a:	4603      	mov	r3, r0
 800820c:	2b01      	cmp	r3, #1
 800820e:	f040 808b 	bne.w	8008328 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008216:	f7ff fe43 	bl	8007ea0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800821a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800821e:	2008      	movs	r0, #8
 8008220:	f7ff ff52 	bl	80080c8 <send_cmd>
 8008224:	4603      	mov	r3, r0
 8008226:	2b01      	cmp	r3, #1
 8008228:	d151      	bne.n	80082ce <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e00d      	b.n	800824c <USER_SPI_initialize+0xa4>
 8008230:	7bfc      	ldrb	r4, [r7, #15]
 8008232:	20ff      	movs	r0, #255	; 0xff
 8008234:	f7ff fe5e 	bl	8007ef4 <xchg_spi>
 8008238:	4603      	mov	r3, r0
 800823a:	461a      	mov	r2, r3
 800823c:	f104 0310 	add.w	r3, r4, #16
 8008240:	443b      	add	r3, r7
 8008242:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	3301      	adds	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d9ee      	bls.n	8008230 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008252:	7abb      	ldrb	r3, [r7, #10]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d167      	bne.n	8008328 <USER_SPI_initialize+0x180>
 8008258:	7afb      	ldrb	r3, [r7, #11]
 800825a:	2baa      	cmp	r3, #170	; 0xaa
 800825c:	d164      	bne.n	8008328 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800825e:	bf00      	nop
 8008260:	f7ff fe32 	bl	8007ec8 <SPI_Timer_Status>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <USER_SPI_initialize+0xd2>
 800826a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800826e:	20a9      	movs	r0, #169	; 0xa9
 8008270:	f7ff ff2a 	bl	80080c8 <send_cmd>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f2      	bne.n	8008260 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800827a:	f7ff fe25 	bl	8007ec8 <SPI_Timer_Status>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d051      	beq.n	8008328 <USER_SPI_initialize+0x180>
 8008284:	2100      	movs	r1, #0
 8008286:	203a      	movs	r0, #58	; 0x3a
 8008288:	f7ff ff1e 	bl	80080c8 <send_cmd>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d14a      	bne.n	8008328 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
 8008296:	e00d      	b.n	80082b4 <USER_SPI_initialize+0x10c>
 8008298:	7bfc      	ldrb	r4, [r7, #15]
 800829a:	20ff      	movs	r0, #255	; 0xff
 800829c:	f7ff fe2a 	bl	8007ef4 <xchg_spi>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	f104 0310 	add.w	r3, r4, #16
 80082a8:	443b      	add	r3, r7
 80082aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	3301      	adds	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d9ee      	bls.n	8008298 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80082ba:	7a3b      	ldrb	r3, [r7, #8]
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <USER_SPI_initialize+0x120>
 80082c4:	230c      	movs	r3, #12
 80082c6:	e000      	b.n	80082ca <USER_SPI_initialize+0x122>
 80082c8:	2304      	movs	r3, #4
 80082ca:	737b      	strb	r3, [r7, #13]
 80082cc:	e02c      	b.n	8008328 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80082ce:	2100      	movs	r1, #0
 80082d0:	20a9      	movs	r0, #169	; 0xa9
 80082d2:	f7ff fef9 	bl	80080c8 <send_cmd>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d804      	bhi.n	80082e6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80082dc:	2302      	movs	r3, #2
 80082de:	737b      	strb	r3, [r7, #13]
 80082e0:	23a9      	movs	r3, #169	; 0xa9
 80082e2:	73bb      	strb	r3, [r7, #14]
 80082e4:	e003      	b.n	80082ee <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80082e6:	2301      	movs	r3, #1
 80082e8:	737b      	strb	r3, [r7, #13]
 80082ea:	2301      	movs	r3, #1
 80082ec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80082ee:	bf00      	nop
 80082f0:	f7ff fdea 	bl	8007ec8 <SPI_Timer_Status>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <USER_SPI_initialize+0x162>
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2100      	movs	r1, #0
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff fee2 	bl	80080c8 <send_cmd>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f2      	bne.n	80082f0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800830a:	f7ff fddd 	bl	8007ec8 <SPI_Timer_Status>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <USER_SPI_initialize+0x17c>
 8008314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008318:	2010      	movs	r0, #16
 800831a:	f7ff fed5 	bl	80080c8 <send_cmd>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <USER_SPI_initialize+0x180>
				ty = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008328:	4a14      	ldr	r2, [pc, #80]	; (800837c <USER_SPI_initialize+0x1d4>)
 800832a:	7b7b      	ldrb	r3, [r7, #13]
 800832c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800832e:	f7ff fe4a 	bl	8007fc6 <despiselect>

	if (ty) {			/* OK */
 8008332:	7b7b      	ldrb	r3, [r7, #13]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d012      	beq.n	800835e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <USER_SPI_initialize+0x1d0>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008342:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <USER_SPI_initialize+0x1d0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0210 	orr.w	r2, r2, #16
 800834a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800834c:	4b09      	ldr	r3, [pc, #36]	; (8008374 <USER_SPI_initialize+0x1cc>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <USER_SPI_initialize+0x1cc>)
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	e002      	b.n	8008364 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <USER_SPI_initialize+0x1cc>)
 8008360:	2201      	movs	r2, #1
 8008362:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008364:	4b03      	ldr	r3, [pc, #12]	; (8008374 <USER_SPI_initialize+0x1cc>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	b2db      	uxtb	r3, r3
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bd90      	pop	{r4, r7, pc}
 8008372:	bf00      	nop
 8008374:	20000044 	.word	0x20000044
 8008378:	20000798 	.word	0x20000798
 800837c:	20000f08 	.word	0x20000f08

08008380 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <USER_SPI_status+0x14>
 8008390:	2301      	movs	r3, #1
 8008392:	e002      	b.n	800839a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008394:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <USER_SPI_status+0x28>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	b2db      	uxtb	r3, r3
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000044 	.word	0x20000044

080083ac <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <USER_SPI_read+0x1c>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <USER_SPI_read+0x20>
 80083c8:	2304      	movs	r3, #4
 80083ca:	e04d      	b.n	8008468 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80083cc:	4b28      	ldr	r3, [pc, #160]	; (8008470 <USER_SPI_read+0xc4>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <USER_SPI_read+0x32>
 80083da:	2303      	movs	r3, #3
 80083dc:	e044      	b.n	8008468 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80083de:	4b25      	ldr	r3, [pc, #148]	; (8008474 <USER_SPI_read+0xc8>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <USER_SPI_read+0x44>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	025b      	lsls	r3, r3, #9
 80083ee:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d111      	bne.n	800841a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	2011      	movs	r0, #17
 80083fa:	f7ff fe65 	bl	80080c8 <send_cmd>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d129      	bne.n	8008458 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008408:	68b8      	ldr	r0, [r7, #8]
 800840a:	f7ff fe02 	bl	8008012 <rcvr_datablock>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d021      	beq.n	8008458 <USER_SPI_read+0xac>
			count = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	e01e      	b.n	8008458 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	2012      	movs	r0, #18
 800841e:	f7ff fe53 	bl	80080c8 <send_cmd>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d117      	bne.n	8008458 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800842c:	68b8      	ldr	r0, [r7, #8]
 800842e:	f7ff fdf0 	bl	8008012 <rcvr_datablock>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00a      	beq.n	800844e <USER_SPI_read+0xa2>
				buff += 512;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800843e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	3b01      	subs	r3, #1
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1ed      	bne.n	8008428 <USER_SPI_read+0x7c>
 800844c:	e000      	b.n	8008450 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800844e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008450:	2100      	movs	r1, #0
 8008452:	200c      	movs	r0, #12
 8008454:	f7ff fe38 	bl	80080c8 <send_cmd>
		}
	}
	despiselect();
 8008458:	f7ff fdb5 	bl	8007fc6 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bf14      	ite	ne
 8008462:	2301      	movne	r3, #1
 8008464:	2300      	moveq	r3, #0
 8008466:	b2db      	uxtb	r3, r3
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20000044 	.word	0x20000044
 8008474:	20000f08 	.word	0x20000f08

08008478 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <USER_SPI_write+0x1c>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <USER_SPI_write+0x20>
 8008494:	2304      	movs	r3, #4
 8008496:	e063      	b.n	8008560 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008498:	4b33      	ldr	r3, [pc, #204]	; (8008568 <USER_SPI_write+0xf0>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <USER_SPI_write+0x32>
 80084a6:	2303      	movs	r3, #3
 80084a8:	e05a      	b.n	8008560 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80084aa:	4b2f      	ldr	r3, [pc, #188]	; (8008568 <USER_SPI_write+0xf0>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <USER_SPI_write+0x44>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e051      	b.n	8008560 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80084bc:	4b2b      	ldr	r3, [pc, #172]	; (800856c <USER_SPI_write+0xf4>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <USER_SPI_write+0x56>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	025b      	lsls	r3, r3, #9
 80084cc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d110      	bne.n	80084f6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	2018      	movs	r0, #24
 80084d8:	f7ff fdf6 	bl	80080c8 <send_cmd>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d136      	bne.n	8008550 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80084e2:	21fe      	movs	r1, #254	; 0xfe
 80084e4:	68b8      	ldr	r0, [r7, #8]
 80084e6:	f7ff fdbd 	bl	8008064 <xmit_datablock>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d02f      	beq.n	8008550 <USER_SPI_write+0xd8>
			count = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	e02c      	b.n	8008550 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <USER_SPI_write+0xf4>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 0306 	and.w	r3, r3, #6
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <USER_SPI_write+0x92>
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	2097      	movs	r0, #151	; 0x97
 8008506:	f7ff fddf 	bl	80080c8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	2019      	movs	r0, #25
 800850e:	f7ff fddb 	bl	80080c8 <send_cmd>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11b      	bne.n	8008550 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008518:	21fc      	movs	r1, #252	; 0xfc
 800851a:	68b8      	ldr	r0, [r7, #8]
 800851c:	f7ff fda2 	bl	8008064 <xmit_datablock>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <USER_SPI_write+0xc4>
				buff += 512;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800852c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	3b01      	subs	r3, #1
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1ee      	bne.n	8008518 <USER_SPI_write+0xa0>
 800853a:	e000      	b.n	800853e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800853c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800853e:	21fd      	movs	r1, #253	; 0xfd
 8008540:	2000      	movs	r0, #0
 8008542:	f7ff fd8f 	bl	8008064 <xmit_datablock>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <USER_SPI_write+0xd8>
 800854c:	2301      	movs	r3, #1
 800854e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008550:	f7ff fd39 	bl	8007fc6 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	bf14      	ite	ne
 800855a:	2301      	movne	r3, #1
 800855c:	2300      	moveq	r3, #0
 800855e:	b2db      	uxtb	r3, r3
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20000044 	.word	0x20000044
 800856c:	20000f08 	.word	0x20000f08

08008570 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08c      	sub	sp, #48	; 0x30
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	603a      	str	r2, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
 800857c:	460b      	mov	r3, r1
 800857e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <USER_SPI_ioctl+0x1a>
 8008586:	2304      	movs	r3, #4
 8008588:	e15a      	b.n	8008840 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800858a:	4baf      	ldr	r3, [pc, #700]	; (8008848 <USER_SPI_ioctl+0x2d8>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USER_SPI_ioctl+0x2c>
 8008598:	2303      	movs	r3, #3
 800859a:	e151      	b.n	8008840 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80085a2:	79bb      	ldrb	r3, [r7, #6]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	f200 8136 	bhi.w	8008816 <USER_SPI_ioctl+0x2a6>
 80085aa:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <USER_SPI_ioctl+0x40>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	080085c5 	.word	0x080085c5
 80085b4:	080085d9 	.word	0x080085d9
 80085b8:	08008817 	.word	0x08008817
 80085bc:	08008685 	.word	0x08008685
 80085c0:	0800877b 	.word	0x0800877b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80085c4:	f7ff fd0c 	bl	8007fe0 <spiselect>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 8127 	beq.w	800881e <USER_SPI_ioctl+0x2ae>
 80085d0:	2300      	movs	r3, #0
 80085d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80085d6:	e122      	b.n	800881e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80085d8:	2100      	movs	r1, #0
 80085da:	2009      	movs	r0, #9
 80085dc:	f7ff fd74 	bl	80080c8 <send_cmd>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 811d 	bne.w	8008822 <USER_SPI_ioctl+0x2b2>
 80085e8:	f107 030c 	add.w	r3, r7, #12
 80085ec:	2110      	movs	r1, #16
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fd0f 	bl	8008012 <rcvr_datablock>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8113 	beq.w	8008822 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80085fc:	7b3b      	ldrb	r3, [r7, #12]
 80085fe:	099b      	lsrs	r3, r3, #6
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b01      	cmp	r3, #1
 8008604:	d111      	bne.n	800862a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008606:	7d7b      	ldrb	r3, [r7, #21]
 8008608:	461a      	mov	r2, r3
 800860a:	7d3b      	ldrb	r3, [r7, #20]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	4413      	add	r3, r2
 8008610:	461a      	mov	r2, r3
 8008612:	7cfb      	ldrb	r3, [r7, #19]
 8008614:	041b      	lsls	r3, r3, #16
 8008616:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800861a:	4413      	add	r3, r2
 800861c:	3301      	adds	r3, #1
 800861e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	029a      	lsls	r2, r3, #10
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e028      	b.n	800867c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800862a:	7c7b      	ldrb	r3, [r7, #17]
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	b2da      	uxtb	r2, r3
 8008632:	7dbb      	ldrb	r3, [r7, #22]
 8008634:	09db      	lsrs	r3, r3, #7
 8008636:	b2db      	uxtb	r3, r3
 8008638:	4413      	add	r3, r2
 800863a:	b2da      	uxtb	r2, r3
 800863c:	7d7b      	ldrb	r3, [r7, #21]
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f003 0306 	and.w	r3, r3, #6
 8008646:	b2db      	uxtb	r3, r3
 8008648:	4413      	add	r3, r2
 800864a:	b2db      	uxtb	r3, r3
 800864c:	3302      	adds	r3, #2
 800864e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008652:	7d3b      	ldrb	r3, [r7, #20]
 8008654:	099b      	lsrs	r3, r3, #6
 8008656:	b2db      	uxtb	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	7cfb      	ldrb	r3, [r7, #19]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	441a      	add	r2, r3
 8008660:	7cbb      	ldrb	r3, [r7, #18]
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008668:	4413      	add	r3, r2
 800866a:	3301      	adds	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800866e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008672:	3b09      	subs	r3, #9
 8008674:	69fa      	ldr	r2, [r7, #28]
 8008676:	409a      	lsls	r2, r3
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008682:	e0ce      	b.n	8008822 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008684:	4b71      	ldr	r3, [pc, #452]	; (800884c <USER_SPI_ioctl+0x2dc>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d031      	beq.n	80086f4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008690:	2100      	movs	r1, #0
 8008692:	208d      	movs	r0, #141	; 0x8d
 8008694:	f7ff fd18 	bl	80080c8 <send_cmd>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 80c3 	bne.w	8008826 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80086a0:	20ff      	movs	r0, #255	; 0xff
 80086a2:	f7ff fc27 	bl	8007ef4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80086a6:	f107 030c 	add.w	r3, r7, #12
 80086aa:	2110      	movs	r1, #16
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fcb0 	bl	8008012 <rcvr_datablock>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80b6 	beq.w	8008826 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80086ba:	2330      	movs	r3, #48	; 0x30
 80086bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80086c0:	e007      	b.n	80086d2 <USER_SPI_ioctl+0x162>
 80086c2:	20ff      	movs	r0, #255	; 0xff
 80086c4:	f7ff fc16 	bl	8007ef4 <xchg_spi>
 80086c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086cc:	3b01      	subs	r3, #1
 80086ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80086d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f3      	bne.n	80086c2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80086da:	7dbb      	ldrb	r3, [r7, #22]
 80086dc:	091b      	lsrs	r3, r3, #4
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	2310      	movs	r3, #16
 80086e4:	fa03 f202 	lsl.w	r2, r3, r2
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80086f2:	e098      	b.n	8008826 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80086f4:	2100      	movs	r1, #0
 80086f6:	2009      	movs	r0, #9
 80086f8:	f7ff fce6 	bl	80080c8 <send_cmd>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f040 8091 	bne.w	8008826 <USER_SPI_ioctl+0x2b6>
 8008704:	f107 030c 	add.w	r3, r7, #12
 8008708:	2110      	movs	r1, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fc81 	bl	8008012 <rcvr_datablock>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8087 	beq.w	8008826 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008718:	4b4c      	ldr	r3, [pc, #304]	; (800884c <USER_SPI_ioctl+0x2dc>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d012      	beq.n	800874a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008724:	7dbb      	ldrb	r3, [r7, #22]
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800872c:	7dfa      	ldrb	r2, [r7, #23]
 800872e:	09d2      	lsrs	r2, r2, #7
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	4413      	add	r3, r2
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	7e7b      	ldrb	r3, [r7, #25]
 8008738:	099b      	lsrs	r3, r3, #6
 800873a:	b2db      	uxtb	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	461a      	mov	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e013      	b.n	8008772 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800874a:	7dbb      	ldrb	r3, [r7, #22]
 800874c:	109b      	asrs	r3, r3, #2
 800874e:	b29b      	uxth	r3, r3
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	3301      	adds	r3, #1
 8008756:	7dfa      	ldrb	r2, [r7, #23]
 8008758:	00d2      	lsls	r2, r2, #3
 800875a:	f002 0218 	and.w	r2, r2, #24
 800875e:	7df9      	ldrb	r1, [r7, #23]
 8008760:	0949      	lsrs	r1, r1, #5
 8008762:	b2c9      	uxtb	r1, r1
 8008764:	440a      	add	r2, r1
 8008766:	3201      	adds	r2, #1
 8008768:	fb02 f303 	mul.w	r3, r2, r3
 800876c:	461a      	mov	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008778:	e055      	b.n	8008826 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800877a:	4b34      	ldr	r3, [pc, #208]	; (800884c <USER_SPI_ioctl+0x2dc>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	f003 0306 	and.w	r3, r3, #6
 8008782:	2b00      	cmp	r3, #0
 8008784:	d051      	beq.n	800882a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008786:	f107 020c 	add.w	r2, r7, #12
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	210b      	movs	r1, #11
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff feee 	bl	8008570 <USER_SPI_ioctl>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d149      	bne.n	800882e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800879a:	7b3b      	ldrb	r3, [r7, #12]
 800879c:	099b      	lsrs	r3, r3, #6
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <USER_SPI_ioctl+0x23e>
 80087a4:	7dbb      	ldrb	r3, [r7, #22]
 80087a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d041      	beq.n	8008832 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	623b      	str	r3, [r7, #32]
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80087be:	4b23      	ldr	r3, [pc, #140]	; (800884c <USER_SPI_ioctl+0x2dc>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d105      	bne.n	80087d6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	025b      	lsls	r3, r3, #9
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	025b      	lsls	r3, r3, #9
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80087d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087d8:	2020      	movs	r0, #32
 80087da:	f7ff fc75 	bl	80080c8 <send_cmd>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d128      	bne.n	8008836 <USER_SPI_ioctl+0x2c6>
 80087e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087e6:	2021      	movs	r0, #33	; 0x21
 80087e8:	f7ff fc6e 	bl	80080c8 <send_cmd>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d121      	bne.n	8008836 <USER_SPI_ioctl+0x2c6>
 80087f2:	2100      	movs	r1, #0
 80087f4:	2026      	movs	r0, #38	; 0x26
 80087f6:	f7ff fc67 	bl	80080c8 <send_cmd>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d11a      	bne.n	8008836 <USER_SPI_ioctl+0x2c6>
 8008800:	f247 5030 	movw	r0, #30000	; 0x7530
 8008804:	f7ff fbbc 	bl	8007f80 <wait_ready>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d013      	beq.n	8008836 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800880e:	2300      	movs	r3, #0
 8008810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008814:	e00f      	b.n	8008836 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008816:	2304      	movs	r3, #4
 8008818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800881c:	e00c      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		break;
 800881e:	bf00      	nop
 8008820:	e00a      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		break;
 8008822:	bf00      	nop
 8008824:	e008      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		break;
 8008826:	bf00      	nop
 8008828:	e006      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800882a:	bf00      	nop
 800882c:	e004      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800882e:	bf00      	nop
 8008830:	e002      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008832:	bf00      	nop
 8008834:	e000      	b.n	8008838 <USER_SPI_ioctl+0x2c8>
		break;
 8008836:	bf00      	nop
	}

	despiselect();
 8008838:	f7ff fbc5 	bl	8007fc6 <despiselect>

	return res;
 800883c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008840:	4618      	mov	r0, r3
 8008842:	3730      	adds	r7, #48	; 0x30
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000044 	.word	0x20000044
 800884c:	20000f08 	.word	0x20000f08

08008850 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	4a08      	ldr	r2, [pc, #32]	; (8008880 <disk_status+0x30>)
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	79fa      	ldrb	r2, [r7, #7]
 8008868:	4905      	ldr	r1, [pc, #20]	; (8008880 <disk_status+0x30>)
 800886a:	440a      	add	r2, r1
 800886c:	7a12      	ldrb	r2, [r2, #8]
 800886e:	4610      	mov	r0, r2
 8008870:	4798      	blx	r3
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000f3c 	.word	0x20000f3c

08008884 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <disk_initialize+0x48>)
 8008896:	5cd3      	ldrb	r3, [r2, r3]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d111      	bne.n	80088c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <disk_initialize+0x48>)
 80088a0:	2101      	movs	r1, #1
 80088a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <disk_initialize+0x48>)
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	4906      	ldr	r1, [pc, #24]	; (80088cc <disk_initialize+0x48>)
 80088b4:	440a      	add	r2, r1
 80088b6:	7a12      	ldrb	r2, [r2, #8]
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000f3c 	.word	0x20000f3c

080088d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4a0a      	ldr	r2, [pc, #40]	; (800890c <disk_read+0x3c>)
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	689c      	ldr	r4, [r3, #8]
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	4a07      	ldr	r2, [pc, #28]	; (800890c <disk_read+0x3c>)
 80088f0:	4413      	add	r3, r2
 80088f2:	7a18      	ldrb	r0, [r3, #8]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	47a0      	blx	r4
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
}
 8008902:	4618      	mov	r0, r3
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd90      	pop	{r4, r7, pc}
 800890a:	bf00      	nop
 800890c:	20000f3c 	.word	0x20000f3c

08008910 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008910:	b590      	push	{r4, r7, lr}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <disk_write+0x3c>)
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	68dc      	ldr	r4, [r3, #12]
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	4a07      	ldr	r2, [pc, #28]	; (800894c <disk_write+0x3c>)
 8008930:	4413      	add	r3, r2
 8008932:	7a18      	ldrb	r0, [r3, #8]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	47a0      	blx	r4
 800893c:	4603      	mov	r3, r0
 800893e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008940:	7dfb      	ldrb	r3, [r7, #23]
}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	bd90      	pop	{r4, r7, pc}
 800894a:	bf00      	nop
 800894c:	20000f3c 	.word	0x20000f3c

08008950 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	603a      	str	r2, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
 800895c:	460b      	mov	r3, r1
 800895e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	4a09      	ldr	r2, [pc, #36]	; (8008988 <disk_ioctl+0x38>)
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	79fa      	ldrb	r2, [r7, #7]
 800896e:	4906      	ldr	r1, [pc, #24]	; (8008988 <disk_ioctl+0x38>)
 8008970:	440a      	add	r2, r1
 8008972:	7a10      	ldrb	r0, [r2, #8]
 8008974:	79b9      	ldrb	r1, [r7, #6]
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4798      	blx	r3
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]
  return res;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000f3c 	.word	0x20000f3c

0800898c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3301      	adds	r3, #1
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800899c:	89fb      	ldrh	r3, [r7, #14]
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b21a      	sxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b21b      	sxth	r3, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80089ae:	89fb      	ldrh	r3, [r7, #14]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3303      	adds	r3, #3
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	3202      	adds	r2, #2
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	3201      	adds	r2, #1
 80089e2:	7812      	ldrb	r2, [r2, #0]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7812      	ldrb	r2, [r2, #0]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80089f4:	68fb      	ldr	r3, [r7, #12]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	887a      	ldrh	r2, [r7, #2]
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	887b      	ldrh	r3, [r7, #2]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	887a      	ldrh	r2, [r7, #2]
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	701a      	strb	r2, [r3, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	0a1b      	lsrs	r3, r3, #8
 8008a76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	701a      	strb	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00d      	beq.n	8008ac6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	1c53      	adds	r3, r2, #1
 8008aae:	613b      	str	r3, [r7, #16]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	1c59      	adds	r1, r3, #1
 8008ab4:	6179      	str	r1, [r7, #20]
 8008ab6:	7812      	ldrb	r2, [r2, #0]
 8008ab8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	607b      	str	r3, [r7, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f1      	bne.n	8008aaa <mem_cpy+0x1a>
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008ad2:	b480      	push	{r7}
 8008ad4:	b087      	sub	sp, #28
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	617a      	str	r2, [r7, #20]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	607b      	str	r3, [r7, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f3      	bne.n	8008ae2 <mem_set+0x10>
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008b08:	b480      	push	{r7}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	61fa      	str	r2, [r7, #28]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	61ba      	str	r2, [r7, #24]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	1acb      	subs	r3, r1, r3
 8008b34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	607b      	str	r3, [r7, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <mem_cmp+0x40>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0eb      	beq.n	8008b20 <mem_cmp+0x18>

	return r;
 8008b48:	697b      	ldr	r3, [r7, #20]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3724      	adds	r7, #36	; 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008b60:	e002      	b.n	8008b68 <chk_chr+0x12>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3301      	adds	r3, #1
 8008b66:	607b      	str	r3, [r7, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d005      	beq.n	8008b7c <chk_chr+0x26>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d1f2      	bne.n	8008b62 <chk_chr+0xc>
	return *str;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b96:	2300      	movs	r3, #0
 8008b98:	60bb      	str	r3, [r7, #8]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	e029      	b.n	8008bf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008ba0:	4a27      	ldr	r2, [pc, #156]	; (8008c40 <chk_lock+0xb4>)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	4413      	add	r3, r2
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01d      	beq.n	8008bea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008bae:	4a24      	ldr	r2, [pc, #144]	; (8008c40 <chk_lock+0xb4>)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	4413      	add	r3, r2
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d116      	bne.n	8008bee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008bc0:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <chk_lock+0xb4>)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3304      	adds	r3, #4
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d10c      	bne.n	8008bee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008bd4:	4a1a      	ldr	r2, [pc, #104]	; (8008c40 <chk_lock+0xb4>)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	4413      	add	r3, r2
 8008bdc:	3308      	adds	r3, #8
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d102      	bne.n	8008bee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008be8:	e007      	b.n	8008bfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008bea:	2301      	movs	r3, #1
 8008bec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d9d2      	bls.n	8008ba0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d109      	bne.n	8008c14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <chk_lock+0x80>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d101      	bne.n	8008c10 <chk_lock+0x84>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e010      	b.n	8008c32 <chk_lock+0xa6>
 8008c10:	2312      	movs	r3, #18
 8008c12:	e00e      	b.n	8008c32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d108      	bne.n	8008c2c <chk_lock+0xa0>
 8008c1a:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <chk_lock+0xb4>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	4413      	add	r3, r2
 8008c22:	330c      	adds	r3, #12
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c2a:	d101      	bne.n	8008c30 <chk_lock+0xa4>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	e000      	b.n	8008c32 <chk_lock+0xa6>
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20000f1c 	.word	0x20000f1c

08008c44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	607b      	str	r3, [r7, #4]
 8008c4e:	e002      	b.n	8008c56 <enq_lock+0x12>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3301      	adds	r3, #1
 8008c54:	607b      	str	r3, [r7, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d806      	bhi.n	8008c6a <enq_lock+0x26>
 8008c5c:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <enq_lock+0x40>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	4413      	add	r3, r2
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f2      	bne.n	8008c50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	bf14      	ite	ne
 8008c70:	2301      	movne	r3, #1
 8008c72:	2300      	moveq	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000f1c 	.word	0x20000f1c

08008c88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e01f      	b.n	8008cd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008c98:	4a41      	ldr	r2, [pc, #260]	; (8008da0 <inc_lock+0x118>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	4413      	add	r3, r2
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d113      	bne.n	8008cd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008caa:	4a3d      	ldr	r2, [pc, #244]	; (8008da0 <inc_lock+0x118>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	4413      	add	r3, r2
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d109      	bne.n	8008cd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008cbe:	4a38      	ldr	r2, [pc, #224]	; (8008da0 <inc_lock+0x118>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d006      	beq.n	8008ce0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d9dc      	bls.n	8008c98 <inc_lock+0x10>
 8008cde:	e000      	b.n	8008ce2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ce0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d132      	bne.n	8008d4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e002      	b.n	8008cf4 <inc_lock+0x6c>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d806      	bhi.n	8008d08 <inc_lock+0x80>
 8008cfa:	4a29      	ldr	r2, [pc, #164]	; (8008da0 <inc_lock+0x118>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	4413      	add	r3, r2
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f2      	bne.n	8008cee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d101      	bne.n	8008d12 <inc_lock+0x8a>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e040      	b.n	8008d94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	4922      	ldr	r1, [pc, #136]	; (8008da0 <inc_lock+0x118>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	440b      	add	r3, r1
 8008d1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	491e      	ldr	r1, [pc, #120]	; (8008da0 <inc_lock+0x118>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	440b      	add	r3, r1
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	491a      	ldr	r1, [pc, #104]	; (8008da0 <inc_lock+0x118>)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	011b      	lsls	r3, r3, #4
 8008d3a:	440b      	add	r3, r1
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008d40:	4a17      	ldr	r2, [pc, #92]	; (8008da0 <inc_lock+0x118>)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	4413      	add	r3, r2
 8008d48:	330c      	adds	r3, #12
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <inc_lock+0xe0>
 8008d54:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <inc_lock+0x118>)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	4413      	add	r3, r2
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <inc_lock+0xe0>
 8008d64:	2300      	movs	r3, #0
 8008d66:	e015      	b.n	8008d94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d108      	bne.n	8008d80 <inc_lock+0xf8>
 8008d6e:	4a0c      	ldr	r2, [pc, #48]	; (8008da0 <inc_lock+0x118>)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	4413      	add	r3, r2
 8008d76:	330c      	adds	r3, #12
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	e001      	b.n	8008d84 <inc_lock+0xfc>
 8008d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d84:	4906      	ldr	r1, [pc, #24]	; (8008da0 <inc_lock+0x118>)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	440b      	add	r3, r1
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3301      	adds	r3, #1
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000f1c 	.word	0x20000f1c

08008da4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d825      	bhi.n	8008e04 <dec_lock+0x60>
		n = Files[i].ctr;
 8008db8:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <dec_lock+0x74>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	4413      	add	r3, r2
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008dc6:	89fb      	ldrh	r3, [r7, #14]
 8008dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dcc:	d101      	bne.n	8008dd2 <dec_lock+0x2e>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008dd2:	89fb      	ldrh	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <dec_lock+0x3a>
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008dde:	4a0e      	ldr	r2, [pc, #56]	; (8008e18 <dec_lock+0x74>)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	4413      	add	r3, r2
 8008de6:	330c      	adds	r3, #12
 8008de8:	89fa      	ldrh	r2, [r7, #14]
 8008dea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008dec:	89fb      	ldrh	r3, [r7, #14]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <dec_lock+0x5a>
 8008df2:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <dec_lock+0x74>)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	4413      	add	r3, r2
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	737b      	strb	r3, [r7, #13]
 8008e02:	e001      	b.n	8008e08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e04:	2302      	movs	r3, #2
 8008e06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008e08:	7b7b      	ldrb	r3, [r7, #13]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000f1c 	.word	0x20000f1c

08008e1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	e010      	b.n	8008e4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e2a:	4a0d      	ldr	r2, [pc, #52]	; (8008e60 <clear_lock+0x44>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	4413      	add	r3, r2
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d105      	bne.n	8008e46 <clear_lock+0x2a>
 8008e3a:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <clear_lock+0x44>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	4413      	add	r3, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d9eb      	bls.n	8008e2a <clear_lock+0xe>
	}
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20000f1c 	.word	0x20000f1c

08008e64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	78db      	ldrb	r3, [r3, #3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d034      	beq.n	8008ee2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7858      	ldrb	r0, [r3, #1]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e88:	2301      	movs	r3, #1
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	f7ff fd40 	bl	8008910 <disk_write>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	73fb      	strb	r3, [r7, #15]
 8008e9a:	e022      	b.n	8008ee2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d217      	bcs.n	8008ee2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	789b      	ldrb	r3, [r3, #2]
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	e010      	b.n	8008edc <sync_window+0x78>
					wsect += fs->fsize;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7858      	ldrb	r0, [r3, #1]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ece:	2301      	movs	r3, #1
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	f7ff fd1d 	bl	8008910 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d8eb      	bhi.n	8008eba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d01b      	beq.n	8008f3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff ffad 	bl	8008e64 <sync_window>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d113      	bne.n	8008f3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7858      	ldrb	r0, [r3, #1]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f1e:	2301      	movs	r3, #1
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	f7ff fcd5 	bl	80088d0 <disk_read>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff ff87 	bl	8008e64 <sync_window>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d158      	bne.n	8009012 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d148      	bne.n	8008ffa <sync_fs+0xb2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	791b      	ldrb	r3, [r3, #4]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d144      	bne.n	8008ffa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3330      	adds	r3, #48	; 0x30
 8008f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fda9 	bl	8008ad2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3330      	adds	r3, #48	; 0x30
 8008f84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f88:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fd38 	bl	8008a02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3330      	adds	r3, #48	; 0x30
 8008f96:	4921      	ldr	r1, [pc, #132]	; (800901c <sync_fs+0xd4>)
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff fd4d 	bl	8008a38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3330      	adds	r3, #48	; 0x30
 8008fa2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008fa6:	491e      	ldr	r1, [pc, #120]	; (8009020 <sync_fs+0xd8>)
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fd45 	bl	8008a38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3330      	adds	r3, #48	; 0x30
 8008fb2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f7ff fd3b 	bl	8008a38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3330      	adds	r3, #48	; 0x30
 8008fc6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7ff fd31 	bl	8008a38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7858      	ldrb	r0, [r3, #1]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f7ff fc8e 	bl	8008910 <disk_write>
			fs->fsi_flag = 0;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2100      	movs	r1, #0
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff fca4 	bl	8008950 <disk_ioctl>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <sync_fs+0xca>
 800900e:	2301      	movs	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	41615252 	.word	0x41615252
 8009020:	61417272 	.word	0x61417272

08009024 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	3b02      	subs	r3, #2
 8009032:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	3b02      	subs	r3, #2
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d301      	bcc.n	8009044 <clust2sect+0x20>
 8009040:	2300      	movs	r3, #0
 8009042:	e008      	b.n	8009056 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	895b      	ldrh	r3, [r3, #10]
 8009048:	461a      	mov	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	fb03 f202 	mul.w	r2, r3, r2
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	4413      	add	r3, r2
}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d904      	bls.n	8009082 <get_fat+0x20>
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d302      	bcc.n	8009088 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009082:	2301      	movs	r3, #1
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	e08f      	b.n	80091a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009088:	f04f 33ff 	mov.w	r3, #4294967295
 800908c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b03      	cmp	r3, #3
 8009094:	d062      	beq.n	800915c <get_fat+0xfa>
 8009096:	2b03      	cmp	r3, #3
 8009098:	dc7c      	bgt.n	8009194 <get_fat+0x132>
 800909a:	2b01      	cmp	r3, #1
 800909c:	d002      	beq.n	80090a4 <get_fat+0x42>
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d042      	beq.n	8009128 <get_fat+0xc6>
 80090a2:	e077      	b.n	8009194 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6a1a      	ldr	r2, [r3, #32]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	0a5b      	lsrs	r3, r3, #9
 80090ba:	4413      	add	r3, r2
 80090bc:	4619      	mov	r1, r3
 80090be:	6938      	ldr	r0, [r7, #16]
 80090c0:	f7ff ff14 	bl	8008eec <move_window>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d167      	bne.n	800919a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	60fa      	str	r2, [r7, #12]
 80090d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4413      	add	r3, r2
 80090d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6a1a      	ldr	r2, [r3, #32]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	0a5b      	lsrs	r3, r3, #9
 80090e6:	4413      	add	r3, r2
 80090e8:	4619      	mov	r1, r3
 80090ea:	6938      	ldr	r0, [r7, #16]
 80090ec:	f7ff fefe 	bl	8008eec <move_window>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d153      	bne.n	800919e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4413      	add	r3, r2
 8009100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009104:	021b      	lsls	r3, r3, #8
 8009106:	461a      	mov	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4313      	orrs	r3, r2
 800910c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <get_fat+0xbc>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	e002      	b.n	8009124 <get_fat+0xc2>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009124:	617b      	str	r3, [r7, #20]
			break;
 8009126:	e03f      	b.n	80091a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6a1a      	ldr	r2, [r3, #32]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	0a1b      	lsrs	r3, r3, #8
 8009130:	4413      	add	r3, r2
 8009132:	4619      	mov	r1, r3
 8009134:	6938      	ldr	r0, [r7, #16]
 8009136:	f7ff fed9 	bl	8008eec <move_window>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d130      	bne.n	80091a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800914e:	4413      	add	r3, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff fc1b 	bl	800898c <ld_word>
 8009156:	4603      	mov	r3, r0
 8009158:	617b      	str	r3, [r7, #20]
			break;
 800915a:	e025      	b.n	80091a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	6a1a      	ldr	r2, [r3, #32]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	09db      	lsrs	r3, r3, #7
 8009164:	4413      	add	r3, r2
 8009166:	4619      	mov	r1, r3
 8009168:	6938      	ldr	r0, [r7, #16]
 800916a:	f7ff febf 	bl	8008eec <move_window>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d118      	bne.n	80091a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009182:	4413      	add	r3, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff fc19 	bl	80089bc <ld_dword>
 800918a:	4603      	mov	r3, r0
 800918c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009190:	617b      	str	r3, [r7, #20]
			break;
 8009192:	e009      	b.n	80091a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009194:	2301      	movs	r3, #1
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e006      	b.n	80091a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800919a:	bf00      	nop
 800919c:	e004      	b.n	80091a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800919e:	bf00      	nop
 80091a0:	e002      	b.n	80091a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091a2:	bf00      	nop
 80091a4:	e000      	b.n	80091a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091a6:	bf00      	nop
		}
	}

	return val;
 80091a8:	697b      	ldr	r3, [r7, #20]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80091b2:	b590      	push	{r4, r7, lr}
 80091b4:	b089      	sub	sp, #36	; 0x24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80091be:	2302      	movs	r3, #2
 80091c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	f240 80d9 	bls.w	800937c <put_fat+0x1ca>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	f080 80d3 	bcs.w	800937c <put_fat+0x1ca>
		switch (fs->fs_type) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b03      	cmp	r3, #3
 80091dc:	f000 8096 	beq.w	800930c <put_fat+0x15a>
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	f300 80cb 	bgt.w	800937c <put_fat+0x1ca>
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d002      	beq.n	80091f0 <put_fat+0x3e>
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d06e      	beq.n	80092cc <put_fat+0x11a>
 80091ee:	e0c5      	b.n	800937c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	61bb      	str	r3, [r7, #24]
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	085b      	lsrs	r3, r3, #1
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4413      	add	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a1a      	ldr	r2, [r3, #32]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	0a5b      	lsrs	r3, r3, #9
 8009206:	4413      	add	r3, r2
 8009208:	4619      	mov	r1, r3
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7ff fe6e 	bl	8008eec <move_window>
 8009210:	4603      	mov	r3, r0
 8009212:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009214:	7ffb      	ldrb	r3, [r7, #31]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 80a9 	bne.w	800936e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	1c59      	adds	r1, r3, #1
 8009226:	61b9      	str	r1, [r7, #24]
 8009228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922c:	4413      	add	r3, r2
 800922e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <put_fat+0xa4>
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b25b      	sxtb	r3, r3
 8009240:	f003 030f 	and.w	r3, r3, #15
 8009244:	b25a      	sxtb	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	b25b      	sxtb	r3, r3
 800924e:	4313      	orrs	r3, r2
 8009250:	b25b      	sxtb	r3, r3
 8009252:	b2db      	uxtb	r3, r3
 8009254:	e001      	b.n	800925a <put_fat+0xa8>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6a1a      	ldr	r2, [r3, #32]
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	0a5b      	lsrs	r3, r3, #9
 800926c:	4413      	add	r3, r2
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff fe3b 	bl	8008eec <move_window>
 8009276:	4603      	mov	r3, r0
 8009278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800927a:	7ffb      	ldrb	r3, [r7, #31]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d178      	bne.n	8009372 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928c:	4413      	add	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <put_fat+0xf0>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	091b      	lsrs	r3, r3, #4
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	e00e      	b.n	80092c0 <put_fat+0x10e>
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	b25b      	sxtb	r3, r3
 80092a8:	f023 030f 	bic.w	r3, r3, #15
 80092ac:	b25a      	sxtb	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	0a1b      	lsrs	r3, r3, #8
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	b25b      	sxtb	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b25b      	sxtb	r3, r3
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	70da      	strb	r2, [r3, #3]
			break;
 80092ca:	e057      	b.n	800937c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a1a      	ldr	r2, [r3, #32]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	4413      	add	r3, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7ff fe07 	bl	8008eec <move_window>
 80092de:	4603      	mov	r3, r0
 80092e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092e2:	7ffb      	ldrb	r3, [r7, #31]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d146      	bne.n	8009376 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80092f6:	4413      	add	r3, r2
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	b292      	uxth	r2, r2
 80092fc:	4611      	mov	r1, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fb7f 	bl	8008a02 <st_word>
			fs->wflag = 1;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2201      	movs	r2, #1
 8009308:	70da      	strb	r2, [r3, #3]
			break;
 800930a:	e037      	b.n	800937c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1a      	ldr	r2, [r3, #32]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	09db      	lsrs	r3, r3, #7
 8009314:	4413      	add	r3, r2
 8009316:	4619      	mov	r1, r3
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff fde7 	bl	8008eec <move_window>
 800931e:	4603      	mov	r3, r0
 8009320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009322:	7ffb      	ldrb	r3, [r7, #31]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d128      	bne.n	800937a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800933c:	4413      	add	r3, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fb3c 	bl	80089bc <ld_dword>
 8009344:	4603      	mov	r3, r0
 8009346:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800934a:	4323      	orrs	r3, r4
 800934c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800935c:	4413      	add	r3, r2
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fb69 	bl	8008a38 <st_dword>
			fs->wflag = 1;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	70da      	strb	r2, [r3, #3]
			break;
 800936c:	e006      	b.n	800937c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800936e:	bf00      	nop
 8009370:	e004      	b.n	800937c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009372:	bf00      	nop
 8009374:	e002      	b.n	800937c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009376:	bf00      	nop
 8009378:	e000      	b.n	800937c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800937a:	bf00      	nop
		}
	}
	return res;
 800937c:	7ffb      	ldrb	r3, [r7, #31]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3724      	adds	r7, #36	; 0x24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd90      	pop	{r4, r7, pc}

08009386 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b088      	sub	sp, #32
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d904      	bls.n	80093ac <remove_chain+0x26>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d301      	bcc.n	80093b0 <remove_chain+0x2a>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e04b      	b.n	8009448 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00c      	beq.n	80093d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80093b6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	69b8      	ldr	r0, [r7, #24]
 80093be:	f7ff fef8 	bl	80091b2 <put_fat>
 80093c2:	4603      	mov	r3, r0
 80093c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80093c6:	7ffb      	ldrb	r3, [r7, #31]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <remove_chain+0x4a>
 80093cc:	7ffb      	ldrb	r3, [r7, #31]
 80093ce:	e03b      	b.n	8009448 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff fe45 	bl	8009062 <get_fat>
 80093d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d031      	beq.n	8009444 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <remove_chain+0x64>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e02e      	b.n	8009448 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d101      	bne.n	80093f6 <remove_chain+0x70>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e028      	b.n	8009448 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80093f6:	2200      	movs	r2, #0
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	69b8      	ldr	r0, [r7, #24]
 80093fc:	f7ff fed9 	bl	80091b2 <put_fat>
 8009400:	4603      	mov	r3, r0
 8009402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009404:	7ffb      	ldrb	r3, [r7, #31]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <remove_chain+0x88>
 800940a:	7ffb      	ldrb	r3, [r7, #31]
 800940c:	e01c      	b.n	8009448 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	691a      	ldr	r2, [r3, #16]
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	3b02      	subs	r3, #2
 8009418:	429a      	cmp	r2, r3
 800941a:	d20b      	bcs.n	8009434 <remove_chain+0xae>
			fs->free_clst++;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	791b      	ldrb	r3, [r3, #4]
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	b2da      	uxtb	r2, r3
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	429a      	cmp	r2, r3
 8009440:	d3c6      	bcc.n	80093d0 <remove_chain+0x4a>
 8009442:	e000      	b.n	8009446 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009444:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3720      	adds	r7, #32
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10d      	bne.n	8009482 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <create_chain+0x2c>
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	429a      	cmp	r2, r3
 800947a:	d31b      	bcc.n	80094b4 <create_chain+0x64>
 800947c:	2301      	movs	r3, #1
 800947e:	61bb      	str	r3, [r7, #24]
 8009480:	e018      	b.n	80094b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff fdec 	bl	8009062 <get_fat>
 800948a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d801      	bhi.n	8009496 <create_chain+0x46>
 8009492:	2301      	movs	r3, #1
 8009494:	e070      	b.n	8009578 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949c:	d101      	bne.n	80094a2 <create_chain+0x52>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	e06a      	b.n	8009578 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d201      	bcs.n	80094b0 <create_chain+0x60>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	e063      	b.n	8009578 <create_chain+0x128>
		scl = clst;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	3301      	adds	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d307      	bcc.n	80094d8 <create_chain+0x88>
				ncl = 2;
 80094c8:	2302      	movs	r3, #2
 80094ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d901      	bls.n	80094d8 <create_chain+0x88>
 80094d4:	2300      	movs	r3, #0
 80094d6:	e04f      	b.n	8009578 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80094d8:	69f9      	ldr	r1, [r7, #28]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fdc1 	bl	8009062 <get_fat>
 80094e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00e      	beq.n	8009506 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d003      	beq.n	80094f6 <create_chain+0xa6>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f4:	d101      	bne.n	80094fa <create_chain+0xaa>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	e03e      	b.n	8009578 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d1da      	bne.n	80094b8 <create_chain+0x68>
 8009502:	2300      	movs	r3, #0
 8009504:	e038      	b.n	8009578 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009506:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	69f9      	ldr	r1, [r7, #28]
 800950e:	6938      	ldr	r0, [r7, #16]
 8009510:	f7ff fe4f 	bl	80091b2 <put_fat>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <create_chain+0xe2>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6938      	ldr	r0, [r7, #16]
 800952a:	f7ff fe42 	bl	80091b2 <put_fat>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d116      	bne.n	8009566 <create_chain+0x116>
		fs->last_clst = ncl;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	691a      	ldr	r2, [r3, #16]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	3b02      	subs	r3, #2
 8009548:	429a      	cmp	r2, r3
 800954a:	d804      	bhi.n	8009556 <create_chain+0x106>
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	1e5a      	subs	r2, r3, #1
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	791b      	ldrb	r3, [r3, #4]
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	711a      	strb	r2, [r3, #4]
 8009564:	e007      	b.n	8009576 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d102      	bne.n	8009572 <create_chain+0x122>
 800956c:	f04f 33ff 	mov.w	r3, #4294967295
 8009570:	e000      	b.n	8009574 <create_chain+0x124>
 8009572:	2301      	movs	r3, #1
 8009574:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009576:	69fb      	ldr	r3, [r7, #28]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009596:	d204      	bcs.n	80095a2 <dir_sdi+0x22>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80095a2:	2302      	movs	r3, #2
 80095a4:	e063      	b.n	800966e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <dir_sdi+0x46>
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d902      	bls.n	80095c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10c      	bne.n	80095e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	095b      	lsrs	r3, r3, #5
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	8912      	ldrh	r2, [r2, #8]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d301      	bcc.n	80095dc <dir_sdi+0x5c>
 80095d8:	2302      	movs	r3, #2
 80095da:	e048      	b.n	800966e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	61da      	str	r2, [r3, #28]
 80095e4:	e029      	b.n	800963a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	895b      	ldrh	r3, [r3, #10]
 80095ea:	025b      	lsls	r3, r3, #9
 80095ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095ee:	e019      	b.n	8009624 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6979      	ldr	r1, [r7, #20]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fd34 	bl	8009062 <get_fat>
 80095fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009602:	d101      	bne.n	8009608 <dir_sdi+0x88>
 8009604:	2301      	movs	r3, #1
 8009606:	e032      	b.n	800966e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d904      	bls.n	8009618 <dir_sdi+0x98>
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	429a      	cmp	r2, r3
 8009616:	d301      	bcc.n	800961c <dir_sdi+0x9c>
 8009618:	2302      	movs	r3, #2
 800961a:	e028      	b.n	800966e <dir_sdi+0xee>
			ofs -= csz;
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	429a      	cmp	r2, r3
 800962a:	d2e1      	bcs.n	80095f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800962c:	6979      	ldr	r1, [r7, #20]
 800962e:	6938      	ldr	r0, [r7, #16]
 8009630:	f7ff fcf8 	bl	8009024 <clust2sect>
 8009634:	4602      	mov	r2, r0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <dir_sdi+0xcc>
 8009648:	2302      	movs	r3, #2
 800964a:	e010      	b.n	800966e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	0a5b      	lsrs	r3, r3, #9
 8009654:	441a      	add	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	441a      	add	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b086      	sub	sp, #24
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	3320      	adds	r3, #32
 800968c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <dir_next+0x28>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800969c:	d301      	bcc.n	80096a2 <dir_next+0x2c>
 800969e:	2304      	movs	r3, #4
 80096a0:	e0aa      	b.n	80097f8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 8098 	bne.w	80097de <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10b      	bne.n	80096d8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	8912      	ldrh	r2, [r2, #8]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	f0c0 8088 	bcc.w	80097de <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	61da      	str	r2, [r3, #28]
 80096d4:	2304      	movs	r3, #4
 80096d6:	e08f      	b.n	80097f8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	0a5b      	lsrs	r3, r3, #9
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	8952      	ldrh	r2, [r2, #10]
 80096e0:	3a01      	subs	r2, #1
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d17a      	bne.n	80097de <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	4619      	mov	r1, r3
 80096f0:	4610      	mov	r0, r2
 80096f2:	f7ff fcb6 	bl	8009062 <get_fat>
 80096f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d801      	bhi.n	8009702 <dir_next+0x8c>
 80096fe:	2302      	movs	r3, #2
 8009700:	e07a      	b.n	80097f8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d101      	bne.n	800970e <dir_next+0x98>
 800970a:	2301      	movs	r3, #1
 800970c:	e074      	b.n	80097f8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	429a      	cmp	r2, r3
 8009716:	d358      	bcc.n	80097ca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	61da      	str	r2, [r3, #28]
 8009724:	2304      	movs	r3, #4
 8009726:	e067      	b.n	80097f8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7ff fe8d 	bl	8009450 <create_chain>
 8009736:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <dir_next+0xcc>
 800973e:	2307      	movs	r3, #7
 8009740:	e05a      	b.n	80097f8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <dir_next+0xd6>
 8009748:	2302      	movs	r3, #2
 800974a:	e055      	b.n	80097f8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d101      	bne.n	8009758 <dir_next+0xe2>
 8009754:	2301      	movs	r3, #1
 8009756:	e04f      	b.n	80097f8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fb83 	bl	8008e64 <sync_window>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <dir_next+0xf2>
 8009764:	2301      	movs	r3, #1
 8009766:	e047      	b.n	80097f8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3330      	adds	r3, #48	; 0x30
 800976c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff f9ad 	bl	8008ad2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009778:	2300      	movs	r3, #0
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	6979      	ldr	r1, [r7, #20]
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff fc50 	bl	8009024 <clust2sect>
 8009784:	4602      	mov	r2, r0
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	62da      	str	r2, [r3, #44]	; 0x2c
 800978a:	e012      	b.n	80097b2 <dir_next+0x13c>
						fs->wflag = 1;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fb66 	bl	8008e64 <sync_window>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <dir_next+0x12c>
 800979e:	2301      	movs	r3, #1
 80097a0:	e02a      	b.n	80097f8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3301      	adds	r3, #1
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	895b      	ldrh	r3, [r3, #10]
 80097b6:	461a      	mov	r2, r3
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d3e6      	bcc.n	800978c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	1ad2      	subs	r2, r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80097d0:	6979      	ldr	r1, [r7, #20]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7ff fc26 	bl	8009024 <clust2sect>
 80097d8:	4602      	mov	r2, r0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f0:	441a      	add	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff feb4 	bl	8009580 <dir_sdi>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d12b      	bne.n	800987a <dir_alloc+0x7a>
		n = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	4619      	mov	r1, r3
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fb5d 	bl	8008eec <move_window>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11d      	bne.n	8009878 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2be5      	cmp	r3, #229	; 0xe5
 8009844:	d004      	beq.n	8009850 <dir_alloc+0x50>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d107      	bne.n	8009860 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	3301      	adds	r3, #1
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	429a      	cmp	r2, r3
 800985c:	d102      	bne.n	8009864 <dir_alloc+0x64>
 800985e:	e00c      	b.n	800987a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009860:	2300      	movs	r3, #0
 8009862:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009864:	2101      	movs	r1, #1
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff ff05 	bl	8009676 <dir_next>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0d7      	beq.n	8009826 <dir_alloc+0x26>
 8009876:	e000      	b.n	800987a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009878:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800987a:	7dfb      	ldrb	r3, [r7, #23]
 800987c:	2b04      	cmp	r3, #4
 800987e:	d101      	bne.n	8009884 <dir_alloc+0x84>
 8009880:	2307      	movs	r3, #7
 8009882:	75fb      	strb	r3, [r7, #23]
	return res;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	331a      	adds	r3, #26
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff f875 	bl	800898c <ld_word>
 80098a2:	4603      	mov	r3, r0
 80098a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d109      	bne.n	80098c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff f86a 	bl	800898c <ld_word>
 80098b8:	4603      	mov	r3, r0
 80098ba:	041b      	lsls	r3, r3, #16
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80098c2:	68fb      	ldr	r3, [r7, #12]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	331a      	adds	r3, #26
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	b292      	uxth	r2, r2
 80098e0:	4611      	mov	r1, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff f88d 	bl	8008a02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d109      	bne.n	8009904 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f103 0214 	add.w	r2, r3, #20
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7ff f87f 	bl	8008a02 <st_word>
	}
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800991a:	2100      	movs	r1, #0
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff fe2f 	bl	8009580 <dir_sdi>
 8009922:	4603      	mov	r3, r0
 8009924:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <dir_find+0x24>
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	e03e      	b.n	80099ae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	4619      	mov	r1, r3
 8009936:	6938      	ldr	r0, [r7, #16]
 8009938:	f7ff fad8 	bl	8008eec <move_window>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d12f      	bne.n	80099a6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <dir_find+0x4e>
 8009954:	2304      	movs	r3, #4
 8009956:	75fb      	strb	r3, [r7, #23]
 8009958:	e028      	b.n	80099ac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	330b      	adds	r3, #11
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009966:	b2da      	uxtb	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	330b      	adds	r3, #11
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	f003 0308 	and.w	r3, r3, #8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <dir_find+0x86>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a18      	ldr	r0, [r3, #32]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3324      	adds	r3, #36	; 0x24
 8009984:	220b      	movs	r2, #11
 8009986:	4619      	mov	r1, r3
 8009988:	f7ff f8be 	bl	8008b08 <mem_cmp>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff fe6e 	bl	8009676 <dir_next>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0c5      	beq.n	8009930 <dir_find+0x24>
 80099a4:	e002      	b.n	80099ac <dir_find+0xa0>
		if (res != FR_OK) break;
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80099aa:	bf00      	nop

	return res;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80099c4:	2101      	movs	r1, #1
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff ff1a 	bl	8009800 <dir_alloc>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d11c      	bne.n	8009a10 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	4619      	mov	r1, r3
 80099dc:	68b8      	ldr	r0, [r7, #8]
 80099de:	f7ff fa85 	bl	8008eec <move_window>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d111      	bne.n	8009a10 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	2220      	movs	r2, #32
 80099f2:	2100      	movs	r1, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff f86c 	bl	8008ad2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a18      	ldr	r0, [r3, #32]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3324      	adds	r3, #36	; 0x24
 8009a02:	220b      	movs	r2, #11
 8009a04:	4619      	mov	r1, r3
 8009a06:	f7ff f843 	bl	8008a90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3324      	adds	r3, #36	; 0x24
 8009a30:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009a32:	220b      	movs	r2, #11
 8009a34:	2120      	movs	r1, #32
 8009a36:	68b8      	ldr	r0, [r7, #8]
 8009a38:	f7ff f84b 	bl	8008ad2 <mem_set>
	si = i = 0; ni = 8;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	613b      	str	r3, [r7, #16]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	2308      	movs	r3, #8
 8009a46:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	61fa      	str	r2, [r7, #28]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a56:	7efb      	ldrb	r3, [r7, #27]
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d94e      	bls.n	8009afa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009a5c:	7efb      	ldrb	r3, [r7, #27]
 8009a5e:	2b2f      	cmp	r3, #47	; 0x2f
 8009a60:	d006      	beq.n	8009a70 <create_name+0x54>
 8009a62:	7efb      	ldrb	r3, [r7, #27]
 8009a64:	2b5c      	cmp	r3, #92	; 0x5c
 8009a66:	d110      	bne.n	8009a8a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009a68:	e002      	b.n	8009a70 <create_name+0x54>
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b2f      	cmp	r3, #47	; 0x2f
 8009a7a:	d0f6      	beq.n	8009a6a <create_name+0x4e>
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b5c      	cmp	r3, #92	; 0x5c
 8009a86:	d0f0      	beq.n	8009a6a <create_name+0x4e>
			break;
 8009a88:	e038      	b.n	8009afc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009a8a:	7efb      	ldrb	r3, [r7, #27]
 8009a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a8e:	d003      	beq.n	8009a98 <create_name+0x7c>
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d30c      	bcc.n	8009ab2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	2b0b      	cmp	r3, #11
 8009a9c:	d002      	beq.n	8009aa4 <create_name+0x88>
 8009a9e:	7efb      	ldrb	r3, [r7, #27]
 8009aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009aa2:	d001      	beq.n	8009aa8 <create_name+0x8c>
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	e044      	b.n	8009b32 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	230b      	movs	r3, #11
 8009aae:	617b      	str	r3, [r7, #20]
			continue;
 8009ab0:	e022      	b.n	8009af8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009ab2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	da04      	bge.n	8009ac4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009aba:	7efb      	ldrb	r3, [r7, #27]
 8009abc:	3b80      	subs	r3, #128	; 0x80
 8009abe:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <create_name+0x120>)
 8009ac0:	5cd3      	ldrb	r3, [r2, r3]
 8009ac2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009ac4:	7efb      	ldrb	r3, [r7, #27]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	481d      	ldr	r0, [pc, #116]	; (8009b40 <create_name+0x124>)
 8009aca:	f7ff f844 	bl	8008b56 <chk_chr>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <create_name+0xbc>
 8009ad4:	2306      	movs	r3, #6
 8009ad6:	e02c      	b.n	8009b32 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009ad8:	7efb      	ldrb	r3, [r7, #27]
 8009ada:	2b60      	cmp	r3, #96	; 0x60
 8009adc:	d905      	bls.n	8009aea <create_name+0xce>
 8009ade:	7efb      	ldrb	r3, [r7, #27]
 8009ae0:	2b7a      	cmp	r3, #122	; 0x7a
 8009ae2:	d802      	bhi.n	8009aea <create_name+0xce>
 8009ae4:	7efb      	ldrb	r3, [r7, #27]
 8009ae6:	3b20      	subs	r3, #32
 8009ae8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	613a      	str	r2, [r7, #16]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	4413      	add	r3, r2
 8009af4:	7efa      	ldrb	r2, [r7, #27]
 8009af6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009af8:	e7a6      	b.n	8009a48 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009afa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	441a      	add	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <create_name+0xf4>
 8009b0c:	2306      	movs	r3, #6
 8009b0e:	e010      	b.n	8009b32 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2be5      	cmp	r3, #229	; 0xe5
 8009b16:	d102      	bne.n	8009b1e <create_name+0x102>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2205      	movs	r2, #5
 8009b1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b1e:	7efb      	ldrb	r3, [r7, #27]
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d801      	bhi.n	8009b28 <create_name+0x10c>
 8009b24:	2204      	movs	r2, #4
 8009b26:	e000      	b.n	8009b2a <create_name+0x10e>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	330b      	adds	r3, #11
 8009b2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009b30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3720      	adds	r7, #32
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	08012964 	.word	0x08012964
 8009b40:	08011438 	.word	0x08011438

08009b44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009b58:	e002      	b.n	8009b60 <follow_path+0x1c>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b2f      	cmp	r3, #47	; 0x2f
 8009b66:	d0f8      	beq.n	8009b5a <follow_path+0x16>
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b5c      	cmp	r3, #92	; 0x5c
 8009b6e:	d0f4      	beq.n	8009b5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2200      	movs	r2, #0
 8009b74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b1f      	cmp	r3, #31
 8009b7c:	d80a      	bhi.n	8009b94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2280      	movs	r2, #128	; 0x80
 8009b82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009b86:	2100      	movs	r1, #0
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff fcf9 	bl	8009580 <dir_sdi>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
 8009b92:	e043      	b.n	8009c1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b94:	463b      	mov	r3, r7
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ff3f 	bl	8009a1c <create_name>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d134      	bne.n	8009c12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff feaf 	bl	800990c <dir_find>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d127      	bne.n	8009c16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d122      	bne.n	8009c16 <follow_path+0xd2>
 8009bd0:	2305      	movs	r3, #5
 8009bd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009bd4:	e01f      	b.n	8009c16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009bd6:	7afb      	ldrb	r3, [r7, #11]
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d11c      	bne.n	8009c1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	799b      	ldrb	r3, [r3, #6]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009bec:	2305      	movs	r3, #5
 8009bee:	75fb      	strb	r3, [r7, #23]
 8009bf0:	e014      	b.n	8009c1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c00:	4413      	add	r3, r2
 8009c02:	4619      	mov	r1, r3
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff fe42 	bl	800988e <ld_clust>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c10:	e7c0      	b.n	8009b94 <follow_path+0x50>
			if (res != FR_OK) break;
 8009c12:	bf00      	nop
 8009c14:	e002      	b.n	8009c1c <follow_path+0xd8>
				break;
 8009c16:	bf00      	nop
 8009c18:	e000      	b.n	8009c1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c1a:	bf00      	nop
			}
		}
	}

	return res;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b087      	sub	sp, #28
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d031      	beq.n	8009ca0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	e002      	b.n	8009c4a <get_ldnumber+0x24>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	3301      	adds	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d903      	bls.n	8009c5a <get_ldnumber+0x34>
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b3a      	cmp	r3, #58	; 0x3a
 8009c58:	d1f4      	bne.n	8009c44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b3a      	cmp	r3, #58	; 0x3a
 8009c60:	d11c      	bne.n	8009c9c <get_ldnumber+0x76>
			tp = *path;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	60fa      	str	r2, [r7, #12]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	3b30      	subs	r3, #48	; 0x30
 8009c72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b09      	cmp	r3, #9
 8009c78:	d80e      	bhi.n	8009c98 <get_ldnumber+0x72>
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d10a      	bne.n	8009c98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <get_ldnumber+0x72>
					vol = (int)i;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	e002      	b.n	8009ca2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009ca0:	693b      	ldr	r3, [r7, #16]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
	...

08009cb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	70da      	strb	r2, [r3, #3]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff f90e 	bl	8008eec <move_window>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <check_fs+0x2a>
 8009cd6:	2304      	movs	r3, #4
 8009cd8:	e038      	b.n	8009d4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3330      	adds	r3, #48	; 0x30
 8009cde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fe52 	bl	800898c <ld_word>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d001      	beq.n	8009cf8 <check_fs+0x48>
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e029      	b.n	8009d4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cfe:	2be9      	cmp	r3, #233	; 0xe9
 8009d00:	d009      	beq.n	8009d16 <check_fs+0x66>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d08:	2beb      	cmp	r3, #235	; 0xeb
 8009d0a:	d11e      	bne.n	8009d4a <check_fs+0x9a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d12:	2b90      	cmp	r3, #144	; 0x90
 8009d14:	d119      	bne.n	8009d4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3330      	adds	r3, #48	; 0x30
 8009d1a:	3336      	adds	r3, #54	; 0x36
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fe4d 	bl	80089bc <ld_dword>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d28:	4a0a      	ldr	r2, [pc, #40]	; (8009d54 <check_fs+0xa4>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d101      	bne.n	8009d32 <check_fs+0x82>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e00c      	b.n	8009d4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3330      	adds	r3, #48	; 0x30
 8009d36:	3352      	adds	r3, #82	; 0x52
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fe3f 	bl	80089bc <ld_dword>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	4a05      	ldr	r2, [pc, #20]	; (8009d58 <check_fs+0xa8>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d101      	bne.n	8009d4a <check_fs+0x9a>
 8009d46:	2300      	movs	r3, #0
 8009d48:	e000      	b.n	8009d4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d4a:	2302      	movs	r3, #2
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	00544146 	.word	0x00544146
 8009d58:	33544146 	.word	0x33544146

08009d5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b096      	sub	sp, #88	; 0x58
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f7ff ff58 	bl	8009c26 <get_ldnumber>
 8009d76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	da01      	bge.n	8009d82 <find_volume+0x26>
 8009d7e:	230b      	movs	r3, #11
 8009d80:	e22d      	b.n	800a1de <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009d82:	4aa1      	ldr	r2, [pc, #644]	; (800a008 <find_volume+0x2ac>)
 8009d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <find_volume+0x3a>
 8009d92:	230c      	movs	r3, #12
 8009d94:	e223      	b.n	800a1de <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	f023 0301 	bic.w	r3, r3, #1
 8009da2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01a      	beq.n	8009de2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fd4d 	bl	8008850 <disk_status>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10c      	bne.n	8009de2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <find_volume+0x82>
 8009dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009dda:	230a      	movs	r3, #10
 8009ddc:	e1ff      	b.n	800a1de <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009dde:	2300      	movs	r3, #0
 8009de0:	e1fd      	b.n	800a1de <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	2200      	movs	r2, #0
 8009de6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe fd45 	bl	8008884 <disk_initialize>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e1e6      	b.n	800a1de <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <find_volume+0xca>
 8009e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009e22:	230a      	movs	r3, #10
 8009e24:	e1db      	b.n	800a1de <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e2e:	f7ff ff3f 	bl	8009cb0 <check_fs>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d149      	bne.n	8009ed4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e40:	2300      	movs	r3, #0
 8009e42:	643b      	str	r3, [r7, #64]	; 0x40
 8009e44:	e01e      	b.n	8009e84 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009e54:	4413      	add	r3, r2
 8009e56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d006      	beq.n	8009e70 <find_volume+0x114>
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	3308      	adds	r3, #8
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fda8 	bl	80089bc <ld_dword>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	e000      	b.n	8009e72 <find_volume+0x116>
 8009e70:	2200      	movs	r2, #0
 8009e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	3358      	adds	r3, #88	; 0x58
 8009e78:	443b      	add	r3, r7
 8009e7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e80:	3301      	adds	r3, #1
 8009e82:	643b      	str	r3, [r7, #64]	; 0x40
 8009e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d9dd      	bls.n	8009e46 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <find_volume+0x13e>
 8009e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e96:	3b01      	subs	r3, #1
 8009e98:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	3358      	adds	r3, #88	; 0x58
 8009ea0:	443b      	add	r3, r7
 8009ea2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ea6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d005      	beq.n	8009eba <find_volume+0x15e>
 8009eae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eb2:	f7ff fefd 	bl	8009cb0 <check_fs>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	e000      	b.n	8009ebc <find_volume+0x160>
 8009eba:	2303      	movs	r3, #3
 8009ebc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d905      	bls.n	8009ed4 <find_volume+0x178>
 8009ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eca:	3301      	adds	r3, #1
 8009ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d9e2      	bls.n	8009e9a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	d101      	bne.n	8009ee0 <find_volume+0x184>
 8009edc:	2301      	movs	r3, #1
 8009ede:	e17e      	b.n	800a1de <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d901      	bls.n	8009eec <find_volume+0x190>
 8009ee8:	230d      	movs	r3, #13
 8009eea:	e178      	b.n	800a1de <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	3330      	adds	r3, #48	; 0x30
 8009ef0:	330b      	adds	r3, #11
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fd4a 	bl	800898c <ld_word>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009efe:	d001      	beq.n	8009f04 <find_volume+0x1a8>
 8009f00:	230d      	movs	r3, #13
 8009f02:	e16c      	b.n	800a1de <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	3330      	adds	r3, #48	; 0x30
 8009f08:	3316      	adds	r3, #22
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fd3e 	bl	800898c <ld_word>
 8009f10:	4603      	mov	r3, r0
 8009f12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <find_volume+0x1cc>
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	3330      	adds	r3, #48	; 0x30
 8009f1e:	3324      	adds	r3, #36	; 0x24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe fd4b 	bl	80089bc <ld_dword>
 8009f26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f2c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	789b      	ldrb	r3, [r3, #2]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d005      	beq.n	8009f4c <find_volume+0x1f0>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	789b      	ldrb	r3, [r3, #2]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d001      	beq.n	8009f4c <find_volume+0x1f0>
 8009f48:	230d      	movs	r3, #13
 8009f4a:	e148      	b.n	800a1de <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	789b      	ldrb	r3, [r3, #2]
 8009f50:	461a      	mov	r2, r3
 8009f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f54:	fb02 f303 	mul.w	r3, r2, r3
 8009f58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	895b      	ldrh	r3, [r3, #10]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d008      	beq.n	8009f80 <find_volume+0x224>
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	895b      	ldrh	r3, [r3, #10]
 8009f72:	461a      	mov	r2, r3
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	895b      	ldrh	r3, [r3, #10]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <find_volume+0x228>
 8009f80:	230d      	movs	r3, #13
 8009f82:	e12c      	b.n	800a1de <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	3330      	adds	r3, #48	; 0x30
 8009f88:	3311      	adds	r3, #17
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fcfe 	bl	800898c <ld_word>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	891b      	ldrh	r3, [r3, #8]
 8009f9c:	f003 030f 	and.w	r3, r3, #15
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <find_volume+0x24e>
 8009fa6:	230d      	movs	r3, #13
 8009fa8:	e119      	b.n	800a1de <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	3330      	adds	r3, #48	; 0x30
 8009fae:	3313      	adds	r3, #19
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fe fceb 	bl	800898c <ld_word>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <find_volume+0x272>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	3330      	adds	r3, #48	; 0x30
 8009fc4:	3320      	adds	r3, #32
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe fcf8 	bl	80089bc <ld_dword>
 8009fcc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	3330      	adds	r3, #48	; 0x30
 8009fd2:	330e      	adds	r3, #14
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fcd9 	bl	800898c <ld_word>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009fde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <find_volume+0x28c>
 8009fe4:	230d      	movs	r3, #13
 8009fe6:	e0fa      	b.n	800a1de <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009fe8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fec:	4413      	add	r3, r2
 8009fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ff0:	8912      	ldrh	r2, [r2, #8]
 8009ff2:	0912      	lsrs	r2, r2, #4
 8009ff4:	b292      	uxth	r2, r2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d204      	bcs.n	800a00c <find_volume+0x2b0>
 800a002:	230d      	movs	r3, #13
 800a004:	e0eb      	b.n	800a1de <find_volume+0x482>
 800a006:	bf00      	nop
 800a008:	20000f14 	.word	0x20000f14
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a014:	8952      	ldrh	r2, [r2, #10]
 800a016:	fbb3 f3f2 	udiv	r3, r3, r2
 800a01a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <find_volume+0x2ca>
 800a022:	230d      	movs	r3, #13
 800a024:	e0db      	b.n	800a1de <find_volume+0x482>
		fmt = FS_FAT32;
 800a026:	2303      	movs	r3, #3
 800a028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a032:	4293      	cmp	r3, r2
 800a034:	d802      	bhi.n	800a03c <find_volume+0x2e0>
 800a036:	2302      	movs	r3, #2
 800a038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a042:	4293      	cmp	r3, r2
 800a044:	d802      	bhi.n	800a04c <find_volume+0x2f0>
 800a046:	2301      	movs	r3, #1
 800a048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	1c9a      	adds	r2, r3, #2
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a058:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a05a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a05e:	441a      	add	r2, r3
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	441a      	add	r2, r3
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a06e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a072:	2b03      	cmp	r3, #3
 800a074:	d11e      	bne.n	800a0b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	3330      	adds	r3, #48	; 0x30
 800a07a:	332a      	adds	r3, #42	; 0x2a
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe fc85 	bl	800898c <ld_word>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <find_volume+0x330>
 800a088:	230d      	movs	r3, #13
 800a08a:	e0a8      	b.n	800a1de <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08e:	891b      	ldrh	r3, [r3, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <find_volume+0x33c>
 800a094:	230d      	movs	r3, #13
 800a096:	e0a2      	b.n	800a1de <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	3330      	adds	r3, #48	; 0x30
 800a09c:	332c      	adds	r3, #44	; 0x2c
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fc8c 	bl	80089bc <ld_dword>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0b2:	e01f      	b.n	800a0f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	891b      	ldrh	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <find_volume+0x364>
 800a0bc:	230d      	movs	r3, #13
 800a0be:	e08e      	b.n	800a1de <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	6a1a      	ldr	r2, [r3, #32]
 800a0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c6:	441a      	add	r2, r3
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a0cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d103      	bne.n	800a0dc <find_volume+0x380>
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	e00a      	b.n	800a0f2 <find_volume+0x396>
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	695a      	ldr	r2, [r3, #20]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	4413      	add	r3, r2
 800a0e6:	085a      	lsrs	r2, r3, #1
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a0f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	699a      	ldr	r2, [r3, #24]
 800a0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a0fe:	0a5b      	lsrs	r3, r3, #9
 800a100:	429a      	cmp	r2, r3
 800a102:	d201      	bcs.n	800a108 <find_volume+0x3ac>
 800a104:	230d      	movs	r3, #13
 800a106:	e06a      	b.n	800a1de <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	611a      	str	r2, [r3, #16]
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	2280      	movs	r2, #128	; 0x80
 800a11c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a11e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a122:	2b03      	cmp	r3, #3
 800a124:	d149      	bne.n	800a1ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	3330      	adds	r3, #48	; 0x30
 800a12a:	3330      	adds	r3, #48	; 0x30
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fc2d 	bl	800898c <ld_word>
 800a132:	4603      	mov	r3, r0
 800a134:	2b01      	cmp	r3, #1
 800a136:	d140      	bne.n	800a1ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a13a:	3301      	adds	r3, #1
 800a13c:	4619      	mov	r1, r3
 800a13e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a140:	f7fe fed4 	bl	8008eec <move_window>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d137      	bne.n	800a1ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14c:	2200      	movs	r2, #0
 800a14e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	3330      	adds	r3, #48	; 0x30
 800a154:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fc17 	bl	800898c <ld_word>
 800a15e:	4603      	mov	r3, r0
 800a160:	461a      	mov	r2, r3
 800a162:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a166:	429a      	cmp	r2, r3
 800a168:	d127      	bne.n	800a1ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	3330      	adds	r3, #48	; 0x30
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe fc24 	bl	80089bc <ld_dword>
 800a174:	4603      	mov	r3, r0
 800a176:	4a1c      	ldr	r2, [pc, #112]	; (800a1e8 <find_volume+0x48c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d11e      	bne.n	800a1ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	3330      	adds	r3, #48	; 0x30
 800a180:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fc19 	bl	80089bc <ld_dword>
 800a18a:	4603      	mov	r3, r0
 800a18c:	4a17      	ldr	r2, [pc, #92]	; (800a1ec <find_volume+0x490>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d113      	bne.n	800a1ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	3330      	adds	r3, #48	; 0x30
 800a196:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe fc0e 	bl	80089bc <ld_dword>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	3330      	adds	r3, #48	; 0x30
 800a1aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fc04 	bl	80089bc <ld_dword>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a1c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a1c2:	4b0b      	ldr	r3, [pc, #44]	; (800a1f0 <find_volume+0x494>)
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <find_volume+0x494>)
 800a1cc:	801a      	strh	r2, [r3, #0]
 800a1ce:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <find_volume+0x494>)
 800a1d0:	881a      	ldrh	r2, [r3, #0]
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a1d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1d8:	f7fe fe20 	bl	8008e1c <clear_lock>
#endif
	return FR_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3758      	adds	r7, #88	; 0x58
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	41615252 	.word	0x41615252
 800a1ec:	61417272 	.word	0x61417272
 800a1f0:	20000f18 	.word	0x20000f18

0800a1f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a1fe:	2309      	movs	r3, #9
 800a200:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01c      	beq.n	800a242 <validate+0x4e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d018      	beq.n	800a242 <validate+0x4e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d013      	beq.n	800a242 <validate+0x4e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	889a      	ldrh	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	88db      	ldrh	r3, [r3, #6]
 800a224:	429a      	cmp	r2, r3
 800a226:	d10c      	bne.n	800a242 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fb0e 	bl	8008850 <disk_status>
 800a234:	4603      	mov	r3, r0
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <validate+0x4e>
			res = FR_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <validate+0x5a>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	e000      	b.n	800a250 <validate+0x5c>
 800a24e:	2300      	movs	r3, #0
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	6013      	str	r3, [r2, #0]
	return res;
 800a254:	7bfb      	ldrb	r3, [r7, #15]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a272:	f107 0310 	add.w	r3, r7, #16
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fcd5 	bl	8009c26 <get_ldnumber>
 800a27c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	da01      	bge.n	800a288 <f_mount+0x28>
 800a284:	230b      	movs	r3, #11
 800a286:	e02b      	b.n	800a2e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a288:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <f_mount+0x88>)
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a290:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d005      	beq.n	800a2a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a298:	69b8      	ldr	r0, [r7, #24]
 800a29a:	f7fe fdbf 	bl	8008e1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	490d      	ldr	r1, [pc, #52]	; (800a2e8 <f_mount+0x88>)
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <f_mount+0x66>
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d001      	beq.n	800a2ca <f_mount+0x6a>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e00a      	b.n	800a2e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a2ca:	f107 010c 	add.w	r1, r7, #12
 800a2ce:	f107 0308 	add.w	r3, r7, #8
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff fd41 	bl	8009d5c <find_volume>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3720      	adds	r7, #32
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20000f14 	.word	0x20000f14

0800a2ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b098      	sub	sp, #96	; 0x60
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <f_open+0x18>
 800a300:	2309      	movs	r3, #9
 800a302:	e1a9      	b.n	800a658 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a30a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a30c:	79fa      	ldrb	r2, [r7, #7]
 800a30e:	f107 0110 	add.w	r1, r7, #16
 800a312:	f107 0308 	add.w	r3, r7, #8
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff fd20 	bl	8009d5c <find_volume>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a326:	2b00      	cmp	r3, #0
 800a328:	f040 818d 	bne.w	800a646 <f_open+0x35a>
		dj.obj.fs = fs;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	f107 0314 	add.w	r3, r7, #20
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff fc03 	bl	8009b44 <follow_path>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d11a      	bne.n	800a382 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a34c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a350:	b25b      	sxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	da03      	bge.n	800a35e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a356:	2306      	movs	r3, #6
 800a358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a35c:	e011      	b.n	800a382 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	f023 0301 	bic.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	461a      	mov	r2, r3
 800a370:	f107 0314 	add.w	r3, r7, #20
 800a374:	4611      	mov	r1, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fc08 	bl	8008b8c <chk_lock>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	f003 031c 	and.w	r3, r3, #28
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d07e      	beq.n	800a48a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 800a38c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a390:	2b00      	cmp	r3, #0
 800a392:	d017      	beq.n	800a3c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d10e      	bne.n	800a3ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a39c:	f7fe fc52 	bl	8008c44 <enq_lock>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d006      	beq.n	800a3b4 <f_open+0xc8>
 800a3a6:	f107 0314 	add.w	r3, r7, #20
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff fb03 	bl	80099b6 <dir_register>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	e000      	b.n	800a3b6 <f_open+0xca>
 800a3b4:	2312      	movs	r3, #18
 800a3b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	f043 0308 	orr.w	r3, r3, #8
 800a3c0:	71fb      	strb	r3, [r7, #7]
 800a3c2:	e010      	b.n	800a3e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a3c4:	7ebb      	ldrb	r3, [r7, #26]
 800a3c6:	f003 0311 	and.w	r3, r3, #17
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <f_open+0xea>
					res = FR_DENIED;
 800a3ce:	2307      	movs	r3, #7
 800a3d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3d4:	e007      	b.n	800a3e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <f_open+0xfa>
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a3e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d167      	bne.n	800a4be <f_open+0x1d2>
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d062      	beq.n	800a4be <f_open+0x1d2>
				dw = GET_FATTIME();
 800a3f8:	4b99      	ldr	r3, [pc, #612]	; (800a660 <f_open+0x374>)
 800a3fa:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fe:	330e      	adds	r3, #14
 800a400:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fb18 	bl	8008a38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40a:	3316      	adds	r3, #22
 800a40c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fb12 	bl	8008a38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a416:	330b      	adds	r3, #11
 800a418:	2220      	movs	r2, #32
 800a41a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff fa33 	bl	800988e <ld_clust>
 800a428:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a42e:	2200      	movs	r2, #0
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fa4b 	bl	80098cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a438:	331c      	adds	r3, #28
 800a43a:	2100      	movs	r1, #0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe fafb 	bl	8008a38 <st_dword>
					fs->wflag = 1;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2201      	movs	r2, #1
 800a446:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d037      	beq.n	800a4be <f_open+0x1d2>
						dw = fs->winsect;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	2200      	movs	r2, #0
 800a45a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe ff92 	bl	8009386 <remove_chain>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d126      	bne.n	800a4be <f_open+0x1d2>
							res = move_window(fs, dw);
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fd39 	bl	8008eec <move_window>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a484:	3a01      	subs	r2, #1
 800a486:	60da      	str	r2, [r3, #12]
 800a488:	e019      	b.n	800a4be <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d115      	bne.n	800a4be <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a492:	7ebb      	ldrb	r3, [r7, #26]
 800a494:	f003 0310 	and.w	r3, r3, #16
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <f_open+0x1b8>
					res = FR_NO_FILE;
 800a49c:	2304      	movs	r3, #4
 800a49e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4a2:	e00c      	b.n	800a4be <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <f_open+0x1d2>
 800a4ae:	7ebb      	ldrb	r3, [r7, #26]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <f_open+0x1d2>
						res = FR_DENIED;
 800a4b8:	2307      	movs	r3, #7
 800a4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a4be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d128      	bne.n	800a518 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bf14      	ite	ne
 800a4f0:	2301      	movne	r3, #1
 800a4f2:	2300      	moveq	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f107 0314 	add.w	r3, r7, #20
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fbc2 	bl	8008c88 <inc_lock>
 800a504:	4602      	mov	r2, r0
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d102      	bne.n	800a518 <f_open+0x22c>
 800a512:	2302      	movs	r3, #2
 800a514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 8092 	bne.w	800a646 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff f9b0 	bl	800988e <ld_clust>
 800a52e:	4602      	mov	r2, r0
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	331c      	adds	r3, #28
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fa3f 	bl	80089bc <ld_dword>
 800a53e:	4602      	mov	r2, r0
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a544:	693a      	ldr	r2, [r7, #16]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	88da      	ldrh	r2, [r3, #6]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	79fa      	ldrb	r2, [r7, #7]
 800a556:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	332c      	adds	r3, #44	; 0x2c
 800a56e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a572:	2100      	movs	r1, #0
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe faac 	bl	8008ad2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d060      	beq.n	800a646 <f_open+0x35a>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d05c      	beq.n	800a646 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	895b      	ldrh	r3, [r3, #10]
 800a598:	025b      	lsls	r3, r3, #9
 800a59a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5a8:	e016      	b.n	800a5d8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fd57 	bl	8009062 <get_fat>
 800a5b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d802      	bhi.n	800a5c2 <f_open+0x2d6>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a5c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c8:	d102      	bne.n	800a5d0 <f_open+0x2e4>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <f_open+0x2fc>
 800a5e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d8e0      	bhi.n	800a5aa <f_open+0x2be>
				}
				fp->clust = clst;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a5ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d127      	bne.n	800a646 <f_open+0x35a>
 800a5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d022      	beq.n	800a646 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fd0d 	bl	8009024 <clust2sect>
 800a60a:	6478      	str	r0, [r7, #68]	; 0x44
 800a60c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <f_open+0x32e>
						res = FR_INT_ERR;
 800a612:	2302      	movs	r3, #2
 800a614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a618:	e015      	b.n	800a646 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61c:	0a5a      	lsrs	r2, r3, #9
 800a61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a620:	441a      	add	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	7858      	ldrb	r0, [r3, #1]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1a      	ldr	r2, [r3, #32]
 800a634:	2301      	movs	r3, #1
 800a636:	f7fe f94b 	bl	80088d0 <disk_read>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <f_open+0x35a>
 800a640:	2301      	movs	r3, #1
 800a642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <f_open+0x368>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3760      	adds	r7, #96	; 0x60
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	46c40000 	.word	0x46c40000

0800a664 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08c      	sub	sp, #48	; 0x30
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2200      	movs	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f107 0210 	add.w	r2, r7, #16
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7ff fdb5 	bl	800a1f4 <validate>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a694:	2b00      	cmp	r3, #0
 800a696:	d107      	bne.n	800a6a8 <f_write+0x44>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	7d5b      	ldrb	r3, [r3, #21]
 800a69c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <f_write+0x4a>
 800a6a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6ac:	e13f      	b.n	800a92e <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	7d1b      	ldrb	r3, [r3, #20]
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <f_write+0x5a>
 800a6ba:	2307      	movs	r3, #7
 800a6bc:	e137      	b.n	800a92e <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699a      	ldr	r2, [r3, #24]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	f080 8121 	bcs.w	800a912 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	43db      	mvns	r3, r3
 800a6d6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a6d8:	e11b      	b.n	800a912 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 80d7 	bne.w	800a896 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	0a5b      	lsrs	r3, r3, #9
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	8952      	ldrh	r2, [r2, #10]
 800a6f2:	3a01      	subs	r2, #1
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d137      	bne.n	800a76e <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10c      	bne.n	800a720 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10e      	bne.n	800a730 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fe9a 	bl	8009450 <create_chain>
 800a71c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a71e:	e007      	b.n	800a730 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f7fe fe91 	bl	8009450 <create_chain>
 800a72e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 80f2 	beq.w	800a91c <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d104      	bne.n	800a748 <f_write+0xe4>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2202      	movs	r2, #2
 800a742:	755a      	strb	r2, [r3, #21]
 800a744:	2302      	movs	r3, #2
 800a746:	e0f2      	b.n	800a92e <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74e:	d104      	bne.n	800a75a <f_write+0xf6>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	755a      	strb	r2, [r3, #21]
 800a756:	2301      	movs	r3, #1
 800a758:	e0e9      	b.n	800a92e <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a75e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <f_write+0x10a>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	7d1b      	ldrb	r3, [r3, #20]
 800a772:	b25b      	sxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	da18      	bge.n	800a7aa <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	7858      	ldrb	r0, [r3, #1]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a1a      	ldr	r2, [r3, #32]
 800a786:	2301      	movs	r3, #1
 800a788:	f7fe f8c2 	bl	8008910 <disk_write>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <f_write+0x138>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2201      	movs	r2, #1
 800a796:	755a      	strb	r2, [r3, #21]
 800a798:	2301      	movs	r3, #1
 800a79a:	e0c8      	b.n	800a92e <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	7d1b      	ldrb	r3, [r3, #20]
 800a7a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f7fe fc36 	bl	8009024 <clust2sect>
 800a7b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <f_write+0x166>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	755a      	strb	r2, [r3, #21]
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	e0b1      	b.n	800a92e <f_write+0x2ca>
			sect += csect;
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	0a5b      	lsrs	r3, r3, #9
 800a7d6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d03c      	beq.n	800a858 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	8952      	ldrh	r2, [r2, #10]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d905      	bls.n	800a7f8 <f_write+0x194>
					cc = fs->csize - csect;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	895b      	ldrh	r3, [r3, #10]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	7858      	ldrb	r0, [r3, #1]
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	69f9      	ldr	r1, [r7, #28]
 800a802:	f7fe f885 	bl	8008910 <disk_write>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <f_write+0x1b2>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	755a      	strb	r2, [r3, #21]
 800a812:	2301      	movs	r3, #1
 800a814:	e08b      	b.n	800a92e <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6a1a      	ldr	r2, [r3, #32]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	6a3a      	ldr	r2, [r7, #32]
 800a820:	429a      	cmp	r2, r3
 800a822:	d915      	bls.n	800a850 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a1a      	ldr	r2, [r3, #32]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	025b      	lsls	r3, r3, #9
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	4413      	add	r3, r2
 800a838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a83c:	4619      	mov	r1, r3
 800a83e:	f7fe f927 	bl	8008a90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	7d1b      	ldrb	r3, [r3, #20]
 800a846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	025b      	lsls	r3, r3, #9
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a856:	e03f      	b.n	800a8d8 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d016      	beq.n	800a890 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d210      	bcs.n	800a890 <f_write+0x22c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	7858      	ldrb	r0, [r3, #1]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a878:	2301      	movs	r3, #1
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	f7fe f828 	bl	80088d0 <disk_read>
 800a880:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	755a      	strb	r2, [r3, #21]
 800a88c:	2301      	movs	r3, #1
 800a88e:	e04e      	b.n	800a92e <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d901      	bls.n	800a8b0 <f_write+0x24c>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8be:	4413      	add	r3, r2
 800a8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c2:	69f9      	ldr	r1, [r7, #28]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe f8e3 	bl	8008a90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	7d1b      	ldrb	r3, [r3, #20]
 800a8ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a8d8:	69fa      	ldr	r2, [r7, #28]
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	4413      	add	r3, r2
 800a8de:	61fb      	str	r3, [r7, #28]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	441a      	add	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	619a      	str	r2, [r3, #24]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	bf38      	it	cc
 800a8f8:	461a      	movcc	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	441a      	add	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f47f aee0 	bne.w	800a6da <f_write+0x76>
 800a91a:	e000      	b.n	800a91e <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a91c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	7d1b      	ldrb	r3, [r3, #20]
 800a922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a926:	b2da      	uxtb	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3730      	adds	r7, #48	; 0x30
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f107 0208 	add.w	r2, r7, #8
 800a946:	4611      	mov	r1, r2
 800a948:	4618      	mov	r0, r3
 800a94a:	f7ff fc53 	bl	800a1f4 <validate>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d167      	bne.n	800aa28 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7d1b      	ldrb	r3, [r3, #20]
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d061      	beq.n	800aa28 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7d1b      	ldrb	r3, [r3, #20]
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	da15      	bge.n	800a99a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	7858      	ldrb	r0, [r3, #1]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a1a      	ldr	r2, [r3, #32]
 800a97c:	2301      	movs	r3, #1
 800a97e:	f7fd ffc7 	bl	8008910 <disk_write>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <f_sync+0x54>
 800a988:	2301      	movs	r3, #1
 800a98a:	e04e      	b.n	800aa2a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	7d1b      	ldrb	r3, [r3, #20]
 800a990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a994:	b2da      	uxtb	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a99a:	4b26      	ldr	r3, [pc, #152]	; (800aa34 <f_sync+0xfc>)
 800a99c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7fe faa0 	bl	8008eec <move_window>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d138      	bne.n	800aa28 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	330b      	adds	r3, #11
 800a9c0:	781a      	ldrb	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	330b      	adds	r3, #11
 800a9c6:	f042 0220 	orr.w	r2, r2, #32
 800a9ca:	b2d2      	uxtb	r2, r2
 800a9cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	68f9      	ldr	r1, [r7, #12]
 800a9da:	f7fe ff77 	bl	80098cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f103 021c 	add.w	r2, r3, #28
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe f824 	bl	8008a38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3316      	adds	r3, #22
 800a9f4:	6939      	ldr	r1, [r7, #16]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe f81e 	bl	8008a38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3312      	adds	r3, #18
 800aa00:	2100      	movs	r1, #0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fd fffd 	bl	8008a02 <st_word>
					fs->wflag = 1;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fa99 	bl	8008f48 <sync_fs>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	7d1b      	ldrb	r3, [r3, #20]
 800aa1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	46c40000 	.word	0x46c40000

0800aa38 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff ff79 	bl	800a938 <f_sync>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d118      	bne.n	800aa82 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f107 0208 	add.w	r2, r7, #8
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff fbcb 	bl	800a1f4 <validate>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10c      	bne.n	800aa82 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe f999 	bl	8008da4 <dec_lock>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f107 0208 	add.w	r2, r7, #8
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff fba8 	bl	800a1f4 <validate>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 800aaa8:	7ffb      	ldrb	r3, [r7, #31]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d102      	bne.n	800aab4 <f_lseek+0x28>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	7d5b      	ldrb	r3, [r3, #21]
 800aab2:	77fb      	strb	r3, [r7, #31]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800aab4:	7ffb      	ldrb	r3, [r7, #31]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <f_lseek+0x32>
 800aaba:	7ffb      	ldrb	r3, [r7, #31]
 800aabc:	e10f      	b.n	800acde <f_lseek+0x252>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d908      	bls.n	800aada <f_lseek+0x4e>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7d1b      	ldrb	r3, [r3, #20]
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 80a7 	beq.w	800ac40 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	895b      	ldrh	r3, [r3, #10]
 800aaf6:	025b      	lsls	r3, r3, #9
 800aaf8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01b      	beq.n	800ab38 <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	1e5a      	subs	r2, r3, #1
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	1e59      	subs	r1, r3, #1
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d30f      	bcc.n	800ab38 <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1e5a      	subs	r2, r3, #1
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	425b      	negs	r3, r3
 800ab20:	401a      	ands	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	e022      	b.n	800ab7e <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d119      	bne.n	800ab78 <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2100      	movs	r1, #0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe fc81 	bl	8009450 <create_chain>
 800ab4e:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d104      	bne.n	800ab60 <f_lseek+0xd4>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	755a      	strb	r2, [r3, #21]
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0be      	b.n	800acde <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab66:	d104      	bne.n	800ab72 <f_lseek+0xe6>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	755a      	strb	r2, [r3, #21]
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e0b5      	b.n	800acde <f_lseek+0x252>
					fp->obj.sclust = clst;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d05d      	beq.n	800ac40 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 800ab84:	e03a      	b.n	800abfc <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	699a      	ldr	r2, [r3, #24]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	441a      	add	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	7d1b      	ldrb	r3, [r3, #20]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <f_lseek+0x132>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69b9      	ldr	r1, [r7, #24]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe fc50 	bl	8009450 <create_chain>
 800abb0:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d108      	bne.n	800abca <f_lseek+0x13e>
							ofs = 0; break;
 800abb8:	2300      	movs	r3, #0
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	e022      	b.n	800ac04 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69b9      	ldr	r1, [r7, #24]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fa4d 	bl	8009062 <get_fat>
 800abc8:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd0:	d104      	bne.n	800abdc <f_lseek+0x150>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	755a      	strb	r2, [r3, #21]
 800abd8:	2301      	movs	r3, #1
 800abda:	e080      	b.n	800acde <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d904      	bls.n	800abec <f_lseek+0x160>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d304      	bcc.n	800abf6 <f_lseek+0x16a>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2202      	movs	r2, #2
 800abf0:	755a      	strb	r2, [r3, #21]
 800abf2:	2302      	movs	r3, #2
 800abf4:	e073      	b.n	800acde <f_lseek+0x252>
					fp->clust = clst;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d8c0      	bhi.n	800ab86 <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	699a      	ldr	r2, [r3, #24]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d012      	beq.n	800ac40 <f_lseek+0x1b4>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	69b9      	ldr	r1, [r7, #24]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fa00 	bl	8009024 <clust2sect>
 800ac24:	6178      	str	r0, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d104      	bne.n	800ac36 <f_lseek+0x1aa>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	755a      	strb	r2, [r3, #21]
 800ac32:	2302      	movs	r3, #2
 800ac34:	e053      	b.n	800acde <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	0a5b      	lsrs	r3, r3, #9
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	699a      	ldr	r2, [r3, #24]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d90a      	bls.n	800ac62 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	699a      	ldr	r2, [r3, #24]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	7d1b      	ldrb	r3, [r3, #20]
 800ac58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d036      	beq.n	800acdc <f_lseek+0x250>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d031      	beq.n	800acdc <f_lseek+0x250>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	7d1b      	ldrb	r3, [r3, #20]
 800ac7c:	b25b      	sxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	da18      	bge.n	800acb4 <f_lseek+0x228>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	7858      	ldrb	r0, [r3, #1]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a1a      	ldr	r2, [r3, #32]
 800ac90:	2301      	movs	r3, #1
 800ac92:	f7fd fe3d 	bl	8008910 <disk_write>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <f_lseek+0x21a>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	755a      	strb	r2, [r3, #21]
 800aca2:	2301      	movs	r3, #1
 800aca4:	e01b      	b.n	800acde <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7d1b      	ldrb	r3, [r3, #20]
 800acaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	7858      	ldrb	r0, [r3, #1]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800acbe:	2301      	movs	r3, #1
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	f7fd fe05 	bl	80088d0 <disk_read>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <f_lseek+0x24a>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	755a      	strb	r2, [r3, #21]
 800acd2:	2301      	movs	r3, #1
 800acd4:	e003      	b.n	800acde <f_lseek+0x252>
#endif
			fp->sect = nsect;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800acdc:	7ffb      	ldrb	r3, [r7, #31]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	4613      	mov	r3, r2
 800acf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acfe:	4b1f      	ldr	r3, [pc, #124]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad00:	7a5b      	ldrb	r3, [r3, #9]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d131      	bne.n	800ad6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad08:	4b1c      	ldr	r3, [pc, #112]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad0a:	7a5b      	ldrb	r3, [r3, #9]
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4b1a      	ldr	r3, [pc, #104]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad12:	2100      	movs	r1, #0
 800ad14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad16:	4b19      	ldr	r3, [pc, #100]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad18:	7a5b      	ldrb	r3, [r3, #9]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	4a17      	ldr	r2, [pc, #92]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad26:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad28:	7a5b      	ldrb	r3, [r3, #9]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	4b13      	ldr	r3, [pc, #76]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad30:	4413      	add	r3, r2
 800ad32:	79fa      	ldrb	r2, [r7, #7]
 800ad34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad36:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad38:	7a5b      	ldrb	r3, [r3, #9]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	b2d1      	uxtb	r1, r2
 800ad40:	4a0e      	ldr	r2, [pc, #56]	; (800ad7c <FATFS_LinkDriverEx+0x94>)
 800ad42:	7251      	strb	r1, [r2, #9]
 800ad44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad46:	7dbb      	ldrb	r3, [r7, #22]
 800ad48:	3330      	adds	r3, #48	; 0x30
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	3301      	adds	r3, #1
 800ad54:	223a      	movs	r2, #58	; 0x3a
 800ad56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	3302      	adds	r3, #2
 800ad5c:	222f      	movs	r2, #47	; 0x2f
 800ad5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	3303      	adds	r3, #3
 800ad64:	2200      	movs	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	20000f3c 	.word	0x20000f3c

0800ad80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff ffaa 	bl	800ace8 <FATFS_LinkDriverEx>
 800ad94:	4603      	mov	r3, r0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <atof>:
 800ad9e:	2100      	movs	r1, #0
 800ada0:	f000 be26 	b.w	800b9f0 <strtod>

0800ada4 <__itoa>:
 800ada4:	1e93      	subs	r3, r2, #2
 800ada6:	2b22      	cmp	r3, #34	; 0x22
 800ada8:	b510      	push	{r4, lr}
 800adaa:	460c      	mov	r4, r1
 800adac:	d904      	bls.n	800adb8 <__itoa+0x14>
 800adae:	2300      	movs	r3, #0
 800adb0:	700b      	strb	r3, [r1, #0]
 800adb2:	461c      	mov	r4, r3
 800adb4:	4620      	mov	r0, r4
 800adb6:	bd10      	pop	{r4, pc}
 800adb8:	2a0a      	cmp	r2, #10
 800adba:	d109      	bne.n	800add0 <__itoa+0x2c>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	da07      	bge.n	800add0 <__itoa+0x2c>
 800adc0:	232d      	movs	r3, #45	; 0x2d
 800adc2:	700b      	strb	r3, [r1, #0]
 800adc4:	4240      	negs	r0, r0
 800adc6:	2101      	movs	r1, #1
 800adc8:	4421      	add	r1, r4
 800adca:	f000 fe1d 	bl	800ba08 <__utoa>
 800adce:	e7f1      	b.n	800adb4 <__itoa+0x10>
 800add0:	2100      	movs	r1, #0
 800add2:	e7f9      	b.n	800adc8 <__itoa+0x24>

0800add4 <itoa>:
 800add4:	f7ff bfe6 	b.w	800ada4 <__itoa>

0800add8 <sulp>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	460d      	mov	r5, r1
 800adde:	ec45 4b10 	vmov	d0, r4, r5
 800ade2:	4616      	mov	r6, r2
 800ade4:	f003 fb94 	bl	800e510 <__ulp>
 800ade8:	ec51 0b10 	vmov	r0, r1, d0
 800adec:	b17e      	cbz	r6, 800ae0e <sulp+0x36>
 800adee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800adf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dd09      	ble.n	800ae0e <sulp+0x36>
 800adfa:	051b      	lsls	r3, r3, #20
 800adfc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae00:	2400      	movs	r4, #0
 800ae02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae06:	4622      	mov	r2, r4
 800ae08:	462b      	mov	r3, r5
 800ae0a:	f7f5 fc05 	bl	8000618 <__aeabi_dmul>
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}

0800ae10 <_strtod_l>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	ed2d 8b02 	vpush	{d8}
 800ae18:	b09b      	sub	sp, #108	; 0x6c
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae1e:	2200      	movs	r2, #0
 800ae20:	9216      	str	r2, [sp, #88]	; 0x58
 800ae22:	460d      	mov	r5, r1
 800ae24:	f04f 0800 	mov.w	r8, #0
 800ae28:	f04f 0900 	mov.w	r9, #0
 800ae2c:	460a      	mov	r2, r1
 800ae2e:	9215      	str	r2, [sp, #84]	; 0x54
 800ae30:	7811      	ldrb	r1, [r2, #0]
 800ae32:	292b      	cmp	r1, #43	; 0x2b
 800ae34:	d04c      	beq.n	800aed0 <_strtod_l+0xc0>
 800ae36:	d83a      	bhi.n	800aeae <_strtod_l+0x9e>
 800ae38:	290d      	cmp	r1, #13
 800ae3a:	d834      	bhi.n	800aea6 <_strtod_l+0x96>
 800ae3c:	2908      	cmp	r1, #8
 800ae3e:	d834      	bhi.n	800aeaa <_strtod_l+0x9a>
 800ae40:	2900      	cmp	r1, #0
 800ae42:	d03d      	beq.n	800aec0 <_strtod_l+0xb0>
 800ae44:	2200      	movs	r2, #0
 800ae46:	920a      	str	r2, [sp, #40]	; 0x28
 800ae48:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ae4a:	7832      	ldrb	r2, [r6, #0]
 800ae4c:	2a30      	cmp	r2, #48	; 0x30
 800ae4e:	f040 80b4 	bne.w	800afba <_strtod_l+0x1aa>
 800ae52:	7872      	ldrb	r2, [r6, #1]
 800ae54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ae58:	2a58      	cmp	r2, #88	; 0x58
 800ae5a:	d170      	bne.n	800af3e <_strtod_l+0x12e>
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	ab16      	add	r3, sp, #88	; 0x58
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4a8e      	ldr	r2, [pc, #568]	; (800b0a0 <_strtod_l+0x290>)
 800ae68:	ab17      	add	r3, sp, #92	; 0x5c
 800ae6a:	a915      	add	r1, sp, #84	; 0x54
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f002 fc2d 	bl	800d6cc <__gethex>
 800ae72:	f010 070f 	ands.w	r7, r0, #15
 800ae76:	4605      	mov	r5, r0
 800ae78:	d005      	beq.n	800ae86 <_strtod_l+0x76>
 800ae7a:	2f06      	cmp	r7, #6
 800ae7c:	d12a      	bne.n	800aed4 <_strtod_l+0xc4>
 800ae7e:	3601      	adds	r6, #1
 800ae80:	2300      	movs	r3, #0
 800ae82:	9615      	str	r6, [sp, #84]	; 0x54
 800ae84:	930a      	str	r3, [sp, #40]	; 0x28
 800ae86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 857f 	bne.w	800b98c <_strtod_l+0xb7c>
 800ae8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae90:	b1db      	cbz	r3, 800aeca <_strtod_l+0xba>
 800ae92:	4642      	mov	r2, r8
 800ae94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae98:	ec43 2b10 	vmov	d0, r2, r3
 800ae9c:	b01b      	add	sp, #108	; 0x6c
 800ae9e:	ecbd 8b02 	vpop	{d8}
 800aea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea6:	2920      	cmp	r1, #32
 800aea8:	d1cc      	bne.n	800ae44 <_strtod_l+0x34>
 800aeaa:	3201      	adds	r2, #1
 800aeac:	e7bf      	b.n	800ae2e <_strtod_l+0x1e>
 800aeae:	292d      	cmp	r1, #45	; 0x2d
 800aeb0:	d1c8      	bne.n	800ae44 <_strtod_l+0x34>
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	910a      	str	r1, [sp, #40]	; 0x28
 800aeb6:	1c51      	adds	r1, r2, #1
 800aeb8:	9115      	str	r1, [sp, #84]	; 0x54
 800aeba:	7852      	ldrb	r2, [r2, #1]
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	d1c3      	bne.n	800ae48 <_strtod_l+0x38>
 800aec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aec2:	9515      	str	r5, [sp, #84]	; 0x54
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 855f 	bne.w	800b988 <_strtod_l+0xb78>
 800aeca:	4642      	mov	r2, r8
 800aecc:	464b      	mov	r3, r9
 800aece:	e7e3      	b.n	800ae98 <_strtod_l+0x88>
 800aed0:	2100      	movs	r1, #0
 800aed2:	e7ef      	b.n	800aeb4 <_strtod_l+0xa4>
 800aed4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aed6:	b13a      	cbz	r2, 800aee8 <_strtod_l+0xd8>
 800aed8:	2135      	movs	r1, #53	; 0x35
 800aeda:	a818      	add	r0, sp, #96	; 0x60
 800aedc:	f003 fc15 	bl	800e70a <__copybits>
 800aee0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aee2:	4620      	mov	r0, r4
 800aee4:	f002 ffe8 	bl	800deb8 <_Bfree>
 800aee8:	3f01      	subs	r7, #1
 800aeea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeec:	2f04      	cmp	r7, #4
 800aeee:	d806      	bhi.n	800aefe <_strtod_l+0xee>
 800aef0:	e8df f007 	tbb	[pc, r7]
 800aef4:	201d0314 	.word	0x201d0314
 800aef8:	14          	.byte	0x14
 800aef9:	00          	.byte	0x00
 800aefa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800aefe:	05e9      	lsls	r1, r5, #23
 800af00:	bf48      	it	mi
 800af02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800af06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af0a:	0d1b      	lsrs	r3, r3, #20
 800af0c:	051b      	lsls	r3, r3, #20
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1b9      	bne.n	800ae86 <_strtod_l+0x76>
 800af12:	f001 fc43 	bl	800c79c <__errno>
 800af16:	2322      	movs	r3, #34	; 0x22
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	e7b4      	b.n	800ae86 <_strtod_l+0x76>
 800af1c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800af20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800af2c:	e7e7      	b.n	800aefe <_strtod_l+0xee>
 800af2e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b0a8 <_strtod_l+0x298>
 800af32:	e7e4      	b.n	800aefe <_strtod_l+0xee>
 800af34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800af38:	f04f 38ff 	mov.w	r8, #4294967295
 800af3c:	e7df      	b.n	800aefe <_strtod_l+0xee>
 800af3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	9215      	str	r2, [sp, #84]	; 0x54
 800af44:	785b      	ldrb	r3, [r3, #1]
 800af46:	2b30      	cmp	r3, #48	; 0x30
 800af48:	d0f9      	beq.n	800af3e <_strtod_l+0x12e>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d09b      	beq.n	800ae86 <_strtod_l+0x76>
 800af4e:	2301      	movs	r3, #1
 800af50:	f04f 0a00 	mov.w	sl, #0
 800af54:	9304      	str	r3, [sp, #16]
 800af56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af58:	930b      	str	r3, [sp, #44]	; 0x2c
 800af5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800af5e:	46d3      	mov	fp, sl
 800af60:	220a      	movs	r2, #10
 800af62:	9815      	ldr	r0, [sp, #84]	; 0x54
 800af64:	7806      	ldrb	r6, [r0, #0]
 800af66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800af6a:	b2d9      	uxtb	r1, r3
 800af6c:	2909      	cmp	r1, #9
 800af6e:	d926      	bls.n	800afbe <_strtod_l+0x1ae>
 800af70:	494c      	ldr	r1, [pc, #304]	; (800b0a4 <_strtod_l+0x294>)
 800af72:	2201      	movs	r2, #1
 800af74:	f001 fb46 	bl	800c604 <strncmp>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d030      	beq.n	800afde <_strtod_l+0x1ce>
 800af7c:	2000      	movs	r0, #0
 800af7e:	4632      	mov	r2, r6
 800af80:	9005      	str	r0, [sp, #20]
 800af82:	465e      	mov	r6, fp
 800af84:	4603      	mov	r3, r0
 800af86:	2a65      	cmp	r2, #101	; 0x65
 800af88:	d001      	beq.n	800af8e <_strtod_l+0x17e>
 800af8a:	2a45      	cmp	r2, #69	; 0x45
 800af8c:	d113      	bne.n	800afb6 <_strtod_l+0x1a6>
 800af8e:	b91e      	cbnz	r6, 800af98 <_strtod_l+0x188>
 800af90:	9a04      	ldr	r2, [sp, #16]
 800af92:	4302      	orrs	r2, r0
 800af94:	d094      	beq.n	800aec0 <_strtod_l+0xb0>
 800af96:	2600      	movs	r6, #0
 800af98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800af9a:	1c6a      	adds	r2, r5, #1
 800af9c:	9215      	str	r2, [sp, #84]	; 0x54
 800af9e:	786a      	ldrb	r2, [r5, #1]
 800afa0:	2a2b      	cmp	r2, #43	; 0x2b
 800afa2:	d074      	beq.n	800b08e <_strtod_l+0x27e>
 800afa4:	2a2d      	cmp	r2, #45	; 0x2d
 800afa6:	d078      	beq.n	800b09a <_strtod_l+0x28a>
 800afa8:	f04f 0c00 	mov.w	ip, #0
 800afac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800afb0:	2909      	cmp	r1, #9
 800afb2:	d97f      	bls.n	800b0b4 <_strtod_l+0x2a4>
 800afb4:	9515      	str	r5, [sp, #84]	; 0x54
 800afb6:	2700      	movs	r7, #0
 800afb8:	e09e      	b.n	800b0f8 <_strtod_l+0x2e8>
 800afba:	2300      	movs	r3, #0
 800afbc:	e7c8      	b.n	800af50 <_strtod_l+0x140>
 800afbe:	f1bb 0f08 	cmp.w	fp, #8
 800afc2:	bfd8      	it	le
 800afc4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800afc6:	f100 0001 	add.w	r0, r0, #1
 800afca:	bfda      	itte	le
 800afcc:	fb02 3301 	mlale	r3, r2, r1, r3
 800afd0:	9309      	strle	r3, [sp, #36]	; 0x24
 800afd2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800afd6:	f10b 0b01 	add.w	fp, fp, #1
 800afda:	9015      	str	r0, [sp, #84]	; 0x54
 800afdc:	e7c1      	b.n	800af62 <_strtod_l+0x152>
 800afde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	9215      	str	r2, [sp, #84]	; 0x54
 800afe4:	785a      	ldrb	r2, [r3, #1]
 800afe6:	f1bb 0f00 	cmp.w	fp, #0
 800afea:	d037      	beq.n	800b05c <_strtod_l+0x24c>
 800afec:	9005      	str	r0, [sp, #20]
 800afee:	465e      	mov	r6, fp
 800aff0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d912      	bls.n	800b01e <_strtod_l+0x20e>
 800aff8:	2301      	movs	r3, #1
 800affa:	e7c4      	b.n	800af86 <_strtod_l+0x176>
 800affc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	9215      	str	r2, [sp, #84]	; 0x54
 800b002:	785a      	ldrb	r2, [r3, #1]
 800b004:	3001      	adds	r0, #1
 800b006:	2a30      	cmp	r2, #48	; 0x30
 800b008:	d0f8      	beq.n	800affc <_strtod_l+0x1ec>
 800b00a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b00e:	2b08      	cmp	r3, #8
 800b010:	f200 84c1 	bhi.w	800b996 <_strtod_l+0xb86>
 800b014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b016:	9005      	str	r0, [sp, #20]
 800b018:	2000      	movs	r0, #0
 800b01a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b01c:	4606      	mov	r6, r0
 800b01e:	3a30      	subs	r2, #48	; 0x30
 800b020:	f100 0301 	add.w	r3, r0, #1
 800b024:	d014      	beq.n	800b050 <_strtod_l+0x240>
 800b026:	9905      	ldr	r1, [sp, #20]
 800b028:	4419      	add	r1, r3
 800b02a:	9105      	str	r1, [sp, #20]
 800b02c:	4633      	mov	r3, r6
 800b02e:	eb00 0c06 	add.w	ip, r0, r6
 800b032:	210a      	movs	r1, #10
 800b034:	4563      	cmp	r3, ip
 800b036:	d113      	bne.n	800b060 <_strtod_l+0x250>
 800b038:	1833      	adds	r3, r6, r0
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	f106 0601 	add.w	r6, r6, #1
 800b040:	4406      	add	r6, r0
 800b042:	dc1a      	bgt.n	800b07a <_strtod_l+0x26a>
 800b044:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b046:	230a      	movs	r3, #10
 800b048:	fb03 2301 	mla	r3, r3, r1, r2
 800b04c:	9309      	str	r3, [sp, #36]	; 0x24
 800b04e:	2300      	movs	r3, #0
 800b050:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b052:	1c51      	adds	r1, r2, #1
 800b054:	9115      	str	r1, [sp, #84]	; 0x54
 800b056:	7852      	ldrb	r2, [r2, #1]
 800b058:	4618      	mov	r0, r3
 800b05a:	e7c9      	b.n	800aff0 <_strtod_l+0x1e0>
 800b05c:	4658      	mov	r0, fp
 800b05e:	e7d2      	b.n	800b006 <_strtod_l+0x1f6>
 800b060:	2b08      	cmp	r3, #8
 800b062:	f103 0301 	add.w	r3, r3, #1
 800b066:	dc03      	bgt.n	800b070 <_strtod_l+0x260>
 800b068:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b06a:	434f      	muls	r7, r1
 800b06c:	9709      	str	r7, [sp, #36]	; 0x24
 800b06e:	e7e1      	b.n	800b034 <_strtod_l+0x224>
 800b070:	2b10      	cmp	r3, #16
 800b072:	bfd8      	it	le
 800b074:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b078:	e7dc      	b.n	800b034 <_strtod_l+0x224>
 800b07a:	2e10      	cmp	r6, #16
 800b07c:	bfdc      	itt	le
 800b07e:	230a      	movle	r3, #10
 800b080:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b084:	e7e3      	b.n	800b04e <_strtod_l+0x23e>
 800b086:	2300      	movs	r3, #0
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	2301      	movs	r3, #1
 800b08c:	e780      	b.n	800af90 <_strtod_l+0x180>
 800b08e:	f04f 0c00 	mov.w	ip, #0
 800b092:	1caa      	adds	r2, r5, #2
 800b094:	9215      	str	r2, [sp, #84]	; 0x54
 800b096:	78aa      	ldrb	r2, [r5, #2]
 800b098:	e788      	b.n	800afac <_strtod_l+0x19c>
 800b09a:	f04f 0c01 	mov.w	ip, #1
 800b09e:	e7f8      	b.n	800b092 <_strtod_l+0x282>
 800b0a0:	080129e8 	.word	0x080129e8
 800b0a4:	080129e4 	.word	0x080129e4
 800b0a8:	7ff00000 	.word	0x7ff00000
 800b0ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0ae:	1c51      	adds	r1, r2, #1
 800b0b0:	9115      	str	r1, [sp, #84]	; 0x54
 800b0b2:	7852      	ldrb	r2, [r2, #1]
 800b0b4:	2a30      	cmp	r2, #48	; 0x30
 800b0b6:	d0f9      	beq.n	800b0ac <_strtod_l+0x29c>
 800b0b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b0bc:	2908      	cmp	r1, #8
 800b0be:	f63f af7a 	bhi.w	800afb6 <_strtod_l+0x1a6>
 800b0c2:	3a30      	subs	r2, #48	; 0x30
 800b0c4:	9208      	str	r2, [sp, #32]
 800b0c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0c8:	920c      	str	r2, [sp, #48]	; 0x30
 800b0ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0cc:	1c57      	adds	r7, r2, #1
 800b0ce:	9715      	str	r7, [sp, #84]	; 0x54
 800b0d0:	7852      	ldrb	r2, [r2, #1]
 800b0d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b0d6:	f1be 0f09 	cmp.w	lr, #9
 800b0da:	d938      	bls.n	800b14e <_strtod_l+0x33e>
 800b0dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0de:	1a7f      	subs	r7, r7, r1
 800b0e0:	2f08      	cmp	r7, #8
 800b0e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b0e6:	dc03      	bgt.n	800b0f0 <_strtod_l+0x2e0>
 800b0e8:	9908      	ldr	r1, [sp, #32]
 800b0ea:	428f      	cmp	r7, r1
 800b0ec:	bfa8      	it	ge
 800b0ee:	460f      	movge	r7, r1
 800b0f0:	f1bc 0f00 	cmp.w	ip, #0
 800b0f4:	d000      	beq.n	800b0f8 <_strtod_l+0x2e8>
 800b0f6:	427f      	negs	r7, r7
 800b0f8:	2e00      	cmp	r6, #0
 800b0fa:	d14f      	bne.n	800b19c <_strtod_l+0x38c>
 800b0fc:	9904      	ldr	r1, [sp, #16]
 800b0fe:	4301      	orrs	r1, r0
 800b100:	f47f aec1 	bne.w	800ae86 <_strtod_l+0x76>
 800b104:	2b00      	cmp	r3, #0
 800b106:	f47f aedb 	bne.w	800aec0 <_strtod_l+0xb0>
 800b10a:	2a69      	cmp	r2, #105	; 0x69
 800b10c:	d029      	beq.n	800b162 <_strtod_l+0x352>
 800b10e:	dc26      	bgt.n	800b15e <_strtod_l+0x34e>
 800b110:	2a49      	cmp	r2, #73	; 0x49
 800b112:	d026      	beq.n	800b162 <_strtod_l+0x352>
 800b114:	2a4e      	cmp	r2, #78	; 0x4e
 800b116:	f47f aed3 	bne.w	800aec0 <_strtod_l+0xb0>
 800b11a:	499b      	ldr	r1, [pc, #620]	; (800b388 <_strtod_l+0x578>)
 800b11c:	a815      	add	r0, sp, #84	; 0x54
 800b11e:	f002 fd15 	bl	800db4c <__match>
 800b122:	2800      	cmp	r0, #0
 800b124:	f43f aecc 	beq.w	800aec0 <_strtod_l+0xb0>
 800b128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b28      	cmp	r3, #40	; 0x28
 800b12e:	d12f      	bne.n	800b190 <_strtod_l+0x380>
 800b130:	4996      	ldr	r1, [pc, #600]	; (800b38c <_strtod_l+0x57c>)
 800b132:	aa18      	add	r2, sp, #96	; 0x60
 800b134:	a815      	add	r0, sp, #84	; 0x54
 800b136:	f002 fd1d 	bl	800db74 <__hexnan>
 800b13a:	2805      	cmp	r0, #5
 800b13c:	d128      	bne.n	800b190 <_strtod_l+0x380>
 800b13e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b144:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b148:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b14c:	e69b      	b.n	800ae86 <_strtod_l+0x76>
 800b14e:	9f08      	ldr	r7, [sp, #32]
 800b150:	210a      	movs	r1, #10
 800b152:	fb01 2107 	mla	r1, r1, r7, r2
 800b156:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b15a:	9208      	str	r2, [sp, #32]
 800b15c:	e7b5      	b.n	800b0ca <_strtod_l+0x2ba>
 800b15e:	2a6e      	cmp	r2, #110	; 0x6e
 800b160:	e7d9      	b.n	800b116 <_strtod_l+0x306>
 800b162:	498b      	ldr	r1, [pc, #556]	; (800b390 <_strtod_l+0x580>)
 800b164:	a815      	add	r0, sp, #84	; 0x54
 800b166:	f002 fcf1 	bl	800db4c <__match>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f43f aea8 	beq.w	800aec0 <_strtod_l+0xb0>
 800b170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b172:	4988      	ldr	r1, [pc, #544]	; (800b394 <_strtod_l+0x584>)
 800b174:	3b01      	subs	r3, #1
 800b176:	a815      	add	r0, sp, #84	; 0x54
 800b178:	9315      	str	r3, [sp, #84]	; 0x54
 800b17a:	f002 fce7 	bl	800db4c <__match>
 800b17e:	b910      	cbnz	r0, 800b186 <_strtod_l+0x376>
 800b180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b182:	3301      	adds	r3, #1
 800b184:	9315      	str	r3, [sp, #84]	; 0x54
 800b186:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b3a4 <_strtod_l+0x594>
 800b18a:	f04f 0800 	mov.w	r8, #0
 800b18e:	e67a      	b.n	800ae86 <_strtod_l+0x76>
 800b190:	4881      	ldr	r0, [pc, #516]	; (800b398 <_strtod_l+0x588>)
 800b192:	f001 fb45 	bl	800c820 <nan>
 800b196:	ec59 8b10 	vmov	r8, r9, d0
 800b19a:	e674      	b.n	800ae86 <_strtod_l+0x76>
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1a0:	1afb      	subs	r3, r7, r3
 800b1a2:	f1bb 0f00 	cmp.w	fp, #0
 800b1a6:	bf08      	it	eq
 800b1a8:	46b3      	moveq	fp, r6
 800b1aa:	2e10      	cmp	r6, #16
 800b1ac:	9308      	str	r3, [sp, #32]
 800b1ae:	4635      	mov	r5, r6
 800b1b0:	bfa8      	it	ge
 800b1b2:	2510      	movge	r5, #16
 800b1b4:	f7f5 f9b6 	bl	8000524 <__aeabi_ui2d>
 800b1b8:	2e09      	cmp	r6, #9
 800b1ba:	4680      	mov	r8, r0
 800b1bc:	4689      	mov	r9, r1
 800b1be:	dd13      	ble.n	800b1e8 <_strtod_l+0x3d8>
 800b1c0:	4b76      	ldr	r3, [pc, #472]	; (800b39c <_strtod_l+0x58c>)
 800b1c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b1c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b1ca:	f7f5 fa25 	bl	8000618 <__aeabi_dmul>
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4689      	mov	r9, r1
 800b1d4:	f7f5 f9a6 	bl	8000524 <__aeabi_ui2d>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4640      	mov	r0, r8
 800b1de:	4649      	mov	r1, r9
 800b1e0:	f7f5 f864 	bl	80002ac <__adddf3>
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4689      	mov	r9, r1
 800b1e8:	2e0f      	cmp	r6, #15
 800b1ea:	dc38      	bgt.n	800b25e <_strtod_l+0x44e>
 800b1ec:	9b08      	ldr	r3, [sp, #32]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f43f ae49 	beq.w	800ae86 <_strtod_l+0x76>
 800b1f4:	dd24      	ble.n	800b240 <_strtod_l+0x430>
 800b1f6:	2b16      	cmp	r3, #22
 800b1f8:	dc0b      	bgt.n	800b212 <_strtod_l+0x402>
 800b1fa:	4968      	ldr	r1, [pc, #416]	; (800b39c <_strtod_l+0x58c>)
 800b1fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b204:	4642      	mov	r2, r8
 800b206:	464b      	mov	r3, r9
 800b208:	f7f5 fa06 	bl	8000618 <__aeabi_dmul>
 800b20c:	4680      	mov	r8, r0
 800b20e:	4689      	mov	r9, r1
 800b210:	e639      	b.n	800ae86 <_strtod_l+0x76>
 800b212:	9a08      	ldr	r2, [sp, #32]
 800b214:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b218:	4293      	cmp	r3, r2
 800b21a:	db20      	blt.n	800b25e <_strtod_l+0x44e>
 800b21c:	4c5f      	ldr	r4, [pc, #380]	; (800b39c <_strtod_l+0x58c>)
 800b21e:	f1c6 060f 	rsb	r6, r6, #15
 800b222:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b22e:	f7f5 f9f3 	bl	8000618 <__aeabi_dmul>
 800b232:	9b08      	ldr	r3, [sp, #32]
 800b234:	1b9e      	subs	r6, r3, r6
 800b236:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b23a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b23e:	e7e3      	b.n	800b208 <_strtod_l+0x3f8>
 800b240:	9b08      	ldr	r3, [sp, #32]
 800b242:	3316      	adds	r3, #22
 800b244:	db0b      	blt.n	800b25e <_strtod_l+0x44e>
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	1bdf      	subs	r7, r3, r7
 800b24a:	4b54      	ldr	r3, [pc, #336]	; (800b39c <_strtod_l+0x58c>)
 800b24c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b250:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b254:	4640      	mov	r0, r8
 800b256:	4649      	mov	r1, r9
 800b258:	f7f5 fb08 	bl	800086c <__aeabi_ddiv>
 800b25c:	e7d6      	b.n	800b20c <_strtod_l+0x3fc>
 800b25e:	9b08      	ldr	r3, [sp, #32]
 800b260:	1b75      	subs	r5, r6, r5
 800b262:	441d      	add	r5, r3
 800b264:	2d00      	cmp	r5, #0
 800b266:	dd70      	ble.n	800b34a <_strtod_l+0x53a>
 800b268:	f015 030f 	ands.w	r3, r5, #15
 800b26c:	d00a      	beq.n	800b284 <_strtod_l+0x474>
 800b26e:	494b      	ldr	r1, [pc, #300]	; (800b39c <_strtod_l+0x58c>)
 800b270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b274:	4642      	mov	r2, r8
 800b276:	464b      	mov	r3, r9
 800b278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b27c:	f7f5 f9cc 	bl	8000618 <__aeabi_dmul>
 800b280:	4680      	mov	r8, r0
 800b282:	4689      	mov	r9, r1
 800b284:	f035 050f 	bics.w	r5, r5, #15
 800b288:	d04d      	beq.n	800b326 <_strtod_l+0x516>
 800b28a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b28e:	dd22      	ble.n	800b2d6 <_strtod_l+0x4c6>
 800b290:	2500      	movs	r5, #0
 800b292:	46ab      	mov	fp, r5
 800b294:	9509      	str	r5, [sp, #36]	; 0x24
 800b296:	9505      	str	r5, [sp, #20]
 800b298:	2322      	movs	r3, #34	; 0x22
 800b29a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b3a4 <_strtod_l+0x594>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	f04f 0800 	mov.w	r8, #0
 800b2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f43f aded 	beq.w	800ae86 <_strtod_l+0x76>
 800b2ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f002 fe02 	bl	800deb8 <_Bfree>
 800b2b4:	9905      	ldr	r1, [sp, #20]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f002 fdfe 	bl	800deb8 <_Bfree>
 800b2bc:	4659      	mov	r1, fp
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f002 fdfa 	bl	800deb8 <_Bfree>
 800b2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f002 fdf6 	bl	800deb8 <_Bfree>
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f002 fdf2 	bl	800deb8 <_Bfree>
 800b2d4:	e5d7      	b.n	800ae86 <_strtod_l+0x76>
 800b2d6:	4b32      	ldr	r3, [pc, #200]	; (800b3a0 <_strtod_l+0x590>)
 800b2d8:	9304      	str	r3, [sp, #16]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	112d      	asrs	r5, r5, #4
 800b2de:	4640      	mov	r0, r8
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	469a      	mov	sl, r3
 800b2e4:	2d01      	cmp	r5, #1
 800b2e6:	dc21      	bgt.n	800b32c <_strtod_l+0x51c>
 800b2e8:	b10b      	cbz	r3, 800b2ee <_strtod_l+0x4de>
 800b2ea:	4680      	mov	r8, r0
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	492c      	ldr	r1, [pc, #176]	; (800b3a0 <_strtod_l+0x590>)
 800b2f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b2f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b300:	f7f5 f98a 	bl	8000618 <__aeabi_dmul>
 800b304:	4b27      	ldr	r3, [pc, #156]	; (800b3a4 <_strtod_l+0x594>)
 800b306:	460a      	mov	r2, r1
 800b308:	400b      	ands	r3, r1
 800b30a:	4927      	ldr	r1, [pc, #156]	; (800b3a8 <_strtod_l+0x598>)
 800b30c:	428b      	cmp	r3, r1
 800b30e:	4680      	mov	r8, r0
 800b310:	d8be      	bhi.n	800b290 <_strtod_l+0x480>
 800b312:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b316:	428b      	cmp	r3, r1
 800b318:	bf86      	itte	hi
 800b31a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b3ac <_strtod_l+0x59c>
 800b31e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b322:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b326:	2300      	movs	r3, #0
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	e07b      	b.n	800b424 <_strtod_l+0x614>
 800b32c:	07ea      	lsls	r2, r5, #31
 800b32e:	d505      	bpl.n	800b33c <_strtod_l+0x52c>
 800b330:	9b04      	ldr	r3, [sp, #16]
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f7f5 f96f 	bl	8000618 <__aeabi_dmul>
 800b33a:	2301      	movs	r3, #1
 800b33c:	9a04      	ldr	r2, [sp, #16]
 800b33e:	3208      	adds	r2, #8
 800b340:	f10a 0a01 	add.w	sl, sl, #1
 800b344:	106d      	asrs	r5, r5, #1
 800b346:	9204      	str	r2, [sp, #16]
 800b348:	e7cc      	b.n	800b2e4 <_strtod_l+0x4d4>
 800b34a:	d0ec      	beq.n	800b326 <_strtod_l+0x516>
 800b34c:	426d      	negs	r5, r5
 800b34e:	f015 020f 	ands.w	r2, r5, #15
 800b352:	d00a      	beq.n	800b36a <_strtod_l+0x55a>
 800b354:	4b11      	ldr	r3, [pc, #68]	; (800b39c <_strtod_l+0x58c>)
 800b356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b35a:	4640      	mov	r0, r8
 800b35c:	4649      	mov	r1, r9
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f5 fa83 	bl	800086c <__aeabi_ddiv>
 800b366:	4680      	mov	r8, r0
 800b368:	4689      	mov	r9, r1
 800b36a:	112d      	asrs	r5, r5, #4
 800b36c:	d0db      	beq.n	800b326 <_strtod_l+0x516>
 800b36e:	2d1f      	cmp	r5, #31
 800b370:	dd1e      	ble.n	800b3b0 <_strtod_l+0x5a0>
 800b372:	2500      	movs	r5, #0
 800b374:	46ab      	mov	fp, r5
 800b376:	9509      	str	r5, [sp, #36]	; 0x24
 800b378:	9505      	str	r5, [sp, #20]
 800b37a:	2322      	movs	r3, #34	; 0x22
 800b37c:	f04f 0800 	mov.w	r8, #0
 800b380:	f04f 0900 	mov.w	r9, #0
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	e78d      	b.n	800b2a4 <_strtod_l+0x494>
 800b388:	08012a6a 	.word	0x08012a6a
 800b38c:	080129fc 	.word	0x080129fc
 800b390:	08012a62 	.word	0x08012a62
 800b394:	08012b47 	.word	0x08012b47
 800b398:	08012b43 	.word	0x08012b43
 800b39c:	08012ca0 	.word	0x08012ca0
 800b3a0:	08012c78 	.word	0x08012c78
 800b3a4:	7ff00000 	.word	0x7ff00000
 800b3a8:	7ca00000 	.word	0x7ca00000
 800b3ac:	7fefffff 	.word	0x7fefffff
 800b3b0:	f015 0310 	ands.w	r3, r5, #16
 800b3b4:	bf18      	it	ne
 800b3b6:	236a      	movne	r3, #106	; 0x6a
 800b3b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b75c <_strtod_l+0x94c>
 800b3bc:	9304      	str	r3, [sp, #16]
 800b3be:	4640      	mov	r0, r8
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	07ea      	lsls	r2, r5, #31
 800b3c6:	d504      	bpl.n	800b3d2 <_strtod_l+0x5c2>
 800b3c8:	e9da 2300 	ldrd	r2, r3, [sl]
 800b3cc:	f7f5 f924 	bl	8000618 <__aeabi_dmul>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	106d      	asrs	r5, r5, #1
 800b3d4:	f10a 0a08 	add.w	sl, sl, #8
 800b3d8:	d1f4      	bne.n	800b3c4 <_strtod_l+0x5b4>
 800b3da:	b10b      	cbz	r3, 800b3e0 <_strtod_l+0x5d0>
 800b3dc:	4680      	mov	r8, r0
 800b3de:	4689      	mov	r9, r1
 800b3e0:	9b04      	ldr	r3, [sp, #16]
 800b3e2:	b1bb      	cbz	r3, 800b414 <_strtod_l+0x604>
 800b3e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b3e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	dd10      	ble.n	800b414 <_strtod_l+0x604>
 800b3f2:	2b1f      	cmp	r3, #31
 800b3f4:	f340 811e 	ble.w	800b634 <_strtod_l+0x824>
 800b3f8:	2b34      	cmp	r3, #52	; 0x34
 800b3fa:	bfde      	ittt	le
 800b3fc:	f04f 33ff 	movle.w	r3, #4294967295
 800b400:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b404:	4093      	lslle	r3, r2
 800b406:	f04f 0800 	mov.w	r8, #0
 800b40a:	bfcc      	ite	gt
 800b40c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b410:	ea03 0901 	andle.w	r9, r3, r1
 800b414:	2200      	movs	r2, #0
 800b416:	2300      	movs	r3, #0
 800b418:	4640      	mov	r0, r8
 800b41a:	4649      	mov	r1, r9
 800b41c:	f7f5 fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 800b420:	2800      	cmp	r0, #0
 800b422:	d1a6      	bne.n	800b372 <_strtod_l+0x562>
 800b424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b42a:	4633      	mov	r3, r6
 800b42c:	465a      	mov	r2, fp
 800b42e:	4620      	mov	r0, r4
 800b430:	f002 fdaa 	bl	800df88 <__s2b>
 800b434:	9009      	str	r0, [sp, #36]	; 0x24
 800b436:	2800      	cmp	r0, #0
 800b438:	f43f af2a 	beq.w	800b290 <_strtod_l+0x480>
 800b43c:	9a08      	ldr	r2, [sp, #32]
 800b43e:	9b05      	ldr	r3, [sp, #20]
 800b440:	2a00      	cmp	r2, #0
 800b442:	eba3 0307 	sub.w	r3, r3, r7
 800b446:	bfa8      	it	ge
 800b448:	2300      	movge	r3, #0
 800b44a:	930c      	str	r3, [sp, #48]	; 0x30
 800b44c:	2500      	movs	r5, #0
 800b44e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b452:	9312      	str	r3, [sp, #72]	; 0x48
 800b454:	46ab      	mov	fp, r5
 800b456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b458:	4620      	mov	r0, r4
 800b45a:	6859      	ldr	r1, [r3, #4]
 800b45c:	f002 fcec 	bl	800de38 <_Balloc>
 800b460:	9005      	str	r0, [sp, #20]
 800b462:	2800      	cmp	r0, #0
 800b464:	f43f af18 	beq.w	800b298 <_strtod_l+0x488>
 800b468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46a:	691a      	ldr	r2, [r3, #16]
 800b46c:	3202      	adds	r2, #2
 800b46e:	f103 010c 	add.w	r1, r3, #12
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	300c      	adds	r0, #12
 800b476:	f001 f9c5 	bl	800c804 <memcpy>
 800b47a:	ec49 8b10 	vmov	d0, r8, r9
 800b47e:	aa18      	add	r2, sp, #96	; 0x60
 800b480:	a917      	add	r1, sp, #92	; 0x5c
 800b482:	4620      	mov	r0, r4
 800b484:	f003 f8b4 	bl	800e5f0 <__d2b>
 800b488:	ec49 8b18 	vmov	d8, r8, r9
 800b48c:	9016      	str	r0, [sp, #88]	; 0x58
 800b48e:	2800      	cmp	r0, #0
 800b490:	f43f af02 	beq.w	800b298 <_strtod_l+0x488>
 800b494:	2101      	movs	r1, #1
 800b496:	4620      	mov	r0, r4
 800b498:	f002 fe0e 	bl	800e0b8 <__i2b>
 800b49c:	4683      	mov	fp, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f43f aefa 	beq.w	800b298 <_strtod_l+0x488>
 800b4a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b4a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b4a8:	2e00      	cmp	r6, #0
 800b4aa:	bfab      	itete	ge
 800b4ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b4ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b4b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b4b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b4b6:	bfac      	ite	ge
 800b4b8:	eb06 0a03 	addge.w	sl, r6, r3
 800b4bc:	1b9f      	sublt	r7, r3, r6
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	1af6      	subs	r6, r6, r3
 800b4c2:	4416      	add	r6, r2
 800b4c4:	4ba0      	ldr	r3, [pc, #640]	; (800b748 <_strtod_l+0x938>)
 800b4c6:	3e01      	subs	r6, #1
 800b4c8:	429e      	cmp	r6, r3
 800b4ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b4ce:	f280 80c4 	bge.w	800b65a <_strtod_l+0x84a>
 800b4d2:	1b9b      	subs	r3, r3, r6
 800b4d4:	2b1f      	cmp	r3, #31
 800b4d6:	eba2 0203 	sub.w	r2, r2, r3
 800b4da:	f04f 0101 	mov.w	r1, #1
 800b4de:	f300 80b0 	bgt.w	800b642 <_strtod_l+0x832>
 800b4e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b4ec:	eb0a 0602 	add.w	r6, sl, r2
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	45b2      	cmp	sl, r6
 800b4f4:	4417      	add	r7, r2
 800b4f6:	441f      	add	r7, r3
 800b4f8:	4653      	mov	r3, sl
 800b4fa:	bfa8      	it	ge
 800b4fc:	4633      	movge	r3, r6
 800b4fe:	42bb      	cmp	r3, r7
 800b500:	bfa8      	it	ge
 800b502:	463b      	movge	r3, r7
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfc2      	ittt	gt
 800b508:	1af6      	subgt	r6, r6, r3
 800b50a:	1aff      	subgt	r7, r7, r3
 800b50c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b512:	2b00      	cmp	r3, #0
 800b514:	dd17      	ble.n	800b546 <_strtod_l+0x736>
 800b516:	4659      	mov	r1, fp
 800b518:	461a      	mov	r2, r3
 800b51a:	4620      	mov	r0, r4
 800b51c:	f002 fe8c 	bl	800e238 <__pow5mult>
 800b520:	4683      	mov	fp, r0
 800b522:	2800      	cmp	r0, #0
 800b524:	f43f aeb8 	beq.w	800b298 <_strtod_l+0x488>
 800b528:	4601      	mov	r1, r0
 800b52a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b52c:	4620      	mov	r0, r4
 800b52e:	f002 fdd9 	bl	800e0e4 <__multiply>
 800b532:	900b      	str	r0, [sp, #44]	; 0x2c
 800b534:	2800      	cmp	r0, #0
 800b536:	f43f aeaf 	beq.w	800b298 <_strtod_l+0x488>
 800b53a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b53c:	4620      	mov	r0, r4
 800b53e:	f002 fcbb 	bl	800deb8 <_Bfree>
 800b542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b544:	9316      	str	r3, [sp, #88]	; 0x58
 800b546:	2e00      	cmp	r6, #0
 800b548:	f300 808c 	bgt.w	800b664 <_strtod_l+0x854>
 800b54c:	9b08      	ldr	r3, [sp, #32]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd08      	ble.n	800b564 <_strtod_l+0x754>
 800b552:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b554:	9905      	ldr	r1, [sp, #20]
 800b556:	4620      	mov	r0, r4
 800b558:	f002 fe6e 	bl	800e238 <__pow5mult>
 800b55c:	9005      	str	r0, [sp, #20]
 800b55e:	2800      	cmp	r0, #0
 800b560:	f43f ae9a 	beq.w	800b298 <_strtod_l+0x488>
 800b564:	2f00      	cmp	r7, #0
 800b566:	dd08      	ble.n	800b57a <_strtod_l+0x76a>
 800b568:	9905      	ldr	r1, [sp, #20]
 800b56a:	463a      	mov	r2, r7
 800b56c:	4620      	mov	r0, r4
 800b56e:	f002 febd 	bl	800e2ec <__lshift>
 800b572:	9005      	str	r0, [sp, #20]
 800b574:	2800      	cmp	r0, #0
 800b576:	f43f ae8f 	beq.w	800b298 <_strtod_l+0x488>
 800b57a:	f1ba 0f00 	cmp.w	sl, #0
 800b57e:	dd08      	ble.n	800b592 <_strtod_l+0x782>
 800b580:	4659      	mov	r1, fp
 800b582:	4652      	mov	r2, sl
 800b584:	4620      	mov	r0, r4
 800b586:	f002 feb1 	bl	800e2ec <__lshift>
 800b58a:	4683      	mov	fp, r0
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f43f ae83 	beq.w	800b298 <_strtod_l+0x488>
 800b592:	9a05      	ldr	r2, [sp, #20]
 800b594:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b596:	4620      	mov	r0, r4
 800b598:	f002 ff30 	bl	800e3fc <__mdiff>
 800b59c:	4605      	mov	r5, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f ae7a 	beq.w	800b298 <_strtod_l+0x488>
 800b5a4:	68c3      	ldr	r3, [r0, #12]
 800b5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	60c3      	str	r3, [r0, #12]
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	f002 ff09 	bl	800e3c4 <__mcmp>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	da60      	bge.n	800b678 <_strtod_l+0x868>
 800b5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b8:	ea53 0308 	orrs.w	r3, r3, r8
 800b5bc:	f040 8084 	bne.w	800b6c8 <_strtod_l+0x8b8>
 800b5c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d17f      	bne.n	800b6c8 <_strtod_l+0x8b8>
 800b5c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5cc:	0d1b      	lsrs	r3, r3, #20
 800b5ce:	051b      	lsls	r3, r3, #20
 800b5d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b5d4:	d978      	bls.n	800b6c8 <_strtod_l+0x8b8>
 800b5d6:	696b      	ldr	r3, [r5, #20]
 800b5d8:	b913      	cbnz	r3, 800b5e0 <_strtod_l+0x7d0>
 800b5da:	692b      	ldr	r3, [r5, #16]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	dd73      	ble.n	800b6c8 <_strtod_l+0x8b8>
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f002 fe81 	bl	800e2ec <__lshift>
 800b5ea:	4659      	mov	r1, fp
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	f002 fee9 	bl	800e3c4 <__mcmp>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	dd68      	ble.n	800b6c8 <_strtod_l+0x8b8>
 800b5f6:	9904      	ldr	r1, [sp, #16]
 800b5f8:	4a54      	ldr	r2, [pc, #336]	; (800b74c <_strtod_l+0x93c>)
 800b5fa:	464b      	mov	r3, r9
 800b5fc:	2900      	cmp	r1, #0
 800b5fe:	f000 8084 	beq.w	800b70a <_strtod_l+0x8fa>
 800b602:	ea02 0109 	and.w	r1, r2, r9
 800b606:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b60a:	dc7e      	bgt.n	800b70a <_strtod_l+0x8fa>
 800b60c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b610:	f77f aeb3 	ble.w	800b37a <_strtod_l+0x56a>
 800b614:	4b4e      	ldr	r3, [pc, #312]	; (800b750 <_strtod_l+0x940>)
 800b616:	4640      	mov	r0, r8
 800b618:	4649      	mov	r1, r9
 800b61a:	2200      	movs	r2, #0
 800b61c:	f7f4 fffc 	bl	8000618 <__aeabi_dmul>
 800b620:	4b4a      	ldr	r3, [pc, #296]	; (800b74c <_strtod_l+0x93c>)
 800b622:	400b      	ands	r3, r1
 800b624:	4680      	mov	r8, r0
 800b626:	4689      	mov	r9, r1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f47f ae3f 	bne.w	800b2ac <_strtod_l+0x49c>
 800b62e:	2322      	movs	r3, #34	; 0x22
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	e63b      	b.n	800b2ac <_strtod_l+0x49c>
 800b634:	f04f 32ff 	mov.w	r2, #4294967295
 800b638:	fa02 f303 	lsl.w	r3, r2, r3
 800b63c:	ea03 0808 	and.w	r8, r3, r8
 800b640:	e6e8      	b.n	800b414 <_strtod_l+0x604>
 800b642:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b646:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b64a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b64e:	36e2      	adds	r6, #226	; 0xe2
 800b650:	fa01 f306 	lsl.w	r3, r1, r6
 800b654:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b658:	e748      	b.n	800b4ec <_strtod_l+0x6dc>
 800b65a:	2100      	movs	r1, #0
 800b65c:	2301      	movs	r3, #1
 800b65e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b662:	e743      	b.n	800b4ec <_strtod_l+0x6dc>
 800b664:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b666:	4632      	mov	r2, r6
 800b668:	4620      	mov	r0, r4
 800b66a:	f002 fe3f 	bl	800e2ec <__lshift>
 800b66e:	9016      	str	r0, [sp, #88]	; 0x58
 800b670:	2800      	cmp	r0, #0
 800b672:	f47f af6b 	bne.w	800b54c <_strtod_l+0x73c>
 800b676:	e60f      	b.n	800b298 <_strtod_l+0x488>
 800b678:	46ca      	mov	sl, r9
 800b67a:	d171      	bne.n	800b760 <_strtod_l+0x950>
 800b67c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b67e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b682:	b352      	cbz	r2, 800b6da <_strtod_l+0x8ca>
 800b684:	4a33      	ldr	r2, [pc, #204]	; (800b754 <_strtod_l+0x944>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d12a      	bne.n	800b6e0 <_strtod_l+0x8d0>
 800b68a:	9b04      	ldr	r3, [sp, #16]
 800b68c:	4641      	mov	r1, r8
 800b68e:	b1fb      	cbz	r3, 800b6d0 <_strtod_l+0x8c0>
 800b690:	4b2e      	ldr	r3, [pc, #184]	; (800b74c <_strtod_l+0x93c>)
 800b692:	ea09 0303 	and.w	r3, r9, r3
 800b696:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b69a:	f04f 32ff 	mov.w	r2, #4294967295
 800b69e:	d81a      	bhi.n	800b6d6 <_strtod_l+0x8c6>
 800b6a0:	0d1b      	lsrs	r3, r3, #20
 800b6a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	d118      	bne.n	800b6e0 <_strtod_l+0x8d0>
 800b6ae:	4b2a      	ldr	r3, [pc, #168]	; (800b758 <_strtod_l+0x948>)
 800b6b0:	459a      	cmp	sl, r3
 800b6b2:	d102      	bne.n	800b6ba <_strtod_l+0x8aa>
 800b6b4:	3101      	adds	r1, #1
 800b6b6:	f43f adef 	beq.w	800b298 <_strtod_l+0x488>
 800b6ba:	4b24      	ldr	r3, [pc, #144]	; (800b74c <_strtod_l+0x93c>)
 800b6bc:	ea0a 0303 	and.w	r3, sl, r3
 800b6c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b6c4:	f04f 0800 	mov.w	r8, #0
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1a2      	bne.n	800b614 <_strtod_l+0x804>
 800b6ce:	e5ed      	b.n	800b2ac <_strtod_l+0x49c>
 800b6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d4:	e7e9      	b.n	800b6aa <_strtod_l+0x89a>
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	e7e7      	b.n	800b6aa <_strtod_l+0x89a>
 800b6da:	ea53 0308 	orrs.w	r3, r3, r8
 800b6de:	d08a      	beq.n	800b5f6 <_strtod_l+0x7e6>
 800b6e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e2:	b1e3      	cbz	r3, 800b71e <_strtod_l+0x90e>
 800b6e4:	ea13 0f0a 	tst.w	r3, sl
 800b6e8:	d0ee      	beq.n	800b6c8 <_strtod_l+0x8b8>
 800b6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ec:	9a04      	ldr	r2, [sp, #16]
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	b1c3      	cbz	r3, 800b726 <_strtod_l+0x916>
 800b6f4:	f7ff fb70 	bl	800add8 <sulp>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	ec51 0b18 	vmov	r0, r1, d8
 800b700:	f7f4 fdd4 	bl	80002ac <__adddf3>
 800b704:	4680      	mov	r8, r0
 800b706:	4689      	mov	r9, r1
 800b708:	e7de      	b.n	800b6c8 <_strtod_l+0x8b8>
 800b70a:	4013      	ands	r3, r2
 800b70c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b710:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b714:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b718:	f04f 38ff 	mov.w	r8, #4294967295
 800b71c:	e7d4      	b.n	800b6c8 <_strtod_l+0x8b8>
 800b71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b720:	ea13 0f08 	tst.w	r3, r8
 800b724:	e7e0      	b.n	800b6e8 <_strtod_l+0x8d8>
 800b726:	f7ff fb57 	bl	800add8 <sulp>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	ec51 0b18 	vmov	r0, r1, d8
 800b732:	f7f4 fdb9 	bl	80002a8 <__aeabi_dsub>
 800b736:	2200      	movs	r2, #0
 800b738:	2300      	movs	r3, #0
 800b73a:	4680      	mov	r8, r0
 800b73c:	4689      	mov	r9, r1
 800b73e:	f7f5 f9d3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b742:	2800      	cmp	r0, #0
 800b744:	d0c0      	beq.n	800b6c8 <_strtod_l+0x8b8>
 800b746:	e618      	b.n	800b37a <_strtod_l+0x56a>
 800b748:	fffffc02 	.word	0xfffffc02
 800b74c:	7ff00000 	.word	0x7ff00000
 800b750:	39500000 	.word	0x39500000
 800b754:	000fffff 	.word	0x000fffff
 800b758:	7fefffff 	.word	0x7fefffff
 800b75c:	08012a10 	.word	0x08012a10
 800b760:	4659      	mov	r1, fp
 800b762:	4628      	mov	r0, r5
 800b764:	f002 ff9e 	bl	800e6a4 <__ratio>
 800b768:	ec57 6b10 	vmov	r6, r7, d0
 800b76c:	ee10 0a10 	vmov	r0, s0
 800b770:	2200      	movs	r2, #0
 800b772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b776:	4639      	mov	r1, r7
 800b778:	f7f5 f9ca 	bl	8000b10 <__aeabi_dcmple>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d071      	beq.n	800b864 <_strtod_l+0xa54>
 800b780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b782:	2b00      	cmp	r3, #0
 800b784:	d17c      	bne.n	800b880 <_strtod_l+0xa70>
 800b786:	f1b8 0f00 	cmp.w	r8, #0
 800b78a:	d15a      	bne.n	800b842 <_strtod_l+0xa32>
 800b78c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b790:	2b00      	cmp	r3, #0
 800b792:	d15d      	bne.n	800b850 <_strtod_l+0xa40>
 800b794:	4b90      	ldr	r3, [pc, #576]	; (800b9d8 <_strtod_l+0xbc8>)
 800b796:	2200      	movs	r2, #0
 800b798:	4630      	mov	r0, r6
 800b79a:	4639      	mov	r1, r7
 800b79c:	f7f5 f9ae 	bl	8000afc <__aeabi_dcmplt>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d15c      	bne.n	800b85e <_strtod_l+0xa4e>
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4b8c      	ldr	r3, [pc, #560]	; (800b9dc <_strtod_l+0xbcc>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f7f4 ff34 	bl	8000618 <__aeabi_dmul>
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b7b8:	9606      	str	r6, [sp, #24]
 800b7ba:	9307      	str	r3, [sp, #28]
 800b7bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b7c4:	4b86      	ldr	r3, [pc, #536]	; (800b9e0 <_strtod_l+0xbd0>)
 800b7c6:	ea0a 0303 	and.w	r3, sl, r3
 800b7ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b7cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7ce:	4b85      	ldr	r3, [pc, #532]	; (800b9e4 <_strtod_l+0xbd4>)
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	f040 8090 	bne.w	800b8f6 <_strtod_l+0xae6>
 800b7d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b7da:	ec49 8b10 	vmov	d0, r8, r9
 800b7de:	f002 fe97 	bl	800e510 <__ulp>
 800b7e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7e6:	ec51 0b10 	vmov	r0, r1, d0
 800b7ea:	f7f4 ff15 	bl	8000618 <__aeabi_dmul>
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	464b      	mov	r3, r9
 800b7f2:	f7f4 fd5b 	bl	80002ac <__adddf3>
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4979      	ldr	r1, [pc, #484]	; (800b9e0 <_strtod_l+0xbd0>)
 800b7fa:	4a7b      	ldr	r2, [pc, #492]	; (800b9e8 <_strtod_l+0xbd8>)
 800b7fc:	4019      	ands	r1, r3
 800b7fe:	4291      	cmp	r1, r2
 800b800:	4680      	mov	r8, r0
 800b802:	d944      	bls.n	800b88e <_strtod_l+0xa7e>
 800b804:	ee18 2a90 	vmov	r2, s17
 800b808:	4b78      	ldr	r3, [pc, #480]	; (800b9ec <_strtod_l+0xbdc>)
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d104      	bne.n	800b818 <_strtod_l+0xa08>
 800b80e:	ee18 3a10 	vmov	r3, s16
 800b812:	3301      	adds	r3, #1
 800b814:	f43f ad40 	beq.w	800b298 <_strtod_l+0x488>
 800b818:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b9ec <_strtod_l+0xbdc>
 800b81c:	f04f 38ff 	mov.w	r8, #4294967295
 800b820:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b822:	4620      	mov	r0, r4
 800b824:	f002 fb48 	bl	800deb8 <_Bfree>
 800b828:	9905      	ldr	r1, [sp, #20]
 800b82a:	4620      	mov	r0, r4
 800b82c:	f002 fb44 	bl	800deb8 <_Bfree>
 800b830:	4659      	mov	r1, fp
 800b832:	4620      	mov	r0, r4
 800b834:	f002 fb40 	bl	800deb8 <_Bfree>
 800b838:	4629      	mov	r1, r5
 800b83a:	4620      	mov	r0, r4
 800b83c:	f002 fb3c 	bl	800deb8 <_Bfree>
 800b840:	e609      	b.n	800b456 <_strtod_l+0x646>
 800b842:	f1b8 0f01 	cmp.w	r8, #1
 800b846:	d103      	bne.n	800b850 <_strtod_l+0xa40>
 800b848:	f1b9 0f00 	cmp.w	r9, #0
 800b84c:	f43f ad95 	beq.w	800b37a <_strtod_l+0x56a>
 800b850:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b9a8 <_strtod_l+0xb98>
 800b854:	4f60      	ldr	r7, [pc, #384]	; (800b9d8 <_strtod_l+0xbc8>)
 800b856:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b85a:	2600      	movs	r6, #0
 800b85c:	e7ae      	b.n	800b7bc <_strtod_l+0x9ac>
 800b85e:	4f5f      	ldr	r7, [pc, #380]	; (800b9dc <_strtod_l+0xbcc>)
 800b860:	2600      	movs	r6, #0
 800b862:	e7a7      	b.n	800b7b4 <_strtod_l+0x9a4>
 800b864:	4b5d      	ldr	r3, [pc, #372]	; (800b9dc <_strtod_l+0xbcc>)
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	2200      	movs	r2, #0
 800b86c:	f7f4 fed4 	bl	8000618 <__aeabi_dmul>
 800b870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	2b00      	cmp	r3, #0
 800b878:	d09c      	beq.n	800b7b4 <_strtod_l+0x9a4>
 800b87a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b87e:	e79d      	b.n	800b7bc <_strtod_l+0x9ac>
 800b880:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b9b0 <_strtod_l+0xba0>
 800b884:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b888:	ec57 6b17 	vmov	r6, r7, d7
 800b88c:	e796      	b.n	800b7bc <_strtod_l+0x9ac>
 800b88e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b892:	9b04      	ldr	r3, [sp, #16]
 800b894:	46ca      	mov	sl, r9
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1c2      	bne.n	800b820 <_strtod_l+0xa10>
 800b89a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b89e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a0:	0d1b      	lsrs	r3, r3, #20
 800b8a2:	051b      	lsls	r3, r3, #20
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d1bb      	bne.n	800b820 <_strtod_l+0xa10>
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 fa14 	bl	8000cd8 <__aeabi_d2lz>
 800b8b0:	f7f4 fe84 	bl	80005bc <__aeabi_l2d>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f4 fcf4 	bl	80002a8 <__aeabi_dsub>
 800b8c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8c6:	ea43 0308 	orr.w	r3, r3, r8
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	460f      	mov	r7, r1
 800b8d0:	d054      	beq.n	800b97c <_strtod_l+0xb6c>
 800b8d2:	a339      	add	r3, pc, #228	; (adr r3, 800b9b8 <_strtod_l+0xba8>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	f7f5 f910 	bl	8000afc <__aeabi_dcmplt>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	f47f ace5 	bne.w	800b2ac <_strtod_l+0x49c>
 800b8e2:	a337      	add	r3, pc, #220	; (adr r3, 800b9c0 <_strtod_l+0xbb0>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f5 f924 	bl	8000b38 <__aeabi_dcmpgt>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d095      	beq.n	800b820 <_strtod_l+0xa10>
 800b8f4:	e4da      	b.n	800b2ac <_strtod_l+0x49c>
 800b8f6:	9b04      	ldr	r3, [sp, #16]
 800b8f8:	b333      	cbz	r3, 800b948 <_strtod_l+0xb38>
 800b8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b900:	d822      	bhi.n	800b948 <_strtod_l+0xb38>
 800b902:	a331      	add	r3, pc, #196	; (adr r3, 800b9c8 <_strtod_l+0xbb8>)
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f5 f900 	bl	8000b10 <__aeabi_dcmple>
 800b910:	b1a0      	cbz	r0, 800b93c <_strtod_l+0xb2c>
 800b912:	4639      	mov	r1, r7
 800b914:	4630      	mov	r0, r6
 800b916:	f7f5 f957 	bl	8000bc8 <__aeabi_d2uiz>
 800b91a:	2801      	cmp	r0, #1
 800b91c:	bf38      	it	cc
 800b91e:	2001      	movcc	r0, #1
 800b920:	f7f4 fe00 	bl	8000524 <__aeabi_ui2d>
 800b924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b926:	4606      	mov	r6, r0
 800b928:	460f      	mov	r7, r1
 800b92a:	bb23      	cbnz	r3, 800b976 <_strtod_l+0xb66>
 800b92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b930:	9010      	str	r0, [sp, #64]	; 0x40
 800b932:	9311      	str	r3, [sp, #68]	; 0x44
 800b934:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b938:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b93c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b93e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b940:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	930f      	str	r3, [sp, #60]	; 0x3c
 800b948:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b94c:	eeb0 0a48 	vmov.f32	s0, s16
 800b950:	eef0 0a68 	vmov.f32	s1, s17
 800b954:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b958:	f002 fdda 	bl	800e510 <__ulp>
 800b95c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b960:	ec53 2b10 	vmov	r2, r3, d0
 800b964:	f7f4 fe58 	bl	8000618 <__aeabi_dmul>
 800b968:	ec53 2b18 	vmov	r2, r3, d8
 800b96c:	f7f4 fc9e 	bl	80002ac <__adddf3>
 800b970:	4680      	mov	r8, r0
 800b972:	4689      	mov	r9, r1
 800b974:	e78d      	b.n	800b892 <_strtod_l+0xa82>
 800b976:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b97a:	e7db      	b.n	800b934 <_strtod_l+0xb24>
 800b97c:	a314      	add	r3, pc, #80	; (adr r3, 800b9d0 <_strtod_l+0xbc0>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f5 f8bb 	bl	8000afc <__aeabi_dcmplt>
 800b986:	e7b3      	b.n	800b8f0 <_strtod_l+0xae0>
 800b988:	2300      	movs	r3, #0
 800b98a:	930a      	str	r3, [sp, #40]	; 0x28
 800b98c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b990:	6013      	str	r3, [r2, #0]
 800b992:	f7ff ba7c 	b.w	800ae8e <_strtod_l+0x7e>
 800b996:	2a65      	cmp	r2, #101	; 0x65
 800b998:	f43f ab75 	beq.w	800b086 <_strtod_l+0x276>
 800b99c:	2a45      	cmp	r2, #69	; 0x45
 800b99e:	f43f ab72 	beq.w	800b086 <_strtod_l+0x276>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f7ff bbaa 	b.w	800b0fc <_strtod_l+0x2ec>
 800b9a8:	00000000 	.word	0x00000000
 800b9ac:	bff00000 	.word	0xbff00000
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	3ff00000 	.word	0x3ff00000
 800b9b8:	94a03595 	.word	0x94a03595
 800b9bc:	3fdfffff 	.word	0x3fdfffff
 800b9c0:	35afe535 	.word	0x35afe535
 800b9c4:	3fe00000 	.word	0x3fe00000
 800b9c8:	ffc00000 	.word	0xffc00000
 800b9cc:	41dfffff 	.word	0x41dfffff
 800b9d0:	94a03595 	.word	0x94a03595
 800b9d4:	3fcfffff 	.word	0x3fcfffff
 800b9d8:	3ff00000 	.word	0x3ff00000
 800b9dc:	3fe00000 	.word	0x3fe00000
 800b9e0:	7ff00000 	.word	0x7ff00000
 800b9e4:	7fe00000 	.word	0x7fe00000
 800b9e8:	7c9fffff 	.word	0x7c9fffff
 800b9ec:	7fefffff 	.word	0x7fefffff

0800b9f0 <strtod>:
 800b9f0:	460a      	mov	r2, r1
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	4802      	ldr	r0, [pc, #8]	; (800ba00 <strtod+0x10>)
 800b9f6:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <strtod+0x14>)
 800b9f8:	6800      	ldr	r0, [r0, #0]
 800b9fa:	f7ff ba09 	b.w	800ae10 <_strtod_l>
 800b9fe:	bf00      	nop
 800ba00:	2000020c 	.word	0x2000020c
 800ba04:	20000054 	.word	0x20000054

0800ba08 <__utoa>:
 800ba08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba0a:	4c1f      	ldr	r4, [pc, #124]	; (800ba88 <__utoa+0x80>)
 800ba0c:	b08b      	sub	sp, #44	; 0x2c
 800ba0e:	4605      	mov	r5, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	466e      	mov	r6, sp
 800ba14:	f104 0c20 	add.w	ip, r4, #32
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	6861      	ldr	r1, [r4, #4]
 800ba1c:	4637      	mov	r7, r6
 800ba1e:	c703      	stmia	r7!, {r0, r1}
 800ba20:	3408      	adds	r4, #8
 800ba22:	4564      	cmp	r4, ip
 800ba24:	463e      	mov	r6, r7
 800ba26:	d1f7      	bne.n	800ba18 <__utoa+0x10>
 800ba28:	7921      	ldrb	r1, [r4, #4]
 800ba2a:	7139      	strb	r1, [r7, #4]
 800ba2c:	1e91      	subs	r1, r2, #2
 800ba2e:	6820      	ldr	r0, [r4, #0]
 800ba30:	6038      	str	r0, [r7, #0]
 800ba32:	2922      	cmp	r1, #34	; 0x22
 800ba34:	f04f 0100 	mov.w	r1, #0
 800ba38:	d904      	bls.n	800ba44 <__utoa+0x3c>
 800ba3a:	7019      	strb	r1, [r3, #0]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4618      	mov	r0, r3
 800ba40:	b00b      	add	sp, #44	; 0x2c
 800ba42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba44:	1e58      	subs	r0, r3, #1
 800ba46:	4684      	mov	ip, r0
 800ba48:	fbb5 f7f2 	udiv	r7, r5, r2
 800ba4c:	fb02 5617 	mls	r6, r2, r7, r5
 800ba50:	3628      	adds	r6, #40	; 0x28
 800ba52:	446e      	add	r6, sp
 800ba54:	460c      	mov	r4, r1
 800ba56:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ba5a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ba5e:	462e      	mov	r6, r5
 800ba60:	42b2      	cmp	r2, r6
 800ba62:	f101 0101 	add.w	r1, r1, #1
 800ba66:	463d      	mov	r5, r7
 800ba68:	d9ee      	bls.n	800ba48 <__utoa+0x40>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	545a      	strb	r2, [r3, r1]
 800ba6e:	1919      	adds	r1, r3, r4
 800ba70:	1aa5      	subs	r5, r4, r2
 800ba72:	42aa      	cmp	r2, r5
 800ba74:	dae3      	bge.n	800ba3e <__utoa+0x36>
 800ba76:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ba7a:	780e      	ldrb	r6, [r1, #0]
 800ba7c:	7006      	strb	r6, [r0, #0]
 800ba7e:	3201      	adds	r2, #1
 800ba80:	f801 5901 	strb.w	r5, [r1], #-1
 800ba84:	e7f4      	b.n	800ba70 <__utoa+0x68>
 800ba86:	bf00      	nop
 800ba88:	08012a38 	.word	0x08012a38

0800ba8c <__cvt>:
 800ba8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba90:	ec55 4b10 	vmov	r4, r5, d0
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	460e      	mov	r6, r1
 800ba98:	4619      	mov	r1, r3
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	bfbb      	ittet	lt
 800ba9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800baa2:	461d      	movlt	r5, r3
 800baa4:	2300      	movge	r3, #0
 800baa6:	232d      	movlt	r3, #45	; 0x2d
 800baa8:	700b      	strb	r3, [r1, #0]
 800baaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bab0:	4691      	mov	r9, r2
 800bab2:	f023 0820 	bic.w	r8, r3, #32
 800bab6:	bfbc      	itt	lt
 800bab8:	4622      	movlt	r2, r4
 800baba:	4614      	movlt	r4, r2
 800babc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bac0:	d005      	beq.n	800bace <__cvt+0x42>
 800bac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bac6:	d100      	bne.n	800baca <__cvt+0x3e>
 800bac8:	3601      	adds	r6, #1
 800baca:	2102      	movs	r1, #2
 800bacc:	e000      	b.n	800bad0 <__cvt+0x44>
 800bace:	2103      	movs	r1, #3
 800bad0:	ab03      	add	r3, sp, #12
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	ab02      	add	r3, sp, #8
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	ec45 4b10 	vmov	d0, r4, r5
 800badc:	4653      	mov	r3, sl
 800bade:	4632      	mov	r2, r6
 800bae0:	f000 ff4e 	bl	800c980 <_dtoa_r>
 800bae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bae8:	4607      	mov	r7, r0
 800baea:	d102      	bne.n	800baf2 <__cvt+0x66>
 800baec:	f019 0f01 	tst.w	r9, #1
 800baf0:	d022      	beq.n	800bb38 <__cvt+0xac>
 800baf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800baf6:	eb07 0906 	add.w	r9, r7, r6
 800bafa:	d110      	bne.n	800bb1e <__cvt+0x92>
 800bafc:	783b      	ldrb	r3, [r7, #0]
 800bafe:	2b30      	cmp	r3, #48	; 0x30
 800bb00:	d10a      	bne.n	800bb18 <__cvt+0x8c>
 800bb02:	2200      	movs	r2, #0
 800bb04:	2300      	movs	r3, #0
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 ffed 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb0e:	b918      	cbnz	r0, 800bb18 <__cvt+0x8c>
 800bb10:	f1c6 0601 	rsb	r6, r6, #1
 800bb14:	f8ca 6000 	str.w	r6, [sl]
 800bb18:	f8da 3000 	ldr.w	r3, [sl]
 800bb1c:	4499      	add	r9, r3
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2300      	movs	r3, #0
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 ffdf 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb2a:	b108      	cbz	r0, 800bb30 <__cvt+0xa4>
 800bb2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb30:	2230      	movs	r2, #48	; 0x30
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	454b      	cmp	r3, r9
 800bb36:	d307      	bcc.n	800bb48 <__cvt+0xbc>
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb3c:	1bdb      	subs	r3, r3, r7
 800bb3e:	4638      	mov	r0, r7
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	b004      	add	sp, #16
 800bb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb48:	1c59      	adds	r1, r3, #1
 800bb4a:	9103      	str	r1, [sp, #12]
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	e7f0      	b.n	800bb32 <__cvt+0xa6>

0800bb50 <__exponent>:
 800bb50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb52:	4603      	mov	r3, r0
 800bb54:	2900      	cmp	r1, #0
 800bb56:	bfb8      	it	lt
 800bb58:	4249      	neglt	r1, r1
 800bb5a:	f803 2b02 	strb.w	r2, [r3], #2
 800bb5e:	bfb4      	ite	lt
 800bb60:	222d      	movlt	r2, #45	; 0x2d
 800bb62:	222b      	movge	r2, #43	; 0x2b
 800bb64:	2909      	cmp	r1, #9
 800bb66:	7042      	strb	r2, [r0, #1]
 800bb68:	dd2a      	ble.n	800bbc0 <__exponent+0x70>
 800bb6a:	f10d 0207 	add.w	r2, sp, #7
 800bb6e:	4617      	mov	r7, r2
 800bb70:	260a      	movs	r6, #10
 800bb72:	4694      	mov	ip, r2
 800bb74:	fb91 f5f6 	sdiv	r5, r1, r6
 800bb78:	fb06 1415 	mls	r4, r6, r5, r1
 800bb7c:	3430      	adds	r4, #48	; 0x30
 800bb7e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bb82:	460c      	mov	r4, r1
 800bb84:	2c63      	cmp	r4, #99	; 0x63
 800bb86:	f102 32ff 	add.w	r2, r2, #4294967295
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	dcf1      	bgt.n	800bb72 <__exponent+0x22>
 800bb8e:	3130      	adds	r1, #48	; 0x30
 800bb90:	f1ac 0402 	sub.w	r4, ip, #2
 800bb94:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bb98:	1c41      	adds	r1, r0, #1
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	42ba      	cmp	r2, r7
 800bb9e:	d30a      	bcc.n	800bbb6 <__exponent+0x66>
 800bba0:	f10d 0209 	add.w	r2, sp, #9
 800bba4:	eba2 020c 	sub.w	r2, r2, ip
 800bba8:	42bc      	cmp	r4, r7
 800bbaa:	bf88      	it	hi
 800bbac:	2200      	movhi	r2, #0
 800bbae:	4413      	add	r3, r2
 800bbb0:	1a18      	subs	r0, r3, r0
 800bbb2:	b003      	add	sp, #12
 800bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bbba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bbbe:	e7ed      	b.n	800bb9c <__exponent+0x4c>
 800bbc0:	2330      	movs	r3, #48	; 0x30
 800bbc2:	3130      	adds	r1, #48	; 0x30
 800bbc4:	7083      	strb	r3, [r0, #2]
 800bbc6:	70c1      	strb	r1, [r0, #3]
 800bbc8:	1d03      	adds	r3, r0, #4
 800bbca:	e7f1      	b.n	800bbb0 <__exponent+0x60>

0800bbcc <_printf_float>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	ed2d 8b02 	vpush	{d8}
 800bbd4:	b08d      	sub	sp, #52	; 0x34
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bbdc:	4616      	mov	r6, r2
 800bbde:	461f      	mov	r7, r3
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	f000 fd91 	bl	800c708 <_localeconv_r>
 800bbe6:	f8d0 a000 	ldr.w	sl, [r0]
 800bbea:	4650      	mov	r0, sl
 800bbec:	f7f4 fb50 	bl	8000290 <strlen>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	930a      	str	r3, [sp, #40]	; 0x28
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	9305      	str	r3, [sp, #20]
 800bbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800bbfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc00:	3307      	adds	r3, #7
 800bc02:	f023 0307 	bic.w	r3, r3, #7
 800bc06:	f103 0208 	add.w	r2, r3, #8
 800bc0a:	f8c8 2000 	str.w	r2, [r8]
 800bc0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc1c:	ee08 0a10 	vmov	s16, r0
 800bc20:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bc24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc28:	4b9e      	ldr	r3, [pc, #632]	; (800bea4 <_printf_float+0x2d8>)
 800bc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2e:	f7f4 ff8d 	bl	8000b4c <__aeabi_dcmpun>
 800bc32:	bb88      	cbnz	r0, 800bc98 <_printf_float+0xcc>
 800bc34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc38:	4b9a      	ldr	r3, [pc, #616]	; (800bea4 <_printf_float+0x2d8>)
 800bc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3e:	f7f4 ff67 	bl	8000b10 <__aeabi_dcmple>
 800bc42:	bb48      	cbnz	r0, 800bc98 <_printf_float+0xcc>
 800bc44:	2200      	movs	r2, #0
 800bc46:	2300      	movs	r3, #0
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	f7f4 ff56 	bl	8000afc <__aeabi_dcmplt>
 800bc50:	b110      	cbz	r0, 800bc58 <_printf_float+0x8c>
 800bc52:	232d      	movs	r3, #45	; 0x2d
 800bc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc58:	4a93      	ldr	r2, [pc, #588]	; (800bea8 <_printf_float+0x2dc>)
 800bc5a:	4b94      	ldr	r3, [pc, #592]	; (800beac <_printf_float+0x2e0>)
 800bc5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc60:	bf94      	ite	ls
 800bc62:	4690      	movls	r8, r2
 800bc64:	4698      	movhi	r8, r3
 800bc66:	2303      	movs	r3, #3
 800bc68:	6123      	str	r3, [r4, #16]
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	f023 0304 	bic.w	r3, r3, #4
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	f04f 0900 	mov.w	r9, #0
 800bc76:	9700      	str	r7, [sp, #0]
 800bc78:	4633      	mov	r3, r6
 800bc7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f9da 	bl	800c038 <_printf_common>
 800bc84:	3001      	adds	r0, #1
 800bc86:	f040 8090 	bne.w	800bdaa <_printf_float+0x1de>
 800bc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8e:	b00d      	add	sp, #52	; 0x34
 800bc90:	ecbd 8b02 	vpop	{d8}
 800bc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc98:	4642      	mov	r2, r8
 800bc9a:	464b      	mov	r3, r9
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 ff54 	bl	8000b4c <__aeabi_dcmpun>
 800bca4:	b140      	cbz	r0, 800bcb8 <_printf_float+0xec>
 800bca6:	464b      	mov	r3, r9
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfbc      	itt	lt
 800bcac:	232d      	movlt	r3, #45	; 0x2d
 800bcae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bcb2:	4a7f      	ldr	r2, [pc, #508]	; (800beb0 <_printf_float+0x2e4>)
 800bcb4:	4b7f      	ldr	r3, [pc, #508]	; (800beb4 <_printf_float+0x2e8>)
 800bcb6:	e7d1      	b.n	800bc5c <_printf_float+0x90>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bcbe:	9206      	str	r2, [sp, #24]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	d13f      	bne.n	800bd44 <_printf_float+0x178>
 800bcc4:	2306      	movs	r3, #6
 800bcc6:	6063      	str	r3, [r4, #4]
 800bcc8:	9b05      	ldr	r3, [sp, #20]
 800bcca:	6861      	ldr	r1, [r4, #4]
 800bccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	ab0a      	add	r3, sp, #40	; 0x28
 800bcd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bcda:	ab09      	add	r3, sp, #36	; 0x24
 800bcdc:	ec49 8b10 	vmov	d0, r8, r9
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	6022      	str	r2, [r4, #0]
 800bce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bce8:	4628      	mov	r0, r5
 800bcea:	f7ff fecf 	bl	800ba8c <__cvt>
 800bcee:	9b06      	ldr	r3, [sp, #24]
 800bcf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcf2:	2b47      	cmp	r3, #71	; 0x47
 800bcf4:	4680      	mov	r8, r0
 800bcf6:	d108      	bne.n	800bd0a <_printf_float+0x13e>
 800bcf8:	1cc8      	adds	r0, r1, #3
 800bcfa:	db02      	blt.n	800bd02 <_printf_float+0x136>
 800bcfc:	6863      	ldr	r3, [r4, #4]
 800bcfe:	4299      	cmp	r1, r3
 800bd00:	dd41      	ble.n	800bd86 <_printf_float+0x1ba>
 800bd02:	f1ab 0302 	sub.w	r3, fp, #2
 800bd06:	fa5f fb83 	uxtb.w	fp, r3
 800bd0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd0e:	d820      	bhi.n	800bd52 <_printf_float+0x186>
 800bd10:	3901      	subs	r1, #1
 800bd12:	465a      	mov	r2, fp
 800bd14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd18:	9109      	str	r1, [sp, #36]	; 0x24
 800bd1a:	f7ff ff19 	bl	800bb50 <__exponent>
 800bd1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd20:	1813      	adds	r3, r2, r0
 800bd22:	2a01      	cmp	r2, #1
 800bd24:	4681      	mov	r9, r0
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	dc02      	bgt.n	800bd30 <_printf_float+0x164>
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	07d2      	lsls	r2, r2, #31
 800bd2e:	d501      	bpl.n	800bd34 <_printf_float+0x168>
 800bd30:	3301      	adds	r3, #1
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d09c      	beq.n	800bc76 <_printf_float+0xaa>
 800bd3c:	232d      	movs	r3, #45	; 0x2d
 800bd3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd42:	e798      	b.n	800bc76 <_printf_float+0xaa>
 800bd44:	9a06      	ldr	r2, [sp, #24]
 800bd46:	2a47      	cmp	r2, #71	; 0x47
 800bd48:	d1be      	bne.n	800bcc8 <_printf_float+0xfc>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1bc      	bne.n	800bcc8 <_printf_float+0xfc>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e7b9      	b.n	800bcc6 <_printf_float+0xfa>
 800bd52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd56:	d118      	bne.n	800bd8a <_printf_float+0x1be>
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	6863      	ldr	r3, [r4, #4]
 800bd5c:	dd0b      	ble.n	800bd76 <_printf_float+0x1aa>
 800bd5e:	6121      	str	r1, [r4, #16]
 800bd60:	b913      	cbnz	r3, 800bd68 <_printf_float+0x19c>
 800bd62:	6822      	ldr	r2, [r4, #0]
 800bd64:	07d0      	lsls	r0, r2, #31
 800bd66:	d502      	bpl.n	800bd6e <_printf_float+0x1a2>
 800bd68:	3301      	adds	r3, #1
 800bd6a:	440b      	add	r3, r1
 800bd6c:	6123      	str	r3, [r4, #16]
 800bd6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd70:	f04f 0900 	mov.w	r9, #0
 800bd74:	e7de      	b.n	800bd34 <_printf_float+0x168>
 800bd76:	b913      	cbnz	r3, 800bd7e <_printf_float+0x1b2>
 800bd78:	6822      	ldr	r2, [r4, #0]
 800bd7a:	07d2      	lsls	r2, r2, #31
 800bd7c:	d501      	bpl.n	800bd82 <_printf_float+0x1b6>
 800bd7e:	3302      	adds	r3, #2
 800bd80:	e7f4      	b.n	800bd6c <_printf_float+0x1a0>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e7f2      	b.n	800bd6c <_printf_float+0x1a0>
 800bd86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8c:	4299      	cmp	r1, r3
 800bd8e:	db05      	blt.n	800bd9c <_printf_float+0x1d0>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	6121      	str	r1, [r4, #16]
 800bd94:	07d8      	lsls	r0, r3, #31
 800bd96:	d5ea      	bpl.n	800bd6e <_printf_float+0x1a2>
 800bd98:	1c4b      	adds	r3, r1, #1
 800bd9a:	e7e7      	b.n	800bd6c <_printf_float+0x1a0>
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	bfd4      	ite	le
 800bda0:	f1c1 0202 	rsble	r2, r1, #2
 800bda4:	2201      	movgt	r2, #1
 800bda6:	4413      	add	r3, r2
 800bda8:	e7e0      	b.n	800bd6c <_printf_float+0x1a0>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	055a      	lsls	r2, r3, #21
 800bdae:	d407      	bmi.n	800bdc0 <_printf_float+0x1f4>
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	4642      	mov	r2, r8
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b8      	blx	r7
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d12c      	bne.n	800be18 <_printf_float+0x24c>
 800bdbe:	e764      	b.n	800bc8a <_printf_float+0xbe>
 800bdc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdc4:	f240 80e0 	bls.w	800bf88 <_printf_float+0x3bc>
 800bdc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f7f4 fe8a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d034      	beq.n	800be42 <_printf_float+0x276>
 800bdd8:	4a37      	ldr	r2, [pc, #220]	; (800beb8 <_printf_float+0x2ec>)
 800bdda:	2301      	movs	r3, #1
 800bddc:	4631      	mov	r1, r6
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f af51 	beq.w	800bc8a <_printf_float+0xbe>
 800bde8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdec:	429a      	cmp	r2, r3
 800bdee:	db02      	blt.n	800bdf6 <_printf_float+0x22a>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	07d8      	lsls	r0, r3, #31
 800bdf4:	d510      	bpl.n	800be18 <_printf_float+0x24c>
 800bdf6:	ee18 3a10 	vmov	r3, s16
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4628      	mov	r0, r5
 800be00:	47b8      	blx	r7
 800be02:	3001      	adds	r0, #1
 800be04:	f43f af41 	beq.w	800bc8a <_printf_float+0xbe>
 800be08:	f04f 0800 	mov.w	r8, #0
 800be0c:	f104 091a 	add.w	r9, r4, #26
 800be10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be12:	3b01      	subs	r3, #1
 800be14:	4543      	cmp	r3, r8
 800be16:	dc09      	bgt.n	800be2c <_printf_float+0x260>
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	079b      	lsls	r3, r3, #30
 800be1c:	f100 8107 	bmi.w	800c02e <_printf_float+0x462>
 800be20:	68e0      	ldr	r0, [r4, #12]
 800be22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be24:	4298      	cmp	r0, r3
 800be26:	bfb8      	it	lt
 800be28:	4618      	movlt	r0, r3
 800be2a:	e730      	b.n	800bc8e <_printf_float+0xc2>
 800be2c:	2301      	movs	r3, #1
 800be2e:	464a      	mov	r2, r9
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	f43f af27 	beq.w	800bc8a <_printf_float+0xbe>
 800be3c:	f108 0801 	add.w	r8, r8, #1
 800be40:	e7e6      	b.n	800be10 <_printf_float+0x244>
 800be42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	dc39      	bgt.n	800bebc <_printf_float+0x2f0>
 800be48:	4a1b      	ldr	r2, [pc, #108]	; (800beb8 <_printf_float+0x2ec>)
 800be4a:	2301      	movs	r3, #1
 800be4c:	4631      	mov	r1, r6
 800be4e:	4628      	mov	r0, r5
 800be50:	47b8      	blx	r7
 800be52:	3001      	adds	r0, #1
 800be54:	f43f af19 	beq.w	800bc8a <_printf_float+0xbe>
 800be58:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be5c:	4313      	orrs	r3, r2
 800be5e:	d102      	bne.n	800be66 <_printf_float+0x29a>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	07d9      	lsls	r1, r3, #31
 800be64:	d5d8      	bpl.n	800be18 <_printf_float+0x24c>
 800be66:	ee18 3a10 	vmov	r3, s16
 800be6a:	4652      	mov	r2, sl
 800be6c:	4631      	mov	r1, r6
 800be6e:	4628      	mov	r0, r5
 800be70:	47b8      	blx	r7
 800be72:	3001      	adds	r0, #1
 800be74:	f43f af09 	beq.w	800bc8a <_printf_float+0xbe>
 800be78:	f04f 0900 	mov.w	r9, #0
 800be7c:	f104 0a1a 	add.w	sl, r4, #26
 800be80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be82:	425b      	negs	r3, r3
 800be84:	454b      	cmp	r3, r9
 800be86:	dc01      	bgt.n	800be8c <_printf_float+0x2c0>
 800be88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be8a:	e792      	b.n	800bdb2 <_printf_float+0x1e6>
 800be8c:	2301      	movs	r3, #1
 800be8e:	4652      	mov	r2, sl
 800be90:	4631      	mov	r1, r6
 800be92:	4628      	mov	r0, r5
 800be94:	47b8      	blx	r7
 800be96:	3001      	adds	r0, #1
 800be98:	f43f aef7 	beq.w	800bc8a <_printf_float+0xbe>
 800be9c:	f109 0901 	add.w	r9, r9, #1
 800bea0:	e7ee      	b.n	800be80 <_printf_float+0x2b4>
 800bea2:	bf00      	nop
 800bea4:	7fefffff 	.word	0x7fefffff
 800bea8:	08012a5d 	.word	0x08012a5d
 800beac:	08012a61 	.word	0x08012a61
 800beb0:	08012a65 	.word	0x08012a65
 800beb4:	08012a69 	.word	0x08012a69
 800beb8:	08012e9c 	.word	0x08012e9c
 800bebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bec0:	429a      	cmp	r2, r3
 800bec2:	bfa8      	it	ge
 800bec4:	461a      	movge	r2, r3
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	4691      	mov	r9, r2
 800beca:	dc37      	bgt.n	800bf3c <_printf_float+0x370>
 800becc:	f04f 0b00 	mov.w	fp, #0
 800bed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bed4:	f104 021a 	add.w	r2, r4, #26
 800bed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	eba3 0309 	sub.w	r3, r3, r9
 800bee0:	455b      	cmp	r3, fp
 800bee2:	dc33      	bgt.n	800bf4c <_printf_float+0x380>
 800bee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bee8:	429a      	cmp	r2, r3
 800beea:	db3b      	blt.n	800bf64 <_printf_float+0x398>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	07da      	lsls	r2, r3, #31
 800bef0:	d438      	bmi.n	800bf64 <_printf_float+0x398>
 800bef2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bef6:	eba2 0903 	sub.w	r9, r2, r3
 800befa:	9b05      	ldr	r3, [sp, #20]
 800befc:	1ad2      	subs	r2, r2, r3
 800befe:	4591      	cmp	r9, r2
 800bf00:	bfa8      	it	ge
 800bf02:	4691      	movge	r9, r2
 800bf04:	f1b9 0f00 	cmp.w	r9, #0
 800bf08:	dc35      	bgt.n	800bf76 <_printf_float+0x3aa>
 800bf0a:	f04f 0800 	mov.w	r8, #0
 800bf0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf12:	f104 0a1a 	add.w	sl, r4, #26
 800bf16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf1a:	1a9b      	subs	r3, r3, r2
 800bf1c:	eba3 0309 	sub.w	r3, r3, r9
 800bf20:	4543      	cmp	r3, r8
 800bf22:	f77f af79 	ble.w	800be18 <_printf_float+0x24c>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4652      	mov	r2, sl
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	f43f aeaa 	beq.w	800bc8a <_printf_float+0xbe>
 800bf36:	f108 0801 	add.w	r8, r8, #1
 800bf3a:	e7ec      	b.n	800bf16 <_printf_float+0x34a>
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4642      	mov	r2, r8
 800bf42:	4628      	mov	r0, r5
 800bf44:	47b8      	blx	r7
 800bf46:	3001      	adds	r0, #1
 800bf48:	d1c0      	bne.n	800becc <_printf_float+0x300>
 800bf4a:	e69e      	b.n	800bc8a <_printf_float+0xbe>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
 800bf52:	9205      	str	r2, [sp, #20]
 800bf54:	47b8      	blx	r7
 800bf56:	3001      	adds	r0, #1
 800bf58:	f43f ae97 	beq.w	800bc8a <_printf_float+0xbe>
 800bf5c:	9a05      	ldr	r2, [sp, #20]
 800bf5e:	f10b 0b01 	add.w	fp, fp, #1
 800bf62:	e7b9      	b.n	800bed8 <_printf_float+0x30c>
 800bf64:	ee18 3a10 	vmov	r3, s16
 800bf68:	4652      	mov	r2, sl
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	d1be      	bne.n	800bef2 <_printf_float+0x326>
 800bf74:	e689      	b.n	800bc8a <_printf_float+0xbe>
 800bf76:	9a05      	ldr	r2, [sp, #20]
 800bf78:	464b      	mov	r3, r9
 800bf7a:	4442      	add	r2, r8
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b8      	blx	r7
 800bf82:	3001      	adds	r0, #1
 800bf84:	d1c1      	bne.n	800bf0a <_printf_float+0x33e>
 800bf86:	e680      	b.n	800bc8a <_printf_float+0xbe>
 800bf88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf8a:	2a01      	cmp	r2, #1
 800bf8c:	dc01      	bgt.n	800bf92 <_printf_float+0x3c6>
 800bf8e:	07db      	lsls	r3, r3, #31
 800bf90:	d53a      	bpl.n	800c008 <_printf_float+0x43c>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4642      	mov	r2, r8
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f43f ae74 	beq.w	800bc8a <_printf_float+0xbe>
 800bfa2:	ee18 3a10 	vmov	r3, s16
 800bfa6:	4652      	mov	r2, sl
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	47b8      	blx	r7
 800bfae:	3001      	adds	r0, #1
 800bfb0:	f43f ae6b 	beq.w	800bc8a <_printf_float+0xbe>
 800bfb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bfc0:	f7f4 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 800bfc4:	b9d8      	cbnz	r0, 800bffe <_printf_float+0x432>
 800bfc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bfca:	f108 0201 	add.w	r2, r8, #1
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	47b8      	blx	r7
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d10e      	bne.n	800bff6 <_printf_float+0x42a>
 800bfd8:	e657      	b.n	800bc8a <_printf_float+0xbe>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	4652      	mov	r2, sl
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b8      	blx	r7
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f43f ae50 	beq.w	800bc8a <_printf_float+0xbe>
 800bfea:	f108 0801 	add.w	r8, r8, #1
 800bfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff0:	3b01      	subs	r3, #1
 800bff2:	4543      	cmp	r3, r8
 800bff4:	dcf1      	bgt.n	800bfda <_printf_float+0x40e>
 800bff6:	464b      	mov	r3, r9
 800bff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bffc:	e6da      	b.n	800bdb4 <_printf_float+0x1e8>
 800bffe:	f04f 0800 	mov.w	r8, #0
 800c002:	f104 0a1a 	add.w	sl, r4, #26
 800c006:	e7f2      	b.n	800bfee <_printf_float+0x422>
 800c008:	2301      	movs	r3, #1
 800c00a:	4642      	mov	r2, r8
 800c00c:	e7df      	b.n	800bfce <_printf_float+0x402>
 800c00e:	2301      	movs	r3, #1
 800c010:	464a      	mov	r2, r9
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	f43f ae36 	beq.w	800bc8a <_printf_float+0xbe>
 800c01e:	f108 0801 	add.w	r8, r8, #1
 800c022:	68e3      	ldr	r3, [r4, #12]
 800c024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c026:	1a5b      	subs	r3, r3, r1
 800c028:	4543      	cmp	r3, r8
 800c02a:	dcf0      	bgt.n	800c00e <_printf_float+0x442>
 800c02c:	e6f8      	b.n	800be20 <_printf_float+0x254>
 800c02e:	f04f 0800 	mov.w	r8, #0
 800c032:	f104 0919 	add.w	r9, r4, #25
 800c036:	e7f4      	b.n	800c022 <_printf_float+0x456>

0800c038 <_printf_common>:
 800c038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c03c:	4616      	mov	r6, r2
 800c03e:	4699      	mov	r9, r3
 800c040:	688a      	ldr	r2, [r1, #8]
 800c042:	690b      	ldr	r3, [r1, #16]
 800c044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c048:	4293      	cmp	r3, r2
 800c04a:	bfb8      	it	lt
 800c04c:	4613      	movlt	r3, r2
 800c04e:	6033      	str	r3, [r6, #0]
 800c050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c054:	4607      	mov	r7, r0
 800c056:	460c      	mov	r4, r1
 800c058:	b10a      	cbz	r2, 800c05e <_printf_common+0x26>
 800c05a:	3301      	adds	r3, #1
 800c05c:	6033      	str	r3, [r6, #0]
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	0699      	lsls	r1, r3, #26
 800c062:	bf42      	ittt	mi
 800c064:	6833      	ldrmi	r3, [r6, #0]
 800c066:	3302      	addmi	r3, #2
 800c068:	6033      	strmi	r3, [r6, #0]
 800c06a:	6825      	ldr	r5, [r4, #0]
 800c06c:	f015 0506 	ands.w	r5, r5, #6
 800c070:	d106      	bne.n	800c080 <_printf_common+0x48>
 800c072:	f104 0a19 	add.w	sl, r4, #25
 800c076:	68e3      	ldr	r3, [r4, #12]
 800c078:	6832      	ldr	r2, [r6, #0]
 800c07a:	1a9b      	subs	r3, r3, r2
 800c07c:	42ab      	cmp	r3, r5
 800c07e:	dc26      	bgt.n	800c0ce <_printf_common+0x96>
 800c080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c084:	1e13      	subs	r3, r2, #0
 800c086:	6822      	ldr	r2, [r4, #0]
 800c088:	bf18      	it	ne
 800c08a:	2301      	movne	r3, #1
 800c08c:	0692      	lsls	r2, r2, #26
 800c08e:	d42b      	bmi.n	800c0e8 <_printf_common+0xb0>
 800c090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c094:	4649      	mov	r1, r9
 800c096:	4638      	mov	r0, r7
 800c098:	47c0      	blx	r8
 800c09a:	3001      	adds	r0, #1
 800c09c:	d01e      	beq.n	800c0dc <_printf_common+0xa4>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	f003 0306 	and.w	r3, r3, #6
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	bf02      	ittt	eq
 800c0aa:	68e5      	ldreq	r5, [r4, #12]
 800c0ac:	6833      	ldreq	r3, [r6, #0]
 800c0ae:	1aed      	subeq	r5, r5, r3
 800c0b0:	68a3      	ldr	r3, [r4, #8]
 800c0b2:	bf0c      	ite	eq
 800c0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0b8:	2500      	movne	r5, #0
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	bfc4      	itt	gt
 800c0be:	1a9b      	subgt	r3, r3, r2
 800c0c0:	18ed      	addgt	r5, r5, r3
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	341a      	adds	r4, #26
 800c0c6:	42b5      	cmp	r5, r6
 800c0c8:	d11a      	bne.n	800c100 <_printf_common+0xc8>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e008      	b.n	800c0e0 <_printf_common+0xa8>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4652      	mov	r2, sl
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	47c0      	blx	r8
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d103      	bne.n	800c0e4 <_printf_common+0xac>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	e7c6      	b.n	800c076 <_printf_common+0x3e>
 800c0e8:	18e1      	adds	r1, r4, r3
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	2030      	movs	r0, #48	; 0x30
 800c0ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0f2:	4422      	add	r2, r4
 800c0f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0fc:	3302      	adds	r3, #2
 800c0fe:	e7c7      	b.n	800c090 <_printf_common+0x58>
 800c100:	2301      	movs	r3, #1
 800c102:	4622      	mov	r2, r4
 800c104:	4649      	mov	r1, r9
 800c106:	4638      	mov	r0, r7
 800c108:	47c0      	blx	r8
 800c10a:	3001      	adds	r0, #1
 800c10c:	d0e6      	beq.n	800c0dc <_printf_common+0xa4>
 800c10e:	3601      	adds	r6, #1
 800c110:	e7d9      	b.n	800c0c6 <_printf_common+0x8e>
	...

0800c114 <_printf_i>:
 800c114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c118:	7e0f      	ldrb	r7, [r1, #24]
 800c11a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c11c:	2f78      	cmp	r7, #120	; 0x78
 800c11e:	4691      	mov	r9, r2
 800c120:	4680      	mov	r8, r0
 800c122:	460c      	mov	r4, r1
 800c124:	469a      	mov	sl, r3
 800c126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c12a:	d807      	bhi.n	800c13c <_printf_i+0x28>
 800c12c:	2f62      	cmp	r7, #98	; 0x62
 800c12e:	d80a      	bhi.n	800c146 <_printf_i+0x32>
 800c130:	2f00      	cmp	r7, #0
 800c132:	f000 80d4 	beq.w	800c2de <_printf_i+0x1ca>
 800c136:	2f58      	cmp	r7, #88	; 0x58
 800c138:	f000 80c0 	beq.w	800c2bc <_printf_i+0x1a8>
 800c13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c144:	e03a      	b.n	800c1bc <_printf_i+0xa8>
 800c146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c14a:	2b15      	cmp	r3, #21
 800c14c:	d8f6      	bhi.n	800c13c <_printf_i+0x28>
 800c14e:	a101      	add	r1, pc, #4	; (adr r1, 800c154 <_printf_i+0x40>)
 800c150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c154:	0800c1ad 	.word	0x0800c1ad
 800c158:	0800c1c1 	.word	0x0800c1c1
 800c15c:	0800c13d 	.word	0x0800c13d
 800c160:	0800c13d 	.word	0x0800c13d
 800c164:	0800c13d 	.word	0x0800c13d
 800c168:	0800c13d 	.word	0x0800c13d
 800c16c:	0800c1c1 	.word	0x0800c1c1
 800c170:	0800c13d 	.word	0x0800c13d
 800c174:	0800c13d 	.word	0x0800c13d
 800c178:	0800c13d 	.word	0x0800c13d
 800c17c:	0800c13d 	.word	0x0800c13d
 800c180:	0800c2c5 	.word	0x0800c2c5
 800c184:	0800c1ed 	.word	0x0800c1ed
 800c188:	0800c27f 	.word	0x0800c27f
 800c18c:	0800c13d 	.word	0x0800c13d
 800c190:	0800c13d 	.word	0x0800c13d
 800c194:	0800c2e7 	.word	0x0800c2e7
 800c198:	0800c13d 	.word	0x0800c13d
 800c19c:	0800c1ed 	.word	0x0800c1ed
 800c1a0:	0800c13d 	.word	0x0800c13d
 800c1a4:	0800c13d 	.word	0x0800c13d
 800c1a8:	0800c287 	.word	0x0800c287
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	1d1a      	adds	r2, r3, #4
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	602a      	str	r2, [r5, #0]
 800c1b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e09f      	b.n	800c300 <_printf_i+0x1ec>
 800c1c0:	6820      	ldr	r0, [r4, #0]
 800c1c2:	682b      	ldr	r3, [r5, #0]
 800c1c4:	0607      	lsls	r7, r0, #24
 800c1c6:	f103 0104 	add.w	r1, r3, #4
 800c1ca:	6029      	str	r1, [r5, #0]
 800c1cc:	d501      	bpl.n	800c1d2 <_printf_i+0xbe>
 800c1ce:	681e      	ldr	r6, [r3, #0]
 800c1d0:	e003      	b.n	800c1da <_printf_i+0xc6>
 800c1d2:	0646      	lsls	r6, r0, #25
 800c1d4:	d5fb      	bpl.n	800c1ce <_printf_i+0xba>
 800c1d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	da03      	bge.n	800c1e6 <_printf_i+0xd2>
 800c1de:	232d      	movs	r3, #45	; 0x2d
 800c1e0:	4276      	negs	r6, r6
 800c1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e6:	485a      	ldr	r0, [pc, #360]	; (800c350 <_printf_i+0x23c>)
 800c1e8:	230a      	movs	r3, #10
 800c1ea:	e012      	b.n	800c212 <_printf_i+0xfe>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	6820      	ldr	r0, [r4, #0]
 800c1f0:	1d19      	adds	r1, r3, #4
 800c1f2:	6029      	str	r1, [r5, #0]
 800c1f4:	0605      	lsls	r5, r0, #24
 800c1f6:	d501      	bpl.n	800c1fc <_printf_i+0xe8>
 800c1f8:	681e      	ldr	r6, [r3, #0]
 800c1fa:	e002      	b.n	800c202 <_printf_i+0xee>
 800c1fc:	0641      	lsls	r1, r0, #25
 800c1fe:	d5fb      	bpl.n	800c1f8 <_printf_i+0xe4>
 800c200:	881e      	ldrh	r6, [r3, #0]
 800c202:	4853      	ldr	r0, [pc, #332]	; (800c350 <_printf_i+0x23c>)
 800c204:	2f6f      	cmp	r7, #111	; 0x6f
 800c206:	bf0c      	ite	eq
 800c208:	2308      	moveq	r3, #8
 800c20a:	230a      	movne	r3, #10
 800c20c:	2100      	movs	r1, #0
 800c20e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c212:	6865      	ldr	r5, [r4, #4]
 800c214:	60a5      	str	r5, [r4, #8]
 800c216:	2d00      	cmp	r5, #0
 800c218:	bfa2      	ittt	ge
 800c21a:	6821      	ldrge	r1, [r4, #0]
 800c21c:	f021 0104 	bicge.w	r1, r1, #4
 800c220:	6021      	strge	r1, [r4, #0]
 800c222:	b90e      	cbnz	r6, 800c228 <_printf_i+0x114>
 800c224:	2d00      	cmp	r5, #0
 800c226:	d04b      	beq.n	800c2c0 <_printf_i+0x1ac>
 800c228:	4615      	mov	r5, r2
 800c22a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c22e:	fb03 6711 	mls	r7, r3, r1, r6
 800c232:	5dc7      	ldrb	r7, [r0, r7]
 800c234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c238:	4637      	mov	r7, r6
 800c23a:	42bb      	cmp	r3, r7
 800c23c:	460e      	mov	r6, r1
 800c23e:	d9f4      	bls.n	800c22a <_printf_i+0x116>
 800c240:	2b08      	cmp	r3, #8
 800c242:	d10b      	bne.n	800c25c <_printf_i+0x148>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	07de      	lsls	r6, r3, #31
 800c248:	d508      	bpl.n	800c25c <_printf_i+0x148>
 800c24a:	6923      	ldr	r3, [r4, #16]
 800c24c:	6861      	ldr	r1, [r4, #4]
 800c24e:	4299      	cmp	r1, r3
 800c250:	bfde      	ittt	le
 800c252:	2330      	movle	r3, #48	; 0x30
 800c254:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c25c:	1b52      	subs	r2, r2, r5
 800c25e:	6122      	str	r2, [r4, #16]
 800c260:	f8cd a000 	str.w	sl, [sp]
 800c264:	464b      	mov	r3, r9
 800c266:	aa03      	add	r2, sp, #12
 800c268:	4621      	mov	r1, r4
 800c26a:	4640      	mov	r0, r8
 800c26c:	f7ff fee4 	bl	800c038 <_printf_common>
 800c270:	3001      	adds	r0, #1
 800c272:	d14a      	bne.n	800c30a <_printf_i+0x1f6>
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	b004      	add	sp, #16
 800c27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	f043 0320 	orr.w	r3, r3, #32
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	4833      	ldr	r0, [pc, #204]	; (800c354 <_printf_i+0x240>)
 800c288:	2778      	movs	r7, #120	; 0x78
 800c28a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	6829      	ldr	r1, [r5, #0]
 800c292:	061f      	lsls	r7, r3, #24
 800c294:	f851 6b04 	ldr.w	r6, [r1], #4
 800c298:	d402      	bmi.n	800c2a0 <_printf_i+0x18c>
 800c29a:	065f      	lsls	r7, r3, #25
 800c29c:	bf48      	it	mi
 800c29e:	b2b6      	uxthmi	r6, r6
 800c2a0:	07df      	lsls	r7, r3, #31
 800c2a2:	bf48      	it	mi
 800c2a4:	f043 0320 	orrmi.w	r3, r3, #32
 800c2a8:	6029      	str	r1, [r5, #0]
 800c2aa:	bf48      	it	mi
 800c2ac:	6023      	strmi	r3, [r4, #0]
 800c2ae:	b91e      	cbnz	r6, 800c2b8 <_printf_i+0x1a4>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	f023 0320 	bic.w	r3, r3, #32
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	2310      	movs	r3, #16
 800c2ba:	e7a7      	b.n	800c20c <_printf_i+0xf8>
 800c2bc:	4824      	ldr	r0, [pc, #144]	; (800c350 <_printf_i+0x23c>)
 800c2be:	e7e4      	b.n	800c28a <_printf_i+0x176>
 800c2c0:	4615      	mov	r5, r2
 800c2c2:	e7bd      	b.n	800c240 <_printf_i+0x12c>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	6826      	ldr	r6, [r4, #0]
 800c2c8:	6961      	ldr	r1, [r4, #20]
 800c2ca:	1d18      	adds	r0, r3, #4
 800c2cc:	6028      	str	r0, [r5, #0]
 800c2ce:	0635      	lsls	r5, r6, #24
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	d501      	bpl.n	800c2d8 <_printf_i+0x1c4>
 800c2d4:	6019      	str	r1, [r3, #0]
 800c2d6:	e002      	b.n	800c2de <_printf_i+0x1ca>
 800c2d8:	0670      	lsls	r0, r6, #25
 800c2da:	d5fb      	bpl.n	800c2d4 <_printf_i+0x1c0>
 800c2dc:	8019      	strh	r1, [r3, #0]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6123      	str	r3, [r4, #16]
 800c2e2:	4615      	mov	r5, r2
 800c2e4:	e7bc      	b.n	800c260 <_printf_i+0x14c>
 800c2e6:	682b      	ldr	r3, [r5, #0]
 800c2e8:	1d1a      	adds	r2, r3, #4
 800c2ea:	602a      	str	r2, [r5, #0]
 800c2ec:	681d      	ldr	r5, [r3, #0]
 800c2ee:	6862      	ldr	r2, [r4, #4]
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f7f3 ff7c 	bl	80001f0 <memchr>
 800c2f8:	b108      	cbz	r0, 800c2fe <_printf_i+0x1ea>
 800c2fa:	1b40      	subs	r0, r0, r5
 800c2fc:	6060      	str	r0, [r4, #4]
 800c2fe:	6863      	ldr	r3, [r4, #4]
 800c300:	6123      	str	r3, [r4, #16]
 800c302:	2300      	movs	r3, #0
 800c304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c308:	e7aa      	b.n	800c260 <_printf_i+0x14c>
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	462a      	mov	r2, r5
 800c30e:	4649      	mov	r1, r9
 800c310:	4640      	mov	r0, r8
 800c312:	47d0      	blx	sl
 800c314:	3001      	adds	r0, #1
 800c316:	d0ad      	beq.n	800c274 <_printf_i+0x160>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	079b      	lsls	r3, r3, #30
 800c31c:	d413      	bmi.n	800c346 <_printf_i+0x232>
 800c31e:	68e0      	ldr	r0, [r4, #12]
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	4298      	cmp	r0, r3
 800c324:	bfb8      	it	lt
 800c326:	4618      	movlt	r0, r3
 800c328:	e7a6      	b.n	800c278 <_printf_i+0x164>
 800c32a:	2301      	movs	r3, #1
 800c32c:	4632      	mov	r2, r6
 800c32e:	4649      	mov	r1, r9
 800c330:	4640      	mov	r0, r8
 800c332:	47d0      	blx	sl
 800c334:	3001      	adds	r0, #1
 800c336:	d09d      	beq.n	800c274 <_printf_i+0x160>
 800c338:	3501      	adds	r5, #1
 800c33a:	68e3      	ldr	r3, [r4, #12]
 800c33c:	9903      	ldr	r1, [sp, #12]
 800c33e:	1a5b      	subs	r3, r3, r1
 800c340:	42ab      	cmp	r3, r5
 800c342:	dcf2      	bgt.n	800c32a <_printf_i+0x216>
 800c344:	e7eb      	b.n	800c31e <_printf_i+0x20a>
 800c346:	2500      	movs	r5, #0
 800c348:	f104 0619 	add.w	r6, r4, #25
 800c34c:	e7f5      	b.n	800c33a <_printf_i+0x226>
 800c34e:	bf00      	nop
 800c350:	08012a6d 	.word	0x08012a6d
 800c354:	08012a7e 	.word	0x08012a7e

0800c358 <std>:
 800c358:	2300      	movs	r3, #0
 800c35a:	b510      	push	{r4, lr}
 800c35c:	4604      	mov	r4, r0
 800c35e:	e9c0 3300 	strd	r3, r3, [r0]
 800c362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c366:	6083      	str	r3, [r0, #8]
 800c368:	8181      	strh	r1, [r0, #12]
 800c36a:	6643      	str	r3, [r0, #100]	; 0x64
 800c36c:	81c2      	strh	r2, [r0, #14]
 800c36e:	6183      	str	r3, [r0, #24]
 800c370:	4619      	mov	r1, r3
 800c372:	2208      	movs	r2, #8
 800c374:	305c      	adds	r0, #92	; 0x5c
 800c376:	f000 f930 	bl	800c5da <memset>
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x38>)
 800c37c:	6263      	str	r3, [r4, #36]	; 0x24
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x3c>)
 800c380:	62a3      	str	r3, [r4, #40]	; 0x28
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x40>)
 800c384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <std+0x44>)
 800c388:	6224      	str	r4, [r4, #32]
 800c38a:	6323      	str	r3, [r4, #48]	; 0x30
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	bf00      	nop
 800c390:	0800c551 	.word	0x0800c551
 800c394:	0800c577 	.word	0x0800c577
 800c398:	0800c5af 	.word	0x0800c5af
 800c39c:	0800c5d3 	.word	0x0800c5d3

0800c3a0 <stdio_exit_handler>:
 800c3a0:	4a02      	ldr	r2, [pc, #8]	; (800c3ac <stdio_exit_handler+0xc>)
 800c3a2:	4903      	ldr	r1, [pc, #12]	; (800c3b0 <stdio_exit_handler+0x10>)
 800c3a4:	4803      	ldr	r0, [pc, #12]	; (800c3b4 <stdio_exit_handler+0x14>)
 800c3a6:	f000 b869 	b.w	800c47c <_fwalk_sglue>
 800c3aa:	bf00      	nop
 800c3ac:	20000048 	.word	0x20000048
 800c3b0:	0800f1a9 	.word	0x0800f1a9
 800c3b4:	200001c0 	.word	0x200001c0

0800c3b8 <cleanup_stdio>:
 800c3b8:	6841      	ldr	r1, [r0, #4]
 800c3ba:	4b0c      	ldr	r3, [pc, #48]	; (800c3ec <cleanup_stdio+0x34>)
 800c3bc:	4299      	cmp	r1, r3
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	d001      	beq.n	800c3c8 <cleanup_stdio+0x10>
 800c3c4:	f002 fef0 	bl	800f1a8 <_fflush_r>
 800c3c8:	68a1      	ldr	r1, [r4, #8]
 800c3ca:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <cleanup_stdio+0x38>)
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	d002      	beq.n	800c3d6 <cleanup_stdio+0x1e>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f002 fee9 	bl	800f1a8 <_fflush_r>
 800c3d6:	68e1      	ldr	r1, [r4, #12]
 800c3d8:	4b06      	ldr	r3, [pc, #24]	; (800c3f4 <cleanup_stdio+0x3c>)
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	d004      	beq.n	800c3e8 <cleanup_stdio+0x30>
 800c3de:	4620      	mov	r0, r4
 800c3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3e4:	f002 bee0 	b.w	800f1a8 <_fflush_r>
 800c3e8:	bd10      	pop	{r4, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000f48 	.word	0x20000f48
 800c3f0:	20000fb0 	.word	0x20000fb0
 800c3f4:	20001018 	.word	0x20001018

0800c3f8 <global_stdio_init.part.0>:
 800c3f8:	b510      	push	{r4, lr}
 800c3fa:	4b0b      	ldr	r3, [pc, #44]	; (800c428 <global_stdio_init.part.0+0x30>)
 800c3fc:	4c0b      	ldr	r4, [pc, #44]	; (800c42c <global_stdio_init.part.0+0x34>)
 800c3fe:	4a0c      	ldr	r2, [pc, #48]	; (800c430 <global_stdio_init.part.0+0x38>)
 800c400:	601a      	str	r2, [r3, #0]
 800c402:	4620      	mov	r0, r4
 800c404:	2200      	movs	r2, #0
 800c406:	2104      	movs	r1, #4
 800c408:	f7ff ffa6 	bl	800c358 <std>
 800c40c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c410:	2201      	movs	r2, #1
 800c412:	2109      	movs	r1, #9
 800c414:	f7ff ffa0 	bl	800c358 <std>
 800c418:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c41c:	2202      	movs	r2, #2
 800c41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c422:	2112      	movs	r1, #18
 800c424:	f7ff bf98 	b.w	800c358 <std>
 800c428:	20001080 	.word	0x20001080
 800c42c:	20000f48 	.word	0x20000f48
 800c430:	0800c3a1 	.word	0x0800c3a1

0800c434 <__sfp_lock_acquire>:
 800c434:	4801      	ldr	r0, [pc, #4]	; (800c43c <__sfp_lock_acquire+0x8>)
 800c436:	f000 b9db 	b.w	800c7f0 <__retarget_lock_acquire_recursive>
 800c43a:	bf00      	nop
 800c43c:	20001089 	.word	0x20001089

0800c440 <__sfp_lock_release>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__sfp_lock_release+0x8>)
 800c442:	f000 b9d6 	b.w	800c7f2 <__retarget_lock_release_recursive>
 800c446:	bf00      	nop
 800c448:	20001089 	.word	0x20001089

0800c44c <__sinit>:
 800c44c:	b510      	push	{r4, lr}
 800c44e:	4604      	mov	r4, r0
 800c450:	f7ff fff0 	bl	800c434 <__sfp_lock_acquire>
 800c454:	6a23      	ldr	r3, [r4, #32]
 800c456:	b11b      	cbz	r3, 800c460 <__sinit+0x14>
 800c458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c45c:	f7ff bff0 	b.w	800c440 <__sfp_lock_release>
 800c460:	4b04      	ldr	r3, [pc, #16]	; (800c474 <__sinit+0x28>)
 800c462:	6223      	str	r3, [r4, #32]
 800c464:	4b04      	ldr	r3, [pc, #16]	; (800c478 <__sinit+0x2c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1f5      	bne.n	800c458 <__sinit+0xc>
 800c46c:	f7ff ffc4 	bl	800c3f8 <global_stdio_init.part.0>
 800c470:	e7f2      	b.n	800c458 <__sinit+0xc>
 800c472:	bf00      	nop
 800c474:	0800c3b9 	.word	0x0800c3b9
 800c478:	20001080 	.word	0x20001080

0800c47c <_fwalk_sglue>:
 800c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c480:	4607      	mov	r7, r0
 800c482:	4688      	mov	r8, r1
 800c484:	4614      	mov	r4, r2
 800c486:	2600      	movs	r6, #0
 800c488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c48c:	f1b9 0901 	subs.w	r9, r9, #1
 800c490:	d505      	bpl.n	800c49e <_fwalk_sglue+0x22>
 800c492:	6824      	ldr	r4, [r4, #0]
 800c494:	2c00      	cmp	r4, #0
 800c496:	d1f7      	bne.n	800c488 <_fwalk_sglue+0xc>
 800c498:	4630      	mov	r0, r6
 800c49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c49e:	89ab      	ldrh	r3, [r5, #12]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d907      	bls.n	800c4b4 <_fwalk_sglue+0x38>
 800c4a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	d003      	beq.n	800c4b4 <_fwalk_sglue+0x38>
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	47c0      	blx	r8
 800c4b2:	4306      	orrs	r6, r0
 800c4b4:	3568      	adds	r5, #104	; 0x68
 800c4b6:	e7e9      	b.n	800c48c <_fwalk_sglue+0x10>

0800c4b8 <siprintf>:
 800c4b8:	b40e      	push	{r1, r2, r3}
 800c4ba:	b500      	push	{lr}
 800c4bc:	b09c      	sub	sp, #112	; 0x70
 800c4be:	ab1d      	add	r3, sp, #116	; 0x74
 800c4c0:	9002      	str	r0, [sp, #8]
 800c4c2:	9006      	str	r0, [sp, #24]
 800c4c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4c8:	4809      	ldr	r0, [pc, #36]	; (800c4f0 <siprintf+0x38>)
 800c4ca:	9107      	str	r1, [sp, #28]
 800c4cc:	9104      	str	r1, [sp, #16]
 800c4ce:	4909      	ldr	r1, [pc, #36]	; (800c4f4 <siprintf+0x3c>)
 800c4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d4:	9105      	str	r1, [sp, #20]
 800c4d6:	6800      	ldr	r0, [r0, #0]
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	a902      	add	r1, sp, #8
 800c4dc:	f002 f9c0 	bl	800e860 <_svfiprintf_r>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	b01c      	add	sp, #112	; 0x70
 800c4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ec:	b003      	add	sp, #12
 800c4ee:	4770      	bx	lr
 800c4f0:	2000020c 	.word	0x2000020c
 800c4f4:	ffff0208 	.word	0xffff0208

0800c4f8 <siscanf>:
 800c4f8:	b40e      	push	{r1, r2, r3}
 800c4fa:	b510      	push	{r4, lr}
 800c4fc:	b09f      	sub	sp, #124	; 0x7c
 800c4fe:	ac21      	add	r4, sp, #132	; 0x84
 800c500:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c504:	f854 2b04 	ldr.w	r2, [r4], #4
 800c508:	9201      	str	r2, [sp, #4]
 800c50a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c50e:	9004      	str	r0, [sp, #16]
 800c510:	9008      	str	r0, [sp, #32]
 800c512:	f7f3 febd 	bl	8000290 <strlen>
 800c516:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <siscanf+0x50>)
 800c518:	9005      	str	r0, [sp, #20]
 800c51a:	9009      	str	r0, [sp, #36]	; 0x24
 800c51c:	930d      	str	r3, [sp, #52]	; 0x34
 800c51e:	480b      	ldr	r0, [pc, #44]	; (800c54c <siscanf+0x54>)
 800c520:	9a01      	ldr	r2, [sp, #4]
 800c522:	6800      	ldr	r0, [r0, #0]
 800c524:	9403      	str	r4, [sp, #12]
 800c526:	2300      	movs	r3, #0
 800c528:	9311      	str	r3, [sp, #68]	; 0x44
 800c52a:	9316      	str	r3, [sp, #88]	; 0x58
 800c52c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c530:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c534:	a904      	add	r1, sp, #16
 800c536:	4623      	mov	r3, r4
 800c538:	f002 faea 	bl	800eb10 <__ssvfiscanf_r>
 800c53c:	b01f      	add	sp, #124	; 0x7c
 800c53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c542:	b003      	add	sp, #12
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	0800c573 	.word	0x0800c573
 800c54c:	2000020c 	.word	0x2000020c

0800c550 <__sread>:
 800c550:	b510      	push	{r4, lr}
 800c552:	460c      	mov	r4, r1
 800c554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c558:	f000 f8fc 	bl	800c754 <_read_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	bfab      	itete	ge
 800c560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c562:	89a3      	ldrhlt	r3, [r4, #12]
 800c564:	181b      	addge	r3, r3, r0
 800c566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c56a:	bfac      	ite	ge
 800c56c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c56e:	81a3      	strhlt	r3, [r4, #12]
 800c570:	bd10      	pop	{r4, pc}

0800c572 <__seofread>:
 800c572:	2000      	movs	r0, #0
 800c574:	4770      	bx	lr

0800c576 <__swrite>:
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	461f      	mov	r7, r3
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4616      	mov	r6, r2
 800c586:	d505      	bpl.n	800c594 <__swrite+0x1e>
 800c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58c:	2302      	movs	r3, #2
 800c58e:	2200      	movs	r2, #0
 800c590:	f000 f8ce 	bl	800c730 <_lseek_r>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5aa:	f000 b8e5 	b.w	800c778 <_write_r>

0800c5ae <__sseek>:
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b6:	f000 f8bb 	bl	800c730 <_lseek_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	bf15      	itete	ne
 800c5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ca:	81a3      	strheq	r3, [r4, #12]
 800c5cc:	bf18      	it	ne
 800c5ce:	81a3      	strhne	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__sclose>:
 800c5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d6:	f000 b89b 	b.w	800c710 <_close_r>

0800c5da <memset>:
 800c5da:	4402      	add	r2, r0
 800c5dc:	4603      	mov	r3, r0
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d100      	bne.n	800c5e4 <memset+0xa>
 800c5e2:	4770      	bx	lr
 800c5e4:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e8:	e7f9      	b.n	800c5de <memset+0x4>

0800c5ea <strchr>:
 800c5ea:	b2c9      	uxtb	r1, r1
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f2:	b11a      	cbz	r2, 800c5fc <strchr+0x12>
 800c5f4:	428a      	cmp	r2, r1
 800c5f6:	d1f9      	bne.n	800c5ec <strchr+0x2>
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	4770      	bx	lr
 800c5fc:	2900      	cmp	r1, #0
 800c5fe:	bf18      	it	ne
 800c600:	2300      	movne	r3, #0
 800c602:	e7f9      	b.n	800c5f8 <strchr+0xe>

0800c604 <strncmp>:
 800c604:	b510      	push	{r4, lr}
 800c606:	b16a      	cbz	r2, 800c624 <strncmp+0x20>
 800c608:	3901      	subs	r1, #1
 800c60a:	1884      	adds	r4, r0, r2
 800c60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c610:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c614:	429a      	cmp	r2, r3
 800c616:	d103      	bne.n	800c620 <strncmp+0x1c>
 800c618:	42a0      	cmp	r0, r4
 800c61a:	d001      	beq.n	800c620 <strncmp+0x1c>
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	d1f5      	bne.n	800c60c <strncmp+0x8>
 800c620:	1ad0      	subs	r0, r2, r3
 800c622:	bd10      	pop	{r4, pc}
 800c624:	4610      	mov	r0, r2
 800c626:	e7fc      	b.n	800c622 <strncmp+0x1e>

0800c628 <strncpy>:
 800c628:	b510      	push	{r4, lr}
 800c62a:	3901      	subs	r1, #1
 800c62c:	4603      	mov	r3, r0
 800c62e:	b132      	cbz	r2, 800c63e <strncpy+0x16>
 800c630:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c634:	f803 4b01 	strb.w	r4, [r3], #1
 800c638:	3a01      	subs	r2, #1
 800c63a:	2c00      	cmp	r4, #0
 800c63c:	d1f7      	bne.n	800c62e <strncpy+0x6>
 800c63e:	441a      	add	r2, r3
 800c640:	2100      	movs	r1, #0
 800c642:	4293      	cmp	r3, r2
 800c644:	d100      	bne.n	800c648 <strncpy+0x20>
 800c646:	bd10      	pop	{r4, pc}
 800c648:	f803 1b01 	strb.w	r1, [r3], #1
 800c64c:	e7f9      	b.n	800c642 <strncpy+0x1a>
	...

0800c650 <strtok>:
 800c650:	4b16      	ldr	r3, [pc, #88]	; (800c6ac <strtok+0x5c>)
 800c652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c654:	681e      	ldr	r6, [r3, #0]
 800c656:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c658:	4605      	mov	r5, r0
 800c65a:	b9fc      	cbnz	r4, 800c69c <strtok+0x4c>
 800c65c:	2050      	movs	r0, #80	; 0x50
 800c65e:	9101      	str	r1, [sp, #4]
 800c660:	f001 fb24 	bl	800dcac <malloc>
 800c664:	9901      	ldr	r1, [sp, #4]
 800c666:	6470      	str	r0, [r6, #68]	; 0x44
 800c668:	4602      	mov	r2, r0
 800c66a:	b920      	cbnz	r0, 800c676 <strtok+0x26>
 800c66c:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <strtok+0x60>)
 800c66e:	4811      	ldr	r0, [pc, #68]	; (800c6b4 <strtok+0x64>)
 800c670:	215b      	movs	r1, #91	; 0x5b
 800c672:	f000 f8dd 	bl	800c830 <__assert_func>
 800c676:	e9c0 4400 	strd	r4, r4, [r0]
 800c67a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c67e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c682:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c686:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c68a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c68e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c692:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c696:	6184      	str	r4, [r0, #24]
 800c698:	7704      	strb	r4, [r0, #28]
 800c69a:	6244      	str	r4, [r0, #36]	; 0x24
 800c69c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c69e:	2301      	movs	r3, #1
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	b002      	add	sp, #8
 800c6a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6a8:	f000 b806 	b.w	800c6b8 <__strtok_r>
 800c6ac:	2000020c 	.word	0x2000020c
 800c6b0:	08012a8f 	.word	0x08012a8f
 800c6b4:	08012aa6 	.word	0x08012aa6

0800c6b8 <__strtok_r>:
 800c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ba:	b908      	cbnz	r0, 800c6c0 <__strtok_r+0x8>
 800c6bc:	6810      	ldr	r0, [r2, #0]
 800c6be:	b188      	cbz	r0, 800c6e4 <__strtok_r+0x2c>
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c6c8:	460f      	mov	r7, r1
 800c6ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c6ce:	b91e      	cbnz	r6, 800c6d8 <__strtok_r+0x20>
 800c6d0:	b965      	cbnz	r5, 800c6ec <__strtok_r+0x34>
 800c6d2:	6015      	str	r5, [r2, #0]
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	e005      	b.n	800c6e4 <__strtok_r+0x2c>
 800c6d8:	42b5      	cmp	r5, r6
 800c6da:	d1f6      	bne.n	800c6ca <__strtok_r+0x12>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1f0      	bne.n	800c6c2 <__strtok_r+0xa>
 800c6e0:	6014      	str	r4, [r2, #0]
 800c6e2:	7003      	strb	r3, [r0, #0]
 800c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e6:	461c      	mov	r4, r3
 800c6e8:	e00c      	b.n	800c704 <__strtok_r+0x4c>
 800c6ea:	b915      	cbnz	r5, 800c6f2 <__strtok_r+0x3a>
 800c6ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6f0:	460e      	mov	r6, r1
 800c6f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c6f6:	42ab      	cmp	r3, r5
 800c6f8:	d1f7      	bne.n	800c6ea <__strtok_r+0x32>
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0f3      	beq.n	800c6e6 <__strtok_r+0x2e>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c704:	6014      	str	r4, [r2, #0]
 800c706:	e7ed      	b.n	800c6e4 <__strtok_r+0x2c>

0800c708 <_localeconv_r>:
 800c708:	4800      	ldr	r0, [pc, #0]	; (800c70c <_localeconv_r+0x4>)
 800c70a:	4770      	bx	lr
 800c70c:	20000144 	.word	0x20000144

0800c710 <_close_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d06      	ldr	r5, [pc, #24]	; (800c72c <_close_r+0x1c>)
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	602b      	str	r3, [r5, #0]
 800c71c:	f7f6 fed3 	bl	80034c6 <_close>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_close_r+0x1a>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_close_r+0x1a>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20001084 	.word	0x20001084

0800c730 <_lseek_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d07      	ldr	r5, [pc, #28]	; (800c750 <_lseek_r+0x20>)
 800c734:	4604      	mov	r4, r0
 800c736:	4608      	mov	r0, r1
 800c738:	4611      	mov	r1, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	602a      	str	r2, [r5, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	f7f6 fee8 	bl	8003514 <_lseek>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_lseek_r+0x1e>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_lseek_r+0x1e>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	20001084 	.word	0x20001084

0800c754 <_read_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	; (800c774 <_read_r+0x20>)
 800c758:	4604      	mov	r4, r0
 800c75a:	4608      	mov	r0, r1
 800c75c:	4611      	mov	r1, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	602a      	str	r2, [r5, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	f7f6 fe76 	bl	8003454 <_read>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_read_r+0x1e>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_read_r+0x1e>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	20001084 	.word	0x20001084

0800c778 <_write_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4d07      	ldr	r5, [pc, #28]	; (800c798 <_write_r+0x20>)
 800c77c:	4604      	mov	r4, r0
 800c77e:	4608      	mov	r0, r1
 800c780:	4611      	mov	r1, r2
 800c782:	2200      	movs	r2, #0
 800c784:	602a      	str	r2, [r5, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	f7f6 fe81 	bl	800348e <_write>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_write_r+0x1e>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_write_r+0x1e>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	20001084 	.word	0x20001084

0800c79c <__errno>:
 800c79c:	4b01      	ldr	r3, [pc, #4]	; (800c7a4 <__errno+0x8>)
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	2000020c 	.word	0x2000020c

0800c7a8 <__libc_init_array>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	4d0d      	ldr	r5, [pc, #52]	; (800c7e0 <__libc_init_array+0x38>)
 800c7ac:	4c0d      	ldr	r4, [pc, #52]	; (800c7e4 <__libc_init_array+0x3c>)
 800c7ae:	1b64      	subs	r4, r4, r5
 800c7b0:	10a4      	asrs	r4, r4, #2
 800c7b2:	2600      	movs	r6, #0
 800c7b4:	42a6      	cmp	r6, r4
 800c7b6:	d109      	bne.n	800c7cc <__libc_init_array+0x24>
 800c7b8:	4d0b      	ldr	r5, [pc, #44]	; (800c7e8 <__libc_init_array+0x40>)
 800c7ba:	4c0c      	ldr	r4, [pc, #48]	; (800c7ec <__libc_init_array+0x44>)
 800c7bc:	f004 fde6 	bl	801138c <_init>
 800c7c0:	1b64      	subs	r4, r4, r5
 800c7c2:	10a4      	asrs	r4, r4, #2
 800c7c4:	2600      	movs	r6, #0
 800c7c6:	42a6      	cmp	r6, r4
 800c7c8:	d105      	bne.n	800c7d6 <__libc_init_array+0x2e>
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d0:	4798      	blx	r3
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	e7ee      	b.n	800c7b4 <__libc_init_array+0xc>
 800c7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7da:	4798      	blx	r3
 800c7dc:	3601      	adds	r6, #1
 800c7de:	e7f2      	b.n	800c7c6 <__libc_init_array+0x1e>
 800c7e0:	080130f8 	.word	0x080130f8
 800c7e4:	080130f8 	.word	0x080130f8
 800c7e8:	080130f8 	.word	0x080130f8
 800c7ec:	080130fc 	.word	0x080130fc

0800c7f0 <__retarget_lock_acquire_recursive>:
 800c7f0:	4770      	bx	lr

0800c7f2 <__retarget_lock_release_recursive>:
 800c7f2:	4770      	bx	lr

0800c7f4 <strcpy>:
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7fa:	f803 2b01 	strb.w	r2, [r3], #1
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	d1f9      	bne.n	800c7f6 <strcpy+0x2>
 800c802:	4770      	bx	lr

0800c804 <memcpy>:
 800c804:	440a      	add	r2, r1
 800c806:	4291      	cmp	r1, r2
 800c808:	f100 33ff 	add.w	r3, r0, #4294967295
 800c80c:	d100      	bne.n	800c810 <memcpy+0xc>
 800c80e:	4770      	bx	lr
 800c810:	b510      	push	{r4, lr}
 800c812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c81a:	4291      	cmp	r1, r2
 800c81c:	d1f9      	bne.n	800c812 <memcpy+0xe>
 800c81e:	bd10      	pop	{r4, pc}

0800c820 <nan>:
 800c820:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c828 <nan+0x8>
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	00000000 	.word	0x00000000
 800c82c:	7ff80000 	.word	0x7ff80000

0800c830 <__assert_func>:
 800c830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c832:	4614      	mov	r4, r2
 800c834:	461a      	mov	r2, r3
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <__assert_func+0x2c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4605      	mov	r5, r0
 800c83c:	68d8      	ldr	r0, [r3, #12]
 800c83e:	b14c      	cbz	r4, 800c854 <__assert_func+0x24>
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <__assert_func+0x30>)
 800c842:	9100      	str	r1, [sp, #0]
 800c844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c848:	4906      	ldr	r1, [pc, #24]	; (800c864 <__assert_func+0x34>)
 800c84a:	462b      	mov	r3, r5
 800c84c:	f002 fcd4 	bl	800f1f8 <fiprintf>
 800c850:	f002 fd82 	bl	800f358 <abort>
 800c854:	4b04      	ldr	r3, [pc, #16]	; (800c868 <__assert_func+0x38>)
 800c856:	461c      	mov	r4, r3
 800c858:	e7f3      	b.n	800c842 <__assert_func+0x12>
 800c85a:	bf00      	nop
 800c85c:	2000020c 	.word	0x2000020c
 800c860:	08012b08 	.word	0x08012b08
 800c864:	08012b15 	.word	0x08012b15
 800c868:	08012b43 	.word	0x08012b43

0800c86c <quorem>:
 800c86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	6903      	ldr	r3, [r0, #16]
 800c872:	690c      	ldr	r4, [r1, #16]
 800c874:	42a3      	cmp	r3, r4
 800c876:	4607      	mov	r7, r0
 800c878:	db7e      	blt.n	800c978 <quorem+0x10c>
 800c87a:	3c01      	subs	r4, #1
 800c87c:	f101 0814 	add.w	r8, r1, #20
 800c880:	f100 0514 	add.w	r5, r0, #20
 800c884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c88e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c892:	3301      	adds	r3, #1
 800c894:	429a      	cmp	r2, r3
 800c896:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c89a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c89e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8a2:	d331      	bcc.n	800c908 <quorem+0x9c>
 800c8a4:	f04f 0e00 	mov.w	lr, #0
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	46ac      	mov	ip, r5
 800c8ac:	46f2      	mov	sl, lr
 800c8ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8b2:	b293      	uxth	r3, r2
 800c8b4:	fb06 e303 	mla	r3, r6, r3, lr
 800c8b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8bc:	0c1a      	lsrs	r2, r3, #16
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	ebaa 0303 	sub.w	r3, sl, r3
 800c8c4:	f8dc a000 	ldr.w	sl, [ip]
 800c8c8:	fa13 f38a 	uxtah	r3, r3, sl
 800c8cc:	fb06 220e 	mla	r2, r6, lr, r2
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	9b00      	ldr	r3, [sp, #0]
 800c8d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8d8:	b292      	uxth	r2, r2
 800c8da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c8de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8e2:	f8bd 3000 	ldrh.w	r3, [sp]
 800c8e6:	4581      	cmp	r9, r0
 800c8e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8ec:	f84c 3b04 	str.w	r3, [ip], #4
 800c8f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c8f4:	d2db      	bcs.n	800c8ae <quorem+0x42>
 800c8f6:	f855 300b 	ldr.w	r3, [r5, fp]
 800c8fa:	b92b      	cbnz	r3, 800c908 <quorem+0x9c>
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	3b04      	subs	r3, #4
 800c900:	429d      	cmp	r5, r3
 800c902:	461a      	mov	r2, r3
 800c904:	d32c      	bcc.n	800c960 <quorem+0xf4>
 800c906:	613c      	str	r4, [r7, #16]
 800c908:	4638      	mov	r0, r7
 800c90a:	f001 fd5b 	bl	800e3c4 <__mcmp>
 800c90e:	2800      	cmp	r0, #0
 800c910:	db22      	blt.n	800c958 <quorem+0xec>
 800c912:	3601      	adds	r6, #1
 800c914:	4629      	mov	r1, r5
 800c916:	2000      	movs	r0, #0
 800c918:	f858 2b04 	ldr.w	r2, [r8], #4
 800c91c:	f8d1 c000 	ldr.w	ip, [r1]
 800c920:	b293      	uxth	r3, r2
 800c922:	1ac3      	subs	r3, r0, r3
 800c924:	0c12      	lsrs	r2, r2, #16
 800c926:	fa13 f38c 	uxtah	r3, r3, ip
 800c92a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c92e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c932:	b29b      	uxth	r3, r3
 800c934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c938:	45c1      	cmp	r9, r8
 800c93a:	f841 3b04 	str.w	r3, [r1], #4
 800c93e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c942:	d2e9      	bcs.n	800c918 <quorem+0xac>
 800c944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c948:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c94c:	b922      	cbnz	r2, 800c958 <quorem+0xec>
 800c94e:	3b04      	subs	r3, #4
 800c950:	429d      	cmp	r5, r3
 800c952:	461a      	mov	r2, r3
 800c954:	d30a      	bcc.n	800c96c <quorem+0x100>
 800c956:	613c      	str	r4, [r7, #16]
 800c958:	4630      	mov	r0, r6
 800c95a:	b003      	add	sp, #12
 800c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	3b04      	subs	r3, #4
 800c964:	2a00      	cmp	r2, #0
 800c966:	d1ce      	bne.n	800c906 <quorem+0x9a>
 800c968:	3c01      	subs	r4, #1
 800c96a:	e7c9      	b.n	800c900 <quorem+0x94>
 800c96c:	6812      	ldr	r2, [r2, #0]
 800c96e:	3b04      	subs	r3, #4
 800c970:	2a00      	cmp	r2, #0
 800c972:	d1f0      	bne.n	800c956 <quorem+0xea>
 800c974:	3c01      	subs	r4, #1
 800c976:	e7eb      	b.n	800c950 <quorem+0xe4>
 800c978:	2000      	movs	r0, #0
 800c97a:	e7ee      	b.n	800c95a <quorem+0xee>
 800c97c:	0000      	movs	r0, r0
	...

0800c980 <_dtoa_r>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	ed2d 8b04 	vpush	{d8-d9}
 800c988:	69c5      	ldr	r5, [r0, #28]
 800c98a:	b093      	sub	sp, #76	; 0x4c
 800c98c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c990:	ec57 6b10 	vmov	r6, r7, d0
 800c994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c998:	9107      	str	r1, [sp, #28]
 800c99a:	4604      	mov	r4, r0
 800c99c:	920a      	str	r2, [sp, #40]	; 0x28
 800c99e:	930d      	str	r3, [sp, #52]	; 0x34
 800c9a0:	b975      	cbnz	r5, 800c9c0 <_dtoa_r+0x40>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f001 f982 	bl	800dcac <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	61e0      	str	r0, [r4, #28]
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_dtoa_r+0x38>
 800c9ae:	4bae      	ldr	r3, [pc, #696]	; (800cc68 <_dtoa_r+0x2e8>)
 800c9b0:	21ef      	movs	r1, #239	; 0xef
 800c9b2:	48ae      	ldr	r0, [pc, #696]	; (800cc6c <_dtoa_r+0x2ec>)
 800c9b4:	f7ff ff3c 	bl	800c830 <__assert_func>
 800c9b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9bc:	6005      	str	r5, [r0, #0]
 800c9be:	60c5      	str	r5, [r0, #12]
 800c9c0:	69e3      	ldr	r3, [r4, #28]
 800c9c2:	6819      	ldr	r1, [r3, #0]
 800c9c4:	b151      	cbz	r1, 800c9dc <_dtoa_r+0x5c>
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	604a      	str	r2, [r1, #4]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4093      	lsls	r3, r2
 800c9ce:	608b      	str	r3, [r1, #8]
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f001 fa71 	bl	800deb8 <_Bfree>
 800c9d6:	69e3      	ldr	r3, [r4, #28]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	1e3b      	subs	r3, r7, #0
 800c9de:	bfbb      	ittet	lt
 800c9e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9e4:	9303      	strlt	r3, [sp, #12]
 800c9e6:	2300      	movge	r3, #0
 800c9e8:	2201      	movlt	r2, #1
 800c9ea:	bfac      	ite	ge
 800c9ec:	f8c8 3000 	strge.w	r3, [r8]
 800c9f0:	f8c8 2000 	strlt.w	r2, [r8]
 800c9f4:	4b9e      	ldr	r3, [pc, #632]	; (800cc70 <_dtoa_r+0x2f0>)
 800c9f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c9fa:	ea33 0308 	bics.w	r3, r3, r8
 800c9fe:	d11b      	bne.n	800ca38 <_dtoa_r+0xb8>
 800ca00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ca0c:	4333      	orrs	r3, r6
 800ca0e:	f000 8593 	beq.w	800d538 <_dtoa_r+0xbb8>
 800ca12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca14:	b963      	cbnz	r3, 800ca30 <_dtoa_r+0xb0>
 800ca16:	4b97      	ldr	r3, [pc, #604]	; (800cc74 <_dtoa_r+0x2f4>)
 800ca18:	e027      	b.n	800ca6a <_dtoa_r+0xea>
 800ca1a:	4b97      	ldr	r3, [pc, #604]	; (800cc78 <_dtoa_r+0x2f8>)
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	3308      	adds	r3, #8
 800ca20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	9800      	ldr	r0, [sp, #0]
 800ca26:	b013      	add	sp, #76	; 0x4c
 800ca28:	ecbd 8b04 	vpop	{d8-d9}
 800ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca30:	4b90      	ldr	r3, [pc, #576]	; (800cc74 <_dtoa_r+0x2f4>)
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	3303      	adds	r3, #3
 800ca36:	e7f3      	b.n	800ca20 <_dtoa_r+0xa0>
 800ca38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	ec51 0b17 	vmov	r0, r1, d7
 800ca42:	eeb0 8a47 	vmov.f32	s16, s14
 800ca46:	eef0 8a67 	vmov.f32	s17, s15
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f7f4 f84c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca50:	4681      	mov	r9, r0
 800ca52:	b160      	cbz	r0, 800ca6e <_dtoa_r+0xee>
 800ca54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca56:	2301      	movs	r3, #1
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 8568 	beq.w	800d532 <_dtoa_r+0xbb2>
 800ca62:	4b86      	ldr	r3, [pc, #536]	; (800cc7c <_dtoa_r+0x2fc>)
 800ca64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	e7da      	b.n	800ca24 <_dtoa_r+0xa4>
 800ca6e:	aa10      	add	r2, sp, #64	; 0x40
 800ca70:	a911      	add	r1, sp, #68	; 0x44
 800ca72:	4620      	mov	r0, r4
 800ca74:	eeb0 0a48 	vmov.f32	s0, s16
 800ca78:	eef0 0a68 	vmov.f32	s1, s17
 800ca7c:	f001 fdb8 	bl	800e5f0 <__d2b>
 800ca80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ca84:	4682      	mov	sl, r0
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	d07f      	beq.n	800cb8a <_dtoa_r+0x20a>
 800ca8a:	ee18 3a90 	vmov	r3, s17
 800ca8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ca96:	ec51 0b18 	vmov	r0, r1, d8
 800ca9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800caa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800caa6:	4619      	mov	r1, r3
 800caa8:	2200      	movs	r2, #0
 800caaa:	4b75      	ldr	r3, [pc, #468]	; (800cc80 <_dtoa_r+0x300>)
 800caac:	f7f3 fbfc 	bl	80002a8 <__aeabi_dsub>
 800cab0:	a367      	add	r3, pc, #412	; (adr r3, 800cc50 <_dtoa_r+0x2d0>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fdaf 	bl	8000618 <__aeabi_dmul>
 800caba:	a367      	add	r3, pc, #412	; (adr r3, 800cc58 <_dtoa_r+0x2d8>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f7f3 fbf4 	bl	80002ac <__adddf3>
 800cac4:	4606      	mov	r6, r0
 800cac6:	4628      	mov	r0, r5
 800cac8:	460f      	mov	r7, r1
 800caca:	f7f3 fd3b 	bl	8000544 <__aeabi_i2d>
 800cace:	a364      	add	r3, pc, #400	; (adr r3, 800cc60 <_dtoa_r+0x2e0>)
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	f7f3 fda0 	bl	8000618 <__aeabi_dmul>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4630      	mov	r0, r6
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f3 fbe4 	bl	80002ac <__adddf3>
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	f7f4 f846 	bl	8000b78 <__aeabi_d2iz>
 800caec:	2200      	movs	r2, #0
 800caee:	4683      	mov	fp, r0
 800caf0:	2300      	movs	r3, #0
 800caf2:	4630      	mov	r0, r6
 800caf4:	4639      	mov	r1, r7
 800caf6:	f7f4 f801 	bl	8000afc <__aeabi_dcmplt>
 800cafa:	b148      	cbz	r0, 800cb10 <_dtoa_r+0x190>
 800cafc:	4658      	mov	r0, fp
 800cafe:	f7f3 fd21 	bl	8000544 <__aeabi_i2d>
 800cb02:	4632      	mov	r2, r6
 800cb04:	463b      	mov	r3, r7
 800cb06:	f7f3 ffef 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb0a:	b908      	cbnz	r0, 800cb10 <_dtoa_r+0x190>
 800cb0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb10:	f1bb 0f16 	cmp.w	fp, #22
 800cb14:	d857      	bhi.n	800cbc6 <_dtoa_r+0x246>
 800cb16:	4b5b      	ldr	r3, [pc, #364]	; (800cc84 <_dtoa_r+0x304>)
 800cb18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	ec51 0b18 	vmov	r0, r1, d8
 800cb24:	f7f3 ffea 	bl	8000afc <__aeabi_dcmplt>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d04e      	beq.n	800cbca <_dtoa_r+0x24a>
 800cb2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb30:	2300      	movs	r3, #0
 800cb32:	930c      	str	r3, [sp, #48]	; 0x30
 800cb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb36:	1b5b      	subs	r3, r3, r5
 800cb38:	1e5a      	subs	r2, r3, #1
 800cb3a:	bf45      	ittet	mi
 800cb3c:	f1c3 0301 	rsbmi	r3, r3, #1
 800cb40:	9305      	strmi	r3, [sp, #20]
 800cb42:	2300      	movpl	r3, #0
 800cb44:	2300      	movmi	r3, #0
 800cb46:	9206      	str	r2, [sp, #24]
 800cb48:	bf54      	ite	pl
 800cb4a:	9305      	strpl	r3, [sp, #20]
 800cb4c:	9306      	strmi	r3, [sp, #24]
 800cb4e:	f1bb 0f00 	cmp.w	fp, #0
 800cb52:	db3c      	blt.n	800cbce <_dtoa_r+0x24e>
 800cb54:	9b06      	ldr	r3, [sp, #24]
 800cb56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cb5a:	445b      	add	r3, fp
 800cb5c:	9306      	str	r3, [sp, #24]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9308      	str	r3, [sp, #32]
 800cb62:	9b07      	ldr	r3, [sp, #28]
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	d868      	bhi.n	800cc3a <_dtoa_r+0x2ba>
 800cb68:	2b05      	cmp	r3, #5
 800cb6a:	bfc4      	itt	gt
 800cb6c:	3b04      	subgt	r3, #4
 800cb6e:	9307      	strgt	r3, [sp, #28]
 800cb70:	9b07      	ldr	r3, [sp, #28]
 800cb72:	f1a3 0302 	sub.w	r3, r3, #2
 800cb76:	bfcc      	ite	gt
 800cb78:	2500      	movgt	r5, #0
 800cb7a:	2501      	movle	r5, #1
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	f200 8085 	bhi.w	800cc8c <_dtoa_r+0x30c>
 800cb82:	e8df f003 	tbb	[pc, r3]
 800cb86:	3b2e      	.short	0x3b2e
 800cb88:	5839      	.short	0x5839
 800cb8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cb8e:	441d      	add	r5, r3
 800cb90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb94:	2b20      	cmp	r3, #32
 800cb96:	bfc1      	itttt	gt
 800cb98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb9c:	fa08 f803 	lslgt.w	r8, r8, r3
 800cba0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cba4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cba8:	bfd6      	itet	le
 800cbaa:	f1c3 0320 	rsble	r3, r3, #32
 800cbae:	ea48 0003 	orrgt.w	r0, r8, r3
 800cbb2:	fa06 f003 	lslle.w	r0, r6, r3
 800cbb6:	f7f3 fcb5 	bl	8000524 <__aeabi_ui2d>
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cbc0:	3d01      	subs	r5, #1
 800cbc2:	920e      	str	r2, [sp, #56]	; 0x38
 800cbc4:	e76f      	b.n	800caa6 <_dtoa_r+0x126>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e7b3      	b.n	800cb32 <_dtoa_r+0x1b2>
 800cbca:	900c      	str	r0, [sp, #48]	; 0x30
 800cbcc:	e7b2      	b.n	800cb34 <_dtoa_r+0x1b4>
 800cbce:	9b05      	ldr	r3, [sp, #20]
 800cbd0:	eba3 030b 	sub.w	r3, r3, fp
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	f1cb 0300 	rsb	r3, fp, #0
 800cbda:	9308      	str	r3, [sp, #32]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbe0:	e7bf      	b.n	800cb62 <_dtoa_r+0x1e2>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dc52      	bgt.n	800cc92 <_dtoa_r+0x312>
 800cbec:	2301      	movs	r3, #1
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	9304      	str	r3, [sp, #16]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	920a      	str	r2, [sp, #40]	; 0x28
 800cbf6:	e00b      	b.n	800cc10 <_dtoa_r+0x290>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e7f3      	b.n	800cbe4 <_dtoa_r+0x264>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800cc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc02:	445b      	add	r3, fp
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	3301      	adds	r3, #1
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	9304      	str	r3, [sp, #16]
 800cc0c:	bfb8      	it	lt
 800cc0e:	2301      	movlt	r3, #1
 800cc10:	69e0      	ldr	r0, [r4, #28]
 800cc12:	2100      	movs	r1, #0
 800cc14:	2204      	movs	r2, #4
 800cc16:	f102 0614 	add.w	r6, r2, #20
 800cc1a:	429e      	cmp	r6, r3
 800cc1c:	d93d      	bls.n	800cc9a <_dtoa_r+0x31a>
 800cc1e:	6041      	str	r1, [r0, #4]
 800cc20:	4620      	mov	r0, r4
 800cc22:	f001 f909 	bl	800de38 <_Balloc>
 800cc26:	9000      	str	r0, [sp, #0]
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d139      	bne.n	800cca0 <_dtoa_r+0x320>
 800cc2c:	4b16      	ldr	r3, [pc, #88]	; (800cc88 <_dtoa_r+0x308>)
 800cc2e:	4602      	mov	r2, r0
 800cc30:	f240 11af 	movw	r1, #431	; 0x1af
 800cc34:	e6bd      	b.n	800c9b2 <_dtoa_r+0x32>
 800cc36:	2301      	movs	r3, #1
 800cc38:	e7e1      	b.n	800cbfe <_dtoa_r+0x27e>
 800cc3a:	2501      	movs	r5, #1
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9307      	str	r3, [sp, #28]
 800cc40:	9509      	str	r5, [sp, #36]	; 0x24
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	9304      	str	r3, [sp, #16]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	2312      	movs	r3, #18
 800cc4e:	e7d1      	b.n	800cbf4 <_dtoa_r+0x274>
 800cc50:	636f4361 	.word	0x636f4361
 800cc54:	3fd287a7 	.word	0x3fd287a7
 800cc58:	8b60c8b3 	.word	0x8b60c8b3
 800cc5c:	3fc68a28 	.word	0x3fc68a28
 800cc60:	509f79fb 	.word	0x509f79fb
 800cc64:	3fd34413 	.word	0x3fd34413
 800cc68:	08012a8f 	.word	0x08012a8f
 800cc6c:	08012b51 	.word	0x08012b51
 800cc70:	7ff00000 	.word	0x7ff00000
 800cc74:	08012b4d 	.word	0x08012b4d
 800cc78:	08012b44 	.word	0x08012b44
 800cc7c:	08012e9d 	.word	0x08012e9d
 800cc80:	3ff80000 	.word	0x3ff80000
 800cc84:	08012ca0 	.word	0x08012ca0
 800cc88:	08012ba9 	.word	0x08012ba9
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc90:	e7d7      	b.n	800cc42 <_dtoa_r+0x2c2>
 800cc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc94:	9301      	str	r3, [sp, #4]
 800cc96:	9304      	str	r3, [sp, #16]
 800cc98:	e7ba      	b.n	800cc10 <_dtoa_r+0x290>
 800cc9a:	3101      	adds	r1, #1
 800cc9c:	0052      	lsls	r2, r2, #1
 800cc9e:	e7ba      	b.n	800cc16 <_dtoa_r+0x296>
 800cca0:	69e3      	ldr	r3, [r4, #28]
 800cca2:	9a00      	ldr	r2, [sp, #0]
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	9b04      	ldr	r3, [sp, #16]
 800cca8:	2b0e      	cmp	r3, #14
 800ccaa:	f200 80a8 	bhi.w	800cdfe <_dtoa_r+0x47e>
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	f000 80a5 	beq.w	800cdfe <_dtoa_r+0x47e>
 800ccb4:	f1bb 0f00 	cmp.w	fp, #0
 800ccb8:	dd38      	ble.n	800cd2c <_dtoa_r+0x3ac>
 800ccba:	4bc0      	ldr	r3, [pc, #768]	; (800cfbc <_dtoa_r+0x63c>)
 800ccbc:	f00b 020f 	and.w	r2, fp, #15
 800ccc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ccc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cccc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ccd0:	d019      	beq.n	800cd06 <_dtoa_r+0x386>
 800ccd2:	4bbb      	ldr	r3, [pc, #748]	; (800cfc0 <_dtoa_r+0x640>)
 800ccd4:	ec51 0b18 	vmov	r0, r1, d8
 800ccd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ccdc:	f7f3 fdc6 	bl	800086c <__aeabi_ddiv>
 800cce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cce4:	f008 080f 	and.w	r8, r8, #15
 800cce8:	2503      	movs	r5, #3
 800ccea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cfc0 <_dtoa_r+0x640>
 800ccee:	f1b8 0f00 	cmp.w	r8, #0
 800ccf2:	d10a      	bne.n	800cd0a <_dtoa_r+0x38a>
 800ccf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccf8:	4632      	mov	r2, r6
 800ccfa:	463b      	mov	r3, r7
 800ccfc:	f7f3 fdb6 	bl	800086c <__aeabi_ddiv>
 800cd00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd04:	e02b      	b.n	800cd5e <_dtoa_r+0x3de>
 800cd06:	2502      	movs	r5, #2
 800cd08:	e7ef      	b.n	800ccea <_dtoa_r+0x36a>
 800cd0a:	f018 0f01 	tst.w	r8, #1
 800cd0e:	d008      	beq.n	800cd22 <_dtoa_r+0x3a2>
 800cd10:	4630      	mov	r0, r6
 800cd12:	4639      	mov	r1, r7
 800cd14:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cd18:	f7f3 fc7e 	bl	8000618 <__aeabi_dmul>
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	4606      	mov	r6, r0
 800cd20:	460f      	mov	r7, r1
 800cd22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cd26:	f109 0908 	add.w	r9, r9, #8
 800cd2a:	e7e0      	b.n	800ccee <_dtoa_r+0x36e>
 800cd2c:	f000 809f 	beq.w	800ce6e <_dtoa_r+0x4ee>
 800cd30:	f1cb 0600 	rsb	r6, fp, #0
 800cd34:	4ba1      	ldr	r3, [pc, #644]	; (800cfbc <_dtoa_r+0x63c>)
 800cd36:	4fa2      	ldr	r7, [pc, #648]	; (800cfc0 <_dtoa_r+0x640>)
 800cd38:	f006 020f 	and.w	r2, r6, #15
 800cd3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	ec51 0b18 	vmov	r0, r1, d8
 800cd48:	f7f3 fc66 	bl	8000618 <__aeabi_dmul>
 800cd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd50:	1136      	asrs	r6, r6, #4
 800cd52:	2300      	movs	r3, #0
 800cd54:	2502      	movs	r5, #2
 800cd56:	2e00      	cmp	r6, #0
 800cd58:	d17e      	bne.n	800ce58 <_dtoa_r+0x4d8>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1d0      	bne.n	800cd00 <_dtoa_r+0x380>
 800cd5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 8084 	beq.w	800ce72 <_dtoa_r+0x4f2>
 800cd6a:	4b96      	ldr	r3, [pc, #600]	; (800cfc4 <_dtoa_r+0x644>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	4640      	mov	r0, r8
 800cd70:	4649      	mov	r1, r9
 800cd72:	f7f3 fec3 	bl	8000afc <__aeabi_dcmplt>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d07b      	beq.n	800ce72 <_dtoa_r+0x4f2>
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d078      	beq.n	800ce72 <_dtoa_r+0x4f2>
 800cd80:	9b01      	ldr	r3, [sp, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	dd39      	ble.n	800cdfa <_dtoa_r+0x47a>
 800cd86:	4b90      	ldr	r3, [pc, #576]	; (800cfc8 <_dtoa_r+0x648>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	4649      	mov	r1, r9
 800cd8e:	f7f3 fc43 	bl	8000618 <__aeabi_dmul>
 800cd92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd96:	9e01      	ldr	r6, [sp, #4]
 800cd98:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cd9c:	3501      	adds	r5, #1
 800cd9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cda2:	4628      	mov	r0, r5
 800cda4:	f7f3 fbce 	bl	8000544 <__aeabi_i2d>
 800cda8:	4642      	mov	r2, r8
 800cdaa:	464b      	mov	r3, r9
 800cdac:	f7f3 fc34 	bl	8000618 <__aeabi_dmul>
 800cdb0:	4b86      	ldr	r3, [pc, #536]	; (800cfcc <_dtoa_r+0x64c>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f7f3 fa7a 	bl	80002ac <__adddf3>
 800cdb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	2e00      	cmp	r6, #0
 800cdc4:	d158      	bne.n	800ce78 <_dtoa_r+0x4f8>
 800cdc6:	4b82      	ldr	r3, [pc, #520]	; (800cfd0 <_dtoa_r+0x650>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4649      	mov	r1, r9
 800cdce:	f7f3 fa6b 	bl	80002a8 <__aeabi_dsub>
 800cdd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd6:	4680      	mov	r8, r0
 800cdd8:	4689      	mov	r9, r1
 800cdda:	f7f3 fead 	bl	8000b38 <__aeabi_dcmpgt>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f040 8296 	bne.w	800d310 <_dtoa_r+0x990>
 800cde4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cde8:	4640      	mov	r0, r8
 800cdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdee:	4649      	mov	r1, r9
 800cdf0:	f7f3 fe84 	bl	8000afc <__aeabi_dcmplt>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f040 8289 	bne.w	800d30c <_dtoa_r+0x98c>
 800cdfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cdfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f2c0 814e 	blt.w	800d0a2 <_dtoa_r+0x722>
 800ce06:	f1bb 0f0e 	cmp.w	fp, #14
 800ce0a:	f300 814a 	bgt.w	800d0a2 <_dtoa_r+0x722>
 800ce0e:	4b6b      	ldr	r3, [pc, #428]	; (800cfbc <_dtoa_r+0x63c>)
 800ce10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f280 80dc 	bge.w	800cfd8 <_dtoa_r+0x658>
 800ce20:	9b04      	ldr	r3, [sp, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f300 80d8 	bgt.w	800cfd8 <_dtoa_r+0x658>
 800ce28:	f040 826f 	bne.w	800d30a <_dtoa_r+0x98a>
 800ce2c:	4b68      	ldr	r3, [pc, #416]	; (800cfd0 <_dtoa_r+0x650>)
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4640      	mov	r0, r8
 800ce32:	4649      	mov	r1, r9
 800ce34:	f7f3 fbf0 	bl	8000618 <__aeabi_dmul>
 800ce38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce3c:	f7f3 fe72 	bl	8000b24 <__aeabi_dcmpge>
 800ce40:	9e04      	ldr	r6, [sp, #16]
 800ce42:	4637      	mov	r7, r6
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f040 8245 	bne.w	800d2d4 <_dtoa_r+0x954>
 800ce4a:	9d00      	ldr	r5, [sp, #0]
 800ce4c:	2331      	movs	r3, #49	; 0x31
 800ce4e:	f805 3b01 	strb.w	r3, [r5], #1
 800ce52:	f10b 0b01 	add.w	fp, fp, #1
 800ce56:	e241      	b.n	800d2dc <_dtoa_r+0x95c>
 800ce58:	07f2      	lsls	r2, r6, #31
 800ce5a:	d505      	bpl.n	800ce68 <_dtoa_r+0x4e8>
 800ce5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce60:	f7f3 fbda 	bl	8000618 <__aeabi_dmul>
 800ce64:	3501      	adds	r5, #1
 800ce66:	2301      	movs	r3, #1
 800ce68:	1076      	asrs	r6, r6, #1
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	e773      	b.n	800cd56 <_dtoa_r+0x3d6>
 800ce6e:	2502      	movs	r5, #2
 800ce70:	e775      	b.n	800cd5e <_dtoa_r+0x3de>
 800ce72:	9e04      	ldr	r6, [sp, #16]
 800ce74:	465f      	mov	r7, fp
 800ce76:	e792      	b.n	800cd9e <_dtoa_r+0x41e>
 800ce78:	9900      	ldr	r1, [sp, #0]
 800ce7a:	4b50      	ldr	r3, [pc, #320]	; (800cfbc <_dtoa_r+0x63c>)
 800ce7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce80:	4431      	add	r1, r6
 800ce82:	9102      	str	r1, [sp, #8]
 800ce84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce86:	eeb0 9a47 	vmov.f32	s18, s14
 800ce8a:	eef0 9a67 	vmov.f32	s19, s15
 800ce8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ce92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce96:	2900      	cmp	r1, #0
 800ce98:	d044      	beq.n	800cf24 <_dtoa_r+0x5a4>
 800ce9a:	494e      	ldr	r1, [pc, #312]	; (800cfd4 <_dtoa_r+0x654>)
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	f7f3 fce5 	bl	800086c <__aeabi_ddiv>
 800cea2:	ec53 2b19 	vmov	r2, r3, d9
 800cea6:	f7f3 f9ff 	bl	80002a8 <__aeabi_dsub>
 800ceaa:	9d00      	ldr	r5, [sp, #0]
 800ceac:	ec41 0b19 	vmov	d9, r0, r1
 800ceb0:	4649      	mov	r1, r9
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	f7f3 fe60 	bl	8000b78 <__aeabi_d2iz>
 800ceb8:	4606      	mov	r6, r0
 800ceba:	f7f3 fb43 	bl	8000544 <__aeabi_i2d>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4640      	mov	r0, r8
 800cec4:	4649      	mov	r1, r9
 800cec6:	f7f3 f9ef 	bl	80002a8 <__aeabi_dsub>
 800ceca:	3630      	adds	r6, #48	; 0x30
 800cecc:	f805 6b01 	strb.w	r6, [r5], #1
 800ced0:	ec53 2b19 	vmov	r2, r3, d9
 800ced4:	4680      	mov	r8, r0
 800ced6:	4689      	mov	r9, r1
 800ced8:	f7f3 fe10 	bl	8000afc <__aeabi_dcmplt>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d164      	bne.n	800cfaa <_dtoa_r+0x62a>
 800cee0:	4642      	mov	r2, r8
 800cee2:	464b      	mov	r3, r9
 800cee4:	4937      	ldr	r1, [pc, #220]	; (800cfc4 <_dtoa_r+0x644>)
 800cee6:	2000      	movs	r0, #0
 800cee8:	f7f3 f9de 	bl	80002a8 <__aeabi_dsub>
 800ceec:	ec53 2b19 	vmov	r2, r3, d9
 800cef0:	f7f3 fe04 	bl	8000afc <__aeabi_dcmplt>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f040 80b6 	bne.w	800d066 <_dtoa_r+0x6e6>
 800cefa:	9b02      	ldr	r3, [sp, #8]
 800cefc:	429d      	cmp	r5, r3
 800cefe:	f43f af7c 	beq.w	800cdfa <_dtoa_r+0x47a>
 800cf02:	4b31      	ldr	r3, [pc, #196]	; (800cfc8 <_dtoa_r+0x648>)
 800cf04:	ec51 0b19 	vmov	r0, r1, d9
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f7f3 fb85 	bl	8000618 <__aeabi_dmul>
 800cf0e:	4b2e      	ldr	r3, [pc, #184]	; (800cfc8 <_dtoa_r+0x648>)
 800cf10:	ec41 0b19 	vmov	d9, r0, r1
 800cf14:	2200      	movs	r2, #0
 800cf16:	4640      	mov	r0, r8
 800cf18:	4649      	mov	r1, r9
 800cf1a:	f7f3 fb7d 	bl	8000618 <__aeabi_dmul>
 800cf1e:	4680      	mov	r8, r0
 800cf20:	4689      	mov	r9, r1
 800cf22:	e7c5      	b.n	800ceb0 <_dtoa_r+0x530>
 800cf24:	ec51 0b17 	vmov	r0, r1, d7
 800cf28:	f7f3 fb76 	bl	8000618 <__aeabi_dmul>
 800cf2c:	9b02      	ldr	r3, [sp, #8]
 800cf2e:	9d00      	ldr	r5, [sp, #0]
 800cf30:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf32:	ec41 0b19 	vmov	d9, r0, r1
 800cf36:	4649      	mov	r1, r9
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f7f3 fe1d 	bl	8000b78 <__aeabi_d2iz>
 800cf3e:	4606      	mov	r6, r0
 800cf40:	f7f3 fb00 	bl	8000544 <__aeabi_i2d>
 800cf44:	3630      	adds	r6, #48	; 0x30
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	4649      	mov	r1, r9
 800cf4e:	f7f3 f9ab 	bl	80002a8 <__aeabi_dsub>
 800cf52:	f805 6b01 	strb.w	r6, [r5], #1
 800cf56:	9b02      	ldr	r3, [sp, #8]
 800cf58:	429d      	cmp	r5, r3
 800cf5a:	4680      	mov	r8, r0
 800cf5c:	4689      	mov	r9, r1
 800cf5e:	f04f 0200 	mov.w	r2, #0
 800cf62:	d124      	bne.n	800cfae <_dtoa_r+0x62e>
 800cf64:	4b1b      	ldr	r3, [pc, #108]	; (800cfd4 <_dtoa_r+0x654>)
 800cf66:	ec51 0b19 	vmov	r0, r1, d9
 800cf6a:	f7f3 f99f 	bl	80002ac <__adddf3>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4640      	mov	r0, r8
 800cf74:	4649      	mov	r1, r9
 800cf76:	f7f3 fddf 	bl	8000b38 <__aeabi_dcmpgt>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d173      	bne.n	800d066 <_dtoa_r+0x6e6>
 800cf7e:	ec53 2b19 	vmov	r2, r3, d9
 800cf82:	4914      	ldr	r1, [pc, #80]	; (800cfd4 <_dtoa_r+0x654>)
 800cf84:	2000      	movs	r0, #0
 800cf86:	f7f3 f98f 	bl	80002a8 <__aeabi_dsub>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4649      	mov	r1, r9
 800cf92:	f7f3 fdb3 	bl	8000afc <__aeabi_dcmplt>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f43f af2f 	beq.w	800cdfa <_dtoa_r+0x47a>
 800cf9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cf9e:	1e6b      	subs	r3, r5, #1
 800cfa0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfa6:	2b30      	cmp	r3, #48	; 0x30
 800cfa8:	d0f8      	beq.n	800cf9c <_dtoa_r+0x61c>
 800cfaa:	46bb      	mov	fp, r7
 800cfac:	e04a      	b.n	800d044 <_dtoa_r+0x6c4>
 800cfae:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <_dtoa_r+0x648>)
 800cfb0:	f7f3 fb32 	bl	8000618 <__aeabi_dmul>
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	e7bd      	b.n	800cf36 <_dtoa_r+0x5b6>
 800cfba:	bf00      	nop
 800cfbc:	08012ca0 	.word	0x08012ca0
 800cfc0:	08012c78 	.word	0x08012c78
 800cfc4:	3ff00000 	.word	0x3ff00000
 800cfc8:	40240000 	.word	0x40240000
 800cfcc:	401c0000 	.word	0x401c0000
 800cfd0:	40140000 	.word	0x40140000
 800cfd4:	3fe00000 	.word	0x3fe00000
 800cfd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cfdc:	9d00      	ldr	r5, [sp, #0]
 800cfde:	4642      	mov	r2, r8
 800cfe0:	464b      	mov	r3, r9
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 fc41 	bl	800086c <__aeabi_ddiv>
 800cfea:	f7f3 fdc5 	bl	8000b78 <__aeabi_d2iz>
 800cfee:	9001      	str	r0, [sp, #4]
 800cff0:	f7f3 faa8 	bl	8000544 <__aeabi_i2d>
 800cff4:	4642      	mov	r2, r8
 800cff6:	464b      	mov	r3, r9
 800cff8:	f7f3 fb0e 	bl	8000618 <__aeabi_dmul>
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	4630      	mov	r0, r6
 800d002:	4639      	mov	r1, r7
 800d004:	f7f3 f950 	bl	80002a8 <__aeabi_dsub>
 800d008:	9e01      	ldr	r6, [sp, #4]
 800d00a:	9f04      	ldr	r7, [sp, #16]
 800d00c:	3630      	adds	r6, #48	; 0x30
 800d00e:	f805 6b01 	strb.w	r6, [r5], #1
 800d012:	9e00      	ldr	r6, [sp, #0]
 800d014:	1bae      	subs	r6, r5, r6
 800d016:	42b7      	cmp	r7, r6
 800d018:	4602      	mov	r2, r0
 800d01a:	460b      	mov	r3, r1
 800d01c:	d134      	bne.n	800d088 <_dtoa_r+0x708>
 800d01e:	f7f3 f945 	bl	80002ac <__adddf3>
 800d022:	4642      	mov	r2, r8
 800d024:	464b      	mov	r3, r9
 800d026:	4606      	mov	r6, r0
 800d028:	460f      	mov	r7, r1
 800d02a:	f7f3 fd85 	bl	8000b38 <__aeabi_dcmpgt>
 800d02e:	b9c8      	cbnz	r0, 800d064 <_dtoa_r+0x6e4>
 800d030:	4642      	mov	r2, r8
 800d032:	464b      	mov	r3, r9
 800d034:	4630      	mov	r0, r6
 800d036:	4639      	mov	r1, r7
 800d038:	f7f3 fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 800d03c:	b110      	cbz	r0, 800d044 <_dtoa_r+0x6c4>
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	07db      	lsls	r3, r3, #31
 800d042:	d40f      	bmi.n	800d064 <_dtoa_r+0x6e4>
 800d044:	4651      	mov	r1, sl
 800d046:	4620      	mov	r0, r4
 800d048:	f000 ff36 	bl	800deb8 <_Bfree>
 800d04c:	2300      	movs	r3, #0
 800d04e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d050:	702b      	strb	r3, [r5, #0]
 800d052:	f10b 0301 	add.w	r3, fp, #1
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f43f ace2 	beq.w	800ca24 <_dtoa_r+0xa4>
 800d060:	601d      	str	r5, [r3, #0]
 800d062:	e4df      	b.n	800ca24 <_dtoa_r+0xa4>
 800d064:	465f      	mov	r7, fp
 800d066:	462b      	mov	r3, r5
 800d068:	461d      	mov	r5, r3
 800d06a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d06e:	2a39      	cmp	r2, #57	; 0x39
 800d070:	d106      	bne.n	800d080 <_dtoa_r+0x700>
 800d072:	9a00      	ldr	r2, [sp, #0]
 800d074:	429a      	cmp	r2, r3
 800d076:	d1f7      	bne.n	800d068 <_dtoa_r+0x6e8>
 800d078:	9900      	ldr	r1, [sp, #0]
 800d07a:	2230      	movs	r2, #48	; 0x30
 800d07c:	3701      	adds	r7, #1
 800d07e:	700a      	strb	r2, [r1, #0]
 800d080:	781a      	ldrb	r2, [r3, #0]
 800d082:	3201      	adds	r2, #1
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	e790      	b.n	800cfaa <_dtoa_r+0x62a>
 800d088:	4ba3      	ldr	r3, [pc, #652]	; (800d318 <_dtoa_r+0x998>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	f7f3 fac4 	bl	8000618 <__aeabi_dmul>
 800d090:	2200      	movs	r2, #0
 800d092:	2300      	movs	r3, #0
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	f7f3 fd26 	bl	8000ae8 <__aeabi_dcmpeq>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d09e      	beq.n	800cfde <_dtoa_r+0x65e>
 800d0a0:	e7d0      	b.n	800d044 <_dtoa_r+0x6c4>
 800d0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a4:	2a00      	cmp	r2, #0
 800d0a6:	f000 80ca 	beq.w	800d23e <_dtoa_r+0x8be>
 800d0aa:	9a07      	ldr	r2, [sp, #28]
 800d0ac:	2a01      	cmp	r2, #1
 800d0ae:	f300 80ad 	bgt.w	800d20c <_dtoa_r+0x88c>
 800d0b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0b4:	2a00      	cmp	r2, #0
 800d0b6:	f000 80a5 	beq.w	800d204 <_dtoa_r+0x884>
 800d0ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0be:	9e08      	ldr	r6, [sp, #32]
 800d0c0:	9d05      	ldr	r5, [sp, #20]
 800d0c2:	9a05      	ldr	r2, [sp, #20]
 800d0c4:	441a      	add	r2, r3
 800d0c6:	9205      	str	r2, [sp, #20]
 800d0c8:	9a06      	ldr	r2, [sp, #24]
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	441a      	add	r2, r3
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	9206      	str	r2, [sp, #24]
 800d0d2:	f000 fff1 	bl	800e0b8 <__i2b>
 800d0d6:	4607      	mov	r7, r0
 800d0d8:	b165      	cbz	r5, 800d0f4 <_dtoa_r+0x774>
 800d0da:	9b06      	ldr	r3, [sp, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	dd09      	ble.n	800d0f4 <_dtoa_r+0x774>
 800d0e0:	42ab      	cmp	r3, r5
 800d0e2:	9a05      	ldr	r2, [sp, #20]
 800d0e4:	bfa8      	it	ge
 800d0e6:	462b      	movge	r3, r5
 800d0e8:	1ad2      	subs	r2, r2, r3
 800d0ea:	9205      	str	r2, [sp, #20]
 800d0ec:	9a06      	ldr	r2, [sp, #24]
 800d0ee:	1aed      	subs	r5, r5, r3
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	9306      	str	r3, [sp, #24]
 800d0f4:	9b08      	ldr	r3, [sp, #32]
 800d0f6:	b1f3      	cbz	r3, 800d136 <_dtoa_r+0x7b6>
 800d0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 80a3 	beq.w	800d246 <_dtoa_r+0x8c6>
 800d100:	2e00      	cmp	r6, #0
 800d102:	dd10      	ble.n	800d126 <_dtoa_r+0x7a6>
 800d104:	4639      	mov	r1, r7
 800d106:	4632      	mov	r2, r6
 800d108:	4620      	mov	r0, r4
 800d10a:	f001 f895 	bl	800e238 <__pow5mult>
 800d10e:	4652      	mov	r2, sl
 800d110:	4601      	mov	r1, r0
 800d112:	4607      	mov	r7, r0
 800d114:	4620      	mov	r0, r4
 800d116:	f000 ffe5 	bl	800e0e4 <__multiply>
 800d11a:	4651      	mov	r1, sl
 800d11c:	4680      	mov	r8, r0
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 feca 	bl	800deb8 <_Bfree>
 800d124:	46c2      	mov	sl, r8
 800d126:	9b08      	ldr	r3, [sp, #32]
 800d128:	1b9a      	subs	r2, r3, r6
 800d12a:	d004      	beq.n	800d136 <_dtoa_r+0x7b6>
 800d12c:	4651      	mov	r1, sl
 800d12e:	4620      	mov	r0, r4
 800d130:	f001 f882 	bl	800e238 <__pow5mult>
 800d134:	4682      	mov	sl, r0
 800d136:	2101      	movs	r1, #1
 800d138:	4620      	mov	r0, r4
 800d13a:	f000 ffbd 	bl	800e0b8 <__i2b>
 800d13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d140:	2b00      	cmp	r3, #0
 800d142:	4606      	mov	r6, r0
 800d144:	f340 8081 	ble.w	800d24a <_dtoa_r+0x8ca>
 800d148:	461a      	mov	r2, r3
 800d14a:	4601      	mov	r1, r0
 800d14c:	4620      	mov	r0, r4
 800d14e:	f001 f873 	bl	800e238 <__pow5mult>
 800d152:	9b07      	ldr	r3, [sp, #28]
 800d154:	2b01      	cmp	r3, #1
 800d156:	4606      	mov	r6, r0
 800d158:	dd7a      	ble.n	800d250 <_dtoa_r+0x8d0>
 800d15a:	f04f 0800 	mov.w	r8, #0
 800d15e:	6933      	ldr	r3, [r6, #16]
 800d160:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d164:	6918      	ldr	r0, [r3, #16]
 800d166:	f000 ff59 	bl	800e01c <__hi0bits>
 800d16a:	f1c0 0020 	rsb	r0, r0, #32
 800d16e:	9b06      	ldr	r3, [sp, #24]
 800d170:	4418      	add	r0, r3
 800d172:	f010 001f 	ands.w	r0, r0, #31
 800d176:	f000 8094 	beq.w	800d2a2 <_dtoa_r+0x922>
 800d17a:	f1c0 0320 	rsb	r3, r0, #32
 800d17e:	2b04      	cmp	r3, #4
 800d180:	f340 8085 	ble.w	800d28e <_dtoa_r+0x90e>
 800d184:	9b05      	ldr	r3, [sp, #20]
 800d186:	f1c0 001c 	rsb	r0, r0, #28
 800d18a:	4403      	add	r3, r0
 800d18c:	9305      	str	r3, [sp, #20]
 800d18e:	9b06      	ldr	r3, [sp, #24]
 800d190:	4403      	add	r3, r0
 800d192:	4405      	add	r5, r0
 800d194:	9306      	str	r3, [sp, #24]
 800d196:	9b05      	ldr	r3, [sp, #20]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	dd05      	ble.n	800d1a8 <_dtoa_r+0x828>
 800d19c:	4651      	mov	r1, sl
 800d19e:	461a      	mov	r2, r3
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f001 f8a3 	bl	800e2ec <__lshift>
 800d1a6:	4682      	mov	sl, r0
 800d1a8:	9b06      	ldr	r3, [sp, #24]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	dd05      	ble.n	800d1ba <_dtoa_r+0x83a>
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f001 f89a 	bl	800e2ec <__lshift>
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d072      	beq.n	800d2a6 <_dtoa_r+0x926>
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	f001 f8fe 	bl	800e3c4 <__mcmp>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	da6c      	bge.n	800d2a6 <_dtoa_r+0x926>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4651      	mov	r1, sl
 800d1d0:	220a      	movs	r2, #10
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 fe92 	bl	800defc <__multadd>
 800d1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1de:	4682      	mov	sl, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 81b0 	beq.w	800d546 <_dtoa_r+0xbc6>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	220a      	movs	r2, #10
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 fe85 	bl	800defc <__multadd>
 800d1f2:	9b01      	ldr	r3, [sp, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	4607      	mov	r7, r0
 800d1f8:	f300 8096 	bgt.w	800d328 <_dtoa_r+0x9a8>
 800d1fc:	9b07      	ldr	r3, [sp, #28]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	dc59      	bgt.n	800d2b6 <_dtoa_r+0x936>
 800d202:	e091      	b.n	800d328 <_dtoa_r+0x9a8>
 800d204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d20a:	e758      	b.n	800d0be <_dtoa_r+0x73e>
 800d20c:	9b04      	ldr	r3, [sp, #16]
 800d20e:	1e5e      	subs	r6, r3, #1
 800d210:	9b08      	ldr	r3, [sp, #32]
 800d212:	42b3      	cmp	r3, r6
 800d214:	bfbf      	itttt	lt
 800d216:	9b08      	ldrlt	r3, [sp, #32]
 800d218:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d21a:	9608      	strlt	r6, [sp, #32]
 800d21c:	1af3      	sublt	r3, r6, r3
 800d21e:	bfb4      	ite	lt
 800d220:	18d2      	addlt	r2, r2, r3
 800d222:	1b9e      	subge	r6, r3, r6
 800d224:	9b04      	ldr	r3, [sp, #16]
 800d226:	bfbc      	itt	lt
 800d228:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d22a:	2600      	movlt	r6, #0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfb7      	itett	lt
 800d230:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d234:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d238:	1a9d      	sublt	r5, r3, r2
 800d23a:	2300      	movlt	r3, #0
 800d23c:	e741      	b.n	800d0c2 <_dtoa_r+0x742>
 800d23e:	9e08      	ldr	r6, [sp, #32]
 800d240:	9d05      	ldr	r5, [sp, #20]
 800d242:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d244:	e748      	b.n	800d0d8 <_dtoa_r+0x758>
 800d246:	9a08      	ldr	r2, [sp, #32]
 800d248:	e770      	b.n	800d12c <_dtoa_r+0x7ac>
 800d24a:	9b07      	ldr	r3, [sp, #28]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	dc19      	bgt.n	800d284 <_dtoa_r+0x904>
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	b9bb      	cbnz	r3, 800d284 <_dtoa_r+0x904>
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d25a:	b99b      	cbnz	r3, 800d284 <_dtoa_r+0x904>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d262:	0d1b      	lsrs	r3, r3, #20
 800d264:	051b      	lsls	r3, r3, #20
 800d266:	b183      	cbz	r3, 800d28a <_dtoa_r+0x90a>
 800d268:	9b05      	ldr	r3, [sp, #20]
 800d26a:	3301      	adds	r3, #1
 800d26c:	9305      	str	r3, [sp, #20]
 800d26e:	9b06      	ldr	r3, [sp, #24]
 800d270:	3301      	adds	r3, #1
 800d272:	9306      	str	r3, [sp, #24]
 800d274:	f04f 0801 	mov.w	r8, #1
 800d278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f47f af6f 	bne.w	800d15e <_dtoa_r+0x7de>
 800d280:	2001      	movs	r0, #1
 800d282:	e774      	b.n	800d16e <_dtoa_r+0x7ee>
 800d284:	f04f 0800 	mov.w	r8, #0
 800d288:	e7f6      	b.n	800d278 <_dtoa_r+0x8f8>
 800d28a:	4698      	mov	r8, r3
 800d28c:	e7f4      	b.n	800d278 <_dtoa_r+0x8f8>
 800d28e:	d082      	beq.n	800d196 <_dtoa_r+0x816>
 800d290:	9a05      	ldr	r2, [sp, #20]
 800d292:	331c      	adds	r3, #28
 800d294:	441a      	add	r2, r3
 800d296:	9205      	str	r2, [sp, #20]
 800d298:	9a06      	ldr	r2, [sp, #24]
 800d29a:	441a      	add	r2, r3
 800d29c:	441d      	add	r5, r3
 800d29e:	9206      	str	r2, [sp, #24]
 800d2a0:	e779      	b.n	800d196 <_dtoa_r+0x816>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	e7f4      	b.n	800d290 <_dtoa_r+0x910>
 800d2a6:	9b04      	ldr	r3, [sp, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	dc37      	bgt.n	800d31c <_dtoa_r+0x99c>
 800d2ac:	9b07      	ldr	r3, [sp, #28]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	dd34      	ble.n	800d31c <_dtoa_r+0x99c>
 800d2b2:	9b04      	ldr	r3, [sp, #16]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	b963      	cbnz	r3, 800d2d4 <_dtoa_r+0x954>
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	2205      	movs	r2, #5
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fe1c 	bl	800defc <__multadd>
 800d2c4:	4601      	mov	r1, r0
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	4650      	mov	r0, sl
 800d2ca:	f001 f87b 	bl	800e3c4 <__mcmp>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f73f adbb 	bgt.w	800ce4a <_dtoa_r+0x4ca>
 800d2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d6:	9d00      	ldr	r5, [sp, #0]
 800d2d8:	ea6f 0b03 	mvn.w	fp, r3
 800d2dc:	f04f 0800 	mov.w	r8, #0
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 fde8 	bl	800deb8 <_Bfree>
 800d2e8:	2f00      	cmp	r7, #0
 800d2ea:	f43f aeab 	beq.w	800d044 <_dtoa_r+0x6c4>
 800d2ee:	f1b8 0f00 	cmp.w	r8, #0
 800d2f2:	d005      	beq.n	800d300 <_dtoa_r+0x980>
 800d2f4:	45b8      	cmp	r8, r7
 800d2f6:	d003      	beq.n	800d300 <_dtoa_r+0x980>
 800d2f8:	4641      	mov	r1, r8
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fddc 	bl	800deb8 <_Bfree>
 800d300:	4639      	mov	r1, r7
 800d302:	4620      	mov	r0, r4
 800d304:	f000 fdd8 	bl	800deb8 <_Bfree>
 800d308:	e69c      	b.n	800d044 <_dtoa_r+0x6c4>
 800d30a:	2600      	movs	r6, #0
 800d30c:	4637      	mov	r7, r6
 800d30e:	e7e1      	b.n	800d2d4 <_dtoa_r+0x954>
 800d310:	46bb      	mov	fp, r7
 800d312:	4637      	mov	r7, r6
 800d314:	e599      	b.n	800ce4a <_dtoa_r+0x4ca>
 800d316:	bf00      	nop
 800d318:	40240000 	.word	0x40240000
 800d31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 80c8 	beq.w	800d4b4 <_dtoa_r+0xb34>
 800d324:	9b04      	ldr	r3, [sp, #16]
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	2d00      	cmp	r5, #0
 800d32a:	dd05      	ble.n	800d338 <_dtoa_r+0x9b8>
 800d32c:	4639      	mov	r1, r7
 800d32e:	462a      	mov	r2, r5
 800d330:	4620      	mov	r0, r4
 800d332:	f000 ffdb 	bl	800e2ec <__lshift>
 800d336:	4607      	mov	r7, r0
 800d338:	f1b8 0f00 	cmp.w	r8, #0
 800d33c:	d05b      	beq.n	800d3f6 <_dtoa_r+0xa76>
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	4620      	mov	r0, r4
 800d342:	f000 fd79 	bl	800de38 <_Balloc>
 800d346:	4605      	mov	r5, r0
 800d348:	b928      	cbnz	r0, 800d356 <_dtoa_r+0x9d6>
 800d34a:	4b83      	ldr	r3, [pc, #524]	; (800d558 <_dtoa_r+0xbd8>)
 800d34c:	4602      	mov	r2, r0
 800d34e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d352:	f7ff bb2e 	b.w	800c9b2 <_dtoa_r+0x32>
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	3202      	adds	r2, #2
 800d35a:	0092      	lsls	r2, r2, #2
 800d35c:	f107 010c 	add.w	r1, r7, #12
 800d360:	300c      	adds	r0, #12
 800d362:	f7ff fa4f 	bl	800c804 <memcpy>
 800d366:	2201      	movs	r2, #1
 800d368:	4629      	mov	r1, r5
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 ffbe 	bl	800e2ec <__lshift>
 800d370:	9b00      	ldr	r3, [sp, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d37a:	4413      	add	r3, r2
 800d37c:	9308      	str	r3, [sp, #32]
 800d37e:	9b02      	ldr	r3, [sp, #8]
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	46b8      	mov	r8, r7
 800d386:	9306      	str	r3, [sp, #24]
 800d388:	4607      	mov	r7, r0
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	4631      	mov	r1, r6
 800d38e:	3b01      	subs	r3, #1
 800d390:	4650      	mov	r0, sl
 800d392:	9301      	str	r3, [sp, #4]
 800d394:	f7ff fa6a 	bl	800c86c <quorem>
 800d398:	4641      	mov	r1, r8
 800d39a:	9002      	str	r0, [sp, #8]
 800d39c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	f001 f80f 	bl	800e3c4 <__mcmp>
 800d3a6:	463a      	mov	r2, r7
 800d3a8:	9005      	str	r0, [sp, #20]
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f001 f825 	bl	800e3fc <__mdiff>
 800d3b2:	68c2      	ldr	r2, [r0, #12]
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	bb02      	cbnz	r2, 800d3fa <_dtoa_r+0xa7a>
 800d3b8:	4601      	mov	r1, r0
 800d3ba:	4650      	mov	r0, sl
 800d3bc:	f001 f802 	bl	800e3c4 <__mcmp>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d3c8:	f000 fd76 	bl	800deb8 <_Bfree>
 800d3cc:	9b07      	ldr	r3, [sp, #28]
 800d3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3d0:	9d04      	ldr	r5, [sp, #16]
 800d3d2:	ea43 0102 	orr.w	r1, r3, r2
 800d3d6:	9b06      	ldr	r3, [sp, #24]
 800d3d8:	4319      	orrs	r1, r3
 800d3da:	d110      	bne.n	800d3fe <_dtoa_r+0xa7e>
 800d3dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d3e0:	d029      	beq.n	800d436 <_dtoa_r+0xab6>
 800d3e2:	9b05      	ldr	r3, [sp, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	dd02      	ble.n	800d3ee <_dtoa_r+0xa6e>
 800d3e8:	9b02      	ldr	r3, [sp, #8]
 800d3ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d3ee:	9b01      	ldr	r3, [sp, #4]
 800d3f0:	f883 9000 	strb.w	r9, [r3]
 800d3f4:	e774      	b.n	800d2e0 <_dtoa_r+0x960>
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	e7ba      	b.n	800d370 <_dtoa_r+0x9f0>
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	e7e1      	b.n	800d3c2 <_dtoa_r+0xa42>
 800d3fe:	9b05      	ldr	r3, [sp, #20]
 800d400:	2b00      	cmp	r3, #0
 800d402:	db04      	blt.n	800d40e <_dtoa_r+0xa8e>
 800d404:	9907      	ldr	r1, [sp, #28]
 800d406:	430b      	orrs	r3, r1
 800d408:	9906      	ldr	r1, [sp, #24]
 800d40a:	430b      	orrs	r3, r1
 800d40c:	d120      	bne.n	800d450 <_dtoa_r+0xad0>
 800d40e:	2a00      	cmp	r2, #0
 800d410:	dded      	ble.n	800d3ee <_dtoa_r+0xa6e>
 800d412:	4651      	mov	r1, sl
 800d414:	2201      	movs	r2, #1
 800d416:	4620      	mov	r0, r4
 800d418:	f000 ff68 	bl	800e2ec <__lshift>
 800d41c:	4631      	mov	r1, r6
 800d41e:	4682      	mov	sl, r0
 800d420:	f000 ffd0 	bl	800e3c4 <__mcmp>
 800d424:	2800      	cmp	r0, #0
 800d426:	dc03      	bgt.n	800d430 <_dtoa_r+0xab0>
 800d428:	d1e1      	bne.n	800d3ee <_dtoa_r+0xa6e>
 800d42a:	f019 0f01 	tst.w	r9, #1
 800d42e:	d0de      	beq.n	800d3ee <_dtoa_r+0xa6e>
 800d430:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d434:	d1d8      	bne.n	800d3e8 <_dtoa_r+0xa68>
 800d436:	9a01      	ldr	r2, [sp, #4]
 800d438:	2339      	movs	r3, #57	; 0x39
 800d43a:	7013      	strb	r3, [r2, #0]
 800d43c:	462b      	mov	r3, r5
 800d43e:	461d      	mov	r5, r3
 800d440:	3b01      	subs	r3, #1
 800d442:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d446:	2a39      	cmp	r2, #57	; 0x39
 800d448:	d06c      	beq.n	800d524 <_dtoa_r+0xba4>
 800d44a:	3201      	adds	r2, #1
 800d44c:	701a      	strb	r2, [r3, #0]
 800d44e:	e747      	b.n	800d2e0 <_dtoa_r+0x960>
 800d450:	2a00      	cmp	r2, #0
 800d452:	dd07      	ble.n	800d464 <_dtoa_r+0xae4>
 800d454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d458:	d0ed      	beq.n	800d436 <_dtoa_r+0xab6>
 800d45a:	9a01      	ldr	r2, [sp, #4]
 800d45c:	f109 0301 	add.w	r3, r9, #1
 800d460:	7013      	strb	r3, [r2, #0]
 800d462:	e73d      	b.n	800d2e0 <_dtoa_r+0x960>
 800d464:	9b04      	ldr	r3, [sp, #16]
 800d466:	9a08      	ldr	r2, [sp, #32]
 800d468:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d043      	beq.n	800d4f8 <_dtoa_r+0xb78>
 800d470:	4651      	mov	r1, sl
 800d472:	2300      	movs	r3, #0
 800d474:	220a      	movs	r2, #10
 800d476:	4620      	mov	r0, r4
 800d478:	f000 fd40 	bl	800defc <__multadd>
 800d47c:	45b8      	cmp	r8, r7
 800d47e:	4682      	mov	sl, r0
 800d480:	f04f 0300 	mov.w	r3, #0
 800d484:	f04f 020a 	mov.w	r2, #10
 800d488:	4641      	mov	r1, r8
 800d48a:	4620      	mov	r0, r4
 800d48c:	d107      	bne.n	800d49e <_dtoa_r+0xb1e>
 800d48e:	f000 fd35 	bl	800defc <__multadd>
 800d492:	4680      	mov	r8, r0
 800d494:	4607      	mov	r7, r0
 800d496:	9b04      	ldr	r3, [sp, #16]
 800d498:	3301      	adds	r3, #1
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	e775      	b.n	800d38a <_dtoa_r+0xa0a>
 800d49e:	f000 fd2d 	bl	800defc <__multadd>
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	4680      	mov	r8, r0
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	220a      	movs	r2, #10
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 fd26 	bl	800defc <__multadd>
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	e7f0      	b.n	800d496 <_dtoa_r+0xb16>
 800d4b4:	9b04      	ldr	r3, [sp, #16]
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	9d00      	ldr	r5, [sp, #0]
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4650      	mov	r0, sl
 800d4be:	f7ff f9d5 	bl	800c86c <quorem>
 800d4c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	f805 9b01 	strb.w	r9, [r5], #1
 800d4cc:	1aea      	subs	r2, r5, r3
 800d4ce:	9b01      	ldr	r3, [sp, #4]
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	dd07      	ble.n	800d4e4 <_dtoa_r+0xb64>
 800d4d4:	4651      	mov	r1, sl
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	220a      	movs	r2, #10
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f000 fd0e 	bl	800defc <__multadd>
 800d4e0:	4682      	mov	sl, r0
 800d4e2:	e7ea      	b.n	800d4ba <_dtoa_r+0xb3a>
 800d4e4:	9b01      	ldr	r3, [sp, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	bfc8      	it	gt
 800d4ea:	461d      	movgt	r5, r3
 800d4ec:	9b00      	ldr	r3, [sp, #0]
 800d4ee:	bfd8      	it	le
 800d4f0:	2501      	movle	r5, #1
 800d4f2:	441d      	add	r5, r3
 800d4f4:	f04f 0800 	mov.w	r8, #0
 800d4f8:	4651      	mov	r1, sl
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fef5 	bl	800e2ec <__lshift>
 800d502:	4631      	mov	r1, r6
 800d504:	4682      	mov	sl, r0
 800d506:	f000 ff5d 	bl	800e3c4 <__mcmp>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	dc96      	bgt.n	800d43c <_dtoa_r+0xabc>
 800d50e:	d102      	bne.n	800d516 <_dtoa_r+0xb96>
 800d510:	f019 0f01 	tst.w	r9, #1
 800d514:	d192      	bne.n	800d43c <_dtoa_r+0xabc>
 800d516:	462b      	mov	r3, r5
 800d518:	461d      	mov	r5, r3
 800d51a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d51e:	2a30      	cmp	r2, #48	; 0x30
 800d520:	d0fa      	beq.n	800d518 <_dtoa_r+0xb98>
 800d522:	e6dd      	b.n	800d2e0 <_dtoa_r+0x960>
 800d524:	9a00      	ldr	r2, [sp, #0]
 800d526:	429a      	cmp	r2, r3
 800d528:	d189      	bne.n	800d43e <_dtoa_r+0xabe>
 800d52a:	f10b 0b01 	add.w	fp, fp, #1
 800d52e:	2331      	movs	r3, #49	; 0x31
 800d530:	e796      	b.n	800d460 <_dtoa_r+0xae0>
 800d532:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <_dtoa_r+0xbdc>)
 800d534:	f7ff ba99 	b.w	800ca6a <_dtoa_r+0xea>
 800d538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f47f aa6d 	bne.w	800ca1a <_dtoa_r+0x9a>
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <_dtoa_r+0xbe0>)
 800d542:	f7ff ba92 	b.w	800ca6a <_dtoa_r+0xea>
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	dcb5      	bgt.n	800d4b8 <_dtoa_r+0xb38>
 800d54c:	9b07      	ldr	r3, [sp, #28]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	f73f aeb1 	bgt.w	800d2b6 <_dtoa_r+0x936>
 800d554:	e7b0      	b.n	800d4b8 <_dtoa_r+0xb38>
 800d556:	bf00      	nop
 800d558:	08012ba9 	.word	0x08012ba9
 800d55c:	08012e9c 	.word	0x08012e9c
 800d560:	08012b44 	.word	0x08012b44

0800d564 <_free_r>:
 800d564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d566:	2900      	cmp	r1, #0
 800d568:	d044      	beq.n	800d5f4 <_free_r+0x90>
 800d56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d56e:	9001      	str	r0, [sp, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f1a1 0404 	sub.w	r4, r1, #4
 800d576:	bfb8      	it	lt
 800d578:	18e4      	addlt	r4, r4, r3
 800d57a:	f000 fc51 	bl	800de20 <__malloc_lock>
 800d57e:	4a1e      	ldr	r2, [pc, #120]	; (800d5f8 <_free_r+0x94>)
 800d580:	9801      	ldr	r0, [sp, #4]
 800d582:	6813      	ldr	r3, [r2, #0]
 800d584:	b933      	cbnz	r3, 800d594 <_free_r+0x30>
 800d586:	6063      	str	r3, [r4, #4]
 800d588:	6014      	str	r4, [r2, #0]
 800d58a:	b003      	add	sp, #12
 800d58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d590:	f000 bc4c 	b.w	800de2c <__malloc_unlock>
 800d594:	42a3      	cmp	r3, r4
 800d596:	d908      	bls.n	800d5aa <_free_r+0x46>
 800d598:	6825      	ldr	r5, [r4, #0]
 800d59a:	1961      	adds	r1, r4, r5
 800d59c:	428b      	cmp	r3, r1
 800d59e:	bf01      	itttt	eq
 800d5a0:	6819      	ldreq	r1, [r3, #0]
 800d5a2:	685b      	ldreq	r3, [r3, #4]
 800d5a4:	1949      	addeq	r1, r1, r5
 800d5a6:	6021      	streq	r1, [r4, #0]
 800d5a8:	e7ed      	b.n	800d586 <_free_r+0x22>
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	b10b      	cbz	r3, 800d5b4 <_free_r+0x50>
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	d9fa      	bls.n	800d5aa <_free_r+0x46>
 800d5b4:	6811      	ldr	r1, [r2, #0]
 800d5b6:	1855      	adds	r5, r2, r1
 800d5b8:	42a5      	cmp	r5, r4
 800d5ba:	d10b      	bne.n	800d5d4 <_free_r+0x70>
 800d5bc:	6824      	ldr	r4, [r4, #0]
 800d5be:	4421      	add	r1, r4
 800d5c0:	1854      	adds	r4, r2, r1
 800d5c2:	42a3      	cmp	r3, r4
 800d5c4:	6011      	str	r1, [r2, #0]
 800d5c6:	d1e0      	bne.n	800d58a <_free_r+0x26>
 800d5c8:	681c      	ldr	r4, [r3, #0]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	6053      	str	r3, [r2, #4]
 800d5ce:	440c      	add	r4, r1
 800d5d0:	6014      	str	r4, [r2, #0]
 800d5d2:	e7da      	b.n	800d58a <_free_r+0x26>
 800d5d4:	d902      	bls.n	800d5dc <_free_r+0x78>
 800d5d6:	230c      	movs	r3, #12
 800d5d8:	6003      	str	r3, [r0, #0]
 800d5da:	e7d6      	b.n	800d58a <_free_r+0x26>
 800d5dc:	6825      	ldr	r5, [r4, #0]
 800d5de:	1961      	adds	r1, r4, r5
 800d5e0:	428b      	cmp	r3, r1
 800d5e2:	bf04      	itt	eq
 800d5e4:	6819      	ldreq	r1, [r3, #0]
 800d5e6:	685b      	ldreq	r3, [r3, #4]
 800d5e8:	6063      	str	r3, [r4, #4]
 800d5ea:	bf04      	itt	eq
 800d5ec:	1949      	addeq	r1, r1, r5
 800d5ee:	6021      	streq	r1, [r4, #0]
 800d5f0:	6054      	str	r4, [r2, #4]
 800d5f2:	e7ca      	b.n	800d58a <_free_r+0x26>
 800d5f4:	b003      	add	sp, #12
 800d5f6:	bd30      	pop	{r4, r5, pc}
 800d5f8:	2000108c 	.word	0x2000108c

0800d5fc <rshift>:
 800d5fc:	6903      	ldr	r3, [r0, #16]
 800d5fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d606:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d60a:	f100 0414 	add.w	r4, r0, #20
 800d60e:	dd45      	ble.n	800d69c <rshift+0xa0>
 800d610:	f011 011f 	ands.w	r1, r1, #31
 800d614:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d618:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d61c:	d10c      	bne.n	800d638 <rshift+0x3c>
 800d61e:	f100 0710 	add.w	r7, r0, #16
 800d622:	4629      	mov	r1, r5
 800d624:	42b1      	cmp	r1, r6
 800d626:	d334      	bcc.n	800d692 <rshift+0x96>
 800d628:	1a9b      	subs	r3, r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	1eea      	subs	r2, r5, #3
 800d62e:	4296      	cmp	r6, r2
 800d630:	bf38      	it	cc
 800d632:	2300      	movcc	r3, #0
 800d634:	4423      	add	r3, r4
 800d636:	e015      	b.n	800d664 <rshift+0x68>
 800d638:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d63c:	f1c1 0820 	rsb	r8, r1, #32
 800d640:	40cf      	lsrs	r7, r1
 800d642:	f105 0e04 	add.w	lr, r5, #4
 800d646:	46a1      	mov	r9, r4
 800d648:	4576      	cmp	r6, lr
 800d64a:	46f4      	mov	ip, lr
 800d64c:	d815      	bhi.n	800d67a <rshift+0x7e>
 800d64e:	1a9a      	subs	r2, r3, r2
 800d650:	0092      	lsls	r2, r2, #2
 800d652:	3a04      	subs	r2, #4
 800d654:	3501      	adds	r5, #1
 800d656:	42ae      	cmp	r6, r5
 800d658:	bf38      	it	cc
 800d65a:	2200      	movcc	r2, #0
 800d65c:	18a3      	adds	r3, r4, r2
 800d65e:	50a7      	str	r7, [r4, r2]
 800d660:	b107      	cbz	r7, 800d664 <rshift+0x68>
 800d662:	3304      	adds	r3, #4
 800d664:	1b1a      	subs	r2, r3, r4
 800d666:	42a3      	cmp	r3, r4
 800d668:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d66c:	bf08      	it	eq
 800d66e:	2300      	moveq	r3, #0
 800d670:	6102      	str	r2, [r0, #16]
 800d672:	bf08      	it	eq
 800d674:	6143      	streq	r3, [r0, #20]
 800d676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d67a:	f8dc c000 	ldr.w	ip, [ip]
 800d67e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d682:	ea4c 0707 	orr.w	r7, ip, r7
 800d686:	f849 7b04 	str.w	r7, [r9], #4
 800d68a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d68e:	40cf      	lsrs	r7, r1
 800d690:	e7da      	b.n	800d648 <rshift+0x4c>
 800d692:	f851 cb04 	ldr.w	ip, [r1], #4
 800d696:	f847 cf04 	str.w	ip, [r7, #4]!
 800d69a:	e7c3      	b.n	800d624 <rshift+0x28>
 800d69c:	4623      	mov	r3, r4
 800d69e:	e7e1      	b.n	800d664 <rshift+0x68>

0800d6a0 <__hexdig_fun>:
 800d6a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d802      	bhi.n	800d6ae <__hexdig_fun+0xe>
 800d6a8:	3820      	subs	r0, #32
 800d6aa:	b2c0      	uxtb	r0, r0
 800d6ac:	4770      	bx	lr
 800d6ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d6b2:	2b05      	cmp	r3, #5
 800d6b4:	d801      	bhi.n	800d6ba <__hexdig_fun+0x1a>
 800d6b6:	3847      	subs	r0, #71	; 0x47
 800d6b8:	e7f7      	b.n	800d6aa <__hexdig_fun+0xa>
 800d6ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d6be:	2b05      	cmp	r3, #5
 800d6c0:	d801      	bhi.n	800d6c6 <__hexdig_fun+0x26>
 800d6c2:	3827      	subs	r0, #39	; 0x27
 800d6c4:	e7f1      	b.n	800d6aa <__hexdig_fun+0xa>
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	4770      	bx	lr
	...

0800d6cc <__gethex>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	4617      	mov	r7, r2
 800d6d2:	680a      	ldr	r2, [r1, #0]
 800d6d4:	b085      	sub	sp, #20
 800d6d6:	f102 0b02 	add.w	fp, r2, #2
 800d6da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d6de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d6e2:	4681      	mov	r9, r0
 800d6e4:	468a      	mov	sl, r1
 800d6e6:	9302      	str	r3, [sp, #8]
 800d6e8:	32fe      	adds	r2, #254	; 0xfe
 800d6ea:	eb02 030b 	add.w	r3, r2, fp
 800d6ee:	46d8      	mov	r8, fp
 800d6f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	2830      	cmp	r0, #48	; 0x30
 800d6f8:	d0f7      	beq.n	800d6ea <__gethex+0x1e>
 800d6fa:	f7ff ffd1 	bl	800d6a0 <__hexdig_fun>
 800d6fe:	4604      	mov	r4, r0
 800d700:	2800      	cmp	r0, #0
 800d702:	d138      	bne.n	800d776 <__gethex+0xaa>
 800d704:	49a7      	ldr	r1, [pc, #668]	; (800d9a4 <__gethex+0x2d8>)
 800d706:	2201      	movs	r2, #1
 800d708:	4640      	mov	r0, r8
 800d70a:	f7fe ff7b 	bl	800c604 <strncmp>
 800d70e:	4606      	mov	r6, r0
 800d710:	2800      	cmp	r0, #0
 800d712:	d169      	bne.n	800d7e8 <__gethex+0x11c>
 800d714:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d718:	465d      	mov	r5, fp
 800d71a:	f7ff ffc1 	bl	800d6a0 <__hexdig_fun>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d064      	beq.n	800d7ec <__gethex+0x120>
 800d722:	465a      	mov	r2, fp
 800d724:	7810      	ldrb	r0, [r2, #0]
 800d726:	2830      	cmp	r0, #48	; 0x30
 800d728:	4690      	mov	r8, r2
 800d72a:	f102 0201 	add.w	r2, r2, #1
 800d72e:	d0f9      	beq.n	800d724 <__gethex+0x58>
 800d730:	f7ff ffb6 	bl	800d6a0 <__hexdig_fun>
 800d734:	2301      	movs	r3, #1
 800d736:	fab0 f480 	clz	r4, r0
 800d73a:	0964      	lsrs	r4, r4, #5
 800d73c:	465e      	mov	r6, fp
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	4642      	mov	r2, r8
 800d742:	4615      	mov	r5, r2
 800d744:	3201      	adds	r2, #1
 800d746:	7828      	ldrb	r0, [r5, #0]
 800d748:	f7ff ffaa 	bl	800d6a0 <__hexdig_fun>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d1f8      	bne.n	800d742 <__gethex+0x76>
 800d750:	4994      	ldr	r1, [pc, #592]	; (800d9a4 <__gethex+0x2d8>)
 800d752:	2201      	movs	r2, #1
 800d754:	4628      	mov	r0, r5
 800d756:	f7fe ff55 	bl	800c604 <strncmp>
 800d75a:	b978      	cbnz	r0, 800d77c <__gethex+0xb0>
 800d75c:	b946      	cbnz	r6, 800d770 <__gethex+0xa4>
 800d75e:	1c6e      	adds	r6, r5, #1
 800d760:	4632      	mov	r2, r6
 800d762:	4615      	mov	r5, r2
 800d764:	3201      	adds	r2, #1
 800d766:	7828      	ldrb	r0, [r5, #0]
 800d768:	f7ff ff9a 	bl	800d6a0 <__hexdig_fun>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d1f8      	bne.n	800d762 <__gethex+0x96>
 800d770:	1b73      	subs	r3, r6, r5
 800d772:	009e      	lsls	r6, r3, #2
 800d774:	e004      	b.n	800d780 <__gethex+0xb4>
 800d776:	2400      	movs	r4, #0
 800d778:	4626      	mov	r6, r4
 800d77a:	e7e1      	b.n	800d740 <__gethex+0x74>
 800d77c:	2e00      	cmp	r6, #0
 800d77e:	d1f7      	bne.n	800d770 <__gethex+0xa4>
 800d780:	782b      	ldrb	r3, [r5, #0]
 800d782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d786:	2b50      	cmp	r3, #80	; 0x50
 800d788:	d13d      	bne.n	800d806 <__gethex+0x13a>
 800d78a:	786b      	ldrb	r3, [r5, #1]
 800d78c:	2b2b      	cmp	r3, #43	; 0x2b
 800d78e:	d02f      	beq.n	800d7f0 <__gethex+0x124>
 800d790:	2b2d      	cmp	r3, #45	; 0x2d
 800d792:	d031      	beq.n	800d7f8 <__gethex+0x12c>
 800d794:	1c69      	adds	r1, r5, #1
 800d796:	f04f 0b00 	mov.w	fp, #0
 800d79a:	7808      	ldrb	r0, [r1, #0]
 800d79c:	f7ff ff80 	bl	800d6a0 <__hexdig_fun>
 800d7a0:	1e42      	subs	r2, r0, #1
 800d7a2:	b2d2      	uxtb	r2, r2
 800d7a4:	2a18      	cmp	r2, #24
 800d7a6:	d82e      	bhi.n	800d806 <__gethex+0x13a>
 800d7a8:	f1a0 0210 	sub.w	r2, r0, #16
 800d7ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d7b0:	f7ff ff76 	bl	800d6a0 <__hexdig_fun>
 800d7b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800d7b8:	fa5f fc8c 	uxtb.w	ip, ip
 800d7bc:	f1bc 0f18 	cmp.w	ip, #24
 800d7c0:	d91d      	bls.n	800d7fe <__gethex+0x132>
 800d7c2:	f1bb 0f00 	cmp.w	fp, #0
 800d7c6:	d000      	beq.n	800d7ca <__gethex+0xfe>
 800d7c8:	4252      	negs	r2, r2
 800d7ca:	4416      	add	r6, r2
 800d7cc:	f8ca 1000 	str.w	r1, [sl]
 800d7d0:	b1dc      	cbz	r4, 800d80a <__gethex+0x13e>
 800d7d2:	9b01      	ldr	r3, [sp, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf14      	ite	ne
 800d7d8:	f04f 0800 	movne.w	r8, #0
 800d7dc:	f04f 0806 	moveq.w	r8, #6
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	b005      	add	sp, #20
 800d7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e8:	4645      	mov	r5, r8
 800d7ea:	4626      	mov	r6, r4
 800d7ec:	2401      	movs	r4, #1
 800d7ee:	e7c7      	b.n	800d780 <__gethex+0xb4>
 800d7f0:	f04f 0b00 	mov.w	fp, #0
 800d7f4:	1ca9      	adds	r1, r5, #2
 800d7f6:	e7d0      	b.n	800d79a <__gethex+0xce>
 800d7f8:	f04f 0b01 	mov.w	fp, #1
 800d7fc:	e7fa      	b.n	800d7f4 <__gethex+0x128>
 800d7fe:	230a      	movs	r3, #10
 800d800:	fb03 0002 	mla	r0, r3, r2, r0
 800d804:	e7d0      	b.n	800d7a8 <__gethex+0xdc>
 800d806:	4629      	mov	r1, r5
 800d808:	e7e0      	b.n	800d7cc <__gethex+0x100>
 800d80a:	eba5 0308 	sub.w	r3, r5, r8
 800d80e:	3b01      	subs	r3, #1
 800d810:	4621      	mov	r1, r4
 800d812:	2b07      	cmp	r3, #7
 800d814:	dc0a      	bgt.n	800d82c <__gethex+0x160>
 800d816:	4648      	mov	r0, r9
 800d818:	f000 fb0e 	bl	800de38 <_Balloc>
 800d81c:	4604      	mov	r4, r0
 800d81e:	b940      	cbnz	r0, 800d832 <__gethex+0x166>
 800d820:	4b61      	ldr	r3, [pc, #388]	; (800d9a8 <__gethex+0x2dc>)
 800d822:	4602      	mov	r2, r0
 800d824:	21e4      	movs	r1, #228	; 0xe4
 800d826:	4861      	ldr	r0, [pc, #388]	; (800d9ac <__gethex+0x2e0>)
 800d828:	f7ff f802 	bl	800c830 <__assert_func>
 800d82c:	3101      	adds	r1, #1
 800d82e:	105b      	asrs	r3, r3, #1
 800d830:	e7ef      	b.n	800d812 <__gethex+0x146>
 800d832:	f100 0a14 	add.w	sl, r0, #20
 800d836:	2300      	movs	r3, #0
 800d838:	495a      	ldr	r1, [pc, #360]	; (800d9a4 <__gethex+0x2d8>)
 800d83a:	f8cd a004 	str.w	sl, [sp, #4]
 800d83e:	469b      	mov	fp, r3
 800d840:	45a8      	cmp	r8, r5
 800d842:	d342      	bcc.n	800d8ca <__gethex+0x1fe>
 800d844:	9801      	ldr	r0, [sp, #4]
 800d846:	f840 bb04 	str.w	fp, [r0], #4
 800d84a:	eba0 000a 	sub.w	r0, r0, sl
 800d84e:	1080      	asrs	r0, r0, #2
 800d850:	6120      	str	r0, [r4, #16]
 800d852:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d856:	4658      	mov	r0, fp
 800d858:	f000 fbe0 	bl	800e01c <__hi0bits>
 800d85c:	683d      	ldr	r5, [r7, #0]
 800d85e:	eba8 0000 	sub.w	r0, r8, r0
 800d862:	42a8      	cmp	r0, r5
 800d864:	dd59      	ble.n	800d91a <__gethex+0x24e>
 800d866:	eba0 0805 	sub.w	r8, r0, r5
 800d86a:	4641      	mov	r1, r8
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 ff6f 	bl	800e750 <__any_on>
 800d872:	4683      	mov	fp, r0
 800d874:	b1b8      	cbz	r0, 800d8a6 <__gethex+0x1da>
 800d876:	f108 33ff 	add.w	r3, r8, #4294967295
 800d87a:	1159      	asrs	r1, r3, #5
 800d87c:	f003 021f 	and.w	r2, r3, #31
 800d880:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d884:	f04f 0b01 	mov.w	fp, #1
 800d888:	fa0b f202 	lsl.w	r2, fp, r2
 800d88c:	420a      	tst	r2, r1
 800d88e:	d00a      	beq.n	800d8a6 <__gethex+0x1da>
 800d890:	455b      	cmp	r3, fp
 800d892:	dd06      	ble.n	800d8a2 <__gethex+0x1d6>
 800d894:	f1a8 0102 	sub.w	r1, r8, #2
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 ff59 	bl	800e750 <__any_on>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d138      	bne.n	800d914 <__gethex+0x248>
 800d8a2:	f04f 0b02 	mov.w	fp, #2
 800d8a6:	4641      	mov	r1, r8
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f7ff fea7 	bl	800d5fc <rshift>
 800d8ae:	4446      	add	r6, r8
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	42b3      	cmp	r3, r6
 800d8b4:	da41      	bge.n	800d93a <__gethex+0x26e>
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4648      	mov	r0, r9
 800d8ba:	f000 fafd 	bl	800deb8 <_Bfree>
 800d8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d8c8:	e78a      	b.n	800d7e0 <__gethex+0x114>
 800d8ca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d8ce:	2a2e      	cmp	r2, #46	; 0x2e
 800d8d0:	d014      	beq.n	800d8fc <__gethex+0x230>
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d106      	bne.n	800d8e4 <__gethex+0x218>
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	f843 bb04 	str.w	fp, [r3], #4
 800d8dc:	f04f 0b00 	mov.w	fp, #0
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	465b      	mov	r3, fp
 800d8e4:	7828      	ldrb	r0, [r5, #0]
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	f7ff feda 	bl	800d6a0 <__hexdig_fun>
 800d8ec:	9b03      	ldr	r3, [sp, #12]
 800d8ee:	f000 000f 	and.w	r0, r0, #15
 800d8f2:	4098      	lsls	r0, r3
 800d8f4:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	e7a1      	b.n	800d840 <__gethex+0x174>
 800d8fc:	45a8      	cmp	r8, r5
 800d8fe:	d8e8      	bhi.n	800d8d2 <__gethex+0x206>
 800d900:	2201      	movs	r2, #1
 800d902:	4628      	mov	r0, r5
 800d904:	9303      	str	r3, [sp, #12]
 800d906:	f7fe fe7d 	bl	800c604 <strncmp>
 800d90a:	4926      	ldr	r1, [pc, #152]	; (800d9a4 <__gethex+0x2d8>)
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	2800      	cmp	r0, #0
 800d910:	d1df      	bne.n	800d8d2 <__gethex+0x206>
 800d912:	e795      	b.n	800d840 <__gethex+0x174>
 800d914:	f04f 0b03 	mov.w	fp, #3
 800d918:	e7c5      	b.n	800d8a6 <__gethex+0x1da>
 800d91a:	da0b      	bge.n	800d934 <__gethex+0x268>
 800d91c:	eba5 0800 	sub.w	r8, r5, r0
 800d920:	4621      	mov	r1, r4
 800d922:	4642      	mov	r2, r8
 800d924:	4648      	mov	r0, r9
 800d926:	f000 fce1 	bl	800e2ec <__lshift>
 800d92a:	eba6 0608 	sub.w	r6, r6, r8
 800d92e:	4604      	mov	r4, r0
 800d930:	f100 0a14 	add.w	sl, r0, #20
 800d934:	f04f 0b00 	mov.w	fp, #0
 800d938:	e7ba      	b.n	800d8b0 <__gethex+0x1e4>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	42b3      	cmp	r3, r6
 800d93e:	dd73      	ble.n	800da28 <__gethex+0x35c>
 800d940:	1b9e      	subs	r6, r3, r6
 800d942:	42b5      	cmp	r5, r6
 800d944:	dc34      	bgt.n	800d9b0 <__gethex+0x2e4>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d023      	beq.n	800d994 <__gethex+0x2c8>
 800d94c:	2b03      	cmp	r3, #3
 800d94e:	d025      	beq.n	800d99c <__gethex+0x2d0>
 800d950:	2b01      	cmp	r3, #1
 800d952:	d115      	bne.n	800d980 <__gethex+0x2b4>
 800d954:	42b5      	cmp	r5, r6
 800d956:	d113      	bne.n	800d980 <__gethex+0x2b4>
 800d958:	2d01      	cmp	r5, #1
 800d95a:	d10b      	bne.n	800d974 <__gethex+0x2a8>
 800d95c:	9a02      	ldr	r2, [sp, #8]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6013      	str	r3, [r2, #0]
 800d962:	2301      	movs	r3, #1
 800d964:	6123      	str	r3, [r4, #16]
 800d966:	f8ca 3000 	str.w	r3, [sl]
 800d96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d96c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d970:	601c      	str	r4, [r3, #0]
 800d972:	e735      	b.n	800d7e0 <__gethex+0x114>
 800d974:	1e69      	subs	r1, r5, #1
 800d976:	4620      	mov	r0, r4
 800d978:	f000 feea 	bl	800e750 <__any_on>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d1ed      	bne.n	800d95c <__gethex+0x290>
 800d980:	4621      	mov	r1, r4
 800d982:	4648      	mov	r0, r9
 800d984:	f000 fa98 	bl	800deb8 <_Bfree>
 800d988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d98a:	2300      	movs	r3, #0
 800d98c:	6013      	str	r3, [r2, #0]
 800d98e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d992:	e725      	b.n	800d7e0 <__gethex+0x114>
 800d994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1f2      	bne.n	800d980 <__gethex+0x2b4>
 800d99a:	e7df      	b.n	800d95c <__gethex+0x290>
 800d99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1dc      	bne.n	800d95c <__gethex+0x290>
 800d9a2:	e7ed      	b.n	800d980 <__gethex+0x2b4>
 800d9a4:	080129e4 	.word	0x080129e4
 800d9a8:	08012ba9 	.word	0x08012ba9
 800d9ac:	08012bba 	.word	0x08012bba
 800d9b0:	f106 38ff 	add.w	r8, r6, #4294967295
 800d9b4:	f1bb 0f00 	cmp.w	fp, #0
 800d9b8:	d133      	bne.n	800da22 <__gethex+0x356>
 800d9ba:	f1b8 0f00 	cmp.w	r8, #0
 800d9be:	d004      	beq.n	800d9ca <__gethex+0x2fe>
 800d9c0:	4641      	mov	r1, r8
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f000 fec4 	bl	800e750 <__any_on>
 800d9c8:	4683      	mov	fp, r0
 800d9ca:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d9d4:	f008 081f 	and.w	r8, r8, #31
 800d9d8:	fa03 f308 	lsl.w	r3, r3, r8
 800d9dc:	4213      	tst	r3, r2
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	bf18      	it	ne
 800d9e4:	f04b 0b02 	orrne.w	fp, fp, #2
 800d9e8:	1bad      	subs	r5, r5, r6
 800d9ea:	f7ff fe07 	bl	800d5fc <rshift>
 800d9ee:	687e      	ldr	r6, [r7, #4]
 800d9f0:	f04f 0802 	mov.w	r8, #2
 800d9f4:	f1bb 0f00 	cmp.w	fp, #0
 800d9f8:	d04a      	beq.n	800da90 <__gethex+0x3c4>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d016      	beq.n	800da2e <__gethex+0x362>
 800da00:	2b03      	cmp	r3, #3
 800da02:	d018      	beq.n	800da36 <__gethex+0x36a>
 800da04:	2b01      	cmp	r3, #1
 800da06:	d109      	bne.n	800da1c <__gethex+0x350>
 800da08:	f01b 0f02 	tst.w	fp, #2
 800da0c:	d006      	beq.n	800da1c <__gethex+0x350>
 800da0e:	f8da 3000 	ldr.w	r3, [sl]
 800da12:	ea4b 0b03 	orr.w	fp, fp, r3
 800da16:	f01b 0f01 	tst.w	fp, #1
 800da1a:	d10f      	bne.n	800da3c <__gethex+0x370>
 800da1c:	f048 0810 	orr.w	r8, r8, #16
 800da20:	e036      	b.n	800da90 <__gethex+0x3c4>
 800da22:	f04f 0b01 	mov.w	fp, #1
 800da26:	e7d0      	b.n	800d9ca <__gethex+0x2fe>
 800da28:	f04f 0801 	mov.w	r8, #1
 800da2c:	e7e2      	b.n	800d9f4 <__gethex+0x328>
 800da2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da30:	f1c3 0301 	rsb	r3, r3, #1
 800da34:	930f      	str	r3, [sp, #60]	; 0x3c
 800da36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d0ef      	beq.n	800da1c <__gethex+0x350>
 800da3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da40:	f104 0214 	add.w	r2, r4, #20
 800da44:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800da4e:	2300      	movs	r3, #0
 800da50:	4694      	mov	ip, r2
 800da52:	f852 1b04 	ldr.w	r1, [r2], #4
 800da56:	f1b1 3fff 	cmp.w	r1, #4294967295
 800da5a:	d01e      	beq.n	800da9a <__gethex+0x3ce>
 800da5c:	3101      	adds	r1, #1
 800da5e:	f8cc 1000 	str.w	r1, [ip]
 800da62:	f1b8 0f02 	cmp.w	r8, #2
 800da66:	f104 0214 	add.w	r2, r4, #20
 800da6a:	d13d      	bne.n	800dae8 <__gethex+0x41c>
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	3b01      	subs	r3, #1
 800da70:	42ab      	cmp	r3, r5
 800da72:	d10b      	bne.n	800da8c <__gethex+0x3c0>
 800da74:	1169      	asrs	r1, r5, #5
 800da76:	2301      	movs	r3, #1
 800da78:	f005 051f 	and.w	r5, r5, #31
 800da7c:	fa03 f505 	lsl.w	r5, r3, r5
 800da80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da84:	421d      	tst	r5, r3
 800da86:	bf18      	it	ne
 800da88:	f04f 0801 	movne.w	r8, #1
 800da8c:	f048 0820 	orr.w	r8, r8, #32
 800da90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da92:	601c      	str	r4, [r3, #0]
 800da94:	9b02      	ldr	r3, [sp, #8]
 800da96:	601e      	str	r6, [r3, #0]
 800da98:	e6a2      	b.n	800d7e0 <__gethex+0x114>
 800da9a:	4290      	cmp	r0, r2
 800da9c:	f842 3c04 	str.w	r3, [r2, #-4]
 800daa0:	d8d6      	bhi.n	800da50 <__gethex+0x384>
 800daa2:	68a2      	ldr	r2, [r4, #8]
 800daa4:	4593      	cmp	fp, r2
 800daa6:	db17      	blt.n	800dad8 <__gethex+0x40c>
 800daa8:	6861      	ldr	r1, [r4, #4]
 800daaa:	4648      	mov	r0, r9
 800daac:	3101      	adds	r1, #1
 800daae:	f000 f9c3 	bl	800de38 <_Balloc>
 800dab2:	4682      	mov	sl, r0
 800dab4:	b918      	cbnz	r0, 800dabe <__gethex+0x3f2>
 800dab6:	4b1b      	ldr	r3, [pc, #108]	; (800db24 <__gethex+0x458>)
 800dab8:	4602      	mov	r2, r0
 800daba:	2184      	movs	r1, #132	; 0x84
 800dabc:	e6b3      	b.n	800d826 <__gethex+0x15a>
 800dabe:	6922      	ldr	r2, [r4, #16]
 800dac0:	3202      	adds	r2, #2
 800dac2:	f104 010c 	add.w	r1, r4, #12
 800dac6:	0092      	lsls	r2, r2, #2
 800dac8:	300c      	adds	r0, #12
 800daca:	f7fe fe9b 	bl	800c804 <memcpy>
 800dace:	4621      	mov	r1, r4
 800dad0:	4648      	mov	r0, r9
 800dad2:	f000 f9f1 	bl	800deb8 <_Bfree>
 800dad6:	4654      	mov	r4, sl
 800dad8:	6922      	ldr	r2, [r4, #16]
 800dada:	1c51      	adds	r1, r2, #1
 800dadc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dae0:	6121      	str	r1, [r4, #16]
 800dae2:	2101      	movs	r1, #1
 800dae4:	6151      	str	r1, [r2, #20]
 800dae6:	e7bc      	b.n	800da62 <__gethex+0x396>
 800dae8:	6921      	ldr	r1, [r4, #16]
 800daea:	4559      	cmp	r1, fp
 800daec:	dd0b      	ble.n	800db06 <__gethex+0x43a>
 800daee:	2101      	movs	r1, #1
 800daf0:	4620      	mov	r0, r4
 800daf2:	f7ff fd83 	bl	800d5fc <rshift>
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	3601      	adds	r6, #1
 800dafa:	42b3      	cmp	r3, r6
 800dafc:	f6ff aedb 	blt.w	800d8b6 <__gethex+0x1ea>
 800db00:	f04f 0801 	mov.w	r8, #1
 800db04:	e7c2      	b.n	800da8c <__gethex+0x3c0>
 800db06:	f015 051f 	ands.w	r5, r5, #31
 800db0a:	d0f9      	beq.n	800db00 <__gethex+0x434>
 800db0c:	9b01      	ldr	r3, [sp, #4]
 800db0e:	441a      	add	r2, r3
 800db10:	f1c5 0520 	rsb	r5, r5, #32
 800db14:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800db18:	f000 fa80 	bl	800e01c <__hi0bits>
 800db1c:	42a8      	cmp	r0, r5
 800db1e:	dbe6      	blt.n	800daee <__gethex+0x422>
 800db20:	e7ee      	b.n	800db00 <__gethex+0x434>
 800db22:	bf00      	nop
 800db24:	08012ba9 	.word	0x08012ba9

0800db28 <L_shift>:
 800db28:	f1c2 0208 	rsb	r2, r2, #8
 800db2c:	0092      	lsls	r2, r2, #2
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	f1c2 0620 	rsb	r6, r2, #32
 800db34:	6843      	ldr	r3, [r0, #4]
 800db36:	6804      	ldr	r4, [r0, #0]
 800db38:	fa03 f506 	lsl.w	r5, r3, r6
 800db3c:	432c      	orrs	r4, r5
 800db3e:	40d3      	lsrs	r3, r2
 800db40:	6004      	str	r4, [r0, #0]
 800db42:	f840 3f04 	str.w	r3, [r0, #4]!
 800db46:	4288      	cmp	r0, r1
 800db48:	d3f4      	bcc.n	800db34 <L_shift+0xc>
 800db4a:	bd70      	pop	{r4, r5, r6, pc}

0800db4c <__match>:
 800db4c:	b530      	push	{r4, r5, lr}
 800db4e:	6803      	ldr	r3, [r0, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db56:	b914      	cbnz	r4, 800db5e <__match+0x12>
 800db58:	6003      	str	r3, [r0, #0]
 800db5a:	2001      	movs	r0, #1
 800db5c:	bd30      	pop	{r4, r5, pc}
 800db5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db66:	2d19      	cmp	r5, #25
 800db68:	bf98      	it	ls
 800db6a:	3220      	addls	r2, #32
 800db6c:	42a2      	cmp	r2, r4
 800db6e:	d0f0      	beq.n	800db52 <__match+0x6>
 800db70:	2000      	movs	r0, #0
 800db72:	e7f3      	b.n	800db5c <__match+0x10>

0800db74 <__hexnan>:
 800db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	680b      	ldr	r3, [r1, #0]
 800db7a:	6801      	ldr	r1, [r0, #0]
 800db7c:	115e      	asrs	r6, r3, #5
 800db7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db82:	f013 031f 	ands.w	r3, r3, #31
 800db86:	b087      	sub	sp, #28
 800db88:	bf18      	it	ne
 800db8a:	3604      	addne	r6, #4
 800db8c:	2500      	movs	r5, #0
 800db8e:	1f37      	subs	r7, r6, #4
 800db90:	4682      	mov	sl, r0
 800db92:	4690      	mov	r8, r2
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	f846 5c04 	str.w	r5, [r6, #-4]
 800db9a:	46b9      	mov	r9, r7
 800db9c:	463c      	mov	r4, r7
 800db9e:	9502      	str	r5, [sp, #8]
 800dba0:	46ab      	mov	fp, r5
 800dba2:	784a      	ldrb	r2, [r1, #1]
 800dba4:	1c4b      	adds	r3, r1, #1
 800dba6:	9303      	str	r3, [sp, #12]
 800dba8:	b342      	cbz	r2, 800dbfc <__hexnan+0x88>
 800dbaa:	4610      	mov	r0, r2
 800dbac:	9105      	str	r1, [sp, #20]
 800dbae:	9204      	str	r2, [sp, #16]
 800dbb0:	f7ff fd76 	bl	800d6a0 <__hexdig_fun>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d14f      	bne.n	800dc58 <__hexnan+0xe4>
 800dbb8:	9a04      	ldr	r2, [sp, #16]
 800dbba:	9905      	ldr	r1, [sp, #20]
 800dbbc:	2a20      	cmp	r2, #32
 800dbbe:	d818      	bhi.n	800dbf2 <__hexnan+0x7e>
 800dbc0:	9b02      	ldr	r3, [sp, #8]
 800dbc2:	459b      	cmp	fp, r3
 800dbc4:	dd13      	ble.n	800dbee <__hexnan+0x7a>
 800dbc6:	454c      	cmp	r4, r9
 800dbc8:	d206      	bcs.n	800dbd8 <__hexnan+0x64>
 800dbca:	2d07      	cmp	r5, #7
 800dbcc:	dc04      	bgt.n	800dbd8 <__hexnan+0x64>
 800dbce:	462a      	mov	r2, r5
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff ffa8 	bl	800db28 <L_shift>
 800dbd8:	4544      	cmp	r4, r8
 800dbda:	d950      	bls.n	800dc7e <__hexnan+0x10a>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f1a4 0904 	sub.w	r9, r4, #4
 800dbe2:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbe6:	f8cd b008 	str.w	fp, [sp, #8]
 800dbea:	464c      	mov	r4, r9
 800dbec:	461d      	mov	r5, r3
 800dbee:	9903      	ldr	r1, [sp, #12]
 800dbf0:	e7d7      	b.n	800dba2 <__hexnan+0x2e>
 800dbf2:	2a29      	cmp	r2, #41	; 0x29
 800dbf4:	d155      	bne.n	800dca2 <__hexnan+0x12e>
 800dbf6:	3102      	adds	r1, #2
 800dbf8:	f8ca 1000 	str.w	r1, [sl]
 800dbfc:	f1bb 0f00 	cmp.w	fp, #0
 800dc00:	d04f      	beq.n	800dca2 <__hexnan+0x12e>
 800dc02:	454c      	cmp	r4, r9
 800dc04:	d206      	bcs.n	800dc14 <__hexnan+0xa0>
 800dc06:	2d07      	cmp	r5, #7
 800dc08:	dc04      	bgt.n	800dc14 <__hexnan+0xa0>
 800dc0a:	462a      	mov	r2, r5
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f7ff ff8a 	bl	800db28 <L_shift>
 800dc14:	4544      	cmp	r4, r8
 800dc16:	d934      	bls.n	800dc82 <__hexnan+0x10e>
 800dc18:	f1a8 0204 	sub.w	r2, r8, #4
 800dc1c:	4623      	mov	r3, r4
 800dc1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc22:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc26:	429f      	cmp	r7, r3
 800dc28:	d2f9      	bcs.n	800dc1e <__hexnan+0xaa>
 800dc2a:	1b3b      	subs	r3, r7, r4
 800dc2c:	f023 0303 	bic.w	r3, r3, #3
 800dc30:	3304      	adds	r3, #4
 800dc32:	3e03      	subs	r6, #3
 800dc34:	3401      	adds	r4, #1
 800dc36:	42a6      	cmp	r6, r4
 800dc38:	bf38      	it	cc
 800dc3a:	2304      	movcc	r3, #4
 800dc3c:	4443      	add	r3, r8
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f843 2b04 	str.w	r2, [r3], #4
 800dc44:	429f      	cmp	r7, r3
 800dc46:	d2fb      	bcs.n	800dc40 <__hexnan+0xcc>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	b91b      	cbnz	r3, 800dc54 <__hexnan+0xe0>
 800dc4c:	4547      	cmp	r7, r8
 800dc4e:	d126      	bne.n	800dc9e <__hexnan+0x12a>
 800dc50:	2301      	movs	r3, #1
 800dc52:	603b      	str	r3, [r7, #0]
 800dc54:	2005      	movs	r0, #5
 800dc56:	e025      	b.n	800dca4 <__hexnan+0x130>
 800dc58:	3501      	adds	r5, #1
 800dc5a:	2d08      	cmp	r5, #8
 800dc5c:	f10b 0b01 	add.w	fp, fp, #1
 800dc60:	dd06      	ble.n	800dc70 <__hexnan+0xfc>
 800dc62:	4544      	cmp	r4, r8
 800dc64:	d9c3      	bls.n	800dbee <__hexnan+0x7a>
 800dc66:	2300      	movs	r3, #0
 800dc68:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc6c:	2501      	movs	r5, #1
 800dc6e:	3c04      	subs	r4, #4
 800dc70:	6822      	ldr	r2, [r4, #0]
 800dc72:	f000 000f 	and.w	r0, r0, #15
 800dc76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc7a:	6020      	str	r0, [r4, #0]
 800dc7c:	e7b7      	b.n	800dbee <__hexnan+0x7a>
 800dc7e:	2508      	movs	r5, #8
 800dc80:	e7b5      	b.n	800dbee <__hexnan+0x7a>
 800dc82:	9b01      	ldr	r3, [sp, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d0df      	beq.n	800dc48 <__hexnan+0xd4>
 800dc88:	f1c3 0320 	rsb	r3, r3, #32
 800dc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc90:	40da      	lsrs	r2, r3
 800dc92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc96:	4013      	ands	r3, r2
 800dc98:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc9c:	e7d4      	b.n	800dc48 <__hexnan+0xd4>
 800dc9e:	3f04      	subs	r7, #4
 800dca0:	e7d2      	b.n	800dc48 <__hexnan+0xd4>
 800dca2:	2004      	movs	r0, #4
 800dca4:	b007      	add	sp, #28
 800dca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800dcac <malloc>:
 800dcac:	4b02      	ldr	r3, [pc, #8]	; (800dcb8 <malloc+0xc>)
 800dcae:	4601      	mov	r1, r0
 800dcb0:	6818      	ldr	r0, [r3, #0]
 800dcb2:	f000 b823 	b.w	800dcfc <_malloc_r>
 800dcb6:	bf00      	nop
 800dcb8:	2000020c 	.word	0x2000020c

0800dcbc <sbrk_aligned>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	4e0e      	ldr	r6, [pc, #56]	; (800dcf8 <sbrk_aligned+0x3c>)
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	6831      	ldr	r1, [r6, #0]
 800dcc4:	4605      	mov	r5, r0
 800dcc6:	b911      	cbnz	r1, 800dcce <sbrk_aligned+0x12>
 800dcc8:	f001 fb36 	bl	800f338 <_sbrk_r>
 800dccc:	6030      	str	r0, [r6, #0]
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f001 fb31 	bl	800f338 <_sbrk_r>
 800dcd6:	1c43      	adds	r3, r0, #1
 800dcd8:	d00a      	beq.n	800dcf0 <sbrk_aligned+0x34>
 800dcda:	1cc4      	adds	r4, r0, #3
 800dcdc:	f024 0403 	bic.w	r4, r4, #3
 800dce0:	42a0      	cmp	r0, r4
 800dce2:	d007      	beq.n	800dcf4 <sbrk_aligned+0x38>
 800dce4:	1a21      	subs	r1, r4, r0
 800dce6:	4628      	mov	r0, r5
 800dce8:	f001 fb26 	bl	800f338 <_sbrk_r>
 800dcec:	3001      	adds	r0, #1
 800dcee:	d101      	bne.n	800dcf4 <sbrk_aligned+0x38>
 800dcf0:	f04f 34ff 	mov.w	r4, #4294967295
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}
 800dcf8:	20001090 	.word	0x20001090

0800dcfc <_malloc_r>:
 800dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd00:	1ccd      	adds	r5, r1, #3
 800dd02:	f025 0503 	bic.w	r5, r5, #3
 800dd06:	3508      	adds	r5, #8
 800dd08:	2d0c      	cmp	r5, #12
 800dd0a:	bf38      	it	cc
 800dd0c:	250c      	movcc	r5, #12
 800dd0e:	2d00      	cmp	r5, #0
 800dd10:	4607      	mov	r7, r0
 800dd12:	db01      	blt.n	800dd18 <_malloc_r+0x1c>
 800dd14:	42a9      	cmp	r1, r5
 800dd16:	d905      	bls.n	800dd24 <_malloc_r+0x28>
 800dd18:	230c      	movs	r3, #12
 800dd1a:	603b      	str	r3, [r7, #0]
 800dd1c:	2600      	movs	r6, #0
 800dd1e:	4630      	mov	r0, r6
 800dd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ddf8 <_malloc_r+0xfc>
 800dd28:	f000 f87a 	bl	800de20 <__malloc_lock>
 800dd2c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd30:	461c      	mov	r4, r3
 800dd32:	bb5c      	cbnz	r4, 800dd8c <_malloc_r+0x90>
 800dd34:	4629      	mov	r1, r5
 800dd36:	4638      	mov	r0, r7
 800dd38:	f7ff ffc0 	bl	800dcbc <sbrk_aligned>
 800dd3c:	1c43      	adds	r3, r0, #1
 800dd3e:	4604      	mov	r4, r0
 800dd40:	d155      	bne.n	800ddee <_malloc_r+0xf2>
 800dd42:	f8d8 4000 	ldr.w	r4, [r8]
 800dd46:	4626      	mov	r6, r4
 800dd48:	2e00      	cmp	r6, #0
 800dd4a:	d145      	bne.n	800ddd8 <_malloc_r+0xdc>
 800dd4c:	2c00      	cmp	r4, #0
 800dd4e:	d048      	beq.n	800dde2 <_malloc_r+0xe6>
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	4631      	mov	r1, r6
 800dd54:	4638      	mov	r0, r7
 800dd56:	eb04 0903 	add.w	r9, r4, r3
 800dd5a:	f001 faed 	bl	800f338 <_sbrk_r>
 800dd5e:	4581      	cmp	r9, r0
 800dd60:	d13f      	bne.n	800dde2 <_malloc_r+0xe6>
 800dd62:	6821      	ldr	r1, [r4, #0]
 800dd64:	1a6d      	subs	r5, r5, r1
 800dd66:	4629      	mov	r1, r5
 800dd68:	4638      	mov	r0, r7
 800dd6a:	f7ff ffa7 	bl	800dcbc <sbrk_aligned>
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d037      	beq.n	800dde2 <_malloc_r+0xe6>
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	442b      	add	r3, r5
 800dd76:	6023      	str	r3, [r4, #0]
 800dd78:	f8d8 3000 	ldr.w	r3, [r8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d038      	beq.n	800ddf2 <_malloc_r+0xf6>
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	42a2      	cmp	r2, r4
 800dd84:	d12b      	bne.n	800ddde <_malloc_r+0xe2>
 800dd86:	2200      	movs	r2, #0
 800dd88:	605a      	str	r2, [r3, #4]
 800dd8a:	e00f      	b.n	800ddac <_malloc_r+0xb0>
 800dd8c:	6822      	ldr	r2, [r4, #0]
 800dd8e:	1b52      	subs	r2, r2, r5
 800dd90:	d41f      	bmi.n	800ddd2 <_malloc_r+0xd6>
 800dd92:	2a0b      	cmp	r2, #11
 800dd94:	d917      	bls.n	800ddc6 <_malloc_r+0xca>
 800dd96:	1961      	adds	r1, r4, r5
 800dd98:	42a3      	cmp	r3, r4
 800dd9a:	6025      	str	r5, [r4, #0]
 800dd9c:	bf18      	it	ne
 800dd9e:	6059      	strne	r1, [r3, #4]
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	bf08      	it	eq
 800dda4:	f8c8 1000 	streq.w	r1, [r8]
 800dda8:	5162      	str	r2, [r4, r5]
 800ddaa:	604b      	str	r3, [r1, #4]
 800ddac:	4638      	mov	r0, r7
 800ddae:	f104 060b 	add.w	r6, r4, #11
 800ddb2:	f000 f83b 	bl	800de2c <__malloc_unlock>
 800ddb6:	f026 0607 	bic.w	r6, r6, #7
 800ddba:	1d23      	adds	r3, r4, #4
 800ddbc:	1af2      	subs	r2, r6, r3
 800ddbe:	d0ae      	beq.n	800dd1e <_malloc_r+0x22>
 800ddc0:	1b9b      	subs	r3, r3, r6
 800ddc2:	50a3      	str	r3, [r4, r2]
 800ddc4:	e7ab      	b.n	800dd1e <_malloc_r+0x22>
 800ddc6:	42a3      	cmp	r3, r4
 800ddc8:	6862      	ldr	r2, [r4, #4]
 800ddca:	d1dd      	bne.n	800dd88 <_malloc_r+0x8c>
 800ddcc:	f8c8 2000 	str.w	r2, [r8]
 800ddd0:	e7ec      	b.n	800ddac <_malloc_r+0xb0>
 800ddd2:	4623      	mov	r3, r4
 800ddd4:	6864      	ldr	r4, [r4, #4]
 800ddd6:	e7ac      	b.n	800dd32 <_malloc_r+0x36>
 800ddd8:	4634      	mov	r4, r6
 800ddda:	6876      	ldr	r6, [r6, #4]
 800dddc:	e7b4      	b.n	800dd48 <_malloc_r+0x4c>
 800ddde:	4613      	mov	r3, r2
 800dde0:	e7cc      	b.n	800dd7c <_malloc_r+0x80>
 800dde2:	230c      	movs	r3, #12
 800dde4:	603b      	str	r3, [r7, #0]
 800dde6:	4638      	mov	r0, r7
 800dde8:	f000 f820 	bl	800de2c <__malloc_unlock>
 800ddec:	e797      	b.n	800dd1e <_malloc_r+0x22>
 800ddee:	6025      	str	r5, [r4, #0]
 800ddf0:	e7dc      	b.n	800ddac <_malloc_r+0xb0>
 800ddf2:	605b      	str	r3, [r3, #4]
 800ddf4:	deff      	udf	#255	; 0xff
 800ddf6:	bf00      	nop
 800ddf8:	2000108c 	.word	0x2000108c

0800ddfc <__ascii_mbtowc>:
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	b901      	cbnz	r1, 800de02 <__ascii_mbtowc+0x6>
 800de00:	a901      	add	r1, sp, #4
 800de02:	b142      	cbz	r2, 800de16 <__ascii_mbtowc+0x1a>
 800de04:	b14b      	cbz	r3, 800de1a <__ascii_mbtowc+0x1e>
 800de06:	7813      	ldrb	r3, [r2, #0]
 800de08:	600b      	str	r3, [r1, #0]
 800de0a:	7812      	ldrb	r2, [r2, #0]
 800de0c:	1e10      	subs	r0, r2, #0
 800de0e:	bf18      	it	ne
 800de10:	2001      	movne	r0, #1
 800de12:	b002      	add	sp, #8
 800de14:	4770      	bx	lr
 800de16:	4610      	mov	r0, r2
 800de18:	e7fb      	b.n	800de12 <__ascii_mbtowc+0x16>
 800de1a:	f06f 0001 	mvn.w	r0, #1
 800de1e:	e7f8      	b.n	800de12 <__ascii_mbtowc+0x16>

0800de20 <__malloc_lock>:
 800de20:	4801      	ldr	r0, [pc, #4]	; (800de28 <__malloc_lock+0x8>)
 800de22:	f7fe bce5 	b.w	800c7f0 <__retarget_lock_acquire_recursive>
 800de26:	bf00      	nop
 800de28:	20001088 	.word	0x20001088

0800de2c <__malloc_unlock>:
 800de2c:	4801      	ldr	r0, [pc, #4]	; (800de34 <__malloc_unlock+0x8>)
 800de2e:	f7fe bce0 	b.w	800c7f2 <__retarget_lock_release_recursive>
 800de32:	bf00      	nop
 800de34:	20001088 	.word	0x20001088

0800de38 <_Balloc>:
 800de38:	b570      	push	{r4, r5, r6, lr}
 800de3a:	69c6      	ldr	r6, [r0, #28]
 800de3c:	4604      	mov	r4, r0
 800de3e:	460d      	mov	r5, r1
 800de40:	b976      	cbnz	r6, 800de60 <_Balloc+0x28>
 800de42:	2010      	movs	r0, #16
 800de44:	f7ff ff32 	bl	800dcac <malloc>
 800de48:	4602      	mov	r2, r0
 800de4a:	61e0      	str	r0, [r4, #28]
 800de4c:	b920      	cbnz	r0, 800de58 <_Balloc+0x20>
 800de4e:	4b18      	ldr	r3, [pc, #96]	; (800deb0 <_Balloc+0x78>)
 800de50:	4818      	ldr	r0, [pc, #96]	; (800deb4 <_Balloc+0x7c>)
 800de52:	216b      	movs	r1, #107	; 0x6b
 800de54:	f7fe fcec 	bl	800c830 <__assert_func>
 800de58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de5c:	6006      	str	r6, [r0, #0]
 800de5e:	60c6      	str	r6, [r0, #12]
 800de60:	69e6      	ldr	r6, [r4, #28]
 800de62:	68f3      	ldr	r3, [r6, #12]
 800de64:	b183      	cbz	r3, 800de88 <_Balloc+0x50>
 800de66:	69e3      	ldr	r3, [r4, #28]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de6e:	b9b8      	cbnz	r0, 800dea0 <_Balloc+0x68>
 800de70:	2101      	movs	r1, #1
 800de72:	fa01 f605 	lsl.w	r6, r1, r5
 800de76:	1d72      	adds	r2, r6, #5
 800de78:	0092      	lsls	r2, r2, #2
 800de7a:	4620      	mov	r0, r4
 800de7c:	f001 fa73 	bl	800f366 <_calloc_r>
 800de80:	b160      	cbz	r0, 800de9c <_Balloc+0x64>
 800de82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de86:	e00e      	b.n	800dea6 <_Balloc+0x6e>
 800de88:	2221      	movs	r2, #33	; 0x21
 800de8a:	2104      	movs	r1, #4
 800de8c:	4620      	mov	r0, r4
 800de8e:	f001 fa6a 	bl	800f366 <_calloc_r>
 800de92:	69e3      	ldr	r3, [r4, #28]
 800de94:	60f0      	str	r0, [r6, #12]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1e4      	bne.n	800de66 <_Balloc+0x2e>
 800de9c:	2000      	movs	r0, #0
 800de9e:	bd70      	pop	{r4, r5, r6, pc}
 800dea0:	6802      	ldr	r2, [r0, #0]
 800dea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dea6:	2300      	movs	r3, #0
 800dea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800deac:	e7f7      	b.n	800de9e <_Balloc+0x66>
 800deae:	bf00      	nop
 800deb0:	08012a8f 	.word	0x08012a8f
 800deb4:	08012c1a 	.word	0x08012c1a

0800deb8 <_Bfree>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	69c6      	ldr	r6, [r0, #28]
 800debc:	4605      	mov	r5, r0
 800debe:	460c      	mov	r4, r1
 800dec0:	b976      	cbnz	r6, 800dee0 <_Bfree+0x28>
 800dec2:	2010      	movs	r0, #16
 800dec4:	f7ff fef2 	bl	800dcac <malloc>
 800dec8:	4602      	mov	r2, r0
 800deca:	61e8      	str	r0, [r5, #28]
 800decc:	b920      	cbnz	r0, 800ded8 <_Bfree+0x20>
 800dece:	4b09      	ldr	r3, [pc, #36]	; (800def4 <_Bfree+0x3c>)
 800ded0:	4809      	ldr	r0, [pc, #36]	; (800def8 <_Bfree+0x40>)
 800ded2:	218f      	movs	r1, #143	; 0x8f
 800ded4:	f7fe fcac 	bl	800c830 <__assert_func>
 800ded8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dedc:	6006      	str	r6, [r0, #0]
 800dede:	60c6      	str	r6, [r0, #12]
 800dee0:	b13c      	cbz	r4, 800def2 <_Bfree+0x3a>
 800dee2:	69eb      	ldr	r3, [r5, #28]
 800dee4:	6862      	ldr	r2, [r4, #4]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800deec:	6021      	str	r1, [r4, #0]
 800deee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	08012a8f 	.word	0x08012a8f
 800def8:	08012c1a 	.word	0x08012c1a

0800defc <__multadd>:
 800defc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df00:	690d      	ldr	r5, [r1, #16]
 800df02:	4607      	mov	r7, r0
 800df04:	460c      	mov	r4, r1
 800df06:	461e      	mov	r6, r3
 800df08:	f101 0c14 	add.w	ip, r1, #20
 800df0c:	2000      	movs	r0, #0
 800df0e:	f8dc 3000 	ldr.w	r3, [ip]
 800df12:	b299      	uxth	r1, r3
 800df14:	fb02 6101 	mla	r1, r2, r1, r6
 800df18:	0c1e      	lsrs	r6, r3, #16
 800df1a:	0c0b      	lsrs	r3, r1, #16
 800df1c:	fb02 3306 	mla	r3, r2, r6, r3
 800df20:	b289      	uxth	r1, r1
 800df22:	3001      	adds	r0, #1
 800df24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df28:	4285      	cmp	r5, r0
 800df2a:	f84c 1b04 	str.w	r1, [ip], #4
 800df2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df32:	dcec      	bgt.n	800df0e <__multadd+0x12>
 800df34:	b30e      	cbz	r6, 800df7a <__multadd+0x7e>
 800df36:	68a3      	ldr	r3, [r4, #8]
 800df38:	42ab      	cmp	r3, r5
 800df3a:	dc19      	bgt.n	800df70 <__multadd+0x74>
 800df3c:	6861      	ldr	r1, [r4, #4]
 800df3e:	4638      	mov	r0, r7
 800df40:	3101      	adds	r1, #1
 800df42:	f7ff ff79 	bl	800de38 <_Balloc>
 800df46:	4680      	mov	r8, r0
 800df48:	b928      	cbnz	r0, 800df56 <__multadd+0x5a>
 800df4a:	4602      	mov	r2, r0
 800df4c:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <__multadd+0x84>)
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <__multadd+0x88>)
 800df50:	21ba      	movs	r1, #186	; 0xba
 800df52:	f7fe fc6d 	bl	800c830 <__assert_func>
 800df56:	6922      	ldr	r2, [r4, #16]
 800df58:	3202      	adds	r2, #2
 800df5a:	f104 010c 	add.w	r1, r4, #12
 800df5e:	0092      	lsls	r2, r2, #2
 800df60:	300c      	adds	r0, #12
 800df62:	f7fe fc4f 	bl	800c804 <memcpy>
 800df66:	4621      	mov	r1, r4
 800df68:	4638      	mov	r0, r7
 800df6a:	f7ff ffa5 	bl	800deb8 <_Bfree>
 800df6e:	4644      	mov	r4, r8
 800df70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df74:	3501      	adds	r5, #1
 800df76:	615e      	str	r6, [r3, #20]
 800df78:	6125      	str	r5, [r4, #16]
 800df7a:	4620      	mov	r0, r4
 800df7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df80:	08012ba9 	.word	0x08012ba9
 800df84:	08012c1a 	.word	0x08012c1a

0800df88 <__s2b>:
 800df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df8c:	460c      	mov	r4, r1
 800df8e:	4615      	mov	r5, r2
 800df90:	461f      	mov	r7, r3
 800df92:	2209      	movs	r2, #9
 800df94:	3308      	adds	r3, #8
 800df96:	4606      	mov	r6, r0
 800df98:	fb93 f3f2 	sdiv	r3, r3, r2
 800df9c:	2100      	movs	r1, #0
 800df9e:	2201      	movs	r2, #1
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	db09      	blt.n	800dfb8 <__s2b+0x30>
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f7ff ff47 	bl	800de38 <_Balloc>
 800dfaa:	b940      	cbnz	r0, 800dfbe <__s2b+0x36>
 800dfac:	4602      	mov	r2, r0
 800dfae:	4b19      	ldr	r3, [pc, #100]	; (800e014 <__s2b+0x8c>)
 800dfb0:	4819      	ldr	r0, [pc, #100]	; (800e018 <__s2b+0x90>)
 800dfb2:	21d3      	movs	r1, #211	; 0xd3
 800dfb4:	f7fe fc3c 	bl	800c830 <__assert_func>
 800dfb8:	0052      	lsls	r2, r2, #1
 800dfba:	3101      	adds	r1, #1
 800dfbc:	e7f0      	b.n	800dfa0 <__s2b+0x18>
 800dfbe:	9b08      	ldr	r3, [sp, #32]
 800dfc0:	6143      	str	r3, [r0, #20]
 800dfc2:	2d09      	cmp	r5, #9
 800dfc4:	f04f 0301 	mov.w	r3, #1
 800dfc8:	6103      	str	r3, [r0, #16]
 800dfca:	dd16      	ble.n	800dffa <__s2b+0x72>
 800dfcc:	f104 0909 	add.w	r9, r4, #9
 800dfd0:	46c8      	mov	r8, r9
 800dfd2:	442c      	add	r4, r5
 800dfd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dfd8:	4601      	mov	r1, r0
 800dfda:	3b30      	subs	r3, #48	; 0x30
 800dfdc:	220a      	movs	r2, #10
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f7ff ff8c 	bl	800defc <__multadd>
 800dfe4:	45a0      	cmp	r8, r4
 800dfe6:	d1f5      	bne.n	800dfd4 <__s2b+0x4c>
 800dfe8:	f1a5 0408 	sub.w	r4, r5, #8
 800dfec:	444c      	add	r4, r9
 800dfee:	1b2d      	subs	r5, r5, r4
 800dff0:	1963      	adds	r3, r4, r5
 800dff2:	42bb      	cmp	r3, r7
 800dff4:	db04      	blt.n	800e000 <__s2b+0x78>
 800dff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dffa:	340a      	adds	r4, #10
 800dffc:	2509      	movs	r5, #9
 800dffe:	e7f6      	b.n	800dfee <__s2b+0x66>
 800e000:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e004:	4601      	mov	r1, r0
 800e006:	3b30      	subs	r3, #48	; 0x30
 800e008:	220a      	movs	r2, #10
 800e00a:	4630      	mov	r0, r6
 800e00c:	f7ff ff76 	bl	800defc <__multadd>
 800e010:	e7ee      	b.n	800dff0 <__s2b+0x68>
 800e012:	bf00      	nop
 800e014:	08012ba9 	.word	0x08012ba9
 800e018:	08012c1a 	.word	0x08012c1a

0800e01c <__hi0bits>:
 800e01c:	0c03      	lsrs	r3, r0, #16
 800e01e:	041b      	lsls	r3, r3, #16
 800e020:	b9d3      	cbnz	r3, 800e058 <__hi0bits+0x3c>
 800e022:	0400      	lsls	r0, r0, #16
 800e024:	2310      	movs	r3, #16
 800e026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e02a:	bf04      	itt	eq
 800e02c:	0200      	lsleq	r0, r0, #8
 800e02e:	3308      	addeq	r3, #8
 800e030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e034:	bf04      	itt	eq
 800e036:	0100      	lsleq	r0, r0, #4
 800e038:	3304      	addeq	r3, #4
 800e03a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e03e:	bf04      	itt	eq
 800e040:	0080      	lsleq	r0, r0, #2
 800e042:	3302      	addeq	r3, #2
 800e044:	2800      	cmp	r0, #0
 800e046:	db05      	blt.n	800e054 <__hi0bits+0x38>
 800e048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e04c:	f103 0301 	add.w	r3, r3, #1
 800e050:	bf08      	it	eq
 800e052:	2320      	moveq	r3, #32
 800e054:	4618      	mov	r0, r3
 800e056:	4770      	bx	lr
 800e058:	2300      	movs	r3, #0
 800e05a:	e7e4      	b.n	800e026 <__hi0bits+0xa>

0800e05c <__lo0bits>:
 800e05c:	6803      	ldr	r3, [r0, #0]
 800e05e:	f013 0207 	ands.w	r2, r3, #7
 800e062:	d00c      	beq.n	800e07e <__lo0bits+0x22>
 800e064:	07d9      	lsls	r1, r3, #31
 800e066:	d422      	bmi.n	800e0ae <__lo0bits+0x52>
 800e068:	079a      	lsls	r2, r3, #30
 800e06a:	bf49      	itett	mi
 800e06c:	085b      	lsrmi	r3, r3, #1
 800e06e:	089b      	lsrpl	r3, r3, #2
 800e070:	6003      	strmi	r3, [r0, #0]
 800e072:	2201      	movmi	r2, #1
 800e074:	bf5c      	itt	pl
 800e076:	6003      	strpl	r3, [r0, #0]
 800e078:	2202      	movpl	r2, #2
 800e07a:	4610      	mov	r0, r2
 800e07c:	4770      	bx	lr
 800e07e:	b299      	uxth	r1, r3
 800e080:	b909      	cbnz	r1, 800e086 <__lo0bits+0x2a>
 800e082:	0c1b      	lsrs	r3, r3, #16
 800e084:	2210      	movs	r2, #16
 800e086:	b2d9      	uxtb	r1, r3
 800e088:	b909      	cbnz	r1, 800e08e <__lo0bits+0x32>
 800e08a:	3208      	adds	r2, #8
 800e08c:	0a1b      	lsrs	r3, r3, #8
 800e08e:	0719      	lsls	r1, r3, #28
 800e090:	bf04      	itt	eq
 800e092:	091b      	lsreq	r3, r3, #4
 800e094:	3204      	addeq	r2, #4
 800e096:	0799      	lsls	r1, r3, #30
 800e098:	bf04      	itt	eq
 800e09a:	089b      	lsreq	r3, r3, #2
 800e09c:	3202      	addeq	r2, #2
 800e09e:	07d9      	lsls	r1, r3, #31
 800e0a0:	d403      	bmi.n	800e0aa <__lo0bits+0x4e>
 800e0a2:	085b      	lsrs	r3, r3, #1
 800e0a4:	f102 0201 	add.w	r2, r2, #1
 800e0a8:	d003      	beq.n	800e0b2 <__lo0bits+0x56>
 800e0aa:	6003      	str	r3, [r0, #0]
 800e0ac:	e7e5      	b.n	800e07a <__lo0bits+0x1e>
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	e7e3      	b.n	800e07a <__lo0bits+0x1e>
 800e0b2:	2220      	movs	r2, #32
 800e0b4:	e7e1      	b.n	800e07a <__lo0bits+0x1e>
	...

0800e0b8 <__i2b>:
 800e0b8:	b510      	push	{r4, lr}
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	2101      	movs	r1, #1
 800e0be:	f7ff febb 	bl	800de38 <_Balloc>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	b928      	cbnz	r0, 800e0d2 <__i2b+0x1a>
 800e0c6:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <__i2b+0x24>)
 800e0c8:	4805      	ldr	r0, [pc, #20]	; (800e0e0 <__i2b+0x28>)
 800e0ca:	f240 1145 	movw	r1, #325	; 0x145
 800e0ce:	f7fe fbaf 	bl	800c830 <__assert_func>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	6144      	str	r4, [r0, #20]
 800e0d6:	6103      	str	r3, [r0, #16]
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	bf00      	nop
 800e0dc:	08012ba9 	.word	0x08012ba9
 800e0e0:	08012c1a 	.word	0x08012c1a

0800e0e4 <__multiply>:
 800e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e8:	4691      	mov	r9, r2
 800e0ea:	690a      	ldr	r2, [r1, #16]
 800e0ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	bfb8      	it	lt
 800e0f4:	460b      	movlt	r3, r1
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	bfbc      	itt	lt
 800e0fa:	464c      	movlt	r4, r9
 800e0fc:	4699      	movlt	r9, r3
 800e0fe:	6927      	ldr	r7, [r4, #16]
 800e100:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e104:	68a3      	ldr	r3, [r4, #8]
 800e106:	6861      	ldr	r1, [r4, #4]
 800e108:	eb07 060a 	add.w	r6, r7, sl
 800e10c:	42b3      	cmp	r3, r6
 800e10e:	b085      	sub	sp, #20
 800e110:	bfb8      	it	lt
 800e112:	3101      	addlt	r1, #1
 800e114:	f7ff fe90 	bl	800de38 <_Balloc>
 800e118:	b930      	cbnz	r0, 800e128 <__multiply+0x44>
 800e11a:	4602      	mov	r2, r0
 800e11c:	4b44      	ldr	r3, [pc, #272]	; (800e230 <__multiply+0x14c>)
 800e11e:	4845      	ldr	r0, [pc, #276]	; (800e234 <__multiply+0x150>)
 800e120:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e124:	f7fe fb84 	bl	800c830 <__assert_func>
 800e128:	f100 0514 	add.w	r5, r0, #20
 800e12c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e130:	462b      	mov	r3, r5
 800e132:	2200      	movs	r2, #0
 800e134:	4543      	cmp	r3, r8
 800e136:	d321      	bcc.n	800e17c <__multiply+0x98>
 800e138:	f104 0314 	add.w	r3, r4, #20
 800e13c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e140:	f109 0314 	add.w	r3, r9, #20
 800e144:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e148:	9202      	str	r2, [sp, #8]
 800e14a:	1b3a      	subs	r2, r7, r4
 800e14c:	3a15      	subs	r2, #21
 800e14e:	f022 0203 	bic.w	r2, r2, #3
 800e152:	3204      	adds	r2, #4
 800e154:	f104 0115 	add.w	r1, r4, #21
 800e158:	428f      	cmp	r7, r1
 800e15a:	bf38      	it	cc
 800e15c:	2204      	movcc	r2, #4
 800e15e:	9201      	str	r2, [sp, #4]
 800e160:	9a02      	ldr	r2, [sp, #8]
 800e162:	9303      	str	r3, [sp, #12]
 800e164:	429a      	cmp	r2, r3
 800e166:	d80c      	bhi.n	800e182 <__multiply+0x9e>
 800e168:	2e00      	cmp	r6, #0
 800e16a:	dd03      	ble.n	800e174 <__multiply+0x90>
 800e16c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e170:	2b00      	cmp	r3, #0
 800e172:	d05b      	beq.n	800e22c <__multiply+0x148>
 800e174:	6106      	str	r6, [r0, #16]
 800e176:	b005      	add	sp, #20
 800e178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17c:	f843 2b04 	str.w	r2, [r3], #4
 800e180:	e7d8      	b.n	800e134 <__multiply+0x50>
 800e182:	f8b3 a000 	ldrh.w	sl, [r3]
 800e186:	f1ba 0f00 	cmp.w	sl, #0
 800e18a:	d024      	beq.n	800e1d6 <__multiply+0xf2>
 800e18c:	f104 0e14 	add.w	lr, r4, #20
 800e190:	46a9      	mov	r9, r5
 800e192:	f04f 0c00 	mov.w	ip, #0
 800e196:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e19a:	f8d9 1000 	ldr.w	r1, [r9]
 800e19e:	fa1f fb82 	uxth.w	fp, r2
 800e1a2:	b289      	uxth	r1, r1
 800e1a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e1a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e1ac:	f8d9 2000 	ldr.w	r2, [r9]
 800e1b0:	4461      	add	r1, ip
 800e1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e1ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e1be:	b289      	uxth	r1, r1
 800e1c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e1c4:	4577      	cmp	r7, lr
 800e1c6:	f849 1b04 	str.w	r1, [r9], #4
 800e1ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1ce:	d8e2      	bhi.n	800e196 <__multiply+0xb2>
 800e1d0:	9a01      	ldr	r2, [sp, #4]
 800e1d2:	f845 c002 	str.w	ip, [r5, r2]
 800e1d6:	9a03      	ldr	r2, [sp, #12]
 800e1d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1dc:	3304      	adds	r3, #4
 800e1de:	f1b9 0f00 	cmp.w	r9, #0
 800e1e2:	d021      	beq.n	800e228 <__multiply+0x144>
 800e1e4:	6829      	ldr	r1, [r5, #0]
 800e1e6:	f104 0c14 	add.w	ip, r4, #20
 800e1ea:	46ae      	mov	lr, r5
 800e1ec:	f04f 0a00 	mov.w	sl, #0
 800e1f0:	f8bc b000 	ldrh.w	fp, [ip]
 800e1f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1f8:	fb09 220b 	mla	r2, r9, fp, r2
 800e1fc:	4452      	add	r2, sl
 800e1fe:	b289      	uxth	r1, r1
 800e200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e204:	f84e 1b04 	str.w	r1, [lr], #4
 800e208:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e20c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e210:	f8be 1000 	ldrh.w	r1, [lr]
 800e214:	fb09 110a 	mla	r1, r9, sl, r1
 800e218:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e21c:	4567      	cmp	r7, ip
 800e21e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e222:	d8e5      	bhi.n	800e1f0 <__multiply+0x10c>
 800e224:	9a01      	ldr	r2, [sp, #4]
 800e226:	50a9      	str	r1, [r5, r2]
 800e228:	3504      	adds	r5, #4
 800e22a:	e799      	b.n	800e160 <__multiply+0x7c>
 800e22c:	3e01      	subs	r6, #1
 800e22e:	e79b      	b.n	800e168 <__multiply+0x84>
 800e230:	08012ba9 	.word	0x08012ba9
 800e234:	08012c1a 	.word	0x08012c1a

0800e238 <__pow5mult>:
 800e238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e23c:	4615      	mov	r5, r2
 800e23e:	f012 0203 	ands.w	r2, r2, #3
 800e242:	4606      	mov	r6, r0
 800e244:	460f      	mov	r7, r1
 800e246:	d007      	beq.n	800e258 <__pow5mult+0x20>
 800e248:	4c25      	ldr	r4, [pc, #148]	; (800e2e0 <__pow5mult+0xa8>)
 800e24a:	3a01      	subs	r2, #1
 800e24c:	2300      	movs	r3, #0
 800e24e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e252:	f7ff fe53 	bl	800defc <__multadd>
 800e256:	4607      	mov	r7, r0
 800e258:	10ad      	asrs	r5, r5, #2
 800e25a:	d03d      	beq.n	800e2d8 <__pow5mult+0xa0>
 800e25c:	69f4      	ldr	r4, [r6, #28]
 800e25e:	b97c      	cbnz	r4, 800e280 <__pow5mult+0x48>
 800e260:	2010      	movs	r0, #16
 800e262:	f7ff fd23 	bl	800dcac <malloc>
 800e266:	4602      	mov	r2, r0
 800e268:	61f0      	str	r0, [r6, #28]
 800e26a:	b928      	cbnz	r0, 800e278 <__pow5mult+0x40>
 800e26c:	4b1d      	ldr	r3, [pc, #116]	; (800e2e4 <__pow5mult+0xac>)
 800e26e:	481e      	ldr	r0, [pc, #120]	; (800e2e8 <__pow5mult+0xb0>)
 800e270:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e274:	f7fe fadc 	bl	800c830 <__assert_func>
 800e278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e27c:	6004      	str	r4, [r0, #0]
 800e27e:	60c4      	str	r4, [r0, #12]
 800e280:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e288:	b94c      	cbnz	r4, 800e29e <__pow5mult+0x66>
 800e28a:	f240 2171 	movw	r1, #625	; 0x271
 800e28e:	4630      	mov	r0, r6
 800e290:	f7ff ff12 	bl	800e0b8 <__i2b>
 800e294:	2300      	movs	r3, #0
 800e296:	f8c8 0008 	str.w	r0, [r8, #8]
 800e29a:	4604      	mov	r4, r0
 800e29c:	6003      	str	r3, [r0, #0]
 800e29e:	f04f 0900 	mov.w	r9, #0
 800e2a2:	07eb      	lsls	r3, r5, #31
 800e2a4:	d50a      	bpl.n	800e2bc <__pow5mult+0x84>
 800e2a6:	4639      	mov	r1, r7
 800e2a8:	4622      	mov	r2, r4
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7ff ff1a 	bl	800e0e4 <__multiply>
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	4680      	mov	r8, r0
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f7ff fdff 	bl	800deb8 <_Bfree>
 800e2ba:	4647      	mov	r7, r8
 800e2bc:	106d      	asrs	r5, r5, #1
 800e2be:	d00b      	beq.n	800e2d8 <__pow5mult+0xa0>
 800e2c0:	6820      	ldr	r0, [r4, #0]
 800e2c2:	b938      	cbnz	r0, 800e2d4 <__pow5mult+0x9c>
 800e2c4:	4622      	mov	r2, r4
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7ff ff0b 	bl	800e0e4 <__multiply>
 800e2ce:	6020      	str	r0, [r4, #0]
 800e2d0:	f8c0 9000 	str.w	r9, [r0]
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	e7e4      	b.n	800e2a2 <__pow5mult+0x6a>
 800e2d8:	4638      	mov	r0, r7
 800e2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2de:	bf00      	nop
 800e2e0:	08012d68 	.word	0x08012d68
 800e2e4:	08012a8f 	.word	0x08012a8f
 800e2e8:	08012c1a 	.word	0x08012c1a

0800e2ec <__lshift>:
 800e2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	6849      	ldr	r1, [r1, #4]
 800e2f4:	6923      	ldr	r3, [r4, #16]
 800e2f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2fa:	68a3      	ldr	r3, [r4, #8]
 800e2fc:	4607      	mov	r7, r0
 800e2fe:	4691      	mov	r9, r2
 800e300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e304:	f108 0601 	add.w	r6, r8, #1
 800e308:	42b3      	cmp	r3, r6
 800e30a:	db0b      	blt.n	800e324 <__lshift+0x38>
 800e30c:	4638      	mov	r0, r7
 800e30e:	f7ff fd93 	bl	800de38 <_Balloc>
 800e312:	4605      	mov	r5, r0
 800e314:	b948      	cbnz	r0, 800e32a <__lshift+0x3e>
 800e316:	4602      	mov	r2, r0
 800e318:	4b28      	ldr	r3, [pc, #160]	; (800e3bc <__lshift+0xd0>)
 800e31a:	4829      	ldr	r0, [pc, #164]	; (800e3c0 <__lshift+0xd4>)
 800e31c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e320:	f7fe fa86 	bl	800c830 <__assert_func>
 800e324:	3101      	adds	r1, #1
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	e7ee      	b.n	800e308 <__lshift+0x1c>
 800e32a:	2300      	movs	r3, #0
 800e32c:	f100 0114 	add.w	r1, r0, #20
 800e330:	f100 0210 	add.w	r2, r0, #16
 800e334:	4618      	mov	r0, r3
 800e336:	4553      	cmp	r3, sl
 800e338:	db33      	blt.n	800e3a2 <__lshift+0xb6>
 800e33a:	6920      	ldr	r0, [r4, #16]
 800e33c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e340:	f104 0314 	add.w	r3, r4, #20
 800e344:	f019 091f 	ands.w	r9, r9, #31
 800e348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e34c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e350:	d02b      	beq.n	800e3aa <__lshift+0xbe>
 800e352:	f1c9 0e20 	rsb	lr, r9, #32
 800e356:	468a      	mov	sl, r1
 800e358:	2200      	movs	r2, #0
 800e35a:	6818      	ldr	r0, [r3, #0]
 800e35c:	fa00 f009 	lsl.w	r0, r0, r9
 800e360:	4310      	orrs	r0, r2
 800e362:	f84a 0b04 	str.w	r0, [sl], #4
 800e366:	f853 2b04 	ldr.w	r2, [r3], #4
 800e36a:	459c      	cmp	ip, r3
 800e36c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e370:	d8f3      	bhi.n	800e35a <__lshift+0x6e>
 800e372:	ebac 0304 	sub.w	r3, ip, r4
 800e376:	3b15      	subs	r3, #21
 800e378:	f023 0303 	bic.w	r3, r3, #3
 800e37c:	3304      	adds	r3, #4
 800e37e:	f104 0015 	add.w	r0, r4, #21
 800e382:	4584      	cmp	ip, r0
 800e384:	bf38      	it	cc
 800e386:	2304      	movcc	r3, #4
 800e388:	50ca      	str	r2, [r1, r3]
 800e38a:	b10a      	cbz	r2, 800e390 <__lshift+0xa4>
 800e38c:	f108 0602 	add.w	r6, r8, #2
 800e390:	3e01      	subs	r6, #1
 800e392:	4638      	mov	r0, r7
 800e394:	612e      	str	r6, [r5, #16]
 800e396:	4621      	mov	r1, r4
 800e398:	f7ff fd8e 	bl	800deb8 <_Bfree>
 800e39c:	4628      	mov	r0, r5
 800e39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	e7c5      	b.n	800e336 <__lshift+0x4a>
 800e3aa:	3904      	subs	r1, #4
 800e3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3b4:	459c      	cmp	ip, r3
 800e3b6:	d8f9      	bhi.n	800e3ac <__lshift+0xc0>
 800e3b8:	e7ea      	b.n	800e390 <__lshift+0xa4>
 800e3ba:	bf00      	nop
 800e3bc:	08012ba9 	.word	0x08012ba9
 800e3c0:	08012c1a 	.word	0x08012c1a

0800e3c4 <__mcmp>:
 800e3c4:	b530      	push	{r4, r5, lr}
 800e3c6:	6902      	ldr	r2, [r0, #16]
 800e3c8:	690c      	ldr	r4, [r1, #16]
 800e3ca:	1b12      	subs	r2, r2, r4
 800e3cc:	d10e      	bne.n	800e3ec <__mcmp+0x28>
 800e3ce:	f100 0314 	add.w	r3, r0, #20
 800e3d2:	3114      	adds	r1, #20
 800e3d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3e4:	42a5      	cmp	r5, r4
 800e3e6:	d003      	beq.n	800e3f0 <__mcmp+0x2c>
 800e3e8:	d305      	bcc.n	800e3f6 <__mcmp+0x32>
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	4610      	mov	r0, r2
 800e3ee:	bd30      	pop	{r4, r5, pc}
 800e3f0:	4283      	cmp	r3, r0
 800e3f2:	d3f3      	bcc.n	800e3dc <__mcmp+0x18>
 800e3f4:	e7fa      	b.n	800e3ec <__mcmp+0x28>
 800e3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fa:	e7f7      	b.n	800e3ec <__mcmp+0x28>

0800e3fc <__mdiff>:
 800e3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	460c      	mov	r4, r1
 800e402:	4606      	mov	r6, r0
 800e404:	4611      	mov	r1, r2
 800e406:	4620      	mov	r0, r4
 800e408:	4690      	mov	r8, r2
 800e40a:	f7ff ffdb 	bl	800e3c4 <__mcmp>
 800e40e:	1e05      	subs	r5, r0, #0
 800e410:	d110      	bne.n	800e434 <__mdiff+0x38>
 800e412:	4629      	mov	r1, r5
 800e414:	4630      	mov	r0, r6
 800e416:	f7ff fd0f 	bl	800de38 <_Balloc>
 800e41a:	b930      	cbnz	r0, 800e42a <__mdiff+0x2e>
 800e41c:	4b3a      	ldr	r3, [pc, #232]	; (800e508 <__mdiff+0x10c>)
 800e41e:	4602      	mov	r2, r0
 800e420:	f240 2137 	movw	r1, #567	; 0x237
 800e424:	4839      	ldr	r0, [pc, #228]	; (800e50c <__mdiff+0x110>)
 800e426:	f7fe fa03 	bl	800c830 <__assert_func>
 800e42a:	2301      	movs	r3, #1
 800e42c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e434:	bfa4      	itt	ge
 800e436:	4643      	movge	r3, r8
 800e438:	46a0      	movge	r8, r4
 800e43a:	4630      	mov	r0, r6
 800e43c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e440:	bfa6      	itte	ge
 800e442:	461c      	movge	r4, r3
 800e444:	2500      	movge	r5, #0
 800e446:	2501      	movlt	r5, #1
 800e448:	f7ff fcf6 	bl	800de38 <_Balloc>
 800e44c:	b920      	cbnz	r0, 800e458 <__mdiff+0x5c>
 800e44e:	4b2e      	ldr	r3, [pc, #184]	; (800e508 <__mdiff+0x10c>)
 800e450:	4602      	mov	r2, r0
 800e452:	f240 2145 	movw	r1, #581	; 0x245
 800e456:	e7e5      	b.n	800e424 <__mdiff+0x28>
 800e458:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e45c:	6926      	ldr	r6, [r4, #16]
 800e45e:	60c5      	str	r5, [r0, #12]
 800e460:	f104 0914 	add.w	r9, r4, #20
 800e464:	f108 0514 	add.w	r5, r8, #20
 800e468:	f100 0e14 	add.w	lr, r0, #20
 800e46c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e470:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e474:	f108 0210 	add.w	r2, r8, #16
 800e478:	46f2      	mov	sl, lr
 800e47a:	2100      	movs	r1, #0
 800e47c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e484:	fa11 f88b 	uxtah	r8, r1, fp
 800e488:	b299      	uxth	r1, r3
 800e48a:	0c1b      	lsrs	r3, r3, #16
 800e48c:	eba8 0801 	sub.w	r8, r8, r1
 800e490:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e494:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e498:	fa1f f888 	uxth.w	r8, r8
 800e49c:	1419      	asrs	r1, r3, #16
 800e49e:	454e      	cmp	r6, r9
 800e4a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4a4:	f84a 3b04 	str.w	r3, [sl], #4
 800e4a8:	d8e8      	bhi.n	800e47c <__mdiff+0x80>
 800e4aa:	1b33      	subs	r3, r6, r4
 800e4ac:	3b15      	subs	r3, #21
 800e4ae:	f023 0303 	bic.w	r3, r3, #3
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	3415      	adds	r4, #21
 800e4b6:	42a6      	cmp	r6, r4
 800e4b8:	bf38      	it	cc
 800e4ba:	2304      	movcc	r3, #4
 800e4bc:	441d      	add	r5, r3
 800e4be:	4473      	add	r3, lr
 800e4c0:	469e      	mov	lr, r3
 800e4c2:	462e      	mov	r6, r5
 800e4c4:	4566      	cmp	r6, ip
 800e4c6:	d30e      	bcc.n	800e4e6 <__mdiff+0xea>
 800e4c8:	f10c 0203 	add.w	r2, ip, #3
 800e4cc:	1b52      	subs	r2, r2, r5
 800e4ce:	f022 0203 	bic.w	r2, r2, #3
 800e4d2:	3d03      	subs	r5, #3
 800e4d4:	45ac      	cmp	ip, r5
 800e4d6:	bf38      	it	cc
 800e4d8:	2200      	movcc	r2, #0
 800e4da:	4413      	add	r3, r2
 800e4dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e4e0:	b17a      	cbz	r2, 800e502 <__mdiff+0x106>
 800e4e2:	6107      	str	r7, [r0, #16]
 800e4e4:	e7a4      	b.n	800e430 <__mdiff+0x34>
 800e4e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800e4ea:	fa11 f288 	uxtah	r2, r1, r8
 800e4ee:	1414      	asrs	r4, r2, #16
 800e4f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e4f4:	b292      	uxth	r2, r2
 800e4f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4fa:	f84e 2b04 	str.w	r2, [lr], #4
 800e4fe:	1421      	asrs	r1, r4, #16
 800e500:	e7e0      	b.n	800e4c4 <__mdiff+0xc8>
 800e502:	3f01      	subs	r7, #1
 800e504:	e7ea      	b.n	800e4dc <__mdiff+0xe0>
 800e506:	bf00      	nop
 800e508:	08012ba9 	.word	0x08012ba9
 800e50c:	08012c1a 	.word	0x08012c1a

0800e510 <__ulp>:
 800e510:	b082      	sub	sp, #8
 800e512:	ed8d 0b00 	vstr	d0, [sp]
 800e516:	9a01      	ldr	r2, [sp, #4]
 800e518:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <__ulp+0x48>)
 800e51a:	4013      	ands	r3, r2
 800e51c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc08      	bgt.n	800e536 <__ulp+0x26>
 800e524:	425b      	negs	r3, r3
 800e526:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e52a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e52e:	da04      	bge.n	800e53a <__ulp+0x2a>
 800e530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e534:	4113      	asrs	r3, r2
 800e536:	2200      	movs	r2, #0
 800e538:	e008      	b.n	800e54c <__ulp+0x3c>
 800e53a:	f1a2 0314 	sub.w	r3, r2, #20
 800e53e:	2b1e      	cmp	r3, #30
 800e540:	bfda      	itte	le
 800e542:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e546:	40da      	lsrle	r2, r3
 800e548:	2201      	movgt	r2, #1
 800e54a:	2300      	movs	r3, #0
 800e54c:	4619      	mov	r1, r3
 800e54e:	4610      	mov	r0, r2
 800e550:	ec41 0b10 	vmov	d0, r0, r1
 800e554:	b002      	add	sp, #8
 800e556:	4770      	bx	lr
 800e558:	7ff00000 	.word	0x7ff00000

0800e55c <__b2d>:
 800e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e560:	6906      	ldr	r6, [r0, #16]
 800e562:	f100 0814 	add.w	r8, r0, #20
 800e566:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e56a:	1f37      	subs	r7, r6, #4
 800e56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e570:	4610      	mov	r0, r2
 800e572:	f7ff fd53 	bl	800e01c <__hi0bits>
 800e576:	f1c0 0320 	rsb	r3, r0, #32
 800e57a:	280a      	cmp	r0, #10
 800e57c:	600b      	str	r3, [r1, #0]
 800e57e:	491b      	ldr	r1, [pc, #108]	; (800e5ec <__b2d+0x90>)
 800e580:	dc15      	bgt.n	800e5ae <__b2d+0x52>
 800e582:	f1c0 0c0b 	rsb	ip, r0, #11
 800e586:	fa22 f30c 	lsr.w	r3, r2, ip
 800e58a:	45b8      	cmp	r8, r7
 800e58c:	ea43 0501 	orr.w	r5, r3, r1
 800e590:	bf34      	ite	cc
 800e592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e596:	2300      	movcs	r3, #0
 800e598:	3015      	adds	r0, #21
 800e59a:	fa02 f000 	lsl.w	r0, r2, r0
 800e59e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e5a2:	4303      	orrs	r3, r0
 800e5a4:	461c      	mov	r4, r3
 800e5a6:	ec45 4b10 	vmov	d0, r4, r5
 800e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ae:	45b8      	cmp	r8, r7
 800e5b0:	bf3a      	itte	cc
 800e5b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800e5ba:	2300      	movcs	r3, #0
 800e5bc:	380b      	subs	r0, #11
 800e5be:	d012      	beq.n	800e5e6 <__b2d+0x8a>
 800e5c0:	f1c0 0120 	rsb	r1, r0, #32
 800e5c4:	fa23 f401 	lsr.w	r4, r3, r1
 800e5c8:	4082      	lsls	r2, r0
 800e5ca:	4322      	orrs	r2, r4
 800e5cc:	4547      	cmp	r7, r8
 800e5ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e5d2:	bf8c      	ite	hi
 800e5d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e5d8:	2200      	movls	r2, #0
 800e5da:	4083      	lsls	r3, r0
 800e5dc:	40ca      	lsrs	r2, r1
 800e5de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	e7de      	b.n	800e5a4 <__b2d+0x48>
 800e5e6:	ea42 0501 	orr.w	r5, r2, r1
 800e5ea:	e7db      	b.n	800e5a4 <__b2d+0x48>
 800e5ec:	3ff00000 	.word	0x3ff00000

0800e5f0 <__d2b>:
 800e5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5f4:	460f      	mov	r7, r1
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	ec59 8b10 	vmov	r8, r9, d0
 800e5fc:	4616      	mov	r6, r2
 800e5fe:	f7ff fc1b 	bl	800de38 <_Balloc>
 800e602:	4604      	mov	r4, r0
 800e604:	b930      	cbnz	r0, 800e614 <__d2b+0x24>
 800e606:	4602      	mov	r2, r0
 800e608:	4b24      	ldr	r3, [pc, #144]	; (800e69c <__d2b+0xac>)
 800e60a:	4825      	ldr	r0, [pc, #148]	; (800e6a0 <__d2b+0xb0>)
 800e60c:	f240 310f 	movw	r1, #783	; 0x30f
 800e610:	f7fe f90e 	bl	800c830 <__assert_func>
 800e614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e61c:	bb2d      	cbnz	r5, 800e66a <__d2b+0x7a>
 800e61e:	9301      	str	r3, [sp, #4]
 800e620:	f1b8 0300 	subs.w	r3, r8, #0
 800e624:	d026      	beq.n	800e674 <__d2b+0x84>
 800e626:	4668      	mov	r0, sp
 800e628:	9300      	str	r3, [sp, #0]
 800e62a:	f7ff fd17 	bl	800e05c <__lo0bits>
 800e62e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e632:	b1e8      	cbz	r0, 800e670 <__d2b+0x80>
 800e634:	f1c0 0320 	rsb	r3, r0, #32
 800e638:	fa02 f303 	lsl.w	r3, r2, r3
 800e63c:	430b      	orrs	r3, r1
 800e63e:	40c2      	lsrs	r2, r0
 800e640:	6163      	str	r3, [r4, #20]
 800e642:	9201      	str	r2, [sp, #4]
 800e644:	9b01      	ldr	r3, [sp, #4]
 800e646:	61a3      	str	r3, [r4, #24]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	bf14      	ite	ne
 800e64c:	2202      	movne	r2, #2
 800e64e:	2201      	moveq	r2, #1
 800e650:	6122      	str	r2, [r4, #16]
 800e652:	b1bd      	cbz	r5, 800e684 <__d2b+0x94>
 800e654:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e658:	4405      	add	r5, r0
 800e65a:	603d      	str	r5, [r7, #0]
 800e65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e660:	6030      	str	r0, [r6, #0]
 800e662:	4620      	mov	r0, r4
 800e664:	b003      	add	sp, #12
 800e666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e66e:	e7d6      	b.n	800e61e <__d2b+0x2e>
 800e670:	6161      	str	r1, [r4, #20]
 800e672:	e7e7      	b.n	800e644 <__d2b+0x54>
 800e674:	a801      	add	r0, sp, #4
 800e676:	f7ff fcf1 	bl	800e05c <__lo0bits>
 800e67a:	9b01      	ldr	r3, [sp, #4]
 800e67c:	6163      	str	r3, [r4, #20]
 800e67e:	3020      	adds	r0, #32
 800e680:	2201      	movs	r2, #1
 800e682:	e7e5      	b.n	800e650 <__d2b+0x60>
 800e684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e68c:	6038      	str	r0, [r7, #0]
 800e68e:	6918      	ldr	r0, [r3, #16]
 800e690:	f7ff fcc4 	bl	800e01c <__hi0bits>
 800e694:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e698:	e7e2      	b.n	800e660 <__d2b+0x70>
 800e69a:	bf00      	nop
 800e69c:	08012ba9 	.word	0x08012ba9
 800e6a0:	08012c1a 	.word	0x08012c1a

0800e6a4 <__ratio>:
 800e6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a8:	4688      	mov	r8, r1
 800e6aa:	4669      	mov	r1, sp
 800e6ac:	4681      	mov	r9, r0
 800e6ae:	f7ff ff55 	bl	800e55c <__b2d>
 800e6b2:	a901      	add	r1, sp, #4
 800e6b4:	4640      	mov	r0, r8
 800e6b6:	ec55 4b10 	vmov	r4, r5, d0
 800e6ba:	f7ff ff4f 	bl	800e55c <__b2d>
 800e6be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e6c6:	eba3 0c02 	sub.w	ip, r3, r2
 800e6ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e6ce:	1a9b      	subs	r3, r3, r2
 800e6d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e6d4:	ec51 0b10 	vmov	r0, r1, d0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bfd6      	itet	le
 800e6dc:	460a      	movle	r2, r1
 800e6de:	462a      	movgt	r2, r5
 800e6e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e6e4:	468b      	mov	fp, r1
 800e6e6:	462f      	mov	r7, r5
 800e6e8:	bfd4      	ite	le
 800e6ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e6ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	ee10 2a10 	vmov	r2, s0
 800e6f8:	465b      	mov	r3, fp
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f2 f8b6 	bl	800086c <__aeabi_ddiv>
 800e700:	ec41 0b10 	vmov	d0, r0, r1
 800e704:	b003      	add	sp, #12
 800e706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e70a <__copybits>:
 800e70a:	3901      	subs	r1, #1
 800e70c:	b570      	push	{r4, r5, r6, lr}
 800e70e:	1149      	asrs	r1, r1, #5
 800e710:	6914      	ldr	r4, [r2, #16]
 800e712:	3101      	adds	r1, #1
 800e714:	f102 0314 	add.w	r3, r2, #20
 800e718:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e71c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e720:	1f05      	subs	r5, r0, #4
 800e722:	42a3      	cmp	r3, r4
 800e724:	d30c      	bcc.n	800e740 <__copybits+0x36>
 800e726:	1aa3      	subs	r3, r4, r2
 800e728:	3b11      	subs	r3, #17
 800e72a:	f023 0303 	bic.w	r3, r3, #3
 800e72e:	3211      	adds	r2, #17
 800e730:	42a2      	cmp	r2, r4
 800e732:	bf88      	it	hi
 800e734:	2300      	movhi	r3, #0
 800e736:	4418      	add	r0, r3
 800e738:	2300      	movs	r3, #0
 800e73a:	4288      	cmp	r0, r1
 800e73c:	d305      	bcc.n	800e74a <__copybits+0x40>
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	f853 6b04 	ldr.w	r6, [r3], #4
 800e744:	f845 6f04 	str.w	r6, [r5, #4]!
 800e748:	e7eb      	b.n	800e722 <__copybits+0x18>
 800e74a:	f840 3b04 	str.w	r3, [r0], #4
 800e74e:	e7f4      	b.n	800e73a <__copybits+0x30>

0800e750 <__any_on>:
 800e750:	f100 0214 	add.w	r2, r0, #20
 800e754:	6900      	ldr	r0, [r0, #16]
 800e756:	114b      	asrs	r3, r1, #5
 800e758:	4298      	cmp	r0, r3
 800e75a:	b510      	push	{r4, lr}
 800e75c:	db11      	blt.n	800e782 <__any_on+0x32>
 800e75e:	dd0a      	ble.n	800e776 <__any_on+0x26>
 800e760:	f011 011f 	ands.w	r1, r1, #31
 800e764:	d007      	beq.n	800e776 <__any_on+0x26>
 800e766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e76a:	fa24 f001 	lsr.w	r0, r4, r1
 800e76e:	fa00 f101 	lsl.w	r1, r0, r1
 800e772:	428c      	cmp	r4, r1
 800e774:	d10b      	bne.n	800e78e <__any_on+0x3e>
 800e776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d803      	bhi.n	800e786 <__any_on+0x36>
 800e77e:	2000      	movs	r0, #0
 800e780:	bd10      	pop	{r4, pc}
 800e782:	4603      	mov	r3, r0
 800e784:	e7f7      	b.n	800e776 <__any_on+0x26>
 800e786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e78a:	2900      	cmp	r1, #0
 800e78c:	d0f5      	beq.n	800e77a <__any_on+0x2a>
 800e78e:	2001      	movs	r0, #1
 800e790:	e7f6      	b.n	800e780 <__any_on+0x30>

0800e792 <__ascii_wctomb>:
 800e792:	b149      	cbz	r1, 800e7a8 <__ascii_wctomb+0x16>
 800e794:	2aff      	cmp	r2, #255	; 0xff
 800e796:	bf85      	ittet	hi
 800e798:	238a      	movhi	r3, #138	; 0x8a
 800e79a:	6003      	strhi	r3, [r0, #0]
 800e79c:	700a      	strbls	r2, [r1, #0]
 800e79e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e7a2:	bf98      	it	ls
 800e7a4:	2001      	movls	r0, #1
 800e7a6:	4770      	bx	lr
 800e7a8:	4608      	mov	r0, r1
 800e7aa:	4770      	bx	lr

0800e7ac <__ssputs_r>:
 800e7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b0:	688e      	ldr	r6, [r1, #8]
 800e7b2:	461f      	mov	r7, r3
 800e7b4:	42be      	cmp	r6, r7
 800e7b6:	680b      	ldr	r3, [r1, #0]
 800e7b8:	4682      	mov	sl, r0
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	4690      	mov	r8, r2
 800e7be:	d82c      	bhi.n	800e81a <__ssputs_r+0x6e>
 800e7c0:	898a      	ldrh	r2, [r1, #12]
 800e7c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7c6:	d026      	beq.n	800e816 <__ssputs_r+0x6a>
 800e7c8:	6965      	ldr	r5, [r4, #20]
 800e7ca:	6909      	ldr	r1, [r1, #16]
 800e7cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7d0:	eba3 0901 	sub.w	r9, r3, r1
 800e7d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7d8:	1c7b      	adds	r3, r7, #1
 800e7da:	444b      	add	r3, r9
 800e7dc:	106d      	asrs	r5, r5, #1
 800e7de:	429d      	cmp	r5, r3
 800e7e0:	bf38      	it	cc
 800e7e2:	461d      	movcc	r5, r3
 800e7e4:	0553      	lsls	r3, r2, #21
 800e7e6:	d527      	bpl.n	800e838 <__ssputs_r+0x8c>
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	f7ff fa87 	bl	800dcfc <_malloc_r>
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	b360      	cbz	r0, 800e84c <__ssputs_r+0xa0>
 800e7f2:	6921      	ldr	r1, [r4, #16]
 800e7f4:	464a      	mov	r2, r9
 800e7f6:	f7fe f805 	bl	800c804 <memcpy>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e804:	81a3      	strh	r3, [r4, #12]
 800e806:	6126      	str	r6, [r4, #16]
 800e808:	6165      	str	r5, [r4, #20]
 800e80a:	444e      	add	r6, r9
 800e80c:	eba5 0509 	sub.w	r5, r5, r9
 800e810:	6026      	str	r6, [r4, #0]
 800e812:	60a5      	str	r5, [r4, #8]
 800e814:	463e      	mov	r6, r7
 800e816:	42be      	cmp	r6, r7
 800e818:	d900      	bls.n	800e81c <__ssputs_r+0x70>
 800e81a:	463e      	mov	r6, r7
 800e81c:	6820      	ldr	r0, [r4, #0]
 800e81e:	4632      	mov	r2, r6
 800e820:	4641      	mov	r1, r8
 800e822:	f000 fd6e 	bl	800f302 <memmove>
 800e826:	68a3      	ldr	r3, [r4, #8]
 800e828:	1b9b      	subs	r3, r3, r6
 800e82a:	60a3      	str	r3, [r4, #8]
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	4433      	add	r3, r6
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	2000      	movs	r0, #0
 800e834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e838:	462a      	mov	r2, r5
 800e83a:	f000 fdaa 	bl	800f392 <_realloc_r>
 800e83e:	4606      	mov	r6, r0
 800e840:	2800      	cmp	r0, #0
 800e842:	d1e0      	bne.n	800e806 <__ssputs_r+0x5a>
 800e844:	6921      	ldr	r1, [r4, #16]
 800e846:	4650      	mov	r0, sl
 800e848:	f7fe fe8c 	bl	800d564 <_free_r>
 800e84c:	230c      	movs	r3, #12
 800e84e:	f8ca 3000 	str.w	r3, [sl]
 800e852:	89a3      	ldrh	r3, [r4, #12]
 800e854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e858:	81a3      	strh	r3, [r4, #12]
 800e85a:	f04f 30ff 	mov.w	r0, #4294967295
 800e85e:	e7e9      	b.n	800e834 <__ssputs_r+0x88>

0800e860 <_svfiprintf_r>:
 800e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	4698      	mov	r8, r3
 800e866:	898b      	ldrh	r3, [r1, #12]
 800e868:	061b      	lsls	r3, r3, #24
 800e86a:	b09d      	sub	sp, #116	; 0x74
 800e86c:	4607      	mov	r7, r0
 800e86e:	460d      	mov	r5, r1
 800e870:	4614      	mov	r4, r2
 800e872:	d50e      	bpl.n	800e892 <_svfiprintf_r+0x32>
 800e874:	690b      	ldr	r3, [r1, #16]
 800e876:	b963      	cbnz	r3, 800e892 <_svfiprintf_r+0x32>
 800e878:	2140      	movs	r1, #64	; 0x40
 800e87a:	f7ff fa3f 	bl	800dcfc <_malloc_r>
 800e87e:	6028      	str	r0, [r5, #0]
 800e880:	6128      	str	r0, [r5, #16]
 800e882:	b920      	cbnz	r0, 800e88e <_svfiprintf_r+0x2e>
 800e884:	230c      	movs	r3, #12
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	f04f 30ff 	mov.w	r0, #4294967295
 800e88c:	e0d0      	b.n	800ea30 <_svfiprintf_r+0x1d0>
 800e88e:	2340      	movs	r3, #64	; 0x40
 800e890:	616b      	str	r3, [r5, #20]
 800e892:	2300      	movs	r3, #0
 800e894:	9309      	str	r3, [sp, #36]	; 0x24
 800e896:	2320      	movs	r3, #32
 800e898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a0:	2330      	movs	r3, #48	; 0x30
 800e8a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ea48 <_svfiprintf_r+0x1e8>
 800e8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8aa:	f04f 0901 	mov.w	r9, #1
 800e8ae:	4623      	mov	r3, r4
 800e8b0:	469a      	mov	sl, r3
 800e8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b6:	b10a      	cbz	r2, 800e8bc <_svfiprintf_r+0x5c>
 800e8b8:	2a25      	cmp	r2, #37	; 0x25
 800e8ba:	d1f9      	bne.n	800e8b0 <_svfiprintf_r+0x50>
 800e8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e8c0:	d00b      	beq.n	800e8da <_svfiprintf_r+0x7a>
 800e8c2:	465b      	mov	r3, fp
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7ff ff6f 	bl	800e7ac <__ssputs_r>
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f000 80a9 	beq.w	800ea26 <_svfiprintf_r+0x1c6>
 800e8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8d6:	445a      	add	r2, fp
 800e8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e8da:	f89a 3000 	ldrb.w	r3, [sl]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 80a1 	beq.w	800ea26 <_svfiprintf_r+0x1c6>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8ee:	f10a 0a01 	add.w	sl, sl, #1
 800e8f2:	9304      	str	r3, [sp, #16]
 800e8f4:	9307      	str	r3, [sp, #28]
 800e8f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e8fc:	4654      	mov	r4, sl
 800e8fe:	2205      	movs	r2, #5
 800e900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e904:	4850      	ldr	r0, [pc, #320]	; (800ea48 <_svfiprintf_r+0x1e8>)
 800e906:	f7f1 fc73 	bl	80001f0 <memchr>
 800e90a:	9a04      	ldr	r2, [sp, #16]
 800e90c:	b9d8      	cbnz	r0, 800e946 <_svfiprintf_r+0xe6>
 800e90e:	06d0      	lsls	r0, r2, #27
 800e910:	bf44      	itt	mi
 800e912:	2320      	movmi	r3, #32
 800e914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e918:	0711      	lsls	r1, r2, #28
 800e91a:	bf44      	itt	mi
 800e91c:	232b      	movmi	r3, #43	; 0x2b
 800e91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e922:	f89a 3000 	ldrb.w	r3, [sl]
 800e926:	2b2a      	cmp	r3, #42	; 0x2a
 800e928:	d015      	beq.n	800e956 <_svfiprintf_r+0xf6>
 800e92a:	9a07      	ldr	r2, [sp, #28]
 800e92c:	4654      	mov	r4, sl
 800e92e:	2000      	movs	r0, #0
 800e930:	f04f 0c0a 	mov.w	ip, #10
 800e934:	4621      	mov	r1, r4
 800e936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e93a:	3b30      	subs	r3, #48	; 0x30
 800e93c:	2b09      	cmp	r3, #9
 800e93e:	d94d      	bls.n	800e9dc <_svfiprintf_r+0x17c>
 800e940:	b1b0      	cbz	r0, 800e970 <_svfiprintf_r+0x110>
 800e942:	9207      	str	r2, [sp, #28]
 800e944:	e014      	b.n	800e970 <_svfiprintf_r+0x110>
 800e946:	eba0 0308 	sub.w	r3, r0, r8
 800e94a:	fa09 f303 	lsl.w	r3, r9, r3
 800e94e:	4313      	orrs	r3, r2
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	46a2      	mov	sl, r4
 800e954:	e7d2      	b.n	800e8fc <_svfiprintf_r+0x9c>
 800e956:	9b03      	ldr	r3, [sp, #12]
 800e958:	1d19      	adds	r1, r3, #4
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	9103      	str	r1, [sp, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bfbb      	ittet	lt
 800e962:	425b      	neglt	r3, r3
 800e964:	f042 0202 	orrlt.w	r2, r2, #2
 800e968:	9307      	strge	r3, [sp, #28]
 800e96a:	9307      	strlt	r3, [sp, #28]
 800e96c:	bfb8      	it	lt
 800e96e:	9204      	strlt	r2, [sp, #16]
 800e970:	7823      	ldrb	r3, [r4, #0]
 800e972:	2b2e      	cmp	r3, #46	; 0x2e
 800e974:	d10c      	bne.n	800e990 <_svfiprintf_r+0x130>
 800e976:	7863      	ldrb	r3, [r4, #1]
 800e978:	2b2a      	cmp	r3, #42	; 0x2a
 800e97a:	d134      	bne.n	800e9e6 <_svfiprintf_r+0x186>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	1d1a      	adds	r2, r3, #4
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	9203      	str	r2, [sp, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	bfb8      	it	lt
 800e988:	f04f 33ff 	movlt.w	r3, #4294967295
 800e98c:	3402      	adds	r4, #2
 800e98e:	9305      	str	r3, [sp, #20]
 800e990:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ea58 <_svfiprintf_r+0x1f8>
 800e994:	7821      	ldrb	r1, [r4, #0]
 800e996:	2203      	movs	r2, #3
 800e998:	4650      	mov	r0, sl
 800e99a:	f7f1 fc29 	bl	80001f0 <memchr>
 800e99e:	b138      	cbz	r0, 800e9b0 <_svfiprintf_r+0x150>
 800e9a0:	9b04      	ldr	r3, [sp, #16]
 800e9a2:	eba0 000a 	sub.w	r0, r0, sl
 800e9a6:	2240      	movs	r2, #64	; 0x40
 800e9a8:	4082      	lsls	r2, r0
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	3401      	adds	r4, #1
 800e9ae:	9304      	str	r3, [sp, #16]
 800e9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b4:	4825      	ldr	r0, [pc, #148]	; (800ea4c <_svfiprintf_r+0x1ec>)
 800e9b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9ba:	2206      	movs	r2, #6
 800e9bc:	f7f1 fc18 	bl	80001f0 <memchr>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d038      	beq.n	800ea36 <_svfiprintf_r+0x1d6>
 800e9c4:	4b22      	ldr	r3, [pc, #136]	; (800ea50 <_svfiprintf_r+0x1f0>)
 800e9c6:	bb1b      	cbnz	r3, 800ea10 <_svfiprintf_r+0x1b0>
 800e9c8:	9b03      	ldr	r3, [sp, #12]
 800e9ca:	3307      	adds	r3, #7
 800e9cc:	f023 0307 	bic.w	r3, r3, #7
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	9303      	str	r3, [sp, #12]
 800e9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d6:	4433      	add	r3, r6
 800e9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9da:	e768      	b.n	800e8ae <_svfiprintf_r+0x4e>
 800e9dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	2001      	movs	r0, #1
 800e9e4:	e7a6      	b.n	800e934 <_svfiprintf_r+0xd4>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	3401      	adds	r4, #1
 800e9ea:	9305      	str	r3, [sp, #20]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	f04f 0c0a 	mov.w	ip, #10
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f8:	3a30      	subs	r2, #48	; 0x30
 800e9fa:	2a09      	cmp	r2, #9
 800e9fc:	d903      	bls.n	800ea06 <_svfiprintf_r+0x1a6>
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0c6      	beq.n	800e990 <_svfiprintf_r+0x130>
 800ea02:	9105      	str	r1, [sp, #20]
 800ea04:	e7c4      	b.n	800e990 <_svfiprintf_r+0x130>
 800ea06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e7f0      	b.n	800e9f2 <_svfiprintf_r+0x192>
 800ea10:	ab03      	add	r3, sp, #12
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	462a      	mov	r2, r5
 800ea16:	4b0f      	ldr	r3, [pc, #60]	; (800ea54 <_svfiprintf_r+0x1f4>)
 800ea18:	a904      	add	r1, sp, #16
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	f7fd f8d6 	bl	800bbcc <_printf_float>
 800ea20:	1c42      	adds	r2, r0, #1
 800ea22:	4606      	mov	r6, r0
 800ea24:	d1d6      	bne.n	800e9d4 <_svfiprintf_r+0x174>
 800ea26:	89ab      	ldrh	r3, [r5, #12]
 800ea28:	065b      	lsls	r3, r3, #25
 800ea2a:	f53f af2d 	bmi.w	800e888 <_svfiprintf_r+0x28>
 800ea2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea30:	b01d      	add	sp, #116	; 0x74
 800ea32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea36:	ab03      	add	r3, sp, #12
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	462a      	mov	r2, r5
 800ea3c:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <_svfiprintf_r+0x1f4>)
 800ea3e:	a904      	add	r1, sp, #16
 800ea40:	4638      	mov	r0, r7
 800ea42:	f7fd fb67 	bl	800c114 <_printf_i>
 800ea46:	e7eb      	b.n	800ea20 <_svfiprintf_r+0x1c0>
 800ea48:	08012e75 	.word	0x08012e75
 800ea4c:	08012e7f 	.word	0x08012e7f
 800ea50:	0800bbcd 	.word	0x0800bbcd
 800ea54:	0800e7ad 	.word	0x0800e7ad
 800ea58:	08012e7b 	.word	0x08012e7b

0800ea5c <_sungetc_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	1c4b      	adds	r3, r1, #1
 800ea60:	4614      	mov	r4, r2
 800ea62:	d103      	bne.n	800ea6c <_sungetc_r+0x10>
 800ea64:	f04f 35ff 	mov.w	r5, #4294967295
 800ea68:	4628      	mov	r0, r5
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	8993      	ldrh	r3, [r2, #12]
 800ea6e:	f023 0320 	bic.w	r3, r3, #32
 800ea72:	8193      	strh	r3, [r2, #12]
 800ea74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea76:	6852      	ldr	r2, [r2, #4]
 800ea78:	b2cd      	uxtb	r5, r1
 800ea7a:	b18b      	cbz	r3, 800eaa0 <_sungetc_r+0x44>
 800ea7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	dd08      	ble.n	800ea94 <_sungetc_r+0x38>
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	1e5a      	subs	r2, r3, #1
 800ea86:	6022      	str	r2, [r4, #0]
 800ea88:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ea8c:	6863      	ldr	r3, [r4, #4]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	e7e9      	b.n	800ea68 <_sungetc_r+0xc>
 800ea94:	4621      	mov	r1, r4
 800ea96:	f000 fbfa 	bl	800f28e <__submore>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d0f1      	beq.n	800ea82 <_sungetc_r+0x26>
 800ea9e:	e7e1      	b.n	800ea64 <_sungetc_r+0x8>
 800eaa0:	6921      	ldr	r1, [r4, #16]
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	b151      	cbz	r1, 800eabc <_sungetc_r+0x60>
 800eaa6:	4299      	cmp	r1, r3
 800eaa8:	d208      	bcs.n	800eabc <_sungetc_r+0x60>
 800eaaa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800eaae:	42a9      	cmp	r1, r5
 800eab0:	d104      	bne.n	800eabc <_sungetc_r+0x60>
 800eab2:	3b01      	subs	r3, #1
 800eab4:	3201      	adds	r2, #1
 800eab6:	6023      	str	r3, [r4, #0]
 800eab8:	6062      	str	r2, [r4, #4]
 800eaba:	e7d5      	b.n	800ea68 <_sungetc_r+0xc>
 800eabc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800eac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eac4:	6363      	str	r3, [r4, #52]	; 0x34
 800eac6:	2303      	movs	r3, #3
 800eac8:	63a3      	str	r3, [r4, #56]	; 0x38
 800eaca:	4623      	mov	r3, r4
 800eacc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ead0:	6023      	str	r3, [r4, #0]
 800ead2:	2301      	movs	r3, #1
 800ead4:	e7dc      	b.n	800ea90 <_sungetc_r+0x34>

0800ead6 <__ssrefill_r>:
 800ead6:	b510      	push	{r4, lr}
 800ead8:	460c      	mov	r4, r1
 800eada:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eadc:	b169      	cbz	r1, 800eafa <__ssrefill_r+0x24>
 800eade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eae2:	4299      	cmp	r1, r3
 800eae4:	d001      	beq.n	800eaea <__ssrefill_r+0x14>
 800eae6:	f7fe fd3d 	bl	800d564 <_free_r>
 800eaea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eaec:	6063      	str	r3, [r4, #4]
 800eaee:	2000      	movs	r0, #0
 800eaf0:	6360      	str	r0, [r4, #52]	; 0x34
 800eaf2:	b113      	cbz	r3, 800eafa <__ssrefill_r+0x24>
 800eaf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eaf6:	6023      	str	r3, [r4, #0]
 800eaf8:	bd10      	pop	{r4, pc}
 800eafa:	6923      	ldr	r3, [r4, #16]
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	2300      	movs	r3, #0
 800eb00:	6063      	str	r3, [r4, #4]
 800eb02:	89a3      	ldrh	r3, [r4, #12]
 800eb04:	f043 0320 	orr.w	r3, r3, #32
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0e:	e7f3      	b.n	800eaf8 <__ssrefill_r+0x22>

0800eb10 <__ssvfiscanf_r>:
 800eb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb14:	460c      	mov	r4, r1
 800eb16:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800eb20:	49a6      	ldr	r1, [pc, #664]	; (800edbc <__ssvfiscanf_r+0x2ac>)
 800eb22:	91a0      	str	r1, [sp, #640]	; 0x280
 800eb24:	f10d 0804 	add.w	r8, sp, #4
 800eb28:	49a5      	ldr	r1, [pc, #660]	; (800edc0 <__ssvfiscanf_r+0x2b0>)
 800eb2a:	4fa6      	ldr	r7, [pc, #664]	; (800edc4 <__ssvfiscanf_r+0x2b4>)
 800eb2c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800edc8 <__ssvfiscanf_r+0x2b8>
 800eb30:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800eb34:	4606      	mov	r6, r0
 800eb36:	91a1      	str	r1, [sp, #644]	; 0x284
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	7813      	ldrb	r3, [r2, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f000 815a 	beq.w	800edf6 <__ssvfiscanf_r+0x2e6>
 800eb42:	5cf9      	ldrb	r1, [r7, r3]
 800eb44:	f011 0108 	ands.w	r1, r1, #8
 800eb48:	f102 0501 	add.w	r5, r2, #1
 800eb4c:	d019      	beq.n	800eb82 <__ssvfiscanf_r+0x72>
 800eb4e:	6863      	ldr	r3, [r4, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dd0f      	ble.n	800eb74 <__ssvfiscanf_r+0x64>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	781a      	ldrb	r2, [r3, #0]
 800eb58:	5cba      	ldrb	r2, [r7, r2]
 800eb5a:	0712      	lsls	r2, r2, #28
 800eb5c:	d401      	bmi.n	800eb62 <__ssvfiscanf_r+0x52>
 800eb5e:	462a      	mov	r2, r5
 800eb60:	e7eb      	b.n	800eb3a <__ssvfiscanf_r+0x2a>
 800eb62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eb64:	3201      	adds	r2, #1
 800eb66:	9245      	str	r2, [sp, #276]	; 0x114
 800eb68:	6862      	ldr	r2, [r4, #4]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	3a01      	subs	r2, #1
 800eb6e:	6062      	str	r2, [r4, #4]
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	e7ec      	b.n	800eb4e <__ssvfiscanf_r+0x3e>
 800eb74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eb76:	4621      	mov	r1, r4
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4798      	blx	r3
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d0e9      	beq.n	800eb54 <__ssvfiscanf_r+0x44>
 800eb80:	e7ed      	b.n	800eb5e <__ssvfiscanf_r+0x4e>
 800eb82:	2b25      	cmp	r3, #37	; 0x25
 800eb84:	d012      	beq.n	800ebac <__ssvfiscanf_r+0x9c>
 800eb86:	469a      	mov	sl, r3
 800eb88:	6863      	ldr	r3, [r4, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f340 8091 	ble.w	800ecb2 <__ssvfiscanf_r+0x1a2>
 800eb90:	6822      	ldr	r2, [r4, #0]
 800eb92:	7813      	ldrb	r3, [r2, #0]
 800eb94:	4553      	cmp	r3, sl
 800eb96:	f040 812e 	bne.w	800edf6 <__ssvfiscanf_r+0x2e6>
 800eb9a:	6863      	ldr	r3, [r4, #4]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	6063      	str	r3, [r4, #4]
 800eba0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800eba2:	3201      	adds	r2, #1
 800eba4:	3301      	adds	r3, #1
 800eba6:	6022      	str	r2, [r4, #0]
 800eba8:	9345      	str	r3, [sp, #276]	; 0x114
 800ebaa:	e7d8      	b.n	800eb5e <__ssvfiscanf_r+0x4e>
 800ebac:	9141      	str	r1, [sp, #260]	; 0x104
 800ebae:	9143      	str	r1, [sp, #268]	; 0x10c
 800ebb0:	7853      	ldrb	r3, [r2, #1]
 800ebb2:	2b2a      	cmp	r3, #42	; 0x2a
 800ebb4:	bf02      	ittt	eq
 800ebb6:	2310      	moveq	r3, #16
 800ebb8:	1c95      	addeq	r5, r2, #2
 800ebba:	9341      	streq	r3, [sp, #260]	; 0x104
 800ebbc:	220a      	movs	r2, #10
 800ebbe:	46aa      	mov	sl, r5
 800ebc0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ebc4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ebc8:	2b09      	cmp	r3, #9
 800ebca:	d91c      	bls.n	800ec06 <__ssvfiscanf_r+0xf6>
 800ebcc:	487e      	ldr	r0, [pc, #504]	; (800edc8 <__ssvfiscanf_r+0x2b8>)
 800ebce:	2203      	movs	r2, #3
 800ebd0:	f7f1 fb0e 	bl	80001f0 <memchr>
 800ebd4:	b138      	cbz	r0, 800ebe6 <__ssvfiscanf_r+0xd6>
 800ebd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ebd8:	eba0 0009 	sub.w	r0, r0, r9
 800ebdc:	2301      	movs	r3, #1
 800ebde:	4083      	lsls	r3, r0
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	9341      	str	r3, [sp, #260]	; 0x104
 800ebe4:	4655      	mov	r5, sl
 800ebe6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ebea:	2b78      	cmp	r3, #120	; 0x78
 800ebec:	d806      	bhi.n	800ebfc <__ssvfiscanf_r+0xec>
 800ebee:	2b57      	cmp	r3, #87	; 0x57
 800ebf0:	d810      	bhi.n	800ec14 <__ssvfiscanf_r+0x104>
 800ebf2:	2b25      	cmp	r3, #37	; 0x25
 800ebf4:	d0c7      	beq.n	800eb86 <__ssvfiscanf_r+0x76>
 800ebf6:	d857      	bhi.n	800eca8 <__ssvfiscanf_r+0x198>
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d065      	beq.n	800ecc8 <__ssvfiscanf_r+0x1b8>
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	9347      	str	r3, [sp, #284]	; 0x11c
 800ec00:	230a      	movs	r3, #10
 800ec02:	9342      	str	r3, [sp, #264]	; 0x108
 800ec04:	e076      	b.n	800ecf4 <__ssvfiscanf_r+0x1e4>
 800ec06:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ec08:	fb02 1103 	mla	r1, r2, r3, r1
 800ec0c:	3930      	subs	r1, #48	; 0x30
 800ec0e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ec10:	4655      	mov	r5, sl
 800ec12:	e7d4      	b.n	800ebbe <__ssvfiscanf_r+0xae>
 800ec14:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ec18:	2a20      	cmp	r2, #32
 800ec1a:	d8ef      	bhi.n	800ebfc <__ssvfiscanf_r+0xec>
 800ec1c:	a101      	add	r1, pc, #4	; (adr r1, 800ec24 <__ssvfiscanf_r+0x114>)
 800ec1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ec22:	bf00      	nop
 800ec24:	0800ecd7 	.word	0x0800ecd7
 800ec28:	0800ebfd 	.word	0x0800ebfd
 800ec2c:	0800ebfd 	.word	0x0800ebfd
 800ec30:	0800ed35 	.word	0x0800ed35
 800ec34:	0800ebfd 	.word	0x0800ebfd
 800ec38:	0800ebfd 	.word	0x0800ebfd
 800ec3c:	0800ebfd 	.word	0x0800ebfd
 800ec40:	0800ebfd 	.word	0x0800ebfd
 800ec44:	0800ebfd 	.word	0x0800ebfd
 800ec48:	0800ebfd 	.word	0x0800ebfd
 800ec4c:	0800ebfd 	.word	0x0800ebfd
 800ec50:	0800ed4b 	.word	0x0800ed4b
 800ec54:	0800ed31 	.word	0x0800ed31
 800ec58:	0800ecaf 	.word	0x0800ecaf
 800ec5c:	0800ecaf 	.word	0x0800ecaf
 800ec60:	0800ecaf 	.word	0x0800ecaf
 800ec64:	0800ebfd 	.word	0x0800ebfd
 800ec68:	0800eced 	.word	0x0800eced
 800ec6c:	0800ebfd 	.word	0x0800ebfd
 800ec70:	0800ebfd 	.word	0x0800ebfd
 800ec74:	0800ebfd 	.word	0x0800ebfd
 800ec78:	0800ebfd 	.word	0x0800ebfd
 800ec7c:	0800ed5b 	.word	0x0800ed5b
 800ec80:	0800ed29 	.word	0x0800ed29
 800ec84:	0800eccf 	.word	0x0800eccf
 800ec88:	0800ebfd 	.word	0x0800ebfd
 800ec8c:	0800ebfd 	.word	0x0800ebfd
 800ec90:	0800ed57 	.word	0x0800ed57
 800ec94:	0800ebfd 	.word	0x0800ebfd
 800ec98:	0800ed31 	.word	0x0800ed31
 800ec9c:	0800ebfd 	.word	0x0800ebfd
 800eca0:	0800ebfd 	.word	0x0800ebfd
 800eca4:	0800ecd7 	.word	0x0800ecd7
 800eca8:	3b45      	subs	r3, #69	; 0x45
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d8a6      	bhi.n	800ebfc <__ssvfiscanf_r+0xec>
 800ecae:	2305      	movs	r3, #5
 800ecb0:	e01f      	b.n	800ecf2 <__ssvfiscanf_r+0x1e2>
 800ecb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	4798      	blx	r3
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	f43f af68 	beq.w	800eb90 <__ssvfiscanf_r+0x80>
 800ecc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	f040 808d 	bne.w	800ede2 <__ssvfiscanf_r+0x2d2>
 800ecc8:	f04f 30ff 	mov.w	r0, #4294967295
 800eccc:	e08f      	b.n	800edee <__ssvfiscanf_r+0x2de>
 800ecce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ecd0:	f042 0220 	orr.w	r2, r2, #32
 800ecd4:	9241      	str	r2, [sp, #260]	; 0x104
 800ecd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ecd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ecdc:	9241      	str	r2, [sp, #260]	; 0x104
 800ecde:	2210      	movs	r2, #16
 800ece0:	2b6f      	cmp	r3, #111	; 0x6f
 800ece2:	9242      	str	r2, [sp, #264]	; 0x108
 800ece4:	bf34      	ite	cc
 800ece6:	2303      	movcc	r3, #3
 800ece8:	2304      	movcs	r3, #4
 800ecea:	e002      	b.n	800ecf2 <__ssvfiscanf_r+0x1e2>
 800ecec:	2300      	movs	r3, #0
 800ecee:	9342      	str	r3, [sp, #264]	; 0x108
 800ecf0:	2303      	movs	r3, #3
 800ecf2:	9347      	str	r3, [sp, #284]	; 0x11c
 800ecf4:	6863      	ldr	r3, [r4, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	dd3d      	ble.n	800ed76 <__ssvfiscanf_r+0x266>
 800ecfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ecfc:	0659      	lsls	r1, r3, #25
 800ecfe:	d404      	bmi.n	800ed0a <__ssvfiscanf_r+0x1fa>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	781a      	ldrb	r2, [r3, #0]
 800ed04:	5cba      	ldrb	r2, [r7, r2]
 800ed06:	0712      	lsls	r2, r2, #28
 800ed08:	d43c      	bmi.n	800ed84 <__ssvfiscanf_r+0x274>
 800ed0a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	dc4b      	bgt.n	800eda8 <__ssvfiscanf_r+0x298>
 800ed10:	466b      	mov	r3, sp
 800ed12:	4622      	mov	r2, r4
 800ed14:	a941      	add	r1, sp, #260	; 0x104
 800ed16:	4630      	mov	r0, r6
 800ed18:	f000 f872 	bl	800ee00 <_scanf_chars>
 800ed1c:	2801      	cmp	r0, #1
 800ed1e:	d06a      	beq.n	800edf6 <__ssvfiscanf_r+0x2e6>
 800ed20:	2802      	cmp	r0, #2
 800ed22:	f47f af1c 	bne.w	800eb5e <__ssvfiscanf_r+0x4e>
 800ed26:	e7cb      	b.n	800ecc0 <__ssvfiscanf_r+0x1b0>
 800ed28:	2308      	movs	r3, #8
 800ed2a:	9342      	str	r3, [sp, #264]	; 0x108
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	e7e0      	b.n	800ecf2 <__ssvfiscanf_r+0x1e2>
 800ed30:	220a      	movs	r2, #10
 800ed32:	e7d5      	b.n	800ece0 <__ssvfiscanf_r+0x1d0>
 800ed34:	4629      	mov	r1, r5
 800ed36:	4640      	mov	r0, r8
 800ed38:	f000 fa70 	bl	800f21c <__sccl>
 800ed3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ed3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed42:	9341      	str	r3, [sp, #260]	; 0x104
 800ed44:	4605      	mov	r5, r0
 800ed46:	2301      	movs	r3, #1
 800ed48:	e7d3      	b.n	800ecf2 <__ssvfiscanf_r+0x1e2>
 800ed4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ed4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed50:	9341      	str	r3, [sp, #260]	; 0x104
 800ed52:	2300      	movs	r3, #0
 800ed54:	e7cd      	b.n	800ecf2 <__ssvfiscanf_r+0x1e2>
 800ed56:	2302      	movs	r3, #2
 800ed58:	e7cb      	b.n	800ecf2 <__ssvfiscanf_r+0x1e2>
 800ed5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ed5c:	06c3      	lsls	r3, r0, #27
 800ed5e:	f53f aefe 	bmi.w	800eb5e <__ssvfiscanf_r+0x4e>
 800ed62:	9b00      	ldr	r3, [sp, #0]
 800ed64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ed66:	1d19      	adds	r1, r3, #4
 800ed68:	9100      	str	r1, [sp, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	07c0      	lsls	r0, r0, #31
 800ed6e:	bf4c      	ite	mi
 800ed70:	801a      	strhmi	r2, [r3, #0]
 800ed72:	601a      	strpl	r2, [r3, #0]
 800ed74:	e6f3      	b.n	800eb5e <__ssvfiscanf_r+0x4e>
 800ed76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ed78:	4621      	mov	r1, r4
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	4798      	blx	r3
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d0bb      	beq.n	800ecfa <__ssvfiscanf_r+0x1ea>
 800ed82:	e79d      	b.n	800ecc0 <__ssvfiscanf_r+0x1b0>
 800ed84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ed86:	3201      	adds	r2, #1
 800ed88:	9245      	str	r2, [sp, #276]	; 0x114
 800ed8a:	6862      	ldr	r2, [r4, #4]
 800ed8c:	3a01      	subs	r2, #1
 800ed8e:	2a00      	cmp	r2, #0
 800ed90:	6062      	str	r2, [r4, #4]
 800ed92:	dd02      	ble.n	800ed9a <__ssvfiscanf_r+0x28a>
 800ed94:	3301      	adds	r3, #1
 800ed96:	6023      	str	r3, [r4, #0]
 800ed98:	e7b2      	b.n	800ed00 <__ssvfiscanf_r+0x1f0>
 800ed9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	4630      	mov	r0, r6
 800eda0:	4798      	blx	r3
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d0ac      	beq.n	800ed00 <__ssvfiscanf_r+0x1f0>
 800eda6:	e78b      	b.n	800ecc0 <__ssvfiscanf_r+0x1b0>
 800eda8:	2b04      	cmp	r3, #4
 800edaa:	dc0f      	bgt.n	800edcc <__ssvfiscanf_r+0x2bc>
 800edac:	466b      	mov	r3, sp
 800edae:	4622      	mov	r2, r4
 800edb0:	a941      	add	r1, sp, #260	; 0x104
 800edb2:	4630      	mov	r0, r6
 800edb4:	f000 f87e 	bl	800eeb4 <_scanf_i>
 800edb8:	e7b0      	b.n	800ed1c <__ssvfiscanf_r+0x20c>
 800edba:	bf00      	nop
 800edbc:	0800ea5d 	.word	0x0800ea5d
 800edc0:	0800ead7 	.word	0x0800ead7
 800edc4:	08012d75 	.word	0x08012d75
 800edc8:	08012e7b 	.word	0x08012e7b
 800edcc:	4b0b      	ldr	r3, [pc, #44]	; (800edfc <__ssvfiscanf_r+0x2ec>)
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f43f aec5 	beq.w	800eb5e <__ssvfiscanf_r+0x4e>
 800edd4:	466b      	mov	r3, sp
 800edd6:	4622      	mov	r2, r4
 800edd8:	a941      	add	r1, sp, #260	; 0x104
 800edda:	4630      	mov	r0, r6
 800eddc:	f3af 8000 	nop.w
 800ede0:	e79c      	b.n	800ed1c <__ssvfiscanf_r+0x20c>
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ede8:	bf18      	it	ne
 800edea:	f04f 30ff 	movne.w	r0, #4294967295
 800edee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800edf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800edf8:	e7f9      	b.n	800edee <__ssvfiscanf_r+0x2de>
 800edfa:	bf00      	nop
 800edfc:	00000000 	.word	0x00000000

0800ee00 <_scanf_chars>:
 800ee00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee04:	4615      	mov	r5, r2
 800ee06:	688a      	ldr	r2, [r1, #8]
 800ee08:	4680      	mov	r8, r0
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	b932      	cbnz	r2, 800ee1c <_scanf_chars+0x1c>
 800ee0e:	698a      	ldr	r2, [r1, #24]
 800ee10:	2a00      	cmp	r2, #0
 800ee12:	bf0c      	ite	eq
 800ee14:	2201      	moveq	r2, #1
 800ee16:	f04f 32ff 	movne.w	r2, #4294967295
 800ee1a:	608a      	str	r2, [r1, #8]
 800ee1c:	6822      	ldr	r2, [r4, #0]
 800ee1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800eeb0 <_scanf_chars+0xb0>
 800ee22:	06d1      	lsls	r1, r2, #27
 800ee24:	bf5f      	itttt	pl
 800ee26:	681a      	ldrpl	r2, [r3, #0]
 800ee28:	1d11      	addpl	r1, r2, #4
 800ee2a:	6019      	strpl	r1, [r3, #0]
 800ee2c:	6816      	ldrpl	r6, [r2, #0]
 800ee2e:	2700      	movs	r7, #0
 800ee30:	69a0      	ldr	r0, [r4, #24]
 800ee32:	b188      	cbz	r0, 800ee58 <_scanf_chars+0x58>
 800ee34:	2801      	cmp	r0, #1
 800ee36:	d107      	bne.n	800ee48 <_scanf_chars+0x48>
 800ee38:	682a      	ldr	r2, [r5, #0]
 800ee3a:	7811      	ldrb	r1, [r2, #0]
 800ee3c:	6962      	ldr	r2, [r4, #20]
 800ee3e:	5c52      	ldrb	r2, [r2, r1]
 800ee40:	b952      	cbnz	r2, 800ee58 <_scanf_chars+0x58>
 800ee42:	2f00      	cmp	r7, #0
 800ee44:	d031      	beq.n	800eeaa <_scanf_chars+0xaa>
 800ee46:	e022      	b.n	800ee8e <_scanf_chars+0x8e>
 800ee48:	2802      	cmp	r0, #2
 800ee4a:	d120      	bne.n	800ee8e <_scanf_chars+0x8e>
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ee54:	071b      	lsls	r3, r3, #28
 800ee56:	d41a      	bmi.n	800ee8e <_scanf_chars+0x8e>
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	06da      	lsls	r2, r3, #27
 800ee5c:	bf5e      	ittt	pl
 800ee5e:	682b      	ldrpl	r3, [r5, #0]
 800ee60:	781b      	ldrbpl	r3, [r3, #0]
 800ee62:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ee66:	682a      	ldr	r2, [r5, #0]
 800ee68:	686b      	ldr	r3, [r5, #4]
 800ee6a:	3201      	adds	r2, #1
 800ee6c:	602a      	str	r2, [r5, #0]
 800ee6e:	68a2      	ldr	r2, [r4, #8]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	3a01      	subs	r2, #1
 800ee74:	606b      	str	r3, [r5, #4]
 800ee76:	3701      	adds	r7, #1
 800ee78:	60a2      	str	r2, [r4, #8]
 800ee7a:	b142      	cbz	r2, 800ee8e <_scanf_chars+0x8e>
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dcd7      	bgt.n	800ee30 <_scanf_chars+0x30>
 800ee80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ee84:	4629      	mov	r1, r5
 800ee86:	4640      	mov	r0, r8
 800ee88:	4798      	blx	r3
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d0d0      	beq.n	800ee30 <_scanf_chars+0x30>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	f013 0310 	ands.w	r3, r3, #16
 800ee94:	d105      	bne.n	800eea2 <_scanf_chars+0xa2>
 800ee96:	68e2      	ldr	r2, [r4, #12]
 800ee98:	3201      	adds	r2, #1
 800ee9a:	60e2      	str	r2, [r4, #12]
 800ee9c:	69a2      	ldr	r2, [r4, #24]
 800ee9e:	b102      	cbz	r2, 800eea2 <_scanf_chars+0xa2>
 800eea0:	7033      	strb	r3, [r6, #0]
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	443b      	add	r3, r7
 800eea6:	6123      	str	r3, [r4, #16]
 800eea8:	2000      	movs	r0, #0
 800eeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeae:	bf00      	nop
 800eeb0:	08012d75 	.word	0x08012d75

0800eeb4 <_scanf_i>:
 800eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	4698      	mov	r8, r3
 800eeba:	4b74      	ldr	r3, [pc, #464]	; (800f08c <_scanf_i+0x1d8>)
 800eebc:	460c      	mov	r4, r1
 800eebe:	4682      	mov	sl, r0
 800eec0:	4616      	mov	r6, r2
 800eec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eec6:	b087      	sub	sp, #28
 800eec8:	ab03      	add	r3, sp, #12
 800eeca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eece:	4b70      	ldr	r3, [pc, #448]	; (800f090 <_scanf_i+0x1dc>)
 800eed0:	69a1      	ldr	r1, [r4, #24]
 800eed2:	4a70      	ldr	r2, [pc, #448]	; (800f094 <_scanf_i+0x1e0>)
 800eed4:	2903      	cmp	r1, #3
 800eed6:	bf18      	it	ne
 800eed8:	461a      	movne	r2, r3
 800eeda:	68a3      	ldr	r3, [r4, #8]
 800eedc:	9201      	str	r2, [sp, #4]
 800eede:	1e5a      	subs	r2, r3, #1
 800eee0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eee4:	bf88      	it	hi
 800eee6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eeea:	4627      	mov	r7, r4
 800eeec:	bf82      	ittt	hi
 800eeee:	eb03 0905 	addhi.w	r9, r3, r5
 800eef2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eef6:	60a3      	strhi	r3, [r4, #8]
 800eef8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800eefc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ef00:	bf98      	it	ls
 800ef02:	f04f 0900 	movls.w	r9, #0
 800ef06:	6023      	str	r3, [r4, #0]
 800ef08:	463d      	mov	r5, r7
 800ef0a:	f04f 0b00 	mov.w	fp, #0
 800ef0e:	6831      	ldr	r1, [r6, #0]
 800ef10:	ab03      	add	r3, sp, #12
 800ef12:	7809      	ldrb	r1, [r1, #0]
 800ef14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ef18:	2202      	movs	r2, #2
 800ef1a:	f7f1 f969 	bl	80001f0 <memchr>
 800ef1e:	b328      	cbz	r0, 800ef6c <_scanf_i+0xb8>
 800ef20:	f1bb 0f01 	cmp.w	fp, #1
 800ef24:	d159      	bne.n	800efda <_scanf_i+0x126>
 800ef26:	6862      	ldr	r2, [r4, #4]
 800ef28:	b92a      	cbnz	r2, 800ef36 <_scanf_i+0x82>
 800ef2a:	6822      	ldr	r2, [r4, #0]
 800ef2c:	2308      	movs	r3, #8
 800ef2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef32:	6063      	str	r3, [r4, #4]
 800ef34:	6022      	str	r2, [r4, #0]
 800ef36:	6822      	ldr	r2, [r4, #0]
 800ef38:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ef3c:	6022      	str	r2, [r4, #0]
 800ef3e:	68a2      	ldr	r2, [r4, #8]
 800ef40:	1e51      	subs	r1, r2, #1
 800ef42:	60a1      	str	r1, [r4, #8]
 800ef44:	b192      	cbz	r2, 800ef6c <_scanf_i+0xb8>
 800ef46:	6832      	ldr	r2, [r6, #0]
 800ef48:	1c51      	adds	r1, r2, #1
 800ef4a:	6031      	str	r1, [r6, #0]
 800ef4c:	7812      	ldrb	r2, [r2, #0]
 800ef4e:	f805 2b01 	strb.w	r2, [r5], #1
 800ef52:	6872      	ldr	r2, [r6, #4]
 800ef54:	3a01      	subs	r2, #1
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	6072      	str	r2, [r6, #4]
 800ef5a:	dc07      	bgt.n	800ef6c <_scanf_i+0xb8>
 800ef5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ef60:	4631      	mov	r1, r6
 800ef62:	4650      	mov	r0, sl
 800ef64:	4790      	blx	r2
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f040 8085 	bne.w	800f076 <_scanf_i+0x1c2>
 800ef6c:	f10b 0b01 	add.w	fp, fp, #1
 800ef70:	f1bb 0f03 	cmp.w	fp, #3
 800ef74:	d1cb      	bne.n	800ef0e <_scanf_i+0x5a>
 800ef76:	6863      	ldr	r3, [r4, #4]
 800ef78:	b90b      	cbnz	r3, 800ef7e <_scanf_i+0xca>
 800ef7a:	230a      	movs	r3, #10
 800ef7c:	6063      	str	r3, [r4, #4]
 800ef7e:	6863      	ldr	r3, [r4, #4]
 800ef80:	4945      	ldr	r1, [pc, #276]	; (800f098 <_scanf_i+0x1e4>)
 800ef82:	6960      	ldr	r0, [r4, #20]
 800ef84:	1ac9      	subs	r1, r1, r3
 800ef86:	f000 f949 	bl	800f21c <__sccl>
 800ef8a:	f04f 0b00 	mov.w	fp, #0
 800ef8e:	68a3      	ldr	r3, [r4, #8]
 800ef90:	6822      	ldr	r2, [r4, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d03d      	beq.n	800f012 <_scanf_i+0x15e>
 800ef96:	6831      	ldr	r1, [r6, #0]
 800ef98:	6960      	ldr	r0, [r4, #20]
 800ef9a:	f891 c000 	ldrb.w	ip, [r1]
 800ef9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d035      	beq.n	800f012 <_scanf_i+0x15e>
 800efa6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800efaa:	d124      	bne.n	800eff6 <_scanf_i+0x142>
 800efac:	0510      	lsls	r0, r2, #20
 800efae:	d522      	bpl.n	800eff6 <_scanf_i+0x142>
 800efb0:	f10b 0b01 	add.w	fp, fp, #1
 800efb4:	f1b9 0f00 	cmp.w	r9, #0
 800efb8:	d003      	beq.n	800efc2 <_scanf_i+0x10e>
 800efba:	3301      	adds	r3, #1
 800efbc:	f109 39ff 	add.w	r9, r9, #4294967295
 800efc0:	60a3      	str	r3, [r4, #8]
 800efc2:	6873      	ldr	r3, [r6, #4]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	6073      	str	r3, [r6, #4]
 800efca:	dd1b      	ble.n	800f004 <_scanf_i+0x150>
 800efcc:	6833      	ldr	r3, [r6, #0]
 800efce:	3301      	adds	r3, #1
 800efd0:	6033      	str	r3, [r6, #0]
 800efd2:	68a3      	ldr	r3, [r4, #8]
 800efd4:	3b01      	subs	r3, #1
 800efd6:	60a3      	str	r3, [r4, #8]
 800efd8:	e7d9      	b.n	800ef8e <_scanf_i+0xda>
 800efda:	f1bb 0f02 	cmp.w	fp, #2
 800efde:	d1ae      	bne.n	800ef3e <_scanf_i+0x8a>
 800efe0:	6822      	ldr	r2, [r4, #0]
 800efe2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800efe6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800efea:	d1bf      	bne.n	800ef6c <_scanf_i+0xb8>
 800efec:	2310      	movs	r3, #16
 800efee:	6063      	str	r3, [r4, #4]
 800eff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eff4:	e7a2      	b.n	800ef3c <_scanf_i+0x88>
 800eff6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800effa:	6022      	str	r2, [r4, #0]
 800effc:	780b      	ldrb	r3, [r1, #0]
 800effe:	f805 3b01 	strb.w	r3, [r5], #1
 800f002:	e7de      	b.n	800efc2 <_scanf_i+0x10e>
 800f004:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f008:	4631      	mov	r1, r6
 800f00a:	4650      	mov	r0, sl
 800f00c:	4798      	blx	r3
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0df      	beq.n	800efd2 <_scanf_i+0x11e>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	05d9      	lsls	r1, r3, #23
 800f016:	d50d      	bpl.n	800f034 <_scanf_i+0x180>
 800f018:	42bd      	cmp	r5, r7
 800f01a:	d909      	bls.n	800f030 <_scanf_i+0x17c>
 800f01c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f024:	4632      	mov	r2, r6
 800f026:	4650      	mov	r0, sl
 800f028:	4798      	blx	r3
 800f02a:	f105 39ff 	add.w	r9, r5, #4294967295
 800f02e:	464d      	mov	r5, r9
 800f030:	42bd      	cmp	r5, r7
 800f032:	d028      	beq.n	800f086 <_scanf_i+0x1d2>
 800f034:	6822      	ldr	r2, [r4, #0]
 800f036:	f012 0210 	ands.w	r2, r2, #16
 800f03a:	d113      	bne.n	800f064 <_scanf_i+0x1b0>
 800f03c:	702a      	strb	r2, [r5, #0]
 800f03e:	6863      	ldr	r3, [r4, #4]
 800f040:	9e01      	ldr	r6, [sp, #4]
 800f042:	4639      	mov	r1, r7
 800f044:	4650      	mov	r0, sl
 800f046:	47b0      	blx	r6
 800f048:	f8d8 3000 	ldr.w	r3, [r8]
 800f04c:	6821      	ldr	r1, [r4, #0]
 800f04e:	1d1a      	adds	r2, r3, #4
 800f050:	f8c8 2000 	str.w	r2, [r8]
 800f054:	f011 0f20 	tst.w	r1, #32
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	d00f      	beq.n	800f07c <_scanf_i+0x1c8>
 800f05c:	6018      	str	r0, [r3, #0]
 800f05e:	68e3      	ldr	r3, [r4, #12]
 800f060:	3301      	adds	r3, #1
 800f062:	60e3      	str	r3, [r4, #12]
 800f064:	6923      	ldr	r3, [r4, #16]
 800f066:	1bed      	subs	r5, r5, r7
 800f068:	445d      	add	r5, fp
 800f06a:	442b      	add	r3, r5
 800f06c:	6123      	str	r3, [r4, #16]
 800f06e:	2000      	movs	r0, #0
 800f070:	b007      	add	sp, #28
 800f072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f076:	f04f 0b00 	mov.w	fp, #0
 800f07a:	e7ca      	b.n	800f012 <_scanf_i+0x15e>
 800f07c:	07ca      	lsls	r2, r1, #31
 800f07e:	bf4c      	ite	mi
 800f080:	8018      	strhmi	r0, [r3, #0]
 800f082:	6018      	strpl	r0, [r3, #0]
 800f084:	e7eb      	b.n	800f05e <_scanf_i+0x1aa>
 800f086:	2001      	movs	r0, #1
 800f088:	e7f2      	b.n	800f070 <_scanf_i+0x1bc>
 800f08a:	bf00      	nop
 800f08c:	08011448 	.word	0x08011448
 800f090:	0800f5dd 	.word	0x0800f5dd
 800f094:	0800f4f5 	.word	0x0800f4f5
 800f098:	08012e96 	.word	0x08012e96

0800f09c <__sflush_r>:
 800f09c:	898a      	ldrh	r2, [r1, #12]
 800f09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	0710      	lsls	r0, r2, #28
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	d458      	bmi.n	800f15c <__sflush_r+0xc0>
 800f0aa:	684b      	ldr	r3, [r1, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	dc05      	bgt.n	800f0bc <__sflush_r+0x20>
 800f0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	dc02      	bgt.n	800f0bc <__sflush_r+0x20>
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0be:	2e00      	cmp	r6, #0
 800f0c0:	d0f9      	beq.n	800f0b6 <__sflush_r+0x1a>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0c8:	682f      	ldr	r7, [r5, #0]
 800f0ca:	6a21      	ldr	r1, [r4, #32]
 800f0cc:	602b      	str	r3, [r5, #0]
 800f0ce:	d032      	beq.n	800f136 <__sflush_r+0x9a>
 800f0d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0d2:	89a3      	ldrh	r3, [r4, #12]
 800f0d4:	075a      	lsls	r2, r3, #29
 800f0d6:	d505      	bpl.n	800f0e4 <__sflush_r+0x48>
 800f0d8:	6863      	ldr	r3, [r4, #4]
 800f0da:	1ac0      	subs	r0, r0, r3
 800f0dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0de:	b10b      	cbz	r3, 800f0e4 <__sflush_r+0x48>
 800f0e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0e2:	1ac0      	subs	r0, r0, r3
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ea:	6a21      	ldr	r1, [r4, #32]
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	47b0      	blx	r6
 800f0f0:	1c43      	adds	r3, r0, #1
 800f0f2:	89a3      	ldrh	r3, [r4, #12]
 800f0f4:	d106      	bne.n	800f104 <__sflush_r+0x68>
 800f0f6:	6829      	ldr	r1, [r5, #0]
 800f0f8:	291d      	cmp	r1, #29
 800f0fa:	d82b      	bhi.n	800f154 <__sflush_r+0xb8>
 800f0fc:	4a29      	ldr	r2, [pc, #164]	; (800f1a4 <__sflush_r+0x108>)
 800f0fe:	410a      	asrs	r2, r1
 800f100:	07d6      	lsls	r6, r2, #31
 800f102:	d427      	bmi.n	800f154 <__sflush_r+0xb8>
 800f104:	2200      	movs	r2, #0
 800f106:	6062      	str	r2, [r4, #4]
 800f108:	04d9      	lsls	r1, r3, #19
 800f10a:	6922      	ldr	r2, [r4, #16]
 800f10c:	6022      	str	r2, [r4, #0]
 800f10e:	d504      	bpl.n	800f11a <__sflush_r+0x7e>
 800f110:	1c42      	adds	r2, r0, #1
 800f112:	d101      	bne.n	800f118 <__sflush_r+0x7c>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b903      	cbnz	r3, 800f11a <__sflush_r+0x7e>
 800f118:	6560      	str	r0, [r4, #84]	; 0x54
 800f11a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f11c:	602f      	str	r7, [r5, #0]
 800f11e:	2900      	cmp	r1, #0
 800f120:	d0c9      	beq.n	800f0b6 <__sflush_r+0x1a>
 800f122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f126:	4299      	cmp	r1, r3
 800f128:	d002      	beq.n	800f130 <__sflush_r+0x94>
 800f12a:	4628      	mov	r0, r5
 800f12c:	f7fe fa1a 	bl	800d564 <_free_r>
 800f130:	2000      	movs	r0, #0
 800f132:	6360      	str	r0, [r4, #52]	; 0x34
 800f134:	e7c0      	b.n	800f0b8 <__sflush_r+0x1c>
 800f136:	2301      	movs	r3, #1
 800f138:	4628      	mov	r0, r5
 800f13a:	47b0      	blx	r6
 800f13c:	1c41      	adds	r1, r0, #1
 800f13e:	d1c8      	bne.n	800f0d2 <__sflush_r+0x36>
 800f140:	682b      	ldr	r3, [r5, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d0c5      	beq.n	800f0d2 <__sflush_r+0x36>
 800f146:	2b1d      	cmp	r3, #29
 800f148:	d001      	beq.n	800f14e <__sflush_r+0xb2>
 800f14a:	2b16      	cmp	r3, #22
 800f14c:	d101      	bne.n	800f152 <__sflush_r+0xb6>
 800f14e:	602f      	str	r7, [r5, #0]
 800f150:	e7b1      	b.n	800f0b6 <__sflush_r+0x1a>
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	e7ad      	b.n	800f0b8 <__sflush_r+0x1c>
 800f15c:	690f      	ldr	r7, [r1, #16]
 800f15e:	2f00      	cmp	r7, #0
 800f160:	d0a9      	beq.n	800f0b6 <__sflush_r+0x1a>
 800f162:	0793      	lsls	r3, r2, #30
 800f164:	680e      	ldr	r6, [r1, #0]
 800f166:	bf08      	it	eq
 800f168:	694b      	ldreq	r3, [r1, #20]
 800f16a:	600f      	str	r7, [r1, #0]
 800f16c:	bf18      	it	ne
 800f16e:	2300      	movne	r3, #0
 800f170:	eba6 0807 	sub.w	r8, r6, r7
 800f174:	608b      	str	r3, [r1, #8]
 800f176:	f1b8 0f00 	cmp.w	r8, #0
 800f17a:	dd9c      	ble.n	800f0b6 <__sflush_r+0x1a>
 800f17c:	6a21      	ldr	r1, [r4, #32]
 800f17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f180:	4643      	mov	r3, r8
 800f182:	463a      	mov	r2, r7
 800f184:	4628      	mov	r0, r5
 800f186:	47b0      	blx	r6
 800f188:	2800      	cmp	r0, #0
 800f18a:	dc06      	bgt.n	800f19a <__sflush_r+0xfe>
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f192:	81a3      	strh	r3, [r4, #12]
 800f194:	f04f 30ff 	mov.w	r0, #4294967295
 800f198:	e78e      	b.n	800f0b8 <__sflush_r+0x1c>
 800f19a:	4407      	add	r7, r0
 800f19c:	eba8 0800 	sub.w	r8, r8, r0
 800f1a0:	e7e9      	b.n	800f176 <__sflush_r+0xda>
 800f1a2:	bf00      	nop
 800f1a4:	dfbffffe 	.word	0xdfbffffe

0800f1a8 <_fflush_r>:
 800f1a8:	b538      	push	{r3, r4, r5, lr}
 800f1aa:	690b      	ldr	r3, [r1, #16]
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	b913      	cbnz	r3, 800f1b8 <_fflush_r+0x10>
 800f1b2:	2500      	movs	r5, #0
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	bd38      	pop	{r3, r4, r5, pc}
 800f1b8:	b118      	cbz	r0, 800f1c2 <_fflush_r+0x1a>
 800f1ba:	6a03      	ldr	r3, [r0, #32]
 800f1bc:	b90b      	cbnz	r3, 800f1c2 <_fflush_r+0x1a>
 800f1be:	f7fd f945 	bl	800c44c <__sinit>
 800f1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d0f3      	beq.n	800f1b2 <_fflush_r+0xa>
 800f1ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1cc:	07d0      	lsls	r0, r2, #31
 800f1ce:	d404      	bmi.n	800f1da <_fflush_r+0x32>
 800f1d0:	0599      	lsls	r1, r3, #22
 800f1d2:	d402      	bmi.n	800f1da <_fflush_r+0x32>
 800f1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1d6:	f7fd fb0b 	bl	800c7f0 <__retarget_lock_acquire_recursive>
 800f1da:	4628      	mov	r0, r5
 800f1dc:	4621      	mov	r1, r4
 800f1de:	f7ff ff5d 	bl	800f09c <__sflush_r>
 800f1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1e4:	07da      	lsls	r2, r3, #31
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	d4e4      	bmi.n	800f1b4 <_fflush_r+0xc>
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	059b      	lsls	r3, r3, #22
 800f1ee:	d4e1      	bmi.n	800f1b4 <_fflush_r+0xc>
 800f1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1f2:	f7fd fafe 	bl	800c7f2 <__retarget_lock_release_recursive>
 800f1f6:	e7dd      	b.n	800f1b4 <_fflush_r+0xc>

0800f1f8 <fiprintf>:
 800f1f8:	b40e      	push	{r1, r2, r3}
 800f1fa:	b503      	push	{r0, r1, lr}
 800f1fc:	4601      	mov	r1, r0
 800f1fe:	ab03      	add	r3, sp, #12
 800f200:	4805      	ldr	r0, [pc, #20]	; (800f218 <fiprintf+0x20>)
 800f202:	f853 2b04 	ldr.w	r2, [r3], #4
 800f206:	6800      	ldr	r0, [r0, #0]
 800f208:	9301      	str	r3, [sp, #4]
 800f20a:	f000 fa13 	bl	800f634 <_vfiprintf_r>
 800f20e:	b002      	add	sp, #8
 800f210:	f85d eb04 	ldr.w	lr, [sp], #4
 800f214:	b003      	add	sp, #12
 800f216:	4770      	bx	lr
 800f218:	2000020c 	.word	0x2000020c

0800f21c <__sccl>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	780b      	ldrb	r3, [r1, #0]
 800f220:	4604      	mov	r4, r0
 800f222:	2b5e      	cmp	r3, #94	; 0x5e
 800f224:	bf0b      	itete	eq
 800f226:	784b      	ldrbeq	r3, [r1, #1]
 800f228:	1c4a      	addne	r2, r1, #1
 800f22a:	1c8a      	addeq	r2, r1, #2
 800f22c:	2100      	movne	r1, #0
 800f22e:	bf08      	it	eq
 800f230:	2101      	moveq	r1, #1
 800f232:	3801      	subs	r0, #1
 800f234:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f238:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f23c:	42a8      	cmp	r0, r5
 800f23e:	d1fb      	bne.n	800f238 <__sccl+0x1c>
 800f240:	b90b      	cbnz	r3, 800f246 <__sccl+0x2a>
 800f242:	1e50      	subs	r0, r2, #1
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	f081 0101 	eor.w	r1, r1, #1
 800f24a:	54e1      	strb	r1, [r4, r3]
 800f24c:	4610      	mov	r0, r2
 800f24e:	4602      	mov	r2, r0
 800f250:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f254:	2d2d      	cmp	r5, #45	; 0x2d
 800f256:	d005      	beq.n	800f264 <__sccl+0x48>
 800f258:	2d5d      	cmp	r5, #93	; 0x5d
 800f25a:	d016      	beq.n	800f28a <__sccl+0x6e>
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	d0f1      	beq.n	800f244 <__sccl+0x28>
 800f260:	462b      	mov	r3, r5
 800f262:	e7f2      	b.n	800f24a <__sccl+0x2e>
 800f264:	7846      	ldrb	r6, [r0, #1]
 800f266:	2e5d      	cmp	r6, #93	; 0x5d
 800f268:	d0fa      	beq.n	800f260 <__sccl+0x44>
 800f26a:	42b3      	cmp	r3, r6
 800f26c:	dcf8      	bgt.n	800f260 <__sccl+0x44>
 800f26e:	3002      	adds	r0, #2
 800f270:	461a      	mov	r2, r3
 800f272:	3201      	adds	r2, #1
 800f274:	4296      	cmp	r6, r2
 800f276:	54a1      	strb	r1, [r4, r2]
 800f278:	dcfb      	bgt.n	800f272 <__sccl+0x56>
 800f27a:	1af2      	subs	r2, r6, r3
 800f27c:	3a01      	subs	r2, #1
 800f27e:	1c5d      	adds	r5, r3, #1
 800f280:	42b3      	cmp	r3, r6
 800f282:	bfa8      	it	ge
 800f284:	2200      	movge	r2, #0
 800f286:	18ab      	adds	r3, r5, r2
 800f288:	e7e1      	b.n	800f24e <__sccl+0x32>
 800f28a:	4610      	mov	r0, r2
 800f28c:	e7da      	b.n	800f244 <__sccl+0x28>

0800f28e <__submore>:
 800f28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f292:	460c      	mov	r4, r1
 800f294:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f29a:	4299      	cmp	r1, r3
 800f29c:	d11d      	bne.n	800f2da <__submore+0x4c>
 800f29e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f2a2:	f7fe fd2b 	bl	800dcfc <_malloc_r>
 800f2a6:	b918      	cbnz	r0, 800f2b0 <__submore+0x22>
 800f2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f2b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f2ba:	6360      	str	r0, [r4, #52]	; 0x34
 800f2bc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f2c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f2c4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f2c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f2cc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f2d0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f2d4:	6020      	str	r0, [r4, #0]
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	e7e8      	b.n	800f2ac <__submore+0x1e>
 800f2da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f2dc:	0077      	lsls	r7, r6, #1
 800f2de:	463a      	mov	r2, r7
 800f2e0:	f000 f857 	bl	800f392 <_realloc_r>
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d0de      	beq.n	800f2a8 <__submore+0x1a>
 800f2ea:	eb00 0806 	add.w	r8, r0, r6
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	4640      	mov	r0, r8
 800f2f4:	f7fd fa86 	bl	800c804 <memcpy>
 800f2f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f2fc:	f8c4 8000 	str.w	r8, [r4]
 800f300:	e7e9      	b.n	800f2d6 <__submore+0x48>

0800f302 <memmove>:
 800f302:	4288      	cmp	r0, r1
 800f304:	b510      	push	{r4, lr}
 800f306:	eb01 0402 	add.w	r4, r1, r2
 800f30a:	d902      	bls.n	800f312 <memmove+0x10>
 800f30c:	4284      	cmp	r4, r0
 800f30e:	4623      	mov	r3, r4
 800f310:	d807      	bhi.n	800f322 <memmove+0x20>
 800f312:	1e43      	subs	r3, r0, #1
 800f314:	42a1      	cmp	r1, r4
 800f316:	d008      	beq.n	800f32a <memmove+0x28>
 800f318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f31c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f320:	e7f8      	b.n	800f314 <memmove+0x12>
 800f322:	4402      	add	r2, r0
 800f324:	4601      	mov	r1, r0
 800f326:	428a      	cmp	r2, r1
 800f328:	d100      	bne.n	800f32c <memmove+0x2a>
 800f32a:	bd10      	pop	{r4, pc}
 800f32c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f330:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f334:	e7f7      	b.n	800f326 <memmove+0x24>
	...

0800f338 <_sbrk_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4d06      	ldr	r5, [pc, #24]	; (800f354 <_sbrk_r+0x1c>)
 800f33c:	2300      	movs	r3, #0
 800f33e:	4604      	mov	r4, r0
 800f340:	4608      	mov	r0, r1
 800f342:	602b      	str	r3, [r5, #0]
 800f344:	f7f4 f8f4 	bl	8003530 <_sbrk>
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d102      	bne.n	800f352 <_sbrk_r+0x1a>
 800f34c:	682b      	ldr	r3, [r5, #0]
 800f34e:	b103      	cbz	r3, 800f352 <_sbrk_r+0x1a>
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	20001084 	.word	0x20001084

0800f358 <abort>:
 800f358:	b508      	push	{r3, lr}
 800f35a:	2006      	movs	r0, #6
 800f35c:	f000 fb42 	bl	800f9e4 <raise>
 800f360:	2001      	movs	r0, #1
 800f362:	f7f4 f86d 	bl	8003440 <_exit>

0800f366 <_calloc_r>:
 800f366:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f368:	fba1 2402 	umull	r2, r4, r1, r2
 800f36c:	b94c      	cbnz	r4, 800f382 <_calloc_r+0x1c>
 800f36e:	4611      	mov	r1, r2
 800f370:	9201      	str	r2, [sp, #4]
 800f372:	f7fe fcc3 	bl	800dcfc <_malloc_r>
 800f376:	9a01      	ldr	r2, [sp, #4]
 800f378:	4605      	mov	r5, r0
 800f37a:	b930      	cbnz	r0, 800f38a <_calloc_r+0x24>
 800f37c:	4628      	mov	r0, r5
 800f37e:	b003      	add	sp, #12
 800f380:	bd30      	pop	{r4, r5, pc}
 800f382:	220c      	movs	r2, #12
 800f384:	6002      	str	r2, [r0, #0]
 800f386:	2500      	movs	r5, #0
 800f388:	e7f8      	b.n	800f37c <_calloc_r+0x16>
 800f38a:	4621      	mov	r1, r4
 800f38c:	f7fd f925 	bl	800c5da <memset>
 800f390:	e7f4      	b.n	800f37c <_calloc_r+0x16>

0800f392 <_realloc_r>:
 800f392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f396:	4680      	mov	r8, r0
 800f398:	4614      	mov	r4, r2
 800f39a:	460e      	mov	r6, r1
 800f39c:	b921      	cbnz	r1, 800f3a8 <_realloc_r+0x16>
 800f39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	f7fe bcaa 	b.w	800dcfc <_malloc_r>
 800f3a8:	b92a      	cbnz	r2, 800f3b6 <_realloc_r+0x24>
 800f3aa:	f7fe f8db 	bl	800d564 <_free_r>
 800f3ae:	4625      	mov	r5, r4
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b6:	f000 fb31 	bl	800fa1c <_malloc_usable_size_r>
 800f3ba:	4284      	cmp	r4, r0
 800f3bc:	4607      	mov	r7, r0
 800f3be:	d802      	bhi.n	800f3c6 <_realloc_r+0x34>
 800f3c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3c4:	d812      	bhi.n	800f3ec <_realloc_r+0x5a>
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4640      	mov	r0, r8
 800f3ca:	f7fe fc97 	bl	800dcfc <_malloc_r>
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d0ed      	beq.n	800f3b0 <_realloc_r+0x1e>
 800f3d4:	42bc      	cmp	r4, r7
 800f3d6:	4622      	mov	r2, r4
 800f3d8:	4631      	mov	r1, r6
 800f3da:	bf28      	it	cs
 800f3dc:	463a      	movcs	r2, r7
 800f3de:	f7fd fa11 	bl	800c804 <memcpy>
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	f7fe f8bd 	bl	800d564 <_free_r>
 800f3ea:	e7e1      	b.n	800f3b0 <_realloc_r+0x1e>
 800f3ec:	4635      	mov	r5, r6
 800f3ee:	e7df      	b.n	800f3b0 <_realloc_r+0x1e>

0800f3f0 <_strtol_l.constprop.0>:
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f6:	d001      	beq.n	800f3fc <_strtol_l.constprop.0+0xc>
 800f3f8:	2b24      	cmp	r3, #36	; 0x24
 800f3fa:	d906      	bls.n	800f40a <_strtol_l.constprop.0+0x1a>
 800f3fc:	f7fd f9ce 	bl	800c79c <__errno>
 800f400:	2316      	movs	r3, #22
 800f402:	6003      	str	r3, [r0, #0]
 800f404:	2000      	movs	r0, #0
 800f406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f40a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f4f0 <_strtol_l.constprop.0+0x100>
 800f40e:	460d      	mov	r5, r1
 800f410:	462e      	mov	r6, r5
 800f412:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f416:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f41a:	f017 0708 	ands.w	r7, r7, #8
 800f41e:	d1f7      	bne.n	800f410 <_strtol_l.constprop.0+0x20>
 800f420:	2c2d      	cmp	r4, #45	; 0x2d
 800f422:	d132      	bne.n	800f48a <_strtol_l.constprop.0+0x9a>
 800f424:	782c      	ldrb	r4, [r5, #0]
 800f426:	2701      	movs	r7, #1
 800f428:	1cb5      	adds	r5, r6, #2
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d05b      	beq.n	800f4e6 <_strtol_l.constprop.0+0xf6>
 800f42e:	2b10      	cmp	r3, #16
 800f430:	d109      	bne.n	800f446 <_strtol_l.constprop.0+0x56>
 800f432:	2c30      	cmp	r4, #48	; 0x30
 800f434:	d107      	bne.n	800f446 <_strtol_l.constprop.0+0x56>
 800f436:	782c      	ldrb	r4, [r5, #0]
 800f438:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f43c:	2c58      	cmp	r4, #88	; 0x58
 800f43e:	d14d      	bne.n	800f4dc <_strtol_l.constprop.0+0xec>
 800f440:	786c      	ldrb	r4, [r5, #1]
 800f442:	2310      	movs	r3, #16
 800f444:	3502      	adds	r5, #2
 800f446:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f44a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f44e:	f04f 0e00 	mov.w	lr, #0
 800f452:	fbb8 f9f3 	udiv	r9, r8, r3
 800f456:	4676      	mov	r6, lr
 800f458:	fb03 8a19 	mls	sl, r3, r9, r8
 800f45c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f460:	f1bc 0f09 	cmp.w	ip, #9
 800f464:	d816      	bhi.n	800f494 <_strtol_l.constprop.0+0xa4>
 800f466:	4664      	mov	r4, ip
 800f468:	42a3      	cmp	r3, r4
 800f46a:	dd24      	ble.n	800f4b6 <_strtol_l.constprop.0+0xc6>
 800f46c:	f1be 3fff 	cmp.w	lr, #4294967295
 800f470:	d008      	beq.n	800f484 <_strtol_l.constprop.0+0x94>
 800f472:	45b1      	cmp	r9, r6
 800f474:	d31c      	bcc.n	800f4b0 <_strtol_l.constprop.0+0xc0>
 800f476:	d101      	bne.n	800f47c <_strtol_l.constprop.0+0x8c>
 800f478:	45a2      	cmp	sl, r4
 800f47a:	db19      	blt.n	800f4b0 <_strtol_l.constprop.0+0xc0>
 800f47c:	fb06 4603 	mla	r6, r6, r3, r4
 800f480:	f04f 0e01 	mov.w	lr, #1
 800f484:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f488:	e7e8      	b.n	800f45c <_strtol_l.constprop.0+0x6c>
 800f48a:	2c2b      	cmp	r4, #43	; 0x2b
 800f48c:	bf04      	itt	eq
 800f48e:	782c      	ldrbeq	r4, [r5, #0]
 800f490:	1cb5      	addeq	r5, r6, #2
 800f492:	e7ca      	b.n	800f42a <_strtol_l.constprop.0+0x3a>
 800f494:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f498:	f1bc 0f19 	cmp.w	ip, #25
 800f49c:	d801      	bhi.n	800f4a2 <_strtol_l.constprop.0+0xb2>
 800f49e:	3c37      	subs	r4, #55	; 0x37
 800f4a0:	e7e2      	b.n	800f468 <_strtol_l.constprop.0+0x78>
 800f4a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f4a6:	f1bc 0f19 	cmp.w	ip, #25
 800f4aa:	d804      	bhi.n	800f4b6 <_strtol_l.constprop.0+0xc6>
 800f4ac:	3c57      	subs	r4, #87	; 0x57
 800f4ae:	e7db      	b.n	800f468 <_strtol_l.constprop.0+0x78>
 800f4b0:	f04f 3eff 	mov.w	lr, #4294967295
 800f4b4:	e7e6      	b.n	800f484 <_strtol_l.constprop.0+0x94>
 800f4b6:	f1be 3fff 	cmp.w	lr, #4294967295
 800f4ba:	d105      	bne.n	800f4c8 <_strtol_l.constprop.0+0xd8>
 800f4bc:	2322      	movs	r3, #34	; 0x22
 800f4be:	6003      	str	r3, [r0, #0]
 800f4c0:	4646      	mov	r6, r8
 800f4c2:	b942      	cbnz	r2, 800f4d6 <_strtol_l.constprop.0+0xe6>
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	e79e      	b.n	800f406 <_strtol_l.constprop.0+0x16>
 800f4c8:	b107      	cbz	r7, 800f4cc <_strtol_l.constprop.0+0xdc>
 800f4ca:	4276      	negs	r6, r6
 800f4cc:	2a00      	cmp	r2, #0
 800f4ce:	d0f9      	beq.n	800f4c4 <_strtol_l.constprop.0+0xd4>
 800f4d0:	f1be 0f00 	cmp.w	lr, #0
 800f4d4:	d000      	beq.n	800f4d8 <_strtol_l.constprop.0+0xe8>
 800f4d6:	1e69      	subs	r1, r5, #1
 800f4d8:	6011      	str	r1, [r2, #0]
 800f4da:	e7f3      	b.n	800f4c4 <_strtol_l.constprop.0+0xd4>
 800f4dc:	2430      	movs	r4, #48	; 0x30
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1b1      	bne.n	800f446 <_strtol_l.constprop.0+0x56>
 800f4e2:	2308      	movs	r3, #8
 800f4e4:	e7af      	b.n	800f446 <_strtol_l.constprop.0+0x56>
 800f4e6:	2c30      	cmp	r4, #48	; 0x30
 800f4e8:	d0a5      	beq.n	800f436 <_strtol_l.constprop.0+0x46>
 800f4ea:	230a      	movs	r3, #10
 800f4ec:	e7ab      	b.n	800f446 <_strtol_l.constprop.0+0x56>
 800f4ee:	bf00      	nop
 800f4f0:	08012d75 	.word	0x08012d75

0800f4f4 <_strtol_r>:
 800f4f4:	f7ff bf7c 	b.w	800f3f0 <_strtol_l.constprop.0>

0800f4f8 <_strtoul_l.constprop.0>:
 800f4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4fc:	4f36      	ldr	r7, [pc, #216]	; (800f5d8 <_strtoul_l.constprop.0+0xe0>)
 800f4fe:	4686      	mov	lr, r0
 800f500:	460d      	mov	r5, r1
 800f502:	4628      	mov	r0, r5
 800f504:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f508:	5d3e      	ldrb	r6, [r7, r4]
 800f50a:	f016 0608 	ands.w	r6, r6, #8
 800f50e:	d1f8      	bne.n	800f502 <_strtoul_l.constprop.0+0xa>
 800f510:	2c2d      	cmp	r4, #45	; 0x2d
 800f512:	d130      	bne.n	800f576 <_strtoul_l.constprop.0+0x7e>
 800f514:	782c      	ldrb	r4, [r5, #0]
 800f516:	2601      	movs	r6, #1
 800f518:	1c85      	adds	r5, r0, #2
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d057      	beq.n	800f5ce <_strtoul_l.constprop.0+0xd6>
 800f51e:	2b10      	cmp	r3, #16
 800f520:	d109      	bne.n	800f536 <_strtoul_l.constprop.0+0x3e>
 800f522:	2c30      	cmp	r4, #48	; 0x30
 800f524:	d107      	bne.n	800f536 <_strtoul_l.constprop.0+0x3e>
 800f526:	7828      	ldrb	r0, [r5, #0]
 800f528:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f52c:	2858      	cmp	r0, #88	; 0x58
 800f52e:	d149      	bne.n	800f5c4 <_strtoul_l.constprop.0+0xcc>
 800f530:	786c      	ldrb	r4, [r5, #1]
 800f532:	2310      	movs	r3, #16
 800f534:	3502      	adds	r5, #2
 800f536:	f04f 38ff 	mov.w	r8, #4294967295
 800f53a:	2700      	movs	r7, #0
 800f53c:	fbb8 f8f3 	udiv	r8, r8, r3
 800f540:	fb03 f908 	mul.w	r9, r3, r8
 800f544:	ea6f 0909 	mvn.w	r9, r9
 800f548:	4638      	mov	r0, r7
 800f54a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f54e:	f1bc 0f09 	cmp.w	ip, #9
 800f552:	d815      	bhi.n	800f580 <_strtoul_l.constprop.0+0x88>
 800f554:	4664      	mov	r4, ip
 800f556:	42a3      	cmp	r3, r4
 800f558:	dd23      	ble.n	800f5a2 <_strtoul_l.constprop.0+0xaa>
 800f55a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f55e:	d007      	beq.n	800f570 <_strtoul_l.constprop.0+0x78>
 800f560:	4580      	cmp	r8, r0
 800f562:	d31b      	bcc.n	800f59c <_strtoul_l.constprop.0+0xa4>
 800f564:	d101      	bne.n	800f56a <_strtoul_l.constprop.0+0x72>
 800f566:	45a1      	cmp	r9, r4
 800f568:	db18      	blt.n	800f59c <_strtoul_l.constprop.0+0xa4>
 800f56a:	fb00 4003 	mla	r0, r0, r3, r4
 800f56e:	2701      	movs	r7, #1
 800f570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f574:	e7e9      	b.n	800f54a <_strtoul_l.constprop.0+0x52>
 800f576:	2c2b      	cmp	r4, #43	; 0x2b
 800f578:	bf04      	itt	eq
 800f57a:	782c      	ldrbeq	r4, [r5, #0]
 800f57c:	1c85      	addeq	r5, r0, #2
 800f57e:	e7cc      	b.n	800f51a <_strtoul_l.constprop.0+0x22>
 800f580:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f584:	f1bc 0f19 	cmp.w	ip, #25
 800f588:	d801      	bhi.n	800f58e <_strtoul_l.constprop.0+0x96>
 800f58a:	3c37      	subs	r4, #55	; 0x37
 800f58c:	e7e3      	b.n	800f556 <_strtoul_l.constprop.0+0x5e>
 800f58e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f592:	f1bc 0f19 	cmp.w	ip, #25
 800f596:	d804      	bhi.n	800f5a2 <_strtoul_l.constprop.0+0xaa>
 800f598:	3c57      	subs	r4, #87	; 0x57
 800f59a:	e7dc      	b.n	800f556 <_strtoul_l.constprop.0+0x5e>
 800f59c:	f04f 37ff 	mov.w	r7, #4294967295
 800f5a0:	e7e6      	b.n	800f570 <_strtoul_l.constprop.0+0x78>
 800f5a2:	1c7b      	adds	r3, r7, #1
 800f5a4:	d106      	bne.n	800f5b4 <_strtoul_l.constprop.0+0xbc>
 800f5a6:	2322      	movs	r3, #34	; 0x22
 800f5a8:	f8ce 3000 	str.w	r3, [lr]
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	b932      	cbnz	r2, 800f5be <_strtoul_l.constprop.0+0xc6>
 800f5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5b4:	b106      	cbz	r6, 800f5b8 <_strtoul_l.constprop.0+0xc0>
 800f5b6:	4240      	negs	r0, r0
 800f5b8:	2a00      	cmp	r2, #0
 800f5ba:	d0f9      	beq.n	800f5b0 <_strtoul_l.constprop.0+0xb8>
 800f5bc:	b107      	cbz	r7, 800f5c0 <_strtoul_l.constprop.0+0xc8>
 800f5be:	1e69      	subs	r1, r5, #1
 800f5c0:	6011      	str	r1, [r2, #0]
 800f5c2:	e7f5      	b.n	800f5b0 <_strtoul_l.constprop.0+0xb8>
 800f5c4:	2430      	movs	r4, #48	; 0x30
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1b5      	bne.n	800f536 <_strtoul_l.constprop.0+0x3e>
 800f5ca:	2308      	movs	r3, #8
 800f5cc:	e7b3      	b.n	800f536 <_strtoul_l.constprop.0+0x3e>
 800f5ce:	2c30      	cmp	r4, #48	; 0x30
 800f5d0:	d0a9      	beq.n	800f526 <_strtoul_l.constprop.0+0x2e>
 800f5d2:	230a      	movs	r3, #10
 800f5d4:	e7af      	b.n	800f536 <_strtoul_l.constprop.0+0x3e>
 800f5d6:	bf00      	nop
 800f5d8:	08012d75 	.word	0x08012d75

0800f5dc <_strtoul_r>:
 800f5dc:	f7ff bf8c 	b.w	800f4f8 <_strtoul_l.constprop.0>

0800f5e0 <__sfputc_r>:
 800f5e0:	6893      	ldr	r3, [r2, #8]
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	b410      	push	{r4}
 800f5e8:	6093      	str	r3, [r2, #8]
 800f5ea:	da08      	bge.n	800f5fe <__sfputc_r+0x1e>
 800f5ec:	6994      	ldr	r4, [r2, #24]
 800f5ee:	42a3      	cmp	r3, r4
 800f5f0:	db01      	blt.n	800f5f6 <__sfputc_r+0x16>
 800f5f2:	290a      	cmp	r1, #10
 800f5f4:	d103      	bne.n	800f5fe <__sfputc_r+0x1e>
 800f5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5fa:	f000 b935 	b.w	800f868 <__swbuf_r>
 800f5fe:	6813      	ldr	r3, [r2, #0]
 800f600:	1c58      	adds	r0, r3, #1
 800f602:	6010      	str	r0, [r2, #0]
 800f604:	7019      	strb	r1, [r3, #0]
 800f606:	4608      	mov	r0, r1
 800f608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <__sfputs_r>:
 800f60e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f610:	4606      	mov	r6, r0
 800f612:	460f      	mov	r7, r1
 800f614:	4614      	mov	r4, r2
 800f616:	18d5      	adds	r5, r2, r3
 800f618:	42ac      	cmp	r4, r5
 800f61a:	d101      	bne.n	800f620 <__sfputs_r+0x12>
 800f61c:	2000      	movs	r0, #0
 800f61e:	e007      	b.n	800f630 <__sfputs_r+0x22>
 800f620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f624:	463a      	mov	r2, r7
 800f626:	4630      	mov	r0, r6
 800f628:	f7ff ffda 	bl	800f5e0 <__sfputc_r>
 800f62c:	1c43      	adds	r3, r0, #1
 800f62e:	d1f3      	bne.n	800f618 <__sfputs_r+0xa>
 800f630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f634 <_vfiprintf_r>:
 800f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f638:	460d      	mov	r5, r1
 800f63a:	b09d      	sub	sp, #116	; 0x74
 800f63c:	4614      	mov	r4, r2
 800f63e:	4698      	mov	r8, r3
 800f640:	4606      	mov	r6, r0
 800f642:	b118      	cbz	r0, 800f64c <_vfiprintf_r+0x18>
 800f644:	6a03      	ldr	r3, [r0, #32]
 800f646:	b90b      	cbnz	r3, 800f64c <_vfiprintf_r+0x18>
 800f648:	f7fc ff00 	bl	800c44c <__sinit>
 800f64c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f64e:	07d9      	lsls	r1, r3, #31
 800f650:	d405      	bmi.n	800f65e <_vfiprintf_r+0x2a>
 800f652:	89ab      	ldrh	r3, [r5, #12]
 800f654:	059a      	lsls	r2, r3, #22
 800f656:	d402      	bmi.n	800f65e <_vfiprintf_r+0x2a>
 800f658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f65a:	f7fd f8c9 	bl	800c7f0 <__retarget_lock_acquire_recursive>
 800f65e:	89ab      	ldrh	r3, [r5, #12]
 800f660:	071b      	lsls	r3, r3, #28
 800f662:	d501      	bpl.n	800f668 <_vfiprintf_r+0x34>
 800f664:	692b      	ldr	r3, [r5, #16]
 800f666:	b99b      	cbnz	r3, 800f690 <_vfiprintf_r+0x5c>
 800f668:	4629      	mov	r1, r5
 800f66a:	4630      	mov	r0, r6
 800f66c:	f000 f93a 	bl	800f8e4 <__swsetup_r>
 800f670:	b170      	cbz	r0, 800f690 <_vfiprintf_r+0x5c>
 800f672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f674:	07dc      	lsls	r4, r3, #31
 800f676:	d504      	bpl.n	800f682 <_vfiprintf_r+0x4e>
 800f678:	f04f 30ff 	mov.w	r0, #4294967295
 800f67c:	b01d      	add	sp, #116	; 0x74
 800f67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	0598      	lsls	r0, r3, #22
 800f686:	d4f7      	bmi.n	800f678 <_vfiprintf_r+0x44>
 800f688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68a:	f7fd f8b2 	bl	800c7f2 <__retarget_lock_release_recursive>
 800f68e:	e7f3      	b.n	800f678 <_vfiprintf_r+0x44>
 800f690:	2300      	movs	r3, #0
 800f692:	9309      	str	r3, [sp, #36]	; 0x24
 800f694:	2320      	movs	r3, #32
 800f696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f69e:	2330      	movs	r3, #48	; 0x30
 800f6a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f854 <_vfiprintf_r+0x220>
 800f6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a8:	f04f 0901 	mov.w	r9, #1
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b4:	b10a      	cbz	r2, 800f6ba <_vfiprintf_r+0x86>
 800f6b6:	2a25      	cmp	r2, #37	; 0x25
 800f6b8:	d1f9      	bne.n	800f6ae <_vfiprintf_r+0x7a>
 800f6ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f6be:	d00b      	beq.n	800f6d8 <_vfiprintf_r+0xa4>
 800f6c0:	465b      	mov	r3, fp
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ffa1 	bl	800f60e <__sfputs_r>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	f000 80a9 	beq.w	800f824 <_vfiprintf_r+0x1f0>
 800f6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d4:	445a      	add	r2, fp
 800f6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 80a1 	beq.w	800f824 <_vfiprintf_r+0x1f0>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	f10a 0a01 	add.w	sl, sl, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	9307      	str	r3, [sp, #28]
 800f6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6fa:	4654      	mov	r4, sl
 800f6fc:	2205      	movs	r2, #5
 800f6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f702:	4854      	ldr	r0, [pc, #336]	; (800f854 <_vfiprintf_r+0x220>)
 800f704:	f7f0 fd74 	bl	80001f0 <memchr>
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	b9d8      	cbnz	r0, 800f744 <_vfiprintf_r+0x110>
 800f70c:	06d1      	lsls	r1, r2, #27
 800f70e:	bf44      	itt	mi
 800f710:	2320      	movmi	r3, #32
 800f712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f716:	0713      	lsls	r3, r2, #28
 800f718:	bf44      	itt	mi
 800f71a:	232b      	movmi	r3, #43	; 0x2b
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f720:	f89a 3000 	ldrb.w	r3, [sl]
 800f724:	2b2a      	cmp	r3, #42	; 0x2a
 800f726:	d015      	beq.n	800f754 <_vfiprintf_r+0x120>
 800f728:	9a07      	ldr	r2, [sp, #28]
 800f72a:	4654      	mov	r4, sl
 800f72c:	2000      	movs	r0, #0
 800f72e:	f04f 0c0a 	mov.w	ip, #10
 800f732:	4621      	mov	r1, r4
 800f734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f738:	3b30      	subs	r3, #48	; 0x30
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d94d      	bls.n	800f7da <_vfiprintf_r+0x1a6>
 800f73e:	b1b0      	cbz	r0, 800f76e <_vfiprintf_r+0x13a>
 800f740:	9207      	str	r2, [sp, #28]
 800f742:	e014      	b.n	800f76e <_vfiprintf_r+0x13a>
 800f744:	eba0 0308 	sub.w	r3, r0, r8
 800f748:	fa09 f303 	lsl.w	r3, r9, r3
 800f74c:	4313      	orrs	r3, r2
 800f74e:	9304      	str	r3, [sp, #16]
 800f750:	46a2      	mov	sl, r4
 800f752:	e7d2      	b.n	800f6fa <_vfiprintf_r+0xc6>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1d19      	adds	r1, r3, #4
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	9103      	str	r1, [sp, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bfbb      	ittet	lt
 800f760:	425b      	neglt	r3, r3
 800f762:	f042 0202 	orrlt.w	r2, r2, #2
 800f766:	9307      	strge	r3, [sp, #28]
 800f768:	9307      	strlt	r3, [sp, #28]
 800f76a:	bfb8      	it	lt
 800f76c:	9204      	strlt	r2, [sp, #16]
 800f76e:	7823      	ldrb	r3, [r4, #0]
 800f770:	2b2e      	cmp	r3, #46	; 0x2e
 800f772:	d10c      	bne.n	800f78e <_vfiprintf_r+0x15a>
 800f774:	7863      	ldrb	r3, [r4, #1]
 800f776:	2b2a      	cmp	r3, #42	; 0x2a
 800f778:	d134      	bne.n	800f7e4 <_vfiprintf_r+0x1b0>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	1d1a      	adds	r2, r3, #4
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	9203      	str	r2, [sp, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	bfb8      	it	lt
 800f786:	f04f 33ff 	movlt.w	r3, #4294967295
 800f78a:	3402      	adds	r4, #2
 800f78c:	9305      	str	r3, [sp, #20]
 800f78e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f864 <_vfiprintf_r+0x230>
 800f792:	7821      	ldrb	r1, [r4, #0]
 800f794:	2203      	movs	r2, #3
 800f796:	4650      	mov	r0, sl
 800f798:	f7f0 fd2a 	bl	80001f0 <memchr>
 800f79c:	b138      	cbz	r0, 800f7ae <_vfiprintf_r+0x17a>
 800f79e:	9b04      	ldr	r3, [sp, #16]
 800f7a0:	eba0 000a 	sub.w	r0, r0, sl
 800f7a4:	2240      	movs	r2, #64	; 0x40
 800f7a6:	4082      	lsls	r2, r0
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	3401      	adds	r4, #1
 800f7ac:	9304      	str	r3, [sp, #16]
 800f7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b2:	4829      	ldr	r0, [pc, #164]	; (800f858 <_vfiprintf_r+0x224>)
 800f7b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7b8:	2206      	movs	r2, #6
 800f7ba:	f7f0 fd19 	bl	80001f0 <memchr>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d03f      	beq.n	800f842 <_vfiprintf_r+0x20e>
 800f7c2:	4b26      	ldr	r3, [pc, #152]	; (800f85c <_vfiprintf_r+0x228>)
 800f7c4:	bb1b      	cbnz	r3, 800f80e <_vfiprintf_r+0x1da>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	3307      	adds	r3, #7
 800f7ca:	f023 0307 	bic.w	r3, r3, #7
 800f7ce:	3308      	adds	r3, #8
 800f7d0:	9303      	str	r3, [sp, #12]
 800f7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d4:	443b      	add	r3, r7
 800f7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d8:	e768      	b.n	800f6ac <_vfiprintf_r+0x78>
 800f7da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7de:	460c      	mov	r4, r1
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	e7a6      	b.n	800f732 <_vfiprintf_r+0xfe>
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	3401      	adds	r4, #1
 800f7e8:	9305      	str	r3, [sp, #20]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	f04f 0c0a 	mov.w	ip, #10
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f6:	3a30      	subs	r2, #48	; 0x30
 800f7f8:	2a09      	cmp	r2, #9
 800f7fa:	d903      	bls.n	800f804 <_vfiprintf_r+0x1d0>
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d0c6      	beq.n	800f78e <_vfiprintf_r+0x15a>
 800f800:	9105      	str	r1, [sp, #20]
 800f802:	e7c4      	b.n	800f78e <_vfiprintf_r+0x15a>
 800f804:	fb0c 2101 	mla	r1, ip, r1, r2
 800f808:	4604      	mov	r4, r0
 800f80a:	2301      	movs	r3, #1
 800f80c:	e7f0      	b.n	800f7f0 <_vfiprintf_r+0x1bc>
 800f80e:	ab03      	add	r3, sp, #12
 800f810:	9300      	str	r3, [sp, #0]
 800f812:	462a      	mov	r2, r5
 800f814:	4b12      	ldr	r3, [pc, #72]	; (800f860 <_vfiprintf_r+0x22c>)
 800f816:	a904      	add	r1, sp, #16
 800f818:	4630      	mov	r0, r6
 800f81a:	f7fc f9d7 	bl	800bbcc <_printf_float>
 800f81e:	4607      	mov	r7, r0
 800f820:	1c78      	adds	r0, r7, #1
 800f822:	d1d6      	bne.n	800f7d2 <_vfiprintf_r+0x19e>
 800f824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f826:	07d9      	lsls	r1, r3, #31
 800f828:	d405      	bmi.n	800f836 <_vfiprintf_r+0x202>
 800f82a:	89ab      	ldrh	r3, [r5, #12]
 800f82c:	059a      	lsls	r2, r3, #22
 800f82e:	d402      	bmi.n	800f836 <_vfiprintf_r+0x202>
 800f830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f832:	f7fc ffde 	bl	800c7f2 <__retarget_lock_release_recursive>
 800f836:	89ab      	ldrh	r3, [r5, #12]
 800f838:	065b      	lsls	r3, r3, #25
 800f83a:	f53f af1d 	bmi.w	800f678 <_vfiprintf_r+0x44>
 800f83e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f840:	e71c      	b.n	800f67c <_vfiprintf_r+0x48>
 800f842:	ab03      	add	r3, sp, #12
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	462a      	mov	r2, r5
 800f848:	4b05      	ldr	r3, [pc, #20]	; (800f860 <_vfiprintf_r+0x22c>)
 800f84a:	a904      	add	r1, sp, #16
 800f84c:	4630      	mov	r0, r6
 800f84e:	f7fc fc61 	bl	800c114 <_printf_i>
 800f852:	e7e4      	b.n	800f81e <_vfiprintf_r+0x1ea>
 800f854:	08012e75 	.word	0x08012e75
 800f858:	08012e7f 	.word	0x08012e7f
 800f85c:	0800bbcd 	.word	0x0800bbcd
 800f860:	0800f60f 	.word	0x0800f60f
 800f864:	08012e7b 	.word	0x08012e7b

0800f868 <__swbuf_r>:
 800f868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f86a:	460e      	mov	r6, r1
 800f86c:	4614      	mov	r4, r2
 800f86e:	4605      	mov	r5, r0
 800f870:	b118      	cbz	r0, 800f87a <__swbuf_r+0x12>
 800f872:	6a03      	ldr	r3, [r0, #32]
 800f874:	b90b      	cbnz	r3, 800f87a <__swbuf_r+0x12>
 800f876:	f7fc fde9 	bl	800c44c <__sinit>
 800f87a:	69a3      	ldr	r3, [r4, #24]
 800f87c:	60a3      	str	r3, [r4, #8]
 800f87e:	89a3      	ldrh	r3, [r4, #12]
 800f880:	071a      	lsls	r2, r3, #28
 800f882:	d525      	bpl.n	800f8d0 <__swbuf_r+0x68>
 800f884:	6923      	ldr	r3, [r4, #16]
 800f886:	b31b      	cbz	r3, 800f8d0 <__swbuf_r+0x68>
 800f888:	6823      	ldr	r3, [r4, #0]
 800f88a:	6922      	ldr	r2, [r4, #16]
 800f88c:	1a98      	subs	r0, r3, r2
 800f88e:	6963      	ldr	r3, [r4, #20]
 800f890:	b2f6      	uxtb	r6, r6
 800f892:	4283      	cmp	r3, r0
 800f894:	4637      	mov	r7, r6
 800f896:	dc04      	bgt.n	800f8a2 <__swbuf_r+0x3a>
 800f898:	4621      	mov	r1, r4
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7ff fc84 	bl	800f1a8 <_fflush_r>
 800f8a0:	b9e0      	cbnz	r0, 800f8dc <__swbuf_r+0x74>
 800f8a2:	68a3      	ldr	r3, [r4, #8]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	60a3      	str	r3, [r4, #8]
 800f8a8:	6823      	ldr	r3, [r4, #0]
 800f8aa:	1c5a      	adds	r2, r3, #1
 800f8ac:	6022      	str	r2, [r4, #0]
 800f8ae:	701e      	strb	r6, [r3, #0]
 800f8b0:	6962      	ldr	r2, [r4, #20]
 800f8b2:	1c43      	adds	r3, r0, #1
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d004      	beq.n	800f8c2 <__swbuf_r+0x5a>
 800f8b8:	89a3      	ldrh	r3, [r4, #12]
 800f8ba:	07db      	lsls	r3, r3, #31
 800f8bc:	d506      	bpl.n	800f8cc <__swbuf_r+0x64>
 800f8be:	2e0a      	cmp	r6, #10
 800f8c0:	d104      	bne.n	800f8cc <__swbuf_r+0x64>
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7ff fc6f 	bl	800f1a8 <_fflush_r>
 800f8ca:	b938      	cbnz	r0, 800f8dc <__swbuf_r+0x74>
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f000 f806 	bl	800f8e4 <__swsetup_r>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d0d5      	beq.n	800f888 <__swbuf_r+0x20>
 800f8dc:	f04f 37ff 	mov.w	r7, #4294967295
 800f8e0:	e7f4      	b.n	800f8cc <__swbuf_r+0x64>
	...

0800f8e4 <__swsetup_r>:
 800f8e4:	b538      	push	{r3, r4, r5, lr}
 800f8e6:	4b2a      	ldr	r3, [pc, #168]	; (800f990 <__swsetup_r+0xac>)
 800f8e8:	4605      	mov	r5, r0
 800f8ea:	6818      	ldr	r0, [r3, #0]
 800f8ec:	460c      	mov	r4, r1
 800f8ee:	b118      	cbz	r0, 800f8f8 <__swsetup_r+0x14>
 800f8f0:	6a03      	ldr	r3, [r0, #32]
 800f8f2:	b90b      	cbnz	r3, 800f8f8 <__swsetup_r+0x14>
 800f8f4:	f7fc fdaa 	bl	800c44c <__sinit>
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8fe:	0718      	lsls	r0, r3, #28
 800f900:	d422      	bmi.n	800f948 <__swsetup_r+0x64>
 800f902:	06d9      	lsls	r1, r3, #27
 800f904:	d407      	bmi.n	800f916 <__swsetup_r+0x32>
 800f906:	2309      	movs	r3, #9
 800f908:	602b      	str	r3, [r5, #0]
 800f90a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f90e:	81a3      	strh	r3, [r4, #12]
 800f910:	f04f 30ff 	mov.w	r0, #4294967295
 800f914:	e034      	b.n	800f980 <__swsetup_r+0x9c>
 800f916:	0758      	lsls	r0, r3, #29
 800f918:	d512      	bpl.n	800f940 <__swsetup_r+0x5c>
 800f91a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f91c:	b141      	cbz	r1, 800f930 <__swsetup_r+0x4c>
 800f91e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f922:	4299      	cmp	r1, r3
 800f924:	d002      	beq.n	800f92c <__swsetup_r+0x48>
 800f926:	4628      	mov	r0, r5
 800f928:	f7fd fe1c 	bl	800d564 <_free_r>
 800f92c:	2300      	movs	r3, #0
 800f92e:	6363      	str	r3, [r4, #52]	; 0x34
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f936:	81a3      	strh	r3, [r4, #12]
 800f938:	2300      	movs	r3, #0
 800f93a:	6063      	str	r3, [r4, #4]
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	6023      	str	r3, [r4, #0]
 800f940:	89a3      	ldrh	r3, [r4, #12]
 800f942:	f043 0308 	orr.w	r3, r3, #8
 800f946:	81a3      	strh	r3, [r4, #12]
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	b94b      	cbnz	r3, 800f960 <__swsetup_r+0x7c>
 800f94c:	89a3      	ldrh	r3, [r4, #12]
 800f94e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f956:	d003      	beq.n	800f960 <__swsetup_r+0x7c>
 800f958:	4621      	mov	r1, r4
 800f95a:	4628      	mov	r0, r5
 800f95c:	f000 f88c 	bl	800fa78 <__smakebuf_r>
 800f960:	89a0      	ldrh	r0, [r4, #12]
 800f962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f966:	f010 0301 	ands.w	r3, r0, #1
 800f96a:	d00a      	beq.n	800f982 <__swsetup_r+0x9e>
 800f96c:	2300      	movs	r3, #0
 800f96e:	60a3      	str	r3, [r4, #8]
 800f970:	6963      	ldr	r3, [r4, #20]
 800f972:	425b      	negs	r3, r3
 800f974:	61a3      	str	r3, [r4, #24]
 800f976:	6923      	ldr	r3, [r4, #16]
 800f978:	b943      	cbnz	r3, 800f98c <__swsetup_r+0xa8>
 800f97a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f97e:	d1c4      	bne.n	800f90a <__swsetup_r+0x26>
 800f980:	bd38      	pop	{r3, r4, r5, pc}
 800f982:	0781      	lsls	r1, r0, #30
 800f984:	bf58      	it	pl
 800f986:	6963      	ldrpl	r3, [r4, #20]
 800f988:	60a3      	str	r3, [r4, #8]
 800f98a:	e7f4      	b.n	800f976 <__swsetup_r+0x92>
 800f98c:	2000      	movs	r0, #0
 800f98e:	e7f7      	b.n	800f980 <__swsetup_r+0x9c>
 800f990:	2000020c 	.word	0x2000020c

0800f994 <_raise_r>:
 800f994:	291f      	cmp	r1, #31
 800f996:	b538      	push	{r3, r4, r5, lr}
 800f998:	4604      	mov	r4, r0
 800f99a:	460d      	mov	r5, r1
 800f99c:	d904      	bls.n	800f9a8 <_raise_r+0x14>
 800f99e:	2316      	movs	r3, #22
 800f9a0:	6003      	str	r3, [r0, #0]
 800f9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a6:	bd38      	pop	{r3, r4, r5, pc}
 800f9a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f9aa:	b112      	cbz	r2, 800f9b2 <_raise_r+0x1e>
 800f9ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9b0:	b94b      	cbnz	r3, 800f9c6 <_raise_r+0x32>
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 f830 	bl	800fa18 <_getpid_r>
 800f9b8:	462a      	mov	r2, r5
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	4620      	mov	r0, r4
 800f9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9c2:	f000 b817 	b.w	800f9f4 <_kill_r>
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d00a      	beq.n	800f9e0 <_raise_r+0x4c>
 800f9ca:	1c59      	adds	r1, r3, #1
 800f9cc:	d103      	bne.n	800f9d6 <_raise_r+0x42>
 800f9ce:	2316      	movs	r3, #22
 800f9d0:	6003      	str	r3, [r0, #0]
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	e7e7      	b.n	800f9a6 <_raise_r+0x12>
 800f9d6:	2400      	movs	r4, #0
 800f9d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f9dc:	4628      	mov	r0, r5
 800f9de:	4798      	blx	r3
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	e7e0      	b.n	800f9a6 <_raise_r+0x12>

0800f9e4 <raise>:
 800f9e4:	4b02      	ldr	r3, [pc, #8]	; (800f9f0 <raise+0xc>)
 800f9e6:	4601      	mov	r1, r0
 800f9e8:	6818      	ldr	r0, [r3, #0]
 800f9ea:	f7ff bfd3 	b.w	800f994 <_raise_r>
 800f9ee:	bf00      	nop
 800f9f0:	2000020c 	.word	0x2000020c

0800f9f4 <_kill_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	4d07      	ldr	r5, [pc, #28]	; (800fa14 <_kill_r+0x20>)
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	4608      	mov	r0, r1
 800f9fe:	4611      	mov	r1, r2
 800fa00:	602b      	str	r3, [r5, #0]
 800fa02:	f7f3 fd0d 	bl	8003420 <_kill>
 800fa06:	1c43      	adds	r3, r0, #1
 800fa08:	d102      	bne.n	800fa10 <_kill_r+0x1c>
 800fa0a:	682b      	ldr	r3, [r5, #0]
 800fa0c:	b103      	cbz	r3, 800fa10 <_kill_r+0x1c>
 800fa0e:	6023      	str	r3, [r4, #0]
 800fa10:	bd38      	pop	{r3, r4, r5, pc}
 800fa12:	bf00      	nop
 800fa14:	20001084 	.word	0x20001084

0800fa18 <_getpid_r>:
 800fa18:	f7f3 bcfa 	b.w	8003410 <_getpid>

0800fa1c <_malloc_usable_size_r>:
 800fa1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa20:	1f18      	subs	r0, r3, #4
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	bfbc      	itt	lt
 800fa26:	580b      	ldrlt	r3, [r1, r0]
 800fa28:	18c0      	addlt	r0, r0, r3
 800fa2a:	4770      	bx	lr

0800fa2c <__swhatbuf_r>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	460c      	mov	r4, r1
 800fa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa34:	2900      	cmp	r1, #0
 800fa36:	b096      	sub	sp, #88	; 0x58
 800fa38:	4615      	mov	r5, r2
 800fa3a:	461e      	mov	r6, r3
 800fa3c:	da0d      	bge.n	800fa5a <__swhatbuf_r+0x2e>
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa44:	f04f 0100 	mov.w	r1, #0
 800fa48:	bf0c      	ite	eq
 800fa4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fa4e:	2340      	movne	r3, #64	; 0x40
 800fa50:	2000      	movs	r0, #0
 800fa52:	6031      	str	r1, [r6, #0]
 800fa54:	602b      	str	r3, [r5, #0]
 800fa56:	b016      	add	sp, #88	; 0x58
 800fa58:	bd70      	pop	{r4, r5, r6, pc}
 800fa5a:	466a      	mov	r2, sp
 800fa5c:	f000 f848 	bl	800faf0 <_fstat_r>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	dbec      	blt.n	800fa3e <__swhatbuf_r+0x12>
 800fa64:	9901      	ldr	r1, [sp, #4]
 800fa66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fa6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fa6e:	4259      	negs	r1, r3
 800fa70:	4159      	adcs	r1, r3
 800fa72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa76:	e7eb      	b.n	800fa50 <__swhatbuf_r+0x24>

0800fa78 <__smakebuf_r>:
 800fa78:	898b      	ldrh	r3, [r1, #12]
 800fa7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa7c:	079d      	lsls	r5, r3, #30
 800fa7e:	4606      	mov	r6, r0
 800fa80:	460c      	mov	r4, r1
 800fa82:	d507      	bpl.n	800fa94 <__smakebuf_r+0x1c>
 800fa84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	6123      	str	r3, [r4, #16]
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	6163      	str	r3, [r4, #20]
 800fa90:	b002      	add	sp, #8
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	ab01      	add	r3, sp, #4
 800fa96:	466a      	mov	r2, sp
 800fa98:	f7ff ffc8 	bl	800fa2c <__swhatbuf_r>
 800fa9c:	9900      	ldr	r1, [sp, #0]
 800fa9e:	4605      	mov	r5, r0
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7fe f92b 	bl	800dcfc <_malloc_r>
 800faa6:	b948      	cbnz	r0, 800fabc <__smakebuf_r+0x44>
 800faa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faac:	059a      	lsls	r2, r3, #22
 800faae:	d4ef      	bmi.n	800fa90 <__smakebuf_r+0x18>
 800fab0:	f023 0303 	bic.w	r3, r3, #3
 800fab4:	f043 0302 	orr.w	r3, r3, #2
 800fab8:	81a3      	strh	r3, [r4, #12]
 800faba:	e7e3      	b.n	800fa84 <__smakebuf_r+0xc>
 800fabc:	89a3      	ldrh	r3, [r4, #12]
 800fabe:	6020      	str	r0, [r4, #0]
 800fac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fac4:	81a3      	strh	r3, [r4, #12]
 800fac6:	9b00      	ldr	r3, [sp, #0]
 800fac8:	6163      	str	r3, [r4, #20]
 800faca:	9b01      	ldr	r3, [sp, #4]
 800facc:	6120      	str	r0, [r4, #16]
 800face:	b15b      	cbz	r3, 800fae8 <__smakebuf_r+0x70>
 800fad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fad4:	4630      	mov	r0, r6
 800fad6:	f000 f81d 	bl	800fb14 <_isatty_r>
 800fada:	b128      	cbz	r0, 800fae8 <__smakebuf_r+0x70>
 800fadc:	89a3      	ldrh	r3, [r4, #12]
 800fade:	f023 0303 	bic.w	r3, r3, #3
 800fae2:	f043 0301 	orr.w	r3, r3, #1
 800fae6:	81a3      	strh	r3, [r4, #12]
 800fae8:	89a3      	ldrh	r3, [r4, #12]
 800faea:	431d      	orrs	r5, r3
 800faec:	81a5      	strh	r5, [r4, #12]
 800faee:	e7cf      	b.n	800fa90 <__smakebuf_r+0x18>

0800faf0 <_fstat_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4d07      	ldr	r5, [pc, #28]	; (800fb10 <_fstat_r+0x20>)
 800faf4:	2300      	movs	r3, #0
 800faf6:	4604      	mov	r4, r0
 800faf8:	4608      	mov	r0, r1
 800fafa:	4611      	mov	r1, r2
 800fafc:	602b      	str	r3, [r5, #0]
 800fafe:	f7f3 fcee 	bl	80034de <_fstat>
 800fb02:	1c43      	adds	r3, r0, #1
 800fb04:	d102      	bne.n	800fb0c <_fstat_r+0x1c>
 800fb06:	682b      	ldr	r3, [r5, #0]
 800fb08:	b103      	cbz	r3, 800fb0c <_fstat_r+0x1c>
 800fb0a:	6023      	str	r3, [r4, #0]
 800fb0c:	bd38      	pop	{r3, r4, r5, pc}
 800fb0e:	bf00      	nop
 800fb10:	20001084 	.word	0x20001084

0800fb14 <_isatty_r>:
 800fb14:	b538      	push	{r3, r4, r5, lr}
 800fb16:	4d06      	ldr	r5, [pc, #24]	; (800fb30 <_isatty_r+0x1c>)
 800fb18:	2300      	movs	r3, #0
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	4608      	mov	r0, r1
 800fb1e:	602b      	str	r3, [r5, #0]
 800fb20:	f7f3 fced 	bl	80034fe <_isatty>
 800fb24:	1c43      	adds	r3, r0, #1
 800fb26:	d102      	bne.n	800fb2e <_isatty_r+0x1a>
 800fb28:	682b      	ldr	r3, [r5, #0]
 800fb2a:	b103      	cbz	r3, 800fb2e <_isatty_r+0x1a>
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}
 800fb30:	20001084 	.word	0x20001084

0800fb34 <atan2>:
 800fb34:	f000 bbe0 	b.w	80102f8 <__ieee754_atan2>

0800fb38 <sqrt>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	ed2d 8b02 	vpush	{d8}
 800fb3e:	ec55 4b10 	vmov	r4, r5, d0
 800fb42:	f000 f8d1 	bl	800fce8 <__ieee754_sqrt>
 800fb46:	4622      	mov	r2, r4
 800fb48:	462b      	mov	r3, r5
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	eeb0 8a40 	vmov.f32	s16, s0
 800fb52:	eef0 8a60 	vmov.f32	s17, s1
 800fb56:	f7f0 fff9 	bl	8000b4c <__aeabi_dcmpun>
 800fb5a:	b990      	cbnz	r0, 800fb82 <sqrt+0x4a>
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	2300      	movs	r3, #0
 800fb60:	4620      	mov	r0, r4
 800fb62:	4629      	mov	r1, r5
 800fb64:	f7f0 ffca 	bl	8000afc <__aeabi_dcmplt>
 800fb68:	b158      	cbz	r0, 800fb82 <sqrt+0x4a>
 800fb6a:	f7fc fe17 	bl	800c79c <__errno>
 800fb6e:	2321      	movs	r3, #33	; 0x21
 800fb70:	6003      	str	r3, [r0, #0]
 800fb72:	2200      	movs	r2, #0
 800fb74:	2300      	movs	r3, #0
 800fb76:	4610      	mov	r0, r2
 800fb78:	4619      	mov	r1, r3
 800fb7a:	f7f0 fe77 	bl	800086c <__aeabi_ddiv>
 800fb7e:	ec41 0b18 	vmov	d8, r0, r1
 800fb82:	eeb0 0a48 	vmov.f32	s0, s16
 800fb86:	eef0 0a68 	vmov.f32	s1, s17
 800fb8a:	ecbd 8b02 	vpop	{d8}
 800fb8e:	bd38      	pop	{r3, r4, r5, pc}

0800fb90 <cos>:
 800fb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb92:	ec53 2b10 	vmov	r2, r3, d0
 800fb96:	4826      	ldr	r0, [pc, #152]	; (800fc30 <cos+0xa0>)
 800fb98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fb9c:	4281      	cmp	r1, r0
 800fb9e:	dc06      	bgt.n	800fbae <cos+0x1e>
 800fba0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fc28 <cos+0x98>
 800fba4:	b005      	add	sp, #20
 800fba6:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbaa:	f000 ba1d 	b.w	800ffe8 <__kernel_cos>
 800fbae:	4821      	ldr	r0, [pc, #132]	; (800fc34 <cos+0xa4>)
 800fbb0:	4281      	cmp	r1, r0
 800fbb2:	dd09      	ble.n	800fbc8 <cos+0x38>
 800fbb4:	ee10 0a10 	vmov	r0, s0
 800fbb8:	4619      	mov	r1, r3
 800fbba:	f7f0 fb75 	bl	80002a8 <__aeabi_dsub>
 800fbbe:	ec41 0b10 	vmov	d0, r0, r1
 800fbc2:	b005      	add	sp, #20
 800fbc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbc8:	4668      	mov	r0, sp
 800fbca:	f000 fc5d 	bl	8010488 <__ieee754_rem_pio2>
 800fbce:	f000 0003 	and.w	r0, r0, #3
 800fbd2:	2801      	cmp	r0, #1
 800fbd4:	d00b      	beq.n	800fbee <cos+0x5e>
 800fbd6:	2802      	cmp	r0, #2
 800fbd8:	d016      	beq.n	800fc08 <cos+0x78>
 800fbda:	b9e0      	cbnz	r0, 800fc16 <cos+0x86>
 800fbdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbe0:	ed9d 0b00 	vldr	d0, [sp]
 800fbe4:	f000 fa00 	bl	800ffe8 <__kernel_cos>
 800fbe8:	ec51 0b10 	vmov	r0, r1, d0
 800fbec:	e7e7      	b.n	800fbbe <cos+0x2e>
 800fbee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbf2:	ed9d 0b00 	vldr	d0, [sp]
 800fbf6:	f000 fabf 	bl	8010178 <__kernel_sin>
 800fbfa:	ec53 2b10 	vmov	r2, r3, d0
 800fbfe:	ee10 0a10 	vmov	r0, s0
 800fc02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fc06:	e7da      	b.n	800fbbe <cos+0x2e>
 800fc08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc0c:	ed9d 0b00 	vldr	d0, [sp]
 800fc10:	f000 f9ea 	bl	800ffe8 <__kernel_cos>
 800fc14:	e7f1      	b.n	800fbfa <cos+0x6a>
 800fc16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc1a:	ed9d 0b00 	vldr	d0, [sp]
 800fc1e:	2001      	movs	r0, #1
 800fc20:	f000 faaa 	bl	8010178 <__kernel_sin>
 800fc24:	e7e0      	b.n	800fbe8 <cos+0x58>
 800fc26:	bf00      	nop
	...
 800fc30:	3fe921fb 	.word	0x3fe921fb
 800fc34:	7fefffff 	.word	0x7fefffff

0800fc38 <sin>:
 800fc38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc3a:	ec53 2b10 	vmov	r2, r3, d0
 800fc3e:	4828      	ldr	r0, [pc, #160]	; (800fce0 <sin+0xa8>)
 800fc40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc44:	4281      	cmp	r1, r0
 800fc46:	dc07      	bgt.n	800fc58 <sin+0x20>
 800fc48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800fcd8 <sin+0xa0>
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	b005      	add	sp, #20
 800fc50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc54:	f000 ba90 	b.w	8010178 <__kernel_sin>
 800fc58:	4822      	ldr	r0, [pc, #136]	; (800fce4 <sin+0xac>)
 800fc5a:	4281      	cmp	r1, r0
 800fc5c:	dd09      	ble.n	800fc72 <sin+0x3a>
 800fc5e:	ee10 0a10 	vmov	r0, s0
 800fc62:	4619      	mov	r1, r3
 800fc64:	f7f0 fb20 	bl	80002a8 <__aeabi_dsub>
 800fc68:	ec41 0b10 	vmov	d0, r0, r1
 800fc6c:	b005      	add	sp, #20
 800fc6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc72:	4668      	mov	r0, sp
 800fc74:	f000 fc08 	bl	8010488 <__ieee754_rem_pio2>
 800fc78:	f000 0003 	and.w	r0, r0, #3
 800fc7c:	2801      	cmp	r0, #1
 800fc7e:	d00c      	beq.n	800fc9a <sin+0x62>
 800fc80:	2802      	cmp	r0, #2
 800fc82:	d011      	beq.n	800fca8 <sin+0x70>
 800fc84:	b9f0      	cbnz	r0, 800fcc4 <sin+0x8c>
 800fc86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc8a:	ed9d 0b00 	vldr	d0, [sp]
 800fc8e:	2001      	movs	r0, #1
 800fc90:	f000 fa72 	bl	8010178 <__kernel_sin>
 800fc94:	ec51 0b10 	vmov	r0, r1, d0
 800fc98:	e7e6      	b.n	800fc68 <sin+0x30>
 800fc9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc9e:	ed9d 0b00 	vldr	d0, [sp]
 800fca2:	f000 f9a1 	bl	800ffe8 <__kernel_cos>
 800fca6:	e7f5      	b.n	800fc94 <sin+0x5c>
 800fca8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcac:	ed9d 0b00 	vldr	d0, [sp]
 800fcb0:	2001      	movs	r0, #1
 800fcb2:	f000 fa61 	bl	8010178 <__kernel_sin>
 800fcb6:	ec53 2b10 	vmov	r2, r3, d0
 800fcba:	ee10 0a10 	vmov	r0, s0
 800fcbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fcc2:	e7d1      	b.n	800fc68 <sin+0x30>
 800fcc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcc8:	ed9d 0b00 	vldr	d0, [sp]
 800fccc:	f000 f98c 	bl	800ffe8 <__kernel_cos>
 800fcd0:	e7f1      	b.n	800fcb6 <sin+0x7e>
 800fcd2:	bf00      	nop
 800fcd4:	f3af 8000 	nop.w
	...
 800fce0:	3fe921fb 	.word	0x3fe921fb
 800fce4:	7fefffff 	.word	0x7fefffff

0800fce8 <__ieee754_sqrt>:
 800fce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcec:	ec55 4b10 	vmov	r4, r5, d0
 800fcf0:	4e67      	ldr	r6, [pc, #412]	; (800fe90 <__ieee754_sqrt+0x1a8>)
 800fcf2:	43ae      	bics	r6, r5
 800fcf4:	ee10 0a10 	vmov	r0, s0
 800fcf8:	ee10 2a10 	vmov	r2, s0
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	462b      	mov	r3, r5
 800fd00:	d10d      	bne.n	800fd1e <__ieee754_sqrt+0x36>
 800fd02:	f7f0 fc89 	bl	8000618 <__aeabi_dmul>
 800fd06:	4602      	mov	r2, r0
 800fd08:	460b      	mov	r3, r1
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	f7f0 facd 	bl	80002ac <__adddf3>
 800fd12:	4604      	mov	r4, r0
 800fd14:	460d      	mov	r5, r1
 800fd16:	ec45 4b10 	vmov	d0, r4, r5
 800fd1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1e:	2d00      	cmp	r5, #0
 800fd20:	dc0b      	bgt.n	800fd3a <__ieee754_sqrt+0x52>
 800fd22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd26:	4326      	orrs	r6, r4
 800fd28:	d0f5      	beq.n	800fd16 <__ieee754_sqrt+0x2e>
 800fd2a:	b135      	cbz	r5, 800fd3a <__ieee754_sqrt+0x52>
 800fd2c:	f7f0 fabc 	bl	80002a8 <__aeabi_dsub>
 800fd30:	4602      	mov	r2, r0
 800fd32:	460b      	mov	r3, r1
 800fd34:	f7f0 fd9a 	bl	800086c <__aeabi_ddiv>
 800fd38:	e7eb      	b.n	800fd12 <__ieee754_sqrt+0x2a>
 800fd3a:	1509      	asrs	r1, r1, #20
 800fd3c:	f000 808d 	beq.w	800fe5a <__ieee754_sqrt+0x172>
 800fd40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd44:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fd48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd4c:	07c9      	lsls	r1, r1, #31
 800fd4e:	bf5c      	itt	pl
 800fd50:	005b      	lslpl	r3, r3, #1
 800fd52:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fd56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd5a:	bf58      	it	pl
 800fd5c:	0052      	lslpl	r2, r2, #1
 800fd5e:	2500      	movs	r5, #0
 800fd60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd64:	1076      	asrs	r6, r6, #1
 800fd66:	0052      	lsls	r2, r2, #1
 800fd68:	f04f 0e16 	mov.w	lr, #22
 800fd6c:	46ac      	mov	ip, r5
 800fd6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd72:	eb0c 0001 	add.w	r0, ip, r1
 800fd76:	4298      	cmp	r0, r3
 800fd78:	bfde      	ittt	le
 800fd7a:	1a1b      	suble	r3, r3, r0
 800fd7c:	eb00 0c01 	addle.w	ip, r0, r1
 800fd80:	186d      	addle	r5, r5, r1
 800fd82:	005b      	lsls	r3, r3, #1
 800fd84:	f1be 0e01 	subs.w	lr, lr, #1
 800fd88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd8c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd94:	d1ed      	bne.n	800fd72 <__ieee754_sqrt+0x8a>
 800fd96:	4674      	mov	r4, lr
 800fd98:	2720      	movs	r7, #32
 800fd9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fd9e:	4563      	cmp	r3, ip
 800fda0:	eb01 000e 	add.w	r0, r1, lr
 800fda4:	dc02      	bgt.n	800fdac <__ieee754_sqrt+0xc4>
 800fda6:	d113      	bne.n	800fdd0 <__ieee754_sqrt+0xe8>
 800fda8:	4290      	cmp	r0, r2
 800fdaa:	d811      	bhi.n	800fdd0 <__ieee754_sqrt+0xe8>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	eb00 0e01 	add.w	lr, r0, r1
 800fdb2:	da57      	bge.n	800fe64 <__ieee754_sqrt+0x17c>
 800fdb4:	f1be 0f00 	cmp.w	lr, #0
 800fdb8:	db54      	blt.n	800fe64 <__ieee754_sqrt+0x17c>
 800fdba:	f10c 0801 	add.w	r8, ip, #1
 800fdbe:	eba3 030c 	sub.w	r3, r3, ip
 800fdc2:	4290      	cmp	r0, r2
 800fdc4:	bf88      	it	hi
 800fdc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fdca:	1a12      	subs	r2, r2, r0
 800fdcc:	440c      	add	r4, r1
 800fdce:	46c4      	mov	ip, r8
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	3f01      	subs	r7, #1
 800fdd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fdd8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fddc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fde0:	d1dd      	bne.n	800fd9e <__ieee754_sqrt+0xb6>
 800fde2:	4313      	orrs	r3, r2
 800fde4:	d01b      	beq.n	800fe1e <__ieee754_sqrt+0x136>
 800fde6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fe94 <__ieee754_sqrt+0x1ac>
 800fdea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fe98 <__ieee754_sqrt+0x1b0>
 800fdee:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdf2:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdf6:	f7f0 fa57 	bl	80002a8 <__aeabi_dsub>
 800fdfa:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4640      	mov	r0, r8
 800fe04:	4649      	mov	r1, r9
 800fe06:	f7f0 fe83 	bl	8000b10 <__aeabi_dcmple>
 800fe0a:	b140      	cbz	r0, 800fe1e <__ieee754_sqrt+0x136>
 800fe0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fe10:	e9da 0100 	ldrd	r0, r1, [sl]
 800fe14:	e9db 2300 	ldrd	r2, r3, [fp]
 800fe18:	d126      	bne.n	800fe68 <__ieee754_sqrt+0x180>
 800fe1a:	3501      	adds	r5, #1
 800fe1c:	463c      	mov	r4, r7
 800fe1e:	106a      	asrs	r2, r5, #1
 800fe20:	0863      	lsrs	r3, r4, #1
 800fe22:	07e9      	lsls	r1, r5, #31
 800fe24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fe28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fe2c:	bf48      	it	mi
 800fe2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fe32:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fe36:	461c      	mov	r4, r3
 800fe38:	e76d      	b.n	800fd16 <__ieee754_sqrt+0x2e>
 800fe3a:	0ad3      	lsrs	r3, r2, #11
 800fe3c:	3815      	subs	r0, #21
 800fe3e:	0552      	lsls	r2, r2, #21
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0fa      	beq.n	800fe3a <__ieee754_sqrt+0x152>
 800fe44:	02dc      	lsls	r4, r3, #11
 800fe46:	d50a      	bpl.n	800fe5e <__ieee754_sqrt+0x176>
 800fe48:	f1c1 0420 	rsb	r4, r1, #32
 800fe4c:	fa22 f404 	lsr.w	r4, r2, r4
 800fe50:	1e4d      	subs	r5, r1, #1
 800fe52:	408a      	lsls	r2, r1
 800fe54:	4323      	orrs	r3, r4
 800fe56:	1b41      	subs	r1, r0, r5
 800fe58:	e772      	b.n	800fd40 <__ieee754_sqrt+0x58>
 800fe5a:	4608      	mov	r0, r1
 800fe5c:	e7f0      	b.n	800fe40 <__ieee754_sqrt+0x158>
 800fe5e:	005b      	lsls	r3, r3, #1
 800fe60:	3101      	adds	r1, #1
 800fe62:	e7ef      	b.n	800fe44 <__ieee754_sqrt+0x15c>
 800fe64:	46e0      	mov	r8, ip
 800fe66:	e7aa      	b.n	800fdbe <__ieee754_sqrt+0xd6>
 800fe68:	f7f0 fa20 	bl	80002ac <__adddf3>
 800fe6c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	4640      	mov	r0, r8
 800fe76:	4649      	mov	r1, r9
 800fe78:	f7f0 fe40 	bl	8000afc <__aeabi_dcmplt>
 800fe7c:	b120      	cbz	r0, 800fe88 <__ieee754_sqrt+0x1a0>
 800fe7e:	1ca0      	adds	r0, r4, #2
 800fe80:	bf08      	it	eq
 800fe82:	3501      	addeq	r5, #1
 800fe84:	3402      	adds	r4, #2
 800fe86:	e7ca      	b.n	800fe1e <__ieee754_sqrt+0x136>
 800fe88:	3401      	adds	r4, #1
 800fe8a:	f024 0401 	bic.w	r4, r4, #1
 800fe8e:	e7c6      	b.n	800fe1e <__ieee754_sqrt+0x136>
 800fe90:	7ff00000 	.word	0x7ff00000
 800fe94:	20000210 	.word	0x20000210
 800fe98:	20000218 	.word	0x20000218
 800fe9c:	00000000 	.word	0x00000000

0800fea0 <floor>:
 800fea0:	ec51 0b10 	vmov	r0, r1, d0
 800fea4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800feb0:	2e13      	cmp	r6, #19
 800feb2:	ee10 5a10 	vmov	r5, s0
 800feb6:	ee10 8a10 	vmov	r8, s0
 800feba:	460c      	mov	r4, r1
 800febc:	dc31      	bgt.n	800ff22 <floor+0x82>
 800febe:	2e00      	cmp	r6, #0
 800fec0:	da14      	bge.n	800feec <floor+0x4c>
 800fec2:	a333      	add	r3, pc, #204	; (adr r3, 800ff90 <floor+0xf0>)
 800fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec8:	f7f0 f9f0 	bl	80002ac <__adddf3>
 800fecc:	2200      	movs	r2, #0
 800fece:	2300      	movs	r3, #0
 800fed0:	f7f0 fe32 	bl	8000b38 <__aeabi_dcmpgt>
 800fed4:	b138      	cbz	r0, 800fee6 <floor+0x46>
 800fed6:	2c00      	cmp	r4, #0
 800fed8:	da53      	bge.n	800ff82 <floor+0xe2>
 800feda:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800fede:	4325      	orrs	r5, r4
 800fee0:	d052      	beq.n	800ff88 <floor+0xe8>
 800fee2:	4c2d      	ldr	r4, [pc, #180]	; (800ff98 <floor+0xf8>)
 800fee4:	2500      	movs	r5, #0
 800fee6:	4621      	mov	r1, r4
 800fee8:	4628      	mov	r0, r5
 800feea:	e024      	b.n	800ff36 <floor+0x96>
 800feec:	4f2b      	ldr	r7, [pc, #172]	; (800ff9c <floor+0xfc>)
 800feee:	4137      	asrs	r7, r6
 800fef0:	ea01 0307 	and.w	r3, r1, r7
 800fef4:	4303      	orrs	r3, r0
 800fef6:	d01e      	beq.n	800ff36 <floor+0x96>
 800fef8:	a325      	add	r3, pc, #148	; (adr r3, 800ff90 <floor+0xf0>)
 800fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefe:	f7f0 f9d5 	bl	80002ac <__adddf3>
 800ff02:	2200      	movs	r2, #0
 800ff04:	2300      	movs	r3, #0
 800ff06:	f7f0 fe17 	bl	8000b38 <__aeabi_dcmpgt>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d0eb      	beq.n	800fee6 <floor+0x46>
 800ff0e:	2c00      	cmp	r4, #0
 800ff10:	bfbe      	ittt	lt
 800ff12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ff16:	4133      	asrlt	r3, r6
 800ff18:	18e4      	addlt	r4, r4, r3
 800ff1a:	ea24 0407 	bic.w	r4, r4, r7
 800ff1e:	2500      	movs	r5, #0
 800ff20:	e7e1      	b.n	800fee6 <floor+0x46>
 800ff22:	2e33      	cmp	r6, #51	; 0x33
 800ff24:	dd0b      	ble.n	800ff3e <floor+0x9e>
 800ff26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ff2a:	d104      	bne.n	800ff36 <floor+0x96>
 800ff2c:	ee10 2a10 	vmov	r2, s0
 800ff30:	460b      	mov	r3, r1
 800ff32:	f7f0 f9bb 	bl	80002ac <__adddf3>
 800ff36:	ec41 0b10 	vmov	d0, r0, r1
 800ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ff42:	f04f 37ff 	mov.w	r7, #4294967295
 800ff46:	40df      	lsrs	r7, r3
 800ff48:	4238      	tst	r0, r7
 800ff4a:	d0f4      	beq.n	800ff36 <floor+0x96>
 800ff4c:	a310      	add	r3, pc, #64	; (adr r3, 800ff90 <floor+0xf0>)
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	f7f0 f9ab 	bl	80002ac <__adddf3>
 800ff56:	2200      	movs	r2, #0
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f7f0 fded 	bl	8000b38 <__aeabi_dcmpgt>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d0c1      	beq.n	800fee6 <floor+0x46>
 800ff62:	2c00      	cmp	r4, #0
 800ff64:	da0a      	bge.n	800ff7c <floor+0xdc>
 800ff66:	2e14      	cmp	r6, #20
 800ff68:	d101      	bne.n	800ff6e <floor+0xce>
 800ff6a:	3401      	adds	r4, #1
 800ff6c:	e006      	b.n	800ff7c <floor+0xdc>
 800ff6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ff72:	2301      	movs	r3, #1
 800ff74:	40b3      	lsls	r3, r6
 800ff76:	441d      	add	r5, r3
 800ff78:	45a8      	cmp	r8, r5
 800ff7a:	d8f6      	bhi.n	800ff6a <floor+0xca>
 800ff7c:	ea25 0507 	bic.w	r5, r5, r7
 800ff80:	e7b1      	b.n	800fee6 <floor+0x46>
 800ff82:	2500      	movs	r5, #0
 800ff84:	462c      	mov	r4, r5
 800ff86:	e7ae      	b.n	800fee6 <floor+0x46>
 800ff88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ff8c:	e7ab      	b.n	800fee6 <floor+0x46>
 800ff8e:	bf00      	nop
 800ff90:	8800759c 	.word	0x8800759c
 800ff94:	7e37e43c 	.word	0x7e37e43c
 800ff98:	bff00000 	.word	0xbff00000
 800ff9c:	000fffff 	.word	0x000fffff

0800ffa0 <roundf>:
 800ffa0:	ee10 0a10 	vmov	r0, s0
 800ffa4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ffa8:	3a7f      	subs	r2, #127	; 0x7f
 800ffaa:	2a16      	cmp	r2, #22
 800ffac:	dc15      	bgt.n	800ffda <roundf+0x3a>
 800ffae:	2a00      	cmp	r2, #0
 800ffb0:	da08      	bge.n	800ffc4 <roundf+0x24>
 800ffb2:	3201      	adds	r2, #1
 800ffb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ffb8:	d101      	bne.n	800ffbe <roundf+0x1e>
 800ffba:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ffbe:	ee00 3a10 	vmov	s0, r3
 800ffc2:	4770      	bx	lr
 800ffc4:	4907      	ldr	r1, [pc, #28]	; (800ffe4 <roundf+0x44>)
 800ffc6:	4111      	asrs	r1, r2
 800ffc8:	4208      	tst	r0, r1
 800ffca:	d0fa      	beq.n	800ffc2 <roundf+0x22>
 800ffcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ffd0:	4113      	asrs	r3, r2
 800ffd2:	4403      	add	r3, r0
 800ffd4:	ea23 0301 	bic.w	r3, r3, r1
 800ffd8:	e7f1      	b.n	800ffbe <roundf+0x1e>
 800ffda:	2a80      	cmp	r2, #128	; 0x80
 800ffdc:	d1f1      	bne.n	800ffc2 <roundf+0x22>
 800ffde:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ffe2:	4770      	bx	lr
 800ffe4:	007fffff 	.word	0x007fffff

0800ffe8 <__kernel_cos>:
 800ffe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	ec57 6b10 	vmov	r6, r7, d0
 800fff0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fff4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fff8:	ed8d 1b00 	vstr	d1, [sp]
 800fffc:	da07      	bge.n	801000e <__kernel_cos+0x26>
 800fffe:	ee10 0a10 	vmov	r0, s0
 8010002:	4639      	mov	r1, r7
 8010004:	f7f0 fdb8 	bl	8000b78 <__aeabi_d2iz>
 8010008:	2800      	cmp	r0, #0
 801000a:	f000 8088 	beq.w	801011e <__kernel_cos+0x136>
 801000e:	4632      	mov	r2, r6
 8010010:	463b      	mov	r3, r7
 8010012:	4630      	mov	r0, r6
 8010014:	4639      	mov	r1, r7
 8010016:	f7f0 faff 	bl	8000618 <__aeabi_dmul>
 801001a:	4b51      	ldr	r3, [pc, #324]	; (8010160 <__kernel_cos+0x178>)
 801001c:	2200      	movs	r2, #0
 801001e:	4604      	mov	r4, r0
 8010020:	460d      	mov	r5, r1
 8010022:	f7f0 faf9 	bl	8000618 <__aeabi_dmul>
 8010026:	a340      	add	r3, pc, #256	; (adr r3, 8010128 <__kernel_cos+0x140>)
 8010028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002c:	4682      	mov	sl, r0
 801002e:	468b      	mov	fp, r1
 8010030:	4620      	mov	r0, r4
 8010032:	4629      	mov	r1, r5
 8010034:	f7f0 faf0 	bl	8000618 <__aeabi_dmul>
 8010038:	a33d      	add	r3, pc, #244	; (adr r3, 8010130 <__kernel_cos+0x148>)
 801003a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003e:	f7f0 f935 	bl	80002ac <__adddf3>
 8010042:	4622      	mov	r2, r4
 8010044:	462b      	mov	r3, r5
 8010046:	f7f0 fae7 	bl	8000618 <__aeabi_dmul>
 801004a:	a33b      	add	r3, pc, #236	; (adr r3, 8010138 <__kernel_cos+0x150>)
 801004c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010050:	f7f0 f92a 	bl	80002a8 <__aeabi_dsub>
 8010054:	4622      	mov	r2, r4
 8010056:	462b      	mov	r3, r5
 8010058:	f7f0 fade 	bl	8000618 <__aeabi_dmul>
 801005c:	a338      	add	r3, pc, #224	; (adr r3, 8010140 <__kernel_cos+0x158>)
 801005e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010062:	f7f0 f923 	bl	80002ac <__adddf3>
 8010066:	4622      	mov	r2, r4
 8010068:	462b      	mov	r3, r5
 801006a:	f7f0 fad5 	bl	8000618 <__aeabi_dmul>
 801006e:	a336      	add	r3, pc, #216	; (adr r3, 8010148 <__kernel_cos+0x160>)
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	f7f0 f918 	bl	80002a8 <__aeabi_dsub>
 8010078:	4622      	mov	r2, r4
 801007a:	462b      	mov	r3, r5
 801007c:	f7f0 facc 	bl	8000618 <__aeabi_dmul>
 8010080:	a333      	add	r3, pc, #204	; (adr r3, 8010150 <__kernel_cos+0x168>)
 8010082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010086:	f7f0 f911 	bl	80002ac <__adddf3>
 801008a:	4622      	mov	r2, r4
 801008c:	462b      	mov	r3, r5
 801008e:	f7f0 fac3 	bl	8000618 <__aeabi_dmul>
 8010092:	4622      	mov	r2, r4
 8010094:	462b      	mov	r3, r5
 8010096:	f7f0 fabf 	bl	8000618 <__aeabi_dmul>
 801009a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801009e:	4604      	mov	r4, r0
 80100a0:	460d      	mov	r5, r1
 80100a2:	4630      	mov	r0, r6
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 fab7 	bl	8000618 <__aeabi_dmul>
 80100aa:	460b      	mov	r3, r1
 80100ac:	4602      	mov	r2, r0
 80100ae:	4629      	mov	r1, r5
 80100b0:	4620      	mov	r0, r4
 80100b2:	f7f0 f8f9 	bl	80002a8 <__aeabi_dsub>
 80100b6:	4b2b      	ldr	r3, [pc, #172]	; (8010164 <__kernel_cos+0x17c>)
 80100b8:	4598      	cmp	r8, r3
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	dc10      	bgt.n	80100e2 <__kernel_cos+0xfa>
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	4650      	mov	r0, sl
 80100c6:	4659      	mov	r1, fp
 80100c8:	f7f0 f8ee 	bl	80002a8 <__aeabi_dsub>
 80100cc:	460b      	mov	r3, r1
 80100ce:	4926      	ldr	r1, [pc, #152]	; (8010168 <__kernel_cos+0x180>)
 80100d0:	4602      	mov	r2, r0
 80100d2:	2000      	movs	r0, #0
 80100d4:	f7f0 f8e8 	bl	80002a8 <__aeabi_dsub>
 80100d8:	ec41 0b10 	vmov	d0, r0, r1
 80100dc:	b003      	add	sp, #12
 80100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e2:	4b22      	ldr	r3, [pc, #136]	; (801016c <__kernel_cos+0x184>)
 80100e4:	4920      	ldr	r1, [pc, #128]	; (8010168 <__kernel_cos+0x180>)
 80100e6:	4598      	cmp	r8, r3
 80100e8:	bfcc      	ite	gt
 80100ea:	4d21      	ldrgt	r5, [pc, #132]	; (8010170 <__kernel_cos+0x188>)
 80100ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80100f0:	2400      	movs	r4, #0
 80100f2:	4622      	mov	r2, r4
 80100f4:	462b      	mov	r3, r5
 80100f6:	2000      	movs	r0, #0
 80100f8:	f7f0 f8d6 	bl	80002a8 <__aeabi_dsub>
 80100fc:	4622      	mov	r2, r4
 80100fe:	4680      	mov	r8, r0
 8010100:	4689      	mov	r9, r1
 8010102:	462b      	mov	r3, r5
 8010104:	4650      	mov	r0, sl
 8010106:	4659      	mov	r1, fp
 8010108:	f7f0 f8ce 	bl	80002a8 <__aeabi_dsub>
 801010c:	4632      	mov	r2, r6
 801010e:	463b      	mov	r3, r7
 8010110:	f7f0 f8ca 	bl	80002a8 <__aeabi_dsub>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	4640      	mov	r0, r8
 801011a:	4649      	mov	r1, r9
 801011c:	e7da      	b.n	80100d4 <__kernel_cos+0xec>
 801011e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010158 <__kernel_cos+0x170>
 8010122:	e7db      	b.n	80100dc <__kernel_cos+0xf4>
 8010124:	f3af 8000 	nop.w
 8010128:	be8838d4 	.word	0xbe8838d4
 801012c:	bda8fae9 	.word	0xbda8fae9
 8010130:	bdb4b1c4 	.word	0xbdb4b1c4
 8010134:	3e21ee9e 	.word	0x3e21ee9e
 8010138:	809c52ad 	.word	0x809c52ad
 801013c:	3e927e4f 	.word	0x3e927e4f
 8010140:	19cb1590 	.word	0x19cb1590
 8010144:	3efa01a0 	.word	0x3efa01a0
 8010148:	16c15177 	.word	0x16c15177
 801014c:	3f56c16c 	.word	0x3f56c16c
 8010150:	5555554c 	.word	0x5555554c
 8010154:	3fa55555 	.word	0x3fa55555
 8010158:	00000000 	.word	0x00000000
 801015c:	3ff00000 	.word	0x3ff00000
 8010160:	3fe00000 	.word	0x3fe00000
 8010164:	3fd33332 	.word	0x3fd33332
 8010168:	3ff00000 	.word	0x3ff00000
 801016c:	3fe90000 	.word	0x3fe90000
 8010170:	3fd20000 	.word	0x3fd20000
 8010174:	00000000 	.word	0x00000000

08010178 <__kernel_sin>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	ed2d 8b04 	vpush	{d8-d9}
 8010180:	eeb0 8a41 	vmov.f32	s16, s2
 8010184:	eef0 8a61 	vmov.f32	s17, s3
 8010188:	ec55 4b10 	vmov	r4, r5, d0
 801018c:	b083      	sub	sp, #12
 801018e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010192:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010196:	9001      	str	r0, [sp, #4]
 8010198:	da06      	bge.n	80101a8 <__kernel_sin+0x30>
 801019a:	ee10 0a10 	vmov	r0, s0
 801019e:	4629      	mov	r1, r5
 80101a0:	f7f0 fcea 	bl	8000b78 <__aeabi_d2iz>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d051      	beq.n	801024c <__kernel_sin+0xd4>
 80101a8:	4622      	mov	r2, r4
 80101aa:	462b      	mov	r3, r5
 80101ac:	4620      	mov	r0, r4
 80101ae:	4629      	mov	r1, r5
 80101b0:	f7f0 fa32 	bl	8000618 <__aeabi_dmul>
 80101b4:	4682      	mov	sl, r0
 80101b6:	468b      	mov	fp, r1
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	4620      	mov	r0, r4
 80101be:	4629      	mov	r1, r5
 80101c0:	f7f0 fa2a 	bl	8000618 <__aeabi_dmul>
 80101c4:	a341      	add	r3, pc, #260	; (adr r3, 80102cc <__kernel_sin+0x154>)
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	4680      	mov	r8, r0
 80101cc:	4689      	mov	r9, r1
 80101ce:	4650      	mov	r0, sl
 80101d0:	4659      	mov	r1, fp
 80101d2:	f7f0 fa21 	bl	8000618 <__aeabi_dmul>
 80101d6:	a33f      	add	r3, pc, #252	; (adr r3, 80102d4 <__kernel_sin+0x15c>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	f7f0 f864 	bl	80002a8 <__aeabi_dsub>
 80101e0:	4652      	mov	r2, sl
 80101e2:	465b      	mov	r3, fp
 80101e4:	f7f0 fa18 	bl	8000618 <__aeabi_dmul>
 80101e8:	a33c      	add	r3, pc, #240	; (adr r3, 80102dc <__kernel_sin+0x164>)
 80101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ee:	f7f0 f85d 	bl	80002ac <__adddf3>
 80101f2:	4652      	mov	r2, sl
 80101f4:	465b      	mov	r3, fp
 80101f6:	f7f0 fa0f 	bl	8000618 <__aeabi_dmul>
 80101fa:	a33a      	add	r3, pc, #232	; (adr r3, 80102e4 <__kernel_sin+0x16c>)
 80101fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010200:	f7f0 f852 	bl	80002a8 <__aeabi_dsub>
 8010204:	4652      	mov	r2, sl
 8010206:	465b      	mov	r3, fp
 8010208:	f7f0 fa06 	bl	8000618 <__aeabi_dmul>
 801020c:	a337      	add	r3, pc, #220	; (adr r3, 80102ec <__kernel_sin+0x174>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	f7f0 f84b 	bl	80002ac <__adddf3>
 8010216:	9b01      	ldr	r3, [sp, #4]
 8010218:	4606      	mov	r6, r0
 801021a:	460f      	mov	r7, r1
 801021c:	b9eb      	cbnz	r3, 801025a <__kernel_sin+0xe2>
 801021e:	4602      	mov	r2, r0
 8010220:	460b      	mov	r3, r1
 8010222:	4650      	mov	r0, sl
 8010224:	4659      	mov	r1, fp
 8010226:	f7f0 f9f7 	bl	8000618 <__aeabi_dmul>
 801022a:	a325      	add	r3, pc, #148	; (adr r3, 80102c0 <__kernel_sin+0x148>)
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	f7f0 f83a 	bl	80002a8 <__aeabi_dsub>
 8010234:	4642      	mov	r2, r8
 8010236:	464b      	mov	r3, r9
 8010238:	f7f0 f9ee 	bl	8000618 <__aeabi_dmul>
 801023c:	4602      	mov	r2, r0
 801023e:	460b      	mov	r3, r1
 8010240:	4620      	mov	r0, r4
 8010242:	4629      	mov	r1, r5
 8010244:	f7f0 f832 	bl	80002ac <__adddf3>
 8010248:	4604      	mov	r4, r0
 801024a:	460d      	mov	r5, r1
 801024c:	ec45 4b10 	vmov	d0, r4, r5
 8010250:	b003      	add	sp, #12
 8010252:	ecbd 8b04 	vpop	{d8-d9}
 8010256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025a:	4b1b      	ldr	r3, [pc, #108]	; (80102c8 <__kernel_sin+0x150>)
 801025c:	ec51 0b18 	vmov	r0, r1, d8
 8010260:	2200      	movs	r2, #0
 8010262:	f7f0 f9d9 	bl	8000618 <__aeabi_dmul>
 8010266:	4632      	mov	r2, r6
 8010268:	ec41 0b19 	vmov	d9, r0, r1
 801026c:	463b      	mov	r3, r7
 801026e:	4640      	mov	r0, r8
 8010270:	4649      	mov	r1, r9
 8010272:	f7f0 f9d1 	bl	8000618 <__aeabi_dmul>
 8010276:	4602      	mov	r2, r0
 8010278:	460b      	mov	r3, r1
 801027a:	ec51 0b19 	vmov	r0, r1, d9
 801027e:	f7f0 f813 	bl	80002a8 <__aeabi_dsub>
 8010282:	4652      	mov	r2, sl
 8010284:	465b      	mov	r3, fp
 8010286:	f7f0 f9c7 	bl	8000618 <__aeabi_dmul>
 801028a:	ec53 2b18 	vmov	r2, r3, d8
 801028e:	f7f0 f80b 	bl	80002a8 <__aeabi_dsub>
 8010292:	a30b      	add	r3, pc, #44	; (adr r3, 80102c0 <__kernel_sin+0x148>)
 8010294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010298:	4606      	mov	r6, r0
 801029a:	460f      	mov	r7, r1
 801029c:	4640      	mov	r0, r8
 801029e:	4649      	mov	r1, r9
 80102a0:	f7f0 f9ba 	bl	8000618 <__aeabi_dmul>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	4630      	mov	r0, r6
 80102aa:	4639      	mov	r1, r7
 80102ac:	f7ef fffe 	bl	80002ac <__adddf3>
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4620      	mov	r0, r4
 80102b6:	4629      	mov	r1, r5
 80102b8:	f7ef fff6 	bl	80002a8 <__aeabi_dsub>
 80102bc:	e7c4      	b.n	8010248 <__kernel_sin+0xd0>
 80102be:	bf00      	nop
 80102c0:	55555549 	.word	0x55555549
 80102c4:	3fc55555 	.word	0x3fc55555
 80102c8:	3fe00000 	.word	0x3fe00000
 80102cc:	5acfd57c 	.word	0x5acfd57c
 80102d0:	3de5d93a 	.word	0x3de5d93a
 80102d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80102d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80102dc:	57b1fe7d 	.word	0x57b1fe7d
 80102e0:	3ec71de3 	.word	0x3ec71de3
 80102e4:	19c161d5 	.word	0x19c161d5
 80102e8:	3f2a01a0 	.word	0x3f2a01a0
 80102ec:	1110f8a6 	.word	0x1110f8a6
 80102f0:	3f811111 	.word	0x3f811111
 80102f4:	00000000 	.word	0x00000000

080102f8 <__ieee754_atan2>:
 80102f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102fc:	ec57 6b11 	vmov	r6, r7, d1
 8010300:	4273      	negs	r3, r6
 8010302:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8010480 <__ieee754_atan2+0x188>
 8010306:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801030a:	4333      	orrs	r3, r6
 801030c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010310:	4543      	cmp	r3, r8
 8010312:	ec51 0b10 	vmov	r0, r1, d0
 8010316:	ee11 5a10 	vmov	r5, s2
 801031a:	d80a      	bhi.n	8010332 <__ieee754_atan2+0x3a>
 801031c:	4244      	negs	r4, r0
 801031e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010322:	4304      	orrs	r4, r0
 8010324:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010328:	4544      	cmp	r4, r8
 801032a:	ee10 9a10 	vmov	r9, s0
 801032e:	468e      	mov	lr, r1
 8010330:	d907      	bls.n	8010342 <__ieee754_atan2+0x4a>
 8010332:	4632      	mov	r2, r6
 8010334:	463b      	mov	r3, r7
 8010336:	f7ef ffb9 	bl	80002ac <__adddf3>
 801033a:	ec41 0b10 	vmov	d0, r0, r1
 801033e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010342:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010346:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801034a:	4334      	orrs	r4, r6
 801034c:	d103      	bne.n	8010356 <__ieee754_atan2+0x5e>
 801034e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010352:	f000 baa1 	b.w	8010898 <atan>
 8010356:	17bc      	asrs	r4, r7, #30
 8010358:	f004 0402 	and.w	r4, r4, #2
 801035c:	ea53 0909 	orrs.w	r9, r3, r9
 8010360:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010364:	d107      	bne.n	8010376 <__ieee754_atan2+0x7e>
 8010366:	2c02      	cmp	r4, #2
 8010368:	d05f      	beq.n	801042a <__ieee754_atan2+0x132>
 801036a:	2c03      	cmp	r4, #3
 801036c:	d1e5      	bne.n	801033a <__ieee754_atan2+0x42>
 801036e:	a140      	add	r1, pc, #256	; (adr r1, 8010470 <__ieee754_atan2+0x178>)
 8010370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010374:	e7e1      	b.n	801033a <__ieee754_atan2+0x42>
 8010376:	4315      	orrs	r5, r2
 8010378:	d106      	bne.n	8010388 <__ieee754_atan2+0x90>
 801037a:	f1be 0f00 	cmp.w	lr, #0
 801037e:	da5f      	bge.n	8010440 <__ieee754_atan2+0x148>
 8010380:	a13d      	add	r1, pc, #244	; (adr r1, 8010478 <__ieee754_atan2+0x180>)
 8010382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010386:	e7d8      	b.n	801033a <__ieee754_atan2+0x42>
 8010388:	4542      	cmp	r2, r8
 801038a:	d10f      	bne.n	80103ac <__ieee754_atan2+0xb4>
 801038c:	4293      	cmp	r3, r2
 801038e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010392:	d107      	bne.n	80103a4 <__ieee754_atan2+0xac>
 8010394:	2c02      	cmp	r4, #2
 8010396:	d84c      	bhi.n	8010432 <__ieee754_atan2+0x13a>
 8010398:	4b33      	ldr	r3, [pc, #204]	; (8010468 <__ieee754_atan2+0x170>)
 801039a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801039e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103a2:	e7ca      	b.n	801033a <__ieee754_atan2+0x42>
 80103a4:	2c02      	cmp	r4, #2
 80103a6:	d848      	bhi.n	801043a <__ieee754_atan2+0x142>
 80103a8:	4b30      	ldr	r3, [pc, #192]	; (801046c <__ieee754_atan2+0x174>)
 80103aa:	e7f6      	b.n	801039a <__ieee754_atan2+0xa2>
 80103ac:	4543      	cmp	r3, r8
 80103ae:	d0e4      	beq.n	801037a <__ieee754_atan2+0x82>
 80103b0:	1a9b      	subs	r3, r3, r2
 80103b2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80103b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80103ba:	da1e      	bge.n	80103fa <__ieee754_atan2+0x102>
 80103bc:	2f00      	cmp	r7, #0
 80103be:	da01      	bge.n	80103c4 <__ieee754_atan2+0xcc>
 80103c0:	323c      	adds	r2, #60	; 0x3c
 80103c2:	db1e      	blt.n	8010402 <__ieee754_atan2+0x10a>
 80103c4:	4632      	mov	r2, r6
 80103c6:	463b      	mov	r3, r7
 80103c8:	f7f0 fa50 	bl	800086c <__aeabi_ddiv>
 80103cc:	ec41 0b10 	vmov	d0, r0, r1
 80103d0:	f000 fc02 	bl	8010bd8 <fabs>
 80103d4:	f000 fa60 	bl	8010898 <atan>
 80103d8:	ec51 0b10 	vmov	r0, r1, d0
 80103dc:	2c01      	cmp	r4, #1
 80103de:	d013      	beq.n	8010408 <__ieee754_atan2+0x110>
 80103e0:	2c02      	cmp	r4, #2
 80103e2:	d015      	beq.n	8010410 <__ieee754_atan2+0x118>
 80103e4:	2c00      	cmp	r4, #0
 80103e6:	d0a8      	beq.n	801033a <__ieee754_atan2+0x42>
 80103e8:	a317      	add	r3, pc, #92	; (adr r3, 8010448 <__ieee754_atan2+0x150>)
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	f7ef ff5b 	bl	80002a8 <__aeabi_dsub>
 80103f2:	a317      	add	r3, pc, #92	; (adr r3, 8010450 <__ieee754_atan2+0x158>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	e014      	b.n	8010424 <__ieee754_atan2+0x12c>
 80103fa:	a117      	add	r1, pc, #92	; (adr r1, 8010458 <__ieee754_atan2+0x160>)
 80103fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010400:	e7ec      	b.n	80103dc <__ieee754_atan2+0xe4>
 8010402:	2000      	movs	r0, #0
 8010404:	2100      	movs	r1, #0
 8010406:	e7e9      	b.n	80103dc <__ieee754_atan2+0xe4>
 8010408:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801040c:	4619      	mov	r1, r3
 801040e:	e794      	b.n	801033a <__ieee754_atan2+0x42>
 8010410:	a30d      	add	r3, pc, #52	; (adr r3, 8010448 <__ieee754_atan2+0x150>)
 8010412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010416:	f7ef ff47 	bl	80002a8 <__aeabi_dsub>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	a10c      	add	r1, pc, #48	; (adr r1, 8010450 <__ieee754_atan2+0x158>)
 8010420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010424:	f7ef ff40 	bl	80002a8 <__aeabi_dsub>
 8010428:	e787      	b.n	801033a <__ieee754_atan2+0x42>
 801042a:	a109      	add	r1, pc, #36	; (adr r1, 8010450 <__ieee754_atan2+0x158>)
 801042c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010430:	e783      	b.n	801033a <__ieee754_atan2+0x42>
 8010432:	a10b      	add	r1, pc, #44	; (adr r1, 8010460 <__ieee754_atan2+0x168>)
 8010434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010438:	e77f      	b.n	801033a <__ieee754_atan2+0x42>
 801043a:	2000      	movs	r0, #0
 801043c:	2100      	movs	r1, #0
 801043e:	e77c      	b.n	801033a <__ieee754_atan2+0x42>
 8010440:	a105      	add	r1, pc, #20	; (adr r1, 8010458 <__ieee754_atan2+0x160>)
 8010442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010446:	e778      	b.n	801033a <__ieee754_atan2+0x42>
 8010448:	33145c07 	.word	0x33145c07
 801044c:	3ca1a626 	.word	0x3ca1a626
 8010450:	54442d18 	.word	0x54442d18
 8010454:	400921fb 	.word	0x400921fb
 8010458:	54442d18 	.word	0x54442d18
 801045c:	3ff921fb 	.word	0x3ff921fb
 8010460:	54442d18 	.word	0x54442d18
 8010464:	3fe921fb 	.word	0x3fe921fb
 8010468:	08012ea8 	.word	0x08012ea8
 801046c:	08012ec0 	.word	0x08012ec0
 8010470:	54442d18 	.word	0x54442d18
 8010474:	c00921fb 	.word	0xc00921fb
 8010478:	54442d18 	.word	0x54442d18
 801047c:	bff921fb 	.word	0xbff921fb
 8010480:	7ff00000 	.word	0x7ff00000
 8010484:	00000000 	.word	0x00000000

08010488 <__ieee754_rem_pio2>:
 8010488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048c:	ed2d 8b02 	vpush	{d8}
 8010490:	ec55 4b10 	vmov	r4, r5, d0
 8010494:	4bca      	ldr	r3, [pc, #808]	; (80107c0 <__ieee754_rem_pio2+0x338>)
 8010496:	b08b      	sub	sp, #44	; 0x2c
 8010498:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801049c:	4598      	cmp	r8, r3
 801049e:	4682      	mov	sl, r0
 80104a0:	9502      	str	r5, [sp, #8]
 80104a2:	dc08      	bgt.n	80104b6 <__ieee754_rem_pio2+0x2e>
 80104a4:	2200      	movs	r2, #0
 80104a6:	2300      	movs	r3, #0
 80104a8:	ed80 0b00 	vstr	d0, [r0]
 80104ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80104b0:	f04f 0b00 	mov.w	fp, #0
 80104b4:	e028      	b.n	8010508 <__ieee754_rem_pio2+0x80>
 80104b6:	4bc3      	ldr	r3, [pc, #780]	; (80107c4 <__ieee754_rem_pio2+0x33c>)
 80104b8:	4598      	cmp	r8, r3
 80104ba:	dc78      	bgt.n	80105ae <__ieee754_rem_pio2+0x126>
 80104bc:	9b02      	ldr	r3, [sp, #8]
 80104be:	4ec2      	ldr	r6, [pc, #776]	; (80107c8 <__ieee754_rem_pio2+0x340>)
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	ee10 0a10 	vmov	r0, s0
 80104c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8010788 <__ieee754_rem_pio2+0x300>)
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	4629      	mov	r1, r5
 80104ce:	dd39      	ble.n	8010544 <__ieee754_rem_pio2+0xbc>
 80104d0:	f7ef feea 	bl	80002a8 <__aeabi_dsub>
 80104d4:	45b0      	cmp	r8, r6
 80104d6:	4604      	mov	r4, r0
 80104d8:	460d      	mov	r5, r1
 80104da:	d01b      	beq.n	8010514 <__ieee754_rem_pio2+0x8c>
 80104dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8010790 <__ieee754_rem_pio2+0x308>)
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f7ef fee1 	bl	80002a8 <__aeabi_dsub>
 80104e6:	4602      	mov	r2, r0
 80104e8:	460b      	mov	r3, r1
 80104ea:	e9ca 2300 	strd	r2, r3, [sl]
 80104ee:	4620      	mov	r0, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	f7ef fed9 	bl	80002a8 <__aeabi_dsub>
 80104f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010790 <__ieee754_rem_pio2+0x308>)
 80104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fc:	f7ef fed4 	bl	80002a8 <__aeabi_dsub>
 8010500:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010504:	f04f 0b01 	mov.w	fp, #1
 8010508:	4658      	mov	r0, fp
 801050a:	b00b      	add	sp, #44	; 0x2c
 801050c:	ecbd 8b02 	vpop	{d8}
 8010510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010514:	a3a0      	add	r3, pc, #640	; (adr r3, 8010798 <__ieee754_rem_pio2+0x310>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	f7ef fec5 	bl	80002a8 <__aeabi_dsub>
 801051e:	a3a0      	add	r3, pc, #640	; (adr r3, 80107a0 <__ieee754_rem_pio2+0x318>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	4604      	mov	r4, r0
 8010526:	460d      	mov	r5, r1
 8010528:	f7ef febe 	bl	80002a8 <__aeabi_dsub>
 801052c:	4602      	mov	r2, r0
 801052e:	460b      	mov	r3, r1
 8010530:	e9ca 2300 	strd	r2, r3, [sl]
 8010534:	4620      	mov	r0, r4
 8010536:	4629      	mov	r1, r5
 8010538:	f7ef feb6 	bl	80002a8 <__aeabi_dsub>
 801053c:	a398      	add	r3, pc, #608	; (adr r3, 80107a0 <__ieee754_rem_pio2+0x318>)
 801053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010542:	e7db      	b.n	80104fc <__ieee754_rem_pio2+0x74>
 8010544:	f7ef feb2 	bl	80002ac <__adddf3>
 8010548:	45b0      	cmp	r8, r6
 801054a:	4604      	mov	r4, r0
 801054c:	460d      	mov	r5, r1
 801054e:	d016      	beq.n	801057e <__ieee754_rem_pio2+0xf6>
 8010550:	a38f      	add	r3, pc, #572	; (adr r3, 8010790 <__ieee754_rem_pio2+0x308>)
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	f7ef fea9 	bl	80002ac <__adddf3>
 801055a:	4602      	mov	r2, r0
 801055c:	460b      	mov	r3, r1
 801055e:	e9ca 2300 	strd	r2, r3, [sl]
 8010562:	4620      	mov	r0, r4
 8010564:	4629      	mov	r1, r5
 8010566:	f7ef fe9f 	bl	80002a8 <__aeabi_dsub>
 801056a:	a389      	add	r3, pc, #548	; (adr r3, 8010790 <__ieee754_rem_pio2+0x308>)
 801056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010570:	f7ef fe9c 	bl	80002ac <__adddf3>
 8010574:	f04f 3bff 	mov.w	fp, #4294967295
 8010578:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801057c:	e7c4      	b.n	8010508 <__ieee754_rem_pio2+0x80>
 801057e:	a386      	add	r3, pc, #536	; (adr r3, 8010798 <__ieee754_rem_pio2+0x310>)
 8010580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010584:	f7ef fe92 	bl	80002ac <__adddf3>
 8010588:	a385      	add	r3, pc, #532	; (adr r3, 80107a0 <__ieee754_rem_pio2+0x318>)
 801058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058e:	4604      	mov	r4, r0
 8010590:	460d      	mov	r5, r1
 8010592:	f7ef fe8b 	bl	80002ac <__adddf3>
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	e9ca 2300 	strd	r2, r3, [sl]
 801059e:	4620      	mov	r0, r4
 80105a0:	4629      	mov	r1, r5
 80105a2:	f7ef fe81 	bl	80002a8 <__aeabi_dsub>
 80105a6:	a37e      	add	r3, pc, #504	; (adr r3, 80107a0 <__ieee754_rem_pio2+0x318>)
 80105a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ac:	e7e0      	b.n	8010570 <__ieee754_rem_pio2+0xe8>
 80105ae:	4b87      	ldr	r3, [pc, #540]	; (80107cc <__ieee754_rem_pio2+0x344>)
 80105b0:	4598      	cmp	r8, r3
 80105b2:	f300 80d8 	bgt.w	8010766 <__ieee754_rem_pio2+0x2de>
 80105b6:	f000 fb0f 	bl	8010bd8 <fabs>
 80105ba:	ec55 4b10 	vmov	r4, r5, d0
 80105be:	ee10 0a10 	vmov	r0, s0
 80105c2:	a379      	add	r3, pc, #484	; (adr r3, 80107a8 <__ieee754_rem_pio2+0x320>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7f0 f825 	bl	8000618 <__aeabi_dmul>
 80105ce:	4b80      	ldr	r3, [pc, #512]	; (80107d0 <__ieee754_rem_pio2+0x348>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	f7ef fe6b 	bl	80002ac <__adddf3>
 80105d6:	f7f0 facf 	bl	8000b78 <__aeabi_d2iz>
 80105da:	4683      	mov	fp, r0
 80105dc:	f7ef ffb2 	bl	8000544 <__aeabi_i2d>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	ec43 2b18 	vmov	d8, r2, r3
 80105e8:	a367      	add	r3, pc, #412	; (adr r3, 8010788 <__ieee754_rem_pio2+0x300>)
 80105ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ee:	f7f0 f813 	bl	8000618 <__aeabi_dmul>
 80105f2:	4602      	mov	r2, r0
 80105f4:	460b      	mov	r3, r1
 80105f6:	4620      	mov	r0, r4
 80105f8:	4629      	mov	r1, r5
 80105fa:	f7ef fe55 	bl	80002a8 <__aeabi_dsub>
 80105fe:	a364      	add	r3, pc, #400	; (adr r3, 8010790 <__ieee754_rem_pio2+0x308>)
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	4606      	mov	r6, r0
 8010606:	460f      	mov	r7, r1
 8010608:	ec51 0b18 	vmov	r0, r1, d8
 801060c:	f7f0 f804 	bl	8000618 <__aeabi_dmul>
 8010610:	f1bb 0f1f 	cmp.w	fp, #31
 8010614:	4604      	mov	r4, r0
 8010616:	460d      	mov	r5, r1
 8010618:	dc0d      	bgt.n	8010636 <__ieee754_rem_pio2+0x1ae>
 801061a:	4b6e      	ldr	r3, [pc, #440]	; (80107d4 <__ieee754_rem_pio2+0x34c>)
 801061c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010624:	4543      	cmp	r3, r8
 8010626:	d006      	beq.n	8010636 <__ieee754_rem_pio2+0x1ae>
 8010628:	4622      	mov	r2, r4
 801062a:	462b      	mov	r3, r5
 801062c:	4630      	mov	r0, r6
 801062e:	4639      	mov	r1, r7
 8010630:	f7ef fe3a 	bl	80002a8 <__aeabi_dsub>
 8010634:	e00e      	b.n	8010654 <__ieee754_rem_pio2+0x1cc>
 8010636:	462b      	mov	r3, r5
 8010638:	4622      	mov	r2, r4
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7ef fe33 	bl	80002a8 <__aeabi_dsub>
 8010642:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010646:	9303      	str	r3, [sp, #12]
 8010648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801064c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010650:	2b10      	cmp	r3, #16
 8010652:	dc02      	bgt.n	801065a <__ieee754_rem_pio2+0x1d2>
 8010654:	e9ca 0100 	strd	r0, r1, [sl]
 8010658:	e039      	b.n	80106ce <__ieee754_rem_pio2+0x246>
 801065a:	a34f      	add	r3, pc, #316	; (adr r3, 8010798 <__ieee754_rem_pio2+0x310>)
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	ec51 0b18 	vmov	r0, r1, d8
 8010664:	f7ef ffd8 	bl	8000618 <__aeabi_dmul>
 8010668:	4604      	mov	r4, r0
 801066a:	460d      	mov	r5, r1
 801066c:	4602      	mov	r2, r0
 801066e:	460b      	mov	r3, r1
 8010670:	4630      	mov	r0, r6
 8010672:	4639      	mov	r1, r7
 8010674:	f7ef fe18 	bl	80002a8 <__aeabi_dsub>
 8010678:	4602      	mov	r2, r0
 801067a:	460b      	mov	r3, r1
 801067c:	4680      	mov	r8, r0
 801067e:	4689      	mov	r9, r1
 8010680:	4630      	mov	r0, r6
 8010682:	4639      	mov	r1, r7
 8010684:	f7ef fe10 	bl	80002a8 <__aeabi_dsub>
 8010688:	4622      	mov	r2, r4
 801068a:	462b      	mov	r3, r5
 801068c:	f7ef fe0c 	bl	80002a8 <__aeabi_dsub>
 8010690:	a343      	add	r3, pc, #268	; (adr r3, 80107a0 <__ieee754_rem_pio2+0x318>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	4604      	mov	r4, r0
 8010698:	460d      	mov	r5, r1
 801069a:	ec51 0b18 	vmov	r0, r1, d8
 801069e:	f7ef ffbb 	bl	8000618 <__aeabi_dmul>
 80106a2:	4622      	mov	r2, r4
 80106a4:	462b      	mov	r3, r5
 80106a6:	f7ef fdff 	bl	80002a8 <__aeabi_dsub>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	4604      	mov	r4, r0
 80106b0:	460d      	mov	r5, r1
 80106b2:	4640      	mov	r0, r8
 80106b4:	4649      	mov	r1, r9
 80106b6:	f7ef fdf7 	bl	80002a8 <__aeabi_dsub>
 80106ba:	9a03      	ldr	r2, [sp, #12]
 80106bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	2b31      	cmp	r3, #49	; 0x31
 80106c4:	dc24      	bgt.n	8010710 <__ieee754_rem_pio2+0x288>
 80106c6:	e9ca 0100 	strd	r0, r1, [sl]
 80106ca:	4646      	mov	r6, r8
 80106cc:	464f      	mov	r7, r9
 80106ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80106d2:	4630      	mov	r0, r6
 80106d4:	4642      	mov	r2, r8
 80106d6:	464b      	mov	r3, r9
 80106d8:	4639      	mov	r1, r7
 80106da:	f7ef fde5 	bl	80002a8 <__aeabi_dsub>
 80106de:	462b      	mov	r3, r5
 80106e0:	4622      	mov	r2, r4
 80106e2:	f7ef fde1 	bl	80002a8 <__aeabi_dsub>
 80106e6:	9b02      	ldr	r3, [sp, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80106ee:	f6bf af0b 	bge.w	8010508 <__ieee754_rem_pio2+0x80>
 80106f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80106f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80106fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106fe:	f8ca 8000 	str.w	r8, [sl]
 8010702:	f8ca 0008 	str.w	r0, [sl, #8]
 8010706:	f8ca 300c 	str.w	r3, [sl, #12]
 801070a:	f1cb 0b00 	rsb	fp, fp, #0
 801070e:	e6fb      	b.n	8010508 <__ieee754_rem_pio2+0x80>
 8010710:	a327      	add	r3, pc, #156	; (adr r3, 80107b0 <__ieee754_rem_pio2+0x328>)
 8010712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010716:	ec51 0b18 	vmov	r0, r1, d8
 801071a:	f7ef ff7d 	bl	8000618 <__aeabi_dmul>
 801071e:	4604      	mov	r4, r0
 8010720:	460d      	mov	r5, r1
 8010722:	4602      	mov	r2, r0
 8010724:	460b      	mov	r3, r1
 8010726:	4640      	mov	r0, r8
 8010728:	4649      	mov	r1, r9
 801072a:	f7ef fdbd 	bl	80002a8 <__aeabi_dsub>
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	4606      	mov	r6, r0
 8010734:	460f      	mov	r7, r1
 8010736:	4640      	mov	r0, r8
 8010738:	4649      	mov	r1, r9
 801073a:	f7ef fdb5 	bl	80002a8 <__aeabi_dsub>
 801073e:	4622      	mov	r2, r4
 8010740:	462b      	mov	r3, r5
 8010742:	f7ef fdb1 	bl	80002a8 <__aeabi_dsub>
 8010746:	a31c      	add	r3, pc, #112	; (adr r3, 80107b8 <__ieee754_rem_pio2+0x330>)
 8010748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074c:	4604      	mov	r4, r0
 801074e:	460d      	mov	r5, r1
 8010750:	ec51 0b18 	vmov	r0, r1, d8
 8010754:	f7ef ff60 	bl	8000618 <__aeabi_dmul>
 8010758:	4622      	mov	r2, r4
 801075a:	462b      	mov	r3, r5
 801075c:	f7ef fda4 	bl	80002a8 <__aeabi_dsub>
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	e760      	b.n	8010628 <__ieee754_rem_pio2+0x1a0>
 8010766:	4b1c      	ldr	r3, [pc, #112]	; (80107d8 <__ieee754_rem_pio2+0x350>)
 8010768:	4598      	cmp	r8, r3
 801076a:	dd37      	ble.n	80107dc <__ieee754_rem_pio2+0x354>
 801076c:	ee10 2a10 	vmov	r2, s0
 8010770:	462b      	mov	r3, r5
 8010772:	4620      	mov	r0, r4
 8010774:	4629      	mov	r1, r5
 8010776:	f7ef fd97 	bl	80002a8 <__aeabi_dsub>
 801077a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801077e:	e9ca 0100 	strd	r0, r1, [sl]
 8010782:	e695      	b.n	80104b0 <__ieee754_rem_pio2+0x28>
 8010784:	f3af 8000 	nop.w
 8010788:	54400000 	.word	0x54400000
 801078c:	3ff921fb 	.word	0x3ff921fb
 8010790:	1a626331 	.word	0x1a626331
 8010794:	3dd0b461 	.word	0x3dd0b461
 8010798:	1a600000 	.word	0x1a600000
 801079c:	3dd0b461 	.word	0x3dd0b461
 80107a0:	2e037073 	.word	0x2e037073
 80107a4:	3ba3198a 	.word	0x3ba3198a
 80107a8:	6dc9c883 	.word	0x6dc9c883
 80107ac:	3fe45f30 	.word	0x3fe45f30
 80107b0:	2e000000 	.word	0x2e000000
 80107b4:	3ba3198a 	.word	0x3ba3198a
 80107b8:	252049c1 	.word	0x252049c1
 80107bc:	397b839a 	.word	0x397b839a
 80107c0:	3fe921fb 	.word	0x3fe921fb
 80107c4:	4002d97b 	.word	0x4002d97b
 80107c8:	3ff921fb 	.word	0x3ff921fb
 80107cc:	413921fb 	.word	0x413921fb
 80107d0:	3fe00000 	.word	0x3fe00000
 80107d4:	08012ed8 	.word	0x08012ed8
 80107d8:	7fefffff 	.word	0x7fefffff
 80107dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80107e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80107e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80107e8:	4620      	mov	r0, r4
 80107ea:	460d      	mov	r5, r1
 80107ec:	f7f0 f9c4 	bl	8000b78 <__aeabi_d2iz>
 80107f0:	f7ef fea8 	bl	8000544 <__aeabi_i2d>
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	4620      	mov	r0, r4
 80107fa:	4629      	mov	r1, r5
 80107fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010800:	f7ef fd52 	bl	80002a8 <__aeabi_dsub>
 8010804:	4b21      	ldr	r3, [pc, #132]	; (801088c <__ieee754_rem_pio2+0x404>)
 8010806:	2200      	movs	r2, #0
 8010808:	f7ef ff06 	bl	8000618 <__aeabi_dmul>
 801080c:	460d      	mov	r5, r1
 801080e:	4604      	mov	r4, r0
 8010810:	f7f0 f9b2 	bl	8000b78 <__aeabi_d2iz>
 8010814:	f7ef fe96 	bl	8000544 <__aeabi_i2d>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
 801081c:	4620      	mov	r0, r4
 801081e:	4629      	mov	r1, r5
 8010820:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010824:	f7ef fd40 	bl	80002a8 <__aeabi_dsub>
 8010828:	4b18      	ldr	r3, [pc, #96]	; (801088c <__ieee754_rem_pio2+0x404>)
 801082a:	2200      	movs	r2, #0
 801082c:	f7ef fef4 	bl	8000618 <__aeabi_dmul>
 8010830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010834:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010838:	2703      	movs	r7, #3
 801083a:	2400      	movs	r4, #0
 801083c:	2500      	movs	r5, #0
 801083e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010842:	4622      	mov	r2, r4
 8010844:	462b      	mov	r3, r5
 8010846:	46b9      	mov	r9, r7
 8010848:	3f01      	subs	r7, #1
 801084a:	f7f0 f94d 	bl	8000ae8 <__aeabi_dcmpeq>
 801084e:	2800      	cmp	r0, #0
 8010850:	d1f5      	bne.n	801083e <__ieee754_rem_pio2+0x3b6>
 8010852:	4b0f      	ldr	r3, [pc, #60]	; (8010890 <__ieee754_rem_pio2+0x408>)
 8010854:	9301      	str	r3, [sp, #4]
 8010856:	2302      	movs	r3, #2
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	4632      	mov	r2, r6
 801085c:	464b      	mov	r3, r9
 801085e:	4651      	mov	r1, sl
 8010860:	a804      	add	r0, sp, #16
 8010862:	f000 f9c5 	bl	8010bf0 <__kernel_rem_pio2>
 8010866:	9b02      	ldr	r3, [sp, #8]
 8010868:	2b00      	cmp	r3, #0
 801086a:	4683      	mov	fp, r0
 801086c:	f6bf ae4c 	bge.w	8010508 <__ieee754_rem_pio2+0x80>
 8010870:	e9da 2100 	ldrd	r2, r1, [sl]
 8010874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010878:	e9ca 2300 	strd	r2, r3, [sl]
 801087c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010884:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010888:	e73f      	b.n	801070a <__ieee754_rem_pio2+0x282>
 801088a:	bf00      	nop
 801088c:	41700000 	.word	0x41700000
 8010890:	08012f58 	.word	0x08012f58
 8010894:	00000000 	.word	0x00000000

08010898 <atan>:
 8010898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801089c:	ec55 4b10 	vmov	r4, r5, d0
 80108a0:	4bc3      	ldr	r3, [pc, #780]	; (8010bb0 <atan+0x318>)
 80108a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80108a6:	429e      	cmp	r6, r3
 80108a8:	46ab      	mov	fp, r5
 80108aa:	dd18      	ble.n	80108de <atan+0x46>
 80108ac:	4bc1      	ldr	r3, [pc, #772]	; (8010bb4 <atan+0x31c>)
 80108ae:	429e      	cmp	r6, r3
 80108b0:	dc01      	bgt.n	80108b6 <atan+0x1e>
 80108b2:	d109      	bne.n	80108c8 <atan+0x30>
 80108b4:	b144      	cbz	r4, 80108c8 <atan+0x30>
 80108b6:	4622      	mov	r2, r4
 80108b8:	462b      	mov	r3, r5
 80108ba:	4620      	mov	r0, r4
 80108bc:	4629      	mov	r1, r5
 80108be:	f7ef fcf5 	bl	80002ac <__adddf3>
 80108c2:	4604      	mov	r4, r0
 80108c4:	460d      	mov	r5, r1
 80108c6:	e006      	b.n	80108d6 <atan+0x3e>
 80108c8:	f1bb 0f00 	cmp.w	fp, #0
 80108cc:	f300 8131 	bgt.w	8010b32 <atan+0x29a>
 80108d0:	a59b      	add	r5, pc, #620	; (adr r5, 8010b40 <atan+0x2a8>)
 80108d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80108d6:	ec45 4b10 	vmov	d0, r4, r5
 80108da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108de:	4bb6      	ldr	r3, [pc, #728]	; (8010bb8 <atan+0x320>)
 80108e0:	429e      	cmp	r6, r3
 80108e2:	dc14      	bgt.n	801090e <atan+0x76>
 80108e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80108e8:	429e      	cmp	r6, r3
 80108ea:	dc0d      	bgt.n	8010908 <atan+0x70>
 80108ec:	a396      	add	r3, pc, #600	; (adr r3, 8010b48 <atan+0x2b0>)
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	ee10 0a10 	vmov	r0, s0
 80108f6:	4629      	mov	r1, r5
 80108f8:	f7ef fcd8 	bl	80002ac <__adddf3>
 80108fc:	4baf      	ldr	r3, [pc, #700]	; (8010bbc <atan+0x324>)
 80108fe:	2200      	movs	r2, #0
 8010900:	f7f0 f91a 	bl	8000b38 <__aeabi_dcmpgt>
 8010904:	2800      	cmp	r0, #0
 8010906:	d1e6      	bne.n	80108d6 <atan+0x3e>
 8010908:	f04f 3aff 	mov.w	sl, #4294967295
 801090c:	e02b      	b.n	8010966 <atan+0xce>
 801090e:	f000 f963 	bl	8010bd8 <fabs>
 8010912:	4bab      	ldr	r3, [pc, #684]	; (8010bc0 <atan+0x328>)
 8010914:	429e      	cmp	r6, r3
 8010916:	ec55 4b10 	vmov	r4, r5, d0
 801091a:	f300 80bf 	bgt.w	8010a9c <atan+0x204>
 801091e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010922:	429e      	cmp	r6, r3
 8010924:	f300 80a0 	bgt.w	8010a68 <atan+0x1d0>
 8010928:	ee10 2a10 	vmov	r2, s0
 801092c:	ee10 0a10 	vmov	r0, s0
 8010930:	462b      	mov	r3, r5
 8010932:	4629      	mov	r1, r5
 8010934:	f7ef fcba 	bl	80002ac <__adddf3>
 8010938:	4ba0      	ldr	r3, [pc, #640]	; (8010bbc <atan+0x324>)
 801093a:	2200      	movs	r2, #0
 801093c:	f7ef fcb4 	bl	80002a8 <__aeabi_dsub>
 8010940:	2200      	movs	r2, #0
 8010942:	4606      	mov	r6, r0
 8010944:	460f      	mov	r7, r1
 8010946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801094a:	4620      	mov	r0, r4
 801094c:	4629      	mov	r1, r5
 801094e:	f7ef fcad 	bl	80002ac <__adddf3>
 8010952:	4602      	mov	r2, r0
 8010954:	460b      	mov	r3, r1
 8010956:	4630      	mov	r0, r6
 8010958:	4639      	mov	r1, r7
 801095a:	f7ef ff87 	bl	800086c <__aeabi_ddiv>
 801095e:	f04f 0a00 	mov.w	sl, #0
 8010962:	4604      	mov	r4, r0
 8010964:	460d      	mov	r5, r1
 8010966:	4622      	mov	r2, r4
 8010968:	462b      	mov	r3, r5
 801096a:	4620      	mov	r0, r4
 801096c:	4629      	mov	r1, r5
 801096e:	f7ef fe53 	bl	8000618 <__aeabi_dmul>
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	4680      	mov	r8, r0
 8010978:	4689      	mov	r9, r1
 801097a:	f7ef fe4d 	bl	8000618 <__aeabi_dmul>
 801097e:	a374      	add	r3, pc, #464	; (adr r3, 8010b50 <atan+0x2b8>)
 8010980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010984:	4606      	mov	r6, r0
 8010986:	460f      	mov	r7, r1
 8010988:	f7ef fe46 	bl	8000618 <__aeabi_dmul>
 801098c:	a372      	add	r3, pc, #456	; (adr r3, 8010b58 <atan+0x2c0>)
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	f7ef fc8b 	bl	80002ac <__adddf3>
 8010996:	4632      	mov	r2, r6
 8010998:	463b      	mov	r3, r7
 801099a:	f7ef fe3d 	bl	8000618 <__aeabi_dmul>
 801099e:	a370      	add	r3, pc, #448	; (adr r3, 8010b60 <atan+0x2c8>)
 80109a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a4:	f7ef fc82 	bl	80002ac <__adddf3>
 80109a8:	4632      	mov	r2, r6
 80109aa:	463b      	mov	r3, r7
 80109ac:	f7ef fe34 	bl	8000618 <__aeabi_dmul>
 80109b0:	a36d      	add	r3, pc, #436	; (adr r3, 8010b68 <atan+0x2d0>)
 80109b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b6:	f7ef fc79 	bl	80002ac <__adddf3>
 80109ba:	4632      	mov	r2, r6
 80109bc:	463b      	mov	r3, r7
 80109be:	f7ef fe2b 	bl	8000618 <__aeabi_dmul>
 80109c2:	a36b      	add	r3, pc, #428	; (adr r3, 8010b70 <atan+0x2d8>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	f7ef fc70 	bl	80002ac <__adddf3>
 80109cc:	4632      	mov	r2, r6
 80109ce:	463b      	mov	r3, r7
 80109d0:	f7ef fe22 	bl	8000618 <__aeabi_dmul>
 80109d4:	a368      	add	r3, pc, #416	; (adr r3, 8010b78 <atan+0x2e0>)
 80109d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109da:	f7ef fc67 	bl	80002ac <__adddf3>
 80109de:	4642      	mov	r2, r8
 80109e0:	464b      	mov	r3, r9
 80109e2:	f7ef fe19 	bl	8000618 <__aeabi_dmul>
 80109e6:	a366      	add	r3, pc, #408	; (adr r3, 8010b80 <atan+0x2e8>)
 80109e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ec:	4680      	mov	r8, r0
 80109ee:	4689      	mov	r9, r1
 80109f0:	4630      	mov	r0, r6
 80109f2:	4639      	mov	r1, r7
 80109f4:	f7ef fe10 	bl	8000618 <__aeabi_dmul>
 80109f8:	a363      	add	r3, pc, #396	; (adr r3, 8010b88 <atan+0x2f0>)
 80109fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fe:	f7ef fc53 	bl	80002a8 <__aeabi_dsub>
 8010a02:	4632      	mov	r2, r6
 8010a04:	463b      	mov	r3, r7
 8010a06:	f7ef fe07 	bl	8000618 <__aeabi_dmul>
 8010a0a:	a361      	add	r3, pc, #388	; (adr r3, 8010b90 <atan+0x2f8>)
 8010a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a10:	f7ef fc4a 	bl	80002a8 <__aeabi_dsub>
 8010a14:	4632      	mov	r2, r6
 8010a16:	463b      	mov	r3, r7
 8010a18:	f7ef fdfe 	bl	8000618 <__aeabi_dmul>
 8010a1c:	a35e      	add	r3, pc, #376	; (adr r3, 8010b98 <atan+0x300>)
 8010a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a22:	f7ef fc41 	bl	80002a8 <__aeabi_dsub>
 8010a26:	4632      	mov	r2, r6
 8010a28:	463b      	mov	r3, r7
 8010a2a:	f7ef fdf5 	bl	8000618 <__aeabi_dmul>
 8010a2e:	a35c      	add	r3, pc, #368	; (adr r3, 8010ba0 <atan+0x308>)
 8010a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a34:	f7ef fc38 	bl	80002a8 <__aeabi_dsub>
 8010a38:	4632      	mov	r2, r6
 8010a3a:	463b      	mov	r3, r7
 8010a3c:	f7ef fdec 	bl	8000618 <__aeabi_dmul>
 8010a40:	4602      	mov	r2, r0
 8010a42:	460b      	mov	r3, r1
 8010a44:	4640      	mov	r0, r8
 8010a46:	4649      	mov	r1, r9
 8010a48:	f7ef fc30 	bl	80002ac <__adddf3>
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	462b      	mov	r3, r5
 8010a50:	f7ef fde2 	bl	8000618 <__aeabi_dmul>
 8010a54:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010a58:	4602      	mov	r2, r0
 8010a5a:	460b      	mov	r3, r1
 8010a5c:	d14b      	bne.n	8010af6 <atan+0x25e>
 8010a5e:	4620      	mov	r0, r4
 8010a60:	4629      	mov	r1, r5
 8010a62:	f7ef fc21 	bl	80002a8 <__aeabi_dsub>
 8010a66:	e72c      	b.n	80108c2 <atan+0x2a>
 8010a68:	ee10 0a10 	vmov	r0, s0
 8010a6c:	4b53      	ldr	r3, [pc, #332]	; (8010bbc <atan+0x324>)
 8010a6e:	2200      	movs	r2, #0
 8010a70:	4629      	mov	r1, r5
 8010a72:	f7ef fc19 	bl	80002a8 <__aeabi_dsub>
 8010a76:	4b51      	ldr	r3, [pc, #324]	; (8010bbc <atan+0x324>)
 8010a78:	4606      	mov	r6, r0
 8010a7a:	460f      	mov	r7, r1
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	4620      	mov	r0, r4
 8010a80:	4629      	mov	r1, r5
 8010a82:	f7ef fc13 	bl	80002ac <__adddf3>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	f7ef feed 	bl	800086c <__aeabi_ddiv>
 8010a92:	f04f 0a01 	mov.w	sl, #1
 8010a96:	4604      	mov	r4, r0
 8010a98:	460d      	mov	r5, r1
 8010a9a:	e764      	b.n	8010966 <atan+0xce>
 8010a9c:	4b49      	ldr	r3, [pc, #292]	; (8010bc4 <atan+0x32c>)
 8010a9e:	429e      	cmp	r6, r3
 8010aa0:	da1d      	bge.n	8010ade <atan+0x246>
 8010aa2:	ee10 0a10 	vmov	r0, s0
 8010aa6:	4b48      	ldr	r3, [pc, #288]	; (8010bc8 <atan+0x330>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	4629      	mov	r1, r5
 8010aac:	f7ef fbfc 	bl	80002a8 <__aeabi_dsub>
 8010ab0:	4b45      	ldr	r3, [pc, #276]	; (8010bc8 <atan+0x330>)
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	460f      	mov	r7, r1
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	4620      	mov	r0, r4
 8010aba:	4629      	mov	r1, r5
 8010abc:	f7ef fdac 	bl	8000618 <__aeabi_dmul>
 8010ac0:	4b3e      	ldr	r3, [pc, #248]	; (8010bbc <atan+0x324>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f7ef fbf2 	bl	80002ac <__adddf3>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	460b      	mov	r3, r1
 8010acc:	4630      	mov	r0, r6
 8010ace:	4639      	mov	r1, r7
 8010ad0:	f7ef fecc 	bl	800086c <__aeabi_ddiv>
 8010ad4:	f04f 0a02 	mov.w	sl, #2
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	e743      	b.n	8010966 <atan+0xce>
 8010ade:	462b      	mov	r3, r5
 8010ae0:	ee10 2a10 	vmov	r2, s0
 8010ae4:	4939      	ldr	r1, [pc, #228]	; (8010bcc <atan+0x334>)
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	f7ef fec0 	bl	800086c <__aeabi_ddiv>
 8010aec:	f04f 0a03 	mov.w	sl, #3
 8010af0:	4604      	mov	r4, r0
 8010af2:	460d      	mov	r5, r1
 8010af4:	e737      	b.n	8010966 <atan+0xce>
 8010af6:	4b36      	ldr	r3, [pc, #216]	; (8010bd0 <atan+0x338>)
 8010af8:	4e36      	ldr	r6, [pc, #216]	; (8010bd4 <atan+0x33c>)
 8010afa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b02:	f7ef fbd1 	bl	80002a8 <__aeabi_dsub>
 8010b06:	4622      	mov	r2, r4
 8010b08:	462b      	mov	r3, r5
 8010b0a:	f7ef fbcd 	bl	80002a8 <__aeabi_dsub>
 8010b0e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010b12:	4602      	mov	r2, r0
 8010b14:	460b      	mov	r3, r1
 8010b16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010b1a:	f7ef fbc5 	bl	80002a8 <__aeabi_dsub>
 8010b1e:	f1bb 0f00 	cmp.w	fp, #0
 8010b22:	4604      	mov	r4, r0
 8010b24:	460d      	mov	r5, r1
 8010b26:	f6bf aed6 	bge.w	80108d6 <atan+0x3e>
 8010b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b2e:	461d      	mov	r5, r3
 8010b30:	e6d1      	b.n	80108d6 <atan+0x3e>
 8010b32:	a51d      	add	r5, pc, #116	; (adr r5, 8010ba8 <atan+0x310>)
 8010b34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b38:	e6cd      	b.n	80108d6 <atan+0x3e>
 8010b3a:	bf00      	nop
 8010b3c:	f3af 8000 	nop.w
 8010b40:	54442d18 	.word	0x54442d18
 8010b44:	bff921fb 	.word	0xbff921fb
 8010b48:	8800759c 	.word	0x8800759c
 8010b4c:	7e37e43c 	.word	0x7e37e43c
 8010b50:	e322da11 	.word	0xe322da11
 8010b54:	3f90ad3a 	.word	0x3f90ad3a
 8010b58:	24760deb 	.word	0x24760deb
 8010b5c:	3fa97b4b 	.word	0x3fa97b4b
 8010b60:	a0d03d51 	.word	0xa0d03d51
 8010b64:	3fb10d66 	.word	0x3fb10d66
 8010b68:	c54c206e 	.word	0xc54c206e
 8010b6c:	3fb745cd 	.word	0x3fb745cd
 8010b70:	920083ff 	.word	0x920083ff
 8010b74:	3fc24924 	.word	0x3fc24924
 8010b78:	5555550d 	.word	0x5555550d
 8010b7c:	3fd55555 	.word	0x3fd55555
 8010b80:	2c6a6c2f 	.word	0x2c6a6c2f
 8010b84:	bfa2b444 	.word	0xbfa2b444
 8010b88:	52defd9a 	.word	0x52defd9a
 8010b8c:	3fadde2d 	.word	0x3fadde2d
 8010b90:	af749a6d 	.word	0xaf749a6d
 8010b94:	3fb3b0f2 	.word	0x3fb3b0f2
 8010b98:	fe231671 	.word	0xfe231671
 8010b9c:	3fbc71c6 	.word	0x3fbc71c6
 8010ba0:	9998ebc4 	.word	0x9998ebc4
 8010ba4:	3fc99999 	.word	0x3fc99999
 8010ba8:	54442d18 	.word	0x54442d18
 8010bac:	3ff921fb 	.word	0x3ff921fb
 8010bb0:	440fffff 	.word	0x440fffff
 8010bb4:	7ff00000 	.word	0x7ff00000
 8010bb8:	3fdbffff 	.word	0x3fdbffff
 8010bbc:	3ff00000 	.word	0x3ff00000
 8010bc0:	3ff2ffff 	.word	0x3ff2ffff
 8010bc4:	40038000 	.word	0x40038000
 8010bc8:	3ff80000 	.word	0x3ff80000
 8010bcc:	bff00000 	.word	0xbff00000
 8010bd0:	08013080 	.word	0x08013080
 8010bd4:	08013060 	.word	0x08013060

08010bd8 <fabs>:
 8010bd8:	ec51 0b10 	vmov	r0, r1, d0
 8010bdc:	ee10 2a10 	vmov	r2, s0
 8010be0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010be4:	ec43 2b10 	vmov	d0, r2, r3
 8010be8:	4770      	bx	lr
 8010bea:	0000      	movs	r0, r0
 8010bec:	0000      	movs	r0, r0
	...

08010bf0 <__kernel_rem_pio2>:
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	ed2d 8b02 	vpush	{d8}
 8010bf8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010bfc:	f112 0f14 	cmn.w	r2, #20
 8010c00:	9306      	str	r3, [sp, #24]
 8010c02:	9104      	str	r1, [sp, #16]
 8010c04:	4bc2      	ldr	r3, [pc, #776]	; (8010f10 <__kernel_rem_pio2+0x320>)
 8010c06:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010c08:	9009      	str	r0, [sp, #36]	; 0x24
 8010c0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	9b06      	ldr	r3, [sp, #24]
 8010c12:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c16:	bfa8      	it	ge
 8010c18:	1ed4      	subge	r4, r2, #3
 8010c1a:	9305      	str	r3, [sp, #20]
 8010c1c:	bfb2      	itee	lt
 8010c1e:	2400      	movlt	r4, #0
 8010c20:	2318      	movge	r3, #24
 8010c22:	fb94 f4f3 	sdivge	r4, r4, r3
 8010c26:	f06f 0317 	mvn.w	r3, #23
 8010c2a:	fb04 3303 	mla	r3, r4, r3, r3
 8010c2e:	eb03 0a02 	add.w	sl, r3, r2
 8010c32:	9b00      	ldr	r3, [sp, #0]
 8010c34:	9a05      	ldr	r2, [sp, #20]
 8010c36:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010f00 <__kernel_rem_pio2+0x310>
 8010c3a:	eb03 0802 	add.w	r8, r3, r2
 8010c3e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010c40:	1aa7      	subs	r7, r4, r2
 8010c42:	ae20      	add	r6, sp, #128	; 0x80
 8010c44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010c48:	2500      	movs	r5, #0
 8010c4a:	4545      	cmp	r5, r8
 8010c4c:	dd13      	ble.n	8010c76 <__kernel_rem_pio2+0x86>
 8010c4e:	9b06      	ldr	r3, [sp, #24]
 8010c50:	aa20      	add	r2, sp, #128	; 0x80
 8010c52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010c56:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010c5a:	f04f 0800 	mov.w	r8, #0
 8010c5e:	9b00      	ldr	r3, [sp, #0]
 8010c60:	4598      	cmp	r8, r3
 8010c62:	dc31      	bgt.n	8010cc8 <__kernel_rem_pio2+0xd8>
 8010c64:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010f00 <__kernel_rem_pio2+0x310>
 8010c68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010c6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c70:	462f      	mov	r7, r5
 8010c72:	2600      	movs	r6, #0
 8010c74:	e01b      	b.n	8010cae <__kernel_rem_pio2+0xbe>
 8010c76:	42ef      	cmn	r7, r5
 8010c78:	d407      	bmi.n	8010c8a <__kernel_rem_pio2+0x9a>
 8010c7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010c7e:	f7ef fc61 	bl	8000544 <__aeabi_i2d>
 8010c82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010c86:	3501      	adds	r5, #1
 8010c88:	e7df      	b.n	8010c4a <__kernel_rem_pio2+0x5a>
 8010c8a:	ec51 0b18 	vmov	r0, r1, d8
 8010c8e:	e7f8      	b.n	8010c82 <__kernel_rem_pio2+0x92>
 8010c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010c98:	f7ef fcbe 	bl	8000618 <__aeabi_dmul>
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ca4:	f7ef fb02 	bl	80002ac <__adddf3>
 8010ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cac:	3601      	adds	r6, #1
 8010cae:	9b05      	ldr	r3, [sp, #20]
 8010cb0:	429e      	cmp	r6, r3
 8010cb2:	f1a7 0708 	sub.w	r7, r7, #8
 8010cb6:	ddeb      	ble.n	8010c90 <__kernel_rem_pio2+0xa0>
 8010cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cbc:	f108 0801 	add.w	r8, r8, #1
 8010cc0:	ecab 7b02 	vstmia	fp!, {d7}
 8010cc4:	3508      	adds	r5, #8
 8010cc6:	e7ca      	b.n	8010c5e <__kernel_rem_pio2+0x6e>
 8010cc8:	9b00      	ldr	r3, [sp, #0]
 8010cca:	aa0c      	add	r2, sp, #48	; 0x30
 8010ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cd2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010cd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010cd8:	9c00      	ldr	r4, [sp, #0]
 8010cda:	930a      	str	r3, [sp, #40]	; 0x28
 8010cdc:	00e3      	lsls	r3, r4, #3
 8010cde:	9308      	str	r3, [sp, #32]
 8010ce0:	ab98      	add	r3, sp, #608	; 0x260
 8010ce2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ce6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010cea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010cee:	ab70      	add	r3, sp, #448	; 0x1c0
 8010cf0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010cf4:	46c3      	mov	fp, r8
 8010cf6:	46a1      	mov	r9, r4
 8010cf8:	f1b9 0f00 	cmp.w	r9, #0
 8010cfc:	f1a5 0508 	sub.w	r5, r5, #8
 8010d00:	dc77      	bgt.n	8010df2 <__kernel_rem_pio2+0x202>
 8010d02:	ec47 6b10 	vmov	d0, r6, r7
 8010d06:	4650      	mov	r0, sl
 8010d08:	f000 fac2 	bl	8011290 <scalbn>
 8010d0c:	ec57 6b10 	vmov	r6, r7, d0
 8010d10:	2200      	movs	r2, #0
 8010d12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010d16:	ee10 0a10 	vmov	r0, s0
 8010d1a:	4639      	mov	r1, r7
 8010d1c:	f7ef fc7c 	bl	8000618 <__aeabi_dmul>
 8010d20:	ec41 0b10 	vmov	d0, r0, r1
 8010d24:	f7ff f8bc 	bl	800fea0 <floor>
 8010d28:	4b7a      	ldr	r3, [pc, #488]	; (8010f14 <__kernel_rem_pio2+0x324>)
 8010d2a:	ec51 0b10 	vmov	r0, r1, d0
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f7ef fc72 	bl	8000618 <__aeabi_dmul>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4630      	mov	r0, r6
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	f7ef fab4 	bl	80002a8 <__aeabi_dsub>
 8010d40:	460f      	mov	r7, r1
 8010d42:	4606      	mov	r6, r0
 8010d44:	f7ef ff18 	bl	8000b78 <__aeabi_d2iz>
 8010d48:	9002      	str	r0, [sp, #8]
 8010d4a:	f7ef fbfb 	bl	8000544 <__aeabi_i2d>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	4630      	mov	r0, r6
 8010d54:	4639      	mov	r1, r7
 8010d56:	f7ef faa7 	bl	80002a8 <__aeabi_dsub>
 8010d5a:	f1ba 0f00 	cmp.w	sl, #0
 8010d5e:	4606      	mov	r6, r0
 8010d60:	460f      	mov	r7, r1
 8010d62:	dd6d      	ble.n	8010e40 <__kernel_rem_pio2+0x250>
 8010d64:	1e61      	subs	r1, r4, #1
 8010d66:	ab0c      	add	r3, sp, #48	; 0x30
 8010d68:	9d02      	ldr	r5, [sp, #8]
 8010d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d6e:	f1ca 0018 	rsb	r0, sl, #24
 8010d72:	fa43 f200 	asr.w	r2, r3, r0
 8010d76:	4415      	add	r5, r2
 8010d78:	4082      	lsls	r2, r0
 8010d7a:	1a9b      	subs	r3, r3, r2
 8010d7c:	aa0c      	add	r2, sp, #48	; 0x30
 8010d7e:	9502      	str	r5, [sp, #8]
 8010d80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010d84:	f1ca 0217 	rsb	r2, sl, #23
 8010d88:	fa43 fb02 	asr.w	fp, r3, r2
 8010d8c:	f1bb 0f00 	cmp.w	fp, #0
 8010d90:	dd65      	ble.n	8010e5e <__kernel_rem_pio2+0x26e>
 8010d92:	9b02      	ldr	r3, [sp, #8]
 8010d94:	2200      	movs	r2, #0
 8010d96:	3301      	adds	r3, #1
 8010d98:	9302      	str	r3, [sp, #8]
 8010d9a:	4615      	mov	r5, r2
 8010d9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010da0:	4294      	cmp	r4, r2
 8010da2:	f300 809f 	bgt.w	8010ee4 <__kernel_rem_pio2+0x2f4>
 8010da6:	f1ba 0f00 	cmp.w	sl, #0
 8010daa:	dd07      	ble.n	8010dbc <__kernel_rem_pio2+0x1cc>
 8010dac:	f1ba 0f01 	cmp.w	sl, #1
 8010db0:	f000 80c1 	beq.w	8010f36 <__kernel_rem_pio2+0x346>
 8010db4:	f1ba 0f02 	cmp.w	sl, #2
 8010db8:	f000 80c7 	beq.w	8010f4a <__kernel_rem_pio2+0x35a>
 8010dbc:	f1bb 0f02 	cmp.w	fp, #2
 8010dc0:	d14d      	bne.n	8010e5e <__kernel_rem_pio2+0x26e>
 8010dc2:	4632      	mov	r2, r6
 8010dc4:	463b      	mov	r3, r7
 8010dc6:	4954      	ldr	r1, [pc, #336]	; (8010f18 <__kernel_rem_pio2+0x328>)
 8010dc8:	2000      	movs	r0, #0
 8010dca:	f7ef fa6d 	bl	80002a8 <__aeabi_dsub>
 8010dce:	4606      	mov	r6, r0
 8010dd0:	460f      	mov	r7, r1
 8010dd2:	2d00      	cmp	r5, #0
 8010dd4:	d043      	beq.n	8010e5e <__kernel_rem_pio2+0x26e>
 8010dd6:	4650      	mov	r0, sl
 8010dd8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010f08 <__kernel_rem_pio2+0x318>
 8010ddc:	f000 fa58 	bl	8011290 <scalbn>
 8010de0:	4630      	mov	r0, r6
 8010de2:	4639      	mov	r1, r7
 8010de4:	ec53 2b10 	vmov	r2, r3, d0
 8010de8:	f7ef fa5e 	bl	80002a8 <__aeabi_dsub>
 8010dec:	4606      	mov	r6, r0
 8010dee:	460f      	mov	r7, r1
 8010df0:	e035      	b.n	8010e5e <__kernel_rem_pio2+0x26e>
 8010df2:	4b4a      	ldr	r3, [pc, #296]	; (8010f1c <__kernel_rem_pio2+0x32c>)
 8010df4:	2200      	movs	r2, #0
 8010df6:	4630      	mov	r0, r6
 8010df8:	4639      	mov	r1, r7
 8010dfa:	f7ef fc0d 	bl	8000618 <__aeabi_dmul>
 8010dfe:	f7ef febb 	bl	8000b78 <__aeabi_d2iz>
 8010e02:	f7ef fb9f 	bl	8000544 <__aeabi_i2d>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	ec43 2b18 	vmov	d8, r2, r3
 8010e0e:	4b44      	ldr	r3, [pc, #272]	; (8010f20 <__kernel_rem_pio2+0x330>)
 8010e10:	2200      	movs	r2, #0
 8010e12:	f7ef fc01 	bl	8000618 <__aeabi_dmul>
 8010e16:	4602      	mov	r2, r0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	4639      	mov	r1, r7
 8010e1e:	f7ef fa43 	bl	80002a8 <__aeabi_dsub>
 8010e22:	f7ef fea9 	bl	8000b78 <__aeabi_d2iz>
 8010e26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e2a:	f84b 0b04 	str.w	r0, [fp], #4
 8010e2e:	ec51 0b18 	vmov	r0, r1, d8
 8010e32:	f7ef fa3b 	bl	80002ac <__adddf3>
 8010e36:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	460f      	mov	r7, r1
 8010e3e:	e75b      	b.n	8010cf8 <__kernel_rem_pio2+0x108>
 8010e40:	d106      	bne.n	8010e50 <__kernel_rem_pio2+0x260>
 8010e42:	1e63      	subs	r3, r4, #1
 8010e44:	aa0c      	add	r2, sp, #48	; 0x30
 8010e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e4a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010e4e:	e79d      	b.n	8010d8c <__kernel_rem_pio2+0x19c>
 8010e50:	4b34      	ldr	r3, [pc, #208]	; (8010f24 <__kernel_rem_pio2+0x334>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	f7ef fe66 	bl	8000b24 <__aeabi_dcmpge>
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	d140      	bne.n	8010ede <__kernel_rem_pio2+0x2ee>
 8010e5c:	4683      	mov	fp, r0
 8010e5e:	2200      	movs	r2, #0
 8010e60:	2300      	movs	r3, #0
 8010e62:	4630      	mov	r0, r6
 8010e64:	4639      	mov	r1, r7
 8010e66:	f7ef fe3f 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	f000 80c1 	beq.w	8010ff2 <__kernel_rem_pio2+0x402>
 8010e70:	1e65      	subs	r5, r4, #1
 8010e72:	462b      	mov	r3, r5
 8010e74:	2200      	movs	r2, #0
 8010e76:	9900      	ldr	r1, [sp, #0]
 8010e78:	428b      	cmp	r3, r1
 8010e7a:	da6d      	bge.n	8010f58 <__kernel_rem_pio2+0x368>
 8010e7c:	2a00      	cmp	r2, #0
 8010e7e:	f000 808a 	beq.w	8010f96 <__kernel_rem_pio2+0x3a6>
 8010e82:	ab0c      	add	r3, sp, #48	; 0x30
 8010e84:	f1aa 0a18 	sub.w	sl, sl, #24
 8010e88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f000 80ae 	beq.w	8010fee <__kernel_rem_pio2+0x3fe>
 8010e92:	4650      	mov	r0, sl
 8010e94:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010f08 <__kernel_rem_pio2+0x318>
 8010e98:	f000 f9fa 	bl	8011290 <scalbn>
 8010e9c:	1c6b      	adds	r3, r5, #1
 8010e9e:	00da      	lsls	r2, r3, #3
 8010ea0:	9205      	str	r2, [sp, #20]
 8010ea2:	ec57 6b10 	vmov	r6, r7, d0
 8010ea6:	aa70      	add	r2, sp, #448	; 0x1c0
 8010ea8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010f1c <__kernel_rem_pio2+0x32c>
 8010eac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010eb0:	462c      	mov	r4, r5
 8010eb2:	f04f 0800 	mov.w	r8, #0
 8010eb6:	2c00      	cmp	r4, #0
 8010eb8:	f280 80d4 	bge.w	8011064 <__kernel_rem_pio2+0x474>
 8010ebc:	462c      	mov	r4, r5
 8010ebe:	2c00      	cmp	r4, #0
 8010ec0:	f2c0 8102 	blt.w	80110c8 <__kernel_rem_pio2+0x4d8>
 8010ec4:	4b18      	ldr	r3, [pc, #96]	; (8010f28 <__kernel_rem_pio2+0x338>)
 8010ec6:	461e      	mov	r6, r3
 8010ec8:	ab70      	add	r3, sp, #448	; 0x1c0
 8010eca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010ece:	1b2b      	subs	r3, r5, r4
 8010ed0:	f04f 0900 	mov.w	r9, #0
 8010ed4:	f04f 0a00 	mov.w	sl, #0
 8010ed8:	2700      	movs	r7, #0
 8010eda:	9306      	str	r3, [sp, #24]
 8010edc:	e0e6      	b.n	80110ac <__kernel_rem_pio2+0x4bc>
 8010ede:	f04f 0b02 	mov.w	fp, #2
 8010ee2:	e756      	b.n	8010d92 <__kernel_rem_pio2+0x1a2>
 8010ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ee8:	bb05      	cbnz	r5, 8010f2c <__kernel_rem_pio2+0x33c>
 8010eea:	b123      	cbz	r3, 8010ef6 <__kernel_rem_pio2+0x306>
 8010eec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010ef0:	f8c8 3000 	str.w	r3, [r8]
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	3201      	adds	r2, #1
 8010ef8:	f108 0804 	add.w	r8, r8, #4
 8010efc:	461d      	mov	r5, r3
 8010efe:	e74f      	b.n	8010da0 <__kernel_rem_pio2+0x1b0>
	...
 8010f0c:	3ff00000 	.word	0x3ff00000
 8010f10:	080130e0 	.word	0x080130e0
 8010f14:	40200000 	.word	0x40200000
 8010f18:	3ff00000 	.word	0x3ff00000
 8010f1c:	3e700000 	.word	0x3e700000
 8010f20:	41700000 	.word	0x41700000
 8010f24:	3fe00000 	.word	0x3fe00000
 8010f28:	080130a0 	.word	0x080130a0
 8010f2c:	1acb      	subs	r3, r1, r3
 8010f2e:	f8c8 3000 	str.w	r3, [r8]
 8010f32:	462b      	mov	r3, r5
 8010f34:	e7df      	b.n	8010ef6 <__kernel_rem_pio2+0x306>
 8010f36:	1e62      	subs	r2, r4, #1
 8010f38:	ab0c      	add	r3, sp, #48	; 0x30
 8010f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010f42:	a90c      	add	r1, sp, #48	; 0x30
 8010f44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010f48:	e738      	b.n	8010dbc <__kernel_rem_pio2+0x1cc>
 8010f4a:	1e62      	subs	r2, r4, #1
 8010f4c:	ab0c      	add	r3, sp, #48	; 0x30
 8010f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f52:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010f56:	e7f4      	b.n	8010f42 <__kernel_rem_pio2+0x352>
 8010f58:	a90c      	add	r1, sp, #48	; 0x30
 8010f5a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	430a      	orrs	r2, r1
 8010f62:	e788      	b.n	8010e76 <__kernel_rem_pio2+0x286>
 8010f64:	3301      	adds	r3, #1
 8010f66:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010f6a:	2900      	cmp	r1, #0
 8010f6c:	d0fa      	beq.n	8010f64 <__kernel_rem_pio2+0x374>
 8010f6e:	9a08      	ldr	r2, [sp, #32]
 8010f70:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010f74:	446a      	add	r2, sp
 8010f76:	3a98      	subs	r2, #152	; 0x98
 8010f78:	9208      	str	r2, [sp, #32]
 8010f7a:	9a06      	ldr	r2, [sp, #24]
 8010f7c:	a920      	add	r1, sp, #128	; 0x80
 8010f7e:	18a2      	adds	r2, r4, r2
 8010f80:	18e3      	adds	r3, r4, r3
 8010f82:	f104 0801 	add.w	r8, r4, #1
 8010f86:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010f8a:	9302      	str	r3, [sp, #8]
 8010f8c:	9b02      	ldr	r3, [sp, #8]
 8010f8e:	4543      	cmp	r3, r8
 8010f90:	da04      	bge.n	8010f9c <__kernel_rem_pio2+0x3ac>
 8010f92:	461c      	mov	r4, r3
 8010f94:	e6a2      	b.n	8010cdc <__kernel_rem_pio2+0xec>
 8010f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f98:	2301      	movs	r3, #1
 8010f9a:	e7e4      	b.n	8010f66 <__kernel_rem_pio2+0x376>
 8010f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f9e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010fa2:	f7ef facf 	bl	8000544 <__aeabi_i2d>
 8010fa6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fac:	46ab      	mov	fp, r5
 8010fae:	461c      	mov	r4, r3
 8010fb0:	f04f 0900 	mov.w	r9, #0
 8010fb4:	2600      	movs	r6, #0
 8010fb6:	2700      	movs	r7, #0
 8010fb8:	9b05      	ldr	r3, [sp, #20]
 8010fba:	4599      	cmp	r9, r3
 8010fbc:	dd06      	ble.n	8010fcc <__kernel_rem_pio2+0x3dc>
 8010fbe:	9b08      	ldr	r3, [sp, #32]
 8010fc0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010fc4:	f108 0801 	add.w	r8, r8, #1
 8010fc8:	9308      	str	r3, [sp, #32]
 8010fca:	e7df      	b.n	8010f8c <__kernel_rem_pio2+0x39c>
 8010fcc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010fd0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010fd4:	f7ef fb20 	bl	8000618 <__aeabi_dmul>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	460b      	mov	r3, r1
 8010fdc:	4630      	mov	r0, r6
 8010fde:	4639      	mov	r1, r7
 8010fe0:	f7ef f964 	bl	80002ac <__adddf3>
 8010fe4:	f109 0901 	add.w	r9, r9, #1
 8010fe8:	4606      	mov	r6, r0
 8010fea:	460f      	mov	r7, r1
 8010fec:	e7e4      	b.n	8010fb8 <__kernel_rem_pio2+0x3c8>
 8010fee:	3d01      	subs	r5, #1
 8010ff0:	e747      	b.n	8010e82 <__kernel_rem_pio2+0x292>
 8010ff2:	ec47 6b10 	vmov	d0, r6, r7
 8010ff6:	f1ca 0000 	rsb	r0, sl, #0
 8010ffa:	f000 f949 	bl	8011290 <scalbn>
 8010ffe:	ec57 6b10 	vmov	r6, r7, d0
 8011002:	4ba0      	ldr	r3, [pc, #640]	; (8011284 <__kernel_rem_pio2+0x694>)
 8011004:	ee10 0a10 	vmov	r0, s0
 8011008:	2200      	movs	r2, #0
 801100a:	4639      	mov	r1, r7
 801100c:	f7ef fd8a 	bl	8000b24 <__aeabi_dcmpge>
 8011010:	b1f8      	cbz	r0, 8011052 <__kernel_rem_pio2+0x462>
 8011012:	4b9d      	ldr	r3, [pc, #628]	; (8011288 <__kernel_rem_pio2+0x698>)
 8011014:	2200      	movs	r2, #0
 8011016:	4630      	mov	r0, r6
 8011018:	4639      	mov	r1, r7
 801101a:	f7ef fafd 	bl	8000618 <__aeabi_dmul>
 801101e:	f7ef fdab 	bl	8000b78 <__aeabi_d2iz>
 8011022:	4680      	mov	r8, r0
 8011024:	f7ef fa8e 	bl	8000544 <__aeabi_i2d>
 8011028:	4b96      	ldr	r3, [pc, #600]	; (8011284 <__kernel_rem_pio2+0x694>)
 801102a:	2200      	movs	r2, #0
 801102c:	f7ef faf4 	bl	8000618 <__aeabi_dmul>
 8011030:	460b      	mov	r3, r1
 8011032:	4602      	mov	r2, r0
 8011034:	4639      	mov	r1, r7
 8011036:	4630      	mov	r0, r6
 8011038:	f7ef f936 	bl	80002a8 <__aeabi_dsub>
 801103c:	f7ef fd9c 	bl	8000b78 <__aeabi_d2iz>
 8011040:	1c65      	adds	r5, r4, #1
 8011042:	ab0c      	add	r3, sp, #48	; 0x30
 8011044:	f10a 0a18 	add.w	sl, sl, #24
 8011048:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801104c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011050:	e71f      	b.n	8010e92 <__kernel_rem_pio2+0x2a2>
 8011052:	4630      	mov	r0, r6
 8011054:	4639      	mov	r1, r7
 8011056:	f7ef fd8f 	bl	8000b78 <__aeabi_d2iz>
 801105a:	ab0c      	add	r3, sp, #48	; 0x30
 801105c:	4625      	mov	r5, r4
 801105e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011062:	e716      	b.n	8010e92 <__kernel_rem_pio2+0x2a2>
 8011064:	ab0c      	add	r3, sp, #48	; 0x30
 8011066:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801106a:	f7ef fa6b 	bl	8000544 <__aeabi_i2d>
 801106e:	4632      	mov	r2, r6
 8011070:	463b      	mov	r3, r7
 8011072:	f7ef fad1 	bl	8000618 <__aeabi_dmul>
 8011076:	4642      	mov	r2, r8
 8011078:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801107c:	464b      	mov	r3, r9
 801107e:	4630      	mov	r0, r6
 8011080:	4639      	mov	r1, r7
 8011082:	f7ef fac9 	bl	8000618 <__aeabi_dmul>
 8011086:	3c01      	subs	r4, #1
 8011088:	4606      	mov	r6, r0
 801108a:	460f      	mov	r7, r1
 801108c:	e713      	b.n	8010eb6 <__kernel_rem_pio2+0x2c6>
 801108e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011092:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011096:	f7ef fabf 	bl	8000618 <__aeabi_dmul>
 801109a:	4602      	mov	r2, r0
 801109c:	460b      	mov	r3, r1
 801109e:	4648      	mov	r0, r9
 80110a0:	4651      	mov	r1, sl
 80110a2:	f7ef f903 	bl	80002ac <__adddf3>
 80110a6:	3701      	adds	r7, #1
 80110a8:	4681      	mov	r9, r0
 80110aa:	468a      	mov	sl, r1
 80110ac:	9b00      	ldr	r3, [sp, #0]
 80110ae:	429f      	cmp	r7, r3
 80110b0:	dc02      	bgt.n	80110b8 <__kernel_rem_pio2+0x4c8>
 80110b2:	9b06      	ldr	r3, [sp, #24]
 80110b4:	429f      	cmp	r7, r3
 80110b6:	ddea      	ble.n	801108e <__kernel_rem_pio2+0x49e>
 80110b8:	9a06      	ldr	r2, [sp, #24]
 80110ba:	ab48      	add	r3, sp, #288	; 0x120
 80110bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80110c0:	e9c6 9a00 	strd	r9, sl, [r6]
 80110c4:	3c01      	subs	r4, #1
 80110c6:	e6fa      	b.n	8010ebe <__kernel_rem_pio2+0x2ce>
 80110c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80110ca:	2b02      	cmp	r3, #2
 80110cc:	dc0b      	bgt.n	80110e6 <__kernel_rem_pio2+0x4f6>
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dc39      	bgt.n	8011146 <__kernel_rem_pio2+0x556>
 80110d2:	d05d      	beq.n	8011190 <__kernel_rem_pio2+0x5a0>
 80110d4:	9b02      	ldr	r3, [sp, #8]
 80110d6:	f003 0007 	and.w	r0, r3, #7
 80110da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80110de:	ecbd 8b02 	vpop	{d8}
 80110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80110e8:	2b03      	cmp	r3, #3
 80110ea:	d1f3      	bne.n	80110d4 <__kernel_rem_pio2+0x4e4>
 80110ec:	9b05      	ldr	r3, [sp, #20]
 80110ee:	9500      	str	r5, [sp, #0]
 80110f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80110f4:	eb0d 0403 	add.w	r4, sp, r3
 80110f8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80110fc:	46a2      	mov	sl, r4
 80110fe:	9b00      	ldr	r3, [sp, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	f1aa 0a08 	sub.w	sl, sl, #8
 8011106:	dc69      	bgt.n	80111dc <__kernel_rem_pio2+0x5ec>
 8011108:	46aa      	mov	sl, r5
 801110a:	f1ba 0f01 	cmp.w	sl, #1
 801110e:	f1a4 0408 	sub.w	r4, r4, #8
 8011112:	f300 8083 	bgt.w	801121c <__kernel_rem_pio2+0x62c>
 8011116:	9c05      	ldr	r4, [sp, #20]
 8011118:	ab48      	add	r3, sp, #288	; 0x120
 801111a:	441c      	add	r4, r3
 801111c:	2000      	movs	r0, #0
 801111e:	2100      	movs	r1, #0
 8011120:	2d01      	cmp	r5, #1
 8011122:	f300 809a 	bgt.w	801125a <__kernel_rem_pio2+0x66a>
 8011126:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801112a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801112e:	f1bb 0f00 	cmp.w	fp, #0
 8011132:	f040 8098 	bne.w	8011266 <__kernel_rem_pio2+0x676>
 8011136:	9b04      	ldr	r3, [sp, #16]
 8011138:	e9c3 7800 	strd	r7, r8, [r3]
 801113c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011140:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011144:	e7c6      	b.n	80110d4 <__kernel_rem_pio2+0x4e4>
 8011146:	9e05      	ldr	r6, [sp, #20]
 8011148:	ab48      	add	r3, sp, #288	; 0x120
 801114a:	441e      	add	r6, r3
 801114c:	462c      	mov	r4, r5
 801114e:	2000      	movs	r0, #0
 8011150:	2100      	movs	r1, #0
 8011152:	2c00      	cmp	r4, #0
 8011154:	da33      	bge.n	80111be <__kernel_rem_pio2+0x5ce>
 8011156:	f1bb 0f00 	cmp.w	fp, #0
 801115a:	d036      	beq.n	80111ca <__kernel_rem_pio2+0x5da>
 801115c:	4602      	mov	r2, r0
 801115e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011162:	9c04      	ldr	r4, [sp, #16]
 8011164:	e9c4 2300 	strd	r2, r3, [r4]
 8011168:	4602      	mov	r2, r0
 801116a:	460b      	mov	r3, r1
 801116c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011170:	f7ef f89a 	bl	80002a8 <__aeabi_dsub>
 8011174:	ae4a      	add	r6, sp, #296	; 0x128
 8011176:	2401      	movs	r4, #1
 8011178:	42a5      	cmp	r5, r4
 801117a:	da29      	bge.n	80111d0 <__kernel_rem_pio2+0x5e0>
 801117c:	f1bb 0f00 	cmp.w	fp, #0
 8011180:	d002      	beq.n	8011188 <__kernel_rem_pio2+0x598>
 8011182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011186:	4619      	mov	r1, r3
 8011188:	9b04      	ldr	r3, [sp, #16]
 801118a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801118e:	e7a1      	b.n	80110d4 <__kernel_rem_pio2+0x4e4>
 8011190:	9c05      	ldr	r4, [sp, #20]
 8011192:	ab48      	add	r3, sp, #288	; 0x120
 8011194:	441c      	add	r4, r3
 8011196:	2000      	movs	r0, #0
 8011198:	2100      	movs	r1, #0
 801119a:	2d00      	cmp	r5, #0
 801119c:	da09      	bge.n	80111b2 <__kernel_rem_pio2+0x5c2>
 801119e:	f1bb 0f00 	cmp.w	fp, #0
 80111a2:	d002      	beq.n	80111aa <__kernel_rem_pio2+0x5ba>
 80111a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111a8:	4619      	mov	r1, r3
 80111aa:	9b04      	ldr	r3, [sp, #16]
 80111ac:	e9c3 0100 	strd	r0, r1, [r3]
 80111b0:	e790      	b.n	80110d4 <__kernel_rem_pio2+0x4e4>
 80111b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80111b6:	f7ef f879 	bl	80002ac <__adddf3>
 80111ba:	3d01      	subs	r5, #1
 80111bc:	e7ed      	b.n	801119a <__kernel_rem_pio2+0x5aa>
 80111be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80111c2:	f7ef f873 	bl	80002ac <__adddf3>
 80111c6:	3c01      	subs	r4, #1
 80111c8:	e7c3      	b.n	8011152 <__kernel_rem_pio2+0x562>
 80111ca:	4602      	mov	r2, r0
 80111cc:	460b      	mov	r3, r1
 80111ce:	e7c8      	b.n	8011162 <__kernel_rem_pio2+0x572>
 80111d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80111d4:	f7ef f86a 	bl	80002ac <__adddf3>
 80111d8:	3401      	adds	r4, #1
 80111da:	e7cd      	b.n	8011178 <__kernel_rem_pio2+0x588>
 80111dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80111e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80111e4:	9b00      	ldr	r3, [sp, #0]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	4632      	mov	r2, r6
 80111ec:	463b      	mov	r3, r7
 80111ee:	4640      	mov	r0, r8
 80111f0:	4649      	mov	r1, r9
 80111f2:	f7ef f85b 	bl	80002ac <__adddf3>
 80111f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80111fa:	4602      	mov	r2, r0
 80111fc:	460b      	mov	r3, r1
 80111fe:	4640      	mov	r0, r8
 8011200:	4649      	mov	r1, r9
 8011202:	f7ef f851 	bl	80002a8 <__aeabi_dsub>
 8011206:	4632      	mov	r2, r6
 8011208:	463b      	mov	r3, r7
 801120a:	f7ef f84f 	bl	80002ac <__adddf3>
 801120e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011212:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011216:	ed8a 7b00 	vstr	d7, [sl]
 801121a:	e770      	b.n	80110fe <__kernel_rem_pio2+0x50e>
 801121c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011220:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011224:	4640      	mov	r0, r8
 8011226:	4632      	mov	r2, r6
 8011228:	463b      	mov	r3, r7
 801122a:	4649      	mov	r1, r9
 801122c:	f7ef f83e 	bl	80002ac <__adddf3>
 8011230:	e9cd 0100 	strd	r0, r1, [sp]
 8011234:	4602      	mov	r2, r0
 8011236:	460b      	mov	r3, r1
 8011238:	4640      	mov	r0, r8
 801123a:	4649      	mov	r1, r9
 801123c:	f7ef f834 	bl	80002a8 <__aeabi_dsub>
 8011240:	4632      	mov	r2, r6
 8011242:	463b      	mov	r3, r7
 8011244:	f7ef f832 	bl	80002ac <__adddf3>
 8011248:	ed9d 7b00 	vldr	d7, [sp]
 801124c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011250:	ed84 7b00 	vstr	d7, [r4]
 8011254:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011258:	e757      	b.n	801110a <__kernel_rem_pio2+0x51a>
 801125a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801125e:	f7ef f825 	bl	80002ac <__adddf3>
 8011262:	3d01      	subs	r5, #1
 8011264:	e75c      	b.n	8011120 <__kernel_rem_pio2+0x530>
 8011266:	9b04      	ldr	r3, [sp, #16]
 8011268:	9a04      	ldr	r2, [sp, #16]
 801126a:	601f      	str	r7, [r3, #0]
 801126c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011270:	605c      	str	r4, [r3, #4]
 8011272:	609d      	str	r5, [r3, #8]
 8011274:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011278:	60d3      	str	r3, [r2, #12]
 801127a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801127e:	6110      	str	r0, [r2, #16]
 8011280:	6153      	str	r3, [r2, #20]
 8011282:	e727      	b.n	80110d4 <__kernel_rem_pio2+0x4e4>
 8011284:	41700000 	.word	0x41700000
 8011288:	3e700000 	.word	0x3e700000
 801128c:	00000000 	.word	0x00000000

08011290 <scalbn>:
 8011290:	b570      	push	{r4, r5, r6, lr}
 8011292:	ec55 4b10 	vmov	r4, r5, d0
 8011296:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801129a:	4606      	mov	r6, r0
 801129c:	462b      	mov	r3, r5
 801129e:	b999      	cbnz	r1, 80112c8 <scalbn+0x38>
 80112a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80112a4:	4323      	orrs	r3, r4
 80112a6:	d03f      	beq.n	8011328 <scalbn+0x98>
 80112a8:	4b35      	ldr	r3, [pc, #212]	; (8011380 <scalbn+0xf0>)
 80112aa:	4629      	mov	r1, r5
 80112ac:	ee10 0a10 	vmov	r0, s0
 80112b0:	2200      	movs	r2, #0
 80112b2:	f7ef f9b1 	bl	8000618 <__aeabi_dmul>
 80112b6:	4b33      	ldr	r3, [pc, #204]	; (8011384 <scalbn+0xf4>)
 80112b8:	429e      	cmp	r6, r3
 80112ba:	4604      	mov	r4, r0
 80112bc:	460d      	mov	r5, r1
 80112be:	da10      	bge.n	80112e2 <scalbn+0x52>
 80112c0:	a327      	add	r3, pc, #156	; (adr r3, 8011360 <scalbn+0xd0>)
 80112c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c6:	e01f      	b.n	8011308 <scalbn+0x78>
 80112c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80112cc:	4291      	cmp	r1, r2
 80112ce:	d10c      	bne.n	80112ea <scalbn+0x5a>
 80112d0:	ee10 2a10 	vmov	r2, s0
 80112d4:	4620      	mov	r0, r4
 80112d6:	4629      	mov	r1, r5
 80112d8:	f7ee ffe8 	bl	80002ac <__adddf3>
 80112dc:	4604      	mov	r4, r0
 80112de:	460d      	mov	r5, r1
 80112e0:	e022      	b.n	8011328 <scalbn+0x98>
 80112e2:	460b      	mov	r3, r1
 80112e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80112e8:	3936      	subs	r1, #54	; 0x36
 80112ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80112ee:	4296      	cmp	r6, r2
 80112f0:	dd0d      	ble.n	801130e <scalbn+0x7e>
 80112f2:	2d00      	cmp	r5, #0
 80112f4:	a11c      	add	r1, pc, #112	; (adr r1, 8011368 <scalbn+0xd8>)
 80112f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112fa:	da02      	bge.n	8011302 <scalbn+0x72>
 80112fc:	a11c      	add	r1, pc, #112	; (adr r1, 8011370 <scalbn+0xe0>)
 80112fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011302:	a319      	add	r3, pc, #100	; (adr r3, 8011368 <scalbn+0xd8>)
 8011304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011308:	f7ef f986 	bl	8000618 <__aeabi_dmul>
 801130c:	e7e6      	b.n	80112dc <scalbn+0x4c>
 801130e:	1872      	adds	r2, r6, r1
 8011310:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011314:	428a      	cmp	r2, r1
 8011316:	dcec      	bgt.n	80112f2 <scalbn+0x62>
 8011318:	2a00      	cmp	r2, #0
 801131a:	dd08      	ble.n	801132e <scalbn+0x9e>
 801131c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011320:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011324:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011328:	ec45 4b10 	vmov	d0, r4, r5
 801132c:	bd70      	pop	{r4, r5, r6, pc}
 801132e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011332:	da08      	bge.n	8011346 <scalbn+0xb6>
 8011334:	2d00      	cmp	r5, #0
 8011336:	a10a      	add	r1, pc, #40	; (adr r1, 8011360 <scalbn+0xd0>)
 8011338:	e9d1 0100 	ldrd	r0, r1, [r1]
 801133c:	dac0      	bge.n	80112c0 <scalbn+0x30>
 801133e:	a10e      	add	r1, pc, #56	; (adr r1, 8011378 <scalbn+0xe8>)
 8011340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011344:	e7bc      	b.n	80112c0 <scalbn+0x30>
 8011346:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801134a:	3236      	adds	r2, #54	; 0x36
 801134c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011350:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011354:	4620      	mov	r0, r4
 8011356:	4b0c      	ldr	r3, [pc, #48]	; (8011388 <scalbn+0xf8>)
 8011358:	2200      	movs	r2, #0
 801135a:	e7d5      	b.n	8011308 <scalbn+0x78>
 801135c:	f3af 8000 	nop.w
 8011360:	c2f8f359 	.word	0xc2f8f359
 8011364:	01a56e1f 	.word	0x01a56e1f
 8011368:	8800759c 	.word	0x8800759c
 801136c:	7e37e43c 	.word	0x7e37e43c
 8011370:	8800759c 	.word	0x8800759c
 8011374:	fe37e43c 	.word	0xfe37e43c
 8011378:	c2f8f359 	.word	0xc2f8f359
 801137c:	81a56e1f 	.word	0x81a56e1f
 8011380:	43500000 	.word	0x43500000
 8011384:	ffff3cb0 	.word	0xffff3cb0
 8011388:	3c900000 	.word	0x3c900000

0801138c <_init>:
 801138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138e:	bf00      	nop
 8011390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011392:	bc08      	pop	{r3}
 8011394:	469e      	mov	lr, r3
 8011396:	4770      	bx	lr

08011398 <_fini>:
 8011398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139a:	bf00      	nop
 801139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801139e:	bc08      	pop	{r3}
 80113a0:	469e      	mov	lr, r3
 80113a2:	4770      	bx	lr
