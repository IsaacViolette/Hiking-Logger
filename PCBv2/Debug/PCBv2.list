
PCBv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800a548  0800a548  0001a548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d8  0800a9d8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e0  0800a9e0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e4  0800a9e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001ec  0800abd4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800abd4  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001572e  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033cd  00000000  00000000  0003598d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00038d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecc  00000000  00000000  0003a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdd2  00000000  00000000  0003af54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a97c  00000000  00000000  00056d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8b89  00000000  00000000  000716a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ee0  00000000  00000000  0011a22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a530 	.word	0x0800a530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a530 	.word	0x0800a530

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <I2C1_EV_IRQHandler>:
	
	return 0;
}


void I2C1_EV_IRQHandler(void){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	// I2C1->ICR |= 
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fc6f 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f844 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f986 	bl	80011e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ed4:	f000 f88e 	bl	8000ff4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ed8:	f000 f8cc 	bl	8001074 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000edc:	f000 f90a 	bl	80010f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ee0:	f000 f946 	bl	8001170 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000ee4:	f003 ff66 	bl	8004db4 <MX_FATFS_Init>

  	HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eec:	f000 fcd2 	bl	8001894 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000ef0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4916      	ldr	r1, [pc, #88]	; (8000f50 <main+0x90>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f006 f9df 	bl	80072bc <f_mount>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
    if (fres != FR_OK) {
 8000f04:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d000      	beq.n	8000f0e <main+0x4e>
    	while(1);
 8000f0c:	e7fe      	b.n	8000f0c <main+0x4c>
    }

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	221a      	movs	r2, #26
 8000f14:	490f      	ldr	r1, [pc, #60]	; (8000f54 <main+0x94>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fa16 	bl	8007348 <f_open>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487

    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //Copy in a string
    strncpy((char*)readBuf, "", 30);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	221e      	movs	r2, #30
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <main+0x90>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fba6 	bl	800867a <strncpy>
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 30, &bytesWrote);
 8000f2e:	463b      	mov	r3, r7
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f36:	221e      	movs	r2, #30
 8000f38:	f006 fbc4 	bl	80076c4 <f_write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fdaf 	bl	8007aaa <f_close>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
  while(1)
 8000f4c:	e7fe      	b.n	8000f4c <main+0x8c>
 8000f4e:	bf00      	nop
 8000f50:	0800a548 	.word	0x0800a548
 8000f54:	0800a54c 	.word	0x0800a54c

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2244      	movs	r2, #68	; 0x44
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 fb7f 	bl	800866a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f7e:	f001 f907 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f88:	f000 f974 	bl	8001274 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f942 	bl	800223c <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000fbe:	f000 f959 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fd90 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fe6:	f000 f945 	bl	8001274 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3758      	adds	r7, #88	; 0x58
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_I2C1_Init+0x74>)
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <MX_I2C1_Init+0x78>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_I2C1_Init+0x74>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <MX_I2C1_Init+0x7c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_I2C1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_I2C1_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <MX_I2C1_Init+0x74>)
 8001030:	f000 ff6e 	bl	8001f10 <HAL_I2C_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103a:	f000 f91b 	bl	8001274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <MX_I2C1_Init+0x74>)
 8001042:	f001 f800 	bl	8002046 <HAL_I2CEx_ConfigAnalogFilter>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 f912 	bl	8001274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_I2C1_Init+0x74>)
 8001054:	f001 f842 	bl	80020dc <HAL_I2CEx_ConfigDigitalFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 f909 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000208 	.word	0x20000208
 800106c:	40005400 	.word	0x40005400
 8001070:	10909cec 	.word	0x10909cec

08001074 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_I2C2_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_I2C2_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_I2C2_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_I2C2_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_I2C2_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_I2C2_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_I2C2_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_I2C2_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C2_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C2_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MX_I2C2_Init+0x74>)
 80010b0:	f000 ff2e 	bl	8001f10 <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 f8db 	bl	8001274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_I2C2_Init+0x74>)
 80010c2:	f000 ffc0 	bl	8002046 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f8d2 	bl	8001274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_I2C2_Init+0x74>)
 80010d4:	f001 f802 	bl	80020dc <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 f8c9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000025c 	.word	0x2000025c
 80010ec:	40005800 	.word	0x40005800
 80010f0:	10909cec 	.word	0x10909cec

080010f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_SPI1_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_SPI1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_SPI1_Init+0x74>)
 8001100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_SPI1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_SPI1_Init+0x74>)
 800110e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001112:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_SPI1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_SPI1_Init+0x74>)
 8001122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001126:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI1_Init+0x74>)
 800112a:	2230      	movs	r2, #48	; 0x30
 800112c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_SPI1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI1_Init+0x74>)
 8001142:	2207      	movs	r2, #7
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_SPI1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI1_Init+0x74>)
 800114e:	2208      	movs	r2, #8
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_SPI1_Init+0x74>)
 8001154:	f002 f87e 	bl	8003254 <HAL_SPI_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800115e:	f000 f889 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200002b0 	.word	0x200002b0
 800116c:	40013000 	.word	0x40013000

08001170 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 8001176:	4a19      	ldr	r2, [pc, #100]	; (80011dc <MX_USART1_UART_Init+0x6c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 800117c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 80011ae:	2218      	movs	r2, #24
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 80011b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_USART1_UART_Init+0x68>)
 80011c4:	f002 fde4 	bl	8003d90 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80011ce:	f000 f851 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000314 	.word	0x20000314
 80011dc:	40013800 	.word	0x40013800

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_GPIO_Init+0x90>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <MX_GPIO_Init+0x90>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_GPIO_Init+0x90>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_GPIO_Init+0x90>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_GPIO_Init+0x90>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_GPIO_Init+0x90>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_GPIO_Init+0x90>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <MX_GPIO_Init+0x90>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_GPIO_Init+0x90>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f000 fe4b 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800124a:	2310      	movs	r3, #16
 800124c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f000 fcca 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_MspInit+0x44>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6613      	str	r3, [r2, #96]	; 0x60
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6593      	str	r3, [r2, #88]	; 0x58
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b098      	sub	sp, #96	; 0x60
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	2234      	movs	r2, #52	; 0x34
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 f9be 	bl	800866a <memset>
  if(hi2c->Instance==I2C1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <HAL_I2C_MspInit+0x124>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d138      	bne.n	800136a <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fe1f 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f7ff ffb0 	bl	8001274 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a35      	ldr	r2, [pc, #212]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 800132c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001330:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f000 fc56 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6593      	str	r3, [r2, #88]	; 0x58
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001368:	e03b      	b.n	80013e2 <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <HAL_I2C_MspInit+0x12c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d136      	bne.n	80013e2 <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fde1 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 800138c:	f7ff ff72 	bl	8001274 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 80013a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013ba:	2304      	movs	r3, #4
 80013bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <HAL_I2C_MspInit+0x130>)
 80013c6:	f000 fc19 	bl	8001bfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_I2C_MspInit+0x128>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
}
 80013e2:	bf00      	nop
 80013e4:	3760      	adds	r7, #96	; 0x60
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40005800 	.word	0x40005800
 80013f8:	48000400 	.word	0x48000400

080013fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_SPI_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_SPI_MspInit+0x80>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_SPI_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_SPI_MspInit+0x80>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800144e:	23c2      	movs	r3, #194	; 0xc2
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f000 fbc6 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b096      	sub	sp, #88	; 0x58
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2234      	movs	r2, #52	; 0x34
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 f8e2 	bl	800866a <memset>
  if(huart->Instance==USART1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_UART_MspInit+0xb4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d13d      	bne.n	800152c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fd43 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c8:	f7ff fed4 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_UART_MspInit+0xb8>)
 80014ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_UART_MspInit+0xb8>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d6:	6613      	str	r3, [r2, #96]	; 0x60
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_UART_MspInit+0xb8>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_UART_MspInit+0xb8>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <HAL_UART_MspInit+0xb8>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_UART_MspInit+0xb8>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80014fc:	23c0      	movs	r3, #192	; 0xc0
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150c:	2307      	movs	r3, #7
 800150e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001514:	4619      	mov	r1, r3
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <HAL_UART_MspInit+0xbc>)
 8001518:	f000 fb70 	bl	8001bfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2025      	movs	r0, #37	; 0x25
 8001522:	f000 fab6 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001526:	2025      	movs	r0, #37	; 0x25
 8001528:	f000 facf 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3758      	adds	r7, #88	; 0x58
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40013800 	.word	0x40013800
 8001538:	40021000 	.word	0x40021000
 800153c:	48000400 	.word	0x48000400

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f962 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <USART1_IRQHandler+0x10>)
 800159a:	f002 fc47 	bl	8003e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000314 	.word	0x20000314

080015a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_kill>:

int _kill(int pid, int sig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015c2:	f007 f8b7 	bl	8008734 <__errno>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2216      	movs	r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
  return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_exit>:

void _exit (int status)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe7 	bl	80015b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ea:	e7fe      	b.n	80015ea <_exit+0x12>

080015ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
  }

  return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
  }
  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001686:	605a      	str	r2, [r3, #4]
  return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_isatty>:

int _isatty(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f007 f81c 	bl	8008734 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000a000 	.word	0x2000a000
 8001728:	00000400 	.word	0x00000400
 800172c:	2000039c 	.word	0x2000039c
 8001730:	20000538 	.word	0x20000538

08001734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff ffea 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f006 ffdb 	bl	8008740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fb99 	bl	8000ec0 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800179c:	0800a9e8 	.word	0x0800a9e8
  ldr r2, =_sbss
 80017a0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80017a4:	20000538 	.word	0x20000538

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f961 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ba:	200f      	movs	r0, #15
 80017bc:	f000 f80e 	bl	80017dc <HAL_InitTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	e001      	b.n	80017d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017cc:	f7ff fd58 	bl	8001280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_InitTick+0x6c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d023      	beq.n	8001838 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_InitTick+0x70>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_InitTick+0x6c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f96d 	bl	8001ae6 <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d809      	bhi.n	800182c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 f937 	bl	8001a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_InitTick+0x74>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e007      	b.n	800183c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e004      	b.n	800183c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e001      	b.n	800183c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	200003a0 	.word	0x200003a0

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200003a0 	.word	0x200003a0

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff3e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff31 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d008      	beq.n	8001b28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e022      	b.n	8001b6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020e 	bic.w	r2, r2, #14
 8001b36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f003 021c 	and.w	r2, r3, #28
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d005      	beq.n	8001b9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e029      	b.n	8001bf2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020e 	bic.w	r2, r2, #14
 8001bac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f003 021c 	and.w	r2, r3, #28
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
    }
  }
  return status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e14e      	b.n	8001eaa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8140 	beq.w	8001ea4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x40>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 809a 	beq.w	8001ea4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	4a54      	ldr	r2, [pc, #336]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7c:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d88:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001db2:	d013      	beq.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a46      	ldr	r2, [pc, #280]	; (8001ed0 <HAL_GPIO_Init+0x2d4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1dc>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a45      	ldr	r2, [pc, #276]	; (8001ed4 <HAL_GPIO_Init+0x2d8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1d8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a44      	ldr	r2, [pc, #272]	; (8001ed8 <HAL_GPIO_Init+0x2dc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1d4>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dee:	4937      	ldr	r1, [pc, #220]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e20:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4a:	4a24      	ldr	r2, [pc, #144]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f aea9 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	48000800 	.word	0x48000800
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e08d      	b.n	800203e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f9c6 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	; 0x24
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d108      	bne.n	8001fb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	e007      	b.n	8001fc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b20      	cmp	r3, #32
 800205a:	d138      	bne.n	80020ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002066:	2302      	movs	r3, #2
 8002068:	e032      	b.n	80020d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2224      	movs	r2, #36	; 0x24
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002098:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
  }
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d139      	bne.n	8002166 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e033      	b.n	8002168 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800212e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
  }
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_PWREx_GetVoltageRange+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d130      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ac:	d038      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2232      	movs	r2, #50	; 0x32
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d102      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f2      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d110      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e00f      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d007      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	20000000 	.word	0x20000000
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f000 bc4f 	b.w	8002aee <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002250:	4b97      	ldr	r3, [pc, #604]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225a:	4b95      	ldr	r3, [pc, #596]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80e6 	beq.w	800243e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_RCC_OscConfig+0x4c>
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	f040 808d 	bne.w	800239a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 8089 	bne.w	800239a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002288:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_RCC_OscConfig+0x66>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f000 bc26 	b.w	8002aee <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a6:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_RCC_OscConfig+0x80>
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_OscConfig+0x8c>
 80022bc:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d224      	bcs.n	8002316 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fdd9 	bl	8002e88 <RCC_SetFlashLatencyFromMSIRange>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f000 bc06 	b.w	8002aee <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	496d      	ldr	r1, [pc, #436]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4968      	ldr	r1, [pc, #416]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e025      	b.n	8002362 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002316:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a65      	ldr	r2, [pc, #404]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	4960      	ldr	r1, [pc, #384]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002334:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	495b      	ldr	r1, [pc, #364]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fd98 	bl	8002e88 <RCC_SetFlashLatencyFromMSIRange>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3c5      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002362:	f000 fccd 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	4950      	ldr	r1, [pc, #320]	; (80024b4 <HAL_RCC_OscConfig+0x278>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a4e      	ldr	r2, [pc, #312]	; (80024b8 <HAL_RCC_OscConfig+0x27c>)
 8002380:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002382:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fa28 	bl	80017dc <HAL_InitTick>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d052      	beq.n	800243c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	e3a9      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ae:	f7ff fa65 	bl	800187c <HAL_GetTick>
 80023b2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b6:	f7ff fa61 	bl	800187c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e392      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	4930      	ldr	r1, [pc, #192]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f2:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	492b      	ldr	r1, [pc, #172]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
 8002406:	e01a      	b.n	800243e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002414:	f7ff fa32 	bl	800187c <HAL_GetTick>
 8002418:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800241c:	f7ff fa2e 	bl	800187c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e35f      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1e0>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d073      	beq.n	8002532 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x220>
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d10e      	bne.n	8002474 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d063      	beq.n	8002530 <HAL_RCC_OscConfig+0x2f4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d15f      	bne.n	8002530 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e33c      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x250>
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e025      	b.n	80024d8 <HAL_RCC_OscConfig+0x29c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d114      	bne.n	80024c0 <HAL_RCC_OscConfig+0x284>
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a02      	ldr	r2, [pc, #8]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e013      	b.n	80024d8 <HAL_RCC_OscConfig+0x29c>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	0800a59c 	.word	0x0800a59c
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004
 80024c0:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a8e      	ldr	r2, [pc, #568]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8b      	ldr	r2, [pc, #556]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f9cc 	bl	800187c <HAL_GetTick>
 80024e4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f9c8 	bl	800187c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e2f9      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2ac>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff f9b8 	bl	800187c <HAL_GetTick>
 800250c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff f9b4 	bl	800187c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e2e5      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002522:	4b77      	ldr	r3, [pc, #476]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x2d4>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d060      	beq.n	8002600 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x314>
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d119      	bne.n	800257e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d116      	bne.n	800257e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x32c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e2c2      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b65      	ldr	r3, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4962      	ldr	r1, [pc, #392]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	e040      	b.n	8002600 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d023      	beq.n	80025ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002586:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5d      	ldr	r2, [pc, #372]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff f973 	bl	800187c <HAL_GetTick>
 8002596:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff f96f 	bl	800187c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e2a0      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	4b54      	ldr	r3, [pc, #336]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	494e      	ldr	r1, [pc, #312]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4b      	ldr	r2, [pc, #300]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff f94f 	bl	800187c <HAL_GetTick>
 80025de:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff f94b 	bl	800187c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e27c      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f4:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8082 	beq.w	8002712 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d05f      	beq.n	80026d6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	429a      	cmp	r2, r3
 800262a:	d037      	beq.n	800269c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e254      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01b      	beq.n	8002686 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002654:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265e:	f7ff f90d 	bl	800187c <HAL_GetTick>
 8002662:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002666:	f7ff f909 	bl	800187c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b11      	cmp	r3, #17
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e23a      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ef      	bne.n	8002666 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268c:	f023 0210 	bic.w	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	491a      	ldr	r1, [pc, #104]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7ff f8e6 	bl	800187c <HAL_GetTick>
 80026b0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b4:	f7ff f8e2 	bl	800187c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b11      	cmp	r3, #17
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e213      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCC_OscConfig+0x478>
 80026d4:	e01d      	b.n	8002712 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026dc:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff f8c9 	bl	800187c <HAL_GetTick>
 80026ea:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ee:	f7ff f8c5 	bl	800187c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b11      	cmp	r3, #17
 80026fa:	d903      	bls.n	8002704 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1f6      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
 8002700:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	4ba9      	ldr	r3, [pc, #676]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ed      	bne.n	80026ee <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80bd 	beq.w	800289a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002726:	4ba1      	ldr	r3, [pc, #644]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10e      	bne.n	8002750 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b9e      	ldr	r3, [pc, #632]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	4a9d      	ldr	r2, [pc, #628]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6593      	str	r3, [r2, #88]	; 0x58
 800273e:	4b9b      	ldr	r3, [pc, #620]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002750:	4b97      	ldr	r3, [pc, #604]	; (80029b0 <HAL_RCC_OscConfig+0x774>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d118      	bne.n	800278e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	4b94      	ldr	r3, [pc, #592]	; (80029b0 <HAL_RCC_OscConfig+0x774>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a93      	ldr	r2, [pc, #588]	; (80029b0 <HAL_RCC_OscConfig+0x774>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002768:	f7ff f888 	bl	800187c <HAL_GetTick>
 800276c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7ff f884 	bl	800187c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1b5      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x774>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800279a:	4b84      	ldr	r3, [pc, #528]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	497f      	ldr	r1, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027c0:	4b7a      	ldr	r3, [pc, #488]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a79      	ldr	r2, [pc, #484]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027d0:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4a75      	ldr	r2, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e0:	e018      	b.n	8002814 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027e2:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	4a70      	ldr	r2, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	4a6c      	ldr	r2, [pc, #432]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	4a68      	ldr	r2, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d016      	beq.n	800284a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7ff f82e 	bl	800187c <HAL_GetTick>
 8002820:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7ff f82a 	bl	800187c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e159      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ed      	beq.n	8002824 <HAL_RCC_OscConfig+0x5e8>
 8002848:	e01d      	b.n	8002886 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7ff f817 	bl	800187c <HAL_GetTick>
 800284e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff f813 	bl	800187c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e142      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ed      	bne.n	8002852 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002876:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	4a4b      	ldr	r2, [pc, #300]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800287e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4a46      	ldr	r2, [pc, #280]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03c      	beq.n	8002920 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80028b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b4:	4a3d      	ldr	r2, [pc, #244]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe ffdd 	bl	800187c <HAL_GetTick>
 80028c2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c6:	f7fe ffd9 	bl	800187c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e10a      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028d8:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80028da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ef      	beq.n	80028c6 <HAL_RCC_OscConfig+0x68a>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80028ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe ffc0 	bl	800187c <HAL_GetTick>
 80028fc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002900:	f7fe ffbc 	bl	800187c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0ed      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ef      	bne.n	8002900 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80e1 	beq.w	8002aec <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	2b02      	cmp	r3, #2
 8002930:	f040 80b5 	bne.w	8002a9e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0203 	and.w	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	429a      	cmp	r2, r3
 8002946:	d124      	bne.n	8002992 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	3b01      	subs	r3, #1
 8002954:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d11b      	bne.n	8002992 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d113      	bne.n	8002992 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d109      	bne.n	8002992 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d05f      	beq.n	8002a52 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d05a      	beq.n	8002a4e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a03      	ldr	r2, [pc, #12]	; (80029ac <HAL_RCC_OscConfig+0x770>)
 800299e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a4:	f7fe ff6a 	bl	800187c <HAL_GetTick>
 80029a8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029aa:	e00c      	b.n	80029c6 <HAL_RCC_OscConfig+0x78a>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe ff62 	bl	800187c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e093      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c6:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x8c0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	4311      	orrs	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ec:	0212      	lsls	r2, r2, #8
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0552      	lsls	r2, r2, #21
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a00:	0852      	lsrs	r2, r2, #1
 8002a02:	3a01      	subs	r2, #1
 8002a04:	0652      	lsls	r2, r2, #25
 8002a06:	430a      	orrs	r2, r1
 8002a08:	493b      	ldr	r1, [pc, #236]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a18:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4a36      	ldr	r2, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a24:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a26:	f7fe ff29 	bl	800187c <HAL_GetTick>
 8002a2a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe ff25 	bl	800187c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e056      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4c:	e04e      	b.n	8002aec <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e04d      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d146      	bne.n	8002aec <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a5e:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a68:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a74:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a76:	f7fe ff01 	bl	800187c <HAL_GetTick>
 8002a7a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fefd 	bl	800187c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e02e      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x842>
 8002a9c:	e026      	b.n	8002aec <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d021      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fee4 	bl	800187c <HAL_GetTick>
 8002ab4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fee0 	bl	800187c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e011      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_RCC_OscConfig+0x8bc>)
 8002adc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ae0:	f023 0303 	bic.w	r3, r3, #3
 8002ae4:	60d3      	str	r3, [r2, #12]
 8002ae6:	e001      	b.n	8002aec <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	f99f808c 	.word	0xf99f808c

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0e7      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d910      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b72      	ldr	r3, [pc, #456]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4970      	ldr	r1, [pc, #448]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0cf      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4960      	ldr	r1, [pc, #384]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d04c      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d121      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0a6      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e09a      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb6:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e08e      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e086      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4943      	ldr	r1, [pc, #268]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe fe48 	bl	800187c <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fe44 	bl	800187c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e06e      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d208      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	492b      	ldr	r1, [pc, #172]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d210      	bcs.n	8002c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 0207 	bic.w	r2, r3, #7
 8002c5c:	4923      	ldr	r1, [pc, #140]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e036      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4918      	ldr	r1, [pc, #96]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4910      	ldr	r1, [pc, #64]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb4:	f000 f824 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1fc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fd7f 	bl	80017dc <HAL_InitTick>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	0800a59c 	.word	0x0800a59c
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000004 	.word	0x20000004

08002d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x34>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d11e      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e005      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d102      	bne.n	8002d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e004      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d134      	bne.n	8002df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d003      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0xac>
 8002da4:	e005      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002da8:	617b      	str	r3, [r7, #20]
      break;
 8002daa:	e005      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dae:	617b      	str	r3, [r7, #20]
      break;
 8002db0:	e002      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	617b      	str	r3, [r7, #20]
      break;
 8002db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	fb03 f202 	mul.w	r2, r3, r2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	0e5b      	lsrs	r3, r3, #25
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	3301      	adds	r3, #1
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002df8:	69bb      	ldr	r3, [r7, #24]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	0800a5b4 	.word	0x0800a5b4
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200

08002e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e34:	f7ff fff0 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	0800a5ac 	.word	0x0800a5ac

08002e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e60:	f7ff ffda 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0adb      	lsrs	r3, r3, #11
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	0800a5ac 	.word	0x0800a5ac

08002e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ea0:	f7ff f968 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002ea4:	6178      	str	r0, [r7, #20]
 8002ea6:	e014      	b.n	8002ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ec0:	f7ff f958 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed8:	d10b      	bne.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d919      	bls.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ee4:	d902      	bls.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	e013      	b.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eec:	2301      	movs	r3, #1
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e010      	b.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d902      	bls.n	8002efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ef8:	2303      	movs	r3, #3
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	e00a      	b.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d102      	bne.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f04:	2302      	movs	r3, #2
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	e004      	b.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b70      	cmp	r3, #112	; 0x70
 8002f0e:	d101      	bne.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f10:	2301      	movs	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	4909      	ldr	r1, [pc, #36]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d001      	beq.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f50:	2300      	movs	r3, #0
 8002f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f54:	2300      	movs	r3, #0
 8002f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 809e 	beq.w	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6a:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	4a3f      	ldr	r2, [pc, #252]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f9c:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a39      	ldr	r2, [pc, #228]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fc68 	bl	800187c <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fae:	e009      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb0:	f7fe fc64 	bl	800187c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ef      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d15a      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01e      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d019      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d016      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fc24 	bl	800187c <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003036:	e00b      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe fc20 	bl	800187c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d902      	bls.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	74fb      	strb	r3, [r7, #19]
            break;
 800304e:	e006      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ec      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800307a:	e009      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
 8003080:	e006      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003090:	7c7b      	ldrb	r3, [r7, #17]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ae:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f023 0203 	bic.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4964      	ldr	r1, [pc, #400]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d0:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f023 020c 	bic.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	495c      	ldr	r1, [pc, #368]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4953      	ldr	r1, [pc, #332]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003114:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	494b      	ldr	r1, [pc, #300]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003136:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4942      	ldr	r1, [pc, #264]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003158:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	493a      	ldr	r1, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	4931      	ldr	r1, [pc, #196]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800319c:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	4929      	ldr	r1, [pc, #164]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4920      	ldr	r1, [pc, #128]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	4918      	ldr	r1, [pc, #96]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fe:	d105      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003236:	d105      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003242:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003244:	7cbb      	ldrb	r3, [r7, #18]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e095      	b.n	8003392 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003276:	d009      	beq.n	800328c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
 800327e:	e005      	b.n	800328c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe f8a8 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032cc:	d902      	bls.n	80032d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e002      	b.n	80032da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032e2:	d007      	beq.n	80032f4 <HAL_SPI_Init+0xa0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	ea42 0103 	orr.w	r1, r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0204 	and.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003370:	ea42 0103 	orr.w	r1, r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b088      	sub	sp, #32
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_SPI_Transmit+0x22>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e15f      	b.n	800367c <HAL_SPI_Transmit+0x2e2>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c4:	f7fe fa5a 	bl	800187c <HAL_GetTick>
 80033c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d002      	beq.n	80033e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033da:	2302      	movs	r3, #2
 80033dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033de:	e148      	b.n	8003672 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Transmit+0x52>
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f0:	e13f      	b.n	8003672 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343c:	d10f      	bne.n	800345e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d007      	beq.n	800347c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003484:	d94f      	bls.n	8003526 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_SPI_Transmit+0xfa>
 800348e:	8afb      	ldrh	r3, [r7, #22]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d142      	bne.n	800351a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034b8:	e02f      	b.n	800351a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d112      	bne.n	80034ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034ec:	e015      	b.n	800351a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ee:	f7fe f9c5 	bl	800187c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d803      	bhi.n	8003506 <HAL_SPI_Transmit+0x16c>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d102      	bne.n	800350c <HAL_SPI_Transmit+0x172>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003518:	e0ab      	b.n	8003672 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ca      	bne.n	80034ba <HAL_SPI_Transmit+0x120>
 8003524:	e080      	b.n	8003628 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x19a>
 800352e:	8afb      	ldrh	r3, [r7, #22]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d174      	bne.n	800361e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d912      	bls.n	8003564 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	881a      	ldrh	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	1c9a      	adds	r2, r3, #2
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b02      	subs	r3, #2
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003562:	e05c      	b.n	800361e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800358a:	e048      	b.n	800361e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d12b      	bne.n	80035f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d912      	bls.n	80035ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b02      	subs	r3, #2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c8:	e029      	b.n	800361e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f0:	e015      	b.n	800361e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f2:	f7fe f943 	bl	800187c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d803      	bhi.n	800360a <HAL_SPI_Transmit+0x270>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Transmit+0x276>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800361c:	e029      	b.n	8003672 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1b1      	bne.n	800358c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fb69 	bl	8003d04 <SPI_EndRxTxTransaction>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e003      	b.n	8003672 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800367a:	7ffb      	ldrb	r3, [r7, #31]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003692:	2301      	movs	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x26>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e20a      	b.n	8003ac0 <HAL_SPI_TransmitReceive+0x43c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b2:	f7fe f8e3 	bl	800187c <HAL_GetTick>
 80036b6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ce:	7efb      	ldrb	r3, [r7, #27]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d00e      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x6e>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036da:	d106      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x66>
 80036e4:	7efb      	ldrb	r3, [r7, #27]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d003      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036f0:	e1e0      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x80>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x80>
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800370a:	e1d3      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b04      	cmp	r3, #4
 8003716:	d003      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2205      	movs	r2, #5
 800371c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	887a      	ldrh	r2, [r7, #2]
 8003746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003762:	d802      	bhi.n	800376a <HAL_SPI_TransmitReceive+0xe6>
 8003764:	8a3b      	ldrh	r3, [r7, #16]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d908      	bls.n	800377c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	e007      	b.n	800378c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d007      	beq.n	80037aa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b2:	f240 8081 	bls.w	80038b8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_TransmitReceive+0x140>
 80037be:	8a7b      	ldrh	r3, [r7, #18]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d16d      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037e8:	e05a      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11b      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x1ac>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x1ac>
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d113      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d11c      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x1f4>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	b292      	uxth	r2, r2
 8003856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003874:	2301      	movs	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003878:	f7fe f800 	bl	800187c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003884:	429a      	cmp	r2, r3
 8003886:	d80b      	bhi.n	80038a0 <HAL_SPI_TransmitReceive+0x21c>
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d007      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800389e:	e109      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d19f      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x166>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d199      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x166>
 80038b6:	e0e3      	b.n	8003a80 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x244>
 80038c0:	8a7b      	ldrh	r3, [r7, #18]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	f040 80cf 	bne.w	8003a66 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d912      	bls.n	80038f8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b02      	subs	r3, #2
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038f6:	e0b6      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	7812      	ldrb	r2, [r2, #0]
 8003904:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800391e:	e0a2      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d134      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x314>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02f      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x314>
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	2b01      	cmp	r3, #1
 800393c:	d12c      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d912      	bls.n	800396e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	881a      	ldrh	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b02      	subs	r3, #2
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800396c:	e012      	b.n	8003994 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d148      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x3b4>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d042      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d923      	bls.n	8003a06 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	b292      	uxth	r2, r2
 80039ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b02      	subs	r3, #2
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d81f      	bhi.n	8003a34 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	e016      	b.n	8003a34 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f103 020c 	add.w	r2, r3, #12
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	7812      	ldrb	r2, [r2, #0]
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a34:	2301      	movs	r3, #1
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a38:	f7fd ff20 	bl	800187c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d803      	bhi.n	8003a50 <HAL_SPI_TransmitReceive+0x3cc>
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d102      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x3d2>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003a64:	e026      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f af57 	bne.w	8003920 <HAL_SPI_TransmitReceive+0x29c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f47f af50 	bne.w	8003920 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f93d 	bl	8003d04 <SPI_EndRxTxTransaction>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e003      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad8:	f7fd fed0 	bl	800187c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae8:	f7fd fec8 	bl	800187c <HAL_GetTick>
 8003aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aee:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	0d1b      	lsrs	r3, r3, #20
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003afe:	e054      	b.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d050      	beq.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b08:	f7fd feb8 	bl	800187c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d902      	bls.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d13d      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b36:	d111      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b40:	d004      	beq.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d107      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b64:	d10f      	bne.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e017      	b.n	8003bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d19b      	bne.n	8003b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	.word	0x20000000

08003bd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bea:	f7fd fe47 	bl	800187c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bfa:	f7fd fe3f 	bl	800187c <HAL_GetTick>
 8003bfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c08:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00da      	lsls	r2, r3, #3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	0d1b      	lsrs	r3, r3, #20
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c20:	e060      	b.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c28:	d107      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d050      	beq.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c42:	f7fd fe1b 	bl	800187c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d902      	bls.n	8003c58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13d      	bne.n	8003cd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c70:	d111      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7a:	d004      	beq.n	8003c86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d107      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d10f      	bne.n	8003cc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e010      	b.n	8003cf6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d196      	bne.n	8003c22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3728      	adds	r7, #40	; 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff ff5b 	bl	8003bd8 <SPI_WaitFifoStateUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e027      	b.n	8003d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff fec0 	bl	8003ac8 <SPI_WaitFlagStateUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e014      	b.n	8003d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff ff34 	bl	8003bd8 <SPI_WaitFifoStateUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e000      	b.n	8003d88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e040      	b.n	8003e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fb64 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	; 0x24
 8003dbc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fd8c 	bl	80048f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fb2f 	bl	8004440 <UART_SetConfig>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e01b      	b.n	8003e24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fe0b 	bl	8004a38 <UART_CheckIdleState>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b0ba      	sub	sp, #232	; 0xe8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e56:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d115      	bne.n	8003e94 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 82ae 	beq.w	80043e6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
      }
      return;
 8003e92:	e2a8      	b.n	80043e6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8117 	beq.w	80040cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003eae:	4b85      	ldr	r3, [pc, #532]	; (80040c4 <HAL_UART_IRQHandler+0x298>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 810a 	beq.w	80040cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d011      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xbc>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d011      	beq.n	8003f18 <HAL_UART_IRQHandler+0xec>
 8003ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2202      	movs	r2, #2
 8003f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d011      	beq.n	8003f48 <HAL_UART_IRQHandler+0x11c>
 8003f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2204      	movs	r2, #4
 8003f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2208      	movs	r2, #8
 8003f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f7a:	f043 0208 	orr.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x18a>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00c      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8214 	beq.w	80043ea <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004006:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04f      	beq.n	80040ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fe21 	bl	8004c56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d141      	bne.n	80040a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800403c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3308      	adds	r3, #8
 800404a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800404e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800405a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1d9      	bne.n	8004022 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	2b00      	cmp	r3, #0
 8004074:	d013      	beq.n	800409e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <HAL_UART_IRQHandler+0x29c>)
 800407c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fd79 	bl	8001b7a <HAL_DMA_Abort_IT>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d017      	beq.n	80040be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004098:	4610      	mov	r0, r2
 800409a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e00f      	b.n	80040be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9b8 	bl	8004414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e00b      	b.n	80040be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9b4 	bl	8004414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e007      	b.n	80040be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9b0 	bl	8004414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80040bc:	e195      	b.n	80043ea <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040be:	bf00      	nop
    return;
 80040c0:	e193      	b.n	80043ea <HAL_UART_IRQHandler+0x5be>
 80040c2:	bf00      	nop
 80040c4:	04000120 	.word	0x04000120
 80040c8:	08004d1f 	.word	0x08004d1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 814e 	bne.w	8004372 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8147 	beq.w	8004372 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8140 	beq.w	8004372 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	f040 80b8 	bne.w	800427a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004116:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8167 	beq.w	80043ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800412a:	429a      	cmp	r2, r3
 800412c:	f080 815f 	bcs.w	80043ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 8086 	bne.w	8004258 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800417a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1da      	bne.n	800414c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e1      	bne.n	8004196 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	f023 0310 	bic.w	r3, r3, #16
 800422c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800423a:	65bb      	str	r3, [r7, #88]	; 0x58
 800423c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e4      	bne.n	8004218 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fc53 	bl	8001afe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800426a:	b29b      	uxth	r3, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	b29b      	uxth	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8d8 	bl	8004428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004278:	e0b9      	b.n	80043ee <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004286:	b29b      	uxth	r3, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80ab 	beq.w	80043f2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800429c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a6 	beq.w	80043f2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e4      	bne.n	80042a6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	623b      	str	r3, [r7, #32]
   return(result);
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004300:	633a      	str	r2, [r7, #48]	; 0x30
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e3      	bne.n	80042dc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	60fb      	str	r3, [r7, #12]
   return(result);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	69b9      	ldr	r1, [r7, #24]
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	617b      	str	r3, [r7, #20]
   return(result);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e4      	bne.n	8004328 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f85c 	bl	8004428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004370:	e03f      	b.n	80043f2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <HAL_UART_IRQHandler+0x570>
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004392:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fd02 	bl	8004d9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800439a:	e02d      	b.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01c      	beq.n	80043f6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
    }
    return;
 80043c4:	e017      	b.n	80043f6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d012      	beq.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
 80043d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fcb3 	bl	8004d4a <UART_EndTransmit_IT>
    return;
 80043e4:	e008      	b.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043e6:	bf00      	nop
 80043e8:	e006      	b.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043ea:	bf00      	nop
 80043ec:	e004      	b.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043f8:	37e8      	adds	r7, #232	; 0xe8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop

08004400 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004444:	b08a      	sub	sp, #40	; 0x28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4313      	orrs	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b9e      	ldr	r3, [pc, #632]	; (80046e8 <UART_SetConfig+0x2a8>)
 8004470:	4013      	ands	r3, r2
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004478:	430b      	orrs	r3, r1
 800447a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a93      	ldr	r2, [pc, #588]	; (80046ec <UART_SetConfig+0x2ac>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	4313      	orrs	r3, r2
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a8a      	ldr	r2, [pc, #552]	; (80046f0 <UART_SetConfig+0x2b0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d126      	bne.n	8004518 <UART_SetConfig+0xd8>
 80044ca:	4b8a      	ldr	r3, [pc, #552]	; (80046f4 <UART_SetConfig+0x2b4>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d81b      	bhi.n	8004510 <UART_SetConfig+0xd0>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0xa0>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	08004501 	.word	0x08004501
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	08004509 	.word	0x08004509
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e0ab      	b.n	8004650 <UART_SetConfig+0x210>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e0a7      	b.n	8004650 <UART_SetConfig+0x210>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e0a3      	b.n	8004650 <UART_SetConfig+0x210>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e09f      	b.n	8004650 <UART_SetConfig+0x210>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e09b      	b.n	8004650 <UART_SetConfig+0x210>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a76      	ldr	r2, [pc, #472]	; (80046f8 <UART_SetConfig+0x2b8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d138      	bne.n	8004594 <UART_SetConfig+0x154>
 8004522:	4b74      	ldr	r3, [pc, #464]	; (80046f4 <UART_SetConfig+0x2b4>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d82d      	bhi.n	800458c <UART_SetConfig+0x14c>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0xf8>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800456d 	.word	0x0800456d
 800453c:	0800458d 	.word	0x0800458d
 8004540:	0800458d 	.word	0x0800458d
 8004544:	0800458d 	.word	0x0800458d
 8004548:	0800457d 	.word	0x0800457d
 800454c:	0800458d 	.word	0x0800458d
 8004550:	0800458d 	.word	0x0800458d
 8004554:	0800458d 	.word	0x0800458d
 8004558:	08004575 	.word	0x08004575
 800455c:	0800458d 	.word	0x0800458d
 8004560:	0800458d 	.word	0x0800458d
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004585 	.word	0x08004585
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e06d      	b.n	8004650 <UART_SetConfig+0x210>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e069      	b.n	8004650 <UART_SetConfig+0x210>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	e065      	b.n	8004650 <UART_SetConfig+0x210>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e061      	b.n	8004650 <UART_SetConfig+0x210>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e05d      	b.n	8004650 <UART_SetConfig+0x210>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a58      	ldr	r2, [pc, #352]	; (80046fc <UART_SetConfig+0x2bc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d125      	bne.n	80045ea <UART_SetConfig+0x1aa>
 800459e:	4b55      	ldr	r3, [pc, #340]	; (80046f4 <UART_SetConfig+0x2b4>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d016      	beq.n	80045da <UART_SetConfig+0x19a>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d818      	bhi.n	80045e2 <UART_SetConfig+0x1a2>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d00a      	beq.n	80045ca <UART_SetConfig+0x18a>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d814      	bhi.n	80045e2 <UART_SetConfig+0x1a2>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <UART_SetConfig+0x182>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d008      	beq.n	80045d2 <UART_SetConfig+0x192>
 80045c0:	e00f      	b.n	80045e2 <UART_SetConfig+0x1a2>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c8:	e042      	b.n	8004650 <UART_SetConfig+0x210>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d0:	e03e      	b.n	8004650 <UART_SetConfig+0x210>
 80045d2:	2304      	movs	r3, #4
 80045d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d8:	e03a      	b.n	8004650 <UART_SetConfig+0x210>
 80045da:	2308      	movs	r3, #8
 80045dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e0:	e036      	b.n	8004650 <UART_SetConfig+0x210>
 80045e2:	2310      	movs	r3, #16
 80045e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e8:	e032      	b.n	8004650 <UART_SetConfig+0x210>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3f      	ldr	r2, [pc, #252]	; (80046ec <UART_SetConfig+0x2ac>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d12a      	bne.n	800464a <UART_SetConfig+0x20a>
 80045f4:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <UART_SetConfig+0x2b4>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004602:	d01a      	beq.n	800463a <UART_SetConfig+0x1fa>
 8004604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004608:	d81b      	bhi.n	8004642 <UART_SetConfig+0x202>
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460e:	d00c      	beq.n	800462a <UART_SetConfig+0x1ea>
 8004610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004614:	d815      	bhi.n	8004642 <UART_SetConfig+0x202>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <UART_SetConfig+0x1e2>
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d008      	beq.n	8004632 <UART_SetConfig+0x1f2>
 8004620:	e00f      	b.n	8004642 <UART_SetConfig+0x202>
 8004622:	2300      	movs	r3, #0
 8004624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004628:	e012      	b.n	8004650 <UART_SetConfig+0x210>
 800462a:	2302      	movs	r3, #2
 800462c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004630:	e00e      	b.n	8004650 <UART_SetConfig+0x210>
 8004632:	2304      	movs	r3, #4
 8004634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004638:	e00a      	b.n	8004650 <UART_SetConfig+0x210>
 800463a:	2308      	movs	r3, #8
 800463c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004640:	e006      	b.n	8004650 <UART_SetConfig+0x210>
 8004642:	2310      	movs	r3, #16
 8004644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004648:	e002      	b.n	8004650 <UART_SetConfig+0x210>
 800464a:	2310      	movs	r3, #16
 800464c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <UART_SetConfig+0x2ac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	f040 808a 	bne.w	8004770 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800465c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004660:	2b08      	cmp	r3, #8
 8004662:	d824      	bhi.n	80046ae <UART_SetConfig+0x26e>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x22c>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	080046af 	.word	0x080046af
 8004674:	08004699 	.word	0x08004699
 8004678:	080046af 	.word	0x080046af
 800467c:	0800469f 	.word	0x0800469f
 8004680:	080046af 	.word	0x080046af
 8004684:	080046af 	.word	0x080046af
 8004688:	080046af 	.word	0x080046af
 800468c:	080046a7 	.word	0x080046a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fe fbce 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8004694:	61f8      	str	r0, [r7, #28]
        break;
 8004696:	e010      	b.n	80046ba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <UART_SetConfig+0x2c0>)
 800469a:	61fb      	str	r3, [r7, #28]
        break;
 800469c:	e00d      	b.n	80046ba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469e:	f7fe fb2f 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 80046a2:	61f8      	str	r0, [r7, #28]
        break;
 80046a4:	e009      	b.n	80046ba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046aa:	61fb      	str	r3, [r7, #28]
        break;
 80046ac:	e005      	b.n	80046ba <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8109 	beq.w	80048d4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d305      	bcc.n	80046de <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d912      	bls.n	8004704 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046e4:	e0f6      	b.n	80048d4 <UART_SetConfig+0x494>
 80046e6:	bf00      	nop
 80046e8:	efff69f3 	.word	0xefff69f3
 80046ec:	40008000 	.word	0x40008000
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40004400 	.word	0x40004400
 80046fc:	40004800 	.word	0x40004800
 8004700:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2200      	movs	r2, #0
 8004708:	461c      	mov	r4, r3
 800470a:	4615      	mov	r5, r2
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	022b      	lsls	r3, r5, #8
 8004716:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800471a:	0222      	lsls	r2, r4, #8
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	6849      	ldr	r1, [r1, #4]
 8004720:	0849      	lsrs	r1, r1, #1
 8004722:	2000      	movs	r0, #0
 8004724:	4688      	mov	r8, r1
 8004726:	4681      	mov	r9, r0
 8004728:	eb12 0a08 	adds.w	sl, r2, r8
 800472c:	eb43 0b09 	adc.w	fp, r3, r9
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800473e:	4650      	mov	r0, sl
 8004740:	4659      	mov	r1, fp
 8004742:	f7fc fa31 	bl	8000ba8 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4613      	mov	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004754:	d308      	bcc.n	8004768 <UART_SetConfig+0x328>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475c:	d204      	bcs.n	8004768 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	e0b5      	b.n	80048d4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800476e:	e0b1      	b.n	80048d4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004778:	d15d      	bne.n	8004836 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800477a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800477e:	2b08      	cmp	r3, #8
 8004780:	d827      	bhi.n	80047d2 <UART_SetConfig+0x392>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0x348>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047d3 	.word	0x080047d3
 8004798:	080047c3 	.word	0x080047c3
 800479c:	080047d3 	.word	0x080047d3
 80047a0:	080047d3 	.word	0x080047d3
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047cb 	.word	0x080047cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe fb40 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 80047b0:	61f8      	str	r0, [r7, #28]
        break;
 80047b2:	e014      	b.n	80047de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b4:	f7fe fb52 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 80047b8:	61f8      	str	r0, [r7, #28]
        break;
 80047ba:	e010      	b.n	80047de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <UART_SetConfig+0x4b0>)
 80047be:	61fb      	str	r3, [r7, #28]
        break;
 80047c0:	e00d      	b.n	80047de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fe fa9d 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 80047c6:	61f8      	str	r0, [r7, #28]
        break;
 80047c8:	e009      	b.n	80047de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ce:	61fb      	str	r3, [r7, #28]
        break;
 80047d0:	e005      	b.n	80047de <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d077      	beq.n	80048d4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	005a      	lsls	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	441a      	add	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b0f      	cmp	r3, #15
 80047fe:	d916      	bls.n	800482e <UART_SetConfig+0x3ee>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004806:	d212      	bcs.n	800482e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f023 030f 	bic.w	r3, r3, #15
 8004810:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	b29a      	uxth	r2, r3
 800481e:	8afb      	ldrh	r3, [r7, #22]
 8004820:	4313      	orrs	r3, r2
 8004822:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	8afa      	ldrh	r2, [r7, #22]
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	e052      	b.n	80048d4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004834:	e04e      	b.n	80048d4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800483a:	2b08      	cmp	r3, #8
 800483c:	d827      	bhi.n	800488e <UART_SetConfig+0x44e>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0x404>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004869 	.word	0x08004869
 8004848:	08004871 	.word	0x08004871
 800484c:	08004879 	.word	0x08004879
 8004850:	0800488f 	.word	0x0800488f
 8004854:	0800487f 	.word	0x0800487f
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800488f 	.word	0x0800488f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fe fae2 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 800486c:	61f8      	str	r0, [r7, #28]
        break;
 800486e:	e014      	b.n	800489a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7fe faf4 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8004874:	61f8      	str	r0, [r7, #28]
        break;
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <UART_SetConfig+0x4b0>)
 800487a:	61fb      	str	r3, [r7, #28]
        break;
 800487c:	e00d      	b.n	800489a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7fe fa3f 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8004882:	61f8      	str	r0, [r7, #28]
        break;
 8004884:	e009      	b.n	800489a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	61fb      	str	r3, [r7, #28]
        break;
 800488c:	e005      	b.n	800489a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004898:	bf00      	nop
    }

    if (pclk != 0U)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d019      	beq.n	80048d4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	085a      	lsrs	r2, r3, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b0f      	cmp	r3, #15
 80048b8:	d909      	bls.n	80048ce <UART_SetConfig+0x48e>
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c0:	d205      	bcs.n	80048ce <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e002      	b.n	80048d4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3728      	adds	r7, #40	; 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	00f42400 	.word	0x00f42400

080048f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f2:	d10a      	bne.n	8004a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b098      	sub	sp, #96	; 0x60
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a48:	f7fc ff18 	bl	800187c <HAL_GetTick>
 8004a4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d12e      	bne.n	8004aba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a64:	2200      	movs	r2, #0
 8004a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f88c 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d021      	beq.n	8004aba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
 8004a96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e6      	bne.n	8004a76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e062      	b.n	8004b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d149      	bne.n	8004b5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f856 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d03c      	beq.n	8004b5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	623b      	str	r3, [r7, #32]
   return(result);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
 8004b02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b34:	61fa      	str	r2, [r7, #28]
 8004b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	617b      	str	r3, [r7, #20]
   return(result);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e011      	b.n	8004b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3758      	adds	r7, #88	; 0x58
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b98:	e049      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d045      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba2:	f7fc fe6b 	bl	800187c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e048      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d031      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d110      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f838 	bl	8004c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2208      	movs	r2, #8
 8004bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e029      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c08:	d111      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f81e 	bl	8004c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e00f      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d0a6      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b095      	sub	sp, #84	; 0x54
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e6      	bne.n	8004c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d118      	bne.n	8004cfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f023 0310 	bic.w	r3, r3, #16
 8004ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e6      	bne.n	8004ccc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d12:	bf00      	nop
 8004d14:	3754      	adds	r7, #84	; 0x54
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fb69 	bl	8004414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6979      	ldr	r1, [r7, #20]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fb35 	bl	8004400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d96:	bf00      	nop
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004db8:	4904      	ldr	r1, [pc, #16]	; (8004dcc <MX_FATFS_Init+0x18>)
 8004dba:	4805      	ldr	r0, [pc, #20]	; (8004dd0 <MX_FATFS_Init+0x1c>)
 8004dbc:	f002 feec 	bl	8007b98 <FATFS_LinkDriver>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <MX_FATFS_Init+0x20>)
 8004dc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200003a8 	.word	0x200003a8
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	200003a4 	.word	0x200003a4

08004dd8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ddc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f9d1 	bl	800519c <USER_SPI_initialize>
 8004dfa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 faaf 	bl	8005374 <USER_SPI_status>
 8004e16:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004e30:	7bf8      	ldrb	r0, [r7, #15]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	f000 fab2 	bl	80053a0 <USER_SPI_read>
 8004e3c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	4603      	mov	r3, r0
 8004e54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8004e56:	7bf8      	ldrb	r0, [r7, #15]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	f000 fb05 	bl	800546c <USER_SPI_write>
 8004e62:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	603a      	str	r2, [r7, #0]
 8004e76:	71fb      	strb	r3, [r7, #7]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8004e7c:	79b9      	ldrb	r1, [r7, #6]
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fb6e 	bl	8005564 <USER_SPI_ioctl>
 8004e88:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004e9c:	f7fc fcee 	bl	800187c <HAL_GetTick>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <SPI_Timer_On+0x20>)
 8004ea4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <SPI_Timer_On+0x24>)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6013      	str	r3, [r2, #0]
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200003b0 	.word	0x200003b0
 8004eb8:	200003b4 	.word	0x200003b4

08004ebc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004ec0:	f7fc fcdc 	bl	800187c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <SPI_Timer_Status+0x24>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1ad2      	subs	r2, r2, r3
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <SPI_Timer_Status+0x28>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	bf34      	ite	cc
 8004ed4:	2301      	movcc	r3, #1
 8004ed6:	2300      	movcs	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200003b0 	.word	0x200003b0
 8004ee4:	200003b4 	.word	0x200003b4

08004ee8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004ef2:	f107 020f 	add.w	r2, r7, #15
 8004ef6:	1df9      	adds	r1, r7, #7
 8004ef8:	2332      	movs	r3, #50	; 0x32
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2301      	movs	r3, #1
 8004efe:	4804      	ldr	r0, [pc, #16]	; (8004f10 <xchg_spi+0x28>)
 8004f00:	f7fe fbc0 	bl	8003684 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200002b0 	.word	0x200002b0

08004f14 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e00a      	b.n	8004f3a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	18d4      	adds	r4, r2, r3
 8004f2a:	20ff      	movs	r0, #255	; 0xff
 8004f2c:	f7ff ffdc 	bl	8004ee8 <xchg_spi>
 8004f30:	4603      	mov	r3, r0
 8004f32:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3f0      	bcc.n	8004f24 <rcvr_spi_multi+0x10>
	}
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd90      	pop	{r4, r7, pc}

08004f4c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4803      	ldr	r0, [pc, #12]	; (8004f70 <xmit_spi_multi+0x24>)
 8004f62:	f7fe fa1a 	bl	800339a <HAL_SPI_Transmit>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200002b0 	.word	0x200002b0

08004f74 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004f7c:	f7fc fc7e 	bl	800187c <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004f86:	20ff      	movs	r0, #255	; 0xff
 8004f88:	f7ff ffae 	bl	8004ee8 <xchg_spi>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2bff      	cmp	r3, #255	; 0xff
 8004f94:	d007      	beq.n	8004fa6 <wait_ready+0x32>
 8004f96:	f7fc fc71 	bl	800187c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d8ef      	bhi.n	8004f86 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2bff      	cmp	r3, #255	; 0xff
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	2110      	movs	r1, #16
 8004fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc6:	f7fc ff8b 	bl	8001ee0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004fca:	20ff      	movs	r0, #255	; 0xff
 8004fcc:	f7ff ff8c 	bl	8004ee8 <xchg_spi>

}
 8004fd0:	bf00      	nop
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2110      	movs	r1, #16
 8004fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fe0:	f7fc ff7e 	bl	8001ee0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004fe4:	20ff      	movs	r0, #255	; 0xff
 8004fe6:	f7ff ff7f 	bl	8004ee8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fee:	f7ff ffc1 	bl	8004f74 <wait_ready>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <spiselect+0x28>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e002      	b.n	8005002 <spiselect+0x2e>

	despiselect();
 8004ffc:	f7ff ffdd 	bl	8004fba <despiselect>
	return 0;	/* Timeout */
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	bd80      	pop	{r7, pc}

08005006 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005010:	20c8      	movs	r0, #200	; 0xc8
 8005012:	f7ff ff3f 	bl	8004e94 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005016:	20ff      	movs	r0, #255	; 0xff
 8005018:	f7ff ff66 	bl	8004ee8 <xchg_spi>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2bff      	cmp	r3, #255	; 0xff
 8005024:	d104      	bne.n	8005030 <rcvr_datablock+0x2a>
 8005026:	f7ff ff49 	bl	8004ebc <SPI_Timer_Status>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f2      	bne.n	8005016 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2bfe      	cmp	r3, #254	; 0xfe
 8005034:	d001      	beq.n	800503a <rcvr_datablock+0x34>
 8005036:	2300      	movs	r3, #0
 8005038:	e00a      	b.n	8005050 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff69 	bl	8004f14 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005042:	20ff      	movs	r0, #255	; 0xff
 8005044:	f7ff ff50 	bl	8004ee8 <xchg_spi>
 8005048:	20ff      	movs	r0, #255	; 0xff
 800504a:	f7ff ff4d 	bl	8004ee8 <xchg_spi>

	return 1;						/* Function succeeded */
 800504e:	2301      	movs	r3, #1
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005068:	f7ff ff84 	bl	8004f74 <wait_ready>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <xmit_datablock+0x1e>
 8005072:	2300      	movs	r3, #0
 8005074:	e01e      	b.n	80050b4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff35 	bl	8004ee8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	2bfd      	cmp	r3, #253	; 0xfd
 8005082:	d016      	beq.n	80050b2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff5f 	bl	8004f4c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800508e:	20ff      	movs	r0, #255	; 0xff
 8005090:	f7ff ff2a 	bl	8004ee8 <xchg_spi>
 8005094:	20ff      	movs	r0, #255	; 0xff
 8005096:	f7ff ff27 	bl	8004ee8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800509a:	20ff      	movs	r0, #255	; 0xff
 800509c:	f7ff ff24 	bl	8004ee8 <xchg_spi>
 80050a0:	4603      	mov	r3, r0
 80050a2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d001      	beq.n	80050b2 <xmit_datablock+0x5a>
 80050ae:	2300      	movs	r3, #0
 80050b0:	e000      	b.n	80050b4 <xmit_datablock+0x5c>
	}
	return 1;
 80050b2:	2301      	movs	r3, #1
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80050c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	da0e      	bge.n	80050ee <send_cmd+0x32>
		cmd &= 0x7F;
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80050d8:	2100      	movs	r1, #0
 80050da:	2037      	movs	r0, #55	; 0x37
 80050dc:	f7ff ffee 	bl	80050bc <send_cmd>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d901      	bls.n	80050ee <send_cmd+0x32>
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	e051      	b.n	8005192 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d008      	beq.n	8005106 <send_cmd+0x4a>
		despiselect();
 80050f4:	f7ff ff61 	bl	8004fba <despiselect>
		if (!spiselect()) return 0xFF;
 80050f8:	f7ff ff6c 	bl	8004fd4 <spiselect>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <send_cmd+0x4a>
 8005102:	23ff      	movs	r3, #255	; 0xff
 8005104:	e045      	b.n	8005192 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510c:	b2db      	uxtb	r3, r3
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff feea 	bl	8004ee8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fee4 	bl	8004ee8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	b2db      	uxtb	r3, r3
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fede 	bl	8004ee8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	b2db      	uxtb	r3, r3
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fed8 	bl	8004ee8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fed3 	bl	8004ee8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005142:	2301      	movs	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <send_cmd+0x94>
 800514c:	2395      	movs	r3, #149	; 0x95
 800514e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d101      	bne.n	800515a <send_cmd+0x9e>
 8005156:	2387      	movs	r3, #135	; 0x87
 8005158:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fec3 	bl	8004ee8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d102      	bne.n	800516e <send_cmd+0xb2>
 8005168:	20ff      	movs	r0, #255	; 0xff
 800516a:	f7ff febd 	bl	8004ee8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800516e:	230a      	movs	r3, #10
 8005170:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005172:	20ff      	movs	r0, #255	; 0xff
 8005174:	f7ff feb8 	bl	8004ee8 <xchg_spi>
 8005178:	4603      	mov	r3, r0
 800517a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800517c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da05      	bge.n	8005190 <send_cmd+0xd4>
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	3b01      	subs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f0      	bne.n	8005172 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005190:	7bbb      	ldrb	r3, [r7, #14]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <USER_SPI_initialize+0x14>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d6      	b.n	800535e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80051b0:	4b6d      	ldr	r3, [pc, #436]	; (8005368 <USER_SPI_initialize+0x1cc>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <USER_SPI_initialize+0x2a>
 80051be:	4b6a      	ldr	r3, [pc, #424]	; (8005368 <USER_SPI_initialize+0x1cc>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	e0cb      	b.n	800535e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80051c6:	4b69      	ldr	r3, [pc, #420]	; (800536c <USER_SPI_initialize+0x1d0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80051d0:	4b66      	ldr	r3, [pc, #408]	; (800536c <USER_SPI_initialize+0x1d0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80051d8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80051da:	230a      	movs	r3, #10
 80051dc:	73fb      	strb	r3, [r7, #15]
 80051de:	e005      	b.n	80051ec <USER_SPI_initialize+0x50>
 80051e0:	20ff      	movs	r0, #255	; 0xff
 80051e2:	f7ff fe81 	bl	8004ee8 <xchg_spi>
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f6      	bne.n	80051e0 <USER_SPI_initialize+0x44>

	ty = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80051f6:	2100      	movs	r1, #0
 80051f8:	2000      	movs	r0, #0
 80051fa:	f7ff ff5f 	bl	80050bc <send_cmd>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b01      	cmp	r3, #1
 8005202:	f040 808b 	bne.w	800531c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800520a:	f7ff fe43 	bl	8004e94 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800520e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005212:	2008      	movs	r0, #8
 8005214:	f7ff ff52 	bl	80050bc <send_cmd>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d151      	bne.n	80052c2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e00d      	b.n	8005240 <USER_SPI_initialize+0xa4>
 8005224:	7bfc      	ldrb	r4, [r7, #15]
 8005226:	20ff      	movs	r0, #255	; 0xff
 8005228:	f7ff fe5e 	bl	8004ee8 <xchg_spi>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	f104 0310 	add.w	r3, r4, #16
 8005234:	443b      	add	r3, r7
 8005236:	f803 2c08 	strb.w	r2, [r3, #-8]
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	3301      	adds	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d9ee      	bls.n	8005224 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005246:	7abb      	ldrb	r3, [r7, #10]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d167      	bne.n	800531c <USER_SPI_initialize+0x180>
 800524c:	7afb      	ldrb	r3, [r7, #11]
 800524e:	2baa      	cmp	r3, #170	; 0xaa
 8005250:	d164      	bne.n	800531c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005252:	bf00      	nop
 8005254:	f7ff fe32 	bl	8004ebc <SPI_Timer_Status>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <USER_SPI_initialize+0xd2>
 800525e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005262:	20a9      	movs	r0, #169	; 0xa9
 8005264:	f7ff ff2a 	bl	80050bc <send_cmd>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f2      	bne.n	8005254 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800526e:	f7ff fe25 	bl	8004ebc <SPI_Timer_Status>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d051      	beq.n	800531c <USER_SPI_initialize+0x180>
 8005278:	2100      	movs	r1, #0
 800527a:	203a      	movs	r0, #58	; 0x3a
 800527c:	f7ff ff1e 	bl	80050bc <send_cmd>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d14a      	bne.n	800531c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	e00d      	b.n	80052a8 <USER_SPI_initialize+0x10c>
 800528c:	7bfc      	ldrb	r4, [r7, #15]
 800528e:	20ff      	movs	r0, #255	; 0xff
 8005290:	f7ff fe2a 	bl	8004ee8 <xchg_spi>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	f104 0310 	add.w	r3, r4, #16
 800529c:	443b      	add	r3, r7
 800529e:	f803 2c08 	strb.w	r2, [r3, #-8]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	3301      	adds	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d9ee      	bls.n	800528c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80052ae:	7a3b      	ldrb	r3, [r7, #8]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <USER_SPI_initialize+0x120>
 80052b8:	230c      	movs	r3, #12
 80052ba:	e000      	b.n	80052be <USER_SPI_initialize+0x122>
 80052bc:	2304      	movs	r3, #4
 80052be:	737b      	strb	r3, [r7, #13]
 80052c0:	e02c      	b.n	800531c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80052c2:	2100      	movs	r1, #0
 80052c4:	20a9      	movs	r0, #169	; 0xa9
 80052c6:	f7ff fef9 	bl	80050bc <send_cmd>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d804      	bhi.n	80052da <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80052d0:	2302      	movs	r3, #2
 80052d2:	737b      	strb	r3, [r7, #13]
 80052d4:	23a9      	movs	r3, #169	; 0xa9
 80052d6:	73bb      	strb	r3, [r7, #14]
 80052d8:	e003      	b.n	80052e2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80052da:	2301      	movs	r3, #1
 80052dc:	737b      	strb	r3, [r7, #13]
 80052de:	2301      	movs	r3, #1
 80052e0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80052e2:	bf00      	nop
 80052e4:	f7ff fdea 	bl	8004ebc <SPI_Timer_Status>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <USER_SPI_initialize+0x162>
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fee2 	bl	80050bc <send_cmd>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f2      	bne.n	80052e4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80052fe:	f7ff fddd 	bl	8004ebc <SPI_Timer_Status>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <USER_SPI_initialize+0x17c>
 8005308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800530c:	2010      	movs	r0, #16
 800530e:	f7ff fed5 	bl	80050bc <send_cmd>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <USER_SPI_initialize+0x180>
				ty = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <USER_SPI_initialize+0x1d4>)
 800531e:	7b7b      	ldrb	r3, [r7, #13]
 8005320:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005322:	f7ff fe4a 	bl	8004fba <despiselect>

	if (ty) {			/* OK */
 8005326:	7b7b      	ldrb	r3, [r7, #13]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d012      	beq.n	8005352 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <USER_SPI_initialize+0x1d0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <USER_SPI_initialize+0x1d0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0210 	orr.w	r2, r2, #16
 800533e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <USER_SPI_initialize+0x1cc>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <USER_SPI_initialize+0x1cc>)
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	e002      	b.n	8005358 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <USER_SPI_initialize+0x1cc>)
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <USER_SPI_initialize+0x1cc>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	bd90      	pop	{r4, r7, pc}
 8005366:	bf00      	nop
 8005368:	20000020 	.word	0x20000020
 800536c:	200002b0 	.word	0x200002b0
 8005370:	200003ac 	.word	0x200003ac

08005374 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <USER_SPI_status+0x14>
 8005384:	2301      	movs	r3, #1
 8005386:	e002      	b.n	800538e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <USER_SPI_status+0x28>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000020 	.word	0x20000020

080053a0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <USER_SPI_read+0x1c>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USER_SPI_read+0x20>
 80053bc:	2304      	movs	r3, #4
 80053be:	e04d      	b.n	800545c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <USER_SPI_read+0xc4>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <USER_SPI_read+0x32>
 80053ce:	2303      	movs	r3, #3
 80053d0:	e044      	b.n	800545c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <USER_SPI_read+0xc8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <USER_SPI_read+0x44>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	025b      	lsls	r3, r3, #9
 80053e2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d111      	bne.n	800540e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	2011      	movs	r0, #17
 80053ee:	f7ff fe65 	bl	80050bc <send_cmd>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d129      	bne.n	800544c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80053f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	f7ff fe02 	bl	8005006 <rcvr_datablock>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d021      	beq.n	800544c <USER_SPI_read+0xac>
			count = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	e01e      	b.n	800544c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	2012      	movs	r0, #18
 8005412:	f7ff fe53 	bl	80050bc <send_cmd>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d117      	bne.n	800544c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800541c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f7ff fdf0 	bl	8005006 <rcvr_datablock>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <USER_SPI_read+0xa2>
				buff += 512;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005432:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ed      	bne.n	800541c <USER_SPI_read+0x7c>
 8005440:	e000      	b.n	8005444 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005442:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005444:	2100      	movs	r1, #0
 8005446:	200c      	movs	r0, #12
 8005448:	f7ff fe38 	bl	80050bc <send_cmd>
		}
	}
	despiselect();
 800544c:	f7ff fdb5 	bl	8004fba <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf14      	ite	ne
 8005456:	2301      	movne	r3, #1
 8005458:	2300      	moveq	r3, #0
 800545a:	b2db      	uxtb	r3, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000020 	.word	0x20000020
 8005468:	200003ac 	.word	0x200003ac

0800546c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <USER_SPI_write+0x1c>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <USER_SPI_write+0x20>
 8005488:	2304      	movs	r3, #4
 800548a:	e063      	b.n	8005554 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800548c:	4b33      	ldr	r3, [pc, #204]	; (800555c <USER_SPI_write+0xf0>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <USER_SPI_write+0x32>
 800549a:	2303      	movs	r3, #3
 800549c:	e05a      	b.n	8005554 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800549e:	4b2f      	ldr	r3, [pc, #188]	; (800555c <USER_SPI_write+0xf0>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <USER_SPI_write+0x44>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e051      	b.n	8005554 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <USER_SPI_write+0xf4>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <USER_SPI_write+0x56>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	025b      	lsls	r3, r3, #9
 80054c0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d110      	bne.n	80054ea <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	2018      	movs	r0, #24
 80054cc:	f7ff fdf6 	bl	80050bc <send_cmd>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d136      	bne.n	8005544 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80054d6:	21fe      	movs	r1, #254	; 0xfe
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	f7ff fdbd 	bl	8005058 <xmit_datablock>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02f      	beq.n	8005544 <USER_SPI_write+0xd8>
			count = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	e02c      	b.n	8005544 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80054ea:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <USER_SPI_write+0xf4>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f003 0306 	and.w	r3, r3, #6
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <USER_SPI_write+0x92>
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	2097      	movs	r0, #151	; 0x97
 80054fa:	f7ff fddf 	bl	80050bc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	2019      	movs	r0, #25
 8005502:	f7ff fddb 	bl	80050bc <send_cmd>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11b      	bne.n	8005544 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800550c:	21fc      	movs	r1, #252	; 0xfc
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff fda2 	bl	8005058 <xmit_datablock>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <USER_SPI_write+0xc4>
				buff += 512;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005520:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3b01      	subs	r3, #1
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1ee      	bne.n	800550c <USER_SPI_write+0xa0>
 800552e:	e000      	b.n	8005532 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005530:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005532:	21fd      	movs	r1, #253	; 0xfd
 8005534:	2000      	movs	r0, #0
 8005536:	f7ff fd8f 	bl	8005058 <xmit_datablock>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <USER_SPI_write+0xd8>
 8005540:	2301      	movs	r3, #1
 8005542:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005544:	f7ff fd39 	bl	8004fba <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000020 	.word	0x20000020
 8005560:	200003ac 	.word	0x200003ac

08005564 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	603a      	str	r2, [r7, #0]
 800556e:	71fb      	strb	r3, [r7, #7]
 8005570:	460b      	mov	r3, r1
 8005572:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <USER_SPI_ioctl+0x1a>
 800557a:	2304      	movs	r3, #4
 800557c:	e15a      	b.n	8005834 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800557e:	4baf      	ldr	r3, [pc, #700]	; (800583c <USER_SPI_ioctl+0x2d8>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <USER_SPI_ioctl+0x2c>
 800558c:	2303      	movs	r3, #3
 800558e:	e151      	b.n	8005834 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005596:	79bb      	ldrb	r3, [r7, #6]
 8005598:	2b04      	cmp	r3, #4
 800559a:	f200 8136 	bhi.w	800580a <USER_SPI_ioctl+0x2a6>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <USER_SPI_ioctl+0x40>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055b9 	.word	0x080055b9
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	0800580b 	.word	0x0800580b
 80055b0:	08005679 	.word	0x08005679
 80055b4:	0800576f 	.word	0x0800576f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80055b8:	f7ff fd0c 	bl	8004fd4 <spiselect>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8127 	beq.w	8005812 <USER_SPI_ioctl+0x2ae>
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80055ca:	e122      	b.n	8005812 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80055cc:	2100      	movs	r1, #0
 80055ce:	2009      	movs	r0, #9
 80055d0:	f7ff fd74 	bl	80050bc <send_cmd>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 811d 	bne.w	8005816 <USER_SPI_ioctl+0x2b2>
 80055dc:	f107 030c 	add.w	r3, r7, #12
 80055e0:	2110      	movs	r1, #16
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fd0f 	bl	8005006 <rcvr_datablock>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8113 	beq.w	8005816 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80055f0:	7b3b      	ldrb	r3, [r7, #12]
 80055f2:	099b      	lsrs	r3, r3, #6
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d111      	bne.n	800561e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80055fa:	7d7b      	ldrb	r3, [r7, #21]
 80055fc:	461a      	mov	r2, r3
 80055fe:	7d3b      	ldrb	r3, [r7, #20]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	4413      	add	r3, r2
 8005604:	461a      	mov	r2, r3
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800560e:	4413      	add	r3, r2
 8005610:	3301      	adds	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	029a      	lsls	r2, r3, #10
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e028      	b.n	8005670 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800561e:	7c7b      	ldrb	r3, [r7, #17]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	b2da      	uxtb	r2, r3
 8005626:	7dbb      	ldrb	r3, [r7, #22]
 8005628:	09db      	lsrs	r3, r3, #7
 800562a:	b2db      	uxtb	r3, r3
 800562c:	4413      	add	r3, r2
 800562e:	b2da      	uxtb	r2, r3
 8005630:	7d7b      	ldrb	r3, [r7, #21]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f003 0306 	and.w	r3, r3, #6
 800563a:	b2db      	uxtb	r3, r3
 800563c:	4413      	add	r3, r2
 800563e:	b2db      	uxtb	r3, r3
 8005640:	3302      	adds	r3, #2
 8005642:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005646:	7d3b      	ldrb	r3, [r7, #20]
 8005648:	099b      	lsrs	r3, r3, #6
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	7cfb      	ldrb	r3, [r7, #19]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	7cbb      	ldrb	r3, [r7, #18]
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800565c:	4413      	add	r3, r2
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005662:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005666:	3b09      	subs	r3, #9
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	409a      	lsls	r2, r3
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005676:	e0ce      	b.n	8005816 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005678:	4b71      	ldr	r3, [pc, #452]	; (8005840 <USER_SPI_ioctl+0x2dc>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d031      	beq.n	80056e8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005684:	2100      	movs	r1, #0
 8005686:	208d      	movs	r0, #141	; 0x8d
 8005688:	f7ff fd18 	bl	80050bc <send_cmd>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 80c3 	bne.w	800581a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005694:	20ff      	movs	r0, #255	; 0xff
 8005696:	f7ff fc27 	bl	8004ee8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	2110      	movs	r1, #16
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fcb0 	bl	8005006 <rcvr_datablock>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80b6 	beq.w	800581a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80056ae:	2330      	movs	r3, #48	; 0x30
 80056b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80056b4:	e007      	b.n	80056c6 <USER_SPI_ioctl+0x162>
 80056b6:	20ff      	movs	r0, #255	; 0xff
 80056b8:	f7ff fc16 	bl	8004ee8 <xchg_spi>
 80056bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056c0:	3b01      	subs	r3, #1
 80056c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80056c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f3      	bne.n	80056b6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80056ce:	7dbb      	ldrb	r3, [r7, #22]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	2310      	movs	r3, #16
 80056d8:	fa03 f202 	lsl.w	r2, r3, r2
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80056e6:	e098      	b.n	800581a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80056e8:	2100      	movs	r1, #0
 80056ea:	2009      	movs	r0, #9
 80056ec:	f7ff fce6 	bl	80050bc <send_cmd>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8091 	bne.w	800581a <USER_SPI_ioctl+0x2b6>
 80056f8:	f107 030c 	add.w	r3, r7, #12
 80056fc:	2110      	movs	r1, #16
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fc81 	bl	8005006 <rcvr_datablock>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8087 	beq.w	800581a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800570c:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <USER_SPI_ioctl+0x2dc>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005718:	7dbb      	ldrb	r3, [r7, #22]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005720:	7dfa      	ldrb	r2, [r7, #23]
 8005722:	09d2      	lsrs	r2, r2, #7
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	4413      	add	r3, r2
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	7e7b      	ldrb	r3, [r7, #25]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	461a      	mov	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e013      	b.n	8005766 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800573e:	7dbb      	ldrb	r3, [r7, #22]
 8005740:	109b      	asrs	r3, r3, #2
 8005742:	b29b      	uxth	r3, r3
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	3301      	adds	r3, #1
 800574a:	7dfa      	ldrb	r2, [r7, #23]
 800574c:	00d2      	lsls	r2, r2, #3
 800574e:	f002 0218 	and.w	r2, r2, #24
 8005752:	7df9      	ldrb	r1, [r7, #23]
 8005754:	0949      	lsrs	r1, r1, #5
 8005756:	b2c9      	uxtb	r1, r1
 8005758:	440a      	add	r2, r1
 800575a:	3201      	adds	r2, #1
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	461a      	mov	r2, r3
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800576c:	e055      	b.n	800581a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800576e:	4b34      	ldr	r3, [pc, #208]	; (8005840 <USER_SPI_ioctl+0x2dc>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 0306 	and.w	r3, r3, #6
 8005776:	2b00      	cmp	r3, #0
 8005778:	d051      	beq.n	800581e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800577a:	f107 020c 	add.w	r2, r7, #12
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	210b      	movs	r1, #11
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff feee 	bl	8005564 <USER_SPI_ioctl>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d149      	bne.n	8005822 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800578e:	7b3b      	ldrb	r3, [r7, #12]
 8005790:	099b      	lsrs	r3, r3, #6
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <USER_SPI_ioctl+0x23e>
 8005798:	7dbb      	ldrb	r3, [r7, #22]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d041      	beq.n	8005826 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <USER_SPI_ioctl+0x2dc>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	025b      	lsls	r3, r3, #9
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	025b      	lsls	r3, r3, #9
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80057ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057cc:	2020      	movs	r0, #32
 80057ce:	f7ff fc75 	bl	80050bc <send_cmd>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d128      	bne.n	800582a <USER_SPI_ioctl+0x2c6>
 80057d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057da:	2021      	movs	r0, #33	; 0x21
 80057dc:	f7ff fc6e 	bl	80050bc <send_cmd>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d121      	bne.n	800582a <USER_SPI_ioctl+0x2c6>
 80057e6:	2100      	movs	r1, #0
 80057e8:	2026      	movs	r0, #38	; 0x26
 80057ea:	f7ff fc67 	bl	80050bc <send_cmd>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11a      	bne.n	800582a <USER_SPI_ioctl+0x2c6>
 80057f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80057f8:	f7ff fbbc 	bl	8004f74 <wait_ready>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d013      	beq.n	800582a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005802:	2300      	movs	r3, #0
 8005804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005808:	e00f      	b.n	800582a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800580a:	2304      	movs	r3, #4
 800580c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005810:	e00c      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		break;
 8005812:	bf00      	nop
 8005814:	e00a      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		break;
 8005816:	bf00      	nop
 8005818:	e008      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		break;
 800581a:	bf00      	nop
 800581c:	e006      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800581e:	bf00      	nop
 8005820:	e004      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <USER_SPI_ioctl+0x2c8>
		break;
 800582a:	bf00      	nop
	}

	despiselect();
 800582c:	f7ff fbc5 	bl	8004fba <despiselect>

	return res;
 8005830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005834:	4618      	mov	r0, r3
 8005836:	3730      	adds	r7, #48	; 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000020 	.word	0x20000020
 8005840:	200003ac 	.word	0x200003ac

08005844 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4a08      	ldr	r2, [pc, #32]	; (8005874 <disk_status+0x30>)
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	79fa      	ldrb	r2, [r7, #7]
 800585c:	4905      	ldr	r1, [pc, #20]	; (8005874 <disk_status+0x30>)
 800585e:	440a      	add	r2, r1
 8005860:	7a12      	ldrb	r2, [r2, #8]
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]
  return stat;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	200003e0 	.word	0x200003e0

08005878 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <disk_initialize+0x48>)
 800588a:	5cd3      	ldrb	r3, [r2, r3]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d111      	bne.n	80058b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	4a0b      	ldr	r2, [pc, #44]	; (80058c0 <disk_initialize+0x48>)
 8005894:	2101      	movs	r1, #1
 8005896:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <disk_initialize+0x48>)
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	79fa      	ldrb	r2, [r7, #7]
 80058a6:	4906      	ldr	r1, [pc, #24]	; (80058c0 <disk_initialize+0x48>)
 80058a8:	440a      	add	r2, r1
 80058aa:	7a12      	ldrb	r2, [r2, #8]
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200003e0 	.word	0x200003e0

080058c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <disk_read+0x3c>)
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	689c      	ldr	r4, [r3, #8]
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	4a07      	ldr	r2, [pc, #28]	; (8005900 <disk_read+0x3c>)
 80058e4:	4413      	add	r3, r2
 80058e6:	7a18      	ldrb	r0, [r3, #8]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	47a0      	blx	r4
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	bf00      	nop
 8005900:	200003e0 	.word	0x200003e0

08005904 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	4a0a      	ldr	r2, [pc, #40]	; (8005940 <disk_write+0x3c>)
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68dc      	ldr	r4, [r3, #12]
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	4a07      	ldr	r2, [pc, #28]	; (8005940 <disk_write+0x3c>)
 8005924:	4413      	add	r3, r2
 8005926:	7a18      	ldrb	r0, [r3, #8]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	47a0      	blx	r4
 8005930:	4603      	mov	r3, r0
 8005932:	75fb      	strb	r3, [r7, #23]
  return res;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd90      	pop	{r4, r7, pc}
 800593e:	bf00      	nop
 8005940:	200003e0 	.word	0x200003e0

08005944 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	603a      	str	r2, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
 8005950:	460b      	mov	r3, r1
 8005952:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	4a09      	ldr	r2, [pc, #36]	; (800597c <disk_ioctl+0x38>)
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	79fa      	ldrb	r2, [r7, #7]
 8005962:	4906      	ldr	r1, [pc, #24]	; (800597c <disk_ioctl+0x38>)
 8005964:	440a      	add	r2, r1
 8005966:	7a10      	ldrb	r0, [r2, #8]
 8005968:	79b9      	ldrb	r1, [r7, #6]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	4798      	blx	r3
 800596e:	4603      	mov	r3, r0
 8005970:	73fb      	strb	r3, [r7, #15]
  return res;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200003e0 	.word	0x200003e0

08005980 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3301      	adds	r3, #1
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005990:	89fb      	ldrh	r3, [r7, #14]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	b21a      	sxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b21b      	sxth	r3, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	b21b      	sxth	r3, r3
 80059a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80059a2:	89fb      	ldrh	r3, [r7, #14]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3303      	adds	r3, #3
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	3202      	adds	r2, #2
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	3201      	adds	r2, #1
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	7812      	ldrb	r2, [r2, #0]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	887a      	ldrh	r2, [r7, #2]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	887b      	ldrh	r3, [r7, #2]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	1c53      	adds	r3, r2, #1
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	6179      	str	r1, [r7, #20]
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f1      	bne.n	8005a9e <mem_cpy+0x1a>
	}
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	617a      	str	r2, [r7, #20]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f3      	bne.n	8005ad6 <mem_set+0x10>
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	61fa      	str	r2, [r7, #28]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	61ba      	str	r2, [r7, #24]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	1acb      	subs	r3, r1, r3
 8005b28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <mem_cmp+0x40>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0eb      	beq.n	8005b14 <mem_cmp+0x18>

	return r;
 8005b3c:	697b      	ldr	r3, [r7, #20]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3724      	adds	r7, #36	; 0x24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b54:	e002      	b.n	8005b5c <chk_chr+0x12>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <chk_chr+0x26>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d1f2      	bne.n	8005b56 <chk_chr+0xc>
	return *str;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	781b      	ldrb	r3, [r3, #0]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e029      	b.n	8005be8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b94:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <chk_lock+0xb4>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	4413      	add	r3, r2
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01d      	beq.n	8005bde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ba2:	4a24      	ldr	r2, [pc, #144]	; (8005c34 <chk_lock+0xb4>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	4413      	add	r3, r2
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d116      	bne.n	8005be2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <chk_lock+0xb4>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	4413      	add	r3, r2
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d10c      	bne.n	8005be2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bc8:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <chk_lock+0xb4>)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	4413      	add	r3, r2
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d102      	bne.n	8005be2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bdc:	e007      	b.n	8005bee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bde:	2301      	movs	r3, #1
 8005be0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d9d2      	bls.n	8005b94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d109      	bne.n	8005c08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <chk_lock+0x80>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d101      	bne.n	8005c04 <chk_lock+0x84>
 8005c00:	2300      	movs	r3, #0
 8005c02:	e010      	b.n	8005c26 <chk_lock+0xa6>
 8005c04:	2312      	movs	r3, #18
 8005c06:	e00e      	b.n	8005c26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d108      	bne.n	8005c20 <chk_lock+0xa0>
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <chk_lock+0xb4>)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	4413      	add	r3, r2
 8005c16:	330c      	adds	r3, #12
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1e:	d101      	bne.n	8005c24 <chk_lock+0xa4>
 8005c20:	2310      	movs	r3, #16
 8005c22:	e000      	b.n	8005c26 <chk_lock+0xa6>
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	200003c0 	.word	0x200003c0

08005c38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	e002      	b.n	8005c4a <enq_lock+0x12>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3301      	adds	r3, #1
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d806      	bhi.n	8005c5e <enq_lock+0x26>
 8005c50:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <enq_lock+0x40>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	4413      	add	r3, r2
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f2      	bne.n	8005c44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	200003c0 	.word	0x200003c0

08005c7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e01f      	b.n	8005ccc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c8c:	4a41      	ldr	r2, [pc, #260]	; (8005d94 <inc_lock+0x118>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	4413      	add	r3, r2
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d113      	bne.n	8005cc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c9e:	4a3d      	ldr	r2, [pc, #244]	; (8005d94 <inc_lock+0x118>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d109      	bne.n	8005cc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005cb2:	4a38      	ldr	r2, [pc, #224]	; (8005d94 <inc_lock+0x118>)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	4413      	add	r3, r2
 8005cba:	3308      	adds	r3, #8
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d006      	beq.n	8005cd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d9dc      	bls.n	8005c8c <inc_lock+0x10>
 8005cd2:	e000      	b.n	8005cd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005cd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d132      	bne.n	8005d42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e002      	b.n	8005ce8 <inc_lock+0x6c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d806      	bhi.n	8005cfc <inc_lock+0x80>
 8005cee:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <inc_lock+0x118>)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	4413      	add	r3, r2
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f2      	bne.n	8005ce2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d101      	bne.n	8005d06 <inc_lock+0x8a>
 8005d02:	2300      	movs	r3, #0
 8005d04:	e040      	b.n	8005d88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4922      	ldr	r1, [pc, #136]	; (8005d94 <inc_lock+0x118>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	440b      	add	r3, r1
 8005d12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	491e      	ldr	r1, [pc, #120]	; (8005d94 <inc_lock+0x118>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	440b      	add	r3, r1
 8005d20:	3304      	adds	r3, #4
 8005d22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	491a      	ldr	r1, [pc, #104]	; (8005d94 <inc_lock+0x118>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	440b      	add	r3, r1
 8005d30:	3308      	adds	r3, #8
 8005d32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d34:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <inc_lock+0x118>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	4413      	add	r3, r2
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	2200      	movs	r2, #0
 8005d40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <inc_lock+0xe0>
 8005d48:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <inc_lock+0x118>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	4413      	add	r3, r2
 8005d50:	330c      	adds	r3, #12
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <inc_lock+0xe0>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e015      	b.n	8005d88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <inc_lock+0xf8>
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <inc_lock+0x118>)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	4413      	add	r3, r2
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	e001      	b.n	8005d78 <inc_lock+0xfc>
 8005d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d78:	4906      	ldr	r1, [pc, #24]	; (8005d94 <inc_lock+0x118>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	440b      	add	r3, r1
 8005d80:	330c      	adds	r3, #12
 8005d82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	200003c0 	.word	0x200003c0

08005d98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d825      	bhi.n	8005df8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005dac:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <dec_lock+0x74>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	4413      	add	r3, r2
 8005db4:	330c      	adds	r3, #12
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005dba:	89fb      	ldrh	r3, [r7, #14]
 8005dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc0:	d101      	bne.n	8005dc6 <dec_lock+0x2e>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005dc6:	89fb      	ldrh	r3, [r7, #14]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <dec_lock+0x3a>
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005dd2:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <dec_lock+0x74>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	4413      	add	r3, r2
 8005dda:	330c      	adds	r3, #12
 8005ddc:	89fa      	ldrh	r2, [r7, #14]
 8005dde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <dec_lock+0x5a>
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <dec_lock+0x74>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	4413      	add	r3, r2
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	737b      	strb	r3, [r7, #13]
 8005df6:	e001      	b.n	8005dfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005df8:	2302      	movs	r3, #2
 8005dfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005dfc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	200003c0 	.word	0x200003c0

08005e10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	e010      	b.n	8005e40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e1e:	4a0d      	ldr	r2, [pc, #52]	; (8005e54 <clear_lock+0x44>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	4413      	add	r3, r2
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d105      	bne.n	8005e3a <clear_lock+0x2a>
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <clear_lock+0x44>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	4413      	add	r3, r2
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d9eb      	bls.n	8005e1e <clear_lock+0xe>
	}
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	200003c0 	.word	0x200003c0

08005e58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	78db      	ldrb	r3, [r3, #3]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d034      	beq.n	8005ed6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7858      	ldrb	r0, [r3, #1]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	f7ff fd40 	bl	8005904 <disk_write>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
 8005e8e:	e022      	b.n	8005ed6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d217      	bcs.n	8005ed6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	789b      	ldrb	r3, [r3, #2]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	e010      	b.n	8005ed0 <sync_window+0x78>
					wsect += fs->fsize;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7858      	ldrb	r0, [r3, #1]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	f7ff fd1d 	bl	8005904 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d8eb      	bhi.n	8005eae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d01b      	beq.n	8005f30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ffad 	bl	8005e58 <sync_window>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d113      	bne.n	8005f30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7858      	ldrb	r0, [r3, #1]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f12:	2301      	movs	r3, #1
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	f7ff fcd5 	bl	80058c4 <disk_read>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295
 8005f24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff87 	bl	8005e58 <sync_window>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d158      	bne.n	8006006 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d148      	bne.n	8005fee <sync_fs+0xb2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	791b      	ldrb	r3, [r3, #4]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d144      	bne.n	8005fee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3330      	adds	r3, #48	; 0x30
 8005f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fda9 	bl	8005ac6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3330      	adds	r3, #48	; 0x30
 8005f78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fd38 	bl	80059f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3330      	adds	r3, #48	; 0x30
 8005f8a:	4921      	ldr	r1, [pc, #132]	; (8006010 <sync_fs+0xd4>)
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fd4d 	bl	8005a2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3330      	adds	r3, #48	; 0x30
 8005f96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f9a:	491e      	ldr	r1, [pc, #120]	; (8006014 <sync_fs+0xd8>)
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fd45 	bl	8005a2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3330      	adds	r3, #48	; 0x30
 8005fa6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7ff fd3b 	bl	8005a2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3330      	adds	r3, #48	; 0x30
 8005fba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f7ff fd31 	bl	8005a2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7858      	ldrb	r0, [r3, #1]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f7ff fc8e 	bl	8005904 <disk_write>
			fs->fsi_flag = 0;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fca4 	bl	8005944 <disk_ioctl>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <sync_fs+0xca>
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	41615252 	.word	0x41615252
 8006014:	61417272 	.word	0x61417272

08006018 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	3b02      	subs	r3, #2
 8006026:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	3b02      	subs	r3, #2
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d301      	bcc.n	8006038 <clust2sect+0x20>
 8006034:	2300      	movs	r3, #0
 8006036:	e008      	b.n	800604a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	895b      	ldrh	r3, [r3, #10]
 800603c:	461a      	mov	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	fb03 f202 	mul.w	r2, r3, r2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	4413      	add	r3, r2
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d904      	bls.n	8006076 <get_fat+0x20>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e08f      	b.n	800619c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800607c:	f04f 33ff 	mov.w	r3, #4294967295
 8006080:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d062      	beq.n	8006150 <get_fat+0xfa>
 800608a:	2b03      	cmp	r3, #3
 800608c:	dc7c      	bgt.n	8006188 <get_fat+0x132>
 800608e:	2b01      	cmp	r3, #1
 8006090:	d002      	beq.n	8006098 <get_fat+0x42>
 8006092:	2b02      	cmp	r3, #2
 8006094:	d042      	beq.n	800611c <get_fat+0xc6>
 8006096:	e077      	b.n	8006188 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6a1a      	ldr	r2, [r3, #32]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	0a5b      	lsrs	r3, r3, #9
 80060ae:	4413      	add	r3, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f7ff ff14 	bl	8005ee0 <move_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d167      	bne.n	800618e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	60fa      	str	r2, [r7, #12]
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	0a5b      	lsrs	r3, r3, #9
 80060da:	4413      	add	r3, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	6938      	ldr	r0, [r7, #16]
 80060e0:	f7ff fefe 	bl	8005ee0 <move_window>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d153      	bne.n	8006192 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	461a      	mov	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <get_fat+0xbc>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	e002      	b.n	8006118 <get_fat+0xc2>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006118:	617b      	str	r3, [r7, #20]
			break;
 800611a:	e03f      	b.n	800619c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	4413      	add	r3, r2
 8006126:	4619      	mov	r1, r3
 8006128:	6938      	ldr	r0, [r7, #16]
 800612a:	f7ff fed9 	bl	8005ee0 <move_window>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d130      	bne.n	8006196 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006142:	4413      	add	r3, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fc1b 	bl	8005980 <ld_word>
 800614a:	4603      	mov	r3, r0
 800614c:	617b      	str	r3, [r7, #20]
			break;
 800614e:	e025      	b.n	800619c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	4413      	add	r3, r2
 800615a:	4619      	mov	r1, r3
 800615c:	6938      	ldr	r0, [r7, #16]
 800615e:	f7ff febf 	bl	8005ee0 <move_window>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d118      	bne.n	800619a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006176:	4413      	add	r3, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fc19 	bl	80059b0 <ld_dword>
 800617e:	4603      	mov	r3, r0
 8006180:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006184:	617b      	str	r3, [r7, #20]
			break;
 8006186:	e009      	b.n	800619c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e006      	b.n	800619c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800618e:	bf00      	nop
 8006190:	e004      	b.n	800619c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006192:	bf00      	nop
 8006194:	e002      	b.n	800619c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800619a:	bf00      	nop
		}
	}

	return val;
 800619c:	697b      	ldr	r3, [r7, #20]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80061a6:	b590      	push	{r4, r7, lr}
 80061a8:	b089      	sub	sp, #36	; 0x24
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80061b2:	2302      	movs	r3, #2
 80061b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	f240 80d9 	bls.w	8006370 <put_fat+0x1ca>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	f080 80d3 	bcs.w	8006370 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	f000 8096 	beq.w	8006300 <put_fat+0x15a>
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	f300 80cb 	bgt.w	8006370 <put_fat+0x1ca>
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d002      	beq.n	80061e4 <put_fat+0x3e>
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d06e      	beq.n	80062c0 <put_fat+0x11a>
 80061e2:	e0c5      	b.n	8006370 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4413      	add	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	0a5b      	lsrs	r3, r3, #9
 80061fa:	4413      	add	r3, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff fe6e 	bl	8005ee0 <move_window>
 8006204:	4603      	mov	r3, r0
 8006206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006208:	7ffb      	ldrb	r3, [r7, #31]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80a9 	bne.w	8006362 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	1c59      	adds	r1, r3, #1
 800621a:	61b9      	str	r1, [r7, #24]
 800621c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006220:	4413      	add	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00d      	beq.n	800624a <put_fat+0xa4>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	b25a      	sxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	b25b      	sxtb	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b25b      	sxtb	r3, r3
 8006246:	b2db      	uxtb	r3, r3
 8006248:	e001      	b.n	800624e <put_fat+0xa8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	0a5b      	lsrs	r3, r3, #9
 8006260:	4413      	add	r3, r2
 8006262:	4619      	mov	r1, r3
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff fe3b 	bl	8005ee0 <move_window>
 800626a:	4603      	mov	r3, r0
 800626c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d178      	bne.n	8006366 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006280:	4413      	add	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <put_fat+0xf0>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	b2db      	uxtb	r3, r3
 8006294:	e00e      	b.n	80062b4 <put_fat+0x10e>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f023 030f 	bic.w	r3, r3, #15
 80062a0:	b25a      	sxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	70da      	strb	r2, [r3, #3]
			break;
 80062be:	e057      	b.n	8006370 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	4413      	add	r3, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fe07 	bl	8005ee0 <move_window>
 80062d2:	4603      	mov	r3, r0
 80062d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d146      	bne.n	800636a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80062ea:	4413      	add	r3, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	b292      	uxth	r2, r2
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fb7f 	bl	80059f6 <st_word>
			fs->wflag = 1;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	70da      	strb	r2, [r3, #3]
			break;
 80062fe:	e037      	b.n	8006370 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1a      	ldr	r2, [r3, #32]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	4413      	add	r3, r2
 800630a:	4619      	mov	r1, r3
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fde7 	bl	8005ee0 <move_window>
 8006312:	4603      	mov	r3, r0
 8006314:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006316:	7ffb      	ldrb	r3, [r7, #31]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d128      	bne.n	800636e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006330:	4413      	add	r3, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fb3c 	bl	80059b0 <ld_dword>
 8006338:	4603      	mov	r3, r0
 800633a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800633e:	4323      	orrs	r3, r4
 8006340:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006350:	4413      	add	r3, r2
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fb69 	bl	8005a2c <st_dword>
			fs->wflag = 1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	70da      	strb	r2, [r3, #3]
			break;
 8006360:	e006      	b.n	8006370 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006362:	bf00      	nop
 8006364:	e004      	b.n	8006370 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800636e:	bf00      	nop
		}
	}
	return res;
 8006370:	7ffb      	ldrb	r3, [r7, #31]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd90      	pop	{r4, r7, pc}

0800637a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b088      	sub	sp, #32
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d904      	bls.n	80063a0 <remove_chain+0x26>
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d301      	bcc.n	80063a4 <remove_chain+0x2a>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e04b      	b.n	800643c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	69b8      	ldr	r0, [r7, #24]
 80063b2:	f7ff fef8 	bl	80061a6 <put_fat>
 80063b6:	4603      	mov	r3, r0
 80063b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <remove_chain+0x4a>
 80063c0:	7ffb      	ldrb	r3, [r7, #31]
 80063c2:	e03b      	b.n	800643c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff fe45 	bl	8006056 <get_fat>
 80063cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d031      	beq.n	8006438 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <remove_chain+0x64>
 80063da:	2302      	movs	r3, #2
 80063dc:	e02e      	b.n	800643c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d101      	bne.n	80063ea <remove_chain+0x70>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e028      	b.n	800643c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063ea:	2200      	movs	r2, #0
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	69b8      	ldr	r0, [r7, #24]
 80063f0:	f7ff fed9 	bl	80061a6 <put_fat>
 80063f4:	4603      	mov	r3, r0
 80063f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063f8:	7ffb      	ldrb	r3, [r7, #31]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <remove_chain+0x88>
 80063fe:	7ffb      	ldrb	r3, [r7, #31]
 8006400:	e01c      	b.n	800643c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	3b02      	subs	r3, #2
 800640c:	429a      	cmp	r2, r3
 800640e:	d20b      	bcs.n	8006428 <remove_chain+0xae>
			fs->free_clst++;
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	791b      	ldrb	r3, [r3, #4]
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d3c6      	bcc.n	80063c4 <remove_chain+0x4a>
 8006436:	e000      	b.n	800643a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006438:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <create_chain+0x2c>
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	d31b      	bcc.n	80064a8 <create_chain+0x64>
 8006470:	2301      	movs	r3, #1
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	e018      	b.n	80064a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fdec 	bl	8006056 <get_fat>
 800647e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d801      	bhi.n	800648a <create_chain+0x46>
 8006486:	2301      	movs	r3, #1
 8006488:	e070      	b.n	800656c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d101      	bne.n	8006496 <create_chain+0x52>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	e06a      	b.n	800656c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	429a      	cmp	r2, r3
 800649e:	d201      	bcs.n	80064a4 <create_chain+0x60>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	e063      	b.n	800656c <create_chain+0x128>
		scl = clst;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d307      	bcc.n	80064cc <create_chain+0x88>
				ncl = 2;
 80064bc:	2302      	movs	r3, #2
 80064be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d901      	bls.n	80064cc <create_chain+0x88>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e04f      	b.n	800656c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80064cc:	69f9      	ldr	r1, [r7, #28]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fdc1 	bl	8006056 <get_fat>
 80064d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d003      	beq.n	80064ea <create_chain+0xa6>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d101      	bne.n	80064ee <create_chain+0xaa>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	e03e      	b.n	800656c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d1da      	bne.n	80064ac <create_chain+0x68>
 80064f6:	2300      	movs	r3, #0
 80064f8:	e038      	b.n	800656c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	6938      	ldr	r0, [r7, #16]
 8006504:	f7ff fe4f 	bl	80061a6 <put_fat>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <create_chain+0xe2>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d006      	beq.n	8006526 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f7ff fe42 	bl	80061a6 <put_fat>
 8006522:	4603      	mov	r3, r0
 8006524:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d116      	bne.n	800655a <create_chain+0x116>
		fs->last_clst = ncl;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	3b02      	subs	r3, #2
 800653c:	429a      	cmp	r2, r3
 800653e:	d804      	bhi.n	800654a <create_chain+0x106>
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	b2da      	uxtb	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	711a      	strb	r2, [r3, #4]
 8006558:	e007      	b.n	800656a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d102      	bne.n	8006566 <create_chain+0x122>
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
 8006564:	e000      	b.n	8006568 <create_chain+0x124>
 8006566:	2301      	movs	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800656a:	69fb      	ldr	r3, [r7, #28]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	3304      	adds	r3, #4
 800658a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	0a5b      	lsrs	r3, r3, #9
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	8952      	ldrh	r2, [r2, #10]
 8006594:	fbb3 f3f2 	udiv	r3, r3, r2
 8006598:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	613a      	str	r2, [r7, #16]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <clmt_clust+0x3a>
 80065aa:	2300      	movs	r3, #0
 80065ac:	e010      	b.n	80065d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d307      	bcc.n	80065c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	3304      	adds	r3, #4
 80065c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065c4:	e7e9      	b.n	800659a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80065c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065f2:	d204      	bcs.n	80065fe <dir_sdi+0x22>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065fe:	2302      	movs	r3, #2
 8006600:	e063      	b.n	80066ca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <dir_sdi+0x46>
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d902      	bls.n	8006622 <dir_sdi+0x46>
		clst = fs->dirbase;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10c      	bne.n	8006642 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	8912      	ldrh	r2, [r2, #8]
 8006630:	4293      	cmp	r3, r2
 8006632:	d301      	bcc.n	8006638 <dir_sdi+0x5c>
 8006634:	2302      	movs	r3, #2
 8006636:	e048      	b.n	80066ca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	61da      	str	r2, [r3, #28]
 8006640:	e029      	b.n	8006696 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	895b      	ldrh	r3, [r3, #10]
 8006646:	025b      	lsls	r3, r3, #9
 8006648:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800664a:	e019      	b.n	8006680 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fd00 	bl	8006056 <get_fat>
 8006656:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d101      	bne.n	8006664 <dir_sdi+0x88>
 8006660:	2301      	movs	r3, #1
 8006662:	e032      	b.n	80066ca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d904      	bls.n	8006674 <dir_sdi+0x98>
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	429a      	cmp	r2, r3
 8006672:	d301      	bcc.n	8006678 <dir_sdi+0x9c>
 8006674:	2302      	movs	r3, #2
 8006676:	e028      	b.n	80066ca <dir_sdi+0xee>
			ofs -= csz;
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	429a      	cmp	r2, r3
 8006686:	d2e1      	bcs.n	800664c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006688:	6979      	ldr	r1, [r7, #20]
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f7ff fcc4 	bl	8006018 <clust2sect>
 8006690:	4602      	mov	r2, r0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <dir_sdi+0xcc>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e010      	b.n	80066ca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	0a5b      	lsrs	r3, r3, #9
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	441a      	add	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b086      	sub	sp, #24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	3320      	adds	r3, #32
 80066e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <dir_next+0x28>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066f8:	d301      	bcc.n	80066fe <dir_next+0x2c>
 80066fa:	2304      	movs	r3, #4
 80066fc:	e0aa      	b.n	8006854 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8098 	bne.w	800683a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	8912      	ldrh	r2, [r2, #8]
 8006724:	4293      	cmp	r3, r2
 8006726:	f0c0 8088 	bcc.w	800683a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	61da      	str	r2, [r3, #28]
 8006730:	2304      	movs	r3, #4
 8006732:	e08f      	b.n	8006854 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	0a5b      	lsrs	r3, r3, #9
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	8952      	ldrh	r2, [r2, #10]
 800673c:	3a01      	subs	r2, #1
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d17a      	bne.n	800683a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7ff fc82 	bl	8006056 <get_fat>
 8006752:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d801      	bhi.n	800675e <dir_next+0x8c>
 800675a:	2302      	movs	r3, #2
 800675c:	e07a      	b.n	8006854 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d101      	bne.n	800676a <dir_next+0x98>
 8006766:	2301      	movs	r3, #1
 8006768:	e074      	b.n	8006854 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	429a      	cmp	r2, r3
 8006772:	d358      	bcc.n	8006826 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	61da      	str	r2, [r3, #28]
 8006780:	2304      	movs	r3, #4
 8006782:	e067      	b.n	8006854 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7ff fe59 	bl	8006444 <create_chain>
 8006792:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <dir_next+0xcc>
 800679a:	2307      	movs	r3, #7
 800679c:	e05a      	b.n	8006854 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <dir_next+0xd6>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e055      	b.n	8006854 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d101      	bne.n	80067b4 <dir_next+0xe2>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e04f      	b.n	8006854 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff fb4f 	bl	8005e58 <sync_window>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <dir_next+0xf2>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e047      	b.n	8006854 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3330      	adds	r3, #48	; 0x30
 80067c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff f979 	bl	8005ac6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	6979      	ldr	r1, [r7, #20]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fc1c 	bl	8006018 <clust2sect>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80067e6:	e012      	b.n	800680e <dir_next+0x13c>
						fs->wflag = 1;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fb32 	bl	8005e58 <sync_window>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <dir_next+0x12c>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e02a      	b.n	8006854 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	62da      	str	r2, [r3, #44]	; 0x2c
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	895b      	ldrh	r3, [r3, #10]
 8006812:	461a      	mov	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4293      	cmp	r3, r2
 8006818:	d3e6      	bcc.n	80067e8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad2      	subs	r2, r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800682c:	6979      	ldr	r1, [r7, #20]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff fbf2 	bl	8006018 <clust2sect>
 8006834:	4602      	mov	r2, r0
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684c:	441a      	add	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800686c:	2100      	movs	r1, #0
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff feb4 	bl	80065dc <dir_sdi>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d12b      	bne.n	80068d6 <dir_alloc+0x7a>
		n = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff fb29 	bl	8005ee0 <move_window>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11d      	bne.n	80068d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2be5      	cmp	r3, #229	; 0xe5
 80068a0:	d004      	beq.n	80068ac <dir_alloc+0x50>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3301      	adds	r3, #1
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d102      	bne.n	80068c0 <dir_alloc+0x64>
 80068ba:	e00c      	b.n	80068d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068c0:	2101      	movs	r1, #1
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ff05 	bl	80066d2 <dir_next>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0d7      	beq.n	8006882 <dir_alloc+0x26>
 80068d2:	e000      	b.n	80068d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d101      	bne.n	80068e0 <dir_alloc+0x84>
 80068dc:	2307      	movs	r3, #7
 80068de:	75fb      	strb	r3, [r7, #23]
	return res;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	331a      	adds	r3, #26
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff f841 	bl	8005980 <ld_word>
 80068fe:	4603      	mov	r3, r0
 8006900:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b03      	cmp	r3, #3
 8006908:	d109      	bne.n	800691e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff f836 	bl	8005980 <ld_word>
 8006914:	4603      	mov	r3, r0
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	331a      	adds	r3, #26
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	b292      	uxth	r2, r2
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff f859 	bl	80059f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d109      	bne.n	8006960 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f103 0214 	add.w	r2, r3, #20
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	b29b      	uxth	r3, r3
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7ff f84b 	bl	80059f6 <st_word>
	}
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fe2f 	bl	80065dc <dir_sdi>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <dir_find+0x24>
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	e03e      	b.n	8006a0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	4619      	mov	r1, r3
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f7ff faa4 	bl	8005ee0 <move_window>
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d12f      	bne.n	8006a02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <dir_find+0x4e>
 80069b0:	2304      	movs	r3, #4
 80069b2:	75fb      	strb	r3, [r7, #23]
 80069b4:	e028      	b.n	8006a08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	330b      	adds	r3, #11
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	330b      	adds	r3, #11
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <dir_find+0x86>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a18      	ldr	r0, [r3, #32]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3324      	adds	r3, #36	; 0x24
 80069e0:	220b      	movs	r2, #11
 80069e2:	4619      	mov	r1, r3
 80069e4:	f7ff f88a 	bl	8005afc <mem_cmp>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80069ee:	2100      	movs	r1, #0
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff fe6e 	bl	80066d2 <dir_next>
 80069f6:	4603      	mov	r3, r0
 80069f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0c5      	beq.n	800698c <dir_find+0x24>
 8006a00:	e002      	b.n	8006a08 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a06:	bf00      	nop

	return res;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006a20:	2101      	movs	r1, #1
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff ff1a 	bl	800685c <dir_alloc>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11c      	bne.n	8006a6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	4619      	mov	r1, r3
 8006a38:	68b8      	ldr	r0, [r7, #8]
 8006a3a:	f7ff fa51 	bl	8005ee0 <move_window>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d111      	bne.n	8006a6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff f838 	bl	8005ac6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a18      	ldr	r0, [r3, #32]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3324      	adds	r3, #36	; 0x24
 8006a5e:	220b      	movs	r2, #11
 8006a60:	4619      	mov	r1, r3
 8006a62:	f7ff f80f 	bl	8005a84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006a8e:	220b      	movs	r2, #11
 8006a90:	2120      	movs	r1, #32
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f7ff f817 	bl	8005ac6 <mem_set>
	si = i = 0; ni = 8;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	61fa      	str	r2, [r7, #28]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ab2:	7efb      	ldrb	r3, [r7, #27]
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d94e      	bls.n	8006b56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ab8:	7efb      	ldrb	r3, [r7, #27]
 8006aba:	2b2f      	cmp	r3, #47	; 0x2f
 8006abc:	d006      	beq.n	8006acc <create_name+0x54>
 8006abe:	7efb      	ldrb	r3, [r7, #27]
 8006ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ac2:	d110      	bne.n	8006ae6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ac4:	e002      	b.n	8006acc <create_name+0x54>
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ad6:	d0f6      	beq.n	8006ac6 <create_name+0x4e>
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ae2:	d0f0      	beq.n	8006ac6 <create_name+0x4e>
			break;
 8006ae4:	e038      	b.n	8006b58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006ae6:	7efb      	ldrb	r3, [r7, #27]
 8006ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8006aea:	d003      	beq.n	8006af4 <create_name+0x7c>
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d30c      	bcc.n	8006b0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b0b      	cmp	r3, #11
 8006af8:	d002      	beq.n	8006b00 <create_name+0x88>
 8006afa:	7efb      	ldrb	r3, [r7, #27]
 8006afc:	2b2e      	cmp	r3, #46	; 0x2e
 8006afe:	d001      	beq.n	8006b04 <create_name+0x8c>
 8006b00:	2306      	movs	r3, #6
 8006b02:	e044      	b.n	8006b8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006b04:	2308      	movs	r3, #8
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	230b      	movs	r3, #11
 8006b0a:	617b      	str	r3, [r7, #20]
			continue;
 8006b0c:	e022      	b.n	8006b54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006b0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	da04      	bge.n	8006b20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006b16:	7efb      	ldrb	r3, [r7, #27]
 8006b18:	3b80      	subs	r3, #128	; 0x80
 8006b1a:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <create_name+0x120>)
 8006b1c:	5cd3      	ldrb	r3, [r2, r3]
 8006b1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006b20:	7efb      	ldrb	r3, [r7, #27]
 8006b22:	4619      	mov	r1, r3
 8006b24:	481d      	ldr	r0, [pc, #116]	; (8006b9c <create_name+0x124>)
 8006b26:	f7ff f810 	bl	8005b4a <chk_chr>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <create_name+0xbc>
 8006b30:	2306      	movs	r3, #6
 8006b32:	e02c      	b.n	8006b8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006b34:	7efb      	ldrb	r3, [r7, #27]
 8006b36:	2b60      	cmp	r3, #96	; 0x60
 8006b38:	d905      	bls.n	8006b46 <create_name+0xce>
 8006b3a:	7efb      	ldrb	r3, [r7, #27]
 8006b3c:	2b7a      	cmp	r3, #122	; 0x7a
 8006b3e:	d802      	bhi.n	8006b46 <create_name+0xce>
 8006b40:	7efb      	ldrb	r3, [r7, #27]
 8006b42:	3b20      	subs	r3, #32
 8006b44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	613a      	str	r2, [r7, #16]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	7efa      	ldrb	r2, [r7, #27]
 8006b52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006b54:	e7a6      	b.n	8006aa4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <create_name+0xf4>
 8006b68:	2306      	movs	r3, #6
 8006b6a:	e010      	b.n	8006b8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2be5      	cmp	r3, #229	; 0xe5
 8006b72:	d102      	bne.n	8006b7a <create_name+0x102>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2205      	movs	r2, #5
 8006b78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b7a:	7efb      	ldrb	r3, [r7, #27]
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d801      	bhi.n	8006b84 <create_name+0x10c>
 8006b80:	2204      	movs	r2, #4
 8006b82:	e000      	b.n	8006b86 <create_name+0x10e>
 8006b84:	2200      	movs	r2, #0
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	330b      	adds	r3, #11
 8006b8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	0800a5e4 	.word	0x0800a5e4
 8006b9c:	0800a558 	.word	0x0800a558

08006ba0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006bb4:	e002      	b.n	8006bbc <follow_path+0x1c>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b2f      	cmp	r3, #47	; 0x2f
 8006bc2:	d0f8      	beq.n	8006bb6 <follow_path+0x16>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b5c      	cmp	r3, #92	; 0x5c
 8006bca:	d0f4      	beq.n	8006bb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b1f      	cmp	r3, #31
 8006bd8:	d80a      	bhi.n	8006bf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2280      	movs	r2, #128	; 0x80
 8006bde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006be2:	2100      	movs	r1, #0
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fcf9 	bl	80065dc <dir_sdi>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e043      	b.n	8006c78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ff3f 	bl	8006a78 <create_name>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d134      	bne.n	8006c6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff feaf 	bl	8006968 <dir_find>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d127      	bne.n	8006c72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d122      	bne.n	8006c72 <follow_path+0xd2>
 8006c2c:	2305      	movs	r3, #5
 8006c2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c30:	e01f      	b.n	8006c72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c32:	7afb      	ldrb	r3, [r7, #11]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11c      	bne.n	8006c76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	799b      	ldrb	r3, [r3, #6]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c48:	2305      	movs	r3, #5
 8006c4a:	75fb      	strb	r3, [r7, #23]
 8006c4c:	e014      	b.n	8006c78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fe42 	bl	80068ea <ld_clust>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c6c:	e7c0      	b.n	8006bf0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c6e:	bf00      	nop
 8006c70:	e002      	b.n	8006c78 <follow_path+0xd8>
				break;
 8006c72:	bf00      	nop
 8006c74:	e000      	b.n	8006c78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c76:	bf00      	nop
			}
		}
	}

	return res;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d031      	beq.n	8006cfc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e002      	b.n	8006ca6 <get_ldnumber+0x24>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d903      	bls.n	8006cb6 <get_ldnumber+0x34>
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b3a      	cmp	r3, #58	; 0x3a
 8006cb4:	d1f4      	bne.n	8006ca0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b3a      	cmp	r3, #58	; 0x3a
 8006cbc:	d11c      	bne.n	8006cf8 <get_ldnumber+0x76>
			tp = *path;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	60fa      	str	r2, [r7, #12]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3b30      	subs	r3, #48	; 0x30
 8006cce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b09      	cmp	r3, #9
 8006cd4:	d80e      	bhi.n	8006cf4 <get_ldnumber+0x72>
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d10a      	bne.n	8006cf4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d107      	bne.n	8006cf4 <get_ldnumber+0x72>
					vol = (int)i;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3301      	adds	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	e002      	b.n	8006cfe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cfc:	693b      	ldr	r3, [r7, #16]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	70da      	strb	r2, [r3, #3]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff f8da 	bl	8005ee0 <move_window>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <check_fs+0x2a>
 8006d32:	2304      	movs	r3, #4
 8006d34:	e038      	b.n	8006da8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3330      	adds	r3, #48	; 0x30
 8006d3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fe1e 	bl	8005980 <ld_word>
 8006d44:	4603      	mov	r3, r0
 8006d46:	461a      	mov	r2, r3
 8006d48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d001      	beq.n	8006d54 <check_fs+0x48>
 8006d50:	2303      	movs	r3, #3
 8006d52:	e029      	b.n	8006da8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d5a:	2be9      	cmp	r3, #233	; 0xe9
 8006d5c:	d009      	beq.n	8006d72 <check_fs+0x66>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d64:	2beb      	cmp	r3, #235	; 0xeb
 8006d66:	d11e      	bne.n	8006da6 <check_fs+0x9a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d6e:	2b90      	cmp	r3, #144	; 0x90
 8006d70:	d119      	bne.n	8006da6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3330      	adds	r3, #48	; 0x30
 8006d76:	3336      	adds	r3, #54	; 0x36
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fe19 	bl	80059b0 <ld_dword>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <check_fs+0xa4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d101      	bne.n	8006d8e <check_fs+0x82>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e00c      	b.n	8006da8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3330      	adds	r3, #48	; 0x30
 8006d92:	3352      	adds	r3, #82	; 0x52
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fe0b 	bl	80059b0 <ld_dword>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <check_fs+0xa8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d101      	bne.n	8006da6 <check_fs+0x9a>
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006da6:	2302      	movs	r3, #2
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	00544146 	.word	0x00544146
 8006db4:	33544146 	.word	0x33544146

08006db8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b096      	sub	sp, #88	; 0x58
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff58 	bl	8006c82 <get_ldnumber>
 8006dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da01      	bge.n	8006dde <find_volume+0x26>
 8006dda:	230b      	movs	r3, #11
 8006ddc:	e22d      	b.n	800723a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dde:	4aa1      	ldr	r2, [pc, #644]	; (8007064 <find_volume+0x2ac>)
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <find_volume+0x3a>
 8006dee:	230c      	movs	r3, #12
 8006df0:	e223      	b.n	800723a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01a      	beq.n	8006e3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fd19 	bl	8005844 <disk_status>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <find_volume+0x82>
 8006e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e36:	230a      	movs	r3, #10
 8006e38:	e1ff      	b.n	800723a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e1fd      	b.n	800723a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fd11 	bl	8005878 <disk_initialize>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e1e6      	b.n	800723a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <find_volume+0xca>
 8006e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e7e:	230a      	movs	r3, #10
 8006e80:	e1db      	b.n	800723a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e8a:	f7ff ff3f 	bl	8006d0c <check_fs>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d149      	bne.n	8006f30 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea0:	e01e      	b.n	8006ee0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006eb0:	4413      	add	r3, r2
 8006eb2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d006      	beq.n	8006ecc <find_volume+0x114>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fd74 	bl	80059b0 <ld_dword>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	e000      	b.n	8006ece <find_volume+0x116>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	3358      	adds	r3, #88	; 0x58
 8006ed4:	443b      	add	r3, r7
 8006ed6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006edc:	3301      	adds	r3, #1
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d9dd      	bls.n	8006ea2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <find_volume+0x13e>
 8006ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	3358      	adds	r3, #88	; 0x58
 8006efc:	443b      	add	r3, r7
 8006efe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <find_volume+0x15e>
 8006f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f0e:	f7ff fefd 	bl	8006d0c <check_fs>
 8006f12:	4603      	mov	r3, r0
 8006f14:	e000      	b.n	8006f18 <find_volume+0x160>
 8006f16:	2303      	movs	r3, #3
 8006f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d905      	bls.n	8006f30 <find_volume+0x178>
 8006f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f26:	3301      	adds	r3, #1
 8006f28:	643b      	str	r3, [r7, #64]	; 0x40
 8006f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d9e2      	bls.n	8006ef6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d101      	bne.n	8006f3c <find_volume+0x184>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e17e      	b.n	800723a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d901      	bls.n	8006f48 <find_volume+0x190>
 8006f44:	230d      	movs	r3, #13
 8006f46:	e178      	b.n	800723a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	3330      	adds	r3, #48	; 0x30
 8006f4c:	330b      	adds	r3, #11
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fd16 	bl	8005980 <ld_word>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5a:	d001      	beq.n	8006f60 <find_volume+0x1a8>
 8006f5c:	230d      	movs	r3, #13
 8006f5e:	e16c      	b.n	800723a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	3330      	adds	r3, #48	; 0x30
 8006f64:	3316      	adds	r3, #22
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fd0a 	bl	8005980 <ld_word>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <find_volume+0x1cc>
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	3330      	adds	r3, #48	; 0x30
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fd17 	bl	80059b0 <ld_dword>
 8006f82:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f88:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	789b      	ldrb	r3, [r3, #2]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d005      	beq.n	8006fa8 <find_volume+0x1f0>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	789b      	ldrb	r3, [r3, #2]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d001      	beq.n	8006fa8 <find_volume+0x1f0>
 8006fa4:	230d      	movs	r3, #13
 8006fa6:	e148      	b.n	800723a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	789b      	ldrb	r3, [r3, #2]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	fb02 f303 	mul.w	r3, r2, r3
 8006fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	895b      	ldrh	r3, [r3, #10]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <find_volume+0x224>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	895b      	ldrh	r3, [r3, #10]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	895b      	ldrh	r3, [r3, #10]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <find_volume+0x228>
 8006fdc:	230d      	movs	r3, #13
 8006fde:	e12c      	b.n	800723a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	3330      	adds	r3, #48	; 0x30
 8006fe4:	3311      	adds	r3, #17
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fcca 	bl	8005980 <ld_word>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	891b      	ldrh	r3, [r3, #8]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <find_volume+0x24e>
 8007002:	230d      	movs	r3, #13
 8007004:	e119      	b.n	800723a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	3330      	adds	r3, #48	; 0x30
 800700a:	3313      	adds	r3, #19
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fcb7 	bl	8005980 <ld_word>
 8007012:	4603      	mov	r3, r0
 8007014:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <find_volume+0x272>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	3330      	adds	r3, #48	; 0x30
 8007020:	3320      	adds	r3, #32
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fcc4 	bl	80059b0 <ld_dword>
 8007028:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	3330      	adds	r3, #48	; 0x30
 800702e:	330e      	adds	r3, #14
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe fca5 	bl	8005980 <ld_word>
 8007036:	4603      	mov	r3, r0
 8007038:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800703a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <find_volume+0x28c>
 8007040:	230d      	movs	r3, #13
 8007042:	e0fa      	b.n	800723a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007044:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007048:	4413      	add	r3, r2
 800704a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704c:	8912      	ldrh	r2, [r2, #8]
 800704e:	0912      	lsrs	r2, r2, #4
 8007050:	b292      	uxth	r2, r2
 8007052:	4413      	add	r3, r2
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	429a      	cmp	r2, r3
 800705c:	d204      	bcs.n	8007068 <find_volume+0x2b0>
 800705e:	230d      	movs	r3, #13
 8007060:	e0eb      	b.n	800723a <find_volume+0x482>
 8007062:	bf00      	nop
 8007064:	200003b8 	.word	0x200003b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007070:	8952      	ldrh	r2, [r2, #10]
 8007072:	fbb3 f3f2 	udiv	r3, r3, r2
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <find_volume+0x2ca>
 800707e:	230d      	movs	r3, #13
 8007080:	e0db      	b.n	800723a <find_volume+0x482>
		fmt = FS_FAT32;
 8007082:	2303      	movs	r3, #3
 8007084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800708e:	4293      	cmp	r3, r2
 8007090:	d802      	bhi.n	8007098 <find_volume+0x2e0>
 8007092:	2302      	movs	r3, #2
 8007094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800709e:	4293      	cmp	r3, r2
 80070a0:	d802      	bhi.n	80070a8 <find_volume+0x2f0>
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80070b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ba:	441a      	add	r2, r3
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80070c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	441a      	add	r2, r3
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80070ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d11e      	bne.n	8007110 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	3330      	adds	r3, #48	; 0x30
 80070d6:	332a      	adds	r3, #42	; 0x2a
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fc51 	bl	8005980 <ld_word>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <find_volume+0x330>
 80070e4:	230d      	movs	r3, #13
 80070e6:	e0a8      	b.n	800723a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	891b      	ldrh	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <find_volume+0x33c>
 80070f0:	230d      	movs	r3, #13
 80070f2:	e0a2      	b.n	800723a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	3330      	adds	r3, #48	; 0x30
 80070f8:	332c      	adds	r3, #44	; 0x2c
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fc58 	bl	80059b0 <ld_dword>
 8007100:	4602      	mov	r2, r0
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	647b      	str	r3, [r7, #68]	; 0x44
 800710e:	e01f      	b.n	8007150 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	891b      	ldrh	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <find_volume+0x364>
 8007118:	230d      	movs	r3, #13
 800711a:	e08e      	b.n	800723a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007122:	441a      	add	r2, r3
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800712c:	2b02      	cmp	r3, #2
 800712e:	d103      	bne.n	8007138 <find_volume+0x380>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	e00a      	b.n	800714e <find_volume+0x396>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	4613      	mov	r3, r2
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4413      	add	r3, r2
 8007142:	085a      	lsrs	r2, r3, #1
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800714e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007156:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800715a:	0a5b      	lsrs	r3, r3, #9
 800715c:	429a      	cmp	r2, r3
 800715e:	d201      	bcs.n	8007164 <find_volume+0x3ac>
 8007160:	230d      	movs	r3, #13
 8007162:	e06a      	b.n	800723a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	f04f 32ff 	mov.w	r2, #4294967295
 800716a:	611a      	str	r2, [r3, #16]
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	2280      	movs	r2, #128	; 0x80
 8007178:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800717a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800717e:	2b03      	cmp	r3, #3
 8007180:	d149      	bne.n	8007216 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	3330      	adds	r3, #48	; 0x30
 8007186:	3330      	adds	r3, #48	; 0x30
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fbf9 	bl	8005980 <ld_word>
 800718e:	4603      	mov	r3, r0
 8007190:	2b01      	cmp	r3, #1
 8007192:	d140      	bne.n	8007216 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007196:	3301      	adds	r3, #1
 8007198:	4619      	mov	r1, r3
 800719a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800719c:	f7fe fea0 	bl	8005ee0 <move_window>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d137      	bne.n	8007216 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	2200      	movs	r2, #0
 80071aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	3330      	adds	r3, #48	; 0x30
 80071b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fbe3 	bl	8005980 <ld_word>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d127      	bne.n	8007216 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	3330      	adds	r3, #48	; 0x30
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fbf0 	bl	80059b0 <ld_dword>
 80071d0:	4603      	mov	r3, r0
 80071d2:	4a1c      	ldr	r2, [pc, #112]	; (8007244 <find_volume+0x48c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d11e      	bne.n	8007216 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	3330      	adds	r3, #48	; 0x30
 80071dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe fbe5 	bl	80059b0 <ld_dword>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4a17      	ldr	r2, [pc, #92]	; (8007248 <find_volume+0x490>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d113      	bne.n	8007216 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	3330      	adds	r3, #48	; 0x30
 80071f2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fbda 	bl	80059b0 <ld_dword>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	3330      	adds	r3, #48	; 0x30
 8007206:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fbd0 	bl	80059b0 <ld_dword>
 8007210:	4602      	mov	r2, r0
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800721c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800721e:	4b0b      	ldr	r3, [pc, #44]	; (800724c <find_volume+0x494>)
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <find_volume+0x494>)
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	4b08      	ldr	r3, [pc, #32]	; (800724c <find_volume+0x494>)
 800722c:	881a      	ldrh	r2, [r3, #0]
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007234:	f7fe fdec 	bl	8005e10 <clear_lock>
#endif
	return FR_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3758      	adds	r7, #88	; 0x58
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	41615252 	.word	0x41615252
 8007248:	61417272 	.word	0x61417272
 800724c:	200003bc 	.word	0x200003bc

08007250 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800725a:	2309      	movs	r3, #9
 800725c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01c      	beq.n	800729e <validate+0x4e>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d018      	beq.n	800729e <validate+0x4e>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d013      	beq.n	800729e <validate+0x4e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	889a      	ldrh	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	88db      	ldrh	r3, [r3, #6]
 8007280:	429a      	cmp	r2, r3
 8007282:	d10c      	bne.n	800729e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fada 	bl	8005844 <disk_status>
 8007290:	4603      	mov	r3, r0
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <validate+0x4e>
			res = FR_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d102      	bne.n	80072aa <validate+0x5a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	e000      	b.n	80072ac <validate+0x5c>
 80072aa:	2300      	movs	r3, #0
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	6013      	str	r3, [r2, #0]
	return res;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80072ce:	f107 0310 	add.w	r3, r7, #16
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff fcd5 	bl	8006c82 <get_ldnumber>
 80072d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da01      	bge.n	80072e4 <f_mount+0x28>
 80072e0:	230b      	movs	r3, #11
 80072e2:	e02b      	b.n	800733c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072e4:	4a17      	ldr	r2, [pc, #92]	; (8007344 <f_mount+0x88>)
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80072f4:	69b8      	ldr	r0, [r7, #24]
 80072f6:	f7fe fd8b 	bl	8005e10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	490d      	ldr	r1, [pc, #52]	; (8007344 <f_mount+0x88>)
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <f_mount+0x66>
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d001      	beq.n	8007326 <f_mount+0x6a>
 8007322:	2300      	movs	r3, #0
 8007324:	e00a      	b.n	800733c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007326:	f107 010c 	add.w	r1, r7, #12
 800732a:	f107 0308 	add.w	r3, r7, #8
 800732e:	2200      	movs	r2, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fd41 	bl	8006db8 <find_volume>
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800733a:	7dfb      	ldrb	r3, [r7, #23]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	200003b8 	.word	0x200003b8

08007348 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b098      	sub	sp, #96	; 0x60
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <f_open+0x18>
 800735c:	2309      	movs	r3, #9
 800735e:	e1ad      	b.n	80076bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007366:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007368:	79fa      	ldrb	r2, [r7, #7]
 800736a:	f107 0110 	add.w	r1, r7, #16
 800736e:	f107 0308 	add.w	r3, r7, #8
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fd20 	bl	8006db8 <find_volume>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800737e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8191 	bne.w	80076aa <f_open+0x362>
		dj.obj.fs = fs;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff fc03 	bl	8006ba0 <follow_path>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80073a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11a      	bne.n	80073de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80073a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da03      	bge.n	80073ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80073b2:	2306      	movs	r3, #6
 80073b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80073b8:	e011      	b.n	80073de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bf14      	ite	ne
 80073c4:	2301      	movne	r3, #1
 80073c6:	2300      	moveq	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	f107 0314 	add.w	r3, r7, #20
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fbd4 	bl	8005b80 <chk_lock>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	f003 031c 	and.w	r3, r3, #28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d07f      	beq.n	80074e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80073e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d017      	beq.n	8007420 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80073f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d10e      	bne.n	8007416 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80073f8:	f7fe fc1e 	bl	8005c38 <enq_lock>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d006      	beq.n	8007410 <f_open+0xc8>
 8007402:	f107 0314 	add.w	r3, r7, #20
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fb03 	bl	8006a12 <dir_register>
 800740c:	4603      	mov	r3, r0
 800740e:	e000      	b.n	8007412 <f_open+0xca>
 8007410:	2312      	movs	r3, #18
 8007412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	f043 0308 	orr.w	r3, r3, #8
 800741c:	71fb      	strb	r3, [r7, #7]
 800741e:	e010      	b.n	8007442 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007420:	7ebb      	ldrb	r3, [r7, #26]
 8007422:	f003 0311 	and.w	r3, r3, #17
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <f_open+0xea>
					res = FR_DENIED;
 800742a:	2307      	movs	r3, #7
 800742c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007430:	e007      	b.n	8007442 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <f_open+0xfa>
 800743c:	2308      	movs	r3, #8
 800743e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007446:	2b00      	cmp	r3, #0
 8007448:	d168      	bne.n	800751c <f_open+0x1d4>
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d063      	beq.n	800751c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007454:	f7fd fcc0 	bl	8004dd8 <get_fattime>
 8007458:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	330e      	adds	r3, #14
 800745e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fae3 	bl	8005a2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	3316      	adds	r3, #22
 800746a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fadd 	bl	8005a2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	330b      	adds	r3, #11
 8007476:	2220      	movs	r2, #32
 8007478:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800747e:	4611      	mov	r1, r2
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fa32 	bl	80068ea <ld_clust>
 8007486:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800748c:	2200      	movs	r2, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fa4a 	bl	8006928 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	331c      	adds	r3, #28
 8007498:	2100      	movs	r1, #0
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fac6 	bl	8005a2c <st_dword>
					fs->wflag = 1;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2201      	movs	r2, #1
 80074a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80074a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d037      	beq.n	800751c <f_open+0x1d4>
						dw = fs->winsect;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80074b2:	f107 0314 	add.w	r3, r7, #20
 80074b6:	2200      	movs	r2, #0
 80074b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe ff5d 	bl	800637a <remove_chain>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80074c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d126      	bne.n	800751c <f_open+0x1d4>
							res = move_window(fs, dw);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fd04 	bl	8005ee0 <move_window>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074e2:	3a01      	subs	r2, #1
 80074e4:	60da      	str	r2, [r3, #12]
 80074e6:	e019      	b.n	800751c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80074e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d115      	bne.n	800751c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80074f0:	7ebb      	ldrb	r3, [r7, #26]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <f_open+0x1ba>
					res = FR_NO_FILE;
 80074fa:	2304      	movs	r3, #4
 80074fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007500:	e00c      	b.n	800751c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <f_open+0x1d4>
 800750c:	7ebb      	ldrb	r3, [r7, #26]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <f_open+0x1d4>
						res = FR_DENIED;
 8007516:	2307      	movs	r3, #7
 8007518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800751c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007520:	2b00      	cmp	r3, #0
 8007522:	d128      	bne.n	8007576 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007534:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800753e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	bf14      	ite	ne
 800754e:	2301      	movne	r3, #1
 8007550:	2300      	moveq	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	f107 0314 	add.w	r3, r7, #20
 800755a:	4611      	mov	r1, r2
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fb8d 	bl	8005c7c <inc_lock>
 8007562:	4602      	mov	r2, r0
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <f_open+0x22e>
 8007570:	2302      	movs	r3, #2
 8007572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 8095 	bne.w	80076aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff f9af 	bl	80068ea <ld_clust>
 800758c:	4602      	mov	r2, r0
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007594:	331c      	adds	r3, #28
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fa0a 	bl	80059b0 <ld_dword>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	88da      	ldrh	r2, [r3, #6]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3330      	adds	r3, #48	; 0x30
 80075d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fa74 	bl	8005ac6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d060      	beq.n	80076aa <f_open+0x362>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d05c      	beq.n	80076aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	895b      	ldrh	r3, [r3, #10]
 80075fc:	025b      	lsls	r3, r3, #9
 80075fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	657b      	str	r3, [r7, #84]	; 0x54
 800760c:	e016      	b.n	800763c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fd1f 	bl	8006056 <get_fat>
 8007618:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800761a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800761c:	2b01      	cmp	r3, #1
 800761e:	d802      	bhi.n	8007626 <f_open+0x2de>
 8007620:	2302      	movs	r3, #2
 8007622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d102      	bne.n	8007634 <f_open+0x2ec>
 800762e:	2301      	movs	r3, #1
 8007630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
 800763c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <f_open+0x304>
 8007644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007648:	429a      	cmp	r2, r3
 800764a:	d8e0      	bhi.n	800760e <f_open+0x2c6>
				}
				fp->clust = clst;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007650:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007656:	2b00      	cmp	r3, #0
 8007658:	d127      	bne.n	80076aa <f_open+0x362>
 800765a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800765c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007660:	2b00      	cmp	r3, #0
 8007662:	d022      	beq.n	80076aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe fcd5 	bl	8006018 <clust2sect>
 800766e:	6478      	str	r0, [r7, #68]	; 0x44
 8007670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <f_open+0x336>
						res = FR_INT_ERR;
 8007676:	2302      	movs	r3, #2
 8007678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800767c:	e015      	b.n	80076aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800767e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007680:	0a5a      	lsrs	r2, r3, #9
 8007682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	7858      	ldrb	r0, [r3, #1]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a1a      	ldr	r2, [r3, #32]
 8007698:	2301      	movs	r3, #1
 800769a:	f7fe f913 	bl	80058c4 <disk_read>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <f_open+0x362>
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80076aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <f_open+0x370>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80076b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3760      	adds	r7, #96	; 0x60
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08c      	sub	sp, #48	; 0x30
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f107 0210 	add.w	r2, r7, #16
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fdb3 	bl	8007250 <validate>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80076f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d107      	bne.n	8007708 <f_write+0x44>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7d5b      	ldrb	r3, [r3, #21]
 80076fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <f_write+0x4a>
 8007708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800770c:	e14b      	b.n	80079a6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	7d1b      	ldrb	r3, [r3, #20]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <f_write+0x5a>
 800771a:	2307      	movs	r3, #7
 800771c:	e143      	b.n	80079a6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	429a      	cmp	r2, r3
 800772c:	f080 812d 	bcs.w	800798a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	43db      	mvns	r3, r3
 8007736:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007738:	e127      	b.n	800798a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 80e3 	bne.w	800790e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	0a5b      	lsrs	r3, r3, #9
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	8952      	ldrh	r2, [r2, #10]
 8007752:	3a01      	subs	r2, #1
 8007754:	4013      	ands	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d143      	bne.n	80077e6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10c      	bne.n	8007780 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d11a      	bne.n	80077a8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe fe64 	bl	8006444 <create_chain>
 800777c:	62b8      	str	r0, [r7, #40]	; 0x28
 800777e:	e013      	b.n	80077a8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7fe fef0 	bl	8006574 <clmt_clust>
 8007794:	62b8      	str	r0, [r7, #40]	; 0x28
 8007796:	e007      	b.n	80077a8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7fe fe4f 	bl	8006444 <create_chain>
 80077a6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80f2 	beq.w	8007994 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d104      	bne.n	80077c0 <f_write+0xfc>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2202      	movs	r2, #2
 80077ba:	755a      	strb	r2, [r3, #21]
 80077bc:	2302      	movs	r3, #2
 80077be:	e0f2      	b.n	80079a6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d104      	bne.n	80077d2 <f_write+0x10e>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	755a      	strb	r2, [r3, #21]
 80077ce:	2301      	movs	r3, #1
 80077d0:	e0e9      	b.n	80079a6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <f_write+0x122>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	7d1b      	ldrb	r3, [r3, #20]
 80077ea:	b25b      	sxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da18      	bge.n	8007822 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	7858      	ldrb	r0, [r3, #1]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1a      	ldr	r2, [r3, #32]
 80077fe:	2301      	movs	r3, #1
 8007800:	f7fe f880 	bl	8005904 <disk_write>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <f_write+0x150>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	755a      	strb	r2, [r3, #21]
 8007810:	2301      	movs	r3, #1
 8007812:	e0c8      	b.n	80079a6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	7d1b      	ldrb	r3, [r3, #20]
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	b2da      	uxtb	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f7fe fbf4 	bl	8006018 <clust2sect>
 8007830:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <f_write+0x17e>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2202      	movs	r2, #2
 800783c:	755a      	strb	r2, [r3, #21]
 800783e:	2302      	movs	r3, #2
 8007840:	e0b1      	b.n	80079a6 <f_write+0x2e2>
			sect += csect;
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	4413      	add	r3, r2
 8007848:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	0a5b      	lsrs	r3, r3, #9
 800784e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d03c      	beq.n	80078d0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	4413      	add	r3, r2
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	8952      	ldrh	r2, [r2, #10]
 8007860:	4293      	cmp	r3, r2
 8007862:	d905      	bls.n	8007870 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	895b      	ldrh	r3, [r3, #10]
 8007868:	461a      	mov	r2, r3
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	7858      	ldrb	r0, [r3, #1]
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	69f9      	ldr	r1, [r7, #28]
 800787a:	f7fe f843 	bl	8005904 <disk_write>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d004      	beq.n	800788e <f_write+0x1ca>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	755a      	strb	r2, [r3, #21]
 800788a:	2301      	movs	r3, #1
 800788c:	e08b      	b.n	80079a6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1a      	ldr	r2, [r3, #32]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	6a3a      	ldr	r2, [r7, #32]
 8007898:	429a      	cmp	r2, r3
 800789a:	d915      	bls.n	80078c8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a1a      	ldr	r2, [r3, #32]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	025b      	lsls	r3, r3, #9
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b4:	4619      	mov	r1, r3
 80078b6:	f7fe f8e5 	bl	8005a84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	7d1b      	ldrb	r3, [r3, #20]
 80078be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	025b      	lsls	r3, r3, #9
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80078ce:	e03f      	b.n	8007950 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d016      	beq.n	8007908 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d210      	bcs.n	8007908 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	7858      	ldrb	r0, [r3, #1]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f0:	2301      	movs	r3, #1
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	f7fd ffe6 	bl	80058c4 <disk_read>
 80078f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	755a      	strb	r2, [r3, #21]
 8007904:	2301      	movs	r3, #1
 8007906:	e04e      	b.n	80079a6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800791c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d901      	bls.n	8007928 <f_write+0x264>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	4413      	add	r3, r2
 8007938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793a:	69f9      	ldr	r1, [r7, #28]
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe f8a1 	bl	8005a84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	7d1b      	ldrb	r3, [r3, #20]
 8007946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800794a:	b2da      	uxtb	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	4413      	add	r3, r2
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	441a      	add	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	619a      	str	r2, [r3, #24]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	429a      	cmp	r2, r3
 800796e:	bf38      	it	cc
 8007970:	461a      	movcc	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	60da      	str	r2, [r3, #12]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	441a      	add	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f47f aed4 	bne.w	800773a <f_write+0x76>
 8007992:	e000      	b.n	8007996 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007994:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7d1b      	ldrb	r3, [r3, #20]
 800799a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3730      	adds	r7, #48	; 0x30
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f107 0208 	add.w	r2, r7, #8
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fc46 	bl	8007250 <validate>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d168      	bne.n	8007aa0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7d1b      	ldrb	r3, [r3, #20]
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d062      	beq.n	8007aa0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7d1b      	ldrb	r3, [r3, #20]
 80079de:	b25b      	sxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	da15      	bge.n	8007a10 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	7858      	ldrb	r0, [r3, #1]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1a      	ldr	r2, [r3, #32]
 80079f2:	2301      	movs	r3, #1
 80079f4:	f7fd ff86 	bl	8005904 <disk_write>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <f_sync+0x54>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e04f      	b.n	8007aa2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	7d1b      	ldrb	r3, [r3, #20]
 8007a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007a10:	f7fd f9e2 	bl	8004dd8 <get_fattime>
 8007a14:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f7fe fa5e 	bl	8005ee0 <move_window>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d138      	bne.n	8007aa0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	330b      	adds	r3, #11
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	330b      	adds	r3, #11
 8007a3e:	f042 0220 	orr.w	r2, r2, #32
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68f9      	ldr	r1, [r7, #12]
 8007a52:	f7fe ff69 	bl	8006928 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f103 021c 	add.w	r2, r3, #28
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f7fd ffe2 	bl	8005a2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3316      	adds	r3, #22
 8007a6c:	6939      	ldr	r1, [r7, #16]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd ffdc 	bl	8005a2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3312      	adds	r3, #18
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd ffbb 	bl	80059f6 <st_word>
					fs->wflag = 1;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2201      	movs	r2, #1
 8007a84:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe fa57 	bl	8005f3c <sync_fs>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7d1b      	ldrb	r3, [r3, #20]
 8007a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff7b 	bl	80079ae <f_sync>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d118      	bne.n	8007af4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f107 0208 	add.w	r2, r7, #8
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fbc0 	bl	8007250 <validate>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10c      	bne.n	8007af4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe f95a 	bl	8005d98 <dec_lock>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b16:	4b1f      	ldr	r3, [pc, #124]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b18:	7a5b      	ldrb	r3, [r3, #9]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d131      	bne.n	8007b84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b20:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b22:	7a5b      	ldrb	r3, [r3, #9]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b2e:	4b19      	ldr	r3, [pc, #100]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b30:	7a5b      	ldrb	r3, [r3, #9]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b3e:	4b15      	ldr	r3, [pc, #84]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b40:	7a5b      	ldrb	r3, [r3, #9]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b48:	4413      	add	r3, r2
 8007b4a:	79fa      	ldrb	r2, [r7, #7]
 8007b4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b4e:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b50:	7a5b      	ldrb	r3, [r3, #9]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	b2d1      	uxtb	r1, r2
 8007b58:	4a0e      	ldr	r2, [pc, #56]	; (8007b94 <FATFS_LinkDriverEx+0x94>)
 8007b5a:	7251      	strb	r1, [r2, #9]
 8007b5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b5e:	7dbb      	ldrb	r3, [r7, #22]
 8007b60:	3330      	adds	r3, #48	; 0x30
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	223a      	movs	r2, #58	; 0x3a
 8007b6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3302      	adds	r3, #2
 8007b74:	222f      	movs	r2, #47	; 0x2f
 8007b76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	3303      	adds	r3, #3
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	200003e0 	.word	0x200003e0

08007b98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ffaa 	bl	8007b00 <FATFS_LinkDriverEx>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <__cvt>:
 8007bb6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bba:	ec55 4b10 	vmov	r4, r5, d0
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	462b      	mov	r3, r5
 8007bc6:	bfbb      	ittet	lt
 8007bc8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bcc:	461d      	movlt	r5, r3
 8007bce:	2300      	movge	r3, #0
 8007bd0:	232d      	movlt	r3, #45	; 0x2d
 8007bd2:	700b      	strb	r3, [r1, #0]
 8007bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bda:	4691      	mov	r9, r2
 8007bdc:	f023 0820 	bic.w	r8, r3, #32
 8007be0:	bfbc      	itt	lt
 8007be2:	4622      	movlt	r2, r4
 8007be4:	4614      	movlt	r4, r2
 8007be6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bea:	d005      	beq.n	8007bf8 <__cvt+0x42>
 8007bec:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bf0:	d100      	bne.n	8007bf4 <__cvt+0x3e>
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	e000      	b.n	8007bfa <__cvt+0x44>
 8007bf8:	2103      	movs	r1, #3
 8007bfa:	ab03      	add	r3, sp, #12
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	ab02      	add	r3, sp, #8
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	ec45 4b10 	vmov	d0, r4, r5
 8007c06:	4653      	mov	r3, sl
 8007c08:	4632      	mov	r2, r6
 8007c0a:	f000 fe75 	bl	80088f8 <_dtoa_r>
 8007c0e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c12:	4607      	mov	r7, r0
 8007c14:	d102      	bne.n	8007c1c <__cvt+0x66>
 8007c16:	f019 0f01 	tst.w	r9, #1
 8007c1a:	d022      	beq.n	8007c62 <__cvt+0xac>
 8007c1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c20:	eb07 0906 	add.w	r9, r7, r6
 8007c24:	d110      	bne.n	8007c48 <__cvt+0x92>
 8007c26:	783b      	ldrb	r3, [r7, #0]
 8007c28:	2b30      	cmp	r3, #48	; 0x30
 8007c2a:	d10a      	bne.n	8007c42 <__cvt+0x8c>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c38:	b918      	cbnz	r0, 8007c42 <__cvt+0x8c>
 8007c3a:	f1c6 0601 	rsb	r6, r6, #1
 8007c3e:	f8ca 6000 	str.w	r6, [sl]
 8007c42:	f8da 3000 	ldr.w	r3, [sl]
 8007c46:	4499      	add	r9, r3
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	f7f8 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c54:	b108      	cbz	r0, 8007c5a <__cvt+0xa4>
 8007c56:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c5a:	2230      	movs	r2, #48	; 0x30
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	454b      	cmp	r3, r9
 8007c60:	d307      	bcc.n	8007c72 <__cvt+0xbc>
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c66:	1bdb      	subs	r3, r3, r7
 8007c68:	4638      	mov	r0, r7
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	b004      	add	sp, #16
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	1c59      	adds	r1, r3, #1
 8007c74:	9103      	str	r1, [sp, #12]
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e7f0      	b.n	8007c5c <__cvt+0xa6>

08007c7a <__exponent>:
 8007c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	bfb8      	it	lt
 8007c82:	4249      	neglt	r1, r1
 8007c84:	f803 2b02 	strb.w	r2, [r3], #2
 8007c88:	bfb4      	ite	lt
 8007c8a:	222d      	movlt	r2, #45	; 0x2d
 8007c8c:	222b      	movge	r2, #43	; 0x2b
 8007c8e:	2909      	cmp	r1, #9
 8007c90:	7042      	strb	r2, [r0, #1]
 8007c92:	dd2a      	ble.n	8007cea <__exponent+0x70>
 8007c94:	f10d 0207 	add.w	r2, sp, #7
 8007c98:	4617      	mov	r7, r2
 8007c9a:	260a      	movs	r6, #10
 8007c9c:	4694      	mov	ip, r2
 8007c9e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ca2:	fb06 1415 	mls	r4, r6, r5, r1
 8007ca6:	3430      	adds	r4, #48	; 0x30
 8007ca8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cac:	460c      	mov	r4, r1
 8007cae:	2c63      	cmp	r4, #99	; 0x63
 8007cb0:	f102 32ff 	add.w	r2, r2, #4294967295
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	dcf1      	bgt.n	8007c9c <__exponent+0x22>
 8007cb8:	3130      	adds	r1, #48	; 0x30
 8007cba:	f1ac 0402 	sub.w	r4, ip, #2
 8007cbe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007cc2:	1c41      	adds	r1, r0, #1
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	42ba      	cmp	r2, r7
 8007cc8:	d30a      	bcc.n	8007ce0 <__exponent+0x66>
 8007cca:	f10d 0209 	add.w	r2, sp, #9
 8007cce:	eba2 020c 	sub.w	r2, r2, ip
 8007cd2:	42bc      	cmp	r4, r7
 8007cd4:	bf88      	it	hi
 8007cd6:	2200      	movhi	r2, #0
 8007cd8:	4413      	add	r3, r2
 8007cda:	1a18      	subs	r0, r3, r0
 8007cdc:	b003      	add	sp, #12
 8007cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ce4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ce8:	e7ed      	b.n	8007cc6 <__exponent+0x4c>
 8007cea:	2330      	movs	r3, #48	; 0x30
 8007cec:	3130      	adds	r1, #48	; 0x30
 8007cee:	7083      	strb	r3, [r0, #2]
 8007cf0:	70c1      	strb	r1, [r0, #3]
 8007cf2:	1d03      	adds	r3, r0, #4
 8007cf4:	e7f1      	b.n	8007cda <__exponent+0x60>
	...

08007cf8 <_printf_float>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	ed2d 8b02 	vpush	{d8}
 8007d00:	b08d      	sub	sp, #52	; 0x34
 8007d02:	460c      	mov	r4, r1
 8007d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d08:	4616      	mov	r6, r2
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	f000 fcc7 	bl	80086a0 <_localeconv_r>
 8007d12:	f8d0 a000 	ldr.w	sl, [r0]
 8007d16:	4650      	mov	r0, sl
 8007d18:	f7f8 faaa 	bl	8000270 <strlen>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	f8d8 3000 	ldr.w	r3, [r8]
 8007d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	f023 0307 	bic.w	r3, r3, #7
 8007d32:	f103 0208 	add.w	r2, r3, #8
 8007d36:	f8c8 2000 	str.w	r2, [r8]
 8007d3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d42:	9307      	str	r3, [sp, #28]
 8007d44:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d48:	ee08 0a10 	vmov	s16, r0
 8007d4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d54:	4b9e      	ldr	r3, [pc, #632]	; (8007fd0 <_printf_float+0x2d8>)
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	f7f8 fee7 	bl	8000b2c <__aeabi_dcmpun>
 8007d5e:	bb88      	cbnz	r0, 8007dc4 <_printf_float+0xcc>
 8007d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d64:	4b9a      	ldr	r3, [pc, #616]	; (8007fd0 <_printf_float+0x2d8>)
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6a:	f7f8 fec1 	bl	8000af0 <__aeabi_dcmple>
 8007d6e:	bb48      	cbnz	r0, 8007dc4 <_printf_float+0xcc>
 8007d70:	2200      	movs	r2, #0
 8007d72:	2300      	movs	r3, #0
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 feb0 	bl	8000adc <__aeabi_dcmplt>
 8007d7c:	b110      	cbz	r0, 8007d84 <_printf_float+0x8c>
 8007d7e:	232d      	movs	r3, #45	; 0x2d
 8007d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d84:	4a93      	ldr	r2, [pc, #588]	; (8007fd4 <_printf_float+0x2dc>)
 8007d86:	4b94      	ldr	r3, [pc, #592]	; (8007fd8 <_printf_float+0x2e0>)
 8007d88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d8c:	bf94      	ite	ls
 8007d8e:	4690      	movls	r8, r2
 8007d90:	4698      	movhi	r8, r3
 8007d92:	2303      	movs	r3, #3
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	9b05      	ldr	r3, [sp, #20]
 8007d98:	f023 0304 	bic.w	r3, r3, #4
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	9700      	str	r7, [sp, #0]
 8007da4:	4633      	mov	r3, r6
 8007da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007da8:	4621      	mov	r1, r4
 8007daa:	4628      	mov	r0, r5
 8007dac:	f000 f9da 	bl	8008164 <_printf_common>
 8007db0:	3001      	adds	r0, #1
 8007db2:	f040 8090 	bne.w	8007ed6 <_printf_float+0x1de>
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dba:	b00d      	add	sp, #52	; 0x34
 8007dbc:	ecbd 8b02 	vpop	{d8}
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	4640      	mov	r0, r8
 8007dca:	4649      	mov	r1, r9
 8007dcc:	f7f8 feae 	bl	8000b2c <__aeabi_dcmpun>
 8007dd0:	b140      	cbz	r0, 8007de4 <_printf_float+0xec>
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfbc      	itt	lt
 8007dd8:	232d      	movlt	r3, #45	; 0x2d
 8007dda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dde:	4a7f      	ldr	r2, [pc, #508]	; (8007fdc <_printf_float+0x2e4>)
 8007de0:	4b7f      	ldr	r3, [pc, #508]	; (8007fe0 <_printf_float+0x2e8>)
 8007de2:	e7d1      	b.n	8007d88 <_printf_float+0x90>
 8007de4:	6863      	ldr	r3, [r4, #4]
 8007de6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007dea:	9206      	str	r2, [sp, #24]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	d13f      	bne.n	8007e70 <_printf_float+0x178>
 8007df0:	2306      	movs	r3, #6
 8007df2:	6063      	str	r3, [r4, #4]
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	6861      	ldr	r1, [r4, #4]
 8007df8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9303      	str	r3, [sp, #12]
 8007e00:	ab0a      	add	r3, sp, #40	; 0x28
 8007e02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e06:	ab09      	add	r3, sp, #36	; 0x24
 8007e08:	ec49 8b10 	vmov	d0, r8, r9
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e14:	4628      	mov	r0, r5
 8007e16:	f7ff fece 	bl	8007bb6 <__cvt>
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e1e:	2b47      	cmp	r3, #71	; 0x47
 8007e20:	4680      	mov	r8, r0
 8007e22:	d108      	bne.n	8007e36 <_printf_float+0x13e>
 8007e24:	1cc8      	adds	r0, r1, #3
 8007e26:	db02      	blt.n	8007e2e <_printf_float+0x136>
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	dd41      	ble.n	8007eb2 <_printf_float+0x1ba>
 8007e2e:	f1ab 0302 	sub.w	r3, fp, #2
 8007e32:	fa5f fb83 	uxtb.w	fp, r3
 8007e36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e3a:	d820      	bhi.n	8007e7e <_printf_float+0x186>
 8007e3c:	3901      	subs	r1, #1
 8007e3e:	465a      	mov	r2, fp
 8007e40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e44:	9109      	str	r1, [sp, #36]	; 0x24
 8007e46:	f7ff ff18 	bl	8007c7a <__exponent>
 8007e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e4c:	1813      	adds	r3, r2, r0
 8007e4e:	2a01      	cmp	r2, #1
 8007e50:	4681      	mov	r9, r0
 8007e52:	6123      	str	r3, [r4, #16]
 8007e54:	dc02      	bgt.n	8007e5c <_printf_float+0x164>
 8007e56:	6822      	ldr	r2, [r4, #0]
 8007e58:	07d2      	lsls	r2, r2, #31
 8007e5a:	d501      	bpl.n	8007e60 <_printf_float+0x168>
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	6123      	str	r3, [r4, #16]
 8007e60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d09c      	beq.n	8007da2 <_printf_float+0xaa>
 8007e68:	232d      	movs	r3, #45	; 0x2d
 8007e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e6e:	e798      	b.n	8007da2 <_printf_float+0xaa>
 8007e70:	9a06      	ldr	r2, [sp, #24]
 8007e72:	2a47      	cmp	r2, #71	; 0x47
 8007e74:	d1be      	bne.n	8007df4 <_printf_float+0xfc>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1bc      	bne.n	8007df4 <_printf_float+0xfc>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e7b9      	b.n	8007df2 <_printf_float+0xfa>
 8007e7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e82:	d118      	bne.n	8007eb6 <_printf_float+0x1be>
 8007e84:	2900      	cmp	r1, #0
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	dd0b      	ble.n	8007ea2 <_printf_float+0x1aa>
 8007e8a:	6121      	str	r1, [r4, #16]
 8007e8c:	b913      	cbnz	r3, 8007e94 <_printf_float+0x19c>
 8007e8e:	6822      	ldr	r2, [r4, #0]
 8007e90:	07d0      	lsls	r0, r2, #31
 8007e92:	d502      	bpl.n	8007e9a <_printf_float+0x1a2>
 8007e94:	3301      	adds	r3, #1
 8007e96:	440b      	add	r3, r1
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e9c:	f04f 0900 	mov.w	r9, #0
 8007ea0:	e7de      	b.n	8007e60 <_printf_float+0x168>
 8007ea2:	b913      	cbnz	r3, 8007eaa <_printf_float+0x1b2>
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	07d2      	lsls	r2, r2, #31
 8007ea8:	d501      	bpl.n	8007eae <_printf_float+0x1b6>
 8007eaa:	3302      	adds	r3, #2
 8007eac:	e7f4      	b.n	8007e98 <_printf_float+0x1a0>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7f2      	b.n	8007e98 <_printf_float+0x1a0>
 8007eb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	db05      	blt.n	8007ec8 <_printf_float+0x1d0>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	6121      	str	r1, [r4, #16]
 8007ec0:	07d8      	lsls	r0, r3, #31
 8007ec2:	d5ea      	bpl.n	8007e9a <_printf_float+0x1a2>
 8007ec4:	1c4b      	adds	r3, r1, #1
 8007ec6:	e7e7      	b.n	8007e98 <_printf_float+0x1a0>
 8007ec8:	2900      	cmp	r1, #0
 8007eca:	bfd4      	ite	le
 8007ecc:	f1c1 0202 	rsble	r2, r1, #2
 8007ed0:	2201      	movgt	r2, #1
 8007ed2:	4413      	add	r3, r2
 8007ed4:	e7e0      	b.n	8007e98 <_printf_float+0x1a0>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	055a      	lsls	r2, r3, #21
 8007eda:	d407      	bmi.n	8007eec <_printf_float+0x1f4>
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	4642      	mov	r2, r8
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d12c      	bne.n	8007f44 <_printf_float+0x24c>
 8007eea:	e764      	b.n	8007db6 <_printf_float+0xbe>
 8007eec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ef0:	f240 80e0 	bls.w	80080b4 <_printf_float+0x3bc>
 8007ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2300      	movs	r3, #0
 8007efc:	f7f8 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d034      	beq.n	8007f6e <_printf_float+0x276>
 8007f04:	4a37      	ldr	r2, [pc, #220]	; (8007fe4 <_printf_float+0x2ec>)
 8007f06:	2301      	movs	r3, #1
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b8      	blx	r7
 8007f0e:	3001      	adds	r0, #1
 8007f10:	f43f af51 	beq.w	8007db6 <_printf_float+0xbe>
 8007f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	db02      	blt.n	8007f22 <_printf_float+0x22a>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	07d8      	lsls	r0, r3, #31
 8007f20:	d510      	bpl.n	8007f44 <_printf_float+0x24c>
 8007f22:	ee18 3a10 	vmov	r3, s16
 8007f26:	4652      	mov	r2, sl
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	f43f af41 	beq.w	8007db6 <_printf_float+0xbe>
 8007f34:	f04f 0800 	mov.w	r8, #0
 8007f38:	f104 091a 	add.w	r9, r4, #26
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4543      	cmp	r3, r8
 8007f42:	dc09      	bgt.n	8007f58 <_printf_float+0x260>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	079b      	lsls	r3, r3, #30
 8007f48:	f100 8107 	bmi.w	800815a <_printf_float+0x462>
 8007f4c:	68e0      	ldr	r0, [r4, #12]
 8007f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f50:	4298      	cmp	r0, r3
 8007f52:	bfb8      	it	lt
 8007f54:	4618      	movlt	r0, r3
 8007f56:	e730      	b.n	8007dba <_printf_float+0xc2>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	464a      	mov	r2, r9
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	f43f af27 	beq.w	8007db6 <_printf_float+0xbe>
 8007f68:	f108 0801 	add.w	r8, r8, #1
 8007f6c:	e7e6      	b.n	8007f3c <_printf_float+0x244>
 8007f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dc39      	bgt.n	8007fe8 <_printf_float+0x2f0>
 8007f74:	4a1b      	ldr	r2, [pc, #108]	; (8007fe4 <_printf_float+0x2ec>)
 8007f76:	2301      	movs	r3, #1
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f af19 	beq.w	8007db6 <_printf_float+0xbe>
 8007f84:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d102      	bne.n	8007f92 <_printf_float+0x29a>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	07d9      	lsls	r1, r3, #31
 8007f90:	d5d8      	bpl.n	8007f44 <_printf_float+0x24c>
 8007f92:	ee18 3a10 	vmov	r3, s16
 8007f96:	4652      	mov	r2, sl
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f43f af09 	beq.w	8007db6 <_printf_float+0xbe>
 8007fa4:	f04f 0900 	mov.w	r9, #0
 8007fa8:	f104 0a1a 	add.w	sl, r4, #26
 8007fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fae:	425b      	negs	r3, r3
 8007fb0:	454b      	cmp	r3, r9
 8007fb2:	dc01      	bgt.n	8007fb8 <_printf_float+0x2c0>
 8007fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb6:	e792      	b.n	8007ede <_printf_float+0x1e6>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4652      	mov	r2, sl
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f aef7 	beq.w	8007db6 <_printf_float+0xbe>
 8007fc8:	f109 0901 	add.w	r9, r9, #1
 8007fcc:	e7ee      	b.n	8007fac <_printf_float+0x2b4>
 8007fce:	bf00      	nop
 8007fd0:	7fefffff 	.word	0x7fefffff
 8007fd4:	0800a664 	.word	0x0800a664
 8007fd8:	0800a668 	.word	0x0800a668
 8007fdc:	0800a66c 	.word	0x0800a66c
 8007fe0:	0800a670 	.word	0x0800a670
 8007fe4:	0800a674 	.word	0x0800a674
 8007fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fec:	429a      	cmp	r2, r3
 8007fee:	bfa8      	it	ge
 8007ff0:	461a      	movge	r2, r3
 8007ff2:	2a00      	cmp	r2, #0
 8007ff4:	4691      	mov	r9, r2
 8007ff6:	dc37      	bgt.n	8008068 <_printf_float+0x370>
 8007ff8:	f04f 0b00 	mov.w	fp, #0
 8007ffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008000:	f104 021a 	add.w	r2, r4, #26
 8008004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008006:	9305      	str	r3, [sp, #20]
 8008008:	eba3 0309 	sub.w	r3, r3, r9
 800800c:	455b      	cmp	r3, fp
 800800e:	dc33      	bgt.n	8008078 <_printf_float+0x380>
 8008010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008014:	429a      	cmp	r2, r3
 8008016:	db3b      	blt.n	8008090 <_printf_float+0x398>
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	07da      	lsls	r2, r3, #31
 800801c:	d438      	bmi.n	8008090 <_printf_float+0x398>
 800801e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008022:	eba2 0903 	sub.w	r9, r2, r3
 8008026:	9b05      	ldr	r3, [sp, #20]
 8008028:	1ad2      	subs	r2, r2, r3
 800802a:	4591      	cmp	r9, r2
 800802c:	bfa8      	it	ge
 800802e:	4691      	movge	r9, r2
 8008030:	f1b9 0f00 	cmp.w	r9, #0
 8008034:	dc35      	bgt.n	80080a2 <_printf_float+0x3aa>
 8008036:	f04f 0800 	mov.w	r8, #0
 800803a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800803e:	f104 0a1a 	add.w	sl, r4, #26
 8008042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	eba3 0309 	sub.w	r3, r3, r9
 800804c:	4543      	cmp	r3, r8
 800804e:	f77f af79 	ble.w	8007f44 <_printf_float+0x24c>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f aeaa 	beq.w	8007db6 <_printf_float+0xbe>
 8008062:	f108 0801 	add.w	r8, r8, #1
 8008066:	e7ec      	b.n	8008042 <_printf_float+0x34a>
 8008068:	4613      	mov	r3, r2
 800806a:	4631      	mov	r1, r6
 800806c:	4642      	mov	r2, r8
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	d1c0      	bne.n	8007ff8 <_printf_float+0x300>
 8008076:	e69e      	b.n	8007db6 <_printf_float+0xbe>
 8008078:	2301      	movs	r3, #1
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	9205      	str	r2, [sp, #20]
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f ae97 	beq.w	8007db6 <_printf_float+0xbe>
 8008088:	9a05      	ldr	r2, [sp, #20]
 800808a:	f10b 0b01 	add.w	fp, fp, #1
 800808e:	e7b9      	b.n	8008004 <_printf_float+0x30c>
 8008090:	ee18 3a10 	vmov	r3, s16
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	d1be      	bne.n	800801e <_printf_float+0x326>
 80080a0:	e689      	b.n	8007db6 <_printf_float+0xbe>
 80080a2:	9a05      	ldr	r2, [sp, #20]
 80080a4:	464b      	mov	r3, r9
 80080a6:	4442      	add	r2, r8
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	d1c1      	bne.n	8008036 <_printf_float+0x33e>
 80080b2:	e680      	b.n	8007db6 <_printf_float+0xbe>
 80080b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b6:	2a01      	cmp	r2, #1
 80080b8:	dc01      	bgt.n	80080be <_printf_float+0x3c6>
 80080ba:	07db      	lsls	r3, r3, #31
 80080bc:	d53a      	bpl.n	8008134 <_printf_float+0x43c>
 80080be:	2301      	movs	r3, #1
 80080c0:	4642      	mov	r2, r8
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f ae74 	beq.w	8007db6 <_printf_float+0xbe>
 80080ce:	ee18 3a10 	vmov	r3, s16
 80080d2:	4652      	mov	r2, sl
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f ae6b 	beq.w	8007db6 <_printf_float+0xbe>
 80080e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80080ec:	f7f8 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f0:	b9d8      	cbnz	r0, 800812a <_printf_float+0x432>
 80080f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080f6:	f108 0201 	add.w	r2, r8, #1
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	d10e      	bne.n	8008122 <_printf_float+0x42a>
 8008104:	e657      	b.n	8007db6 <_printf_float+0xbe>
 8008106:	2301      	movs	r3, #1
 8008108:	4652      	mov	r2, sl
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae50 	beq.w	8007db6 <_printf_float+0xbe>
 8008116:	f108 0801 	add.w	r8, r8, #1
 800811a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811c:	3b01      	subs	r3, #1
 800811e:	4543      	cmp	r3, r8
 8008120:	dcf1      	bgt.n	8008106 <_printf_float+0x40e>
 8008122:	464b      	mov	r3, r9
 8008124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008128:	e6da      	b.n	8007ee0 <_printf_float+0x1e8>
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	f104 0a1a 	add.w	sl, r4, #26
 8008132:	e7f2      	b.n	800811a <_printf_float+0x422>
 8008134:	2301      	movs	r3, #1
 8008136:	4642      	mov	r2, r8
 8008138:	e7df      	b.n	80080fa <_printf_float+0x402>
 800813a:	2301      	movs	r3, #1
 800813c:	464a      	mov	r2, r9
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	f43f ae36 	beq.w	8007db6 <_printf_float+0xbe>
 800814a:	f108 0801 	add.w	r8, r8, #1
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008152:	1a5b      	subs	r3, r3, r1
 8008154:	4543      	cmp	r3, r8
 8008156:	dcf0      	bgt.n	800813a <_printf_float+0x442>
 8008158:	e6f8      	b.n	8007f4c <_printf_float+0x254>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	f104 0919 	add.w	r9, r4, #25
 8008162:	e7f4      	b.n	800814e <_printf_float+0x456>

08008164 <_printf_common>:
 8008164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008168:	4616      	mov	r6, r2
 800816a:	4699      	mov	r9, r3
 800816c:	688a      	ldr	r2, [r1, #8]
 800816e:	690b      	ldr	r3, [r1, #16]
 8008170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008174:	4293      	cmp	r3, r2
 8008176:	bfb8      	it	lt
 8008178:	4613      	movlt	r3, r2
 800817a:	6033      	str	r3, [r6, #0]
 800817c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008180:	4607      	mov	r7, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b10a      	cbz	r2, 800818a <_printf_common+0x26>
 8008186:	3301      	adds	r3, #1
 8008188:	6033      	str	r3, [r6, #0]
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	0699      	lsls	r1, r3, #26
 800818e:	bf42      	ittt	mi
 8008190:	6833      	ldrmi	r3, [r6, #0]
 8008192:	3302      	addmi	r3, #2
 8008194:	6033      	strmi	r3, [r6, #0]
 8008196:	6825      	ldr	r5, [r4, #0]
 8008198:	f015 0506 	ands.w	r5, r5, #6
 800819c:	d106      	bne.n	80081ac <_printf_common+0x48>
 800819e:	f104 0a19 	add.w	sl, r4, #25
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	6832      	ldr	r2, [r6, #0]
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dc26      	bgt.n	80081fa <_printf_common+0x96>
 80081ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081b0:	1e13      	subs	r3, r2, #0
 80081b2:	6822      	ldr	r2, [r4, #0]
 80081b4:	bf18      	it	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	0692      	lsls	r2, r2, #26
 80081ba:	d42b      	bmi.n	8008214 <_printf_common+0xb0>
 80081bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c0:	4649      	mov	r1, r9
 80081c2:	4638      	mov	r0, r7
 80081c4:	47c0      	blx	r8
 80081c6:	3001      	adds	r0, #1
 80081c8:	d01e      	beq.n	8008208 <_printf_common+0xa4>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	6922      	ldr	r2, [r4, #16]
 80081ce:	f003 0306 	and.w	r3, r3, #6
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	bf02      	ittt	eq
 80081d6:	68e5      	ldreq	r5, [r4, #12]
 80081d8:	6833      	ldreq	r3, [r6, #0]
 80081da:	1aed      	subeq	r5, r5, r3
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	bf0c      	ite	eq
 80081e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081e4:	2500      	movne	r5, #0
 80081e6:	4293      	cmp	r3, r2
 80081e8:	bfc4      	itt	gt
 80081ea:	1a9b      	subgt	r3, r3, r2
 80081ec:	18ed      	addgt	r5, r5, r3
 80081ee:	2600      	movs	r6, #0
 80081f0:	341a      	adds	r4, #26
 80081f2:	42b5      	cmp	r5, r6
 80081f4:	d11a      	bne.n	800822c <_printf_common+0xc8>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e008      	b.n	800820c <_printf_common+0xa8>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4652      	mov	r2, sl
 80081fe:	4649      	mov	r1, r9
 8008200:	4638      	mov	r0, r7
 8008202:	47c0      	blx	r8
 8008204:	3001      	adds	r0, #1
 8008206:	d103      	bne.n	8008210 <_printf_common+0xac>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295
 800820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008210:	3501      	adds	r5, #1
 8008212:	e7c6      	b.n	80081a2 <_printf_common+0x3e>
 8008214:	18e1      	adds	r1, r4, r3
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	2030      	movs	r0, #48	; 0x30
 800821a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800821e:	4422      	add	r2, r4
 8008220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008228:	3302      	adds	r3, #2
 800822a:	e7c7      	b.n	80081bc <_printf_common+0x58>
 800822c:	2301      	movs	r3, #1
 800822e:	4622      	mov	r2, r4
 8008230:	4649      	mov	r1, r9
 8008232:	4638      	mov	r0, r7
 8008234:	47c0      	blx	r8
 8008236:	3001      	adds	r0, #1
 8008238:	d0e6      	beq.n	8008208 <_printf_common+0xa4>
 800823a:	3601      	adds	r6, #1
 800823c:	e7d9      	b.n	80081f2 <_printf_common+0x8e>
	...

08008240 <_printf_i>:
 8008240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	7e0f      	ldrb	r7, [r1, #24]
 8008246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008248:	2f78      	cmp	r7, #120	; 0x78
 800824a:	4691      	mov	r9, r2
 800824c:	4680      	mov	r8, r0
 800824e:	460c      	mov	r4, r1
 8008250:	469a      	mov	sl, r3
 8008252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008256:	d807      	bhi.n	8008268 <_printf_i+0x28>
 8008258:	2f62      	cmp	r7, #98	; 0x62
 800825a:	d80a      	bhi.n	8008272 <_printf_i+0x32>
 800825c:	2f00      	cmp	r7, #0
 800825e:	f000 80d4 	beq.w	800840a <_printf_i+0x1ca>
 8008262:	2f58      	cmp	r7, #88	; 0x58
 8008264:	f000 80c0 	beq.w	80083e8 <_printf_i+0x1a8>
 8008268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800826c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008270:	e03a      	b.n	80082e8 <_printf_i+0xa8>
 8008272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008276:	2b15      	cmp	r3, #21
 8008278:	d8f6      	bhi.n	8008268 <_printf_i+0x28>
 800827a:	a101      	add	r1, pc, #4	; (adr r1, 8008280 <_printf_i+0x40>)
 800827c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008280:	080082d9 	.word	0x080082d9
 8008284:	080082ed 	.word	0x080082ed
 8008288:	08008269 	.word	0x08008269
 800828c:	08008269 	.word	0x08008269
 8008290:	08008269 	.word	0x08008269
 8008294:	08008269 	.word	0x08008269
 8008298:	080082ed 	.word	0x080082ed
 800829c:	08008269 	.word	0x08008269
 80082a0:	08008269 	.word	0x08008269
 80082a4:	08008269 	.word	0x08008269
 80082a8:	08008269 	.word	0x08008269
 80082ac:	080083f1 	.word	0x080083f1
 80082b0:	08008319 	.word	0x08008319
 80082b4:	080083ab 	.word	0x080083ab
 80082b8:	08008269 	.word	0x08008269
 80082bc:	08008269 	.word	0x08008269
 80082c0:	08008413 	.word	0x08008413
 80082c4:	08008269 	.word	0x08008269
 80082c8:	08008319 	.word	0x08008319
 80082cc:	08008269 	.word	0x08008269
 80082d0:	08008269 	.word	0x08008269
 80082d4:	080083b3 	.word	0x080083b3
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	602a      	str	r2, [r5, #0]
 80082e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082e8:	2301      	movs	r3, #1
 80082ea:	e09f      	b.n	800842c <_printf_i+0x1ec>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	0607      	lsls	r7, r0, #24
 80082f2:	f103 0104 	add.w	r1, r3, #4
 80082f6:	6029      	str	r1, [r5, #0]
 80082f8:	d501      	bpl.n	80082fe <_printf_i+0xbe>
 80082fa:	681e      	ldr	r6, [r3, #0]
 80082fc:	e003      	b.n	8008306 <_printf_i+0xc6>
 80082fe:	0646      	lsls	r6, r0, #25
 8008300:	d5fb      	bpl.n	80082fa <_printf_i+0xba>
 8008302:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008306:	2e00      	cmp	r6, #0
 8008308:	da03      	bge.n	8008312 <_printf_i+0xd2>
 800830a:	232d      	movs	r3, #45	; 0x2d
 800830c:	4276      	negs	r6, r6
 800830e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008312:	485a      	ldr	r0, [pc, #360]	; (800847c <_printf_i+0x23c>)
 8008314:	230a      	movs	r3, #10
 8008316:	e012      	b.n	800833e <_printf_i+0xfe>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	1d19      	adds	r1, r3, #4
 800831e:	6029      	str	r1, [r5, #0]
 8008320:	0605      	lsls	r5, r0, #24
 8008322:	d501      	bpl.n	8008328 <_printf_i+0xe8>
 8008324:	681e      	ldr	r6, [r3, #0]
 8008326:	e002      	b.n	800832e <_printf_i+0xee>
 8008328:	0641      	lsls	r1, r0, #25
 800832a:	d5fb      	bpl.n	8008324 <_printf_i+0xe4>
 800832c:	881e      	ldrh	r6, [r3, #0]
 800832e:	4853      	ldr	r0, [pc, #332]	; (800847c <_printf_i+0x23c>)
 8008330:	2f6f      	cmp	r7, #111	; 0x6f
 8008332:	bf0c      	ite	eq
 8008334:	2308      	moveq	r3, #8
 8008336:	230a      	movne	r3, #10
 8008338:	2100      	movs	r1, #0
 800833a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800833e:	6865      	ldr	r5, [r4, #4]
 8008340:	60a5      	str	r5, [r4, #8]
 8008342:	2d00      	cmp	r5, #0
 8008344:	bfa2      	ittt	ge
 8008346:	6821      	ldrge	r1, [r4, #0]
 8008348:	f021 0104 	bicge.w	r1, r1, #4
 800834c:	6021      	strge	r1, [r4, #0]
 800834e:	b90e      	cbnz	r6, 8008354 <_printf_i+0x114>
 8008350:	2d00      	cmp	r5, #0
 8008352:	d04b      	beq.n	80083ec <_printf_i+0x1ac>
 8008354:	4615      	mov	r5, r2
 8008356:	fbb6 f1f3 	udiv	r1, r6, r3
 800835a:	fb03 6711 	mls	r7, r3, r1, r6
 800835e:	5dc7      	ldrb	r7, [r0, r7]
 8008360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008364:	4637      	mov	r7, r6
 8008366:	42bb      	cmp	r3, r7
 8008368:	460e      	mov	r6, r1
 800836a:	d9f4      	bls.n	8008356 <_printf_i+0x116>
 800836c:	2b08      	cmp	r3, #8
 800836e:	d10b      	bne.n	8008388 <_printf_i+0x148>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	07de      	lsls	r6, r3, #31
 8008374:	d508      	bpl.n	8008388 <_printf_i+0x148>
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	6861      	ldr	r1, [r4, #4]
 800837a:	4299      	cmp	r1, r3
 800837c:	bfde      	ittt	le
 800837e:	2330      	movle	r3, #48	; 0x30
 8008380:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008384:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008388:	1b52      	subs	r2, r2, r5
 800838a:	6122      	str	r2, [r4, #16]
 800838c:	f8cd a000 	str.w	sl, [sp]
 8008390:	464b      	mov	r3, r9
 8008392:	aa03      	add	r2, sp, #12
 8008394:	4621      	mov	r1, r4
 8008396:	4640      	mov	r0, r8
 8008398:	f7ff fee4 	bl	8008164 <_printf_common>
 800839c:	3001      	adds	r0, #1
 800839e:	d14a      	bne.n	8008436 <_printf_i+0x1f6>
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	b004      	add	sp, #16
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	f043 0320 	orr.w	r3, r3, #32
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	4833      	ldr	r0, [pc, #204]	; (8008480 <_printf_i+0x240>)
 80083b4:	2778      	movs	r7, #120	; 0x78
 80083b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	6829      	ldr	r1, [r5, #0]
 80083be:	061f      	lsls	r7, r3, #24
 80083c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083c4:	d402      	bmi.n	80083cc <_printf_i+0x18c>
 80083c6:	065f      	lsls	r7, r3, #25
 80083c8:	bf48      	it	mi
 80083ca:	b2b6      	uxthmi	r6, r6
 80083cc:	07df      	lsls	r7, r3, #31
 80083ce:	bf48      	it	mi
 80083d0:	f043 0320 	orrmi.w	r3, r3, #32
 80083d4:	6029      	str	r1, [r5, #0]
 80083d6:	bf48      	it	mi
 80083d8:	6023      	strmi	r3, [r4, #0]
 80083da:	b91e      	cbnz	r6, 80083e4 <_printf_i+0x1a4>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	f023 0320 	bic.w	r3, r3, #32
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	2310      	movs	r3, #16
 80083e6:	e7a7      	b.n	8008338 <_printf_i+0xf8>
 80083e8:	4824      	ldr	r0, [pc, #144]	; (800847c <_printf_i+0x23c>)
 80083ea:	e7e4      	b.n	80083b6 <_printf_i+0x176>
 80083ec:	4615      	mov	r5, r2
 80083ee:	e7bd      	b.n	800836c <_printf_i+0x12c>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	6826      	ldr	r6, [r4, #0]
 80083f4:	6961      	ldr	r1, [r4, #20]
 80083f6:	1d18      	adds	r0, r3, #4
 80083f8:	6028      	str	r0, [r5, #0]
 80083fa:	0635      	lsls	r5, r6, #24
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	d501      	bpl.n	8008404 <_printf_i+0x1c4>
 8008400:	6019      	str	r1, [r3, #0]
 8008402:	e002      	b.n	800840a <_printf_i+0x1ca>
 8008404:	0670      	lsls	r0, r6, #25
 8008406:	d5fb      	bpl.n	8008400 <_printf_i+0x1c0>
 8008408:	8019      	strh	r1, [r3, #0]
 800840a:	2300      	movs	r3, #0
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	4615      	mov	r5, r2
 8008410:	e7bc      	b.n	800838c <_printf_i+0x14c>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	1d1a      	adds	r2, r3, #4
 8008416:	602a      	str	r2, [r5, #0]
 8008418:	681d      	ldr	r5, [r3, #0]
 800841a:	6862      	ldr	r2, [r4, #4]
 800841c:	2100      	movs	r1, #0
 800841e:	4628      	mov	r0, r5
 8008420:	f7f7 fed6 	bl	80001d0 <memchr>
 8008424:	b108      	cbz	r0, 800842a <_printf_i+0x1ea>
 8008426:	1b40      	subs	r0, r0, r5
 8008428:	6060      	str	r0, [r4, #4]
 800842a:	6863      	ldr	r3, [r4, #4]
 800842c:	6123      	str	r3, [r4, #16]
 800842e:	2300      	movs	r3, #0
 8008430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008434:	e7aa      	b.n	800838c <_printf_i+0x14c>
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	462a      	mov	r2, r5
 800843a:	4649      	mov	r1, r9
 800843c:	4640      	mov	r0, r8
 800843e:	47d0      	blx	sl
 8008440:	3001      	adds	r0, #1
 8008442:	d0ad      	beq.n	80083a0 <_printf_i+0x160>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	079b      	lsls	r3, r3, #30
 8008448:	d413      	bmi.n	8008472 <_printf_i+0x232>
 800844a:	68e0      	ldr	r0, [r4, #12]
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	4298      	cmp	r0, r3
 8008450:	bfb8      	it	lt
 8008452:	4618      	movlt	r0, r3
 8008454:	e7a6      	b.n	80083a4 <_printf_i+0x164>
 8008456:	2301      	movs	r3, #1
 8008458:	4632      	mov	r2, r6
 800845a:	4649      	mov	r1, r9
 800845c:	4640      	mov	r0, r8
 800845e:	47d0      	blx	sl
 8008460:	3001      	adds	r0, #1
 8008462:	d09d      	beq.n	80083a0 <_printf_i+0x160>
 8008464:	3501      	adds	r5, #1
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	9903      	ldr	r1, [sp, #12]
 800846a:	1a5b      	subs	r3, r3, r1
 800846c:	42ab      	cmp	r3, r5
 800846e:	dcf2      	bgt.n	8008456 <_printf_i+0x216>
 8008470:	e7eb      	b.n	800844a <_printf_i+0x20a>
 8008472:	2500      	movs	r5, #0
 8008474:	f104 0619 	add.w	r6, r4, #25
 8008478:	e7f5      	b.n	8008466 <_printf_i+0x226>
 800847a:	bf00      	nop
 800847c:	0800a676 	.word	0x0800a676
 8008480:	0800a687 	.word	0x0800a687

08008484 <std>:
 8008484:	2300      	movs	r3, #0
 8008486:	b510      	push	{r4, lr}
 8008488:	4604      	mov	r4, r0
 800848a:	e9c0 3300 	strd	r3, r3, [r0]
 800848e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008492:	6083      	str	r3, [r0, #8]
 8008494:	8181      	strh	r1, [r0, #12]
 8008496:	6643      	str	r3, [r0, #100]	; 0x64
 8008498:	81c2      	strh	r2, [r0, #14]
 800849a:	6183      	str	r3, [r0, #24]
 800849c:	4619      	mov	r1, r3
 800849e:	2208      	movs	r2, #8
 80084a0:	305c      	adds	r0, #92	; 0x5c
 80084a2:	f000 f8e2 	bl	800866a <memset>
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x38>)
 80084a8:	6263      	str	r3, [r4, #36]	; 0x24
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <std+0x3c>)
 80084ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <std+0x40>)
 80084b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <std+0x44>)
 80084b4:	6224      	str	r4, [r4, #32]
 80084b6:	6323      	str	r3, [r4, #48]	; 0x30
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	bf00      	nop
 80084bc:	080085e5 	.word	0x080085e5
 80084c0:	08008607 	.word	0x08008607
 80084c4:	0800863f 	.word	0x0800863f
 80084c8:	08008663 	.word	0x08008663

080084cc <stdio_exit_handler>:
 80084cc:	4a02      	ldr	r2, [pc, #8]	; (80084d8 <stdio_exit_handler+0xc>)
 80084ce:	4903      	ldr	r1, [pc, #12]	; (80084dc <stdio_exit_handler+0x10>)
 80084d0:	4803      	ldr	r0, [pc, #12]	; (80084e0 <stdio_exit_handler+0x14>)
 80084d2:	f000 b869 	b.w	80085a8 <_fwalk_sglue>
 80084d6:	bf00      	nop
 80084d8:	20000024 	.word	0x20000024
 80084dc:	08009f21 	.word	0x08009f21
 80084e0:	2000019c 	.word	0x2000019c

080084e4 <cleanup_stdio>:
 80084e4:	6841      	ldr	r1, [r0, #4]
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <cleanup_stdio+0x34>)
 80084e8:	4299      	cmp	r1, r3
 80084ea:	b510      	push	{r4, lr}
 80084ec:	4604      	mov	r4, r0
 80084ee:	d001      	beq.n	80084f4 <cleanup_stdio+0x10>
 80084f0:	f001 fd16 	bl	8009f20 <_fflush_r>
 80084f4:	68a1      	ldr	r1, [r4, #8]
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <cleanup_stdio+0x38>)
 80084f8:	4299      	cmp	r1, r3
 80084fa:	d002      	beq.n	8008502 <cleanup_stdio+0x1e>
 80084fc:	4620      	mov	r0, r4
 80084fe:	f001 fd0f 	bl	8009f20 <_fflush_r>
 8008502:	68e1      	ldr	r1, [r4, #12]
 8008504:	4b06      	ldr	r3, [pc, #24]	; (8008520 <cleanup_stdio+0x3c>)
 8008506:	4299      	cmp	r1, r3
 8008508:	d004      	beq.n	8008514 <cleanup_stdio+0x30>
 800850a:	4620      	mov	r0, r4
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008510:	f001 bd06 	b.w	8009f20 <_fflush_r>
 8008514:	bd10      	pop	{r4, pc}
 8008516:	bf00      	nop
 8008518:	200003ec 	.word	0x200003ec
 800851c:	20000454 	.word	0x20000454
 8008520:	200004bc 	.word	0x200004bc

08008524 <global_stdio_init.part.0>:
 8008524:	b510      	push	{r4, lr}
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <global_stdio_init.part.0+0x30>)
 8008528:	4c0b      	ldr	r4, [pc, #44]	; (8008558 <global_stdio_init.part.0+0x34>)
 800852a:	4a0c      	ldr	r2, [pc, #48]	; (800855c <global_stdio_init.part.0+0x38>)
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	4620      	mov	r0, r4
 8008530:	2200      	movs	r2, #0
 8008532:	2104      	movs	r1, #4
 8008534:	f7ff ffa6 	bl	8008484 <std>
 8008538:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800853c:	2201      	movs	r2, #1
 800853e:	2109      	movs	r1, #9
 8008540:	f7ff ffa0 	bl	8008484 <std>
 8008544:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008548:	2202      	movs	r2, #2
 800854a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800854e:	2112      	movs	r1, #18
 8008550:	f7ff bf98 	b.w	8008484 <std>
 8008554:	20000524 	.word	0x20000524
 8008558:	200003ec 	.word	0x200003ec
 800855c:	080084cd 	.word	0x080084cd

08008560 <__sfp_lock_acquire>:
 8008560:	4801      	ldr	r0, [pc, #4]	; (8008568 <__sfp_lock_acquire+0x8>)
 8008562:	f000 b911 	b.w	8008788 <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	2000052d 	.word	0x2000052d

0800856c <__sfp_lock_release>:
 800856c:	4801      	ldr	r0, [pc, #4]	; (8008574 <__sfp_lock_release+0x8>)
 800856e:	f000 b90c 	b.w	800878a <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	2000052d 	.word	0x2000052d

08008578 <__sinit>:
 8008578:	b510      	push	{r4, lr}
 800857a:	4604      	mov	r4, r0
 800857c:	f7ff fff0 	bl	8008560 <__sfp_lock_acquire>
 8008580:	6a23      	ldr	r3, [r4, #32]
 8008582:	b11b      	cbz	r3, 800858c <__sinit+0x14>
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	f7ff bff0 	b.w	800856c <__sfp_lock_release>
 800858c:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <__sinit+0x28>)
 800858e:	6223      	str	r3, [r4, #32]
 8008590:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <__sinit+0x2c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f5      	bne.n	8008584 <__sinit+0xc>
 8008598:	f7ff ffc4 	bl	8008524 <global_stdio_init.part.0>
 800859c:	e7f2      	b.n	8008584 <__sinit+0xc>
 800859e:	bf00      	nop
 80085a0:	080084e5 	.word	0x080084e5
 80085a4:	20000524 	.word	0x20000524

080085a8 <_fwalk_sglue>:
 80085a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ac:	4607      	mov	r7, r0
 80085ae:	4688      	mov	r8, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	2600      	movs	r6, #0
 80085b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085b8:	f1b9 0901 	subs.w	r9, r9, #1
 80085bc:	d505      	bpl.n	80085ca <_fwalk_sglue+0x22>
 80085be:	6824      	ldr	r4, [r4, #0]
 80085c0:	2c00      	cmp	r4, #0
 80085c2:	d1f7      	bne.n	80085b4 <_fwalk_sglue+0xc>
 80085c4:	4630      	mov	r0, r6
 80085c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ca:	89ab      	ldrh	r3, [r5, #12]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d907      	bls.n	80085e0 <_fwalk_sglue+0x38>
 80085d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085d4:	3301      	adds	r3, #1
 80085d6:	d003      	beq.n	80085e0 <_fwalk_sglue+0x38>
 80085d8:	4629      	mov	r1, r5
 80085da:	4638      	mov	r0, r7
 80085dc:	47c0      	blx	r8
 80085de:	4306      	orrs	r6, r0
 80085e0:	3568      	adds	r5, #104	; 0x68
 80085e2:	e7e9      	b.n	80085b8 <_fwalk_sglue+0x10>

080085e4 <__sread>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	460c      	mov	r4, r1
 80085e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ec:	f000 f87e 	bl	80086ec <_read_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	bfab      	itete	ge
 80085f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085f6:	89a3      	ldrhlt	r3, [r4, #12]
 80085f8:	181b      	addge	r3, r3, r0
 80085fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085fe:	bfac      	ite	ge
 8008600:	6563      	strge	r3, [r4, #84]	; 0x54
 8008602:	81a3      	strhlt	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__swrite>:
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	461f      	mov	r7, r3
 800860c:	898b      	ldrh	r3, [r1, #12]
 800860e:	05db      	lsls	r3, r3, #23
 8008610:	4605      	mov	r5, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4616      	mov	r6, r2
 8008616:	d505      	bpl.n	8008624 <__swrite+0x1e>
 8008618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861c:	2302      	movs	r3, #2
 800861e:	2200      	movs	r2, #0
 8008620:	f000 f852 	bl	80086c8 <_lseek_r>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800862a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	4628      	mov	r0, r5
 8008636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	f000 b869 	b.w	8008710 <_write_r>

0800863e <__sseek>:
 800863e:	b510      	push	{r4, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008646:	f000 f83f 	bl	80086c8 <_lseek_r>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	bf15      	itete	ne
 8008650:	6560      	strne	r0, [r4, #84]	; 0x54
 8008652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800865a:	81a3      	strheq	r3, [r4, #12]
 800865c:	bf18      	it	ne
 800865e:	81a3      	strhne	r3, [r4, #12]
 8008660:	bd10      	pop	{r4, pc}

08008662 <__sclose>:
 8008662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008666:	f000 b81f 	b.w	80086a8 <_close_r>

0800866a <memset>:
 800866a:	4402      	add	r2, r0
 800866c:	4603      	mov	r3, r0
 800866e:	4293      	cmp	r3, r2
 8008670:	d100      	bne.n	8008674 <memset+0xa>
 8008672:	4770      	bx	lr
 8008674:	f803 1b01 	strb.w	r1, [r3], #1
 8008678:	e7f9      	b.n	800866e <memset+0x4>

0800867a <strncpy>:
 800867a:	b510      	push	{r4, lr}
 800867c:	3901      	subs	r1, #1
 800867e:	4603      	mov	r3, r0
 8008680:	b132      	cbz	r2, 8008690 <strncpy+0x16>
 8008682:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008686:	f803 4b01 	strb.w	r4, [r3], #1
 800868a:	3a01      	subs	r2, #1
 800868c:	2c00      	cmp	r4, #0
 800868e:	d1f7      	bne.n	8008680 <strncpy+0x6>
 8008690:	441a      	add	r2, r3
 8008692:	2100      	movs	r1, #0
 8008694:	4293      	cmp	r3, r2
 8008696:	d100      	bne.n	800869a <strncpy+0x20>
 8008698:	bd10      	pop	{r4, pc}
 800869a:	f803 1b01 	strb.w	r1, [r3], #1
 800869e:	e7f9      	b.n	8008694 <strncpy+0x1a>

080086a0 <_localeconv_r>:
 80086a0:	4800      	ldr	r0, [pc, #0]	; (80086a4 <_localeconv_r+0x4>)
 80086a2:	4770      	bx	lr
 80086a4:	20000120 	.word	0x20000120

080086a8 <_close_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_close_r+0x1c>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f7f8 ffd3 	bl	800165e <_close>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_close_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_close_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	20000528 	.word	0x20000528

080086c8 <_lseek_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	; (80086e8 <_lseek_r+0x20>)
 80086cc:	4604      	mov	r4, r0
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	602a      	str	r2, [r5, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f7f8 ffe8 	bl	80016ac <_lseek>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_lseek_r+0x1e>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_lseek_r+0x1e>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20000528 	.word	0x20000528

080086ec <_read_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	; (800870c <_read_r+0x20>)
 80086f0:	4604      	mov	r4, r0
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f7f8 ff76 	bl	80015ec <_read>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_read_r+0x1e>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_read_r+0x1e>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	20000528 	.word	0x20000528

08008710 <_write_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_write_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f8 ff81 	bl	8001626 <_write>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_write_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_write_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20000528 	.word	0x20000528

08008734 <__errno>:
 8008734:	4b01      	ldr	r3, [pc, #4]	; (800873c <__errno+0x8>)
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	200001e8 	.word	0x200001e8

08008740 <__libc_init_array>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4d0d      	ldr	r5, [pc, #52]	; (8008778 <__libc_init_array+0x38>)
 8008744:	4c0d      	ldr	r4, [pc, #52]	; (800877c <__libc_init_array+0x3c>)
 8008746:	1b64      	subs	r4, r4, r5
 8008748:	10a4      	asrs	r4, r4, #2
 800874a:	2600      	movs	r6, #0
 800874c:	42a6      	cmp	r6, r4
 800874e:	d109      	bne.n	8008764 <__libc_init_array+0x24>
 8008750:	4d0b      	ldr	r5, [pc, #44]	; (8008780 <__libc_init_array+0x40>)
 8008752:	4c0c      	ldr	r4, [pc, #48]	; (8008784 <__libc_init_array+0x44>)
 8008754:	f001 feec 	bl	800a530 <_init>
 8008758:	1b64      	subs	r4, r4, r5
 800875a:	10a4      	asrs	r4, r4, #2
 800875c:	2600      	movs	r6, #0
 800875e:	42a6      	cmp	r6, r4
 8008760:	d105      	bne.n	800876e <__libc_init_array+0x2e>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f855 3b04 	ldr.w	r3, [r5], #4
 8008768:	4798      	blx	r3
 800876a:	3601      	adds	r6, #1
 800876c:	e7ee      	b.n	800874c <__libc_init_array+0xc>
 800876e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008772:	4798      	blx	r3
 8008774:	3601      	adds	r6, #1
 8008776:	e7f2      	b.n	800875e <__libc_init_array+0x1e>
 8008778:	0800a9e0 	.word	0x0800a9e0
 800877c:	0800a9e0 	.word	0x0800a9e0
 8008780:	0800a9e0 	.word	0x0800a9e0
 8008784:	0800a9e4 	.word	0x0800a9e4

08008788 <__retarget_lock_acquire_recursive>:
 8008788:	4770      	bx	lr

0800878a <__retarget_lock_release_recursive>:
 800878a:	4770      	bx	lr

0800878c <memcpy>:
 800878c:	440a      	add	r2, r1
 800878e:	4291      	cmp	r1, r2
 8008790:	f100 33ff 	add.w	r3, r0, #4294967295
 8008794:	d100      	bne.n	8008798 <memcpy+0xc>
 8008796:	4770      	bx	lr
 8008798:	b510      	push	{r4, lr}
 800879a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800879e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a2:	4291      	cmp	r1, r2
 80087a4:	d1f9      	bne.n	800879a <memcpy+0xe>
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <__assert_func>:
 80087a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087aa:	4614      	mov	r4, r2
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <__assert_func+0x2c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4605      	mov	r5, r0
 80087b4:	68d8      	ldr	r0, [r3, #12]
 80087b6:	b14c      	cbz	r4, 80087cc <__assert_func+0x24>
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <__assert_func+0x30>)
 80087ba:	9100      	str	r1, [sp, #0]
 80087bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087c0:	4906      	ldr	r1, [pc, #24]	; (80087dc <__assert_func+0x34>)
 80087c2:	462b      	mov	r3, r5
 80087c4:	f001 fbd4 	bl	8009f70 <fiprintf>
 80087c8:	f001 fbf4 	bl	8009fb4 <abort>
 80087cc:	4b04      	ldr	r3, [pc, #16]	; (80087e0 <__assert_func+0x38>)
 80087ce:	461c      	mov	r4, r3
 80087d0:	e7f3      	b.n	80087ba <__assert_func+0x12>
 80087d2:	bf00      	nop
 80087d4:	200001e8 	.word	0x200001e8
 80087d8:	0800a6a2 	.word	0x0800a6a2
 80087dc:	0800a6af 	.word	0x0800a6af
 80087e0:	0800a6dd 	.word	0x0800a6dd

080087e4 <quorem>:
 80087e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	6903      	ldr	r3, [r0, #16]
 80087ea:	690c      	ldr	r4, [r1, #16]
 80087ec:	42a3      	cmp	r3, r4
 80087ee:	4607      	mov	r7, r0
 80087f0:	db7e      	blt.n	80088f0 <quorem+0x10c>
 80087f2:	3c01      	subs	r4, #1
 80087f4:	f101 0814 	add.w	r8, r1, #20
 80087f8:	f100 0514 	add.w	r5, r0, #20
 80087fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800880a:	3301      	adds	r3, #1
 800880c:	429a      	cmp	r2, r3
 800880e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008812:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008816:	fbb2 f6f3 	udiv	r6, r2, r3
 800881a:	d331      	bcc.n	8008880 <quorem+0x9c>
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	4640      	mov	r0, r8
 8008822:	46ac      	mov	ip, r5
 8008824:	46f2      	mov	sl, lr
 8008826:	f850 2b04 	ldr.w	r2, [r0], #4
 800882a:	b293      	uxth	r3, r2
 800882c:	fb06 e303 	mla	r3, r6, r3, lr
 8008830:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008834:	0c1a      	lsrs	r2, r3, #16
 8008836:	b29b      	uxth	r3, r3
 8008838:	ebaa 0303 	sub.w	r3, sl, r3
 800883c:	f8dc a000 	ldr.w	sl, [ip]
 8008840:	fa13 f38a 	uxtah	r3, r3, sl
 8008844:	fb06 220e 	mla	r2, r6, lr, r2
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008850:	b292      	uxth	r2, r2
 8008852:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800885a:	f8bd 3000 	ldrh.w	r3, [sp]
 800885e:	4581      	cmp	r9, r0
 8008860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008864:	f84c 3b04 	str.w	r3, [ip], #4
 8008868:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800886c:	d2db      	bcs.n	8008826 <quorem+0x42>
 800886e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008872:	b92b      	cbnz	r3, 8008880 <quorem+0x9c>
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	3b04      	subs	r3, #4
 8008878:	429d      	cmp	r5, r3
 800887a:	461a      	mov	r2, r3
 800887c:	d32c      	bcc.n	80088d8 <quorem+0xf4>
 800887e:	613c      	str	r4, [r7, #16]
 8008880:	4638      	mov	r0, r7
 8008882:	f001 f9b9 	bl	8009bf8 <__mcmp>
 8008886:	2800      	cmp	r0, #0
 8008888:	db22      	blt.n	80088d0 <quorem+0xec>
 800888a:	3601      	adds	r6, #1
 800888c:	4629      	mov	r1, r5
 800888e:	2000      	movs	r0, #0
 8008890:	f858 2b04 	ldr.w	r2, [r8], #4
 8008894:	f8d1 c000 	ldr.w	ip, [r1]
 8008898:	b293      	uxth	r3, r2
 800889a:	1ac3      	subs	r3, r0, r3
 800889c:	0c12      	lsrs	r2, r2, #16
 800889e:	fa13 f38c 	uxtah	r3, r3, ip
 80088a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80088a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b0:	45c1      	cmp	r9, r8
 80088b2:	f841 3b04 	str.w	r3, [r1], #4
 80088b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088ba:	d2e9      	bcs.n	8008890 <quorem+0xac>
 80088bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c4:	b922      	cbnz	r2, 80088d0 <quorem+0xec>
 80088c6:	3b04      	subs	r3, #4
 80088c8:	429d      	cmp	r5, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	d30a      	bcc.n	80088e4 <quorem+0x100>
 80088ce:	613c      	str	r4, [r7, #16]
 80088d0:	4630      	mov	r0, r6
 80088d2:	b003      	add	sp, #12
 80088d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	3b04      	subs	r3, #4
 80088dc:	2a00      	cmp	r2, #0
 80088de:	d1ce      	bne.n	800887e <quorem+0x9a>
 80088e0:	3c01      	subs	r4, #1
 80088e2:	e7c9      	b.n	8008878 <quorem+0x94>
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	3b04      	subs	r3, #4
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	d1f0      	bne.n	80088ce <quorem+0xea>
 80088ec:	3c01      	subs	r4, #1
 80088ee:	e7eb      	b.n	80088c8 <quorem+0xe4>
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7ee      	b.n	80088d2 <quorem+0xee>
 80088f4:	0000      	movs	r0, r0
	...

080088f8 <_dtoa_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	ed2d 8b04 	vpush	{d8-d9}
 8008900:	69c5      	ldr	r5, [r0, #28]
 8008902:	b093      	sub	sp, #76	; 0x4c
 8008904:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008908:	ec57 6b10 	vmov	r6, r7, d0
 800890c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008910:	9107      	str	r1, [sp, #28]
 8008912:	4604      	mov	r4, r0
 8008914:	920a      	str	r2, [sp, #40]	; 0x28
 8008916:	930d      	str	r3, [sp, #52]	; 0x34
 8008918:	b975      	cbnz	r5, 8008938 <_dtoa_r+0x40>
 800891a:	2010      	movs	r0, #16
 800891c:	f000 fe2a 	bl	8009574 <malloc>
 8008920:	4602      	mov	r2, r0
 8008922:	61e0      	str	r0, [r4, #28]
 8008924:	b920      	cbnz	r0, 8008930 <_dtoa_r+0x38>
 8008926:	4bae      	ldr	r3, [pc, #696]	; (8008be0 <_dtoa_r+0x2e8>)
 8008928:	21ef      	movs	r1, #239	; 0xef
 800892a:	48ae      	ldr	r0, [pc, #696]	; (8008be4 <_dtoa_r+0x2ec>)
 800892c:	f7ff ff3c 	bl	80087a8 <__assert_func>
 8008930:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008934:	6005      	str	r5, [r0, #0]
 8008936:	60c5      	str	r5, [r0, #12]
 8008938:	69e3      	ldr	r3, [r4, #28]
 800893a:	6819      	ldr	r1, [r3, #0]
 800893c:	b151      	cbz	r1, 8008954 <_dtoa_r+0x5c>
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	604a      	str	r2, [r1, #4]
 8008942:	2301      	movs	r3, #1
 8008944:	4093      	lsls	r3, r2
 8008946:	608b      	str	r3, [r1, #8]
 8008948:	4620      	mov	r0, r4
 800894a:	f000 ff19 	bl	8009780 <_Bfree>
 800894e:	69e3      	ldr	r3, [r4, #28]
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	1e3b      	subs	r3, r7, #0
 8008956:	bfbb      	ittet	lt
 8008958:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800895c:	9303      	strlt	r3, [sp, #12]
 800895e:	2300      	movge	r3, #0
 8008960:	2201      	movlt	r2, #1
 8008962:	bfac      	ite	ge
 8008964:	f8c8 3000 	strge.w	r3, [r8]
 8008968:	f8c8 2000 	strlt.w	r2, [r8]
 800896c:	4b9e      	ldr	r3, [pc, #632]	; (8008be8 <_dtoa_r+0x2f0>)
 800896e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008972:	ea33 0308 	bics.w	r3, r3, r8
 8008976:	d11b      	bne.n	80089b0 <_dtoa_r+0xb8>
 8008978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800897a:	f242 730f 	movw	r3, #9999	; 0x270f
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008984:	4333      	orrs	r3, r6
 8008986:	f000 8593 	beq.w	80094b0 <_dtoa_r+0xbb8>
 800898a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800898c:	b963      	cbnz	r3, 80089a8 <_dtoa_r+0xb0>
 800898e:	4b97      	ldr	r3, [pc, #604]	; (8008bec <_dtoa_r+0x2f4>)
 8008990:	e027      	b.n	80089e2 <_dtoa_r+0xea>
 8008992:	4b97      	ldr	r3, [pc, #604]	; (8008bf0 <_dtoa_r+0x2f8>)
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800899a:	6013      	str	r3, [r2, #0]
 800899c:	9800      	ldr	r0, [sp, #0]
 800899e:	b013      	add	sp, #76	; 0x4c
 80089a0:	ecbd 8b04 	vpop	{d8-d9}
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	4b90      	ldr	r3, [pc, #576]	; (8008bec <_dtoa_r+0x2f4>)
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	3303      	adds	r3, #3
 80089ae:	e7f3      	b.n	8008998 <_dtoa_r+0xa0>
 80089b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	ec51 0b17 	vmov	r0, r1, d7
 80089ba:	eeb0 8a47 	vmov.f32	s16, s14
 80089be:	eef0 8a67 	vmov.f32	s17, s15
 80089c2:	2300      	movs	r3, #0
 80089c4:	f7f8 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c8:	4681      	mov	r9, r0
 80089ca:	b160      	cbz	r0, 80089e6 <_dtoa_r+0xee>
 80089cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089ce:	2301      	movs	r3, #1
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8568 	beq.w	80094aa <_dtoa_r+0xbb2>
 80089da:	4b86      	ldr	r3, [pc, #536]	; (8008bf4 <_dtoa_r+0x2fc>)
 80089dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	e7da      	b.n	800899c <_dtoa_r+0xa4>
 80089e6:	aa10      	add	r2, sp, #64	; 0x40
 80089e8:	a911      	add	r1, sp, #68	; 0x44
 80089ea:	4620      	mov	r0, r4
 80089ec:	eeb0 0a48 	vmov.f32	s0, s16
 80089f0:	eef0 0a68 	vmov.f32	s1, s17
 80089f4:	f001 f9a6 	bl	8009d44 <__d2b>
 80089f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089fc:	4682      	mov	sl, r0
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	d07f      	beq.n	8008b02 <_dtoa_r+0x20a>
 8008a02:	ee18 3a90 	vmov	r3, s17
 8008a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a0e:	ec51 0b18 	vmov	r0, r1, d8
 8008a12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a1e:	4619      	mov	r1, r3
 8008a20:	2200      	movs	r2, #0
 8008a22:	4b75      	ldr	r3, [pc, #468]	; (8008bf8 <_dtoa_r+0x300>)
 8008a24:	f7f7 fc30 	bl	8000288 <__aeabi_dsub>
 8008a28:	a367      	add	r3, pc, #412	; (adr r3, 8008bc8 <_dtoa_r+0x2d0>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 fde3 	bl	80005f8 <__aeabi_dmul>
 8008a32:	a367      	add	r3, pc, #412	; (adr r3, 8008bd0 <_dtoa_r+0x2d8>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fc28 	bl	800028c <__adddf3>
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	4628      	mov	r0, r5
 8008a40:	460f      	mov	r7, r1
 8008a42:	f7f7 fd6f 	bl	8000524 <__aeabi_i2d>
 8008a46:	a364      	add	r3, pc, #400	; (adr r3, 8008bd8 <_dtoa_r+0x2e0>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fdd4 	bl	80005f8 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f7 fc18 	bl	800028c <__adddf3>
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	460f      	mov	r7, r1
 8008a60:	f7f8 f87a 	bl	8000b58 <__aeabi_d2iz>
 8008a64:	2200      	movs	r2, #0
 8008a66:	4683      	mov	fp, r0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	f7f8 f835 	bl	8000adc <__aeabi_dcmplt>
 8008a72:	b148      	cbz	r0, 8008a88 <_dtoa_r+0x190>
 8008a74:	4658      	mov	r0, fp
 8008a76:	f7f7 fd55 	bl	8000524 <__aeabi_i2d>
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	f7f8 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a82:	b908      	cbnz	r0, 8008a88 <_dtoa_r+0x190>
 8008a84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a88:	f1bb 0f16 	cmp.w	fp, #22
 8008a8c:	d857      	bhi.n	8008b3e <_dtoa_r+0x246>
 8008a8e:	4b5b      	ldr	r3, [pc, #364]	; (8008bfc <_dtoa_r+0x304>)
 8008a90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	ec51 0b18 	vmov	r0, r1, d8
 8008a9c:	f7f8 f81e 	bl	8000adc <__aeabi_dcmplt>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d04e      	beq.n	8008b42 <_dtoa_r+0x24a>
 8008aa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8008aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008aae:	1b5b      	subs	r3, r3, r5
 8008ab0:	1e5a      	subs	r2, r3, #1
 8008ab2:	bf45      	ittet	mi
 8008ab4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ab8:	9305      	strmi	r3, [sp, #20]
 8008aba:	2300      	movpl	r3, #0
 8008abc:	2300      	movmi	r3, #0
 8008abe:	9206      	str	r2, [sp, #24]
 8008ac0:	bf54      	ite	pl
 8008ac2:	9305      	strpl	r3, [sp, #20]
 8008ac4:	9306      	strmi	r3, [sp, #24]
 8008ac6:	f1bb 0f00 	cmp.w	fp, #0
 8008aca:	db3c      	blt.n	8008b46 <_dtoa_r+0x24e>
 8008acc:	9b06      	ldr	r3, [sp, #24]
 8008ace:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ad2:	445b      	add	r3, fp
 8008ad4:	9306      	str	r3, [sp, #24]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9308      	str	r3, [sp, #32]
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	2b09      	cmp	r3, #9
 8008ade:	d868      	bhi.n	8008bb2 <_dtoa_r+0x2ba>
 8008ae0:	2b05      	cmp	r3, #5
 8008ae2:	bfc4      	itt	gt
 8008ae4:	3b04      	subgt	r3, #4
 8008ae6:	9307      	strgt	r3, [sp, #28]
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	f1a3 0302 	sub.w	r3, r3, #2
 8008aee:	bfcc      	ite	gt
 8008af0:	2500      	movgt	r5, #0
 8008af2:	2501      	movle	r5, #1
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	f200 8085 	bhi.w	8008c04 <_dtoa_r+0x30c>
 8008afa:	e8df f003 	tbb	[pc, r3]
 8008afe:	3b2e      	.short	0x3b2e
 8008b00:	5839      	.short	0x5839
 8008b02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b06:	441d      	add	r5, r3
 8008b08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	bfc1      	itttt	gt
 8008b10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b14:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b20:	bfd6      	itet	le
 8008b22:	f1c3 0320 	rsble	r3, r3, #32
 8008b26:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b2a:	fa06 f003 	lslle.w	r0, r6, r3
 8008b2e:	f7f7 fce9 	bl	8000504 <__aeabi_ui2d>
 8008b32:	2201      	movs	r2, #1
 8008b34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b38:	3d01      	subs	r5, #1
 8008b3a:	920e      	str	r2, [sp, #56]	; 0x38
 8008b3c:	e76f      	b.n	8008a1e <_dtoa_r+0x126>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7b3      	b.n	8008aaa <_dtoa_r+0x1b2>
 8008b42:	900c      	str	r0, [sp, #48]	; 0x30
 8008b44:	e7b2      	b.n	8008aac <_dtoa_r+0x1b4>
 8008b46:	9b05      	ldr	r3, [sp, #20]
 8008b48:	eba3 030b 	sub.w	r3, r3, fp
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	f1cb 0300 	rsb	r3, fp, #0
 8008b52:	9308      	str	r3, [sp, #32]
 8008b54:	2300      	movs	r3, #0
 8008b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b58:	e7bf      	b.n	8008ada <_dtoa_r+0x1e2>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dc52      	bgt.n	8008c0a <_dtoa_r+0x312>
 8008b64:	2301      	movs	r3, #1
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b6e:	e00b      	b.n	8008b88 <_dtoa_r+0x290>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7f3      	b.n	8008b5c <_dtoa_r+0x264>
 8008b74:	2300      	movs	r3, #0
 8008b76:	9309      	str	r3, [sp, #36]	; 0x24
 8008b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7a:	445b      	add	r3, fp
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	bfb8      	it	lt
 8008b86:	2301      	movlt	r3, #1
 8008b88:	69e0      	ldr	r0, [r4, #28]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	f102 0614 	add.w	r6, r2, #20
 8008b92:	429e      	cmp	r6, r3
 8008b94:	d93d      	bls.n	8008c12 <_dtoa_r+0x31a>
 8008b96:	6041      	str	r1, [r0, #4]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fdb1 	bl	8009700 <_Balloc>
 8008b9e:	9000      	str	r0, [sp, #0]
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d139      	bne.n	8008c18 <_dtoa_r+0x320>
 8008ba4:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <_dtoa_r+0x308>)
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	f240 11af 	movw	r1, #431	; 0x1af
 8008bac:	e6bd      	b.n	800892a <_dtoa_r+0x32>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e7e1      	b.n	8008b76 <_dtoa_r+0x27e>
 8008bb2:	2501      	movs	r5, #1
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9307      	str	r3, [sp, #28]
 8008bb8:	9509      	str	r5, [sp, #36]	; 0x24
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2312      	movs	r3, #18
 8008bc6:	e7d1      	b.n	8008b6c <_dtoa_r+0x274>
 8008bc8:	636f4361 	.word	0x636f4361
 8008bcc:	3fd287a7 	.word	0x3fd287a7
 8008bd0:	8b60c8b3 	.word	0x8b60c8b3
 8008bd4:	3fc68a28 	.word	0x3fc68a28
 8008bd8:	509f79fb 	.word	0x509f79fb
 8008bdc:	3fd34413 	.word	0x3fd34413
 8008be0:	0800a6eb 	.word	0x0800a6eb
 8008be4:	0800a702 	.word	0x0800a702
 8008be8:	7ff00000 	.word	0x7ff00000
 8008bec:	0800a6e7 	.word	0x0800a6e7
 8008bf0:	0800a6de 	.word	0x0800a6de
 8008bf4:	0800a675 	.word	0x0800a675
 8008bf8:	3ff80000 	.word	0x3ff80000
 8008bfc:	0800a7f0 	.word	0x0800a7f0
 8008c00:	0800a75a 	.word	0x0800a75a
 8008c04:	2301      	movs	r3, #1
 8008c06:	9309      	str	r3, [sp, #36]	; 0x24
 8008c08:	e7d7      	b.n	8008bba <_dtoa_r+0x2c2>
 8008c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	e7ba      	b.n	8008b88 <_dtoa_r+0x290>
 8008c12:	3101      	adds	r1, #1
 8008c14:	0052      	lsls	r2, r2, #1
 8008c16:	e7ba      	b.n	8008b8e <_dtoa_r+0x296>
 8008c18:	69e3      	ldr	r3, [r4, #28]
 8008c1a:	9a00      	ldr	r2, [sp, #0]
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	2b0e      	cmp	r3, #14
 8008c22:	f200 80a8 	bhi.w	8008d76 <_dtoa_r+0x47e>
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	f000 80a5 	beq.w	8008d76 <_dtoa_r+0x47e>
 8008c2c:	f1bb 0f00 	cmp.w	fp, #0
 8008c30:	dd38      	ble.n	8008ca4 <_dtoa_r+0x3ac>
 8008c32:	4bc0      	ldr	r3, [pc, #768]	; (8008f34 <_dtoa_r+0x63c>)
 8008c34:	f00b 020f 	and.w	r2, fp, #15
 8008c38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c48:	d019      	beq.n	8008c7e <_dtoa_r+0x386>
 8008c4a:	4bbb      	ldr	r3, [pc, #748]	; (8008f38 <_dtoa_r+0x640>)
 8008c4c:	ec51 0b18 	vmov	r0, r1, d8
 8008c50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c54:	f7f7 fdfa 	bl	800084c <__aeabi_ddiv>
 8008c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c5c:	f008 080f 	and.w	r8, r8, #15
 8008c60:	2503      	movs	r5, #3
 8008c62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f38 <_dtoa_r+0x640>
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	d10a      	bne.n	8008c82 <_dtoa_r+0x38a>
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	4632      	mov	r2, r6
 8008c72:	463b      	mov	r3, r7
 8008c74:	f7f7 fdea 	bl	800084c <__aeabi_ddiv>
 8008c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c7c:	e02b      	b.n	8008cd6 <_dtoa_r+0x3de>
 8008c7e:	2502      	movs	r5, #2
 8008c80:	e7ef      	b.n	8008c62 <_dtoa_r+0x36a>
 8008c82:	f018 0f01 	tst.w	r8, #1
 8008c86:	d008      	beq.n	8008c9a <_dtoa_r+0x3a2>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c90:	f7f7 fcb2 	bl	80005f8 <__aeabi_dmul>
 8008c94:	3501      	adds	r5, #1
 8008c96:	4606      	mov	r6, r0
 8008c98:	460f      	mov	r7, r1
 8008c9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c9e:	f109 0908 	add.w	r9, r9, #8
 8008ca2:	e7e0      	b.n	8008c66 <_dtoa_r+0x36e>
 8008ca4:	f000 809f 	beq.w	8008de6 <_dtoa_r+0x4ee>
 8008ca8:	f1cb 0600 	rsb	r6, fp, #0
 8008cac:	4ba1      	ldr	r3, [pc, #644]	; (8008f34 <_dtoa_r+0x63c>)
 8008cae:	4fa2      	ldr	r7, [pc, #648]	; (8008f38 <_dtoa_r+0x640>)
 8008cb0:	f006 020f 	and.w	r2, r6, #15
 8008cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	ec51 0b18 	vmov	r0, r1, d8
 8008cc0:	f7f7 fc9a 	bl	80005f8 <__aeabi_dmul>
 8008cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc8:	1136      	asrs	r6, r6, #4
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2502      	movs	r5, #2
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d17e      	bne.n	8008dd0 <_dtoa_r+0x4d8>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1d0      	bne.n	8008c78 <_dtoa_r+0x380>
 8008cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8084 	beq.w	8008dea <_dtoa_r+0x4f2>
 8008ce2:	4b96      	ldr	r3, [pc, #600]	; (8008f3c <_dtoa_r+0x644>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 fef7 	bl	8000adc <__aeabi_dcmplt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d07b      	beq.n	8008dea <_dtoa_r+0x4f2>
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d078      	beq.n	8008dea <_dtoa_r+0x4f2>
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dd39      	ble.n	8008d72 <_dtoa_r+0x47a>
 8008cfe:	4b90      	ldr	r3, [pc, #576]	; (8008f40 <_dtoa_r+0x648>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fc77 	bl	80005f8 <__aeabi_dmul>
 8008d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d0e:	9e01      	ldr	r6, [sp, #4]
 8008d10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d14:	3501      	adds	r5, #1
 8008d16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f7f7 fc02 	bl	8000524 <__aeabi_i2d>
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	f7f7 fc68 	bl	80005f8 <__aeabi_dmul>
 8008d28:	4b86      	ldr	r3, [pc, #536]	; (8008f44 <_dtoa_r+0x64c>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f7f7 faae 	bl	800028c <__adddf3>
 8008d30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d38:	9303      	str	r3, [sp, #12]
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	d158      	bne.n	8008df0 <_dtoa_r+0x4f8>
 8008d3e:	4b82      	ldr	r3, [pc, #520]	; (8008f48 <_dtoa_r+0x650>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4689      	mov	r9, r1
 8008d52:	f7f7 fee1 	bl	8000b18 <__aeabi_dcmpgt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f040 8296 	bne.w	8009288 <_dtoa_r+0x990>
 8008d5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d60:	4640      	mov	r0, r8
 8008d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d66:	4649      	mov	r1, r9
 8008d68:	f7f7 feb8 	bl	8000adc <__aeabi_dcmplt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f040 8289 	bne.w	8009284 <_dtoa_r+0x98c>
 8008d72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f2c0 814e 	blt.w	800901a <_dtoa_r+0x722>
 8008d7e:	f1bb 0f0e 	cmp.w	fp, #14
 8008d82:	f300 814a 	bgt.w	800901a <_dtoa_r+0x722>
 8008d86:	4b6b      	ldr	r3, [pc, #428]	; (8008f34 <_dtoa_r+0x63c>)
 8008d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f280 80dc 	bge.w	8008f50 <_dtoa_r+0x658>
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f300 80d8 	bgt.w	8008f50 <_dtoa_r+0x658>
 8008da0:	f040 826f 	bne.w	8009282 <_dtoa_r+0x98a>
 8008da4:	4b68      	ldr	r3, [pc, #416]	; (8008f48 <_dtoa_r+0x650>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	4640      	mov	r0, r8
 8008daa:	4649      	mov	r1, r9
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db4:	f7f7 fea6 	bl	8000b04 <__aeabi_dcmpge>
 8008db8:	9e04      	ldr	r6, [sp, #16]
 8008dba:	4637      	mov	r7, r6
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 8245 	bne.w	800924c <_dtoa_r+0x954>
 8008dc2:	9d00      	ldr	r5, [sp, #0]
 8008dc4:	2331      	movs	r3, #49	; 0x31
 8008dc6:	f805 3b01 	strb.w	r3, [r5], #1
 8008dca:	f10b 0b01 	add.w	fp, fp, #1
 8008dce:	e241      	b.n	8009254 <_dtoa_r+0x95c>
 8008dd0:	07f2      	lsls	r2, r6, #31
 8008dd2:	d505      	bpl.n	8008de0 <_dtoa_r+0x4e8>
 8008dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd8:	f7f7 fc0e 	bl	80005f8 <__aeabi_dmul>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	2301      	movs	r3, #1
 8008de0:	1076      	asrs	r6, r6, #1
 8008de2:	3708      	adds	r7, #8
 8008de4:	e773      	b.n	8008cce <_dtoa_r+0x3d6>
 8008de6:	2502      	movs	r5, #2
 8008de8:	e775      	b.n	8008cd6 <_dtoa_r+0x3de>
 8008dea:	9e04      	ldr	r6, [sp, #16]
 8008dec:	465f      	mov	r7, fp
 8008dee:	e792      	b.n	8008d16 <_dtoa_r+0x41e>
 8008df0:	9900      	ldr	r1, [sp, #0]
 8008df2:	4b50      	ldr	r3, [pc, #320]	; (8008f34 <_dtoa_r+0x63c>)
 8008df4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008df8:	4431      	add	r1, r6
 8008dfa:	9102      	str	r1, [sp, #8]
 8008dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dfe:	eeb0 9a47 	vmov.f32	s18, s14
 8008e02:	eef0 9a67 	vmov.f32	s19, s15
 8008e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e0e:	2900      	cmp	r1, #0
 8008e10:	d044      	beq.n	8008e9c <_dtoa_r+0x5a4>
 8008e12:	494e      	ldr	r1, [pc, #312]	; (8008f4c <_dtoa_r+0x654>)
 8008e14:	2000      	movs	r0, #0
 8008e16:	f7f7 fd19 	bl	800084c <__aeabi_ddiv>
 8008e1a:	ec53 2b19 	vmov	r2, r3, d9
 8008e1e:	f7f7 fa33 	bl	8000288 <__aeabi_dsub>
 8008e22:	9d00      	ldr	r5, [sp, #0]
 8008e24:	ec41 0b19 	vmov	d9, r0, r1
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	f7f7 fe94 	bl	8000b58 <__aeabi_d2iz>
 8008e30:	4606      	mov	r6, r0
 8008e32:	f7f7 fb77 	bl	8000524 <__aeabi_i2d>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	f7f7 fa23 	bl	8000288 <__aeabi_dsub>
 8008e42:	3630      	adds	r6, #48	; 0x30
 8008e44:	f805 6b01 	strb.w	r6, [r5], #1
 8008e48:	ec53 2b19 	vmov	r2, r3, d9
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	4689      	mov	r9, r1
 8008e50:	f7f7 fe44 	bl	8000adc <__aeabi_dcmplt>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d164      	bne.n	8008f22 <_dtoa_r+0x62a>
 8008e58:	4642      	mov	r2, r8
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	4937      	ldr	r1, [pc, #220]	; (8008f3c <_dtoa_r+0x644>)
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7f7 fa12 	bl	8000288 <__aeabi_dsub>
 8008e64:	ec53 2b19 	vmov	r2, r3, d9
 8008e68:	f7f7 fe38 	bl	8000adc <__aeabi_dcmplt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f040 80b6 	bne.w	8008fde <_dtoa_r+0x6e6>
 8008e72:	9b02      	ldr	r3, [sp, #8]
 8008e74:	429d      	cmp	r5, r3
 8008e76:	f43f af7c 	beq.w	8008d72 <_dtoa_r+0x47a>
 8008e7a:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <_dtoa_r+0x648>)
 8008e7c:	ec51 0b19 	vmov	r0, r1, d9
 8008e80:	2200      	movs	r2, #0
 8008e82:	f7f7 fbb9 	bl	80005f8 <__aeabi_dmul>
 8008e86:	4b2e      	ldr	r3, [pc, #184]	; (8008f40 <_dtoa_r+0x648>)
 8008e88:	ec41 0b19 	vmov	d9, r0, r1
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4640      	mov	r0, r8
 8008e90:	4649      	mov	r1, r9
 8008e92:	f7f7 fbb1 	bl	80005f8 <__aeabi_dmul>
 8008e96:	4680      	mov	r8, r0
 8008e98:	4689      	mov	r9, r1
 8008e9a:	e7c5      	b.n	8008e28 <_dtoa_r+0x530>
 8008e9c:	ec51 0b17 	vmov	r0, r1, d7
 8008ea0:	f7f7 fbaa 	bl	80005f8 <__aeabi_dmul>
 8008ea4:	9b02      	ldr	r3, [sp, #8]
 8008ea6:	9d00      	ldr	r5, [sp, #0]
 8008ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eaa:	ec41 0b19 	vmov	d9, r0, r1
 8008eae:	4649      	mov	r1, r9
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	f7f7 fe51 	bl	8000b58 <__aeabi_d2iz>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	f7f7 fb34 	bl	8000524 <__aeabi_i2d>
 8008ebc:	3630      	adds	r6, #48	; 0x30
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 f9df 	bl	8000288 <__aeabi_dsub>
 8008eca:	f805 6b01 	strb.w	r6, [r5], #1
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	429d      	cmp	r5, r3
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	d124      	bne.n	8008f26 <_dtoa_r+0x62e>
 8008edc:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <_dtoa_r+0x654>)
 8008ede:	ec51 0b19 	vmov	r0, r1, d9
 8008ee2:	f7f7 f9d3 	bl	800028c <__adddf3>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	f7f7 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d173      	bne.n	8008fde <_dtoa_r+0x6e6>
 8008ef6:	ec53 2b19 	vmov	r2, r3, d9
 8008efa:	4914      	ldr	r1, [pc, #80]	; (8008f4c <_dtoa_r+0x654>)
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4640      	mov	r0, r8
 8008f08:	4649      	mov	r1, r9
 8008f0a:	f7f7 fde7 	bl	8000adc <__aeabi_dcmplt>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f43f af2f 	beq.w	8008d72 <_dtoa_r+0x47a>
 8008f14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f16:	1e6b      	subs	r3, r5, #1
 8008f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f1e:	2b30      	cmp	r3, #48	; 0x30
 8008f20:	d0f8      	beq.n	8008f14 <_dtoa_r+0x61c>
 8008f22:	46bb      	mov	fp, r7
 8008f24:	e04a      	b.n	8008fbc <_dtoa_r+0x6c4>
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <_dtoa_r+0x648>)
 8008f28:	f7f7 fb66 	bl	80005f8 <__aeabi_dmul>
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	4689      	mov	r9, r1
 8008f30:	e7bd      	b.n	8008eae <_dtoa_r+0x5b6>
 8008f32:	bf00      	nop
 8008f34:	0800a7f0 	.word	0x0800a7f0
 8008f38:	0800a7c8 	.word	0x0800a7c8
 8008f3c:	3ff00000 	.word	0x3ff00000
 8008f40:	40240000 	.word	0x40240000
 8008f44:	401c0000 	.word	0x401c0000
 8008f48:	40140000 	.word	0x40140000
 8008f4c:	3fe00000 	.word	0x3fe00000
 8008f50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f54:	9d00      	ldr	r5, [sp, #0]
 8008f56:	4642      	mov	r2, r8
 8008f58:	464b      	mov	r3, r9
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	f7f7 fc75 	bl	800084c <__aeabi_ddiv>
 8008f62:	f7f7 fdf9 	bl	8000b58 <__aeabi_d2iz>
 8008f66:	9001      	str	r0, [sp, #4]
 8008f68:	f7f7 fadc 	bl	8000524 <__aeabi_i2d>
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	464b      	mov	r3, r9
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4630      	mov	r0, r6
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 f984 	bl	8000288 <__aeabi_dsub>
 8008f80:	9e01      	ldr	r6, [sp, #4]
 8008f82:	9f04      	ldr	r7, [sp, #16]
 8008f84:	3630      	adds	r6, #48	; 0x30
 8008f86:	f805 6b01 	strb.w	r6, [r5], #1
 8008f8a:	9e00      	ldr	r6, [sp, #0]
 8008f8c:	1bae      	subs	r6, r5, r6
 8008f8e:	42b7      	cmp	r7, r6
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	d134      	bne.n	8009000 <_dtoa_r+0x708>
 8008f96:	f7f7 f979 	bl	800028c <__adddf3>
 8008f9a:	4642      	mov	r2, r8
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	f7f7 fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 8008fa6:	b9c8      	cbnz	r0, 8008fdc <_dtoa_r+0x6e4>
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	4630      	mov	r0, r6
 8008fae:	4639      	mov	r1, r7
 8008fb0:	f7f7 fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fb4:	b110      	cbz	r0, 8008fbc <_dtoa_r+0x6c4>
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	07db      	lsls	r3, r3, #31
 8008fba:	d40f      	bmi.n	8008fdc <_dtoa_r+0x6e4>
 8008fbc:	4651      	mov	r1, sl
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fbde 	bl	8009780 <_Bfree>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fc8:	702b      	strb	r3, [r5, #0]
 8008fca:	f10b 0301 	add.w	r3, fp, #1
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f43f ace2 	beq.w	800899c <_dtoa_r+0xa4>
 8008fd8:	601d      	str	r5, [r3, #0]
 8008fda:	e4df      	b.n	800899c <_dtoa_r+0xa4>
 8008fdc:	465f      	mov	r7, fp
 8008fde:	462b      	mov	r3, r5
 8008fe0:	461d      	mov	r5, r3
 8008fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fe6:	2a39      	cmp	r2, #57	; 0x39
 8008fe8:	d106      	bne.n	8008ff8 <_dtoa_r+0x700>
 8008fea:	9a00      	ldr	r2, [sp, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d1f7      	bne.n	8008fe0 <_dtoa_r+0x6e8>
 8008ff0:	9900      	ldr	r1, [sp, #0]
 8008ff2:	2230      	movs	r2, #48	; 0x30
 8008ff4:	3701      	adds	r7, #1
 8008ff6:	700a      	strb	r2, [r1, #0]
 8008ff8:	781a      	ldrb	r2, [r3, #0]
 8008ffa:	3201      	adds	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	e790      	b.n	8008f22 <_dtoa_r+0x62a>
 8009000:	4ba3      	ldr	r3, [pc, #652]	; (8009290 <_dtoa_r+0x998>)
 8009002:	2200      	movs	r2, #0
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	2200      	movs	r2, #0
 800900a:	2300      	movs	r3, #0
 800900c:	4606      	mov	r6, r0
 800900e:	460f      	mov	r7, r1
 8009010:	f7f7 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009014:	2800      	cmp	r0, #0
 8009016:	d09e      	beq.n	8008f56 <_dtoa_r+0x65e>
 8009018:	e7d0      	b.n	8008fbc <_dtoa_r+0x6c4>
 800901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901c:	2a00      	cmp	r2, #0
 800901e:	f000 80ca 	beq.w	80091b6 <_dtoa_r+0x8be>
 8009022:	9a07      	ldr	r2, [sp, #28]
 8009024:	2a01      	cmp	r2, #1
 8009026:	f300 80ad 	bgt.w	8009184 <_dtoa_r+0x88c>
 800902a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800902c:	2a00      	cmp	r2, #0
 800902e:	f000 80a5 	beq.w	800917c <_dtoa_r+0x884>
 8009032:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009036:	9e08      	ldr	r6, [sp, #32]
 8009038:	9d05      	ldr	r5, [sp, #20]
 800903a:	9a05      	ldr	r2, [sp, #20]
 800903c:	441a      	add	r2, r3
 800903e:	9205      	str	r2, [sp, #20]
 8009040:	9a06      	ldr	r2, [sp, #24]
 8009042:	2101      	movs	r1, #1
 8009044:	441a      	add	r2, r3
 8009046:	4620      	mov	r0, r4
 8009048:	9206      	str	r2, [sp, #24]
 800904a:	f000 fc4f 	bl	80098ec <__i2b>
 800904e:	4607      	mov	r7, r0
 8009050:	b165      	cbz	r5, 800906c <_dtoa_r+0x774>
 8009052:	9b06      	ldr	r3, [sp, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dd09      	ble.n	800906c <_dtoa_r+0x774>
 8009058:	42ab      	cmp	r3, r5
 800905a:	9a05      	ldr	r2, [sp, #20]
 800905c:	bfa8      	it	ge
 800905e:	462b      	movge	r3, r5
 8009060:	1ad2      	subs	r2, r2, r3
 8009062:	9205      	str	r2, [sp, #20]
 8009064:	9a06      	ldr	r2, [sp, #24]
 8009066:	1aed      	subs	r5, r5, r3
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	9306      	str	r3, [sp, #24]
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	b1f3      	cbz	r3, 80090ae <_dtoa_r+0x7b6>
 8009070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 80a3 	beq.w	80091be <_dtoa_r+0x8c6>
 8009078:	2e00      	cmp	r6, #0
 800907a:	dd10      	ble.n	800909e <_dtoa_r+0x7a6>
 800907c:	4639      	mov	r1, r7
 800907e:	4632      	mov	r2, r6
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fcf3 	bl	8009a6c <__pow5mult>
 8009086:	4652      	mov	r2, sl
 8009088:	4601      	mov	r1, r0
 800908a:	4607      	mov	r7, r0
 800908c:	4620      	mov	r0, r4
 800908e:	f000 fc43 	bl	8009918 <__multiply>
 8009092:	4651      	mov	r1, sl
 8009094:	4680      	mov	r8, r0
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fb72 	bl	8009780 <_Bfree>
 800909c:	46c2      	mov	sl, r8
 800909e:	9b08      	ldr	r3, [sp, #32]
 80090a0:	1b9a      	subs	r2, r3, r6
 80090a2:	d004      	beq.n	80090ae <_dtoa_r+0x7b6>
 80090a4:	4651      	mov	r1, sl
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 fce0 	bl	8009a6c <__pow5mult>
 80090ac:	4682      	mov	sl, r0
 80090ae:	2101      	movs	r1, #1
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fc1b 	bl	80098ec <__i2b>
 80090b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	4606      	mov	r6, r0
 80090bc:	f340 8081 	ble.w	80091c2 <_dtoa_r+0x8ca>
 80090c0:	461a      	mov	r2, r3
 80090c2:	4601      	mov	r1, r0
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fcd1 	bl	8009a6c <__pow5mult>
 80090ca:	9b07      	ldr	r3, [sp, #28]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	4606      	mov	r6, r0
 80090d0:	dd7a      	ble.n	80091c8 <_dtoa_r+0x8d0>
 80090d2:	f04f 0800 	mov.w	r8, #0
 80090d6:	6933      	ldr	r3, [r6, #16]
 80090d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090dc:	6918      	ldr	r0, [r3, #16]
 80090de:	f000 fbb7 	bl	8009850 <__hi0bits>
 80090e2:	f1c0 0020 	rsb	r0, r0, #32
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	4418      	add	r0, r3
 80090ea:	f010 001f 	ands.w	r0, r0, #31
 80090ee:	f000 8094 	beq.w	800921a <_dtoa_r+0x922>
 80090f2:	f1c0 0320 	rsb	r3, r0, #32
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	f340 8085 	ble.w	8009206 <_dtoa_r+0x90e>
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	f1c0 001c 	rsb	r0, r0, #28
 8009102:	4403      	add	r3, r0
 8009104:	9305      	str	r3, [sp, #20]
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	4403      	add	r3, r0
 800910a:	4405      	add	r5, r0
 800910c:	9306      	str	r3, [sp, #24]
 800910e:	9b05      	ldr	r3, [sp, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dd05      	ble.n	8009120 <_dtoa_r+0x828>
 8009114:	4651      	mov	r1, sl
 8009116:	461a      	mov	r2, r3
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fd01 	bl	8009b20 <__lshift>
 800911e:	4682      	mov	sl, r0
 8009120:	9b06      	ldr	r3, [sp, #24]
 8009122:	2b00      	cmp	r3, #0
 8009124:	dd05      	ble.n	8009132 <_dtoa_r+0x83a>
 8009126:	4631      	mov	r1, r6
 8009128:	461a      	mov	r2, r3
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fcf8 	bl	8009b20 <__lshift>
 8009130:	4606      	mov	r6, r0
 8009132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009134:	2b00      	cmp	r3, #0
 8009136:	d072      	beq.n	800921e <_dtoa_r+0x926>
 8009138:	4631      	mov	r1, r6
 800913a:	4650      	mov	r0, sl
 800913c:	f000 fd5c 	bl	8009bf8 <__mcmp>
 8009140:	2800      	cmp	r0, #0
 8009142:	da6c      	bge.n	800921e <_dtoa_r+0x926>
 8009144:	2300      	movs	r3, #0
 8009146:	4651      	mov	r1, sl
 8009148:	220a      	movs	r2, #10
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fb3a 	bl	80097c4 <__multadd>
 8009150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009152:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009156:	4682      	mov	sl, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 81b0 	beq.w	80094be <_dtoa_r+0xbc6>
 800915e:	2300      	movs	r3, #0
 8009160:	4639      	mov	r1, r7
 8009162:	220a      	movs	r2, #10
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fb2d 	bl	80097c4 <__multadd>
 800916a:	9b01      	ldr	r3, [sp, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	4607      	mov	r7, r0
 8009170:	f300 8096 	bgt.w	80092a0 <_dtoa_r+0x9a8>
 8009174:	9b07      	ldr	r3, [sp, #28]
 8009176:	2b02      	cmp	r3, #2
 8009178:	dc59      	bgt.n	800922e <_dtoa_r+0x936>
 800917a:	e091      	b.n	80092a0 <_dtoa_r+0x9a8>
 800917c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800917e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009182:	e758      	b.n	8009036 <_dtoa_r+0x73e>
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	1e5e      	subs	r6, r3, #1
 8009188:	9b08      	ldr	r3, [sp, #32]
 800918a:	42b3      	cmp	r3, r6
 800918c:	bfbf      	itttt	lt
 800918e:	9b08      	ldrlt	r3, [sp, #32]
 8009190:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009192:	9608      	strlt	r6, [sp, #32]
 8009194:	1af3      	sublt	r3, r6, r3
 8009196:	bfb4      	ite	lt
 8009198:	18d2      	addlt	r2, r2, r3
 800919a:	1b9e      	subge	r6, r3, r6
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	bfbc      	itt	lt
 80091a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80091a2:	2600      	movlt	r6, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bfb7      	itett	lt
 80091a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80091ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80091b0:	1a9d      	sublt	r5, r3, r2
 80091b2:	2300      	movlt	r3, #0
 80091b4:	e741      	b.n	800903a <_dtoa_r+0x742>
 80091b6:	9e08      	ldr	r6, [sp, #32]
 80091b8:	9d05      	ldr	r5, [sp, #20]
 80091ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091bc:	e748      	b.n	8009050 <_dtoa_r+0x758>
 80091be:	9a08      	ldr	r2, [sp, #32]
 80091c0:	e770      	b.n	80090a4 <_dtoa_r+0x7ac>
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	dc19      	bgt.n	80091fc <_dtoa_r+0x904>
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	b9bb      	cbnz	r3, 80091fc <_dtoa_r+0x904>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091d2:	b99b      	cbnz	r3, 80091fc <_dtoa_r+0x904>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091da:	0d1b      	lsrs	r3, r3, #20
 80091dc:	051b      	lsls	r3, r3, #20
 80091de:	b183      	cbz	r3, 8009202 <_dtoa_r+0x90a>
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	3301      	adds	r3, #1
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	9b06      	ldr	r3, [sp, #24]
 80091e8:	3301      	adds	r3, #1
 80091ea:	9306      	str	r3, [sp, #24]
 80091ec:	f04f 0801 	mov.w	r8, #1
 80091f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f47f af6f 	bne.w	80090d6 <_dtoa_r+0x7de>
 80091f8:	2001      	movs	r0, #1
 80091fa:	e774      	b.n	80090e6 <_dtoa_r+0x7ee>
 80091fc:	f04f 0800 	mov.w	r8, #0
 8009200:	e7f6      	b.n	80091f0 <_dtoa_r+0x8f8>
 8009202:	4698      	mov	r8, r3
 8009204:	e7f4      	b.n	80091f0 <_dtoa_r+0x8f8>
 8009206:	d082      	beq.n	800910e <_dtoa_r+0x816>
 8009208:	9a05      	ldr	r2, [sp, #20]
 800920a:	331c      	adds	r3, #28
 800920c:	441a      	add	r2, r3
 800920e:	9205      	str	r2, [sp, #20]
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	441a      	add	r2, r3
 8009214:	441d      	add	r5, r3
 8009216:	9206      	str	r2, [sp, #24]
 8009218:	e779      	b.n	800910e <_dtoa_r+0x816>
 800921a:	4603      	mov	r3, r0
 800921c:	e7f4      	b.n	8009208 <_dtoa_r+0x910>
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	dc37      	bgt.n	8009294 <_dtoa_r+0x99c>
 8009224:	9b07      	ldr	r3, [sp, #28]
 8009226:	2b02      	cmp	r3, #2
 8009228:	dd34      	ble.n	8009294 <_dtoa_r+0x99c>
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	b963      	cbnz	r3, 800924c <_dtoa_r+0x954>
 8009232:	4631      	mov	r1, r6
 8009234:	2205      	movs	r2, #5
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fac4 	bl	80097c4 <__multadd>
 800923c:	4601      	mov	r1, r0
 800923e:	4606      	mov	r6, r0
 8009240:	4650      	mov	r0, sl
 8009242:	f000 fcd9 	bl	8009bf8 <__mcmp>
 8009246:	2800      	cmp	r0, #0
 8009248:	f73f adbb 	bgt.w	8008dc2 <_dtoa_r+0x4ca>
 800924c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924e:	9d00      	ldr	r5, [sp, #0]
 8009250:	ea6f 0b03 	mvn.w	fp, r3
 8009254:	f04f 0800 	mov.w	r8, #0
 8009258:	4631      	mov	r1, r6
 800925a:	4620      	mov	r0, r4
 800925c:	f000 fa90 	bl	8009780 <_Bfree>
 8009260:	2f00      	cmp	r7, #0
 8009262:	f43f aeab 	beq.w	8008fbc <_dtoa_r+0x6c4>
 8009266:	f1b8 0f00 	cmp.w	r8, #0
 800926a:	d005      	beq.n	8009278 <_dtoa_r+0x980>
 800926c:	45b8      	cmp	r8, r7
 800926e:	d003      	beq.n	8009278 <_dtoa_r+0x980>
 8009270:	4641      	mov	r1, r8
 8009272:	4620      	mov	r0, r4
 8009274:	f000 fa84 	bl	8009780 <_Bfree>
 8009278:	4639      	mov	r1, r7
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fa80 	bl	8009780 <_Bfree>
 8009280:	e69c      	b.n	8008fbc <_dtoa_r+0x6c4>
 8009282:	2600      	movs	r6, #0
 8009284:	4637      	mov	r7, r6
 8009286:	e7e1      	b.n	800924c <_dtoa_r+0x954>
 8009288:	46bb      	mov	fp, r7
 800928a:	4637      	mov	r7, r6
 800928c:	e599      	b.n	8008dc2 <_dtoa_r+0x4ca>
 800928e:	bf00      	nop
 8009290:	40240000 	.word	0x40240000
 8009294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 80c8 	beq.w	800942c <_dtoa_r+0xb34>
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	2d00      	cmp	r5, #0
 80092a2:	dd05      	ble.n	80092b0 <_dtoa_r+0x9b8>
 80092a4:	4639      	mov	r1, r7
 80092a6:	462a      	mov	r2, r5
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fc39 	bl	8009b20 <__lshift>
 80092ae:	4607      	mov	r7, r0
 80092b0:	f1b8 0f00 	cmp.w	r8, #0
 80092b4:	d05b      	beq.n	800936e <_dtoa_r+0xa76>
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 fa21 	bl	8009700 <_Balloc>
 80092be:	4605      	mov	r5, r0
 80092c0:	b928      	cbnz	r0, 80092ce <_dtoa_r+0x9d6>
 80092c2:	4b83      	ldr	r3, [pc, #524]	; (80094d0 <_dtoa_r+0xbd8>)
 80092c4:	4602      	mov	r2, r0
 80092c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80092ca:	f7ff bb2e 	b.w	800892a <_dtoa_r+0x32>
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	3202      	adds	r2, #2
 80092d2:	0092      	lsls	r2, r2, #2
 80092d4:	f107 010c 	add.w	r1, r7, #12
 80092d8:	300c      	adds	r0, #12
 80092da:	f7ff fa57 	bl	800878c <memcpy>
 80092de:	2201      	movs	r2, #1
 80092e0:	4629      	mov	r1, r5
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fc1c 	bl	8009b20 <__lshift>
 80092e8:	9b00      	ldr	r3, [sp, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f2:	4413      	add	r3, r2
 80092f4:	9308      	str	r3, [sp, #32]
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	46b8      	mov	r8, r7
 80092fe:	9306      	str	r3, [sp, #24]
 8009300:	4607      	mov	r7, r0
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	4631      	mov	r1, r6
 8009306:	3b01      	subs	r3, #1
 8009308:	4650      	mov	r0, sl
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	f7ff fa6a 	bl	80087e4 <quorem>
 8009310:	4641      	mov	r1, r8
 8009312:	9002      	str	r0, [sp, #8]
 8009314:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009318:	4650      	mov	r0, sl
 800931a:	f000 fc6d 	bl	8009bf8 <__mcmp>
 800931e:	463a      	mov	r2, r7
 8009320:	9005      	str	r0, [sp, #20]
 8009322:	4631      	mov	r1, r6
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fc83 	bl	8009c30 <__mdiff>
 800932a:	68c2      	ldr	r2, [r0, #12]
 800932c:	4605      	mov	r5, r0
 800932e:	bb02      	cbnz	r2, 8009372 <_dtoa_r+0xa7a>
 8009330:	4601      	mov	r1, r0
 8009332:	4650      	mov	r0, sl
 8009334:	f000 fc60 	bl	8009bf8 <__mcmp>
 8009338:	4602      	mov	r2, r0
 800933a:	4629      	mov	r1, r5
 800933c:	4620      	mov	r0, r4
 800933e:	9209      	str	r2, [sp, #36]	; 0x24
 8009340:	f000 fa1e 	bl	8009780 <_Bfree>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009348:	9d04      	ldr	r5, [sp, #16]
 800934a:	ea43 0102 	orr.w	r1, r3, r2
 800934e:	9b06      	ldr	r3, [sp, #24]
 8009350:	4319      	orrs	r1, r3
 8009352:	d110      	bne.n	8009376 <_dtoa_r+0xa7e>
 8009354:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009358:	d029      	beq.n	80093ae <_dtoa_r+0xab6>
 800935a:	9b05      	ldr	r3, [sp, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	dd02      	ble.n	8009366 <_dtoa_r+0xa6e>
 8009360:	9b02      	ldr	r3, [sp, #8]
 8009362:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	f883 9000 	strb.w	r9, [r3]
 800936c:	e774      	b.n	8009258 <_dtoa_r+0x960>
 800936e:	4638      	mov	r0, r7
 8009370:	e7ba      	b.n	80092e8 <_dtoa_r+0x9f0>
 8009372:	2201      	movs	r2, #1
 8009374:	e7e1      	b.n	800933a <_dtoa_r+0xa42>
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	db04      	blt.n	8009386 <_dtoa_r+0xa8e>
 800937c:	9907      	ldr	r1, [sp, #28]
 800937e:	430b      	orrs	r3, r1
 8009380:	9906      	ldr	r1, [sp, #24]
 8009382:	430b      	orrs	r3, r1
 8009384:	d120      	bne.n	80093c8 <_dtoa_r+0xad0>
 8009386:	2a00      	cmp	r2, #0
 8009388:	dded      	ble.n	8009366 <_dtoa_r+0xa6e>
 800938a:	4651      	mov	r1, sl
 800938c:	2201      	movs	r2, #1
 800938e:	4620      	mov	r0, r4
 8009390:	f000 fbc6 	bl	8009b20 <__lshift>
 8009394:	4631      	mov	r1, r6
 8009396:	4682      	mov	sl, r0
 8009398:	f000 fc2e 	bl	8009bf8 <__mcmp>
 800939c:	2800      	cmp	r0, #0
 800939e:	dc03      	bgt.n	80093a8 <_dtoa_r+0xab0>
 80093a0:	d1e1      	bne.n	8009366 <_dtoa_r+0xa6e>
 80093a2:	f019 0f01 	tst.w	r9, #1
 80093a6:	d0de      	beq.n	8009366 <_dtoa_r+0xa6e>
 80093a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093ac:	d1d8      	bne.n	8009360 <_dtoa_r+0xa68>
 80093ae:	9a01      	ldr	r2, [sp, #4]
 80093b0:	2339      	movs	r3, #57	; 0x39
 80093b2:	7013      	strb	r3, [r2, #0]
 80093b4:	462b      	mov	r3, r5
 80093b6:	461d      	mov	r5, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093be:	2a39      	cmp	r2, #57	; 0x39
 80093c0:	d06c      	beq.n	800949c <_dtoa_r+0xba4>
 80093c2:	3201      	adds	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e747      	b.n	8009258 <_dtoa_r+0x960>
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	dd07      	ble.n	80093dc <_dtoa_r+0xae4>
 80093cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093d0:	d0ed      	beq.n	80093ae <_dtoa_r+0xab6>
 80093d2:	9a01      	ldr	r2, [sp, #4]
 80093d4:	f109 0301 	add.w	r3, r9, #1
 80093d8:	7013      	strb	r3, [r2, #0]
 80093da:	e73d      	b.n	8009258 <_dtoa_r+0x960>
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	9a08      	ldr	r2, [sp, #32]
 80093e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d043      	beq.n	8009470 <_dtoa_r+0xb78>
 80093e8:	4651      	mov	r1, sl
 80093ea:	2300      	movs	r3, #0
 80093ec:	220a      	movs	r2, #10
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 f9e8 	bl	80097c4 <__multadd>
 80093f4:	45b8      	cmp	r8, r7
 80093f6:	4682      	mov	sl, r0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	f04f 020a 	mov.w	r2, #10
 8009400:	4641      	mov	r1, r8
 8009402:	4620      	mov	r0, r4
 8009404:	d107      	bne.n	8009416 <_dtoa_r+0xb1e>
 8009406:	f000 f9dd 	bl	80097c4 <__multadd>
 800940a:	4680      	mov	r8, r0
 800940c:	4607      	mov	r7, r0
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	3301      	adds	r3, #1
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	e775      	b.n	8009302 <_dtoa_r+0xa0a>
 8009416:	f000 f9d5 	bl	80097c4 <__multadd>
 800941a:	4639      	mov	r1, r7
 800941c:	4680      	mov	r8, r0
 800941e:	2300      	movs	r3, #0
 8009420:	220a      	movs	r2, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f9ce 	bl	80097c4 <__multadd>
 8009428:	4607      	mov	r7, r0
 800942a:	e7f0      	b.n	800940e <_dtoa_r+0xb16>
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	9d00      	ldr	r5, [sp, #0]
 8009432:	4631      	mov	r1, r6
 8009434:	4650      	mov	r0, sl
 8009436:	f7ff f9d5 	bl	80087e4 <quorem>
 800943a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	f805 9b01 	strb.w	r9, [r5], #1
 8009444:	1aea      	subs	r2, r5, r3
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	4293      	cmp	r3, r2
 800944a:	dd07      	ble.n	800945c <_dtoa_r+0xb64>
 800944c:	4651      	mov	r1, sl
 800944e:	2300      	movs	r3, #0
 8009450:	220a      	movs	r2, #10
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f9b6 	bl	80097c4 <__multadd>
 8009458:	4682      	mov	sl, r0
 800945a:	e7ea      	b.n	8009432 <_dtoa_r+0xb3a>
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfc8      	it	gt
 8009462:	461d      	movgt	r5, r3
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	bfd8      	it	le
 8009468:	2501      	movle	r5, #1
 800946a:	441d      	add	r5, r3
 800946c:	f04f 0800 	mov.w	r8, #0
 8009470:	4651      	mov	r1, sl
 8009472:	2201      	movs	r2, #1
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fb53 	bl	8009b20 <__lshift>
 800947a:	4631      	mov	r1, r6
 800947c:	4682      	mov	sl, r0
 800947e:	f000 fbbb 	bl	8009bf8 <__mcmp>
 8009482:	2800      	cmp	r0, #0
 8009484:	dc96      	bgt.n	80093b4 <_dtoa_r+0xabc>
 8009486:	d102      	bne.n	800948e <_dtoa_r+0xb96>
 8009488:	f019 0f01 	tst.w	r9, #1
 800948c:	d192      	bne.n	80093b4 <_dtoa_r+0xabc>
 800948e:	462b      	mov	r3, r5
 8009490:	461d      	mov	r5, r3
 8009492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009496:	2a30      	cmp	r2, #48	; 0x30
 8009498:	d0fa      	beq.n	8009490 <_dtoa_r+0xb98>
 800949a:	e6dd      	b.n	8009258 <_dtoa_r+0x960>
 800949c:	9a00      	ldr	r2, [sp, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d189      	bne.n	80093b6 <_dtoa_r+0xabe>
 80094a2:	f10b 0b01 	add.w	fp, fp, #1
 80094a6:	2331      	movs	r3, #49	; 0x31
 80094a8:	e796      	b.n	80093d8 <_dtoa_r+0xae0>
 80094aa:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <_dtoa_r+0xbdc>)
 80094ac:	f7ff ba99 	b.w	80089e2 <_dtoa_r+0xea>
 80094b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f47f aa6d 	bne.w	8008992 <_dtoa_r+0x9a>
 80094b8:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <_dtoa_r+0xbe0>)
 80094ba:	f7ff ba92 	b.w	80089e2 <_dtoa_r+0xea>
 80094be:	9b01      	ldr	r3, [sp, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dcb5      	bgt.n	8009430 <_dtoa_r+0xb38>
 80094c4:	9b07      	ldr	r3, [sp, #28]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	f73f aeb1 	bgt.w	800922e <_dtoa_r+0x936>
 80094cc:	e7b0      	b.n	8009430 <_dtoa_r+0xb38>
 80094ce:	bf00      	nop
 80094d0:	0800a75a 	.word	0x0800a75a
 80094d4:	0800a674 	.word	0x0800a674
 80094d8:	0800a6de 	.word	0x0800a6de

080094dc <_free_r>:
 80094dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094de:	2900      	cmp	r1, #0
 80094e0:	d044      	beq.n	800956c <_free_r+0x90>
 80094e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e6:	9001      	str	r0, [sp, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f1a1 0404 	sub.w	r4, r1, #4
 80094ee:	bfb8      	it	lt
 80094f0:	18e4      	addlt	r4, r4, r3
 80094f2:	f000 f8f9 	bl	80096e8 <__malloc_lock>
 80094f6:	4a1e      	ldr	r2, [pc, #120]	; (8009570 <_free_r+0x94>)
 80094f8:	9801      	ldr	r0, [sp, #4]
 80094fa:	6813      	ldr	r3, [r2, #0]
 80094fc:	b933      	cbnz	r3, 800950c <_free_r+0x30>
 80094fe:	6063      	str	r3, [r4, #4]
 8009500:	6014      	str	r4, [r2, #0]
 8009502:	b003      	add	sp, #12
 8009504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009508:	f000 b8f4 	b.w	80096f4 <__malloc_unlock>
 800950c:	42a3      	cmp	r3, r4
 800950e:	d908      	bls.n	8009522 <_free_r+0x46>
 8009510:	6825      	ldr	r5, [r4, #0]
 8009512:	1961      	adds	r1, r4, r5
 8009514:	428b      	cmp	r3, r1
 8009516:	bf01      	itttt	eq
 8009518:	6819      	ldreq	r1, [r3, #0]
 800951a:	685b      	ldreq	r3, [r3, #4]
 800951c:	1949      	addeq	r1, r1, r5
 800951e:	6021      	streq	r1, [r4, #0]
 8009520:	e7ed      	b.n	80094fe <_free_r+0x22>
 8009522:	461a      	mov	r2, r3
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	b10b      	cbz	r3, 800952c <_free_r+0x50>
 8009528:	42a3      	cmp	r3, r4
 800952a:	d9fa      	bls.n	8009522 <_free_r+0x46>
 800952c:	6811      	ldr	r1, [r2, #0]
 800952e:	1855      	adds	r5, r2, r1
 8009530:	42a5      	cmp	r5, r4
 8009532:	d10b      	bne.n	800954c <_free_r+0x70>
 8009534:	6824      	ldr	r4, [r4, #0]
 8009536:	4421      	add	r1, r4
 8009538:	1854      	adds	r4, r2, r1
 800953a:	42a3      	cmp	r3, r4
 800953c:	6011      	str	r1, [r2, #0]
 800953e:	d1e0      	bne.n	8009502 <_free_r+0x26>
 8009540:	681c      	ldr	r4, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	6053      	str	r3, [r2, #4]
 8009546:	440c      	add	r4, r1
 8009548:	6014      	str	r4, [r2, #0]
 800954a:	e7da      	b.n	8009502 <_free_r+0x26>
 800954c:	d902      	bls.n	8009554 <_free_r+0x78>
 800954e:	230c      	movs	r3, #12
 8009550:	6003      	str	r3, [r0, #0]
 8009552:	e7d6      	b.n	8009502 <_free_r+0x26>
 8009554:	6825      	ldr	r5, [r4, #0]
 8009556:	1961      	adds	r1, r4, r5
 8009558:	428b      	cmp	r3, r1
 800955a:	bf04      	itt	eq
 800955c:	6819      	ldreq	r1, [r3, #0]
 800955e:	685b      	ldreq	r3, [r3, #4]
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	bf04      	itt	eq
 8009564:	1949      	addeq	r1, r1, r5
 8009566:	6021      	streq	r1, [r4, #0]
 8009568:	6054      	str	r4, [r2, #4]
 800956a:	e7ca      	b.n	8009502 <_free_r+0x26>
 800956c:	b003      	add	sp, #12
 800956e:	bd30      	pop	{r4, r5, pc}
 8009570:	20000530 	.word	0x20000530

08009574 <malloc>:
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <malloc+0xc>)
 8009576:	4601      	mov	r1, r0
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f000 b823 	b.w	80095c4 <_malloc_r>
 800957e:	bf00      	nop
 8009580:	200001e8 	.word	0x200001e8

08009584 <sbrk_aligned>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4e0e      	ldr	r6, [pc, #56]	; (80095c0 <sbrk_aligned+0x3c>)
 8009588:	460c      	mov	r4, r1
 800958a:	6831      	ldr	r1, [r6, #0]
 800958c:	4605      	mov	r5, r0
 800958e:	b911      	cbnz	r1, 8009596 <sbrk_aligned+0x12>
 8009590:	f000 fd00 	bl	8009f94 <_sbrk_r>
 8009594:	6030      	str	r0, [r6, #0]
 8009596:	4621      	mov	r1, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f000 fcfb 	bl	8009f94 <_sbrk_r>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d00a      	beq.n	80095b8 <sbrk_aligned+0x34>
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d007      	beq.n	80095bc <sbrk_aligned+0x38>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 fcf0 	bl	8009f94 <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d101      	bne.n	80095bc <sbrk_aligned+0x38>
 80095b8:	f04f 34ff 	mov.w	r4, #4294967295
 80095bc:	4620      	mov	r0, r4
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	20000534 	.word	0x20000534

080095c4 <_malloc_r>:
 80095c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c8:	1ccd      	adds	r5, r1, #3
 80095ca:	f025 0503 	bic.w	r5, r5, #3
 80095ce:	3508      	adds	r5, #8
 80095d0:	2d0c      	cmp	r5, #12
 80095d2:	bf38      	it	cc
 80095d4:	250c      	movcc	r5, #12
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	4607      	mov	r7, r0
 80095da:	db01      	blt.n	80095e0 <_malloc_r+0x1c>
 80095dc:	42a9      	cmp	r1, r5
 80095de:	d905      	bls.n	80095ec <_malloc_r+0x28>
 80095e0:	230c      	movs	r3, #12
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	2600      	movs	r6, #0
 80095e6:	4630      	mov	r0, r6
 80095e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096c0 <_malloc_r+0xfc>
 80095f0:	f000 f87a 	bl	80096e8 <__malloc_lock>
 80095f4:	f8d8 3000 	ldr.w	r3, [r8]
 80095f8:	461c      	mov	r4, r3
 80095fa:	bb5c      	cbnz	r4, 8009654 <_malloc_r+0x90>
 80095fc:	4629      	mov	r1, r5
 80095fe:	4638      	mov	r0, r7
 8009600:	f7ff ffc0 	bl	8009584 <sbrk_aligned>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	4604      	mov	r4, r0
 8009608:	d155      	bne.n	80096b6 <_malloc_r+0xf2>
 800960a:	f8d8 4000 	ldr.w	r4, [r8]
 800960e:	4626      	mov	r6, r4
 8009610:	2e00      	cmp	r6, #0
 8009612:	d145      	bne.n	80096a0 <_malloc_r+0xdc>
 8009614:	2c00      	cmp	r4, #0
 8009616:	d048      	beq.n	80096aa <_malloc_r+0xe6>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	4631      	mov	r1, r6
 800961c:	4638      	mov	r0, r7
 800961e:	eb04 0903 	add.w	r9, r4, r3
 8009622:	f000 fcb7 	bl	8009f94 <_sbrk_r>
 8009626:	4581      	cmp	r9, r0
 8009628:	d13f      	bne.n	80096aa <_malloc_r+0xe6>
 800962a:	6821      	ldr	r1, [r4, #0]
 800962c:	1a6d      	subs	r5, r5, r1
 800962e:	4629      	mov	r1, r5
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff ffa7 	bl	8009584 <sbrk_aligned>
 8009636:	3001      	adds	r0, #1
 8009638:	d037      	beq.n	80096aa <_malloc_r+0xe6>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	442b      	add	r3, r5
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	f8d8 3000 	ldr.w	r3, [r8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d038      	beq.n	80096ba <_malloc_r+0xf6>
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	42a2      	cmp	r2, r4
 800964c:	d12b      	bne.n	80096a6 <_malloc_r+0xe2>
 800964e:	2200      	movs	r2, #0
 8009650:	605a      	str	r2, [r3, #4]
 8009652:	e00f      	b.n	8009674 <_malloc_r+0xb0>
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	1b52      	subs	r2, r2, r5
 8009658:	d41f      	bmi.n	800969a <_malloc_r+0xd6>
 800965a:	2a0b      	cmp	r2, #11
 800965c:	d917      	bls.n	800968e <_malloc_r+0xca>
 800965e:	1961      	adds	r1, r4, r5
 8009660:	42a3      	cmp	r3, r4
 8009662:	6025      	str	r5, [r4, #0]
 8009664:	bf18      	it	ne
 8009666:	6059      	strne	r1, [r3, #4]
 8009668:	6863      	ldr	r3, [r4, #4]
 800966a:	bf08      	it	eq
 800966c:	f8c8 1000 	streq.w	r1, [r8]
 8009670:	5162      	str	r2, [r4, r5]
 8009672:	604b      	str	r3, [r1, #4]
 8009674:	4638      	mov	r0, r7
 8009676:	f104 060b 	add.w	r6, r4, #11
 800967a:	f000 f83b 	bl	80096f4 <__malloc_unlock>
 800967e:	f026 0607 	bic.w	r6, r6, #7
 8009682:	1d23      	adds	r3, r4, #4
 8009684:	1af2      	subs	r2, r6, r3
 8009686:	d0ae      	beq.n	80095e6 <_malloc_r+0x22>
 8009688:	1b9b      	subs	r3, r3, r6
 800968a:	50a3      	str	r3, [r4, r2]
 800968c:	e7ab      	b.n	80095e6 <_malloc_r+0x22>
 800968e:	42a3      	cmp	r3, r4
 8009690:	6862      	ldr	r2, [r4, #4]
 8009692:	d1dd      	bne.n	8009650 <_malloc_r+0x8c>
 8009694:	f8c8 2000 	str.w	r2, [r8]
 8009698:	e7ec      	b.n	8009674 <_malloc_r+0xb0>
 800969a:	4623      	mov	r3, r4
 800969c:	6864      	ldr	r4, [r4, #4]
 800969e:	e7ac      	b.n	80095fa <_malloc_r+0x36>
 80096a0:	4634      	mov	r4, r6
 80096a2:	6876      	ldr	r6, [r6, #4]
 80096a4:	e7b4      	b.n	8009610 <_malloc_r+0x4c>
 80096a6:	4613      	mov	r3, r2
 80096a8:	e7cc      	b.n	8009644 <_malloc_r+0x80>
 80096aa:	230c      	movs	r3, #12
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	4638      	mov	r0, r7
 80096b0:	f000 f820 	bl	80096f4 <__malloc_unlock>
 80096b4:	e797      	b.n	80095e6 <_malloc_r+0x22>
 80096b6:	6025      	str	r5, [r4, #0]
 80096b8:	e7dc      	b.n	8009674 <_malloc_r+0xb0>
 80096ba:	605b      	str	r3, [r3, #4]
 80096bc:	deff      	udf	#255	; 0xff
 80096be:	bf00      	nop
 80096c0:	20000530 	.word	0x20000530

080096c4 <__ascii_mbtowc>:
 80096c4:	b082      	sub	sp, #8
 80096c6:	b901      	cbnz	r1, 80096ca <__ascii_mbtowc+0x6>
 80096c8:	a901      	add	r1, sp, #4
 80096ca:	b142      	cbz	r2, 80096de <__ascii_mbtowc+0x1a>
 80096cc:	b14b      	cbz	r3, 80096e2 <__ascii_mbtowc+0x1e>
 80096ce:	7813      	ldrb	r3, [r2, #0]
 80096d0:	600b      	str	r3, [r1, #0]
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	1e10      	subs	r0, r2, #0
 80096d6:	bf18      	it	ne
 80096d8:	2001      	movne	r0, #1
 80096da:	b002      	add	sp, #8
 80096dc:	4770      	bx	lr
 80096de:	4610      	mov	r0, r2
 80096e0:	e7fb      	b.n	80096da <__ascii_mbtowc+0x16>
 80096e2:	f06f 0001 	mvn.w	r0, #1
 80096e6:	e7f8      	b.n	80096da <__ascii_mbtowc+0x16>

080096e8 <__malloc_lock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__malloc_lock+0x8>)
 80096ea:	f7ff b84d 	b.w	8008788 <__retarget_lock_acquire_recursive>
 80096ee:	bf00      	nop
 80096f0:	2000052c 	.word	0x2000052c

080096f4 <__malloc_unlock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__malloc_unlock+0x8>)
 80096f6:	f7ff b848 	b.w	800878a <__retarget_lock_release_recursive>
 80096fa:	bf00      	nop
 80096fc:	2000052c 	.word	0x2000052c

08009700 <_Balloc>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c6      	ldr	r6, [r0, #28]
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	b976      	cbnz	r6, 8009728 <_Balloc+0x28>
 800970a:	2010      	movs	r0, #16
 800970c:	f7ff ff32 	bl	8009574 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e0      	str	r0, [r4, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_Balloc+0x20>
 8009716:	4b18      	ldr	r3, [pc, #96]	; (8009778 <_Balloc+0x78>)
 8009718:	4818      	ldr	r0, [pc, #96]	; (800977c <_Balloc+0x7c>)
 800971a:	216b      	movs	r1, #107	; 0x6b
 800971c:	f7ff f844 	bl	80087a8 <__assert_func>
 8009720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009724:	6006      	str	r6, [r0, #0]
 8009726:	60c6      	str	r6, [r0, #12]
 8009728:	69e6      	ldr	r6, [r4, #28]
 800972a:	68f3      	ldr	r3, [r6, #12]
 800972c:	b183      	cbz	r3, 8009750 <_Balloc+0x50>
 800972e:	69e3      	ldr	r3, [r4, #28]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009736:	b9b8      	cbnz	r0, 8009768 <_Balloc+0x68>
 8009738:	2101      	movs	r1, #1
 800973a:	fa01 f605 	lsl.w	r6, r1, r5
 800973e:	1d72      	adds	r2, r6, #5
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fc3d 	bl	8009fc2 <_calloc_r>
 8009748:	b160      	cbz	r0, 8009764 <_Balloc+0x64>
 800974a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800974e:	e00e      	b.n	800976e <_Balloc+0x6e>
 8009750:	2221      	movs	r2, #33	; 0x21
 8009752:	2104      	movs	r1, #4
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fc34 	bl	8009fc2 <_calloc_r>
 800975a:	69e3      	ldr	r3, [r4, #28]
 800975c:	60f0      	str	r0, [r6, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <_Balloc+0x2e>
 8009764:	2000      	movs	r0, #0
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	6802      	ldr	r2, [r0, #0]
 800976a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800976e:	2300      	movs	r3, #0
 8009770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009774:	e7f7      	b.n	8009766 <_Balloc+0x66>
 8009776:	bf00      	nop
 8009778:	0800a6eb 	.word	0x0800a6eb
 800977c:	0800a76b 	.word	0x0800a76b

08009780 <_Bfree>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	69c6      	ldr	r6, [r0, #28]
 8009784:	4605      	mov	r5, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b976      	cbnz	r6, 80097a8 <_Bfree+0x28>
 800978a:	2010      	movs	r0, #16
 800978c:	f7ff fef2 	bl	8009574 <malloc>
 8009790:	4602      	mov	r2, r0
 8009792:	61e8      	str	r0, [r5, #28]
 8009794:	b920      	cbnz	r0, 80097a0 <_Bfree+0x20>
 8009796:	4b09      	ldr	r3, [pc, #36]	; (80097bc <_Bfree+0x3c>)
 8009798:	4809      	ldr	r0, [pc, #36]	; (80097c0 <_Bfree+0x40>)
 800979a:	218f      	movs	r1, #143	; 0x8f
 800979c:	f7ff f804 	bl	80087a8 <__assert_func>
 80097a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097a4:	6006      	str	r6, [r0, #0]
 80097a6:	60c6      	str	r6, [r0, #12]
 80097a8:	b13c      	cbz	r4, 80097ba <_Bfree+0x3a>
 80097aa:	69eb      	ldr	r3, [r5, #28]
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097b4:	6021      	str	r1, [r4, #0]
 80097b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0800a6eb 	.word	0x0800a6eb
 80097c0:	0800a76b 	.word	0x0800a76b

080097c4 <__multadd>:
 80097c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	690d      	ldr	r5, [r1, #16]
 80097ca:	4607      	mov	r7, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	461e      	mov	r6, r3
 80097d0:	f101 0c14 	add.w	ip, r1, #20
 80097d4:	2000      	movs	r0, #0
 80097d6:	f8dc 3000 	ldr.w	r3, [ip]
 80097da:	b299      	uxth	r1, r3
 80097dc:	fb02 6101 	mla	r1, r2, r1, r6
 80097e0:	0c1e      	lsrs	r6, r3, #16
 80097e2:	0c0b      	lsrs	r3, r1, #16
 80097e4:	fb02 3306 	mla	r3, r2, r6, r3
 80097e8:	b289      	uxth	r1, r1
 80097ea:	3001      	adds	r0, #1
 80097ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097f0:	4285      	cmp	r5, r0
 80097f2:	f84c 1b04 	str.w	r1, [ip], #4
 80097f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097fa:	dcec      	bgt.n	80097d6 <__multadd+0x12>
 80097fc:	b30e      	cbz	r6, 8009842 <__multadd+0x7e>
 80097fe:	68a3      	ldr	r3, [r4, #8]
 8009800:	42ab      	cmp	r3, r5
 8009802:	dc19      	bgt.n	8009838 <__multadd+0x74>
 8009804:	6861      	ldr	r1, [r4, #4]
 8009806:	4638      	mov	r0, r7
 8009808:	3101      	adds	r1, #1
 800980a:	f7ff ff79 	bl	8009700 <_Balloc>
 800980e:	4680      	mov	r8, r0
 8009810:	b928      	cbnz	r0, 800981e <__multadd+0x5a>
 8009812:	4602      	mov	r2, r0
 8009814:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <__multadd+0x84>)
 8009816:	480d      	ldr	r0, [pc, #52]	; (800984c <__multadd+0x88>)
 8009818:	21ba      	movs	r1, #186	; 0xba
 800981a:	f7fe ffc5 	bl	80087a8 <__assert_func>
 800981e:	6922      	ldr	r2, [r4, #16]
 8009820:	3202      	adds	r2, #2
 8009822:	f104 010c 	add.w	r1, r4, #12
 8009826:	0092      	lsls	r2, r2, #2
 8009828:	300c      	adds	r0, #12
 800982a:	f7fe ffaf 	bl	800878c <memcpy>
 800982e:	4621      	mov	r1, r4
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff ffa5 	bl	8009780 <_Bfree>
 8009836:	4644      	mov	r4, r8
 8009838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800983c:	3501      	adds	r5, #1
 800983e:	615e      	str	r6, [r3, #20]
 8009840:	6125      	str	r5, [r4, #16]
 8009842:	4620      	mov	r0, r4
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	0800a75a 	.word	0x0800a75a
 800984c:	0800a76b 	.word	0x0800a76b

08009850 <__hi0bits>:
 8009850:	0c03      	lsrs	r3, r0, #16
 8009852:	041b      	lsls	r3, r3, #16
 8009854:	b9d3      	cbnz	r3, 800988c <__hi0bits+0x3c>
 8009856:	0400      	lsls	r0, r0, #16
 8009858:	2310      	movs	r3, #16
 800985a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800985e:	bf04      	itt	eq
 8009860:	0200      	lsleq	r0, r0, #8
 8009862:	3308      	addeq	r3, #8
 8009864:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009868:	bf04      	itt	eq
 800986a:	0100      	lsleq	r0, r0, #4
 800986c:	3304      	addeq	r3, #4
 800986e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009872:	bf04      	itt	eq
 8009874:	0080      	lsleq	r0, r0, #2
 8009876:	3302      	addeq	r3, #2
 8009878:	2800      	cmp	r0, #0
 800987a:	db05      	blt.n	8009888 <__hi0bits+0x38>
 800987c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009880:	f103 0301 	add.w	r3, r3, #1
 8009884:	bf08      	it	eq
 8009886:	2320      	moveq	r3, #32
 8009888:	4618      	mov	r0, r3
 800988a:	4770      	bx	lr
 800988c:	2300      	movs	r3, #0
 800988e:	e7e4      	b.n	800985a <__hi0bits+0xa>

08009890 <__lo0bits>:
 8009890:	6803      	ldr	r3, [r0, #0]
 8009892:	f013 0207 	ands.w	r2, r3, #7
 8009896:	d00c      	beq.n	80098b2 <__lo0bits+0x22>
 8009898:	07d9      	lsls	r1, r3, #31
 800989a:	d422      	bmi.n	80098e2 <__lo0bits+0x52>
 800989c:	079a      	lsls	r2, r3, #30
 800989e:	bf49      	itett	mi
 80098a0:	085b      	lsrmi	r3, r3, #1
 80098a2:	089b      	lsrpl	r3, r3, #2
 80098a4:	6003      	strmi	r3, [r0, #0]
 80098a6:	2201      	movmi	r2, #1
 80098a8:	bf5c      	itt	pl
 80098aa:	6003      	strpl	r3, [r0, #0]
 80098ac:	2202      	movpl	r2, #2
 80098ae:	4610      	mov	r0, r2
 80098b0:	4770      	bx	lr
 80098b2:	b299      	uxth	r1, r3
 80098b4:	b909      	cbnz	r1, 80098ba <__lo0bits+0x2a>
 80098b6:	0c1b      	lsrs	r3, r3, #16
 80098b8:	2210      	movs	r2, #16
 80098ba:	b2d9      	uxtb	r1, r3
 80098bc:	b909      	cbnz	r1, 80098c2 <__lo0bits+0x32>
 80098be:	3208      	adds	r2, #8
 80098c0:	0a1b      	lsrs	r3, r3, #8
 80098c2:	0719      	lsls	r1, r3, #28
 80098c4:	bf04      	itt	eq
 80098c6:	091b      	lsreq	r3, r3, #4
 80098c8:	3204      	addeq	r2, #4
 80098ca:	0799      	lsls	r1, r3, #30
 80098cc:	bf04      	itt	eq
 80098ce:	089b      	lsreq	r3, r3, #2
 80098d0:	3202      	addeq	r2, #2
 80098d2:	07d9      	lsls	r1, r3, #31
 80098d4:	d403      	bmi.n	80098de <__lo0bits+0x4e>
 80098d6:	085b      	lsrs	r3, r3, #1
 80098d8:	f102 0201 	add.w	r2, r2, #1
 80098dc:	d003      	beq.n	80098e6 <__lo0bits+0x56>
 80098de:	6003      	str	r3, [r0, #0]
 80098e0:	e7e5      	b.n	80098ae <__lo0bits+0x1e>
 80098e2:	2200      	movs	r2, #0
 80098e4:	e7e3      	b.n	80098ae <__lo0bits+0x1e>
 80098e6:	2220      	movs	r2, #32
 80098e8:	e7e1      	b.n	80098ae <__lo0bits+0x1e>
	...

080098ec <__i2b>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	460c      	mov	r4, r1
 80098f0:	2101      	movs	r1, #1
 80098f2:	f7ff ff05 	bl	8009700 <_Balloc>
 80098f6:	4602      	mov	r2, r0
 80098f8:	b928      	cbnz	r0, 8009906 <__i2b+0x1a>
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <__i2b+0x24>)
 80098fc:	4805      	ldr	r0, [pc, #20]	; (8009914 <__i2b+0x28>)
 80098fe:	f240 1145 	movw	r1, #325	; 0x145
 8009902:	f7fe ff51 	bl	80087a8 <__assert_func>
 8009906:	2301      	movs	r3, #1
 8009908:	6144      	str	r4, [r0, #20]
 800990a:	6103      	str	r3, [r0, #16]
 800990c:	bd10      	pop	{r4, pc}
 800990e:	bf00      	nop
 8009910:	0800a75a 	.word	0x0800a75a
 8009914:	0800a76b 	.word	0x0800a76b

08009918 <__multiply>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	4691      	mov	r9, r2
 800991e:	690a      	ldr	r2, [r1, #16]
 8009920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009924:	429a      	cmp	r2, r3
 8009926:	bfb8      	it	lt
 8009928:	460b      	movlt	r3, r1
 800992a:	460c      	mov	r4, r1
 800992c:	bfbc      	itt	lt
 800992e:	464c      	movlt	r4, r9
 8009930:	4699      	movlt	r9, r3
 8009932:	6927      	ldr	r7, [r4, #16]
 8009934:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009938:	68a3      	ldr	r3, [r4, #8]
 800993a:	6861      	ldr	r1, [r4, #4]
 800993c:	eb07 060a 	add.w	r6, r7, sl
 8009940:	42b3      	cmp	r3, r6
 8009942:	b085      	sub	sp, #20
 8009944:	bfb8      	it	lt
 8009946:	3101      	addlt	r1, #1
 8009948:	f7ff feda 	bl	8009700 <_Balloc>
 800994c:	b930      	cbnz	r0, 800995c <__multiply+0x44>
 800994e:	4602      	mov	r2, r0
 8009950:	4b44      	ldr	r3, [pc, #272]	; (8009a64 <__multiply+0x14c>)
 8009952:	4845      	ldr	r0, [pc, #276]	; (8009a68 <__multiply+0x150>)
 8009954:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009958:	f7fe ff26 	bl	80087a8 <__assert_func>
 800995c:	f100 0514 	add.w	r5, r0, #20
 8009960:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009964:	462b      	mov	r3, r5
 8009966:	2200      	movs	r2, #0
 8009968:	4543      	cmp	r3, r8
 800996a:	d321      	bcc.n	80099b0 <__multiply+0x98>
 800996c:	f104 0314 	add.w	r3, r4, #20
 8009970:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009974:	f109 0314 	add.w	r3, r9, #20
 8009978:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800997c:	9202      	str	r2, [sp, #8]
 800997e:	1b3a      	subs	r2, r7, r4
 8009980:	3a15      	subs	r2, #21
 8009982:	f022 0203 	bic.w	r2, r2, #3
 8009986:	3204      	adds	r2, #4
 8009988:	f104 0115 	add.w	r1, r4, #21
 800998c:	428f      	cmp	r7, r1
 800998e:	bf38      	it	cc
 8009990:	2204      	movcc	r2, #4
 8009992:	9201      	str	r2, [sp, #4]
 8009994:	9a02      	ldr	r2, [sp, #8]
 8009996:	9303      	str	r3, [sp, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d80c      	bhi.n	80099b6 <__multiply+0x9e>
 800999c:	2e00      	cmp	r6, #0
 800999e:	dd03      	ble.n	80099a8 <__multiply+0x90>
 80099a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d05b      	beq.n	8009a60 <__multiply+0x148>
 80099a8:	6106      	str	r6, [r0, #16]
 80099aa:	b005      	add	sp, #20
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	f843 2b04 	str.w	r2, [r3], #4
 80099b4:	e7d8      	b.n	8009968 <__multiply+0x50>
 80099b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80099ba:	f1ba 0f00 	cmp.w	sl, #0
 80099be:	d024      	beq.n	8009a0a <__multiply+0xf2>
 80099c0:	f104 0e14 	add.w	lr, r4, #20
 80099c4:	46a9      	mov	r9, r5
 80099c6:	f04f 0c00 	mov.w	ip, #0
 80099ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099ce:	f8d9 1000 	ldr.w	r1, [r9]
 80099d2:	fa1f fb82 	uxth.w	fp, r2
 80099d6:	b289      	uxth	r1, r1
 80099d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80099dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099e0:	f8d9 2000 	ldr.w	r2, [r9]
 80099e4:	4461      	add	r1, ip
 80099e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80099ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099f2:	b289      	uxth	r1, r1
 80099f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099f8:	4577      	cmp	r7, lr
 80099fa:	f849 1b04 	str.w	r1, [r9], #4
 80099fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a02:	d8e2      	bhi.n	80099ca <__multiply+0xb2>
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	f845 c002 	str.w	ip, [r5, r2]
 8009a0a:	9a03      	ldr	r2, [sp, #12]
 8009a0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a10:	3304      	adds	r3, #4
 8009a12:	f1b9 0f00 	cmp.w	r9, #0
 8009a16:	d021      	beq.n	8009a5c <__multiply+0x144>
 8009a18:	6829      	ldr	r1, [r5, #0]
 8009a1a:	f104 0c14 	add.w	ip, r4, #20
 8009a1e:	46ae      	mov	lr, r5
 8009a20:	f04f 0a00 	mov.w	sl, #0
 8009a24:	f8bc b000 	ldrh.w	fp, [ip]
 8009a28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a2c:	fb09 220b 	mla	r2, r9, fp, r2
 8009a30:	4452      	add	r2, sl
 8009a32:	b289      	uxth	r1, r1
 8009a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a38:	f84e 1b04 	str.w	r1, [lr], #4
 8009a3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a44:	f8be 1000 	ldrh.w	r1, [lr]
 8009a48:	fb09 110a 	mla	r1, r9, sl, r1
 8009a4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a50:	4567      	cmp	r7, ip
 8009a52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a56:	d8e5      	bhi.n	8009a24 <__multiply+0x10c>
 8009a58:	9a01      	ldr	r2, [sp, #4]
 8009a5a:	50a9      	str	r1, [r5, r2]
 8009a5c:	3504      	adds	r5, #4
 8009a5e:	e799      	b.n	8009994 <__multiply+0x7c>
 8009a60:	3e01      	subs	r6, #1
 8009a62:	e79b      	b.n	800999c <__multiply+0x84>
 8009a64:	0800a75a 	.word	0x0800a75a
 8009a68:	0800a76b 	.word	0x0800a76b

08009a6c <__pow5mult>:
 8009a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	4615      	mov	r5, r2
 8009a72:	f012 0203 	ands.w	r2, r2, #3
 8009a76:	4606      	mov	r6, r0
 8009a78:	460f      	mov	r7, r1
 8009a7a:	d007      	beq.n	8009a8c <__pow5mult+0x20>
 8009a7c:	4c25      	ldr	r4, [pc, #148]	; (8009b14 <__pow5mult+0xa8>)
 8009a7e:	3a01      	subs	r2, #1
 8009a80:	2300      	movs	r3, #0
 8009a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a86:	f7ff fe9d 	bl	80097c4 <__multadd>
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	10ad      	asrs	r5, r5, #2
 8009a8e:	d03d      	beq.n	8009b0c <__pow5mult+0xa0>
 8009a90:	69f4      	ldr	r4, [r6, #28]
 8009a92:	b97c      	cbnz	r4, 8009ab4 <__pow5mult+0x48>
 8009a94:	2010      	movs	r0, #16
 8009a96:	f7ff fd6d 	bl	8009574 <malloc>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	61f0      	str	r0, [r6, #28]
 8009a9e:	b928      	cbnz	r0, 8009aac <__pow5mult+0x40>
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	; (8009b18 <__pow5mult+0xac>)
 8009aa2:	481e      	ldr	r0, [pc, #120]	; (8009b1c <__pow5mult+0xb0>)
 8009aa4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009aa8:	f7fe fe7e 	bl	80087a8 <__assert_func>
 8009aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ab0:	6004      	str	r4, [r0, #0]
 8009ab2:	60c4      	str	r4, [r0, #12]
 8009ab4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009abc:	b94c      	cbnz	r4, 8009ad2 <__pow5mult+0x66>
 8009abe:	f240 2171 	movw	r1, #625	; 0x271
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff12 	bl	80098ec <__i2b>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ace:	4604      	mov	r4, r0
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	f04f 0900 	mov.w	r9, #0
 8009ad6:	07eb      	lsls	r3, r5, #31
 8009ad8:	d50a      	bpl.n	8009af0 <__pow5mult+0x84>
 8009ada:	4639      	mov	r1, r7
 8009adc:	4622      	mov	r2, r4
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff1a 	bl	8009918 <__multiply>
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7ff fe49 	bl	8009780 <_Bfree>
 8009aee:	4647      	mov	r7, r8
 8009af0:	106d      	asrs	r5, r5, #1
 8009af2:	d00b      	beq.n	8009b0c <__pow5mult+0xa0>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	b938      	cbnz	r0, 8009b08 <__pow5mult+0x9c>
 8009af8:	4622      	mov	r2, r4
 8009afa:	4621      	mov	r1, r4
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff ff0b 	bl	8009918 <__multiply>
 8009b02:	6020      	str	r0, [r4, #0]
 8009b04:	f8c0 9000 	str.w	r9, [r0]
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e7e4      	b.n	8009ad6 <__pow5mult+0x6a>
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b12:	bf00      	nop
 8009b14:	0800a8b8 	.word	0x0800a8b8
 8009b18:	0800a6eb 	.word	0x0800a6eb
 8009b1c:	0800a76b 	.word	0x0800a76b

08009b20 <__lshift>:
 8009b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b24:	460c      	mov	r4, r1
 8009b26:	6849      	ldr	r1, [r1, #4]
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	4607      	mov	r7, r0
 8009b32:	4691      	mov	r9, r2
 8009b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b38:	f108 0601 	add.w	r6, r8, #1
 8009b3c:	42b3      	cmp	r3, r6
 8009b3e:	db0b      	blt.n	8009b58 <__lshift+0x38>
 8009b40:	4638      	mov	r0, r7
 8009b42:	f7ff fddd 	bl	8009700 <_Balloc>
 8009b46:	4605      	mov	r5, r0
 8009b48:	b948      	cbnz	r0, 8009b5e <__lshift+0x3e>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	4b28      	ldr	r3, [pc, #160]	; (8009bf0 <__lshift+0xd0>)
 8009b4e:	4829      	ldr	r0, [pc, #164]	; (8009bf4 <__lshift+0xd4>)
 8009b50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b54:	f7fe fe28 	bl	80087a8 <__assert_func>
 8009b58:	3101      	adds	r1, #1
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	e7ee      	b.n	8009b3c <__lshift+0x1c>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f100 0114 	add.w	r1, r0, #20
 8009b64:	f100 0210 	add.w	r2, r0, #16
 8009b68:	4618      	mov	r0, r3
 8009b6a:	4553      	cmp	r3, sl
 8009b6c:	db33      	blt.n	8009bd6 <__lshift+0xb6>
 8009b6e:	6920      	ldr	r0, [r4, #16]
 8009b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b74:	f104 0314 	add.w	r3, r4, #20
 8009b78:	f019 091f 	ands.w	r9, r9, #31
 8009b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b84:	d02b      	beq.n	8009bde <__lshift+0xbe>
 8009b86:	f1c9 0e20 	rsb	lr, r9, #32
 8009b8a:	468a      	mov	sl, r1
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	6818      	ldr	r0, [r3, #0]
 8009b90:	fa00 f009 	lsl.w	r0, r0, r9
 8009b94:	4310      	orrs	r0, r2
 8009b96:	f84a 0b04 	str.w	r0, [sl], #4
 8009b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9e:	459c      	cmp	ip, r3
 8009ba0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ba4:	d8f3      	bhi.n	8009b8e <__lshift+0x6e>
 8009ba6:	ebac 0304 	sub.w	r3, ip, r4
 8009baa:	3b15      	subs	r3, #21
 8009bac:	f023 0303 	bic.w	r3, r3, #3
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	f104 0015 	add.w	r0, r4, #21
 8009bb6:	4584      	cmp	ip, r0
 8009bb8:	bf38      	it	cc
 8009bba:	2304      	movcc	r3, #4
 8009bbc:	50ca      	str	r2, [r1, r3]
 8009bbe:	b10a      	cbz	r2, 8009bc4 <__lshift+0xa4>
 8009bc0:	f108 0602 	add.w	r6, r8, #2
 8009bc4:	3e01      	subs	r6, #1
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	612e      	str	r6, [r5, #16]
 8009bca:	4621      	mov	r1, r4
 8009bcc:	f7ff fdd8 	bl	8009780 <_Bfree>
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bda:	3301      	adds	r3, #1
 8009bdc:	e7c5      	b.n	8009b6a <__lshift+0x4a>
 8009bde:	3904      	subs	r1, #4
 8009be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009be8:	459c      	cmp	ip, r3
 8009bea:	d8f9      	bhi.n	8009be0 <__lshift+0xc0>
 8009bec:	e7ea      	b.n	8009bc4 <__lshift+0xa4>
 8009bee:	bf00      	nop
 8009bf0:	0800a75a 	.word	0x0800a75a
 8009bf4:	0800a76b 	.word	0x0800a76b

08009bf8 <__mcmp>:
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	6902      	ldr	r2, [r0, #16]
 8009bfc:	690c      	ldr	r4, [r1, #16]
 8009bfe:	1b12      	subs	r2, r2, r4
 8009c00:	d10e      	bne.n	8009c20 <__mcmp+0x28>
 8009c02:	f100 0314 	add.w	r3, r0, #20
 8009c06:	3114      	adds	r1, #20
 8009c08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c18:	42a5      	cmp	r5, r4
 8009c1a:	d003      	beq.n	8009c24 <__mcmp+0x2c>
 8009c1c:	d305      	bcc.n	8009c2a <__mcmp+0x32>
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4610      	mov	r0, r2
 8009c22:	bd30      	pop	{r4, r5, pc}
 8009c24:	4283      	cmp	r3, r0
 8009c26:	d3f3      	bcc.n	8009c10 <__mcmp+0x18>
 8009c28:	e7fa      	b.n	8009c20 <__mcmp+0x28>
 8009c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2e:	e7f7      	b.n	8009c20 <__mcmp+0x28>

08009c30 <__mdiff>:
 8009c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	4606      	mov	r6, r0
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	4690      	mov	r8, r2
 8009c3e:	f7ff ffdb 	bl	8009bf8 <__mcmp>
 8009c42:	1e05      	subs	r5, r0, #0
 8009c44:	d110      	bne.n	8009c68 <__mdiff+0x38>
 8009c46:	4629      	mov	r1, r5
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7ff fd59 	bl	8009700 <_Balloc>
 8009c4e:	b930      	cbnz	r0, 8009c5e <__mdiff+0x2e>
 8009c50:	4b3a      	ldr	r3, [pc, #232]	; (8009d3c <__mdiff+0x10c>)
 8009c52:	4602      	mov	r2, r0
 8009c54:	f240 2137 	movw	r1, #567	; 0x237
 8009c58:	4839      	ldr	r0, [pc, #228]	; (8009d40 <__mdiff+0x110>)
 8009c5a:	f7fe fda5 	bl	80087a8 <__assert_func>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	bfa4      	itt	ge
 8009c6a:	4643      	movge	r3, r8
 8009c6c:	46a0      	movge	r8, r4
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c74:	bfa6      	itte	ge
 8009c76:	461c      	movge	r4, r3
 8009c78:	2500      	movge	r5, #0
 8009c7a:	2501      	movlt	r5, #1
 8009c7c:	f7ff fd40 	bl	8009700 <_Balloc>
 8009c80:	b920      	cbnz	r0, 8009c8c <__mdiff+0x5c>
 8009c82:	4b2e      	ldr	r3, [pc, #184]	; (8009d3c <__mdiff+0x10c>)
 8009c84:	4602      	mov	r2, r0
 8009c86:	f240 2145 	movw	r1, #581	; 0x245
 8009c8a:	e7e5      	b.n	8009c58 <__mdiff+0x28>
 8009c8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c90:	6926      	ldr	r6, [r4, #16]
 8009c92:	60c5      	str	r5, [r0, #12]
 8009c94:	f104 0914 	add.w	r9, r4, #20
 8009c98:	f108 0514 	add.w	r5, r8, #20
 8009c9c:	f100 0e14 	add.w	lr, r0, #20
 8009ca0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ca4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ca8:	f108 0210 	add.w	r2, r8, #16
 8009cac:	46f2      	mov	sl, lr
 8009cae:	2100      	movs	r1, #0
 8009cb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cb8:	fa11 f88b 	uxtah	r8, r1, fp
 8009cbc:	b299      	uxth	r1, r3
 8009cbe:	0c1b      	lsrs	r3, r3, #16
 8009cc0:	eba8 0801 	sub.w	r8, r8, r1
 8009cc4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cc8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ccc:	fa1f f888 	uxth.w	r8, r8
 8009cd0:	1419      	asrs	r1, r3, #16
 8009cd2:	454e      	cmp	r6, r9
 8009cd4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cd8:	f84a 3b04 	str.w	r3, [sl], #4
 8009cdc:	d8e8      	bhi.n	8009cb0 <__mdiff+0x80>
 8009cde:	1b33      	subs	r3, r6, r4
 8009ce0:	3b15      	subs	r3, #21
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	3415      	adds	r4, #21
 8009cea:	42a6      	cmp	r6, r4
 8009cec:	bf38      	it	cc
 8009cee:	2304      	movcc	r3, #4
 8009cf0:	441d      	add	r5, r3
 8009cf2:	4473      	add	r3, lr
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	462e      	mov	r6, r5
 8009cf8:	4566      	cmp	r6, ip
 8009cfa:	d30e      	bcc.n	8009d1a <__mdiff+0xea>
 8009cfc:	f10c 0203 	add.w	r2, ip, #3
 8009d00:	1b52      	subs	r2, r2, r5
 8009d02:	f022 0203 	bic.w	r2, r2, #3
 8009d06:	3d03      	subs	r5, #3
 8009d08:	45ac      	cmp	ip, r5
 8009d0a:	bf38      	it	cc
 8009d0c:	2200      	movcc	r2, #0
 8009d0e:	4413      	add	r3, r2
 8009d10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d14:	b17a      	cbz	r2, 8009d36 <__mdiff+0x106>
 8009d16:	6107      	str	r7, [r0, #16]
 8009d18:	e7a4      	b.n	8009c64 <__mdiff+0x34>
 8009d1a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d1e:	fa11 f288 	uxtah	r2, r1, r8
 8009d22:	1414      	asrs	r4, r2, #16
 8009d24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d28:	b292      	uxth	r2, r2
 8009d2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d2e:	f84e 2b04 	str.w	r2, [lr], #4
 8009d32:	1421      	asrs	r1, r4, #16
 8009d34:	e7e0      	b.n	8009cf8 <__mdiff+0xc8>
 8009d36:	3f01      	subs	r7, #1
 8009d38:	e7ea      	b.n	8009d10 <__mdiff+0xe0>
 8009d3a:	bf00      	nop
 8009d3c:	0800a75a 	.word	0x0800a75a
 8009d40:	0800a76b 	.word	0x0800a76b

08009d44 <__d2b>:
 8009d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d48:	460f      	mov	r7, r1
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	ec59 8b10 	vmov	r8, r9, d0
 8009d50:	4616      	mov	r6, r2
 8009d52:	f7ff fcd5 	bl	8009700 <_Balloc>
 8009d56:	4604      	mov	r4, r0
 8009d58:	b930      	cbnz	r0, 8009d68 <__d2b+0x24>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	4b24      	ldr	r3, [pc, #144]	; (8009df0 <__d2b+0xac>)
 8009d5e:	4825      	ldr	r0, [pc, #148]	; (8009df4 <__d2b+0xb0>)
 8009d60:	f240 310f 	movw	r1, #783	; 0x30f
 8009d64:	f7fe fd20 	bl	80087a8 <__assert_func>
 8009d68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d70:	bb2d      	cbnz	r5, 8009dbe <__d2b+0x7a>
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	f1b8 0300 	subs.w	r3, r8, #0
 8009d78:	d026      	beq.n	8009dc8 <__d2b+0x84>
 8009d7a:	4668      	mov	r0, sp
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	f7ff fd87 	bl	8009890 <__lo0bits>
 8009d82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d86:	b1e8      	cbz	r0, 8009dc4 <__d2b+0x80>
 8009d88:	f1c0 0320 	rsb	r3, r0, #32
 8009d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d90:	430b      	orrs	r3, r1
 8009d92:	40c2      	lsrs	r2, r0
 8009d94:	6163      	str	r3, [r4, #20]
 8009d96:	9201      	str	r2, [sp, #4]
 8009d98:	9b01      	ldr	r3, [sp, #4]
 8009d9a:	61a3      	str	r3, [r4, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bf14      	ite	ne
 8009da0:	2202      	movne	r2, #2
 8009da2:	2201      	moveq	r2, #1
 8009da4:	6122      	str	r2, [r4, #16]
 8009da6:	b1bd      	cbz	r5, 8009dd8 <__d2b+0x94>
 8009da8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dac:	4405      	add	r5, r0
 8009dae:	603d      	str	r5, [r7, #0]
 8009db0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009db4:	6030      	str	r0, [r6, #0]
 8009db6:	4620      	mov	r0, r4
 8009db8:	b003      	add	sp, #12
 8009dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc2:	e7d6      	b.n	8009d72 <__d2b+0x2e>
 8009dc4:	6161      	str	r1, [r4, #20]
 8009dc6:	e7e7      	b.n	8009d98 <__d2b+0x54>
 8009dc8:	a801      	add	r0, sp, #4
 8009dca:	f7ff fd61 	bl	8009890 <__lo0bits>
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	6163      	str	r3, [r4, #20]
 8009dd2:	3020      	adds	r0, #32
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	e7e5      	b.n	8009da4 <__d2b+0x60>
 8009dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009de0:	6038      	str	r0, [r7, #0]
 8009de2:	6918      	ldr	r0, [r3, #16]
 8009de4:	f7ff fd34 	bl	8009850 <__hi0bits>
 8009de8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dec:	e7e2      	b.n	8009db4 <__d2b+0x70>
 8009dee:	bf00      	nop
 8009df0:	0800a75a 	.word	0x0800a75a
 8009df4:	0800a76b 	.word	0x0800a76b

08009df8 <__ascii_wctomb>:
 8009df8:	b149      	cbz	r1, 8009e0e <__ascii_wctomb+0x16>
 8009dfa:	2aff      	cmp	r2, #255	; 0xff
 8009dfc:	bf85      	ittet	hi
 8009dfe:	238a      	movhi	r3, #138	; 0x8a
 8009e00:	6003      	strhi	r3, [r0, #0]
 8009e02:	700a      	strbls	r2, [r1, #0]
 8009e04:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e08:	bf98      	it	ls
 8009e0a:	2001      	movls	r0, #1
 8009e0c:	4770      	bx	lr
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4770      	bx	lr
	...

08009e14 <__sflush_r>:
 8009e14:	898a      	ldrh	r2, [r1, #12]
 8009e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	0710      	lsls	r0, r2, #28
 8009e1e:	460c      	mov	r4, r1
 8009e20:	d458      	bmi.n	8009ed4 <__sflush_r+0xc0>
 8009e22:	684b      	ldr	r3, [r1, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dc05      	bgt.n	8009e34 <__sflush_r+0x20>
 8009e28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dc02      	bgt.n	8009e34 <__sflush_r+0x20>
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	d0f9      	beq.n	8009e2e <__sflush_r+0x1a>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e40:	682f      	ldr	r7, [r5, #0]
 8009e42:	6a21      	ldr	r1, [r4, #32]
 8009e44:	602b      	str	r3, [r5, #0]
 8009e46:	d032      	beq.n	8009eae <__sflush_r+0x9a>
 8009e48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	075a      	lsls	r2, r3, #29
 8009e4e:	d505      	bpl.n	8009e5c <__sflush_r+0x48>
 8009e50:	6863      	ldr	r3, [r4, #4]
 8009e52:	1ac0      	subs	r0, r0, r3
 8009e54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e56:	b10b      	cbz	r3, 8009e5c <__sflush_r+0x48>
 8009e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e5a:	1ac0      	subs	r0, r0, r3
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4602      	mov	r2, r0
 8009e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e62:	6a21      	ldr	r1, [r4, #32]
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	d106      	bne.n	8009e7c <__sflush_r+0x68>
 8009e6e:	6829      	ldr	r1, [r5, #0]
 8009e70:	291d      	cmp	r1, #29
 8009e72:	d82b      	bhi.n	8009ecc <__sflush_r+0xb8>
 8009e74:	4a29      	ldr	r2, [pc, #164]	; (8009f1c <__sflush_r+0x108>)
 8009e76:	410a      	asrs	r2, r1
 8009e78:	07d6      	lsls	r6, r2, #31
 8009e7a:	d427      	bmi.n	8009ecc <__sflush_r+0xb8>
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	6062      	str	r2, [r4, #4]
 8009e80:	04d9      	lsls	r1, r3, #19
 8009e82:	6922      	ldr	r2, [r4, #16]
 8009e84:	6022      	str	r2, [r4, #0]
 8009e86:	d504      	bpl.n	8009e92 <__sflush_r+0x7e>
 8009e88:	1c42      	adds	r2, r0, #1
 8009e8a:	d101      	bne.n	8009e90 <__sflush_r+0x7c>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b903      	cbnz	r3, 8009e92 <__sflush_r+0x7e>
 8009e90:	6560      	str	r0, [r4, #84]	; 0x54
 8009e92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e94:	602f      	str	r7, [r5, #0]
 8009e96:	2900      	cmp	r1, #0
 8009e98:	d0c9      	beq.n	8009e2e <__sflush_r+0x1a>
 8009e9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e9e:	4299      	cmp	r1, r3
 8009ea0:	d002      	beq.n	8009ea8 <__sflush_r+0x94>
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f7ff fb1a 	bl	80094dc <_free_r>
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	6360      	str	r0, [r4, #52]	; 0x34
 8009eac:	e7c0      	b.n	8009e30 <__sflush_r+0x1c>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b0      	blx	r6
 8009eb4:	1c41      	adds	r1, r0, #1
 8009eb6:	d1c8      	bne.n	8009e4a <__sflush_r+0x36>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0c5      	beq.n	8009e4a <__sflush_r+0x36>
 8009ebe:	2b1d      	cmp	r3, #29
 8009ec0:	d001      	beq.n	8009ec6 <__sflush_r+0xb2>
 8009ec2:	2b16      	cmp	r3, #22
 8009ec4:	d101      	bne.n	8009eca <__sflush_r+0xb6>
 8009ec6:	602f      	str	r7, [r5, #0]
 8009ec8:	e7b1      	b.n	8009e2e <__sflush_r+0x1a>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	e7ad      	b.n	8009e30 <__sflush_r+0x1c>
 8009ed4:	690f      	ldr	r7, [r1, #16]
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	d0a9      	beq.n	8009e2e <__sflush_r+0x1a>
 8009eda:	0793      	lsls	r3, r2, #30
 8009edc:	680e      	ldr	r6, [r1, #0]
 8009ede:	bf08      	it	eq
 8009ee0:	694b      	ldreq	r3, [r1, #20]
 8009ee2:	600f      	str	r7, [r1, #0]
 8009ee4:	bf18      	it	ne
 8009ee6:	2300      	movne	r3, #0
 8009ee8:	eba6 0807 	sub.w	r8, r6, r7
 8009eec:	608b      	str	r3, [r1, #8]
 8009eee:	f1b8 0f00 	cmp.w	r8, #0
 8009ef2:	dd9c      	ble.n	8009e2e <__sflush_r+0x1a>
 8009ef4:	6a21      	ldr	r1, [r4, #32]
 8009ef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ef8:	4643      	mov	r3, r8
 8009efa:	463a      	mov	r2, r7
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b0      	blx	r6
 8009f00:	2800      	cmp	r0, #0
 8009f02:	dc06      	bgt.n	8009f12 <__sflush_r+0xfe>
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	e78e      	b.n	8009e30 <__sflush_r+0x1c>
 8009f12:	4407      	add	r7, r0
 8009f14:	eba8 0800 	sub.w	r8, r8, r0
 8009f18:	e7e9      	b.n	8009eee <__sflush_r+0xda>
 8009f1a:	bf00      	nop
 8009f1c:	dfbffffe 	.word	0xdfbffffe

08009f20 <_fflush_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	690b      	ldr	r3, [r1, #16]
 8009f24:	4605      	mov	r5, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	b913      	cbnz	r3, 8009f30 <_fflush_r+0x10>
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	b118      	cbz	r0, 8009f3a <_fflush_r+0x1a>
 8009f32:	6a03      	ldr	r3, [r0, #32]
 8009f34:	b90b      	cbnz	r3, 8009f3a <_fflush_r+0x1a>
 8009f36:	f7fe fb1f 	bl	8008578 <__sinit>
 8009f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0f3      	beq.n	8009f2a <_fflush_r+0xa>
 8009f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f44:	07d0      	lsls	r0, r2, #31
 8009f46:	d404      	bmi.n	8009f52 <_fflush_r+0x32>
 8009f48:	0599      	lsls	r1, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_fflush_r+0x32>
 8009f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f4e:	f7fe fc1b 	bl	8008788 <__retarget_lock_acquire_recursive>
 8009f52:	4628      	mov	r0, r5
 8009f54:	4621      	mov	r1, r4
 8009f56:	f7ff ff5d 	bl	8009e14 <__sflush_r>
 8009f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f5c:	07da      	lsls	r2, r3, #31
 8009f5e:	4605      	mov	r5, r0
 8009f60:	d4e4      	bmi.n	8009f2c <_fflush_r+0xc>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	059b      	lsls	r3, r3, #22
 8009f66:	d4e1      	bmi.n	8009f2c <_fflush_r+0xc>
 8009f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f6a:	f7fe fc0e 	bl	800878a <__retarget_lock_release_recursive>
 8009f6e:	e7dd      	b.n	8009f2c <_fflush_r+0xc>

08009f70 <fiprintf>:
 8009f70:	b40e      	push	{r1, r2, r3}
 8009f72:	b503      	push	{r0, r1, lr}
 8009f74:	4601      	mov	r1, r0
 8009f76:	ab03      	add	r3, sp, #12
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <fiprintf+0x20>)
 8009f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7e:	6800      	ldr	r0, [r0, #0]
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	f000 f85d 	bl	800a040 <_vfiprintf_r>
 8009f86:	b002      	add	sp, #8
 8009f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	4770      	bx	lr
 8009f90:	200001e8 	.word	0x200001e8

08009f94 <_sbrk_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d06      	ldr	r5, [pc, #24]	; (8009fb0 <_sbrk_r+0x1c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	f7f7 fb92 	bl	80016c8 <_sbrk>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_sbrk_r+0x1a>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_sbrk_r+0x1a>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20000528 	.word	0x20000528

08009fb4 <abort>:
 8009fb4:	b508      	push	{r3, lr}
 8009fb6:	2006      	movs	r0, #6
 8009fb8:	f000 fa1a 	bl	800a3f0 <raise>
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f7f7 fb0b 	bl	80015d8 <_exit>

08009fc2 <_calloc_r>:
 8009fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fc4:	fba1 2402 	umull	r2, r4, r1, r2
 8009fc8:	b94c      	cbnz	r4, 8009fde <_calloc_r+0x1c>
 8009fca:	4611      	mov	r1, r2
 8009fcc:	9201      	str	r2, [sp, #4]
 8009fce:	f7ff faf9 	bl	80095c4 <_malloc_r>
 8009fd2:	9a01      	ldr	r2, [sp, #4]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	b930      	cbnz	r0, 8009fe6 <_calloc_r+0x24>
 8009fd8:	4628      	mov	r0, r5
 8009fda:	b003      	add	sp, #12
 8009fdc:	bd30      	pop	{r4, r5, pc}
 8009fde:	220c      	movs	r2, #12
 8009fe0:	6002      	str	r2, [r0, #0]
 8009fe2:	2500      	movs	r5, #0
 8009fe4:	e7f8      	b.n	8009fd8 <_calloc_r+0x16>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	f7fe fb3f 	bl	800866a <memset>
 8009fec:	e7f4      	b.n	8009fd8 <_calloc_r+0x16>

08009fee <__sfputc_r>:
 8009fee:	6893      	ldr	r3, [r2, #8]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	b410      	push	{r4}
 8009ff6:	6093      	str	r3, [r2, #8]
 8009ff8:	da08      	bge.n	800a00c <__sfputc_r+0x1e>
 8009ffa:	6994      	ldr	r4, [r2, #24]
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	db01      	blt.n	800a004 <__sfputc_r+0x16>
 800a000:	290a      	cmp	r1, #10
 800a002:	d103      	bne.n	800a00c <__sfputc_r+0x1e>
 800a004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a008:	f000 b934 	b.w	800a274 <__swbuf_r>
 800a00c:	6813      	ldr	r3, [r2, #0]
 800a00e:	1c58      	adds	r0, r3, #1
 800a010:	6010      	str	r0, [r2, #0]
 800a012:	7019      	strb	r1, [r3, #0]
 800a014:	4608      	mov	r0, r1
 800a016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <__sfputs_r>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	4606      	mov	r6, r0
 800a020:	460f      	mov	r7, r1
 800a022:	4614      	mov	r4, r2
 800a024:	18d5      	adds	r5, r2, r3
 800a026:	42ac      	cmp	r4, r5
 800a028:	d101      	bne.n	800a02e <__sfputs_r+0x12>
 800a02a:	2000      	movs	r0, #0
 800a02c:	e007      	b.n	800a03e <__sfputs_r+0x22>
 800a02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a032:	463a      	mov	r2, r7
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff ffda 	bl	8009fee <__sfputc_r>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d1f3      	bne.n	800a026 <__sfputs_r+0xa>
 800a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a040 <_vfiprintf_r>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	460d      	mov	r5, r1
 800a046:	b09d      	sub	sp, #116	; 0x74
 800a048:	4614      	mov	r4, r2
 800a04a:	4698      	mov	r8, r3
 800a04c:	4606      	mov	r6, r0
 800a04e:	b118      	cbz	r0, 800a058 <_vfiprintf_r+0x18>
 800a050:	6a03      	ldr	r3, [r0, #32]
 800a052:	b90b      	cbnz	r3, 800a058 <_vfiprintf_r+0x18>
 800a054:	f7fe fa90 	bl	8008578 <__sinit>
 800a058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05a:	07d9      	lsls	r1, r3, #31
 800a05c:	d405      	bmi.n	800a06a <_vfiprintf_r+0x2a>
 800a05e:	89ab      	ldrh	r3, [r5, #12]
 800a060:	059a      	lsls	r2, r3, #22
 800a062:	d402      	bmi.n	800a06a <_vfiprintf_r+0x2a>
 800a064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a066:	f7fe fb8f 	bl	8008788 <__retarget_lock_acquire_recursive>
 800a06a:	89ab      	ldrh	r3, [r5, #12]
 800a06c:	071b      	lsls	r3, r3, #28
 800a06e:	d501      	bpl.n	800a074 <_vfiprintf_r+0x34>
 800a070:	692b      	ldr	r3, [r5, #16]
 800a072:	b99b      	cbnz	r3, 800a09c <_vfiprintf_r+0x5c>
 800a074:	4629      	mov	r1, r5
 800a076:	4630      	mov	r0, r6
 800a078:	f000 f93a 	bl	800a2f0 <__swsetup_r>
 800a07c:	b170      	cbz	r0, 800a09c <_vfiprintf_r+0x5c>
 800a07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a080:	07dc      	lsls	r4, r3, #31
 800a082:	d504      	bpl.n	800a08e <_vfiprintf_r+0x4e>
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	b01d      	add	sp, #116	; 0x74
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	89ab      	ldrh	r3, [r5, #12]
 800a090:	0598      	lsls	r0, r3, #22
 800a092:	d4f7      	bmi.n	800a084 <_vfiprintf_r+0x44>
 800a094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a096:	f7fe fb78 	bl	800878a <__retarget_lock_release_recursive>
 800a09a:	e7f3      	b.n	800a084 <_vfiprintf_r+0x44>
 800a09c:	2300      	movs	r3, #0
 800a09e:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0aa:	2330      	movs	r3, #48	; 0x30
 800a0ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a260 <_vfiprintf_r+0x220>
 800a0b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0b4:	f04f 0901 	mov.w	r9, #1
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	469a      	mov	sl, r3
 800a0bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c0:	b10a      	cbz	r2, 800a0c6 <_vfiprintf_r+0x86>
 800a0c2:	2a25      	cmp	r2, #37	; 0x25
 800a0c4:	d1f9      	bne.n	800a0ba <_vfiprintf_r+0x7a>
 800a0c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ca:	d00b      	beq.n	800a0e4 <_vfiprintf_r+0xa4>
 800a0cc:	465b      	mov	r3, fp
 800a0ce:	4622      	mov	r2, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ffa2 	bl	800a01c <__sfputs_r>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f000 80a9 	beq.w	800a230 <_vfiprintf_r+0x1f0>
 800a0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e0:	445a      	add	r2, fp
 800a0e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 80a1 	beq.w	800a230 <_vfiprintf_r+0x1f0>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0f8:	f10a 0a01 	add.w	sl, sl, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a104:	931a      	str	r3, [sp, #104]	; 0x68
 800a106:	4654      	mov	r4, sl
 800a108:	2205      	movs	r2, #5
 800a10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10e:	4854      	ldr	r0, [pc, #336]	; (800a260 <_vfiprintf_r+0x220>)
 800a110:	f7f6 f85e 	bl	80001d0 <memchr>
 800a114:	9a04      	ldr	r2, [sp, #16]
 800a116:	b9d8      	cbnz	r0, 800a150 <_vfiprintf_r+0x110>
 800a118:	06d1      	lsls	r1, r2, #27
 800a11a:	bf44      	itt	mi
 800a11c:	2320      	movmi	r3, #32
 800a11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a122:	0713      	lsls	r3, r2, #28
 800a124:	bf44      	itt	mi
 800a126:	232b      	movmi	r3, #43	; 0x2b
 800a128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a12c:	f89a 3000 	ldrb.w	r3, [sl]
 800a130:	2b2a      	cmp	r3, #42	; 0x2a
 800a132:	d015      	beq.n	800a160 <_vfiprintf_r+0x120>
 800a134:	9a07      	ldr	r2, [sp, #28]
 800a136:	4654      	mov	r4, sl
 800a138:	2000      	movs	r0, #0
 800a13a:	f04f 0c0a 	mov.w	ip, #10
 800a13e:	4621      	mov	r1, r4
 800a140:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a144:	3b30      	subs	r3, #48	; 0x30
 800a146:	2b09      	cmp	r3, #9
 800a148:	d94d      	bls.n	800a1e6 <_vfiprintf_r+0x1a6>
 800a14a:	b1b0      	cbz	r0, 800a17a <_vfiprintf_r+0x13a>
 800a14c:	9207      	str	r2, [sp, #28]
 800a14e:	e014      	b.n	800a17a <_vfiprintf_r+0x13a>
 800a150:	eba0 0308 	sub.w	r3, r0, r8
 800a154:	fa09 f303 	lsl.w	r3, r9, r3
 800a158:	4313      	orrs	r3, r2
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	46a2      	mov	sl, r4
 800a15e:	e7d2      	b.n	800a106 <_vfiprintf_r+0xc6>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	1d19      	adds	r1, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	9103      	str	r1, [sp, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfbb      	ittet	lt
 800a16c:	425b      	neglt	r3, r3
 800a16e:	f042 0202 	orrlt.w	r2, r2, #2
 800a172:	9307      	strge	r3, [sp, #28]
 800a174:	9307      	strlt	r3, [sp, #28]
 800a176:	bfb8      	it	lt
 800a178:	9204      	strlt	r2, [sp, #16]
 800a17a:	7823      	ldrb	r3, [r4, #0]
 800a17c:	2b2e      	cmp	r3, #46	; 0x2e
 800a17e:	d10c      	bne.n	800a19a <_vfiprintf_r+0x15a>
 800a180:	7863      	ldrb	r3, [r4, #1]
 800a182:	2b2a      	cmp	r3, #42	; 0x2a
 800a184:	d134      	bne.n	800a1f0 <_vfiprintf_r+0x1b0>
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	1d1a      	adds	r2, r3, #4
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	9203      	str	r2, [sp, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bfb8      	it	lt
 800a192:	f04f 33ff 	movlt.w	r3, #4294967295
 800a196:	3402      	adds	r4, #2
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a270 <_vfiprintf_r+0x230>
 800a19e:	7821      	ldrb	r1, [r4, #0]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f7f6 f814 	bl	80001d0 <memchr>
 800a1a8:	b138      	cbz	r0, 800a1ba <_vfiprintf_r+0x17a>
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	eba0 000a 	sub.w	r0, r0, sl
 800a1b0:	2240      	movs	r2, #64	; 0x40
 800a1b2:	4082      	lsls	r2, r0
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	4829      	ldr	r0, [pc, #164]	; (800a264 <_vfiprintf_r+0x224>)
 800a1c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1c4:	2206      	movs	r2, #6
 800a1c6:	f7f6 f803 	bl	80001d0 <memchr>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d03f      	beq.n	800a24e <_vfiprintf_r+0x20e>
 800a1ce:	4b26      	ldr	r3, [pc, #152]	; (800a268 <_vfiprintf_r+0x228>)
 800a1d0:	bb1b      	cbnz	r3, 800a21a <_vfiprintf_r+0x1da>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	3307      	adds	r3, #7
 800a1d6:	f023 0307 	bic.w	r3, r3, #7
 800a1da:	3308      	adds	r3, #8
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e0:	443b      	add	r3, r7
 800a1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e4:	e768      	b.n	800a0b8 <_vfiprintf_r+0x78>
 800a1e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	e7a6      	b.n	800a13e <_vfiprintf_r+0xfe>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	3401      	adds	r4, #1
 800a1f4:	9305      	str	r3, [sp, #20]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	f04f 0c0a 	mov.w	ip, #10
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a202:	3a30      	subs	r2, #48	; 0x30
 800a204:	2a09      	cmp	r2, #9
 800a206:	d903      	bls.n	800a210 <_vfiprintf_r+0x1d0>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0c6      	beq.n	800a19a <_vfiprintf_r+0x15a>
 800a20c:	9105      	str	r1, [sp, #20]
 800a20e:	e7c4      	b.n	800a19a <_vfiprintf_r+0x15a>
 800a210:	fb0c 2101 	mla	r1, ip, r1, r2
 800a214:	4604      	mov	r4, r0
 800a216:	2301      	movs	r3, #1
 800a218:	e7f0      	b.n	800a1fc <_vfiprintf_r+0x1bc>
 800a21a:	ab03      	add	r3, sp, #12
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	462a      	mov	r2, r5
 800a220:	4b12      	ldr	r3, [pc, #72]	; (800a26c <_vfiprintf_r+0x22c>)
 800a222:	a904      	add	r1, sp, #16
 800a224:	4630      	mov	r0, r6
 800a226:	f7fd fd67 	bl	8007cf8 <_printf_float>
 800a22a:	4607      	mov	r7, r0
 800a22c:	1c78      	adds	r0, r7, #1
 800a22e:	d1d6      	bne.n	800a1de <_vfiprintf_r+0x19e>
 800a230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a232:	07d9      	lsls	r1, r3, #31
 800a234:	d405      	bmi.n	800a242 <_vfiprintf_r+0x202>
 800a236:	89ab      	ldrh	r3, [r5, #12]
 800a238:	059a      	lsls	r2, r3, #22
 800a23a:	d402      	bmi.n	800a242 <_vfiprintf_r+0x202>
 800a23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a23e:	f7fe faa4 	bl	800878a <__retarget_lock_release_recursive>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	065b      	lsls	r3, r3, #25
 800a246:	f53f af1d 	bmi.w	800a084 <_vfiprintf_r+0x44>
 800a24a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a24c:	e71c      	b.n	800a088 <_vfiprintf_r+0x48>
 800a24e:	ab03      	add	r3, sp, #12
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	462a      	mov	r2, r5
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <_vfiprintf_r+0x22c>)
 800a256:	a904      	add	r1, sp, #16
 800a258:	4630      	mov	r0, r6
 800a25a:	f7fd fff1 	bl	8008240 <_printf_i>
 800a25e:	e7e4      	b.n	800a22a <_vfiprintf_r+0x1ea>
 800a260:	0800a9c5 	.word	0x0800a9c5
 800a264:	0800a9cf 	.word	0x0800a9cf
 800a268:	08007cf9 	.word	0x08007cf9
 800a26c:	0800a01d 	.word	0x0800a01d
 800a270:	0800a9cb 	.word	0x0800a9cb

0800a274 <__swbuf_r>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	460e      	mov	r6, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	4605      	mov	r5, r0
 800a27c:	b118      	cbz	r0, 800a286 <__swbuf_r+0x12>
 800a27e:	6a03      	ldr	r3, [r0, #32]
 800a280:	b90b      	cbnz	r3, 800a286 <__swbuf_r+0x12>
 800a282:	f7fe f979 	bl	8008578 <__sinit>
 800a286:	69a3      	ldr	r3, [r4, #24]
 800a288:	60a3      	str	r3, [r4, #8]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	071a      	lsls	r2, r3, #28
 800a28e:	d525      	bpl.n	800a2dc <__swbuf_r+0x68>
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	b31b      	cbz	r3, 800a2dc <__swbuf_r+0x68>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	1a98      	subs	r0, r3, r2
 800a29a:	6963      	ldr	r3, [r4, #20]
 800a29c:	b2f6      	uxtb	r6, r6
 800a29e:	4283      	cmp	r3, r0
 800a2a0:	4637      	mov	r7, r6
 800a2a2:	dc04      	bgt.n	800a2ae <__swbuf_r+0x3a>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f7ff fe3a 	bl	8009f20 <_fflush_r>
 800a2ac:	b9e0      	cbnz	r0, 800a2e8 <__swbuf_r+0x74>
 800a2ae:	68a3      	ldr	r3, [r4, #8]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	60a3      	str	r3, [r4, #8]
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	6022      	str	r2, [r4, #0]
 800a2ba:	701e      	strb	r6, [r3, #0]
 800a2bc:	6962      	ldr	r2, [r4, #20]
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d004      	beq.n	800a2ce <__swbuf_r+0x5a>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	07db      	lsls	r3, r3, #31
 800a2c8:	d506      	bpl.n	800a2d8 <__swbuf_r+0x64>
 800a2ca:	2e0a      	cmp	r6, #10
 800a2cc:	d104      	bne.n	800a2d8 <__swbuf_r+0x64>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f7ff fe25 	bl	8009f20 <_fflush_r>
 800a2d6:	b938      	cbnz	r0, 800a2e8 <__swbuf_r+0x74>
 800a2d8:	4638      	mov	r0, r7
 800a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 f806 	bl	800a2f0 <__swsetup_r>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d0d5      	beq.n	800a294 <__swbuf_r+0x20>
 800a2e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ec:	e7f4      	b.n	800a2d8 <__swbuf_r+0x64>
	...

0800a2f0 <__swsetup_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4b2a      	ldr	r3, [pc, #168]	; (800a39c <__swsetup_r+0xac>)
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	b118      	cbz	r0, 800a304 <__swsetup_r+0x14>
 800a2fc:	6a03      	ldr	r3, [r0, #32]
 800a2fe:	b90b      	cbnz	r3, 800a304 <__swsetup_r+0x14>
 800a300:	f7fe f93a 	bl	8008578 <__sinit>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30a:	0718      	lsls	r0, r3, #28
 800a30c:	d422      	bmi.n	800a354 <__swsetup_r+0x64>
 800a30e:	06d9      	lsls	r1, r3, #27
 800a310:	d407      	bmi.n	800a322 <__swsetup_r+0x32>
 800a312:	2309      	movs	r3, #9
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	e034      	b.n	800a38c <__swsetup_r+0x9c>
 800a322:	0758      	lsls	r0, r3, #29
 800a324:	d512      	bpl.n	800a34c <__swsetup_r+0x5c>
 800a326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a328:	b141      	cbz	r1, 800a33c <__swsetup_r+0x4c>
 800a32a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a32e:	4299      	cmp	r1, r3
 800a330:	d002      	beq.n	800a338 <__swsetup_r+0x48>
 800a332:	4628      	mov	r0, r5
 800a334:	f7ff f8d2 	bl	80094dc <_free_r>
 800a338:	2300      	movs	r3, #0
 800a33a:	6363      	str	r3, [r4, #52]	; 0x34
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	2300      	movs	r3, #0
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	6023      	str	r3, [r4, #0]
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	f043 0308 	orr.w	r3, r3, #8
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	6923      	ldr	r3, [r4, #16]
 800a356:	b94b      	cbnz	r3, 800a36c <__swsetup_r+0x7c>
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a35e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a362:	d003      	beq.n	800a36c <__swsetup_r+0x7c>
 800a364:	4621      	mov	r1, r4
 800a366:	4628      	mov	r0, r5
 800a368:	f000 f884 	bl	800a474 <__smakebuf_r>
 800a36c:	89a0      	ldrh	r0, [r4, #12]
 800a36e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a372:	f010 0301 	ands.w	r3, r0, #1
 800a376:	d00a      	beq.n	800a38e <__swsetup_r+0x9e>
 800a378:	2300      	movs	r3, #0
 800a37a:	60a3      	str	r3, [r4, #8]
 800a37c:	6963      	ldr	r3, [r4, #20]
 800a37e:	425b      	negs	r3, r3
 800a380:	61a3      	str	r3, [r4, #24]
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	b943      	cbnz	r3, 800a398 <__swsetup_r+0xa8>
 800a386:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a38a:	d1c4      	bne.n	800a316 <__swsetup_r+0x26>
 800a38c:	bd38      	pop	{r3, r4, r5, pc}
 800a38e:	0781      	lsls	r1, r0, #30
 800a390:	bf58      	it	pl
 800a392:	6963      	ldrpl	r3, [r4, #20]
 800a394:	60a3      	str	r3, [r4, #8]
 800a396:	e7f4      	b.n	800a382 <__swsetup_r+0x92>
 800a398:	2000      	movs	r0, #0
 800a39a:	e7f7      	b.n	800a38c <__swsetup_r+0x9c>
 800a39c:	200001e8 	.word	0x200001e8

0800a3a0 <_raise_r>:
 800a3a0:	291f      	cmp	r1, #31
 800a3a2:	b538      	push	{r3, r4, r5, lr}
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	d904      	bls.n	800a3b4 <_raise_r+0x14>
 800a3aa:	2316      	movs	r3, #22
 800a3ac:	6003      	str	r3, [r0, #0]
 800a3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a3b6:	b112      	cbz	r2, 800a3be <_raise_r+0x1e>
 800a3b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3bc:	b94b      	cbnz	r3, 800a3d2 <_raise_r+0x32>
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f000 f830 	bl	800a424 <_getpid_r>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4601      	mov	r1, r0
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ce:	f000 b817 	b.w	800a400 <_kill_r>
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d00a      	beq.n	800a3ec <_raise_r+0x4c>
 800a3d6:	1c59      	adds	r1, r3, #1
 800a3d8:	d103      	bne.n	800a3e2 <_raise_r+0x42>
 800a3da:	2316      	movs	r3, #22
 800a3dc:	6003      	str	r3, [r0, #0]
 800a3de:	2001      	movs	r0, #1
 800a3e0:	e7e7      	b.n	800a3b2 <_raise_r+0x12>
 800a3e2:	2400      	movs	r4, #0
 800a3e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	4798      	blx	r3
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	e7e0      	b.n	800a3b2 <_raise_r+0x12>

0800a3f0 <raise>:
 800a3f0:	4b02      	ldr	r3, [pc, #8]	; (800a3fc <raise+0xc>)
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	f7ff bfd3 	b.w	800a3a0 <_raise_r>
 800a3fa:	bf00      	nop
 800a3fc:	200001e8 	.word	0x200001e8

0800a400 <_kill_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	; (800a420 <_kill_r+0x20>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	f7f7 f8d3 	bl	80015b8 <_kill>
 800a412:	1c43      	adds	r3, r0, #1
 800a414:	d102      	bne.n	800a41c <_kill_r+0x1c>
 800a416:	682b      	ldr	r3, [r5, #0]
 800a418:	b103      	cbz	r3, 800a41c <_kill_r+0x1c>
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	bf00      	nop
 800a420:	20000528 	.word	0x20000528

0800a424 <_getpid_r>:
 800a424:	f7f7 b8c0 	b.w	80015a8 <_getpid>

0800a428 <__swhatbuf_r>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	2900      	cmp	r1, #0
 800a432:	b096      	sub	sp, #88	; 0x58
 800a434:	4615      	mov	r5, r2
 800a436:	461e      	mov	r6, r3
 800a438:	da0d      	bge.n	800a456 <__swhatbuf_r+0x2e>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a440:	f04f 0100 	mov.w	r1, #0
 800a444:	bf0c      	ite	eq
 800a446:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a44a:	2340      	movne	r3, #64	; 0x40
 800a44c:	2000      	movs	r0, #0
 800a44e:	6031      	str	r1, [r6, #0]
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	b016      	add	sp, #88	; 0x58
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	466a      	mov	r2, sp
 800a458:	f000 f848 	bl	800a4ec <_fstat_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dbec      	blt.n	800a43a <__swhatbuf_r+0x12>
 800a460:	9901      	ldr	r1, [sp, #4]
 800a462:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a466:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a46a:	4259      	negs	r1, r3
 800a46c:	4159      	adcs	r1, r3
 800a46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a472:	e7eb      	b.n	800a44c <__swhatbuf_r+0x24>

0800a474 <__smakebuf_r>:
 800a474:	898b      	ldrh	r3, [r1, #12]
 800a476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a478:	079d      	lsls	r5, r3, #30
 800a47a:	4606      	mov	r6, r0
 800a47c:	460c      	mov	r4, r1
 800a47e:	d507      	bpl.n	800a490 <__smakebuf_r+0x1c>
 800a480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	6123      	str	r3, [r4, #16]
 800a488:	2301      	movs	r3, #1
 800a48a:	6163      	str	r3, [r4, #20]
 800a48c:	b002      	add	sp, #8
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	ab01      	add	r3, sp, #4
 800a492:	466a      	mov	r2, sp
 800a494:	f7ff ffc8 	bl	800a428 <__swhatbuf_r>
 800a498:	9900      	ldr	r1, [sp, #0]
 800a49a:	4605      	mov	r5, r0
 800a49c:	4630      	mov	r0, r6
 800a49e:	f7ff f891 	bl	80095c4 <_malloc_r>
 800a4a2:	b948      	cbnz	r0, 800a4b8 <__smakebuf_r+0x44>
 800a4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a8:	059a      	lsls	r2, r3, #22
 800a4aa:	d4ef      	bmi.n	800a48c <__smakebuf_r+0x18>
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	f043 0302 	orr.w	r3, r3, #2
 800a4b4:	81a3      	strh	r3, [r4, #12]
 800a4b6:	e7e3      	b.n	800a480 <__smakebuf_r+0xc>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	6020      	str	r0, [r4, #0]
 800a4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	9b00      	ldr	r3, [sp, #0]
 800a4c4:	6163      	str	r3, [r4, #20]
 800a4c6:	9b01      	ldr	r3, [sp, #4]
 800a4c8:	6120      	str	r0, [r4, #16]
 800a4ca:	b15b      	cbz	r3, 800a4e4 <__smakebuf_r+0x70>
 800a4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 f81d 	bl	800a510 <_isatty_r>
 800a4d6:	b128      	cbz	r0, 800a4e4 <__smakebuf_r+0x70>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	431d      	orrs	r5, r3
 800a4e8:	81a5      	strh	r5, [r4, #12]
 800a4ea:	e7cf      	b.n	800a48c <__smakebuf_r+0x18>

0800a4ec <_fstat_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_fstat_r+0x20>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	602b      	str	r3, [r5, #0]
 800a4fa:	f7f7 f8bc 	bl	8001676 <_fstat>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	d102      	bne.n	800a508 <_fstat_r+0x1c>
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	b103      	cbz	r3, 800a508 <_fstat_r+0x1c>
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	bd38      	pop	{r3, r4, r5, pc}
 800a50a:	bf00      	nop
 800a50c:	20000528 	.word	0x20000528

0800a510 <_isatty_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d06      	ldr	r5, [pc, #24]	; (800a52c <_isatty_r+0x1c>)
 800a514:	2300      	movs	r3, #0
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	f7f7 f8bb 	bl	8001696 <_isatty>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_isatty_r+0x1a>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_isatty_r+0x1a>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20000528 	.word	0x20000528

0800a530 <_init>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr

0800a53c <_fini>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr
