
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e54  08003e54  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e5c  08003e5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  08003ecc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08003ecc  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a56e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d1  00000000  00000000  0002a649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070d  00000000  00000000  0002c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0dd  00000000  00000000  0002d075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aaa1  00000000  00000000  00047152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a04bc  00000000  00000000  00051bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c28  00000000  00000000  000f20b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f4cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003db8 	.word	0x08003db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003db8 	.word	0x08003db8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0a0      	sub	sp, #128	; 0x80
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb53 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f84b 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8f9 	bl	8000770 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f897 	bl	80006b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8c5 	bl	8000710 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1, nmea_sentance, 128, 1000);
 8000586:	4639      	mov	r1, r7
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0x44>)
 8000590:	f001 ffb6 	bl	8002500 <HAL_UART_Receive>
	  printf("%s\n\r",nmea_sentance);
 8000594:	463b      	mov	r3, r7
 8000596:	4619      	mov	r1, r3
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x48>)
 800059a:	f002 fd9b 	bl	80030d4 <iprintf>
	  //printf("HUHHH\n\r");
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <main+0x4c>)
 80005a4:	f000 fe4a 	bl	800123c <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80005a8:	20fa      	movs	r0, #250	; 0xfa
 80005aa:	f000 fbb3 	bl	8000d14 <HAL_Delay>
	  HAL_UART_Receive(&huart1, nmea_sentance, 128, 1000);
 80005ae:	e7ea      	b.n	8000586 <main+0x1a>
 80005b0:	20000084 	.word	0x20000084
 80005b4:	08003dd0 	.word	0x08003dd0
 80005b8:	48000400 	.word	0x48000400

080005bc <__io_putchar>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
int __io_putchar(int ch)
    {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
            HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <__io_putchar+0x20>)
 80005ce:	f001 ff0d 	bl	80023ec <HAL_UART_Transmit>
            return ch;
 80005d2:	687b      	ldr	r3, [r7, #4]
    }
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000010c 	.word	0x2000010c

080005e0 <__io_getchar>:
    int __io_getchar(void)
    {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
            uint8_t ch = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
            __HAL_UART_CLEAR_OREFLAG(&huart2);
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <__io_getchar+0x2c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2208      	movs	r2, #8
 80005f0:	621a      	str	r2, [r3, #32]
            HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f8:	2201      	movs	r2, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <__io_getchar+0x2c>)
 80005fc:	f001 ff80 	bl	8002500 <HAL_UART_Receive>
            return ch;
 8000600:	79fb      	ldrb	r3, [r7, #7]
    }
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000010c 	.word	0x2000010c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fd6a 	bl	80030f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f000 fe29 	bl	800128c <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f920 	bl	8000884 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000644:	2310      	movs	r3, #16
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	; 0x28
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fe61 	bl	8001338 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800067c:	f000 f902 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f001 faaf 	bl	8001bfc <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 f8ee 	bl	8000884 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	; 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART1_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006f4:	f001 fe2c 	bl	8002350 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f8c1 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000084 	.word	0x20000084
 800070c:	40013800 	.word	0x40013800

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	f001 fdfc 	bl	8002350 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f891 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000010c 	.word	0x2000010c
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_GPIO_Init+0x108>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a3b      	ldr	r2, [pc, #236]	; (8000878 <MX_GPIO_Init+0x108>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <MX_GPIO_Init+0x108>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b36      	ldr	r3, [pc, #216]	; (8000878 <MX_GPIO_Init+0x108>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a35      	ldr	r2, [pc, #212]	; (8000878 <MX_GPIO_Init+0x108>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <MX_GPIO_Init+0x108>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x108>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <MX_GPIO_Init+0x108>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x108>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_GPIO_Init+0x108>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a29      	ldr	r2, [pc, #164]	; (8000878 <MX_GPIO_Init+0x108>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_GPIO_Init+0x108>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	21b0      	movs	r1, #176	; 0xb0
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fd0d 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	4820      	ldr	r0, [pc, #128]	; (800087c <MX_GPIO_Init+0x10c>)
 80007fa:	f000 fd07 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000804:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <MX_GPIO_Init+0x110>)
 8000816:	f000 fb87 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800081a:	23b0      	movs	r3, #176	; 0xb0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f000 fb78 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f000 fb6b 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0x10c>)
 800086c:	f000 fb5c 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400
 8000880:	48000800 	.word	0x48000800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	; 0x60
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b098      	sub	sp, #96	; 0x60
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	2234      	movs	r2, #52	; 0x34
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fbfd 	bl	80030f8 <memset>
  if(huart->Instance==USART1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a3e      	ldr	r2, [pc, #248]	; (80009fc <HAL_UART_MspInit+0x124>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d138      	bne.n	800097a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fb95 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000920:	f7ff ffb0 	bl	8000884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <HAL_UART_MspInit+0x128>)
 8000926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000928:	4a35      	ldr	r2, [pc, #212]	; (8000a00 <HAL_UART_MspInit+0x128>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6613      	str	r3, [r2, #96]	; 0x60
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <HAL_UART_MspInit+0x128>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <HAL_UART_MspInit+0x128>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <HAL_UART_MspInit+0x128>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <HAL_UART_MspInit+0x128>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8000954:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000966:	2307      	movs	r3, #7
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f000 fad8 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000978:	e03b      	b.n	80009f2 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a21      	ldr	r2, [pc, #132]	; (8000a04 <HAL_UART_MspInit+0x12c>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d136      	bne.n	80009f2 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fb57 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800099c:	f7ff ff72 	bl	8000884 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x128>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0x128>)
 80009a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009aa:	6593      	str	r3, [r2, #88]	; 0x58
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0x128>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0x128>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0x128>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0x128>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Print_TX_Pin|Print_RX_Pin;
 80009d0:	230c      	movs	r3, #12
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e0:	2307      	movs	r3, #7
 80009e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f000 fa9b 	bl	8000f28 <HAL_GPIO_Init>
}
 80009f2:	bf00      	nop
 80009f4:	3760      	adds	r7, #96	; 0x60
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40004400 	.word	0x40004400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f93e 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f7ff fdb7 	bl	80005e0 <__io_getchar>
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fd83 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
  }
  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af6:	605a      	str	r2, [r3, #4]
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 face 	bl	8003108 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000a000 	.word	0x2000a000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000194 	.word	0x20000194
 8000ba0:	200002e8 	.word	0x200002e8

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 fa8d 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fcb7 	bl	800056c <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c0c:	08003e64 	.word	0x08003e64
  ldr r2, =_sbss
 8000c10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c14:	200002e8 	.word	0x200002e8

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_Init+0x3c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_Init+0x3c>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f944 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 f80f 	bl	8000c5c <HAL_InitTick>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	e001      	b.n	8000c4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4a:	f7ff fe21 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d023      	beq.n	8000cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_InitTick+0x70>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f941 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10f      	bne.n	8000cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d809      	bhi.n	8000cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca0:	f000 f919 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_InitTick+0x74>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e007      	b.n	8000cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e001      	b.n	8000cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000198 	.word	0x20000198

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000198 	.word	0x20000198

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5c 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e14e      	b.n	80011d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8140 	beq.w	80011d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 809a 	beq.w	80011d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109c:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <HAL_GPIO_Init+0x2cc>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	4a54      	ldr	r2, [pc, #336]	; (80011f4 <HAL_GPIO_Init+0x2cc>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6613      	str	r3, [r2, #96]	; 0x60
 80010a8:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x2cc>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b4:	4a50      	ldr	r2, [pc, #320]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010de:	d013      	beq.n	8001108 <HAL_GPIO_Init+0x1e0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a46      	ldr	r2, [pc, #280]	; (80011fc <HAL_GPIO_Init+0x2d4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d00d      	beq.n	8001104 <HAL_GPIO_Init+0x1dc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a45      	ldr	r2, [pc, #276]	; (8001200 <HAL_GPIO_Init+0x2d8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a44      	ldr	r2, [pc, #272]	; (8001204 <HAL_GPIO_Init+0x2dc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d101      	bne.n	80010fc <HAL_GPIO_Init+0x1d4>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 80010fc:	2307      	movs	r3, #7
 80010fe:	e004      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 8001100:	2302      	movs	r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 8001108:	2300      	movs	r3, #0
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	f002 0203 	and.w	r2, r2, #3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4093      	lsls	r3, r2
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111a:	4937      	ldr	r1, [pc, #220]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001128:	4b37      	ldr	r3, [pc, #220]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800114c:	4a2e      	ldr	r2, [pc, #184]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001176:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x2e0>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f47f aea9 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e002      	b.n	8001230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4013      	ands	r3, r2
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43d9      	mvns	r1, r3
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	400b      	ands	r3, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_PWREx_GetVoltageRange+0x18>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40007000 	.word	0x40007000

0800128c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800129a:	d130      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a8:	d038      	beq.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2232      	movs	r2, #50	; 0x32
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9b      	lsrs	r3, r3, #18
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d0:	e002      	b.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d102      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f2      	bne.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f8:	d110      	bne.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e00f      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130a:	d007      	beq.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000
 8001330:	20000000 	.word	0x20000000
 8001334:	431bde83 	.word	0x431bde83

08001338 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 bc4f 	b.w	8001bea <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134c:	4b97      	ldr	r3, [pc, #604]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001356:	4b95      	ldr	r3, [pc, #596]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80e6 	beq.w	800153a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_RCC_OscConfig+0x4c>
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	f040 808d 	bne.w	8001496 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b01      	cmp	r3, #1
 8001380:	f040 8089 	bne.w	8001496 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001384:	4b89      	ldr	r3, [pc, #548]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_RCC_OscConfig+0x66>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	f000 bc26 	b.w	8001bea <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a2:	4b82      	ldr	r3, [pc, #520]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_RCC_OscConfig+0x80>
 80013ae:	4b7f      	ldr	r3, [pc, #508]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013b6:	e005      	b.n	80013c4 <HAL_RCC_OscConfig+0x8c>
 80013b8:	4b7c      	ldr	r3, [pc, #496]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d224      	bcs.n	8001412 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fdd9 	bl	8001f84 <RCC_SetFlashLatencyFromMSIRange>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	f000 bc06 	b.w	8001bea <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013de:	4b73      	ldr	r3, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a72      	ldr	r2, [pc, #456]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b70      	ldr	r3, [pc, #448]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	496d      	ldr	r1, [pc, #436]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fc:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4968      	ldr	r1, [pc, #416]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
 8001410:	e025      	b.n	800145e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001412:	4b66      	ldr	r3, [pc, #408]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a65      	ldr	r2, [pc, #404]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	4960      	ldr	r1, [pc, #384]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001430:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	495b      	ldr	r1, [pc, #364]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fd98 	bl	8001f84 <RCC_SetFlashLatencyFromMSIRange>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e3c5      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800145e:	f000 fccd 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001462:	4602      	mov	r2, r0
 8001464:	4b51      	ldr	r3, [pc, #324]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	4950      	ldr	r1, [pc, #320]	; (80015b0 <HAL_RCC_OscConfig+0x278>)
 8001470:	5ccb      	ldrb	r3, [r1, r3]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	fa22 f303 	lsr.w	r3, r2, r3
 800147a:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_RCC_OscConfig+0x27c>)
 800147c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800147e:	4b4e      	ldr	r3, [pc, #312]	; (80015b8 <HAL_RCC_OscConfig+0x280>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fbea 	bl	8000c5c <HAL_InitTick>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d052      	beq.n	8001538 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	e3a9      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d032      	beq.n	8001504 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800149e:	4b43      	ldr	r3, [pc, #268]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a42      	ldr	r2, [pc, #264]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc27 	bl	8000cfc <HAL_GetTick>
 80014ae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc23 	bl	8000cfc <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e392      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a35      	ldr	r2, [pc, #212]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	4930      	ldr	r1, [pc, #192]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	492b      	ldr	r1, [pc, #172]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
 8001502:	e01a      	b.n	800153a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001510:	f7ff fbf4 	bl	8000cfc <HAL_GetTick>
 8001514:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f7ff fbf0 	bl	8000cfc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e35f      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1e0>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d073      	beq.n	800162e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	2b08      	cmp	r3, #8
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x220>
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d10e      	bne.n	8001570 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d10b      	bne.n	8001570 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d063      	beq.n	800162c <HAL_RCC_OscConfig+0x2f4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d15f      	bne.n	800162c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e33c      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x250>
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e025      	b.n	80015d4 <HAL_RCC_OscConfig+0x29c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d114      	bne.n	80015bc <HAL_RCC_OscConfig+0x284>
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a02      	ldr	r2, [pc, #8]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e013      	b.n	80015d4 <HAL_RCC_OscConfig+0x29c>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	08003dd8 	.word	0x08003dd8
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004
 80015bc:	4b8f      	ldr	r3, [pc, #572]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a8e      	ldr	r2, [pc, #568]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b8c      	ldr	r3, [pc, #560]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a8b      	ldr	r2, [pc, #556]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb8e 	bl	8000cfc <HAL_GetTick>
 80015e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb8a 	bl	8000cfc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e2f9      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2ac>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb7a 	bl	8000cfc <HAL_GetTick>
 8001608:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb76 	bl	8000cfc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e2e5      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161e:	4b77      	ldr	r3, [pc, #476]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x2d4>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d060      	beq.n	80016fc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x314>
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d119      	bne.n	800167a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d116      	bne.n	800167a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	4b6b      	ldr	r3, [pc, #428]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x32c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e2c2      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b65      	ldr	r3, [pc, #404]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	4962      	ldr	r1, [pc, #392]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	e040      	b.n	80016fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d023      	beq.n	80016ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001682:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a5d      	ldr	r2, [pc, #372]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fb35 	bl	8000cfc <HAL_GetTick>
 8001692:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fb31 	bl	8000cfc <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e2a0      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a8:	4b54      	ldr	r3, [pc, #336]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b51      	ldr	r3, [pc, #324]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	494e      	ldr	r1, [pc, #312]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e018      	b.n	80016fc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a4b      	ldr	r2, [pc, #300]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb11 	bl	8000cfc <HAL_GetTick>
 80016da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fb0d 	bl	8000cfc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e27c      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f0:	4b42      	ldr	r3, [pc, #264]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8082 	beq.w	800180e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d05f      	beq.n	80017d2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001718:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	429a      	cmp	r2, r3
 8001726:	d037      	beq.n	8001798 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e254      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01b      	beq.n	8001782 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001750:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800175a:	f7ff facf 	bl	8000cfc <HAL_GetTick>
 800175e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff facb 	bl	8000cfc <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b11      	cmp	r3, #17
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e23a      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ef      	bne.n	8001762 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	f023 0210 	bic.w	r2, r3, #16
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	491a      	ldr	r1, [pc, #104]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001792:	4313      	orrs	r3, r2
 8001794:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff faa8 	bl	8000cfc <HAL_GetTick>
 80017ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff faa4 	bl	8000cfc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e213      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ef      	beq.n	80017b0 <HAL_RCC_OscConfig+0x478>
 80017d0:	e01d      	b.n	800180e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa8b 	bl	8000cfc <HAL_GetTick>
 80017e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fa87 	bl	8000cfc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b11      	cmp	r3, #17
 80017f6:	d903      	bls.n	8001800 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1f6      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
 80017fc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	4ba9      	ldr	r3, [pc, #676]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ed      	bne.n	80017ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80bd 	beq.w	8001996 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001822:	4ba1      	ldr	r3, [pc, #644]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10e      	bne.n	800184c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a9d      	ldr	r2, [pc, #628]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b9b      	ldr	r3, [pc, #620]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184c:	4b97      	ldr	r3, [pc, #604]	; (8001aac <HAL_RCC_OscConfig+0x774>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d118      	bne.n	800188a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001858:	4b94      	ldr	r3, [pc, #592]	; (8001aac <HAL_RCC_OscConfig+0x774>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a93      	ldr	r2, [pc, #588]	; (8001aac <HAL_RCC_OscConfig+0x774>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001864:	f7ff fa4a 	bl	8000cfc <HAL_GetTick>
 8001868:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186c:	f7ff fa46 	bl	8000cfc <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1b5      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x774>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d02c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001896:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	497f      	ldr	r1, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d010      	beq.n	80018de <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018bc:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018cc:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	4a70      	ldr	r2, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ee:	e00f      	b.n	8001910 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d016      	beq.n	8001946 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f9f0 	bl	8000cfc <HAL_GetTick>
 800191c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff f9ec 	bl	8000cfc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e159      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ed      	beq.n	8001920 <HAL_RCC_OscConfig+0x5e8>
 8001944:	e01d      	b.n	8001982 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f9d9 	bl	8000cfc <HAL_GetTick>
 800194a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff f9d5 	bl	8000cfc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e142      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ed      	bne.n	800194e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 800197a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80019ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b0:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff f99f 	bl	8000cfc <HAL_GetTick>
 80019be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c2:	f7ff f99b 	bl	8000cfc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e10a      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80019d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ef      	beq.n	80019c2 <HAL_RCC_OscConfig+0x68a>
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80019e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ea:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff f982 	bl	8000cfc <HAL_GetTick>
 80019f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fc:	f7ff f97e 	bl	8000cfc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0ed      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ef      	bne.n	80019fc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80e1 	beq.w	8001be8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	f040 80b5 	bne.w	8001b9a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d124      	bne.n	8001a8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11b      	bne.n	8001a8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d113      	bne.n	8001a8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d05f      	beq.n	8001b4e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d05a      	beq.n	8001b4a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa0:	f7ff f92c 	bl	8000cfc <HAL_GetTick>
 8001aa4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	e00c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x78a>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f924 	bl	8000cfc <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e093      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x8c0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ade:	3a01      	subs	r2, #1
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae8:	0212      	lsls	r2, r2, #8
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	3a01      	subs	r2, #1
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afc:	0852      	lsrs	r2, r2, #1
 8001afe:	3a01      	subs	r2, #1
 8001b00:	0652      	lsls	r2, r2, #25
 8001b02:	430a      	orrs	r2, r1
 8001b04:	493b      	ldr	r1, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a39      	ldr	r2, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b20:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b22:	f7ff f8eb 	bl	8000cfc <HAL_GetTick>
 8001b26:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f8e7 	bl	8000cfc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e056      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b48:	e04e      	b.n	8001be8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e04d      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d146      	bne.n	8001be8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b64:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b70:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b72:	f7ff f8c3 	bl	8000cfc <HAL_GetTick>
 8001b76:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f8bf 	bl	8000cfc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e02e      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x842>
 8001b98:	e026      	b.n	8001be8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d021      	beq.n	8001be4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f8a6 	bl	8000cfc <HAL_GetTick>
 8001bb0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f8a2 	bl	8000cfc <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e011      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_RCC_OscConfig+0x8bc>)
 8001bd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bdc:	f023 0303 	bic.w	r3, r3, #3
 8001be0:	60d3      	str	r3, [r2, #12]
 8001be2:	e001      	b.n	8001be8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3728      	adds	r7, #40	; 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	f99f808c 	.word	0xf99f808c

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0e7      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4970      	ldr	r1, [pc, #448]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0cf      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d908      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4960      	ldr	r1, [pc, #384]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d04c      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d121      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0a6      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	4b54      	ldr	r3, [pc, #336]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d115      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e09a      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb2:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e08e      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e086      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4943      	ldr	r1, [pc, #268]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f80a 	bl	8000cfc <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f806 	bl	8000cfc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e06e      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d208      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	492b      	ldr	r1, [pc, #172]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d210      	bcs.n	8001d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 0207 	bic.w	r2, r3, #7
 8001d58:	4923      	ldr	r1, [pc, #140]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e036      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4918      	ldr	r1, [pc, #96]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4910      	ldr	r1, [pc, #64]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001db0:	f000 f824 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	490b      	ldr	r1, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1f4>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff41 	bl	8000c5c <HAL_InitTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dde:	7afb      	ldrb	r3, [r7, #11]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08003dd8 	.word	0x08003dd8
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x34>
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d121      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d11e      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e005      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	e004      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d134      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d003      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ea0:	e005      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ea4:	617b      	str	r3, [r7, #20]
      break;
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eaa:	617b      	str	r3, [r7, #20]
      break;
 8001eac:	e002      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	617b      	str	r3, [r7, #20]
      break;
 8001eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	fb03 f202 	mul.w	r2, r3, r2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	0e5b      	lsrs	r3, r3, #25
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003df0 	.word	0x08003df0
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	007a1200 	.word	0x007a1200

08001f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08003de8 	.word	0x08003de8

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f5c:	f7ff ffda 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0adb      	lsrs	r3, r3, #11
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003de8 	.word	0x08003de8

08001f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f9c:	f7ff f968 	bl	8001270 <HAL_PWREx_GetVoltageRange>
 8001fa0:	6178      	str	r0, [r7, #20]
 8001fa2:	e014      	b.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a24      	ldr	r2, [pc, #144]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fbc:	f7ff f958 	bl	8001270 <HAL_PWREx_GetVoltageRange>
 8001fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	; (800203c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd4:	d10b      	bne.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d919      	bls.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2ba0      	cmp	r3, #160	; 0xa0
 8001fe0:	d902      	bls.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e013      	b.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e010      	b.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d902      	bls.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e00a      	b.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d102      	bne.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002000:	2302      	movs	r3, #2
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e004      	b.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b70      	cmp	r3, #112	; 0x70
 800200a:	d101      	bne.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800200c:	2301      	movs	r3, #1
 800200e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 0207 	bic.w	r2, r3, #7
 8002018:	4909      	ldr	r1, [pc, #36]	; (8002040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	40022000 	.word	0x40022000

08002044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800204c:	2300      	movs	r3, #0
 800204e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002050:	2300      	movs	r3, #0
 8002052:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 809e 	beq.w	800219e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002066:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00d      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002094:	2301      	movs	r3, #1
 8002096:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a39      	ldr	r2, [pc, #228]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fe2a 	bl	8000cfc <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020aa:	e009      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fe26 	bl	8000cfc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d902      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	74fb      	strb	r3, [r7, #19]
        break;
 80020be:	e005      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ef      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d15a      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01e      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d019      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800211a:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d016      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fde6 	bl	8000cfc <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002132:	e00b      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fde2 	bl	8000cfc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d902      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	74fb      	strb	r3, [r7, #19]
            break;
 800214a:	e006      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ec      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4904      	ldr	r1, [pc, #16]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002176:	e009      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
 800217c:	e006      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218c:	7c7b      	ldrb	r3, [r7, #17]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b6e      	ldr	r3, [pc, #440]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a6d      	ldr	r2, [pc, #436]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021aa:	4b68      	ldr	r3, [pc, #416]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f023 0203 	bic.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4964      	ldr	r1, [pc, #400]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021cc:	4b5f      	ldr	r3, [pc, #380]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f023 020c 	bic.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	495c      	ldr	r1, [pc, #368]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4953      	ldr	r1, [pc, #332]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002210:	4b4e      	ldr	r3, [pc, #312]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	494b      	ldr	r1, [pc, #300]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4942      	ldr	r1, [pc, #264]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002254:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	493a      	ldr	r1, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002276:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	4931      	ldr	r1, [pc, #196]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4929      	ldr	r1, [pc, #164]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4920      	ldr	r1, [pc, #128]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	4918      	ldr	r1, [pc, #96]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002306:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002340:	7cbb      	ldrb	r3, [r7, #18]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e040      	b.n	80023e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fab0 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fbd6 	bl	8002b48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f979 	bl	8002694 <UART_SetConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e01b      	b.n	80023e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fc55 	bl	8002c8c <UART_CheckIdleState>
 80023e2:	4603      	mov	r3, r0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002400:	2b20      	cmp	r3, #32
 8002402:	d178      	bne.n	80024f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_UART_Transmit+0x24>
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e071      	b.n	80024f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2221      	movs	r2, #33	; 0x21
 8002420:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002422:	f7fe fc6b 	bl	8000cfc <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d108      	bne.n	8002454 <HAL_UART_Transmit+0x68>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e003      	b.n	800245c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800245c:	e030      	b.n	80024c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fcb7 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e03c      	b.n	80024f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002490:	b292      	uxth	r2, r2
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	3302      	adds	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	e008      	b.n	80024ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b292      	uxth	r2, r2
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1c8      	bne.n	800245e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fc80 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e005      	b.n	80024f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002516:	2b20      	cmp	r3, #32
 8002518:	f040 80b6 	bne.w	8002688 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_UART_Receive+0x28>
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0ae      	b.n	800268a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2222      	movs	r2, #34	; 0x22
 8002538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002542:	f7fe fbdb 	bl	8000cfc <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002560:	d10e      	bne.n	8002580 <HAL_UART_Receive+0x80>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_UART_Receive+0x76>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002574:	e02d      	b.n	80025d2 <HAL_UART_Receive+0xd2>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800257e:	e028      	b.n	80025d2 <HAL_UART_Receive+0xd2>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_UART_Receive+0xa4>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <HAL_UART_Receive+0x9a>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002598:	e01b      	b.n	80025d2 <HAL_UART_Receive+0xd2>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	227f      	movs	r2, #127	; 0x7f
 800259e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025a2:	e016      	b.n	80025d2 <HAL_UART_Receive+0xd2>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ac:	d10d      	bne.n	80025ca <HAL_UART_Receive+0xca>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Receive+0xc0>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	227f      	movs	r2, #127	; 0x7f
 80025ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025be:	e008      	b.n	80025d2 <HAL_UART_Receive+0xd2>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	223f      	movs	r2, #63	; 0x3f
 80025c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025c8:	e003      	b.n	80025d2 <HAL_UART_Receive+0xd2>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80025d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d108      	bne.n	80025f6 <HAL_UART_Receive+0xf6>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e003      	b.n	80025fe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80025fe:	e037      	b.n	8002670 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2200      	movs	r2, #0
 8002608:	2120      	movs	r1, #32
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fbe6 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e033      	b.n	800268a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10c      	bne.n	8002642 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800262e:	b29a      	uxth	r2, r3
 8002630:	8a7b      	ldrh	r3, [r7, #18]
 8002632:	4013      	ands	r3, r2
 8002634:	b29a      	uxth	r2, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3302      	adds	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	e00d      	b.n	800265e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002648:	b29b      	uxth	r3, r3
 800264a:	b2da      	uxtb	r2, r3
 800264c:	8a7b      	ldrh	r3, [r7, #18]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	4013      	ands	r3, r2
 8002652:	b2da      	uxtb	r2, r3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1c1      	bne.n	8002600 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	e000      	b.n	800268a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b08a      	sub	sp, #40	; 0x28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b9e      	ldr	r3, [pc, #632]	; (800293c <UART_SetConfig+0x2a8>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a93      	ldr	r2, [pc, #588]	; (8002940 <UART_SetConfig+0x2ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	4313      	orrs	r3, r2
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a8a      	ldr	r2, [pc, #552]	; (8002944 <UART_SetConfig+0x2b0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d126      	bne.n	800276c <UART_SetConfig+0xd8>
 800271e:	4b8a      	ldr	r3, [pc, #552]	; (8002948 <UART_SetConfig+0x2b4>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d81b      	bhi.n	8002764 <UART_SetConfig+0xd0>
 800272c:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <UART_SetConfig+0xa0>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002745 	.word	0x08002745
 8002738:	08002755 	.word	0x08002755
 800273c:	0800274d 	.word	0x0800274d
 8002740:	0800275d 	.word	0x0800275d
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800274a:	e0ab      	b.n	80028a4 <UART_SetConfig+0x210>
 800274c:	2302      	movs	r3, #2
 800274e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002752:	e0a7      	b.n	80028a4 <UART_SetConfig+0x210>
 8002754:	2304      	movs	r3, #4
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800275a:	e0a3      	b.n	80028a4 <UART_SetConfig+0x210>
 800275c:	2308      	movs	r3, #8
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002762:	e09f      	b.n	80028a4 <UART_SetConfig+0x210>
 8002764:	2310      	movs	r3, #16
 8002766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276a:	e09b      	b.n	80028a4 <UART_SetConfig+0x210>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a76      	ldr	r2, [pc, #472]	; (800294c <UART_SetConfig+0x2b8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d138      	bne.n	80027e8 <UART_SetConfig+0x154>
 8002776:	4b74      	ldr	r3, [pc, #464]	; (8002948 <UART_SetConfig+0x2b4>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d82d      	bhi.n	80027e0 <UART_SetConfig+0x14c>
 8002784:	a201      	add	r2, pc, #4	; (adr r2, 800278c <UART_SetConfig+0xf8>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027e1 	.word	0x080027e1
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027d1 	.word	0x080027d1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027e1 	.word	0x080027e1
 80027a8:	080027e1 	.word	0x080027e1
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	080027e1 	.word	0x080027e1
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	080027d9 	.word	0x080027d9
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c6:	e06d      	b.n	80028a4 <UART_SetConfig+0x210>
 80027c8:	2302      	movs	r3, #2
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ce:	e069      	b.n	80028a4 <UART_SetConfig+0x210>
 80027d0:	2304      	movs	r3, #4
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d6:	e065      	b.n	80028a4 <UART_SetConfig+0x210>
 80027d8:	2308      	movs	r3, #8
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027de:	e061      	b.n	80028a4 <UART_SetConfig+0x210>
 80027e0:	2310      	movs	r3, #16
 80027e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027e6:	e05d      	b.n	80028a4 <UART_SetConfig+0x210>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <UART_SetConfig+0x2bc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d125      	bne.n	800283e <UART_SetConfig+0x1aa>
 80027f2:	4b55      	ldr	r3, [pc, #340]	; (8002948 <UART_SetConfig+0x2b4>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027fc:	2b30      	cmp	r3, #48	; 0x30
 80027fe:	d016      	beq.n	800282e <UART_SetConfig+0x19a>
 8002800:	2b30      	cmp	r3, #48	; 0x30
 8002802:	d818      	bhi.n	8002836 <UART_SetConfig+0x1a2>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d00a      	beq.n	800281e <UART_SetConfig+0x18a>
 8002808:	2b20      	cmp	r3, #32
 800280a:	d814      	bhi.n	8002836 <UART_SetConfig+0x1a2>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <UART_SetConfig+0x182>
 8002810:	2b10      	cmp	r3, #16
 8002812:	d008      	beq.n	8002826 <UART_SetConfig+0x192>
 8002814:	e00f      	b.n	8002836 <UART_SetConfig+0x1a2>
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281c:	e042      	b.n	80028a4 <UART_SetConfig+0x210>
 800281e:	2302      	movs	r3, #2
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002824:	e03e      	b.n	80028a4 <UART_SetConfig+0x210>
 8002826:	2304      	movs	r3, #4
 8002828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282c:	e03a      	b.n	80028a4 <UART_SetConfig+0x210>
 800282e:	2308      	movs	r3, #8
 8002830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002834:	e036      	b.n	80028a4 <UART_SetConfig+0x210>
 8002836:	2310      	movs	r3, #16
 8002838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283c:	e032      	b.n	80028a4 <UART_SetConfig+0x210>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3f      	ldr	r2, [pc, #252]	; (8002940 <UART_SetConfig+0x2ac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d12a      	bne.n	800289e <UART_SetConfig+0x20a>
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <UART_SetConfig+0x2b4>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002856:	d01a      	beq.n	800288e <UART_SetConfig+0x1fa>
 8002858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800285c:	d81b      	bhi.n	8002896 <UART_SetConfig+0x202>
 800285e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002862:	d00c      	beq.n	800287e <UART_SetConfig+0x1ea>
 8002864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002868:	d815      	bhi.n	8002896 <UART_SetConfig+0x202>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <UART_SetConfig+0x1e2>
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d008      	beq.n	8002886 <UART_SetConfig+0x1f2>
 8002874:	e00f      	b.n	8002896 <UART_SetConfig+0x202>
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287c:	e012      	b.n	80028a4 <UART_SetConfig+0x210>
 800287e:	2302      	movs	r3, #2
 8002880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002884:	e00e      	b.n	80028a4 <UART_SetConfig+0x210>
 8002886:	2304      	movs	r3, #4
 8002888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288c:	e00a      	b.n	80028a4 <UART_SetConfig+0x210>
 800288e:	2308      	movs	r3, #8
 8002890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002894:	e006      	b.n	80028a4 <UART_SetConfig+0x210>
 8002896:	2310      	movs	r3, #16
 8002898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289c:	e002      	b.n	80028a4 <UART_SetConfig+0x210>
 800289e:	2310      	movs	r3, #16
 80028a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <UART_SetConfig+0x2ac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f040 808a 	bne.w	80029c4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d824      	bhi.n	8002902 <UART_SetConfig+0x26e>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <UART_SetConfig+0x22c>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028e5 	.word	0x080028e5
 80028c4:	08002903 	.word	0x08002903
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	08002903 	.word	0x08002903
 80028d0:	080028f3 	.word	0x080028f3
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002903 	.word	0x08002903
 80028dc:	08002903 	.word	0x08002903
 80028e0:	080028fb 	.word	0x080028fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e4:	f7ff fb22 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 80028e8:	61f8      	str	r0, [r7, #28]
        break;
 80028ea:	e010      	b.n	800290e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <UART_SetConfig+0x2c0>)
 80028ee:	61fb      	str	r3, [r7, #28]
        break;
 80028f0:	e00d      	b.n	800290e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f2:	f7ff fa83 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 80028f6:	61f8      	str	r0, [r7, #28]
        break;
 80028f8:	e009      	b.n	800290e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fe:	61fb      	str	r3, [r7, #28]
        break;
 8002900:	e005      	b.n	800290e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800290c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8109 	beq.w	8002b28 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	429a      	cmp	r2, r3
 8002924:	d305      	bcc.n	8002932 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	429a      	cmp	r2, r3
 8002930:	d912      	bls.n	8002958 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002938:	e0f6      	b.n	8002b28 <UART_SetConfig+0x494>
 800293a:	bf00      	nop
 800293c:	efff69f3 	.word	0xefff69f3
 8002940:	40008000 	.word	0x40008000
 8002944:	40013800 	.word	0x40013800
 8002948:	40021000 	.word	0x40021000
 800294c:	40004400 	.word	0x40004400
 8002950:	40004800 	.word	0x40004800
 8002954:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2200      	movs	r2, #0
 800295c:	461c      	mov	r4, r3
 800295e:	4615      	mov	r5, r2
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	022b      	lsls	r3, r5, #8
 800296a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800296e:	0222      	lsls	r2, r4, #8
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	6849      	ldr	r1, [r1, #4]
 8002974:	0849      	lsrs	r1, r1, #1
 8002976:	2000      	movs	r0, #0
 8002978:	4688      	mov	r8, r1
 800297a:	4681      	mov	r9, r0
 800297c:	eb12 0a08 	adds.w	sl, r2, r8
 8002980:	eb43 0b09 	adc.w	fp, r3, r9
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002992:	4650      	mov	r0, sl
 8002994:	4659      	mov	r1, fp
 8002996:	f7fd fc6b 	bl	8000270 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4613      	mov	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a8:	d308      	bcc.n	80029bc <UART_SetConfig+0x328>
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b0:	d204      	bcs.n	80029bc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	e0b5      	b.n	8002b28 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80029c2:	e0b1      	b.n	8002b28 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029cc:	d15d      	bne.n	8002a8a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80029ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d827      	bhi.n	8002a26 <UART_SetConfig+0x392>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <UART_SetConfig+0x348>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a09 	.word	0x08002a09
 80029e4:	08002a11 	.word	0x08002a11
 80029e8:	08002a27 	.word	0x08002a27
 80029ec:	08002a17 	.word	0x08002a17
 80029f0:	08002a27 	.word	0x08002a27
 80029f4:	08002a27 	.word	0x08002a27
 80029f8:	08002a27 	.word	0x08002a27
 80029fc:	08002a1f 	.word	0x08002a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a00:	f7ff fa94 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002a04:	61f8      	str	r0, [r7, #28]
        break;
 8002a06:	e014      	b.n	8002a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff faa6 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	61f8      	str	r0, [r7, #28]
        break;
 8002a0e:	e010      	b.n	8002a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <UART_SetConfig+0x4b0>)
 8002a12:	61fb      	str	r3, [r7, #28]
        break;
 8002a14:	e00d      	b.n	8002a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a16:	f7ff f9f1 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8002a1a:	61f8      	str	r0, [r7, #28]
        break;
 8002a1c:	e009      	b.n	8002a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	61fb      	str	r3, [r7, #28]
        break;
 8002a24:	e005      	b.n	8002a32 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d077      	beq.n	8002b28 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005a      	lsls	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	441a      	add	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d916      	bls.n	8002a82 <UART_SetConfig+0x3ee>
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5a:	d212      	bcs.n	8002a82 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f023 030f 	bic.w	r3, r3, #15
 8002a64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	8afa      	ldrh	r2, [r7, #22]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	e052      	b.n	8002b28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a88:	e04e      	b.n	8002b28 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d827      	bhi.n	8002ae2 <UART_SetConfig+0x44e>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <UART_SetConfig+0x404>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002ae3 	.word	0x08002ae3
 8002aa8:	08002ad3 	.word	0x08002ad3
 8002aac:	08002ae3 	.word	0x08002ae3
 8002ab0:	08002ae3 	.word	0x08002ae3
 8002ab4:	08002ae3 	.word	0x08002ae3
 8002ab8:	08002adb 	.word	0x08002adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7ff fa36 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002ac0:	61f8      	str	r0, [r7, #28]
        break;
 8002ac2:	e014      	b.n	8002aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac4:	f7ff fa48 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002ac8:	61f8      	str	r0, [r7, #28]
        break;
 8002aca:	e010      	b.n	8002aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <UART_SetConfig+0x4b0>)
 8002ace:	61fb      	str	r3, [r7, #28]
        break;
 8002ad0:	e00d      	b.n	8002aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad2:	f7ff f993 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8002ad6:	61f8      	str	r0, [r7, #28]
        break;
 8002ad8:	e009      	b.n	8002aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	61fb      	str	r3, [r7, #28]
        break;
 8002ae0:	e005      	b.n	8002aee <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002aec:	bf00      	nop
    }

    if (pclk != 0U)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d019      	beq.n	8002b28 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	085a      	lsrs	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	441a      	add	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	d909      	bls.n	8002b22 <UART_SetConfig+0x48e>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d205      	bcs.n	8002b22 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	e002      	b.n	8002b28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	00f42400 	.word	0x00f42400

08002b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01a      	beq.n	8002c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c46:	d10a      	bne.n	8002c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b098      	sub	sp, #96	; 0x60
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c9c:	f7fe f82e 	bl	8000cfc <HAL_GetTick>
 8002ca0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d12e      	bne.n	8002d0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f88c 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d021      	beq.n	8002d0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cde:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e6      	bne.n	8002cca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e062      	b.n	8002dd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d149      	bne.n	8002db0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f856 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d03c      	beq.n	8002db0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	623b      	str	r3, [r7, #32]
   return(result);
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
 8002d56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e6      	bne.n	8002d36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3308      	adds	r3, #8
 8002d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d88:	61fa      	str	r2, [r7, #28]
 8002d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	617b      	str	r3, [r7, #20]
   return(result);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e011      	b.n	8002dd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3758      	adds	r7, #88	; 0x58
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	e049      	b.n	8002e82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df4:	d045      	beq.n	8002e82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fd ff81 	bl	8000cfc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e048      	b.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d031      	beq.n	8002e82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d110      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2208      	movs	r2, #8
 8002e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f838 	bl	8002eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e029      	b.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5c:	d111      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f81e 	bl	8002eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e00f      	b.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d0a6      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b095      	sub	sp, #84	; 0x54
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e6      	bne.n	8002eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d118      	bne.n	8002f52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f023 0310 	bic.w	r3, r3, #16
 8002f34:	647b      	str	r3, [r7, #68]	; 0x44
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e6      	bne.n	8002f20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f66:	bf00      	nop
 8002f68:	3754      	adds	r7, #84	; 0x54
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <std>:
 8002f74:	2300      	movs	r3, #0
 8002f76:	b510      	push	{r4, lr}
 8002f78:	4604      	mov	r4, r0
 8002f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f82:	6083      	str	r3, [r0, #8]
 8002f84:	8181      	strh	r1, [r0, #12]
 8002f86:	6643      	str	r3, [r0, #100]	; 0x64
 8002f88:	81c2      	strh	r2, [r0, #14]
 8002f8a:	6183      	str	r3, [r0, #24]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	2208      	movs	r2, #8
 8002f90:	305c      	adds	r0, #92	; 0x5c
 8002f92:	f000 f8b1 	bl	80030f8 <memset>
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <std+0x38>)
 8002f98:	6263      	str	r3, [r4, #36]	; 0x24
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <std+0x3c>)
 8002f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <std+0x40>)
 8002fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <std+0x44>)
 8002fa4:	6224      	str	r4, [r4, #32]
 8002fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	bf00      	nop
 8002fac:	080039bd 	.word	0x080039bd
 8002fb0:	080039df 	.word	0x080039df
 8002fb4:	08003a17 	.word	0x08003a17
 8002fb8:	08003a3b 	.word	0x08003a3b

08002fbc <stdio_exit_handler>:
 8002fbc:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <stdio_exit_handler+0xc>)
 8002fbe:	4903      	ldr	r1, [pc, #12]	; (8002fcc <stdio_exit_handler+0x10>)
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <stdio_exit_handler+0x14>)
 8002fc2:	f000 b869 	b.w	8003098 <_fwalk_sglue>
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	08003955 	.word	0x08003955
 8002fd0:	20000018 	.word	0x20000018

08002fd4 <cleanup_stdio>:
 8002fd4:	6841      	ldr	r1, [r0, #4]
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <cleanup_stdio+0x34>)
 8002fd8:	4299      	cmp	r1, r3
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	4604      	mov	r4, r0
 8002fde:	d001      	beq.n	8002fe4 <cleanup_stdio+0x10>
 8002fe0:	f000 fcb8 	bl	8003954 <_fflush_r>
 8002fe4:	68a1      	ldr	r1, [r4, #8]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <cleanup_stdio+0x38>)
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	d002      	beq.n	8002ff2 <cleanup_stdio+0x1e>
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 fcb1 	bl	8003954 <_fflush_r>
 8002ff2:	68e1      	ldr	r1, [r4, #12]
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <cleanup_stdio+0x3c>)
 8002ff6:	4299      	cmp	r1, r3
 8002ff8:	d004      	beq.n	8003004 <cleanup_stdio+0x30>
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	f000 bca8 	b.w	8003954 <_fflush_r>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	bf00      	nop
 8003008:	2000019c 	.word	0x2000019c
 800300c:	20000204 	.word	0x20000204
 8003010:	2000026c 	.word	0x2000026c

08003014 <global_stdio_init.part.0>:
 8003014:	b510      	push	{r4, lr}
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <global_stdio_init.part.0+0x30>)
 8003018:	4c0b      	ldr	r4, [pc, #44]	; (8003048 <global_stdio_init.part.0+0x34>)
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <global_stdio_init.part.0+0x38>)
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	4620      	mov	r0, r4
 8003020:	2200      	movs	r2, #0
 8003022:	2104      	movs	r1, #4
 8003024:	f7ff ffa6 	bl	8002f74 <std>
 8003028:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800302c:	2201      	movs	r2, #1
 800302e:	2109      	movs	r1, #9
 8003030:	f7ff ffa0 	bl	8002f74 <std>
 8003034:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003038:	2202      	movs	r2, #2
 800303a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800303e:	2112      	movs	r1, #18
 8003040:	f7ff bf98 	b.w	8002f74 <std>
 8003044:	200002d4 	.word	0x200002d4
 8003048:	2000019c 	.word	0x2000019c
 800304c:	08002fbd 	.word	0x08002fbd

08003050 <__sfp_lock_acquire>:
 8003050:	4801      	ldr	r0, [pc, #4]	; (8003058 <__sfp_lock_acquire+0x8>)
 8003052:	f000 b883 	b.w	800315c <__retarget_lock_acquire_recursive>
 8003056:	bf00      	nop
 8003058:	200002d9 	.word	0x200002d9

0800305c <__sfp_lock_release>:
 800305c:	4801      	ldr	r0, [pc, #4]	; (8003064 <__sfp_lock_release+0x8>)
 800305e:	f000 b87e 	b.w	800315e <__retarget_lock_release_recursive>
 8003062:	bf00      	nop
 8003064:	200002d9 	.word	0x200002d9

08003068 <__sinit>:
 8003068:	b510      	push	{r4, lr}
 800306a:	4604      	mov	r4, r0
 800306c:	f7ff fff0 	bl	8003050 <__sfp_lock_acquire>
 8003070:	6a23      	ldr	r3, [r4, #32]
 8003072:	b11b      	cbz	r3, 800307c <__sinit+0x14>
 8003074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003078:	f7ff bff0 	b.w	800305c <__sfp_lock_release>
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <__sinit+0x28>)
 800307e:	6223      	str	r3, [r4, #32]
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <__sinit+0x2c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f5      	bne.n	8003074 <__sinit+0xc>
 8003088:	f7ff ffc4 	bl	8003014 <global_stdio_init.part.0>
 800308c:	e7f2      	b.n	8003074 <__sinit+0xc>
 800308e:	bf00      	nop
 8003090:	08002fd5 	.word	0x08002fd5
 8003094:	200002d4 	.word	0x200002d4

08003098 <_fwalk_sglue>:
 8003098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800309c:	4607      	mov	r7, r0
 800309e:	4688      	mov	r8, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	2600      	movs	r6, #0
 80030a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030a8:	f1b9 0901 	subs.w	r9, r9, #1
 80030ac:	d505      	bpl.n	80030ba <_fwalk_sglue+0x22>
 80030ae:	6824      	ldr	r4, [r4, #0]
 80030b0:	2c00      	cmp	r4, #0
 80030b2:	d1f7      	bne.n	80030a4 <_fwalk_sglue+0xc>
 80030b4:	4630      	mov	r0, r6
 80030b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ba:	89ab      	ldrh	r3, [r5, #12]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d907      	bls.n	80030d0 <_fwalk_sglue+0x38>
 80030c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030c4:	3301      	adds	r3, #1
 80030c6:	d003      	beq.n	80030d0 <_fwalk_sglue+0x38>
 80030c8:	4629      	mov	r1, r5
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c0      	blx	r8
 80030ce:	4306      	orrs	r6, r0
 80030d0:	3568      	adds	r5, #104	; 0x68
 80030d2:	e7e9      	b.n	80030a8 <_fwalk_sglue+0x10>

080030d4 <iprintf>:
 80030d4:	b40f      	push	{r0, r1, r2, r3}
 80030d6:	b507      	push	{r0, r1, r2, lr}
 80030d8:	4906      	ldr	r1, [pc, #24]	; (80030f4 <iprintf+0x20>)
 80030da:	ab04      	add	r3, sp, #16
 80030dc:	6808      	ldr	r0, [r1, #0]
 80030de:	f853 2b04 	ldr.w	r2, [r3], #4
 80030e2:	6881      	ldr	r1, [r0, #8]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	f000 f865 	bl	80031b4 <_vfiprintf_r>
 80030ea:	b003      	add	sp, #12
 80030ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80030f0:	b004      	add	sp, #16
 80030f2:	4770      	bx	lr
 80030f4:	20000064 	.word	0x20000064

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <__errno>:
 8003108:	4b01      	ldr	r3, [pc, #4]	; (8003110 <__errno+0x8>)
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000064 	.word	0x20000064

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4d0d      	ldr	r5, [pc, #52]	; (800314c <__libc_init_array+0x38>)
 8003118:	4c0d      	ldr	r4, [pc, #52]	; (8003150 <__libc_init_array+0x3c>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	2600      	movs	r6, #0
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	4d0b      	ldr	r5, [pc, #44]	; (8003154 <__libc_init_array+0x40>)
 8003126:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x44>)
 8003128:	f000 fe46 	bl	8003db8 <_init>
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	2600      	movs	r6, #0
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	08003e5c 	.word	0x08003e5c
 8003150:	08003e5c 	.word	0x08003e5c
 8003154:	08003e5c 	.word	0x08003e5c
 8003158:	08003e60 	.word	0x08003e60

0800315c <__retarget_lock_acquire_recursive>:
 800315c:	4770      	bx	lr

0800315e <__retarget_lock_release_recursive>:
 800315e:	4770      	bx	lr

08003160 <__sfputc_r>:
 8003160:	6893      	ldr	r3, [r2, #8]
 8003162:	3b01      	subs	r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	b410      	push	{r4}
 8003168:	6093      	str	r3, [r2, #8]
 800316a:	da08      	bge.n	800317e <__sfputc_r+0x1e>
 800316c:	6994      	ldr	r4, [r2, #24]
 800316e:	42a3      	cmp	r3, r4
 8003170:	db01      	blt.n	8003176 <__sfputc_r+0x16>
 8003172:	290a      	cmp	r1, #10
 8003174:	d103      	bne.n	800317e <__sfputc_r+0x1e>
 8003176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800317a:	f000 bc62 	b.w	8003a42 <__swbuf_r>
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	1c58      	adds	r0, r3, #1
 8003182:	6010      	str	r0, [r2, #0]
 8003184:	7019      	strb	r1, [r3, #0]
 8003186:	4608      	mov	r0, r1
 8003188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318c:	4770      	bx	lr

0800318e <__sfputs_r>:
 800318e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003190:	4606      	mov	r6, r0
 8003192:	460f      	mov	r7, r1
 8003194:	4614      	mov	r4, r2
 8003196:	18d5      	adds	r5, r2, r3
 8003198:	42ac      	cmp	r4, r5
 800319a:	d101      	bne.n	80031a0 <__sfputs_r+0x12>
 800319c:	2000      	movs	r0, #0
 800319e:	e007      	b.n	80031b0 <__sfputs_r+0x22>
 80031a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a4:	463a      	mov	r2, r7
 80031a6:	4630      	mov	r0, r6
 80031a8:	f7ff ffda 	bl	8003160 <__sfputc_r>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d1f3      	bne.n	8003198 <__sfputs_r+0xa>
 80031b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031b4 <_vfiprintf_r>:
 80031b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b8:	460d      	mov	r5, r1
 80031ba:	b09d      	sub	sp, #116	; 0x74
 80031bc:	4614      	mov	r4, r2
 80031be:	4698      	mov	r8, r3
 80031c0:	4606      	mov	r6, r0
 80031c2:	b118      	cbz	r0, 80031cc <_vfiprintf_r+0x18>
 80031c4:	6a03      	ldr	r3, [r0, #32]
 80031c6:	b90b      	cbnz	r3, 80031cc <_vfiprintf_r+0x18>
 80031c8:	f7ff ff4e 	bl	8003068 <__sinit>
 80031cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031ce:	07d9      	lsls	r1, r3, #31
 80031d0:	d405      	bmi.n	80031de <_vfiprintf_r+0x2a>
 80031d2:	89ab      	ldrh	r3, [r5, #12]
 80031d4:	059a      	lsls	r2, r3, #22
 80031d6:	d402      	bmi.n	80031de <_vfiprintf_r+0x2a>
 80031d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031da:	f7ff ffbf 	bl	800315c <__retarget_lock_acquire_recursive>
 80031de:	89ab      	ldrh	r3, [r5, #12]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	d501      	bpl.n	80031e8 <_vfiprintf_r+0x34>
 80031e4:	692b      	ldr	r3, [r5, #16]
 80031e6:	b99b      	cbnz	r3, 8003210 <_vfiprintf_r+0x5c>
 80031e8:	4629      	mov	r1, r5
 80031ea:	4630      	mov	r0, r6
 80031ec:	f000 fc66 	bl	8003abc <__swsetup_r>
 80031f0:	b170      	cbz	r0, 8003210 <_vfiprintf_r+0x5c>
 80031f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031f4:	07dc      	lsls	r4, r3, #31
 80031f6:	d504      	bpl.n	8003202 <_vfiprintf_r+0x4e>
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031fc:	b01d      	add	sp, #116	; 0x74
 80031fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	0598      	lsls	r0, r3, #22
 8003206:	d4f7      	bmi.n	80031f8 <_vfiprintf_r+0x44>
 8003208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800320a:	f7ff ffa8 	bl	800315e <__retarget_lock_release_recursive>
 800320e:	e7f3      	b.n	80031f8 <_vfiprintf_r+0x44>
 8003210:	2300      	movs	r3, #0
 8003212:	9309      	str	r3, [sp, #36]	; 0x24
 8003214:	2320      	movs	r3, #32
 8003216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800321a:	f8cd 800c 	str.w	r8, [sp, #12]
 800321e:	2330      	movs	r3, #48	; 0x30
 8003220:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80033d4 <_vfiprintf_r+0x220>
 8003224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003228:	f04f 0901 	mov.w	r9, #1
 800322c:	4623      	mov	r3, r4
 800322e:	469a      	mov	sl, r3
 8003230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003234:	b10a      	cbz	r2, 800323a <_vfiprintf_r+0x86>
 8003236:	2a25      	cmp	r2, #37	; 0x25
 8003238:	d1f9      	bne.n	800322e <_vfiprintf_r+0x7a>
 800323a:	ebba 0b04 	subs.w	fp, sl, r4
 800323e:	d00b      	beq.n	8003258 <_vfiprintf_r+0xa4>
 8003240:	465b      	mov	r3, fp
 8003242:	4622      	mov	r2, r4
 8003244:	4629      	mov	r1, r5
 8003246:	4630      	mov	r0, r6
 8003248:	f7ff ffa1 	bl	800318e <__sfputs_r>
 800324c:	3001      	adds	r0, #1
 800324e:	f000 80a9 	beq.w	80033a4 <_vfiprintf_r+0x1f0>
 8003252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003254:	445a      	add	r2, fp
 8003256:	9209      	str	r2, [sp, #36]	; 0x24
 8003258:	f89a 3000 	ldrb.w	r3, [sl]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a1 	beq.w	80033a4 <_vfiprintf_r+0x1f0>
 8003262:	2300      	movs	r3, #0
 8003264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800326c:	f10a 0a01 	add.w	sl, sl, #1
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	9307      	str	r3, [sp, #28]
 8003274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003278:	931a      	str	r3, [sp, #104]	; 0x68
 800327a:	4654      	mov	r4, sl
 800327c:	2205      	movs	r2, #5
 800327e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003282:	4854      	ldr	r0, [pc, #336]	; (80033d4 <_vfiprintf_r+0x220>)
 8003284:	f7fc ffa4 	bl	80001d0 <memchr>
 8003288:	9a04      	ldr	r2, [sp, #16]
 800328a:	b9d8      	cbnz	r0, 80032c4 <_vfiprintf_r+0x110>
 800328c:	06d1      	lsls	r1, r2, #27
 800328e:	bf44      	itt	mi
 8003290:	2320      	movmi	r3, #32
 8003292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003296:	0713      	lsls	r3, r2, #28
 8003298:	bf44      	itt	mi
 800329a:	232b      	movmi	r3, #43	; 0x2b
 800329c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032a0:	f89a 3000 	ldrb.w	r3, [sl]
 80032a4:	2b2a      	cmp	r3, #42	; 0x2a
 80032a6:	d015      	beq.n	80032d4 <_vfiprintf_r+0x120>
 80032a8:	9a07      	ldr	r2, [sp, #28]
 80032aa:	4654      	mov	r4, sl
 80032ac:	2000      	movs	r0, #0
 80032ae:	f04f 0c0a 	mov.w	ip, #10
 80032b2:	4621      	mov	r1, r4
 80032b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032b8:	3b30      	subs	r3, #48	; 0x30
 80032ba:	2b09      	cmp	r3, #9
 80032bc:	d94d      	bls.n	800335a <_vfiprintf_r+0x1a6>
 80032be:	b1b0      	cbz	r0, 80032ee <_vfiprintf_r+0x13a>
 80032c0:	9207      	str	r2, [sp, #28]
 80032c2:	e014      	b.n	80032ee <_vfiprintf_r+0x13a>
 80032c4:	eba0 0308 	sub.w	r3, r0, r8
 80032c8:	fa09 f303 	lsl.w	r3, r9, r3
 80032cc:	4313      	orrs	r3, r2
 80032ce:	9304      	str	r3, [sp, #16]
 80032d0:	46a2      	mov	sl, r4
 80032d2:	e7d2      	b.n	800327a <_vfiprintf_r+0xc6>
 80032d4:	9b03      	ldr	r3, [sp, #12]
 80032d6:	1d19      	adds	r1, r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	9103      	str	r1, [sp, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bfbb      	ittet	lt
 80032e0:	425b      	neglt	r3, r3
 80032e2:	f042 0202 	orrlt.w	r2, r2, #2
 80032e6:	9307      	strge	r3, [sp, #28]
 80032e8:	9307      	strlt	r3, [sp, #28]
 80032ea:	bfb8      	it	lt
 80032ec:	9204      	strlt	r2, [sp, #16]
 80032ee:	7823      	ldrb	r3, [r4, #0]
 80032f0:	2b2e      	cmp	r3, #46	; 0x2e
 80032f2:	d10c      	bne.n	800330e <_vfiprintf_r+0x15a>
 80032f4:	7863      	ldrb	r3, [r4, #1]
 80032f6:	2b2a      	cmp	r3, #42	; 0x2a
 80032f8:	d134      	bne.n	8003364 <_vfiprintf_r+0x1b0>
 80032fa:	9b03      	ldr	r3, [sp, #12]
 80032fc:	1d1a      	adds	r2, r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	9203      	str	r2, [sp, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	bfb8      	it	lt
 8003306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800330a:	3402      	adds	r4, #2
 800330c:	9305      	str	r3, [sp, #20]
 800330e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80033e4 <_vfiprintf_r+0x230>
 8003312:	7821      	ldrb	r1, [r4, #0]
 8003314:	2203      	movs	r2, #3
 8003316:	4650      	mov	r0, sl
 8003318:	f7fc ff5a 	bl	80001d0 <memchr>
 800331c:	b138      	cbz	r0, 800332e <_vfiprintf_r+0x17a>
 800331e:	9b04      	ldr	r3, [sp, #16]
 8003320:	eba0 000a 	sub.w	r0, r0, sl
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	4082      	lsls	r2, r0
 8003328:	4313      	orrs	r3, r2
 800332a:	3401      	adds	r4, #1
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003332:	4829      	ldr	r0, [pc, #164]	; (80033d8 <_vfiprintf_r+0x224>)
 8003334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003338:	2206      	movs	r2, #6
 800333a:	f7fc ff49 	bl	80001d0 <memchr>
 800333e:	2800      	cmp	r0, #0
 8003340:	d03f      	beq.n	80033c2 <_vfiprintf_r+0x20e>
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <_vfiprintf_r+0x228>)
 8003344:	bb1b      	cbnz	r3, 800338e <_vfiprintf_r+0x1da>
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	3307      	adds	r3, #7
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	3308      	adds	r3, #8
 8003350:	9303      	str	r3, [sp, #12]
 8003352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003354:	443b      	add	r3, r7
 8003356:	9309      	str	r3, [sp, #36]	; 0x24
 8003358:	e768      	b.n	800322c <_vfiprintf_r+0x78>
 800335a:	fb0c 3202 	mla	r2, ip, r2, r3
 800335e:	460c      	mov	r4, r1
 8003360:	2001      	movs	r0, #1
 8003362:	e7a6      	b.n	80032b2 <_vfiprintf_r+0xfe>
 8003364:	2300      	movs	r3, #0
 8003366:	3401      	adds	r4, #1
 8003368:	9305      	str	r3, [sp, #20]
 800336a:	4619      	mov	r1, r3
 800336c:	f04f 0c0a 	mov.w	ip, #10
 8003370:	4620      	mov	r0, r4
 8003372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003376:	3a30      	subs	r2, #48	; 0x30
 8003378:	2a09      	cmp	r2, #9
 800337a:	d903      	bls.n	8003384 <_vfiprintf_r+0x1d0>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0c6      	beq.n	800330e <_vfiprintf_r+0x15a>
 8003380:	9105      	str	r1, [sp, #20]
 8003382:	e7c4      	b.n	800330e <_vfiprintf_r+0x15a>
 8003384:	fb0c 2101 	mla	r1, ip, r1, r2
 8003388:	4604      	mov	r4, r0
 800338a:	2301      	movs	r3, #1
 800338c:	e7f0      	b.n	8003370 <_vfiprintf_r+0x1bc>
 800338e:	ab03      	add	r3, sp, #12
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	462a      	mov	r2, r5
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <_vfiprintf_r+0x22c>)
 8003396:	a904      	add	r1, sp, #16
 8003398:	4630      	mov	r0, r6
 800339a:	f3af 8000 	nop.w
 800339e:	4607      	mov	r7, r0
 80033a0:	1c78      	adds	r0, r7, #1
 80033a2:	d1d6      	bne.n	8003352 <_vfiprintf_r+0x19e>
 80033a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033a6:	07d9      	lsls	r1, r3, #31
 80033a8:	d405      	bmi.n	80033b6 <_vfiprintf_r+0x202>
 80033aa:	89ab      	ldrh	r3, [r5, #12]
 80033ac:	059a      	lsls	r2, r3, #22
 80033ae:	d402      	bmi.n	80033b6 <_vfiprintf_r+0x202>
 80033b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033b2:	f7ff fed4 	bl	800315e <__retarget_lock_release_recursive>
 80033b6:	89ab      	ldrh	r3, [r5, #12]
 80033b8:	065b      	lsls	r3, r3, #25
 80033ba:	f53f af1d 	bmi.w	80031f8 <_vfiprintf_r+0x44>
 80033be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033c0:	e71c      	b.n	80031fc <_vfiprintf_r+0x48>
 80033c2:	ab03      	add	r3, sp, #12
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	462a      	mov	r2, r5
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <_vfiprintf_r+0x22c>)
 80033ca:	a904      	add	r1, sp, #16
 80033cc:	4630      	mov	r0, r6
 80033ce:	f000 f919 	bl	8003604 <_printf_i>
 80033d2:	e7e4      	b.n	800339e <_vfiprintf_r+0x1ea>
 80033d4:	08003e20 	.word	0x08003e20
 80033d8:	08003e2a 	.word	0x08003e2a
 80033dc:	00000000 	.word	0x00000000
 80033e0:	0800318f 	.word	0x0800318f
 80033e4:	08003e26 	.word	0x08003e26

080033e8 <sbrk_aligned>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4e0e      	ldr	r6, [pc, #56]	; (8003424 <sbrk_aligned+0x3c>)
 80033ec:	460c      	mov	r4, r1
 80033ee:	6831      	ldr	r1, [r6, #0]
 80033f0:	4605      	mov	r5, r0
 80033f2:	b911      	cbnz	r1, 80033fa <sbrk_aligned+0x12>
 80033f4:	f000 fc72 	bl	8003cdc <_sbrk_r>
 80033f8:	6030      	str	r0, [r6, #0]
 80033fa:	4621      	mov	r1, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 fc6d 	bl	8003cdc <_sbrk_r>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	d00a      	beq.n	800341c <sbrk_aligned+0x34>
 8003406:	1cc4      	adds	r4, r0, #3
 8003408:	f024 0403 	bic.w	r4, r4, #3
 800340c:	42a0      	cmp	r0, r4
 800340e:	d007      	beq.n	8003420 <sbrk_aligned+0x38>
 8003410:	1a21      	subs	r1, r4, r0
 8003412:	4628      	mov	r0, r5
 8003414:	f000 fc62 	bl	8003cdc <_sbrk_r>
 8003418:	3001      	adds	r0, #1
 800341a:	d101      	bne.n	8003420 <sbrk_aligned+0x38>
 800341c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003420:	4620      	mov	r0, r4
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	200002e0 	.word	0x200002e0

08003428 <_malloc_r>:
 8003428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800342c:	1ccd      	adds	r5, r1, #3
 800342e:	f025 0503 	bic.w	r5, r5, #3
 8003432:	3508      	adds	r5, #8
 8003434:	2d0c      	cmp	r5, #12
 8003436:	bf38      	it	cc
 8003438:	250c      	movcc	r5, #12
 800343a:	2d00      	cmp	r5, #0
 800343c:	4607      	mov	r7, r0
 800343e:	db01      	blt.n	8003444 <_malloc_r+0x1c>
 8003440:	42a9      	cmp	r1, r5
 8003442:	d905      	bls.n	8003450 <_malloc_r+0x28>
 8003444:	230c      	movs	r3, #12
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	2600      	movs	r6, #0
 800344a:	4630      	mov	r0, r6
 800344c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003524 <_malloc_r+0xfc>
 8003454:	f000 faa6 	bl	80039a4 <__malloc_lock>
 8003458:	f8d8 3000 	ldr.w	r3, [r8]
 800345c:	461c      	mov	r4, r3
 800345e:	bb5c      	cbnz	r4, 80034b8 <_malloc_r+0x90>
 8003460:	4629      	mov	r1, r5
 8003462:	4638      	mov	r0, r7
 8003464:	f7ff ffc0 	bl	80033e8 <sbrk_aligned>
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	4604      	mov	r4, r0
 800346c:	d155      	bne.n	800351a <_malloc_r+0xf2>
 800346e:	f8d8 4000 	ldr.w	r4, [r8]
 8003472:	4626      	mov	r6, r4
 8003474:	2e00      	cmp	r6, #0
 8003476:	d145      	bne.n	8003504 <_malloc_r+0xdc>
 8003478:	2c00      	cmp	r4, #0
 800347a:	d048      	beq.n	800350e <_malloc_r+0xe6>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	4631      	mov	r1, r6
 8003480:	4638      	mov	r0, r7
 8003482:	eb04 0903 	add.w	r9, r4, r3
 8003486:	f000 fc29 	bl	8003cdc <_sbrk_r>
 800348a:	4581      	cmp	r9, r0
 800348c:	d13f      	bne.n	800350e <_malloc_r+0xe6>
 800348e:	6821      	ldr	r1, [r4, #0]
 8003490:	1a6d      	subs	r5, r5, r1
 8003492:	4629      	mov	r1, r5
 8003494:	4638      	mov	r0, r7
 8003496:	f7ff ffa7 	bl	80033e8 <sbrk_aligned>
 800349a:	3001      	adds	r0, #1
 800349c:	d037      	beq.n	800350e <_malloc_r+0xe6>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	442b      	add	r3, r5
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	f8d8 3000 	ldr.w	r3, [r8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d038      	beq.n	800351e <_malloc_r+0xf6>
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	42a2      	cmp	r2, r4
 80034b0:	d12b      	bne.n	800350a <_malloc_r+0xe2>
 80034b2:	2200      	movs	r2, #0
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	e00f      	b.n	80034d8 <_malloc_r+0xb0>
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	1b52      	subs	r2, r2, r5
 80034bc:	d41f      	bmi.n	80034fe <_malloc_r+0xd6>
 80034be:	2a0b      	cmp	r2, #11
 80034c0:	d917      	bls.n	80034f2 <_malloc_r+0xca>
 80034c2:	1961      	adds	r1, r4, r5
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	6025      	str	r5, [r4, #0]
 80034c8:	bf18      	it	ne
 80034ca:	6059      	strne	r1, [r3, #4]
 80034cc:	6863      	ldr	r3, [r4, #4]
 80034ce:	bf08      	it	eq
 80034d0:	f8c8 1000 	streq.w	r1, [r8]
 80034d4:	5162      	str	r2, [r4, r5]
 80034d6:	604b      	str	r3, [r1, #4]
 80034d8:	4638      	mov	r0, r7
 80034da:	f104 060b 	add.w	r6, r4, #11
 80034de:	f000 fa67 	bl	80039b0 <__malloc_unlock>
 80034e2:	f026 0607 	bic.w	r6, r6, #7
 80034e6:	1d23      	adds	r3, r4, #4
 80034e8:	1af2      	subs	r2, r6, r3
 80034ea:	d0ae      	beq.n	800344a <_malloc_r+0x22>
 80034ec:	1b9b      	subs	r3, r3, r6
 80034ee:	50a3      	str	r3, [r4, r2]
 80034f0:	e7ab      	b.n	800344a <_malloc_r+0x22>
 80034f2:	42a3      	cmp	r3, r4
 80034f4:	6862      	ldr	r2, [r4, #4]
 80034f6:	d1dd      	bne.n	80034b4 <_malloc_r+0x8c>
 80034f8:	f8c8 2000 	str.w	r2, [r8]
 80034fc:	e7ec      	b.n	80034d8 <_malloc_r+0xb0>
 80034fe:	4623      	mov	r3, r4
 8003500:	6864      	ldr	r4, [r4, #4]
 8003502:	e7ac      	b.n	800345e <_malloc_r+0x36>
 8003504:	4634      	mov	r4, r6
 8003506:	6876      	ldr	r6, [r6, #4]
 8003508:	e7b4      	b.n	8003474 <_malloc_r+0x4c>
 800350a:	4613      	mov	r3, r2
 800350c:	e7cc      	b.n	80034a8 <_malloc_r+0x80>
 800350e:	230c      	movs	r3, #12
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4638      	mov	r0, r7
 8003514:	f000 fa4c 	bl	80039b0 <__malloc_unlock>
 8003518:	e797      	b.n	800344a <_malloc_r+0x22>
 800351a:	6025      	str	r5, [r4, #0]
 800351c:	e7dc      	b.n	80034d8 <_malloc_r+0xb0>
 800351e:	605b      	str	r3, [r3, #4]
 8003520:	deff      	udf	#255	; 0xff
 8003522:	bf00      	nop
 8003524:	200002dc 	.word	0x200002dc

08003528 <_printf_common>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	4616      	mov	r6, r2
 800352e:	4699      	mov	r9, r3
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003538:	4293      	cmp	r3, r2
 800353a:	bfb8      	it	lt
 800353c:	4613      	movlt	r3, r2
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003544:	4607      	mov	r7, r0
 8003546:	460c      	mov	r4, r1
 8003548:	b10a      	cbz	r2, 800354e <_printf_common+0x26>
 800354a:	3301      	adds	r3, #1
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	0699      	lsls	r1, r3, #26
 8003552:	bf42      	ittt	mi
 8003554:	6833      	ldrmi	r3, [r6, #0]
 8003556:	3302      	addmi	r3, #2
 8003558:	6033      	strmi	r3, [r6, #0]
 800355a:	6825      	ldr	r5, [r4, #0]
 800355c:	f015 0506 	ands.w	r5, r5, #6
 8003560:	d106      	bne.n	8003570 <_printf_common+0x48>
 8003562:	f104 0a19 	add.w	sl, r4, #25
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	6832      	ldr	r2, [r6, #0]
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	42ab      	cmp	r3, r5
 800356e:	dc26      	bgt.n	80035be <_printf_common+0x96>
 8003570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003574:	1e13      	subs	r3, r2, #0
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	bf18      	it	ne
 800357a:	2301      	movne	r3, #1
 800357c:	0692      	lsls	r2, r2, #26
 800357e:	d42b      	bmi.n	80035d8 <_printf_common+0xb0>
 8003580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003584:	4649      	mov	r1, r9
 8003586:	4638      	mov	r0, r7
 8003588:	47c0      	blx	r8
 800358a:	3001      	adds	r0, #1
 800358c:	d01e      	beq.n	80035cc <_printf_common+0xa4>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	6922      	ldr	r2, [r4, #16]
 8003592:	f003 0306 	and.w	r3, r3, #6
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf02      	ittt	eq
 800359a:	68e5      	ldreq	r5, [r4, #12]
 800359c:	6833      	ldreq	r3, [r6, #0]
 800359e:	1aed      	subeq	r5, r5, r3
 80035a0:	68a3      	ldr	r3, [r4, #8]
 80035a2:	bf0c      	ite	eq
 80035a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a8:	2500      	movne	r5, #0
 80035aa:	4293      	cmp	r3, r2
 80035ac:	bfc4      	itt	gt
 80035ae:	1a9b      	subgt	r3, r3, r2
 80035b0:	18ed      	addgt	r5, r5, r3
 80035b2:	2600      	movs	r6, #0
 80035b4:	341a      	adds	r4, #26
 80035b6:	42b5      	cmp	r5, r6
 80035b8:	d11a      	bne.n	80035f0 <_printf_common+0xc8>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e008      	b.n	80035d0 <_printf_common+0xa8>
 80035be:	2301      	movs	r3, #1
 80035c0:	4652      	mov	r2, sl
 80035c2:	4649      	mov	r1, r9
 80035c4:	4638      	mov	r0, r7
 80035c6:	47c0      	blx	r8
 80035c8:	3001      	adds	r0, #1
 80035ca:	d103      	bne.n	80035d4 <_printf_common+0xac>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	3501      	adds	r5, #1
 80035d6:	e7c6      	b.n	8003566 <_printf_common+0x3e>
 80035d8:	18e1      	adds	r1, r4, r3
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	2030      	movs	r0, #48	; 0x30
 80035de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e2:	4422      	add	r2, r4
 80035e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035ec:	3302      	adds	r3, #2
 80035ee:	e7c7      	b.n	8003580 <_printf_common+0x58>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4622      	mov	r2, r4
 80035f4:	4649      	mov	r1, r9
 80035f6:	4638      	mov	r0, r7
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d0e6      	beq.n	80035cc <_printf_common+0xa4>
 80035fe:	3601      	adds	r6, #1
 8003600:	e7d9      	b.n	80035b6 <_printf_common+0x8e>
	...

08003604 <_printf_i>:
 8003604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	7e0f      	ldrb	r7, [r1, #24]
 800360a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800360c:	2f78      	cmp	r7, #120	; 0x78
 800360e:	4691      	mov	r9, r2
 8003610:	4680      	mov	r8, r0
 8003612:	460c      	mov	r4, r1
 8003614:	469a      	mov	sl, r3
 8003616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800361a:	d807      	bhi.n	800362c <_printf_i+0x28>
 800361c:	2f62      	cmp	r7, #98	; 0x62
 800361e:	d80a      	bhi.n	8003636 <_printf_i+0x32>
 8003620:	2f00      	cmp	r7, #0
 8003622:	f000 80d4 	beq.w	80037ce <_printf_i+0x1ca>
 8003626:	2f58      	cmp	r7, #88	; 0x58
 8003628:	f000 80c0 	beq.w	80037ac <_printf_i+0x1a8>
 800362c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003634:	e03a      	b.n	80036ac <_printf_i+0xa8>
 8003636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800363a:	2b15      	cmp	r3, #21
 800363c:	d8f6      	bhi.n	800362c <_printf_i+0x28>
 800363e:	a101      	add	r1, pc, #4	; (adr r1, 8003644 <_printf_i+0x40>)
 8003640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003644:	0800369d 	.word	0x0800369d
 8003648:	080036b1 	.word	0x080036b1
 800364c:	0800362d 	.word	0x0800362d
 8003650:	0800362d 	.word	0x0800362d
 8003654:	0800362d 	.word	0x0800362d
 8003658:	0800362d 	.word	0x0800362d
 800365c:	080036b1 	.word	0x080036b1
 8003660:	0800362d 	.word	0x0800362d
 8003664:	0800362d 	.word	0x0800362d
 8003668:	0800362d 	.word	0x0800362d
 800366c:	0800362d 	.word	0x0800362d
 8003670:	080037b5 	.word	0x080037b5
 8003674:	080036dd 	.word	0x080036dd
 8003678:	0800376f 	.word	0x0800376f
 800367c:	0800362d 	.word	0x0800362d
 8003680:	0800362d 	.word	0x0800362d
 8003684:	080037d7 	.word	0x080037d7
 8003688:	0800362d 	.word	0x0800362d
 800368c:	080036dd 	.word	0x080036dd
 8003690:	0800362d 	.word	0x0800362d
 8003694:	0800362d 	.word	0x0800362d
 8003698:	08003777 	.word	0x08003777
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	602a      	str	r2, [r5, #0]
 80036a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ac:	2301      	movs	r3, #1
 80036ae:	e09f      	b.n	80037f0 <_printf_i+0x1ec>
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	0607      	lsls	r7, r0, #24
 80036b6:	f103 0104 	add.w	r1, r3, #4
 80036ba:	6029      	str	r1, [r5, #0]
 80036bc:	d501      	bpl.n	80036c2 <_printf_i+0xbe>
 80036be:	681e      	ldr	r6, [r3, #0]
 80036c0:	e003      	b.n	80036ca <_printf_i+0xc6>
 80036c2:	0646      	lsls	r6, r0, #25
 80036c4:	d5fb      	bpl.n	80036be <_printf_i+0xba>
 80036c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	da03      	bge.n	80036d6 <_printf_i+0xd2>
 80036ce:	232d      	movs	r3, #45	; 0x2d
 80036d0:	4276      	negs	r6, r6
 80036d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d6:	485a      	ldr	r0, [pc, #360]	; (8003840 <_printf_i+0x23c>)
 80036d8:	230a      	movs	r3, #10
 80036da:	e012      	b.n	8003702 <_printf_i+0xfe>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	6029      	str	r1, [r5, #0]
 80036e4:	0605      	lsls	r5, r0, #24
 80036e6:	d501      	bpl.n	80036ec <_printf_i+0xe8>
 80036e8:	681e      	ldr	r6, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <_printf_i+0xee>
 80036ec:	0641      	lsls	r1, r0, #25
 80036ee:	d5fb      	bpl.n	80036e8 <_printf_i+0xe4>
 80036f0:	881e      	ldrh	r6, [r3, #0]
 80036f2:	4853      	ldr	r0, [pc, #332]	; (8003840 <_printf_i+0x23c>)
 80036f4:	2f6f      	cmp	r7, #111	; 0x6f
 80036f6:	bf0c      	ite	eq
 80036f8:	2308      	moveq	r3, #8
 80036fa:	230a      	movne	r3, #10
 80036fc:	2100      	movs	r1, #0
 80036fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003702:	6865      	ldr	r5, [r4, #4]
 8003704:	60a5      	str	r5, [r4, #8]
 8003706:	2d00      	cmp	r5, #0
 8003708:	bfa2      	ittt	ge
 800370a:	6821      	ldrge	r1, [r4, #0]
 800370c:	f021 0104 	bicge.w	r1, r1, #4
 8003710:	6021      	strge	r1, [r4, #0]
 8003712:	b90e      	cbnz	r6, 8003718 <_printf_i+0x114>
 8003714:	2d00      	cmp	r5, #0
 8003716:	d04b      	beq.n	80037b0 <_printf_i+0x1ac>
 8003718:	4615      	mov	r5, r2
 800371a:	fbb6 f1f3 	udiv	r1, r6, r3
 800371e:	fb03 6711 	mls	r7, r3, r1, r6
 8003722:	5dc7      	ldrb	r7, [r0, r7]
 8003724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003728:	4637      	mov	r7, r6
 800372a:	42bb      	cmp	r3, r7
 800372c:	460e      	mov	r6, r1
 800372e:	d9f4      	bls.n	800371a <_printf_i+0x116>
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10b      	bne.n	800374c <_printf_i+0x148>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	07de      	lsls	r6, r3, #31
 8003738:	d508      	bpl.n	800374c <_printf_i+0x148>
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	6861      	ldr	r1, [r4, #4]
 800373e:	4299      	cmp	r1, r3
 8003740:	bfde      	ittt	le
 8003742:	2330      	movle	r3, #48	; 0x30
 8003744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003748:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800374c:	1b52      	subs	r2, r2, r5
 800374e:	6122      	str	r2, [r4, #16]
 8003750:	f8cd a000 	str.w	sl, [sp]
 8003754:	464b      	mov	r3, r9
 8003756:	aa03      	add	r2, sp, #12
 8003758:	4621      	mov	r1, r4
 800375a:	4640      	mov	r0, r8
 800375c:	f7ff fee4 	bl	8003528 <_printf_common>
 8003760:	3001      	adds	r0, #1
 8003762:	d14a      	bne.n	80037fa <_printf_i+0x1f6>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003768:	b004      	add	sp, #16
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	f043 0320 	orr.w	r3, r3, #32
 8003774:	6023      	str	r3, [r4, #0]
 8003776:	4833      	ldr	r0, [pc, #204]	; (8003844 <_printf_i+0x240>)
 8003778:	2778      	movs	r7, #120	; 0x78
 800377a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	6829      	ldr	r1, [r5, #0]
 8003782:	061f      	lsls	r7, r3, #24
 8003784:	f851 6b04 	ldr.w	r6, [r1], #4
 8003788:	d402      	bmi.n	8003790 <_printf_i+0x18c>
 800378a:	065f      	lsls	r7, r3, #25
 800378c:	bf48      	it	mi
 800378e:	b2b6      	uxthmi	r6, r6
 8003790:	07df      	lsls	r7, r3, #31
 8003792:	bf48      	it	mi
 8003794:	f043 0320 	orrmi.w	r3, r3, #32
 8003798:	6029      	str	r1, [r5, #0]
 800379a:	bf48      	it	mi
 800379c:	6023      	strmi	r3, [r4, #0]
 800379e:	b91e      	cbnz	r6, 80037a8 <_printf_i+0x1a4>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f023 0320 	bic.w	r3, r3, #32
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	2310      	movs	r3, #16
 80037aa:	e7a7      	b.n	80036fc <_printf_i+0xf8>
 80037ac:	4824      	ldr	r0, [pc, #144]	; (8003840 <_printf_i+0x23c>)
 80037ae:	e7e4      	b.n	800377a <_printf_i+0x176>
 80037b0:	4615      	mov	r5, r2
 80037b2:	e7bd      	b.n	8003730 <_printf_i+0x12c>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	6826      	ldr	r6, [r4, #0]
 80037b8:	6961      	ldr	r1, [r4, #20]
 80037ba:	1d18      	adds	r0, r3, #4
 80037bc:	6028      	str	r0, [r5, #0]
 80037be:	0635      	lsls	r5, r6, #24
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	d501      	bpl.n	80037c8 <_printf_i+0x1c4>
 80037c4:	6019      	str	r1, [r3, #0]
 80037c6:	e002      	b.n	80037ce <_printf_i+0x1ca>
 80037c8:	0670      	lsls	r0, r6, #25
 80037ca:	d5fb      	bpl.n	80037c4 <_printf_i+0x1c0>
 80037cc:	8019      	strh	r1, [r3, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	6123      	str	r3, [r4, #16]
 80037d2:	4615      	mov	r5, r2
 80037d4:	e7bc      	b.n	8003750 <_printf_i+0x14c>
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	602a      	str	r2, [r5, #0]
 80037dc:	681d      	ldr	r5, [r3, #0]
 80037de:	6862      	ldr	r2, [r4, #4]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4628      	mov	r0, r5
 80037e4:	f7fc fcf4 	bl	80001d0 <memchr>
 80037e8:	b108      	cbz	r0, 80037ee <_printf_i+0x1ea>
 80037ea:	1b40      	subs	r0, r0, r5
 80037ec:	6060      	str	r0, [r4, #4]
 80037ee:	6863      	ldr	r3, [r4, #4]
 80037f0:	6123      	str	r3, [r4, #16]
 80037f2:	2300      	movs	r3, #0
 80037f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f8:	e7aa      	b.n	8003750 <_printf_i+0x14c>
 80037fa:	6923      	ldr	r3, [r4, #16]
 80037fc:	462a      	mov	r2, r5
 80037fe:	4649      	mov	r1, r9
 8003800:	4640      	mov	r0, r8
 8003802:	47d0      	blx	sl
 8003804:	3001      	adds	r0, #1
 8003806:	d0ad      	beq.n	8003764 <_printf_i+0x160>
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	079b      	lsls	r3, r3, #30
 800380c:	d413      	bmi.n	8003836 <_printf_i+0x232>
 800380e:	68e0      	ldr	r0, [r4, #12]
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	4298      	cmp	r0, r3
 8003814:	bfb8      	it	lt
 8003816:	4618      	movlt	r0, r3
 8003818:	e7a6      	b.n	8003768 <_printf_i+0x164>
 800381a:	2301      	movs	r3, #1
 800381c:	4632      	mov	r2, r6
 800381e:	4649      	mov	r1, r9
 8003820:	4640      	mov	r0, r8
 8003822:	47d0      	blx	sl
 8003824:	3001      	adds	r0, #1
 8003826:	d09d      	beq.n	8003764 <_printf_i+0x160>
 8003828:	3501      	adds	r5, #1
 800382a:	68e3      	ldr	r3, [r4, #12]
 800382c:	9903      	ldr	r1, [sp, #12]
 800382e:	1a5b      	subs	r3, r3, r1
 8003830:	42ab      	cmp	r3, r5
 8003832:	dcf2      	bgt.n	800381a <_printf_i+0x216>
 8003834:	e7eb      	b.n	800380e <_printf_i+0x20a>
 8003836:	2500      	movs	r5, #0
 8003838:	f104 0619 	add.w	r6, r4, #25
 800383c:	e7f5      	b.n	800382a <_printf_i+0x226>
 800383e:	bf00      	nop
 8003840:	08003e31 	.word	0x08003e31
 8003844:	08003e42 	.word	0x08003e42

08003848 <__sflush_r>:
 8003848:	898a      	ldrh	r2, [r1, #12]
 800384a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384e:	4605      	mov	r5, r0
 8003850:	0710      	lsls	r0, r2, #28
 8003852:	460c      	mov	r4, r1
 8003854:	d458      	bmi.n	8003908 <__sflush_r+0xc0>
 8003856:	684b      	ldr	r3, [r1, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	dc05      	bgt.n	8003868 <__sflush_r+0x20>
 800385c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	dc02      	bgt.n	8003868 <__sflush_r+0x20>
 8003862:	2000      	movs	r0, #0
 8003864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800386a:	2e00      	cmp	r6, #0
 800386c:	d0f9      	beq.n	8003862 <__sflush_r+0x1a>
 800386e:	2300      	movs	r3, #0
 8003870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003874:	682f      	ldr	r7, [r5, #0]
 8003876:	6a21      	ldr	r1, [r4, #32]
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	d032      	beq.n	80038e2 <__sflush_r+0x9a>
 800387c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	075a      	lsls	r2, r3, #29
 8003882:	d505      	bpl.n	8003890 <__sflush_r+0x48>
 8003884:	6863      	ldr	r3, [r4, #4]
 8003886:	1ac0      	subs	r0, r0, r3
 8003888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800388a:	b10b      	cbz	r3, 8003890 <__sflush_r+0x48>
 800388c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800388e:	1ac0      	subs	r0, r0, r3
 8003890:	2300      	movs	r3, #0
 8003892:	4602      	mov	r2, r0
 8003894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003896:	6a21      	ldr	r1, [r4, #32]
 8003898:	4628      	mov	r0, r5
 800389a:	47b0      	blx	r6
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	d106      	bne.n	80038b0 <__sflush_r+0x68>
 80038a2:	6829      	ldr	r1, [r5, #0]
 80038a4:	291d      	cmp	r1, #29
 80038a6:	d82b      	bhi.n	8003900 <__sflush_r+0xb8>
 80038a8:	4a29      	ldr	r2, [pc, #164]	; (8003950 <__sflush_r+0x108>)
 80038aa:	410a      	asrs	r2, r1
 80038ac:	07d6      	lsls	r6, r2, #31
 80038ae:	d427      	bmi.n	8003900 <__sflush_r+0xb8>
 80038b0:	2200      	movs	r2, #0
 80038b2:	6062      	str	r2, [r4, #4]
 80038b4:	04d9      	lsls	r1, r3, #19
 80038b6:	6922      	ldr	r2, [r4, #16]
 80038b8:	6022      	str	r2, [r4, #0]
 80038ba:	d504      	bpl.n	80038c6 <__sflush_r+0x7e>
 80038bc:	1c42      	adds	r2, r0, #1
 80038be:	d101      	bne.n	80038c4 <__sflush_r+0x7c>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b903      	cbnz	r3, 80038c6 <__sflush_r+0x7e>
 80038c4:	6560      	str	r0, [r4, #84]	; 0x54
 80038c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038c8:	602f      	str	r7, [r5, #0]
 80038ca:	2900      	cmp	r1, #0
 80038cc:	d0c9      	beq.n	8003862 <__sflush_r+0x1a>
 80038ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038d2:	4299      	cmp	r1, r3
 80038d4:	d002      	beq.n	80038dc <__sflush_r+0x94>
 80038d6:	4628      	mov	r0, r5
 80038d8:	f000 fa22 	bl	8003d20 <_free_r>
 80038dc:	2000      	movs	r0, #0
 80038de:	6360      	str	r0, [r4, #52]	; 0x34
 80038e0:	e7c0      	b.n	8003864 <__sflush_r+0x1c>
 80038e2:	2301      	movs	r3, #1
 80038e4:	4628      	mov	r0, r5
 80038e6:	47b0      	blx	r6
 80038e8:	1c41      	adds	r1, r0, #1
 80038ea:	d1c8      	bne.n	800387e <__sflush_r+0x36>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0c5      	beq.n	800387e <__sflush_r+0x36>
 80038f2:	2b1d      	cmp	r3, #29
 80038f4:	d001      	beq.n	80038fa <__sflush_r+0xb2>
 80038f6:	2b16      	cmp	r3, #22
 80038f8:	d101      	bne.n	80038fe <__sflush_r+0xb6>
 80038fa:	602f      	str	r7, [r5, #0]
 80038fc:	e7b1      	b.n	8003862 <__sflush_r+0x1a>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003904:	81a3      	strh	r3, [r4, #12]
 8003906:	e7ad      	b.n	8003864 <__sflush_r+0x1c>
 8003908:	690f      	ldr	r7, [r1, #16]
 800390a:	2f00      	cmp	r7, #0
 800390c:	d0a9      	beq.n	8003862 <__sflush_r+0x1a>
 800390e:	0793      	lsls	r3, r2, #30
 8003910:	680e      	ldr	r6, [r1, #0]
 8003912:	bf08      	it	eq
 8003914:	694b      	ldreq	r3, [r1, #20]
 8003916:	600f      	str	r7, [r1, #0]
 8003918:	bf18      	it	ne
 800391a:	2300      	movne	r3, #0
 800391c:	eba6 0807 	sub.w	r8, r6, r7
 8003920:	608b      	str	r3, [r1, #8]
 8003922:	f1b8 0f00 	cmp.w	r8, #0
 8003926:	dd9c      	ble.n	8003862 <__sflush_r+0x1a>
 8003928:	6a21      	ldr	r1, [r4, #32]
 800392a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800392c:	4643      	mov	r3, r8
 800392e:	463a      	mov	r2, r7
 8003930:	4628      	mov	r0, r5
 8003932:	47b0      	blx	r6
 8003934:	2800      	cmp	r0, #0
 8003936:	dc06      	bgt.n	8003946 <__sflush_r+0xfe>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003944:	e78e      	b.n	8003864 <__sflush_r+0x1c>
 8003946:	4407      	add	r7, r0
 8003948:	eba8 0800 	sub.w	r8, r8, r0
 800394c:	e7e9      	b.n	8003922 <__sflush_r+0xda>
 800394e:	bf00      	nop
 8003950:	dfbffffe 	.word	0xdfbffffe

08003954 <_fflush_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	690b      	ldr	r3, [r1, #16]
 8003958:	4605      	mov	r5, r0
 800395a:	460c      	mov	r4, r1
 800395c:	b913      	cbnz	r3, 8003964 <_fflush_r+0x10>
 800395e:	2500      	movs	r5, #0
 8003960:	4628      	mov	r0, r5
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	b118      	cbz	r0, 800396e <_fflush_r+0x1a>
 8003966:	6a03      	ldr	r3, [r0, #32]
 8003968:	b90b      	cbnz	r3, 800396e <_fflush_r+0x1a>
 800396a:	f7ff fb7d 	bl	8003068 <__sinit>
 800396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f3      	beq.n	800395e <_fflush_r+0xa>
 8003976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003978:	07d0      	lsls	r0, r2, #31
 800397a:	d404      	bmi.n	8003986 <_fflush_r+0x32>
 800397c:	0599      	lsls	r1, r3, #22
 800397e:	d402      	bmi.n	8003986 <_fflush_r+0x32>
 8003980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003982:	f7ff fbeb 	bl	800315c <__retarget_lock_acquire_recursive>
 8003986:	4628      	mov	r0, r5
 8003988:	4621      	mov	r1, r4
 800398a:	f7ff ff5d 	bl	8003848 <__sflush_r>
 800398e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003990:	07da      	lsls	r2, r3, #31
 8003992:	4605      	mov	r5, r0
 8003994:	d4e4      	bmi.n	8003960 <_fflush_r+0xc>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	059b      	lsls	r3, r3, #22
 800399a:	d4e1      	bmi.n	8003960 <_fflush_r+0xc>
 800399c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800399e:	f7ff fbde 	bl	800315e <__retarget_lock_release_recursive>
 80039a2:	e7dd      	b.n	8003960 <_fflush_r+0xc>

080039a4 <__malloc_lock>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__malloc_lock+0x8>)
 80039a6:	f7ff bbd9 	b.w	800315c <__retarget_lock_acquire_recursive>
 80039aa:	bf00      	nop
 80039ac:	200002d8 	.word	0x200002d8

080039b0 <__malloc_unlock>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__malloc_unlock+0x8>)
 80039b2:	f7ff bbd4 	b.w	800315e <__retarget_lock_release_recursive>
 80039b6:	bf00      	nop
 80039b8:	200002d8 	.word	0x200002d8

080039bc <__sread>:
 80039bc:	b510      	push	{r4, lr}
 80039be:	460c      	mov	r4, r1
 80039c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c4:	f000 f978 	bl	8003cb8 <_read_r>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	bfab      	itete	ge
 80039cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ce:	89a3      	ldrhlt	r3, [r4, #12]
 80039d0:	181b      	addge	r3, r3, r0
 80039d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039d6:	bfac      	ite	ge
 80039d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039da:	81a3      	strhlt	r3, [r4, #12]
 80039dc:	bd10      	pop	{r4, pc}

080039de <__swrite>:
 80039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	461f      	mov	r7, r3
 80039e4:	898b      	ldrh	r3, [r1, #12]
 80039e6:	05db      	lsls	r3, r3, #23
 80039e8:	4605      	mov	r5, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4616      	mov	r6, r2
 80039ee:	d505      	bpl.n	80039fc <__swrite+0x1e>
 80039f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f4:	2302      	movs	r3, #2
 80039f6:	2200      	movs	r2, #0
 80039f8:	f000 f94c 	bl	8003c94 <_lseek_r>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a12:	f000 b973 	b.w	8003cfc <_write_r>

08003a16 <__sseek>:
 8003a16:	b510      	push	{r4, lr}
 8003a18:	460c      	mov	r4, r1
 8003a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1e:	f000 f939 	bl	8003c94 <_lseek_r>
 8003a22:	1c43      	adds	r3, r0, #1
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	bf15      	itete	ne
 8003a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a32:	81a3      	strheq	r3, [r4, #12]
 8003a34:	bf18      	it	ne
 8003a36:	81a3      	strhne	r3, [r4, #12]
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <__sclose>:
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 b8f7 	b.w	8003c30 <_close_r>

08003a42 <__swbuf_r>:
 8003a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a44:	460e      	mov	r6, r1
 8003a46:	4614      	mov	r4, r2
 8003a48:	4605      	mov	r5, r0
 8003a4a:	b118      	cbz	r0, 8003a54 <__swbuf_r+0x12>
 8003a4c:	6a03      	ldr	r3, [r0, #32]
 8003a4e:	b90b      	cbnz	r3, 8003a54 <__swbuf_r+0x12>
 8003a50:	f7ff fb0a 	bl	8003068 <__sinit>
 8003a54:	69a3      	ldr	r3, [r4, #24]
 8003a56:	60a3      	str	r3, [r4, #8]
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	071a      	lsls	r2, r3, #28
 8003a5c:	d525      	bpl.n	8003aaa <__swbuf_r+0x68>
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	b31b      	cbz	r3, 8003aaa <__swbuf_r+0x68>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	6922      	ldr	r2, [r4, #16]
 8003a66:	1a98      	subs	r0, r3, r2
 8003a68:	6963      	ldr	r3, [r4, #20]
 8003a6a:	b2f6      	uxtb	r6, r6
 8003a6c:	4283      	cmp	r3, r0
 8003a6e:	4637      	mov	r7, r6
 8003a70:	dc04      	bgt.n	8003a7c <__swbuf_r+0x3a>
 8003a72:	4621      	mov	r1, r4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7ff ff6d 	bl	8003954 <_fflush_r>
 8003a7a:	b9e0      	cbnz	r0, 8003ab6 <__swbuf_r+0x74>
 8003a7c:	68a3      	ldr	r3, [r4, #8]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60a3      	str	r3, [r4, #8]
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	6022      	str	r2, [r4, #0]
 8003a88:	701e      	strb	r6, [r3, #0]
 8003a8a:	6962      	ldr	r2, [r4, #20]
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d004      	beq.n	8003a9c <__swbuf_r+0x5a>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	07db      	lsls	r3, r3, #31
 8003a96:	d506      	bpl.n	8003aa6 <__swbuf_r+0x64>
 8003a98:	2e0a      	cmp	r6, #10
 8003a9a:	d104      	bne.n	8003aa6 <__swbuf_r+0x64>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f7ff ff58 	bl	8003954 <_fflush_r>
 8003aa4:	b938      	cbnz	r0, 8003ab6 <__swbuf_r+0x74>
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 f805 	bl	8003abc <__swsetup_r>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d0d5      	beq.n	8003a62 <__swbuf_r+0x20>
 8003ab6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003aba:	e7f4      	b.n	8003aa6 <__swbuf_r+0x64>

08003abc <__swsetup_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <__swsetup_r+0xac>)
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	b118      	cbz	r0, 8003ad0 <__swsetup_r+0x14>
 8003ac8:	6a03      	ldr	r3, [r0, #32]
 8003aca:	b90b      	cbnz	r3, 8003ad0 <__swsetup_r+0x14>
 8003acc:	f7ff facc 	bl	8003068 <__sinit>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ad6:	0718      	lsls	r0, r3, #28
 8003ad8:	d422      	bmi.n	8003b20 <__swsetup_r+0x64>
 8003ada:	06d9      	lsls	r1, r3, #27
 8003adc:	d407      	bmi.n	8003aee <__swsetup_r+0x32>
 8003ade:	2309      	movs	r3, #9
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ae6:	81a3      	strh	r3, [r4, #12]
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aec:	e034      	b.n	8003b58 <__swsetup_r+0x9c>
 8003aee:	0758      	lsls	r0, r3, #29
 8003af0:	d512      	bpl.n	8003b18 <__swsetup_r+0x5c>
 8003af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af4:	b141      	cbz	r1, 8003b08 <__swsetup_r+0x4c>
 8003af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003afa:	4299      	cmp	r1, r3
 8003afc:	d002      	beq.n	8003b04 <__swsetup_r+0x48>
 8003afe:	4628      	mov	r0, r5
 8003b00:	f000 f90e 	bl	8003d20 <_free_r>
 8003b04:	2300      	movs	r3, #0
 8003b06:	6363      	str	r3, [r4, #52]	; 0x34
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	2300      	movs	r3, #0
 8003b12:	6063      	str	r3, [r4, #4]
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	f043 0308 	orr.w	r3, r3, #8
 8003b1e:	81a3      	strh	r3, [r4, #12]
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	b94b      	cbnz	r3, 8003b38 <__swsetup_r+0x7c>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d003      	beq.n	8003b38 <__swsetup_r+0x7c>
 8003b30:	4621      	mov	r1, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 f840 	bl	8003bb8 <__smakebuf_r>
 8003b38:	89a0      	ldrh	r0, [r4, #12]
 8003b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b3e:	f010 0301 	ands.w	r3, r0, #1
 8003b42:	d00a      	beq.n	8003b5a <__swsetup_r+0x9e>
 8003b44:	2300      	movs	r3, #0
 8003b46:	60a3      	str	r3, [r4, #8]
 8003b48:	6963      	ldr	r3, [r4, #20]
 8003b4a:	425b      	negs	r3, r3
 8003b4c:	61a3      	str	r3, [r4, #24]
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	b943      	cbnz	r3, 8003b64 <__swsetup_r+0xa8>
 8003b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b56:	d1c4      	bne.n	8003ae2 <__swsetup_r+0x26>
 8003b58:	bd38      	pop	{r3, r4, r5, pc}
 8003b5a:	0781      	lsls	r1, r0, #30
 8003b5c:	bf58      	it	pl
 8003b5e:	6963      	ldrpl	r3, [r4, #20]
 8003b60:	60a3      	str	r3, [r4, #8]
 8003b62:	e7f4      	b.n	8003b4e <__swsetup_r+0x92>
 8003b64:	2000      	movs	r0, #0
 8003b66:	e7f7      	b.n	8003b58 <__swsetup_r+0x9c>
 8003b68:	20000064 	.word	0x20000064

08003b6c <__swhatbuf_r>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	460c      	mov	r4, r1
 8003b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b74:	2900      	cmp	r1, #0
 8003b76:	b096      	sub	sp, #88	; 0x58
 8003b78:	4615      	mov	r5, r2
 8003b7a:	461e      	mov	r6, r3
 8003b7c:	da0d      	bge.n	8003b9a <__swhatbuf_r+0x2e>
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b8e:	2340      	movne	r3, #64	; 0x40
 8003b90:	2000      	movs	r0, #0
 8003b92:	6031      	str	r1, [r6, #0]
 8003b94:	602b      	str	r3, [r5, #0]
 8003b96:	b016      	add	sp, #88	; 0x58
 8003b98:	bd70      	pop	{r4, r5, r6, pc}
 8003b9a:	466a      	mov	r2, sp
 8003b9c:	f000 f858 	bl	8003c50 <_fstat_r>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	dbec      	blt.n	8003b7e <__swhatbuf_r+0x12>
 8003ba4:	9901      	ldr	r1, [sp, #4]
 8003ba6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003baa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003bae:	4259      	negs	r1, r3
 8003bb0:	4159      	adcs	r1, r3
 8003bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb6:	e7eb      	b.n	8003b90 <__swhatbuf_r+0x24>

08003bb8 <__smakebuf_r>:
 8003bb8:	898b      	ldrh	r3, [r1, #12]
 8003bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bbc:	079d      	lsls	r5, r3, #30
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	d507      	bpl.n	8003bd4 <__smakebuf_r+0x1c>
 8003bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	6123      	str	r3, [r4, #16]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	6163      	str	r3, [r4, #20]
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	ab01      	add	r3, sp, #4
 8003bd6:	466a      	mov	r2, sp
 8003bd8:	f7ff ffc8 	bl	8003b6c <__swhatbuf_r>
 8003bdc:	9900      	ldr	r1, [sp, #0]
 8003bde:	4605      	mov	r5, r0
 8003be0:	4630      	mov	r0, r6
 8003be2:	f7ff fc21 	bl	8003428 <_malloc_r>
 8003be6:	b948      	cbnz	r0, 8003bfc <__smakebuf_r+0x44>
 8003be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bec:	059a      	lsls	r2, r3, #22
 8003bee:	d4ef      	bmi.n	8003bd0 <__smakebuf_r+0x18>
 8003bf0:	f023 0303 	bic.w	r3, r3, #3
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	81a3      	strh	r3, [r4, #12]
 8003bfa:	e7e3      	b.n	8003bc4 <__smakebuf_r+0xc>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	6020      	str	r0, [r4, #0]
 8003c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	9b00      	ldr	r3, [sp, #0]
 8003c08:	6163      	str	r3, [r4, #20]
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	6120      	str	r0, [r4, #16]
 8003c0e:	b15b      	cbz	r3, 8003c28 <__smakebuf_r+0x70>
 8003c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f82d 	bl	8003c74 <_isatty_r>
 8003c1a:	b128      	cbz	r0, 8003c28 <__smakebuf_r+0x70>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	431d      	orrs	r5, r3
 8003c2c:	81a5      	strh	r5, [r4, #12]
 8003c2e:	e7cf      	b.n	8003bd0 <__smakebuf_r+0x18>

08003c30 <_close_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d06      	ldr	r5, [pc, #24]	; (8003c4c <_close_r+0x1c>)
 8003c34:	2300      	movs	r3, #0
 8003c36:	4604      	mov	r4, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	602b      	str	r3, [r5, #0]
 8003c3c:	f7fc ff47 	bl	8000ace <_close>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_close_r+0x1a>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_close_r+0x1a>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	200002e4 	.word	0x200002e4

08003c50 <_fstat_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d07      	ldr	r5, [pc, #28]	; (8003c70 <_fstat_r+0x20>)
 8003c54:	2300      	movs	r3, #0
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	602b      	str	r3, [r5, #0]
 8003c5e:	f7fc ff42 	bl	8000ae6 <_fstat>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d102      	bne.n	8003c6c <_fstat_r+0x1c>
 8003c66:	682b      	ldr	r3, [r5, #0]
 8003c68:	b103      	cbz	r3, 8003c6c <_fstat_r+0x1c>
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	bf00      	nop
 8003c70:	200002e4 	.word	0x200002e4

08003c74 <_isatty_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	4d06      	ldr	r5, [pc, #24]	; (8003c90 <_isatty_r+0x1c>)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	602b      	str	r3, [r5, #0]
 8003c80:	f7fc ff41 	bl	8000b06 <_isatty>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_isatty_r+0x1a>
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_isatty_r+0x1a>
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	200002e4 	.word	0x200002e4

08003c94 <_lseek_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4d07      	ldr	r5, [pc, #28]	; (8003cb4 <_lseek_r+0x20>)
 8003c98:	4604      	mov	r4, r0
 8003c9a:	4608      	mov	r0, r1
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	602a      	str	r2, [r5, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f7fc ff3a 	bl	8000b1c <_lseek>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d102      	bne.n	8003cb2 <_lseek_r+0x1e>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	b103      	cbz	r3, 8003cb2 <_lseek_r+0x1e>
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	200002e4 	.word	0x200002e4

08003cb8 <_read_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d07      	ldr	r5, [pc, #28]	; (8003cd8 <_read_r+0x20>)
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	602a      	str	r2, [r5, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f7fc fec8 	bl	8000a5c <_read>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_read_r+0x1e>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_read_r+0x1e>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	200002e4 	.word	0x200002e4

08003cdc <_sbrk_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	; (8003cf8 <_sbrk_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fc ff26 	bl	8000b38 <_sbrk>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_sbrk_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_sbrk_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	200002e4 	.word	0x200002e4

08003cfc <_write_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4d07      	ldr	r5, [pc, #28]	; (8003d1c <_write_r+0x20>)
 8003d00:	4604      	mov	r4, r0
 8003d02:	4608      	mov	r0, r1
 8003d04:	4611      	mov	r1, r2
 8003d06:	2200      	movs	r2, #0
 8003d08:	602a      	str	r2, [r5, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7fc fec3 	bl	8000a96 <_write>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_write_r+0x1e>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_write_r+0x1e>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	200002e4 	.word	0x200002e4

08003d20 <_free_r>:
 8003d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d22:	2900      	cmp	r1, #0
 8003d24:	d044      	beq.n	8003db0 <_free_r+0x90>
 8003d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2a:	9001      	str	r0, [sp, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8003d32:	bfb8      	it	lt
 8003d34:	18e4      	addlt	r4, r4, r3
 8003d36:	f7ff fe35 	bl	80039a4 <__malloc_lock>
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <_free_r+0x94>)
 8003d3c:	9801      	ldr	r0, [sp, #4]
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	b933      	cbnz	r3, 8003d50 <_free_r+0x30>
 8003d42:	6063      	str	r3, [r4, #4]
 8003d44:	6014      	str	r4, [r2, #0]
 8003d46:	b003      	add	sp, #12
 8003d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d4c:	f7ff be30 	b.w	80039b0 <__malloc_unlock>
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	d908      	bls.n	8003d66 <_free_r+0x46>
 8003d54:	6825      	ldr	r5, [r4, #0]
 8003d56:	1961      	adds	r1, r4, r5
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	bf01      	itttt	eq
 8003d5c:	6819      	ldreq	r1, [r3, #0]
 8003d5e:	685b      	ldreq	r3, [r3, #4]
 8003d60:	1949      	addeq	r1, r1, r5
 8003d62:	6021      	streq	r1, [r4, #0]
 8003d64:	e7ed      	b.n	8003d42 <_free_r+0x22>
 8003d66:	461a      	mov	r2, r3
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b10b      	cbz	r3, 8003d70 <_free_r+0x50>
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	d9fa      	bls.n	8003d66 <_free_r+0x46>
 8003d70:	6811      	ldr	r1, [r2, #0]
 8003d72:	1855      	adds	r5, r2, r1
 8003d74:	42a5      	cmp	r5, r4
 8003d76:	d10b      	bne.n	8003d90 <_free_r+0x70>
 8003d78:	6824      	ldr	r4, [r4, #0]
 8003d7a:	4421      	add	r1, r4
 8003d7c:	1854      	adds	r4, r2, r1
 8003d7e:	42a3      	cmp	r3, r4
 8003d80:	6011      	str	r1, [r2, #0]
 8003d82:	d1e0      	bne.n	8003d46 <_free_r+0x26>
 8003d84:	681c      	ldr	r4, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	6053      	str	r3, [r2, #4]
 8003d8a:	440c      	add	r4, r1
 8003d8c:	6014      	str	r4, [r2, #0]
 8003d8e:	e7da      	b.n	8003d46 <_free_r+0x26>
 8003d90:	d902      	bls.n	8003d98 <_free_r+0x78>
 8003d92:	230c      	movs	r3, #12
 8003d94:	6003      	str	r3, [r0, #0]
 8003d96:	e7d6      	b.n	8003d46 <_free_r+0x26>
 8003d98:	6825      	ldr	r5, [r4, #0]
 8003d9a:	1961      	adds	r1, r4, r5
 8003d9c:	428b      	cmp	r3, r1
 8003d9e:	bf04      	itt	eq
 8003da0:	6819      	ldreq	r1, [r3, #0]
 8003da2:	685b      	ldreq	r3, [r3, #4]
 8003da4:	6063      	str	r3, [r4, #4]
 8003da6:	bf04      	itt	eq
 8003da8:	1949      	addeq	r1, r1, r5
 8003daa:	6021      	streq	r1, [r4, #0]
 8003dac:	6054      	str	r4, [r2, #4]
 8003dae:	e7ca      	b.n	8003d46 <_free_r+0x26>
 8003db0:	b003      	add	sp, #12
 8003db2:	bd30      	pop	{r4, r5, pc}
 8003db4:	200002dc 	.word	0x200002dc

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
