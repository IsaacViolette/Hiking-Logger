
PCBv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c50  0800cb80  0800cb80  0001cb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d0  0800e7d0  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7d0  0800e7d0  0001e7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7d8  0800e7d8  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7d8  0800e7d8  0001e7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7dc  0800e7dc  0001e7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e7e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  20000208  0800e9e8  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fbc  0800e9e8  00020fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118cf  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5d  00000000  00000000  00031b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  000348a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc9  00000000  00000000  00035810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd55  00000000  00000000  000363d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146b3  00000000  00000000  0005212e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5048  00000000  00000000  000667e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005798  00000000  00000000  0010b82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00110fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb64 	.word	0x0800cb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800cb64 	.word	0x0800cb64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <ddm2dd>:

#include <stdio.h>
#include <math.h>
#define RADIUS_OF_EARTH 6371000 // Earth's radius in meters

double ddm2dd(double ddm) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0b00 	vstr	d0, [r7]
    double degrees = floor(ddm / 100.0);
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <ddm2dd+0x8c>)
 8001020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001024:	f7ff fc22 	bl	800086c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	ec43 2b17 	vmov	d7, r2, r3
 8001030:	eeb0 0a47 	vmov.f32	s0, s14
 8001034:	eef0 0a67 	vmov.f32	s1, s15
 8001038:	f00a fb1e 	bl	800b678 <floor>
 800103c:	ed87 0b06 	vstr	d0, [r7, #24]
    double minutes = ddm - degrees * 100.0;
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <ddm2dd+0x8c>)
 8001046:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800104a:	f7ff fae5 	bl	8000618 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001056:	f7ff f927 	bl	80002a8 <__aeabi_dsub>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double dd = degrees + minutes / 60.0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <ddm2dd+0x90>)
 8001068:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800106c:	f7ff fbfe 	bl	800086c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001078:	f7ff f918 	bl	80002ac <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return dd;
 8001084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001088:	ec43 2b17 	vmov	d7, r2, r3
}
 800108c:	eeb0 0a47 	vmov.f32	s0, s14
 8001090:	eef0 0a67 	vmov.f32	s1, s15
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40590000 	.word	0x40590000
 80010a0:	404e0000 	.word	0x404e0000
 80010a4:	00000000 	.word	0x00000000

080010a8 <degreesToRadians>:

// Function to convert degrees to radians
double degreesToRadians(double degrees) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	ed87 0b00 	vstr	d0, [r7]
    return degrees * M_PI / 180.0;
 80010b2:	a30e      	add	r3, pc, #56	; (adr r3, 80010ec <degreesToRadians+0x44>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010bc:	f7ff faac 	bl	8000618 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <degreesToRadians+0x40>)
 80010ce:	f7ff fbcd 	bl	800086c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40668000 	.word	0x40668000
 80010ec:	54442d18 	.word	0x54442d18
 80010f0:	400921fb 	.word	0x400921fb
 80010f4:	00000000 	.word	0x00000000

080010f8 <calculateDistance>:

// Function to calculate the distance between two coordinates using Haversine formula
double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
 80010f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010fc:	ed2d 8b02 	vpush	{d8}
 8001100:	b092      	sub	sp, #72	; 0x48
 8001102:	af00      	add	r7, sp, #0
 8001104:	ed87 0b06 	vstr	d0, [r7, #24]
 8001108:	ed87 1b04 	vstr	d1, [r7, #16]
 800110c:	ed87 2b02 	vstr	d2, [r7, #8]
 8001110:	ed87 3b00 	vstr	d3, [r7]
    // Convert latitude and longitude from degrees to radians
    lat1 = degreesToRadians(ddm2dd(lat1));
 8001114:	ed97 0b06 	vldr	d0, [r7, #24]
 8001118:	f7ff ff7a 	bl	8001010 <ddm2dd>
 800111c:	eeb0 7a40 	vmov.f32	s14, s0
 8001120:	eef0 7a60 	vmov.f32	s15, s1
 8001124:	eeb0 0a47 	vmov.f32	s0, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	f7ff ffbc 	bl	80010a8 <degreesToRadians>
 8001130:	ed87 0b06 	vstr	d0, [r7, #24]
    lon1 = degreesToRadians(ddm2dd(lon1));
 8001134:	ed97 0b04 	vldr	d0, [r7, #16]
 8001138:	f7ff ff6a 	bl	8001010 <ddm2dd>
 800113c:	eeb0 7a40 	vmov.f32	s14, s0
 8001140:	eef0 7a60 	vmov.f32	s15, s1
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	eef0 0a67 	vmov.f32	s1, s15
 800114c:	f7ff ffac 	bl	80010a8 <degreesToRadians>
 8001150:	ed87 0b04 	vstr	d0, [r7, #16]
    lat2 = degreesToRadians(ddm2dd(lat2));
 8001154:	ed97 0b02 	vldr	d0, [r7, #8]
 8001158:	f7ff ff5a 	bl	8001010 <ddm2dd>
 800115c:	eeb0 7a40 	vmov.f32	s14, s0
 8001160:	eef0 7a60 	vmov.f32	s15, s1
 8001164:	eeb0 0a47 	vmov.f32	s0, s14
 8001168:	eef0 0a67 	vmov.f32	s1, s15
 800116c:	f7ff ff9c 	bl	80010a8 <degreesToRadians>
 8001170:	ed87 0b02 	vstr	d0, [r7, #8]
    lon2 = degreesToRadians(ddm2dd(lon2));
 8001174:	ed97 0b00 	vldr	d0, [r7]
 8001178:	f7ff ff4a 	bl	8001010 <ddm2dd>
 800117c:	eeb0 7a40 	vmov.f32	s14, s0
 8001180:	eef0 7a60 	vmov.f32	s15, s1
 8001184:	eeb0 0a47 	vmov.f32	s0, s14
 8001188:	eef0 0a67 	vmov.f32	s1, s15
 800118c:	f7ff ff8c 	bl	80010a8 <degreesToRadians>
 8001190:	ed87 0b00 	vstr	d0, [r7]

    // Haversine formula
    double dlat = lat2 - lat1;
 8001194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800119c:	f7ff f884 	bl	80002a8 <__aeabi_dsub>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double dlon = lon2 - lon1;
 80011a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011b0:	f7ff f87a 	bl	80002a8 <__aeabi_dsub>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double a = sin(dlat/2) * sin(dlat/2) + cos(lat1) * cos(lat2) * sin(dlon/2) * sin(dlon/2);
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011c8:	f7ff fb50 	bl	800086c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	ec43 2b17 	vmov	d7, r2, r3
 80011d4:	eeb0 0a47 	vmov.f32	s0, s14
 80011d8:	eef0 0a67 	vmov.f32	s1, s15
 80011dc:	f00a f918 	bl	800b410 <sin>
 80011e0:	ec55 4b10 	vmov	r4, r5, d0
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011f0:	f7ff fb3c 	bl	800086c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ec43 2b17 	vmov	d7, r2, r3
 80011fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001200:	eef0 0a67 	vmov.f32	s1, s15
 8001204:	f00a f904 	bl	800b410 <sin>
 8001208:	ec53 2b10 	vmov	r2, r3, d0
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff fa02 	bl	8000618 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4614      	mov	r4, r2
 800121a:	461d      	mov	r5, r3
 800121c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001220:	f00a f8a2 	bl	800b368 <cos>
 8001224:	ec59 8b10 	vmov	r8, r9, d0
 8001228:	ed97 0b02 	vldr	d0, [r7, #8]
 800122c:	f00a f89c 	bl	800b368 <cos>
 8001230:	ec53 2b10 	vmov	r2, r3, d0
 8001234:	4640      	mov	r0, r8
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f9ee 	bl	8000618 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4690      	mov	r8, r2
 8001242:	4699      	mov	r9, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001250:	f7ff fb0c 	bl	800086c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	ec43 2b17 	vmov	d7, r2, r3
 800125c:	eeb0 0a47 	vmov.f32	s0, s14
 8001260:	eef0 0a67 	vmov.f32	s1, s15
 8001264:	f00a f8d4 	bl	800b410 <sin>
 8001268:	ec53 2b10 	vmov	r2, r3, d0
 800126c:	4640      	mov	r0, r8
 800126e:	4649      	mov	r1, r9
 8001270:	f7ff f9d2 	bl	8000618 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4690      	mov	r8, r2
 800127a:	4699      	mov	r9, r3
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001284:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001288:	f7ff faf0 	bl	800086c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	ec43 2b17 	vmov	d7, r2, r3
 8001294:	eeb0 0a47 	vmov.f32	s0, s14
 8001298:	eef0 0a67 	vmov.f32	s1, s15
 800129c:	f00a f8b8 	bl	800b410 <sin>
 80012a0:	ec53 2b10 	vmov	r2, r3, d0
 80012a4:	4640      	mov	r0, r8
 80012a6:	4649      	mov	r1, r9
 80012a8:	f7ff f9b6 	bl	8000618 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7fe fffa 	bl	80002ac <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 80012c0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80012c4:	f00a f824 	bl	800b310 <sqrt>
 80012c8:	eeb0 8a40 	vmov.f32	s16, s0
 80012cc:	eef0 8a60 	vmov.f32	s17, s1
 80012d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012d4:	f04f 0000 	mov.w	r0, #0
 80012d8:	4921      	ldr	r1, [pc, #132]	; (8001360 <calculateDistance+0x268>)
 80012da:	f7fe ffe5 	bl	80002a8 <__aeabi_dsub>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	ec43 2b17 	vmov	d7, r2, r3
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	f00a f80f 	bl	800b310 <sqrt>
 80012f2:	eeb0 7a40 	vmov.f32	s14, s0
 80012f6:	eef0 7a60 	vmov.f32	s15, s1
 80012fa:	eeb0 1a47 	vmov.f32	s2, s14
 80012fe:	eef0 1a67 	vmov.f32	s3, s15
 8001302:	eeb0 0a48 	vmov.f32	s0, s16
 8001306:	eef0 0a68 	vmov.f32	s1, s17
 800130a:	f009 ffff 	bl	800b30c <atan2>
 800130e:	ec51 0b10 	vmov	r0, r1, d0
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	f7fe ffc9 	bl	80002ac <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double distance = RADIUS_OF_EARTH * c;
 8001322:	a30d      	add	r3, pc, #52	; (adr r3, 8001358 <calculateDistance+0x260>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800132c:	f7ff f974 	bl	8000618 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return distance;
 8001338:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800133c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001340:	eeb0 0a47 	vmov.f32	s0, s14
 8001344:	eef0 0a67 	vmov.f32	s1, s15
 8001348:	3748      	adds	r7, #72	; 0x48
 800134a:	46bd      	mov	sp, r7
 800134c:	ecbd 8b02 	vpop	{d8}
 8001350:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	00000000 	.word	0x00000000
 800135c:	41584dae 	.word	0x41584dae
 8001360:	3ff00000 	.word	0x3ff00000

08001364 <I2C_Start>:
//    -- Automatically generate a STOP condition after all bytes have been transmitted 
// Direction = 0: Master requests a write transfer
// Direction = 1: Master requests a read transfer
//=============================================================================== 

int8_t I2C_Start(I2C_TypeDef * I2Cx, uint32_t DevAddress, uint8_t Size, uint8_t Direction) {	
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	460b      	mov	r3, r1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	4613      	mov	r3, r2
 8001378:	71bb      	strb	r3, [r7, #6]
	
	// Direction = 0: Master requests a write transfer
	// Direction = 1: Master requests a read transfer
	
	uint32_t tmpreg = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
	
	// This bit is set by software, and cleared by hardware after the Start followed by the address
	// sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0.
	tmpreg = I2Cx->CR2;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	617b      	str	r3, [r7, #20]
	
	tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <I2C_Start+0x74>)
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
	
	if (Direction == READ_FROM_SLAVE)
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d104      	bne.n	800139c <I2C_Start+0x38>
		tmpreg |= I2C_CR2_RD_WRN;  // Read from Slave
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e003      	b.n	80013a4 <I2C_Start+0x40>
	else
		tmpreg &= ~I2C_CR2_RD_WRN; // Write to Slave
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013a2:	617b      	str	r3, [r7, #20]
		
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES));
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013b2:	4313      	orrs	r3, r2
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
	
	tmpreg |= I2C_CR2_START;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c0:	617b      	str	r3, [r7, #20]
	// RELOAD
	// 0: The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow).
	// 1: The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded).
	// tmpreg |= I2C_CR2_RELOAD;
	
	I2Cx->CR2 = tmpreg; 
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	605a      	str	r2, [r3, #4]
//	}
//	
//	if ( (I2Cx->ISR & I2C_ISR_NACKF) == I2C_ISR_NACKF )
//		return -1;  // Failed
	
   	return 0;  // Success
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	fc009800 	.word	0xfc009800

080013dc <I2C_Stop>:

//===============================================================================
//                           I2C Stop
//=============================================================================== 
void I2C_Stop(I2C_TypeDef * I2Cx){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	// Master: Generate STOP bit after the current byte has been transferred 
	I2Cx->CR2 |= I2C_CR2_STOP;								
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]
	// Wait until STOPF flag is reset
	while( (I2Cx->ISR & I2C_ISR_STOPF) == 0 ); 
 80013f0:	bf00      	nop
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f9      	beq.n	80013f2 <I2C_Stop+0x16>
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <I2C_WaitLineIdle>:

//===============================================================================
//                           Wait for the bus is ready
//=============================================================================== 
void I2C_WaitLineIdle(I2C_TypeDef * I2Cx){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	// Wait until I2C bus is ready
	while( (I2Cx->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY );	// If busy, wait
 8001414:	bf00      	nop
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001422:	d0f8      	beq.n	8001416 <I2C_WaitLineIdle+0xa>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <I2C_SendData>:

//===============================================================================
//                           I2C Send Data
//=============================================================================== 
int8_t I2C_SendData(I2C_TypeDef * I2Cx, uint8_t DeviceAddress, uint8_t *pData, uint8_t Size) {
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	461a      	mov	r2, r3
 800143e:	460b      	mov	r3, r1
 8001440:	72fb      	strb	r3, [r7, #11]
 8001442:	4613      	mov	r3, r2
 8001444:	72bb      	strb	r3, [r7, #10]
	int i;
	
	if (Size <= 0 || pData == NULL) 
 8001446:	7abb      	ldrb	r3, [r7, #10]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <I2C_SendData+0x20>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <I2C_SendData+0x26>
		return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e040      	b.n	80014da <I2C_SendData+0xa8>
	
	I2C_WaitLineIdle(I2Cx);
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff ffd7 	bl	800140c <I2C_WaitLineIdle>
	
	if (I2C_Start(I2Cx, DeviceAddress, Size, WRITE_TO_SLAVE) < 0 )
 800145e:	7af9      	ldrb	r1, [r7, #11]
 8001460:	7aba      	ldrb	r2, [r7, #10]
 8001462:	2300      	movs	r3, #0
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff ff7d 	bl	8001364 <I2C_Start>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	da02      	bge.n	8001476 <I2C_SendData+0x44>
		return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	e031      	b.n	80014da <I2C_SendData+0xa8>
	// Send Data
	// Write the first data in DR register
	// while((I2Cx->ISR & I2C_ISR_TXE) == 0);
	// I2Cx->TXDR = pData[0] & I2C_TXDR_TXDATA;  

	for (i = 0; i < Size; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e010      	b.n	800149e <I2C_SendData+0x6c>
		// TXE is set by hardware when the I2C_TXDR register is empty. It is cleared when the next
		// data to be sent is written in the I2C_TXDR register.
		while( (I2Cx->ISR & I2C_ISR_TXE) == 0 ); 
 800147c:	bf00      	nop
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f9      	beq.n	800147e <I2C_SendData+0x4c>
		// TXIS bit is set by hardware when the I2C_TXDR register is empty and the data to be
		// transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be
		// sent is written in the I2C_TXDR register.
		// The TXIS flag is not set when a NACK is received.
		// while((I2Cx->ISR & I2C_ISR_TXIS) == 0 );
		I2Cx->TXDR = pData[i] & I2C_TXDR_TXDATA;  // TXE is cleared by writing to the TXDR register.
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < Size; i++) {
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbea      	blt.n	800147c <I2C_SendData+0x4a>
	}
	
	// Wait until TC flag is set 
	while((I2Cx->ISR & I2C_ISR_TC) == 0 && (I2Cx->ISR & I2C_ISR_NACKF) == 0);
 80014a6:	bf00      	nop
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <I2C_SendData+0x8e>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f3      	beq.n	80014a8 <I2C_SendData+0x76>
	
	if ( (I2Cx->ISR & I2C_ISR_NACKF) != 0 )
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <I2C_SendData+0xa0>
		return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	e003      	b.n	80014da <I2C_SendData+0xa8>

	I2C_Stop(I2Cx);
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ff82 	bl	80013dc <I2C_Stop>
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <I2C1_EV_IRQHandler>:
	
	return 0;
}


void I2C1_EV_IRQHandler(void){
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
	// I2C1->ICR |= 
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <SquareRoot>:
 *
 * \param[in] a_nInput - unsigned integer for which to find the square root
 *
 * \return Integer square root of the input value.
 */
static uint32_t SquareRoot(uint32_t a_nInput) {
 80014fe:	b480      	push	{r7}
 8001500:	b087      	sub	sp, #28
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
    uint32_t op  = a_nInput;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	617b      	str	r3, [r7, #20]
    uint32_t res = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
    uint32_t one = 1uL << 30; // The second-to-top bit is set: use 1u << 14 for uint16_t type; use 1uL<<30 for uint32_t type
 800150e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001512:	60fb      	str	r3, [r7, #12]

    // "one" starts at the highest power of four <= than the argument.
    while (one > op) {
 8001514:	e002      	b.n	800151c <SquareRoot+0x1e>
        one >>= 2;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
    while (one > op) {
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f8      	bhi.n	8001516 <SquareRoot+0x18>
    }

    while (one != 0) {
 8001524:	e016      	b.n	8001554 <SquareRoot+0x56>
        if (op >= res + one) {
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	429a      	cmp	r2, r3
 8001530:	d30a      	bcc.n	8001548 <SquareRoot+0x4a>
            op  = op - (res + one);
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
            res = res +  2 * one;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4413      	add	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        res >>= 1;
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	613b      	str	r3, [r7, #16]
        one >>= 2;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
    while (one != 0) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e5      	bne.n	8001526 <SquareRoot+0x28>
    }
    return res;
 800155a:	693b      	ldr	r3, [r7, #16]
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <get_autocorr_peak_stats>:
//take a look at the original autocorrelation signal at index i and see if
//its a real peak or if its just a fake "noisy" peak corresponding to
//non-walking. basically just count the number of points of the
//autocorrelation peak to the right and left of the peak. this function gets
//the number of points to the right and left of the peak, as well as the delta amplitude
static void get_autocorr_peak_stats(int64_t *autocorr_buff, uint8_t *neg_slope_count, int64_t *delta_amplitude_right, uint8_t *pos_slope_count, int64_t *delta_amplitude_left, uint8_t peak_ind) {
 8001568:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800156c:	b088      	sub	sp, #32
 800156e:	af00      	add	r7, sp, #0
 8001570:	6178      	str	r0, [r7, #20]
 8001572:	6139      	str	r1, [r7, #16]
 8001574:	60fa      	str	r2, [r7, #12]
 8001576:	60bb      	str	r3, [r7, #8]

    //first look to the right of the peak. walk forward until the slope begins decreasing
    uint8_t  neg_slope_ind = peak_ind;
 8001578:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800157c:	77fb      	strb	r3, [r7, #31]
    uint16_t loop_limit    = NUM_AUTOCORR_LAGS-1;
 800157e:	2331      	movs	r3, #49	; 0x31
 8001580:	83bb      	strh	r3, [r7, #28]
    while ((autocorr_buff[neg_slope_ind+1] - autocorr_buff[neg_slope_ind] < 0) && (neg_slope_ind < loop_limit)) {
 8001582:	e008      	b.n	8001596 <get_autocorr_peak_stats+0x2e>
        *neg_slope_count = *neg_slope_count + 1;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	701a      	strb	r2, [r3, #0]
        neg_slope_ind    = neg_slope_ind + 1;
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	3301      	adds	r3, #1
 8001594:	77fb      	strb	r3, [r7, #31]
    while ((autocorr_buff[neg_slope_ind+1] - autocorr_buff[neg_slope_ind] < 0) && (neg_slope_ind < loop_limit)) {
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	3301      	adds	r3, #1
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4413      	add	r3, r2
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	1a86      	subs	r6, r0, r2
 80015b2:	603e      	str	r6, [r7, #0]
 80015b4:	eb61 0303 	sbc.w	r3, r1, r3
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da04      	bge.n	80015ca <get_autocorr_peak_stats+0x62>
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	8bba      	ldrh	r2, [r7, #28]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d8dc      	bhi.n	8001584 <get_autocorr_peak_stats+0x1c>
    }

    //get the delta amplitude between peak and right trough
    *delta_amplitude_right = autocorr_buff[peak_ind] - autocorr_buff[neg_slope_ind];
 80015ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4413      	add	r3, r2
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	7ffb      	ldrb	r3, [r7, #31]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	ebb0 0a02 	subs.w	sl, r0, r2
 80015e8:	eb61 0b03 	sbc.w	fp, r1, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	e9c3 ab00 	strd	sl, fp, [r3]

    //next look to the left of the peak. walk backward until the slope begins increasing
    uint8_t pos_slope_ind = peak_ind;
 80015f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80015f6:	77bb      	strb	r3, [r7, #30]
    loop_limit    = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	83bb      	strh	r3, [r7, #28]
    while ((autocorr_buff[pos_slope_ind] - autocorr_buff[pos_slope_ind-1] > 0) && (pos_slope_ind > loop_limit)) {
 80015fc:	e008      	b.n	8001610 <get_autocorr_peak_stats+0xa8>
        *pos_slope_count = *pos_slope_count + 1;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	701a      	strb	r2, [r3, #0]
        pos_slope_ind    = pos_slope_ind - 1;
 800160a:	7fbb      	ldrb	r3, [r7, #30]
 800160c:	3b01      	subs	r3, #1
 800160e:	77bb      	strb	r3, [r7, #30]
    while ((autocorr_buff[pos_slope_ind] - autocorr_buff[pos_slope_ind-1] > 0) && (pos_slope_ind > loop_limit)) {
 8001610:	7fbb      	ldrb	r3, [r7, #30]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4413      	add	r3, r2
 8001618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161c:	7fbb      	ldrb	r3, [r7, #30]
 800161e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001622:	3b01      	subs	r3, #1
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	1a84      	subs	r4, r0, r2
 8001630:	eb61 0503 	sbc.w	r5, r1, r3
 8001634:	2c01      	cmp	r4, #1
 8001636:	f175 0300 	sbcs.w	r3, r5, #0
 800163a:	db04      	blt.n	8001646 <get_autocorr_peak_stats+0xde>
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	b29b      	uxth	r3, r3
 8001640:	8bba      	ldrh	r2, [r7, #28]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3db      	bcc.n	80015fe <get_autocorr_peak_stats+0x96>
    }

    //get the delta amplitude between the peak and the left trough
    *delta_amplitude_left = autocorr_buff[peak_ind] - autocorr_buff[pos_slope_ind];
 8001646:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4413      	add	r3, r2
 8001650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001654:	7fbb      	ldrb	r3, [r7, #30]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	ebb0 0802 	subs.w	r8, r0, r2
 8001664:	eb61 0903 	sbc.w	r9, r1, r3
 8001668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166a:	e9c3 8900 	strd	r8, r9, [r3]
}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001678:	4770      	bx	lr

0800167a <get_precise_peakind>:


//use the original autocorrelation signal to hone in on the
//exact peak index. this corresponds to the point where the points to the
//left and right are less than the current point
static uint8_t get_precise_peakind(int64_t *autocorr_buff, uint8_t peak_ind) {
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
    uint8_t loop_limit = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
    if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1])) {
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	78f9      	ldrb	r1, [r7, #3]
 8001698:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800169c:	3901      	subs	r1, #1
 800169e:	00c9      	lsls	r1, r1, #3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4401      	add	r1, r0
 80016a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a8:	4290      	cmp	r0, r2
 80016aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80016ae:	da11      	bge.n	80016d4 <get_precise_peakind+0x5a>
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	78f9      	ldrb	r1, [r7, #3]
 80016be:	3101      	adds	r1, #1
 80016c0:	00c9      	lsls	r1, r1, #3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4401      	add	r1, r0
 80016c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ca:	4290      	cmp	r0, r2
 80016cc:	eb71 0303 	sbcs.w	r3, r1, r3
 80016d0:	f2c0 8087 	blt.w	80017e2 <get_precise_peakind+0x168>
        //peak_ind is perfectly set at the peak. nothing to do
    }
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	78f9      	ldrb	r1, [r7, #3]
 80016e2:	3101      	adds	r1, #1
 80016e4:	00c9      	lsls	r1, r1, #3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4401      	add	r1, r0
 80016ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ee:	4290      	cmp	r0, r2
 80016f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80016f4:	da43      	bge.n	800177e <get_precise_peakind+0x104>
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001708:	3b01      	subs	r3, #1
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	4290      	cmp	r0, r2
 8001716:	eb71 0303 	sbcs.w	r3, r1, r3
 800171a:	da30      	bge.n	800177e <get_precise_peakind+0x104>
        //peak is to the left. keep moving in that direction
        loop_limit = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1]) && (loop_limit < 10)) {
 8001720:	e005      	b.n	800172e <get_precise_peakind+0xb4>
            peak_ind = peak_ind - 1;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	3b01      	subs	r3, #1
 8001726:	70fb      	strb	r3, [r7, #3]
            loop_limit++;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1]) && (loop_limit < 10)) {
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	78f9      	ldrb	r1, [r7, #3]
 800173c:	3101      	adds	r1, #1
 800173e:	00c9      	lsls	r1, r1, #3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4401      	add	r1, r0
 8001744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001748:	4290      	cmp	r0, r2
 800174a:	eb71 0303 	sbcs.w	r3, r1, r3
 800174e:	da47      	bge.n	80017e0 <get_precise_peakind+0x166>
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001762:	3b01      	subs	r3, #1
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	4290      	cmp	r0, r2
 8001770:	eb71 0303 	sbcs.w	r3, r1, r3
 8001774:	da34      	bge.n	80017e0 <get_precise_peakind+0x166>
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b09      	cmp	r3, #9
 800177a:	d9d2      	bls.n	8001722 <get_precise_peakind+0xa8>
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 800177c:	e030      	b.n	80017e0 <get_precise_peakind+0x166>
        }
    }
    else {
        //peak is to the right. keep moving in that direction
        loop_limit = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind+1]) && (loop_limit < 10)) {
 8001782:	e005      	b.n	8001790 <get_precise_peakind+0x116>
            peak_ind = peak_ind + 1;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	3301      	adds	r3, #1
 8001788:	70fb      	strb	r3, [r7, #3]
            loop_limit++;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	3301      	adds	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind+1]) && (loop_limit < 10)) {
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	78f9      	ldrb	r1, [r7, #3]
 800179e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80017a2:	3901      	subs	r1, #1
 80017a4:	00c9      	lsls	r1, r1, #3
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4401      	add	r1, r0
 80017aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ae:	4290      	cmp	r0, r2
 80017b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80017b4:	da15      	bge.n	80017e2 <get_precise_peakind+0x168>
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	3301      	adds	r3, #1
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	4290      	cmp	r0, r2
 80017d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80017d6:	da04      	bge.n	80017e2 <get_precise_peakind+0x168>
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d9d2      	bls.n	8001784 <get_precise_peakind+0x10a>
 80017de:	e000      	b.n	80017e2 <get_precise_peakind+0x168>
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 80017e0:	bf00      	nop
        }
    }
    return peak_ind;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <derivative>:


//calculate deriviative via FIR filter
static void derivative(int64_t *autocorr_buff, int64_t *deriv) {
 80017f0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]

    uint8_t n          = 0;
 80017fc:	2100      	movs	r1, #0
 80017fe:	75f9      	strb	r1, [r7, #23]
    uint8_t i          = 0;
 8001800:	2100      	movs	r1, #0
 8001802:	75b9      	strb	r1, [r7, #22]
    int64_t temp_deriv = 0;
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    for (n = 0; n < NUM_AUTOCORR_LAGS; n++) {
 8001810:	2100      	movs	r1, #0
 8001812:	75f9      	strb	r1, [r7, #23]
 8001814:	e03e      	b.n	8001894 <derivative+0xa4>
        temp_deriv = 0;
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        for (i = 0; i < DERIV_FILT_LEN; i++) {
 8001822:	2100      	movs	r1, #0
 8001824:	75b9      	strb	r1, [r7, #22]
 8001826:	e027      	b.n	8001878 <derivative+0x88>
            if (n-i >= 0) {     //handle the case when n < filter length
 8001828:	7df8      	ldrb	r0, [r7, #23]
 800182a:	7db9      	ldrb	r1, [r7, #22]
 800182c:	1a41      	subs	r1, r0, r1
 800182e:	2900      	cmp	r1, #0
 8001830:	db1f      	blt.n	8001872 <derivative+0x82>
                temp_deriv += deriv_coeffs[i]*autocorr_buff[n-i];
 8001832:	7db9      	ldrb	r1, [r7, #22]
 8001834:	481c      	ldr	r0, [pc, #112]	; (80018a8 <derivative+0xb8>)
 8001836:	5641      	ldrsb	r1, [r0, r1]
 8001838:	b249      	sxtb	r1, r1
 800183a:	17c8      	asrs	r0, r1, #31
 800183c:	460c      	mov	r4, r1
 800183e:	4605      	mov	r5, r0
 8001840:	7df8      	ldrb	r0, [r7, #23]
 8001842:	7db9      	ldrb	r1, [r7, #22]
 8001844:	1a41      	subs	r1, r0, r1
 8001846:	00c9      	lsls	r1, r1, #3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4401      	add	r1, r0
 800184c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001850:	fb00 fc05 	mul.w	ip, r0, r5
 8001854:	fb04 f601 	mul.w	r6, r4, r1
 8001858:	4466      	add	r6, ip
 800185a:	fba4 2300 	umull	r2, r3, r4, r0
 800185e:	18f1      	adds	r1, r6, r3
 8001860:	460b      	mov	r3, r1
 8001862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001866:	eb10 0802 	adds.w	r8, r0, r2
 800186a:	eb41 0903 	adc.w	r9, r1, r3
 800186e:	e9c7 8902 	strd	r8, r9, [r7, #8]
        for (i = 0; i < DERIV_FILT_LEN; i++) {
 8001872:	7db9      	ldrb	r1, [r7, #22]
 8001874:	3101      	adds	r1, #1
 8001876:	75b9      	strb	r1, [r7, #22]
 8001878:	7db9      	ldrb	r1, [r7, #22]
 800187a:	2904      	cmp	r1, #4
 800187c:	d9d4      	bls.n	8001828 <derivative+0x38>
            }
        }
        deriv[n] = temp_deriv;
 800187e:	7df9      	ldrb	r1, [r7, #23]
 8001880:	00c9      	lsls	r1, r1, #3
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	1846      	adds	r6, r0, r1
 8001886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800188a:	e9c6 0100 	strd	r0, r1, [r6]
    for (n = 0; n < NUM_AUTOCORR_LAGS; n++) {
 800188e:	7df9      	ldrb	r1, [r7, #23]
 8001890:	3101      	adds	r1, #1
 8001892:	75f9      	strb	r1, [r7, #23]
 8001894:	7df9      	ldrb	r1, [r7, #23]
 8001896:	2931      	cmp	r1, #49	; 0x31
 8001898:	d9bd      	bls.n	8001816 <derivative+0x26>
    }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80018a6:	4770      	bx	lr
 80018a8:	20000000 	.word	0x20000000

080018ac <autocorr>:


//autocorrelation function
//this takes a lot of computation. there are efficient implementations, but this is more intuitive
static void autocorr(int32_t *lpf, int64_t *autocorr_buff) {
 80018ac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]

    uint8_t lag;
    uint16_t i;
    int64_t temp_ac;
    for (lag = 0; lag < NUM_AUTOCORR_LAGS; lag++) {
 80018b8:	2100      	movs	r1, #0
 80018ba:	75f9      	strb	r1, [r7, #23]
 80018bc:	e03f      	b.n	800193e <autocorr+0x92>
        temp_ac = 0;
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
        for (i = 0; i < NUM_TUPLES-lag; i++) {
 80018ca:	2100      	movs	r1, #0
 80018cc:	82b9      	strh	r1, [r7, #20]
 80018ce:	e025      	b.n	800191c <autocorr+0x70>
            temp_ac += (int64_t)lpf[i]*(int64_t)lpf[i+lag];
 80018d0:	8ab9      	ldrh	r1, [r7, #20]
 80018d2:	0089      	lsls	r1, r1, #2
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4401      	add	r1, r0
 80018d8:	6809      	ldr	r1, [r1, #0]
 80018da:	17c8      	asrs	r0, r1, #31
 80018dc:	460c      	mov	r4, r1
 80018de:	4605      	mov	r5, r0
 80018e0:	8ab8      	ldrh	r0, [r7, #20]
 80018e2:	7df9      	ldrb	r1, [r7, #23]
 80018e4:	4401      	add	r1, r0
 80018e6:	0089      	lsls	r1, r1, #2
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4401      	add	r1, r0
 80018ec:	6809      	ldr	r1, [r1, #0]
 80018ee:	17c8      	asrs	r0, r1, #31
 80018f0:	4688      	mov	r8, r1
 80018f2:	4681      	mov	r9, r0
 80018f4:	fb08 f005 	mul.w	r0, r8, r5
 80018f8:	fb04 f109 	mul.w	r1, r4, r9
 80018fc:	4401      	add	r1, r0
 80018fe:	fba4 2308 	umull	r2, r3, r4, r8
 8001902:	4419      	add	r1, r3
 8001904:	460b      	mov	r3, r1
 8001906:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190a:	eb10 0a02 	adds.w	sl, r0, r2
 800190e:	eb41 0b03 	adc.w	fp, r1, r3
 8001912:	e9c7 ab02 	strd	sl, fp, [r7, #8]
        for (i = 0; i < NUM_TUPLES-lag; i++) {
 8001916:	8ab9      	ldrh	r1, [r7, #20]
 8001918:	3101      	adds	r1, #1
 800191a:	82b9      	strh	r1, [r7, #20]
 800191c:	8ab8      	ldrh	r0, [r7, #20]
 800191e:	7df9      	ldrb	r1, [r7, #23]
 8001920:	f1c1 0150 	rsb	r1, r1, #80	; 0x50
 8001924:	4288      	cmp	r0, r1
 8001926:	dbd3      	blt.n	80018d0 <autocorr+0x24>
        }
        autocorr_buff[lag] = temp_ac;
 8001928:	7df9      	ldrb	r1, [r7, #23]
 800192a:	00c9      	lsls	r1, r1, #3
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	1846      	adds	r6, r0, r1
 8001930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001934:	e9c6 0100 	strd	r0, r1, [r6]
    for (lag = 0; lag < NUM_AUTOCORR_LAGS; lag++) {
 8001938:	7df9      	ldrb	r1, [r7, #23]
 800193a:	3101      	adds	r1, #1
 800193c:	75f9      	strb	r1, [r7, #23]
 800193e:	7df9      	ldrb	r1, [r7, #23]
 8001940:	2931      	cmp	r1, #49	; 0x31
 8001942:	d9bc      	bls.n	80018be <autocorr+0x12>
    }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001950:	4770      	bx	lr
	...

08001954 <remove_mean>:


//calculate and remove the mean
static void remove_mean(int32_t *lpf) {
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

    int32_t sum = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
    uint16_t i;
    for (i = 0; i < NUM_TUPLES; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	817b      	strh	r3, [r7, #10]
 8001964:	e00a      	b.n	800197c <remove_mean+0x28>
        sum += lpf[i];
 8001966:	897b      	ldrh	r3, [r7, #10]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_TUPLES; i++) {
 8001976:	897b      	ldrh	r3, [r7, #10]
 8001978:	3301      	adds	r3, #1
 800197a:	817b      	strh	r3, [r7, #10]
 800197c:	897b      	ldrh	r3, [r7, #10]
 800197e:	2b4f      	cmp	r3, #79	; 0x4f
 8001980:	d9f1      	bls.n	8001966 <remove_mean+0x12>
    }
    sum = sum/(NUM_TUPLES);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <remove_mean+0x78>)
 8001986:	fb82 1203 	smull	r1, r2, r2, r3
 800198a:	1152      	asrs	r2, r2, #5
 800198c:	17db      	asrs	r3, r3, #31
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NUM_TUPLES; i++) {
 8001992:	2300      	movs	r3, #0
 8001994:	817b      	strh	r3, [r7, #10]
 8001996:	e00e      	b.n	80019b6 <remove_mean+0x62>
        lpf[i] = lpf[i] - sum;
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	1a8a      	subs	r2, r1, r2
 80019ae:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_TUPLES; i++) {
 80019b0:	897b      	ldrh	r3, [r7, #10]
 80019b2:	3301      	adds	r3, #1
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	2b4f      	cmp	r3, #79	; 0x4f
 80019ba:	d9ed      	bls.n	8001998 <remove_mean+0x44>
    }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	66666667 	.word	0x66666667

080019d0 <lowpassfilt>:


//FIR low pass filter
static void lowpassfilt(uint8_t *mag_sqrt, int32_t *lpf) {
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]

    uint16_t n;
    uint8_t i;
    int32_t temp_lpf;
    for (n = 0; n < NUM_TUPLES; n++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	81fb      	strh	r3, [r7, #14]
 80019de:	e028      	b.n	8001a32 <lowpassfilt+0x62>
        temp_lpf = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < LPF_FILT_LEN; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	737b      	strb	r3, [r7, #13]
 80019e8:	e017      	b.n	8001a1a <lowpassfilt+0x4a>
            if (n-i >= 0) {     //handle the case when n < filter length
 80019ea:	89fa      	ldrh	r2, [r7, #14]
 80019ec:	7b7b      	ldrb	r3, [r7, #13]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0f      	blt.n	8001a14 <lowpassfilt+0x44>
                temp_lpf += (int32_t)lpf_coeffs[i]*(int32_t)mag_sqrt[n-i];
 80019f4:	7b7b      	ldrb	r3, [r7, #13]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <lowpassfilt+0x78>)
 80019f8:	56d3      	ldrsb	r3, [r2, r3]
 80019fa:	4619      	mov	r1, r3
 80019fc:	89fa      	ldrh	r2, [r7, #14]
 80019fe:	7b7b      	ldrb	r3, [r7, #13]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4413      	add	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < LPF_FILT_LEN; i++) {
 8001a14:	7b7b      	ldrb	r3, [r7, #13]
 8001a16:	3301      	adds	r3, #1
 8001a18:	737b      	strb	r3, [r7, #13]
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d9e4      	bls.n	80019ea <lowpassfilt+0x1a>
            }
        }
        lpf[n] = temp_lpf;
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	601a      	str	r2, [r3, #0]
    for (n = 0; n < NUM_TUPLES; n++) {
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	81fb      	strh	r3, [r7, #14]
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	2b4f      	cmp	r3, #79	; 0x4f
 8001a36:	d9d3      	bls.n	80019e0 <lowpassfilt+0x10>
    }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	00000000 	.word	0x00000000

08001a50 <count_steps>:


//algorithm interface
uint8_t count_steps(int8_t *data) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
    //assume data is in the format data = [x1,y1,z1,x2,y2,z2...etc]
    //calculate the magnitude of each of triplet ie temp_mag = [x1^2+y1^2+z1^2]
    //then temp_mag = sqrt(temp_mag)
    uint16_t i;
    uint16_t temp_mag;
    for (i = 0; i < NUM_TUPLES; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a5c:	e054      	b.n	8001b08 <count_steps+0xb8>
        temp_mag = (uint16_t)((uint16_t)data[i*3+0]*(uint16_t)data[i*3+0] + (uint16_t)data[i*3+1]*(uint16_t)data[i*3+1] + (uint16_t)data[i*3+2]*(uint16_t)data[i*3+2]);
 8001a5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a70:	b299      	uxth	r1, r3
 8001a72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f993 3000 	ldrsb.w	r3, [r3]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	fb11 f303 	smulbb	r3, r1, r3
 8001a8a:	b299      	uxth	r1, r3
 8001a8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	3301      	adds	r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	fb10 f303 	smulbb	r3, r0, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	440b      	add	r3, r1
 8001abc:	b299      	uxth	r1, r3
 8001abe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad0:	b298      	uxth	r0, r3
 8001ad2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	fb10 f303 	smulbb	r3, r0, r3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	440b      	add	r3, r1
 8001aee:	847b      	strh	r3, [r7, #34]	; 0x22
        mag_sqrt[i] = (uint8_t)SquareRoot(temp_mag);
 8001af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fd03 	bl	80014fe <SquareRoot>
 8001af8:	4602      	mov	r2, r0
 8001afa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001afc:	b2d1      	uxtb	r1, r2
 8001afe:	4a5a      	ldr	r2, [pc, #360]	; (8001c68 <count_steps+0x218>)
 8001b00:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < NUM_TUPLES; i++) {
 8001b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b04:	3301      	adds	r3, #1
 8001b06:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b0a:	2b4f      	cmp	r3, #79	; 0x4f
 8001b0c:	d9a7      	bls.n	8001a5e <count_steps+0xe>
    }

    //apply low pass filter to mag_sqrt, result is stored in lpf
    lowpassfilt(mag_sqrt, lpf);
 8001b0e:	4957      	ldr	r1, [pc, #348]	; (8001c6c <count_steps+0x21c>)
 8001b10:	4855      	ldr	r0, [pc, #340]	; (8001c68 <count_steps+0x218>)
 8001b12:	f7ff ff5d 	bl	80019d0 <lowpassfilt>

    //remove mean from lpf, store result in lpf
    remove_mean(lpf);
 8001b16:	4855      	ldr	r0, [pc, #340]	; (8001c6c <count_steps+0x21c>)
 8001b18:	f7ff ff1c 	bl	8001954 <remove_mean>

    //do the autocorrelation on the lpf buffer, store the result in autocorr_buff
    autocorr(lpf, autocorr_buff);
 8001b1c:	4954      	ldr	r1, [pc, #336]	; (8001c70 <count_steps+0x220>)
 8001b1e:	4853      	ldr	r0, [pc, #332]	; (8001c6c <count_steps+0x21c>)
 8001b20:	f7ff fec4 	bl	80018ac <autocorr>

    //get the derivative of the autocorr_buff, store in deriv
    derivative(autocorr_buff, deriv);
 8001b24:	4953      	ldr	r1, [pc, #332]	; (8001c74 <count_steps+0x224>)
 8001b26:	4852      	ldr	r0, [pc, #328]	; (8001c70 <count_steps+0x220>)
 8001b28:	f7ff fe62 	bl	80017f0 <derivative>

    //look for first zero crossing where derivative goes from positive to negative. that
    //corresponds to the first positive peak in the autocorrelation. look at two samples
    //instead of just one to maybe reduce the chances of getting tricked by noise
    uint8_t peak_ind = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    //start index is set to 8 lags, which corresponds to a walking rate of 2.5Hz @20Hz sampling rate. its probably
    //running if its faster than this
    for (i = 8; i < NUM_AUTOCORR_LAGS; i++) {
 8001b32:	2308      	movs	r3, #8
 8001b34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b36:	e02f      	b.n	8001b98 <count_steps+0x148>
        if ((deriv[i] > 0) && (deriv[i-1] > 0) && (deriv[i-2] < 0) && (deriv[i-3] < 0)) {
 8001b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <count_steps+0x224>)
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	2a01      	cmp	r2, #1
 8001b46:	f173 0300 	sbcs.w	r3, r3, #0
 8001b4a:	db22      	blt.n	8001b92 <count_steps+0x142>
 8001b4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <count_steps+0x224>)
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	2a01      	cmp	r2, #1
 8001b5c:	f173 0300 	sbcs.w	r3, r3, #0
 8001b60:	db17      	blt.n	8001b92 <count_steps+0x142>
 8001b62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b64:	3b02      	subs	r3, #2
 8001b66:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <count_steps+0x224>)
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da0e      	bge.n	8001b92 <count_steps+0x142>
 8001b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b76:	3b03      	subs	r3, #3
 8001b78:	4a3e      	ldr	r2, [pc, #248]	; (8001c74 <count_steps+0x224>)
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da05      	bge.n	8001b92 <count_steps+0x142>
            peak_ind = i-1;
 8001b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            break;
 8001b90:	e005      	b.n	8001b9e <count_steps+0x14e>
    for (i = 8; i < NUM_AUTOCORR_LAGS; i++) {
 8001b92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b94:	3301      	adds	r3, #1
 8001b96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b9a:	2b31      	cmp	r3, #49	; 0x31
 8001b9c:	d9cc      	bls.n	8001b38 <count_steps+0xe8>
        }
    }

    //hone in on the exact peak index
    peak_ind = get_precise_peakind(autocorr_buff, peak_ind);
 8001b9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4832      	ldr	r0, [pc, #200]	; (8001c70 <count_steps+0x220>)
 8001ba6:	f7ff fd68 	bl	800167a <get_precise_peakind>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    //printf("peak ind: %i\n", peak_ind);

    //get autocorrelation peak stats
    uint8_t neg_slope_count = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    int64_t delta_amplitude_right = 0;
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint8_t pos_slope_count = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    int64_t delta_amplitude_left = 0;
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    get_autocorr_peak_stats(autocorr_buff, &neg_slope_count, &delta_amplitude_right, &pos_slope_count, &delta_amplitude_left, peak_ind);
 8001bd2:	f107 0017 	add.w	r0, r7, #23
 8001bd6:	f107 0218 	add.w	r2, r7, #24
 8001bda:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8001bde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	4603      	mov	r3, r0
 8001bec:	4820      	ldr	r0, [pc, #128]	; (8001c70 <count_steps+0x220>)
 8001bee:	f7ff fcbb 	bl	8001568 <get_autocorr_peak_stats>

    //now check the conditions to see if it was a real peak or not, and if so, calculate the number of steps
    uint8_t num_steps = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if ((pos_slope_count > AUTOCORR_MIN_HALF_LEN) && (neg_slope_count > AUTOCORR_MIN_HALF_LEN) && (delta_amplitude_right > AUTOCORR_DELTA_AMPLITUDE_THRESH) && (delta_amplitude_left > AUTOCORR_DELTA_AMPLITUDE_THRESH)) {
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d927      	bls.n	8001c4e <count_steps+0x1fe>
 8001bfe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d923      	bls.n	8001c4e <count_steps+0x1fe>
 8001c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe fcd5 	bl	80005bc <__aeabi_l2d>
 8001c12:	a313      	add	r3, pc, #76	; (adr r3, 8001c60 <count_steps+0x210>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe ff8e 	bl	8000b38 <__aeabi_dcmpgt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d015      	beq.n	8001c4e <count_steps+0x1fe>
 8001c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe fcc7 	bl	80005bc <__aeabi_l2d>
 8001c2e:	a30c      	add	r3, pc, #48	; (adr r3, 8001c60 <count_steps+0x210>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe ff80 	bl	8000b38 <__aeabi_dcmpgt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <count_steps+0x1fe>
        //the period is peak_ind/sampling_rate seconds. that corresponds to a frequency of 1/period
        //with the frequency known, and the number of seconds is 4 seconds, you can then find out the number of steps
        num_steps = (SAMPLING_RATE*WINDOW_LENGTH)/peak_ind;
 8001c3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c42:	2250      	movs	r2, #80	; 0x50
 8001c44:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001c4c:	e002      	b.n	8001c54 <count_steps+0x204>
    } else {
        //not a valid autocorrelation peak
        num_steps = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    }

    //printf("num steps: %i\n", num_steps);
    return num_steps;
 8001c54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	00000000 	.word	0x00000000
 8001c64:	41bdcd65 	.word	0x41bdcd65
 8001c68:	20000224 	.word	0x20000224
 8001c6c:	20000274 	.word	0x20000274
 8001c70:	200003b8 	.word	0x200003b8
 8001c74:	20000548 	.word	0x20000548

08001c78 <lis3dh_init>:

#define I2C_READ_BIT   (1)
#define I2C_WRITE_BIT  (0)
#define TIMEOUT_MS     (50)

HAL_StatusTypeDef lis3dh_init(lis3dh_t *lis3dh, I2C_HandleTypeDef *i2c, uint8_t *buf, uint16_t bufsize) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	lis3dh->i2c = i2c;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	601a      	str	r2, [r3, #0]
	lis3dh->i2c_addr = LIS3DH_ADDR << 1;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2230      	movs	r2, #48	; 0x30
 8001c90:	809a      	strh	r2, [r3, #4]
	lis3dh->buf = buf;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	61da      	str	r2, [r3, #28]
	lis3dh->bufsize = bufsize;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	831a      	strh	r2, [r3, #24]

	/* Let device wake up. */
	HAL_Delay(LID3DH_POWER_UP_MS);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f001 fb6a 	bl	8003378 <HAL_Delay>

	status = HAL_I2C_IsDeviceReady(lis3dh->i2c, lis3dh->i2c_addr, 1, TIMEOUT_MS);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8899      	ldrh	r1, [r3, #4]
 8001cac:	2332      	movs	r3, #50	; 0x32
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f002 f984 	bl	8003fbc <HAL_I2C_IsDeviceReady>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <lis3dh_init+0x4a>
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	e032      	b.n	8001d28 <lis3dh_init+0xb0>

    /* Confirm the device identifies itself as expected. */
	status = lis3dh_read(lis3dh, REG_WHO_AM_I, 1);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f850 	bl	8001d6c <lis3dh_read>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <lis3dh_init+0x62>
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	e026      	b.n	8001d28 <lis3dh_init+0xb0>
	if (lis3dh->buf[0] != LIS3DH_DEVICE_ID) return HAL_ERROR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b33      	cmp	r3, #51	; 0x33
 8001ce2:	d001      	beq.n	8001ce8 <lis3dh_init+0x70>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e01f      	b.n	8001d28 <lis3dh_init+0xb0>

	// Set power mode to operational; Enable all axes; Normal operation.
	status = lis3dh_write(lis3dh, REG_CTRL_REG1, DATA_RATE_NORM_1kHz344 | 0x07);
 8001ce8:	2297      	movs	r2, #151	; 0x97
 8001cea:	2120      	movs	r1, #32
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f864 	bl	8001dba <lis3dh_write>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <lis3dh_init+0x88>
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	e013      	b.n	8001d28 <lis3dh_init+0xb0>

	// High resolution; BDU enabled.
	status = lis3dh_write(lis3dh, REG_CTRL_REG4, 0x88);
 8001d00:	2288      	movs	r2, #136	; 0x88
 8001d02:	2123      	movs	r1, #35	; 0x23
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f858 	bl	8001dba <lis3dh_write>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <lis3dh_init+0xa0>
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	e007      	b.n	8001d28 <lis3dh_init+0xb0>

	// Enable temp sensor.
	status = lis3dh_write(lis3dh, REG_TEMP_CFG_REG, 0x80);
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	211f      	movs	r1, #31
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f84c 	bl	8001dba <lis3dh_write>
 8001d22:	4603      	mov	r3, r0
 8001d24:	75fb      	strb	r3, [r7, #23]
	return status;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <lis3dh_xyz_available>:

bool lis3dh_xyz_available(lis3dh_t *lis3dh) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	/*
	 * Read STATUS_REG bit 2 (ZYXDA): New X, Y, Z data available.
	 */
	HAL_StatusTypeDef status;
	status = lis3dh_read(lis3dh, REG_STATUS_REG, 1);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2127      	movs	r1, #39	; 0x27
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f815 	bl	8001d6c <lis3dh_read>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return false;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <lis3dh_xyz_available+0x20>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e009      	b.n	8001d64 <lis3dh_xyz_available+0x34>

	return (lis3dh->buf[0] & 2) > 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bfcc      	ite	gt
 8001d5e:	2301      	movgt	r3, #1
 8001d60:	2300      	movle	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <lis3dh_read>:

HAL_StatusTypeDef lis3dh_read(lis3dh_t* lis3dh, uint16_t reg, uint16_t bufsize) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af04      	add	r7, sp, #16
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	803b      	strh	r3, [r7, #0]
	if (bufsize > lis3dh->bufsize) return HAL_ERROR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8b1b      	ldrh	r3, [r3, #24]
 8001d80:	883a      	ldrh	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d901      	bls.n	8001d8a <lis3dh_read+0x1e>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e013      	b.n	8001db2 <lis3dh_read+0x46>

	return HAL_I2C_Mem_Read(lis3dh->i2c, lis3dh->i2c_addr | I2C_READ_BIT, reg, 1, lis3dh->buf, bufsize, TIMEOUT_MS);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	889b      	ldrh	r3, [r3, #4]
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	b299      	uxth	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	887c      	ldrh	r4, [r7, #2]
 8001d9e:	2232      	movs	r2, #50	; 0x32
 8001da0:	9202      	str	r2, [sp, #8]
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2301      	movs	r3, #1
 8001daa:	4622      	mov	r2, r4
 8001dac:	f001 ffec 	bl	8003d88 <HAL_I2C_Mem_Read>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}

08001dba <lis3dh_write>:

HAL_StatusTypeDef lis3dh_write(lis3dh_t* lis3dh, uint16_t reg, uint8_t data) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af04      	add	r7, sp, #16
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	707b      	strb	r3, [r7, #1]
	return HAL_I2C_Mem_Write(lis3dh->i2c, lis3dh->i2c_addr, reg, 1, &data, 1, TIMEOUT_MS);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8899      	ldrh	r1, [r3, #4]
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	2332      	movs	r3, #50	; 0x32
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	1c7b      	adds	r3, r7, #1
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	f001 febd 	bl	8003b60 <HAL_I2C_Mem_Write>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <lis3dh_get_xyz>:

HAL_StatusTypeDef lis3dh_get_xyz(lis3dh_t* lis3dh) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	6078      	str	r0, [r7, #4]
	if (lis3dh->bufsize < 6) return HAL_ERROR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8b1b      	ldrh	r3, [r3, #24]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d801      	bhi.n	8001e04 <lis3dh_get_xyz+0x14>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04b      	b.n	8001e9c <lis3dh_get_xyz+0xac>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
			lis3dh->i2c,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
			lis3dh->i2c_addr | I2C_READ_BIT,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	889b      	ldrh	r3, [r3, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b299      	uxth	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	2232      	movs	r2, #50	; 0x32
 8001e18:	9202      	str	r2, [sp, #8]
 8001e1a:	2206      	movs	r2, #6
 8001e1c:	9201      	str	r2, [sp, #4]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	22a8      	movs	r2, #168	; 0xa8
 8001e24:	f001 ffb0 	bl	8003d88 <HAL_I2C_Mem_Read>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
			1,
			lis3dh->buf,
			6,
			TIMEOUT_MS);

	if (status != HAL_OK) {
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00d      	beq.n	8001e4e <lis3dh_get_xyz+0x5e>
		lis3dh->x = -1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	609a      	str	r2, [r3, #8]
		lis3dh->y = -1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	60da      	str	r2, [r3, #12]
		lis3dh->z = -1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	611a      	str	r2, [r3, #16]
		return status;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	e026      	b.n	8001e9c <lis3dh_get_xyz+0xac>
	}

	lis3dh->x = (int) (((int8_t) lis3dh->buf[1]) << 8) | lis3dh->buf[0];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	3301      	adds	r3, #1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	69d2      	ldr	r2, [r2, #28]
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
	lis3dh->y = (int) (((int8_t) lis3dh->buf[3]) << 8) | lis3dh->buf[2];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	3303      	adds	r3, #3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	69d2      	ldr	r2, [r2, #28]
 8001e76:	3202      	adds	r2, #2
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
	lis3dh->z = (int) (((int8_t) lis3dh->buf[5]) << 8) | lis3dh->buf[4];
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	3305      	adds	r3, #5
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	69d2      	ldr	r2, [r2, #28]
 8001e90:	3204      	adds	r2, #4
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]

	return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <get_lat>:
double pre_lat = 0;
double pre_lon = 0;
double alt = 0;

double get_lat(char *gga)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0c6      	sub	sp, #280	; 0x118
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001eb2:	6018      	str	r0, [r3, #0]
	double latitude = 0.0;
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 8001ec0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ec4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ec8:	f107 000c 	add.w	r0, r7, #12
 8001ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	f006 fc2a 	bl	800872a <strncpy>

	char *token = strtok(gga_cpy, ",");
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4919      	ldr	r1, [pc, #100]	; (8001f40 <get_lat+0x9c>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f006 fc37 	bl	8008750 <strtok>
 8001ee2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8001ee6:	e01b      	b.n	8001f20 <get_lat+0x7c>
	{
		if ((strcmp(token, "N") == 0) || (strcmp(token, "S") == 0))
 8001ee8:	4916      	ldr	r1, [pc, #88]	; (8001f44 <get_lat+0xa0>)
 8001eea:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001eee:	f7fe f96f 	bl	80001d0 <strcmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d017      	beq.n	8001f28 <get_lat+0x84>
 8001ef8:	4913      	ldr	r1, [pc, #76]	; (8001f48 <get_lat+0xa4>)
 8001efa:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001efe:	f7fe f967 	bl	80001d0 <strcmp>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00f      	beq.n	8001f28 <get_lat+0x84>
		{
			break;
		}
		else
		{
			latitude = atof(token);
 8001f08:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001f0c:	f005 f800 	bl	8006f10 <atof>
 8001f10:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001f14:	490a      	ldr	r1, [pc, #40]	; (8001f40 <get_lat+0x9c>)
 8001f16:	2000      	movs	r0, #0
 8001f18:	f006 fc1a 	bl	8008750 <strtok>
 8001f1c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 8001f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1df      	bne.n	8001ee8 <get_lat+0x44>
	}

		return latitude;
 8001f28:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001f2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f30:	eeb0 0a47 	vmov.f32	s0, s14
 8001f34:	eef0 0a67 	vmov.f32	s1, s15
 8001f38:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	0800cb80 	.word	0x0800cb80
 8001f44:	0800cb84 	.word	0x0800cb84
 8001f48:	0800cb88 	.word	0x0800cb88

08001f4c <get_lon>:

double get_lon(char *gga)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0c6      	sub	sp, #280	; 0x118
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f5a:	6018      	str	r0, [r3, #0]
	double longitude = 0.0;
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 8001f68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f70:	f107 000c 	add.w	r0, r7, #12
 8001f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	f006 fbd6 	bl	800872a <strncpy>

	char *token = strtok(gga_cpy, ",");
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4919      	ldr	r1, [pc, #100]	; (8001fe8 <get_lon+0x9c>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f006 fbe3 	bl	8008750 <strtok>
 8001f8a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8001f8e:	e01b      	b.n	8001fc8 <get_lon+0x7c>
	{
		if ((strcmp(token, "W") == 0) || (strcmp(token, "E") == 0))
 8001f90:	4916      	ldr	r1, [pc, #88]	; (8001fec <get_lon+0xa0>)
 8001f92:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001f96:	f7fe f91b 	bl	80001d0 <strcmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <get_lon+0x84>
 8001fa0:	4913      	ldr	r1, [pc, #76]	; (8001ff0 <get_lon+0xa4>)
 8001fa2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001fa6:	f7fe f913 	bl	80001d0 <strcmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00f      	beq.n	8001fd0 <get_lon+0x84>
		{
			break;
		}
		else
		{
			longitude = atof(token);
 8001fb0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001fb4:	f004 ffac 	bl	8006f10 <atof>
 8001fb8:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001fbc:	490a      	ldr	r1, [pc, #40]	; (8001fe8 <get_lon+0x9c>)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f006 fbc6 	bl	8008750 <strtok>
 8001fc4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 8001fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1df      	bne.n	8001f90 <get_lon+0x44>
	}

		return longitude;
 8001fd0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fd4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fdc:	eef0 0a67 	vmov.f32	s1, s15
 8001fe0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	0800cb80 	.word	0x0800cb80
 8001fec:	0800cb8c 	.word	0x0800cb8c
 8001ff0:	0800cb90 	.word	0x0800cb90

08001ff4 <get_alt>:

double get_alt(char *gga)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0c6      	sub	sp, #280	; 0x118
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ffe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002002:	6018      	str	r0, [r3, #0]
	double altitude = 0.0;
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 8002010:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002014:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002018:	f107 000c 	add.w	r0, r7, #12
 800201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	f006 fb82 	bl	800872a <strncpy>

	char *token = strtok(gga_cpy, ",");
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	4916      	ldr	r1, [pc, #88]	; (8002084 <get_alt+0x90>)
 800202c:	4618      	mov	r0, r3
 800202e:	f006 fb8f 	bl	8008750 <strtok>
 8002032:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8002036:	e013      	b.n	8002060 <get_alt+0x6c>
	{
		if (strcmp(token, "M") == 0)
 8002038:	4913      	ldr	r1, [pc, #76]	; (8002088 <get_alt+0x94>)
 800203a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800203e:	f7fe f8c7 	bl	80001d0 <strcmp>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <get_alt+0x76>
		{
			break;
		}
		else
		{
			altitude = atof(token);
 8002048:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800204c:	f004 ff60 	bl	8006f10 <atof>
 8002050:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8002054:	490b      	ldr	r1, [pc, #44]	; (8002084 <get_alt+0x90>)
 8002056:	2000      	movs	r0, #0
 8002058:	f006 fb7a 	bl	8008750 <strtok>
 800205c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 8002060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e7      	bne.n	8002038 <get_alt+0x44>
 8002068:	e000      	b.n	800206c <get_alt+0x78>
			break;
 800206a:	bf00      	nop
	}

		return altitude;
 800206c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002070:	ec43 2b17 	vmov	d7, r2, r3
}
 8002074:	eeb0 0a47 	vmov.f32	s0, s14
 8002078:	eef0 0a67 	vmov.f32	s1, s15
 800207c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	0800cb80 	.word	0x0800cb80
 8002088:	0800cb94 	.word	0x0800cb94

0800208c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a30      	ldr	r2, [pc, #192]	; (8002158 <HAL_UART_RxCpltCallback+0xcc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d158      	bne.n	800214e <HAL_UART_RxCpltCallback+0xc2>

        nmea_buf[i++] = nmea;
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_UART_RxCpltCallback+0xd0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	b2d1      	uxtb	r1, r2
 80020a4:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_UART_RxCpltCallback+0xd0>)
 80020a6:	7011      	strb	r1, [r2, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_UART_RxCpltCallback+0xd4>)
 80020ac:	7819      	ldrb	r1, [r3, #0]
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_UART_RxCpltCallback+0xd8>)
 80020b0:	5499      	strb	r1, [r3, r2]
        //char buf1[16];
        //char buf2[16];

        if (nmea == '\n' || i >= sizeof(nmea_buf) - 1) {
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_UART_RxCpltCallback+0xd4>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d003      	beq.n	80020c2 <HAL_UART_RxCpltCallback+0x36>
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_UART_RxCpltCallback+0xd0>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d140      	bne.n	8002144 <HAL_UART_RxCpltCallback+0xb8>
        	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80020c2:	2102      	movs	r1, #2
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f001 fc94 	bl	80039f4 <HAL_GPIO_TogglePin>
        	if(nmea_buf[3]=='G' && nmea_buf[4]=='G' && nmea_buf[5] == 'A')
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_UART_RxCpltCallback+0xd8>)
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	2b47      	cmp	r3, #71	; 0x47
 80020d2:	d12e      	bne.n	8002132 <HAL_UART_RxCpltCallback+0xa6>
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_UART_RxCpltCallback+0xd8>)
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	2b47      	cmp	r3, #71	; 0x47
 80020da:	d12a      	bne.n	8002132 <HAL_UART_RxCpltCallback+0xa6>
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_UART_RxCpltCallback+0xd8>)
 80020de:	795b      	ldrb	r3, [r3, #5]
 80020e0:	2b41      	cmp	r3, #65	; 0x41
 80020e2:	d126      	bne.n	8002132 <HAL_UART_RxCpltCallback+0xa6>
        	{
        		memcpy(nmea_gga, nmea_buf, 256);
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_UART_RxCpltCallback+0xdc>)
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_UART_RxCpltCallback+0xd8>)
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f0:	461a      	mov	r2, r3
 80020f2:	f006 fbff 	bl	80088f4 <memcpy>
        		cur_lat = get_lat(nmea_gga);
 80020f6:	481c      	ldr	r0, [pc, #112]	; (8002168 <HAL_UART_RxCpltCallback+0xdc>)
 80020f8:	f7ff fed4 	bl	8001ea4 <get_lat>
 80020fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002100:	eef0 7a60 	vmov.f32	s15, s1
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_UART_RxCpltCallback+0xe0>)
 8002106:	ed83 7b00 	vstr	d7, [r3]
        		cur_lon = get_lon(nmea_gga);
 800210a:	4817      	ldr	r0, [pc, #92]	; (8002168 <HAL_UART_RxCpltCallback+0xdc>)
 800210c:	f7ff ff1e 	bl	8001f4c <get_lon>
 8002110:	eeb0 7a40 	vmov.f32	s14, s0
 8002114:	eef0 7a60 	vmov.f32	s15, s1
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_UART_RxCpltCallback+0xe4>)
 800211a:	ed83 7b00 	vstr	d7, [r3]
        		alt = get_alt(nmea_gga);
 800211e:	4812      	ldr	r0, [pc, #72]	; (8002168 <HAL_UART_RxCpltCallback+0xdc>)
 8002120:	f7ff ff68 	bl	8001ff4 <get_alt>
 8002124:	eeb0 7a40 	vmov.f32	s14, s0
 8002128:	eef0 7a60 	vmov.f32	s15, s1
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_UART_RxCpltCallback+0xe8>)
 800212e:	ed83 7b00 	vstr	d7, [r3]

        	}

            memset(nmea_buf, 0, sizeof(nmea_buf));
 8002132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002136:	2100      	movs	r1, #0
 8002138:	480a      	ldr	r0, [pc, #40]	; (8002164 <HAL_UART_RxCpltCallback+0xd8>)
 800213a:	f006 fadc 	bl	80086f6 <memset>
            i = 0;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_UART_RxCpltCallback+0xd0>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
        }

        // Start the next reception
        HAL_UART_Receive_IT(&huart1, &nmea, 1);
 8002144:	2201      	movs	r2, #1
 8002146:	4906      	ldr	r1, [pc, #24]	; (8002160 <HAL_UART_RxCpltCallback+0xd4>)
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <HAL_UART_RxCpltCallback+0xcc>)
 800214a:	f003 fc4f 	bl	80059ec <HAL_UART_Receive_IT>
    }
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000780 	.word	0x20000780
 800215c:	20000a34 	.word	0x20000a34
 8002160:	20000831 	.word	0x20000831
 8002164:	20000834 	.word	0x20000834
 8002168:	20000934 	.word	0x20000934
 800216c:	20000a38 	.word	0x20000a38
 8002170:	20000a40 	.word	0x20000a40
 8002174:	20000a58 	.word	0x20000a58

08002178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	f5ad 6dee 	sub.w	sp, sp, #1904	; 0x770
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002180:	f001 f885 	bl	800328e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002184:	f000 fa58 	bl	8002638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002188:	f000 fb5c 	bl	8002844 <MX_GPIO_Init>
  MX_I2C1_Init();
 800218c:	f000 faa2 	bl	80026d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002190:	f000 fae0 	bl	8002754 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002194:	f000 fb1e 	bl	80027d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char buf1[16];
    //char buf2[16];
  /* USER CODE END 2 */
  status = lis3dh_init(&lis3dh, &hi2c1, xyz_buf, 6);
 8002198:	2306      	movs	r3, #6
 800219a:	4adb      	ldr	r2, [pc, #876]	; (8002508 <main+0x390>)
 800219c:	49db      	ldr	r1, [pc, #876]	; (800250c <main+0x394>)
 800219e:	48dc      	ldr	r0, [pc, #880]	; (8002510 <main+0x398>)
 80021a0:	f7ff fd6a 	bl	8001c78 <lis3dh_init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4bda      	ldr	r3, [pc, #872]	; (8002514 <main+0x39c>)
 80021aa:	701a      	strb	r2, [r3, #0]
          	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
            // Unable to communicate with device!
  }


  char message[64] = "Starting Up";
 80021ac:	4ada      	ldr	r2, [pc, #872]	; (8002518 <main+0x3a0>)
 80021ae:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80021b2:	6810      	ldr	r0, [r2, #0]
 80021b4:	6851      	ldr	r1, [r2, #4]
 80021b6:	6892      	ldr	r2, [r2, #8]
 80021b8:	c307      	stmia	r3!, {r0, r1, r2}
 80021ba:	f207 7304 	addw	r3, r7, #1796	; 0x704
 80021be:	2234      	movs	r2, #52	; 0x34
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f006 fa97 	bl	80086f6 <memset>
  //ssd1306_TestAll();
  ssd1306_Init();
 80021c8:	f000 fbf4 	bl	80029b4 <ssd1306_Init>
  ssd1306_Fill(Black);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f000 fc67 	bl	8002aa0 <ssd1306_Fill>
  ssd1306_SetCursor(2,0);
 80021d2:	2100      	movs	r1, #0
 80021d4:	2002      	movs	r0, #2
 80021d6:	f000 fdbd 	bl	8002d54 <ssd1306_SetCursor>
  ssd1306_WriteString(message, Font_11x18, White);
 80021da:	4ad0      	ldr	r2, [pc, #832]	; (800251c <main+0x3a4>)
 80021dc:	f507 60df 	add.w	r0, r7, #1784	; 0x6f8
 80021e0:	2301      	movs	r3, #1
 80021e2:	ca06      	ldmia	r2, {r1, r2}
 80021e4:	f000 fd90 	bl	8002d08 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80021e8:	f000 fc7e 	bl	8002ae8 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
            uint16_t  num_steps  = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8a7 376e 	strh.w	r3, [r7, #1902]	; 0x76e
            float total_distance = 0;
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80021fa:	6013      	str	r3, [r2, #0]
            float new_distance;
            //char buf[20];
            HAL_UART_Receive_IT(&huart1, &nmea, 1);
 80021fc:	2201      	movs	r2, #1
 80021fe:	49c8      	ldr	r1, [pc, #800]	; (8002520 <main+0x3a8>)
 8002200:	48c8      	ldr	r0, [pc, #800]	; (8002524 <main+0x3ac>)
 8002202:	f003 fbf3 	bl	80059ec <HAL_UART_Receive_IT>
            while (1)
                  {
            	//hold the data from the CSV file in a fifo-like data structure where the accelerometer data looks like
            	        	    	    //[x1,y1,z1,x2,y2,z2...x400,y400,z400]
            	        	    	    int8_t acc[NUM_SAMPLES_IN_CSV_FILE*3] = {0};
 8002206:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800220a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	3304      	adds	r3, #4
 8002214:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f006 fa6b 	bl	80086f6 <memset>
            	        	    	    uint16_t i    = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f8a7 3766 	strh.w	r3, [r7, #1894]	; 0x766
            	        	    	    float    temp = 0;
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800222e:	6013      	str	r3, [r2, #0]
            	        	    	    while(i < NUM_SAMPLES_IN_CSV_FILE*3) //while data array is being filled
 8002230:	e0b9      	b.n	80023a6 <main+0x22e>
            	        	        	{
            	        	    			  HAL_Delay(50); //20Hz
 8002232:	2032      	movs	r0, #50	; 0x32
 8002234:	f001 f8a0 	bl	8003378 <HAL_Delay>
            	        	    			  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

            	        	    			//scaling factor to convert the decimal data to int8 integers. calculated in matlab by taking the absolute value of all the data
            	        	    			//and then calculating the max of that data. then divide that by 127 to get the scaling factor
            	        	    			  float scale_factor = 55.3293;
 8002238:	4bbb      	ldr	r3, [pc, #748]	; (8002528 <main+0x3b0>)
 800223a:	f207 7254 	addw	r2, r7, #1876	; 0x754
 800223e:	6013      	str	r3, [r2, #0]

            	        					  if (lis3dh_xyz_available(&lis3dh)) {
 8002240:	48b3      	ldr	r0, [pc, #716]	; (8002510 <main+0x398>)
 8002242:	f7ff fd75 	bl	8001d30 <lis3dh_xyz_available>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80ac 	beq.w	80023a6 <main+0x22e>
            	        							status = lis3dh_get_xyz(&lis3dh);
 800224e:	48b0      	ldr	r0, [pc, #704]	; (8002510 <main+0x398>)
 8002250:	f7ff fdce 	bl	8001df0 <lis3dh_get_xyz>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4bae      	ldr	r3, [pc, #696]	; (8002514 <main+0x39c>)
 800225a:	701a      	strb	r2, [r3, #0]
            	        							float xx = lis3dh.x/16384;
 800225c:	4bac      	ldr	r3, [pc, #688]	; (8002510 <main+0x398>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	da02      	bge.n	800226a <main+0xf2>
 8002264:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002268:	333f      	adds	r3, #63	; 0x3f
 800226a:	139b      	asrs	r3, r3, #14
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002274:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8002278:	edc3 7a00 	vstr	s15, [r3]
            	        							float yy = lis3dh.y/16384;
 800227c:	4ba4      	ldr	r3, [pc, #656]	; (8002510 <main+0x398>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da02      	bge.n	800228a <main+0x112>
 8002284:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002288:	333f      	adds	r3, #63	; 0x3f
 800228a:	139b      	asrs	r3, r3, #14
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002294:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8002298:	edc3 7a00 	vstr	s15, [r3]
            	        							float zz = lis3dh.z/16384;
 800229c:	4b9c      	ldr	r3, [pc, #624]	; (8002510 <main+0x398>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da02      	bge.n	80022aa <main+0x132>
 80022a4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	139b      	asrs	r3, r3, #14
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b4:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80022b8:	edc3 7a00 	vstr	s15, [r3]

            	        							temp     = roundf(xx*scale_factor);
 80022bc:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	f207 7354 	addw	r3, r7, #1876	; 0x754
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f009 fa50 	bl	800b778 <roundf>
 80022d8:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 80022dc:	ed83 0a00 	vstr	s0, [r3]
            	        							acc[i++] = (int8_t)temp;
 80022e0:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	f8a7 2766 	strh.w	r2, [r7, #1894]	; 0x766
 80022ea:	461a      	mov	r2, r3
 80022ec:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80022fc:	793b      	ldrb	r3, [r7, #4]
 80022fe:	b259      	sxtb	r1, r3
 8002300:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8002304:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8002308:	5499      	strb	r1, [r3, r2]

            	        							temp     = roundf(yy*scale_factor);
 800230a:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	f207 7354 	addw	r3, r7, #1876	; 0x754
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	eeb0 0a67 	vmov.f32	s0, s15
 8002322:	f009 fa29 	bl	800b778 <roundf>
 8002326:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800232a:	ed83 0a00 	vstr	s0, [r3]
            	        							acc[i++] = (int8_t)temp;
 800232e:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	f8a7 2766 	strh.w	r2, [r7, #1894]	; 0x766
 8002338:	461a      	mov	r2, r3
 800233a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002346:	edc7 7a01 	vstr	s15, [r7, #4]
 800234a:	793b      	ldrb	r3, [r7, #4]
 800234c:	b259      	sxtb	r1, r3
 800234e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8002352:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8002356:	5499      	strb	r1, [r3, r2]

            	        							temp     = roundf(zz*scale_factor);
 8002358:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	f207 7354 	addw	r3, r7, #1876	; 0x754
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	f009 fa02 	bl	800b778 <roundf>
 8002374:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8002378:	ed83 0a00 	vstr	s0, [r3]
            	        							acc[i++] = (int8_t)temp;
 800237c:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	f8a7 2766 	strh.w	r2, [r7, #1894]	; 0x766
 8002386:	461a      	mov	r2, r3
 8002388:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002394:	edc7 7a01 	vstr	s15, [r7, #4]
 8002398:	793b      	ldrb	r3, [r7, #4]
 800239a:	b259      	sxtb	r1, r3
 800239c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80023a0:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80023a4:	5499      	strb	r1, [r3, r2]
            	        	    	    while(i < NUM_SAMPLES_IN_CSV_FILE*3) //while data array is being filled
 80023a6:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 80023aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023ae:	f4ff af40 	bcc.w	8002232 <main+0xba>
            	        							// You now have raw acceleration of gravity in lis3dh->x, y, and z.

            	        						  }
            	        	        	  }
            	        	        	  //pass data to step counting algorithm, 4 seconds at a time (which is the WINDOW_LENGTH). put the data into a temporary buffer each loop
            	        	        	      int8_t   data[NUM_TUPLES*3] = {0};
 80023b2:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80023b6:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	22ec      	movs	r2, #236	; 0xec
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f006 f996 	bl	80086f6 <memset>
            	        	        	      uint8_t  num_segments       = NUM_SAMPLES_IN_CSV_FILE/(SAMPLING_RATE*WINDOW_LENGTH);
 80023ca:	2306      	movs	r3, #6
 80023cc:	f887 375f 	strb.w	r3, [r7, #1887]	; 0x75f
            	        	        	      uint16_t j                  = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8a7 3764 	strh.w	r3, [r7, #1892]	; 0x764

            	        	        	      for (i = 0; i < num_segments; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8a7 3766 	strh.w	r3, [r7, #1894]	; 0x766
 80023dc:	e03e      	b.n	800245c <main+0x2e4>
            	        	        	          for (j = SAMPLING_RATE*WINDOW_LENGTH*i*3; j < SAMPLING_RATE*WINDOW_LENGTH*(i+1)*3; j++) {
 80023de:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 80023e2:	461a      	mov	r2, r3
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	f8a7 3764 	strh.w	r3, [r7, #1892]	; 0x764
 80023ee:	e019      	b.n	8002424 <main+0x2ac>
            	        	        	              data[j-SAMPLING_RATE*WINDOW_LENGTH*i*3] = acc[j];
 80023f0:	f8b7 1764 	ldrh.w	r1, [r7, #1892]	; 0x764
 80023f4:	f8b7 0764 	ldrh.w	r0, [r7, #1892]	; 0x764
 80023f8:	f8b7 2766 	ldrh.w	r2, [r7, #1894]	; 0x766
 80023fc:	4613      	mov	r3, r2
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4403      	add	r3, r0
 8002406:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 800240a:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 800240e:	5651      	ldrsb	r1, [r2, r1]
 8002410:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 8002414:	f5a2 62ed 	sub.w	r2, r2, #1896	; 0x768
 8002418:	54d1      	strb	r1, [r2, r3]
            	        	        	          for (j = SAMPLING_RATE*WINDOW_LENGTH*i*3; j < SAMPLING_RATE*WINDOW_LENGTH*(i+1)*3; j++) {
 800241a:	f8b7 3764 	ldrh.w	r3, [r7, #1892]	; 0x764
 800241e:	3301      	adds	r3, #1
 8002420:	f8a7 3764 	strh.w	r3, [r7, #1892]	; 0x764
 8002424:	f8b7 1764 	ldrh.w	r1, [r7, #1892]	; 0x764
 8002428:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	4299      	cmp	r1, r3
 8002438:	dbda      	blt.n	80023f0 <main+0x278>
            	        	        	          }
            	        	        	          num_steps += count_steps(data);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb06 	bl	8001a50 <count_steps>
 8002444:	4603      	mov	r3, r0
 8002446:	b29a      	uxth	r2, r3
 8002448:	f8b7 376e 	ldrh.w	r3, [r7, #1902]	; 0x76e
 800244c:	4413      	add	r3, r2
 800244e:	f8a7 376e 	strh.w	r3, [r7, #1902]	; 0x76e
            	        	        	      for (i = 0; i < num_segments; i++) {
 8002452:	f8b7 3766 	ldrh.w	r3, [r7, #1894]	; 0x766
 8002456:	3301      	adds	r3, #1
 8002458:	f8a7 3766 	strh.w	r3, [r7, #1894]	; 0x766
 800245c:	f897 375f 	ldrb.w	r3, [r7, #1887]	; 0x75f
 8002460:	b29b      	uxth	r3, r3
 8002462:	f8b7 2766 	ldrh.w	r2, [r7, #1894]	; 0x766
 8002466:	429a      	cmp	r2, r3
 8002468:	d3b9      	bcc.n	80023de <main+0x266>
            	        	        	      }

            	        	        	      //printf("num steps: %i\n\r", num_steps);
            	        	        	      ssd1306_Fill(Black);
 800246a:	2000      	movs	r0, #0
 800246c:	f000 fb18 	bl	8002aa0 <ssd1306_Fill>
            	        	        	      ssd1306_SetCursor(2,0);
 8002470:	2100      	movs	r1, #0
 8002472:	2002      	movs	r0, #2
 8002474:	f000 fc6e 	bl	8002d54 <ssd1306_SetCursor>
            	        	        	      ssd1306_WriteString("Steps:", Font_11x18, White);
 8002478:	4a28      	ldr	r2, [pc, #160]	; (800251c <main+0x3a4>)
 800247a:	2301      	movs	r3, #1
 800247c:	ca06      	ldmia	r2, {r1, r2}
 800247e:	482b      	ldr	r0, [pc, #172]	; (800252c <main+0x3b4>)
 8002480:	f000 fc42 	bl	8002d08 <ssd1306_WriteString>
            	        	        	      ssd1306_SetCursor(2,15);
 8002484:	210f      	movs	r1, #15
 8002486:	2002      	movs	r0, #2
 8002488:	f000 fc64 	bl	8002d54 <ssd1306_SetCursor>
            	        	        	      ssd1306_WriteString(itoa(num_steps,message,10), Font_11x18, White);
 800248c:	f8b7 376e 	ldrh.w	r3, [r7, #1902]	; 0x76e
 8002490:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002494:	220a      	movs	r2, #10
 8002496:	4618      	mov	r0, r3
 8002498:	f004 fd55 	bl	8006f46 <itoa>
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <main+0x3a4>)
 800249e:	2301      	movs	r3, #1
 80024a0:	ca06      	ldmia	r2, {r1, r2}
 80024a2:	f000 fc31 	bl	8002d08 <ssd1306_WriteString>
            	        	        	      ssd1306_SetCursor(2,30);
 80024a6:	211e      	movs	r1, #30
 80024a8:	2002      	movs	r0, #2
 80024aa:	f000 fc53 	bl	8002d54 <ssd1306_SetCursor>
            	        	        	      ssd1306_WriteString("Distance:", Font_11x18, White);
 80024ae:	4a1b      	ldr	r2, [pc, #108]	; (800251c <main+0x3a4>)
 80024b0:	2301      	movs	r3, #1
 80024b2:	ca06      	ldmia	r2, {r1, r2}
 80024b4:	481e      	ldr	r0, [pc, #120]	; (8002530 <main+0x3b8>)
 80024b6:	f000 fc27 	bl	8002d08 <ssd1306_WriteString>
  //          	        	        	  ssd1306_WriteString(buf1, Font_11x18, White);
  //          	        	        	  ssd1306_SetCursor(2,45);
  //          	        	        	  ssd1306_WriteString("20 miles", Font_11x18, White);
  //          	        	        	  sprintf(buf2,"%0.4f",cur_lon);
  //          	        	        	  ssd1306_WriteString(buf2, Font_11x18, White);
            	        	        	      ssd1306_UpdateScreen();
 80024ba:	f000 fb15 	bl	8002ae8 <ssd1306_UpdateScreen>

            	        	        	      if((pre_lat == 0) && (pre_lon == 0))
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <main+0x3bc>)
 80024c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f7fe fb0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <main+0x3cc>
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <main+0x3c0>)
 80024d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	f7fe fb00 	bl	8000ae8 <__aeabi_dcmpeq>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02a      	beq.n	8002544 <main+0x3cc>
            	        	        	      {

            	        	        	    	ssd1306_SetCursor(2,50);
 80024ee:	2132      	movs	r1, #50	; 0x32
 80024f0:	2002      	movs	r0, #2
 80024f2:	f000 fc2f 	bl	8002d54 <ssd1306_SetCursor>
            	        	        	    	ssd1306_WriteString("Need GPS Lock", Font_7x10, White);
 80024f6:	4a11      	ldr	r2, [pc, #68]	; (800253c <main+0x3c4>)
 80024f8:	2301      	movs	r3, #1
 80024fa:	ca06      	ldmia	r2, {r1, r2}
 80024fc:	4810      	ldr	r0, [pc, #64]	; (8002540 <main+0x3c8>)
 80024fe:	f000 fc03 	bl	8002d08 <ssd1306_WriteString>
            	        	        	    	ssd1306_UpdateScreen();
 8002502:	f000 faf1 	bl	8002ae8 <ssd1306_UpdateScreen>
 8002506:	e077      	b.n	80025f8 <main+0x480>
 8002508:	20000808 	.word	0x20000808
 800250c:	200006d8 	.word	0x200006d8
 8002510:	20000810 	.word	0x20000810
 8002514:	20000830 	.word	0x20000830
 8002518:	0800cbc4 	.word	0x0800cbc4
 800251c:	2000001c 	.word	0x2000001c
 8002520:	20000831 	.word	0x20000831
 8002524:	20000780 	.word	0x20000780
 8002528:	425d5134 	.word	0x425d5134
 800252c:	0800cb98 	.word	0x0800cb98
 8002530:	0800cba0 	.word	0x0800cba0
 8002534:	20000a48 	.word	0x20000a48
 8002538:	20000a50 	.word	0x20000a50
 800253c:	20000014 	.word	0x20000014
 8002540:	0800cbac 	.word	0x0800cbac
            	        	        	      }
            	        	        	      else
            	        	        	      {

            	        	        	    	new_distance = calculateDistance(pre_lat, pre_lon, cur_lat, cur_lon);
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <main+0x4a4>)
 8002546:	ed93 7b00 	vldr	d7, [r3]
 800254a:	4b35      	ldr	r3, [pc, #212]	; (8002620 <main+0x4a8>)
 800254c:	ed93 6b00 	vldr	d6, [r3]
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <main+0x4ac>)
 8002552:	ed93 5b00 	vldr	d5, [r3]
 8002556:	4b34      	ldr	r3, [pc, #208]	; (8002628 <main+0x4b0>)
 8002558:	ed93 4b00 	vldr	d4, [r3]
 800255c:	eeb0 3a44 	vmov.f32	s6, s8
 8002560:	eef0 3a64 	vmov.f32	s7, s9
 8002564:	eeb0 2a45 	vmov.f32	s4, s10
 8002568:	eef0 2a65 	vmov.f32	s5, s11
 800256c:	eeb0 1a46 	vmov.f32	s2, s12
 8002570:	eef0 1a66 	vmov.f32	s3, s13
 8002574:	eeb0 0a47 	vmov.f32	s0, s14
 8002578:	eef0 0a67 	vmov.f32	s1, s15
 800257c:	f7fe fdbc 	bl	80010f8 <calculateDistance>
 8002580:	ec53 2b10 	vmov	r2, r3, d0
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fb3e 	bl	8000c08 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	f507 62eb 	add.w	r2, r7, #1880	; 0x758
 8002592:	6013      	str	r3, [r2, #0]
            	        	        	    	if (new_distance > MIN_GPS_DISTANCE){
 8002594:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80025a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd0d      	ble.n	80025c6 <main+0x44e>
            	        	        	    		total_distance += new_distance;
 80025aa:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025be:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80025c2:	edc3 7a00 	vstr	s15, [r3]
            	        	        	    	}
  											sprintf(buf1,"%0.2f",total_distance);
 80025c6:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	f7fd ffcc 	bl	8000568 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	f507 60e7 	add.w	r0, r7, #1848	; 0x738
 80025d8:	4914      	ldr	r1, [pc, #80]	; (800262c <main+0x4b4>)
 80025da:	f006 f829 	bl	8008630 <siprintf>
  											ssd1306_SetCursor(2,45);
 80025de:	212d      	movs	r1, #45	; 0x2d
 80025e0:	2002      	movs	r0, #2
 80025e2:	f000 fbb7 	bl	8002d54 <ssd1306_SetCursor>
  											ssd1306_WriteString(buf1, Font_11x18, White);
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <main+0x4b8>)
 80025e8:	f507 60e7 	add.w	r0, r7, #1848	; 0x738
 80025ec:	2301      	movs	r3, #1
 80025ee:	ca06      	ldmia	r2, {r1, r2}
 80025f0:	f000 fb8a 	bl	8002d08 <ssd1306_WriteString>
  											ssd1306_UpdateScreen();
 80025f4:	f000 fa78 	bl	8002ae8 <ssd1306_UpdateScreen>

            	        	        	      }
            	        	        	      pre_lat = cur_lat;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <main+0x4ac>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	4907      	ldr	r1, [pc, #28]	; (800261c <main+0x4a4>)
 8002600:	e9c1 2300 	strd	r2, r3, [r1]
            	        	        	      pre_lon = cur_lon;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <main+0x4b0>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	4905      	ldr	r1, [pc, #20]	; (8002620 <main+0x4a8>)
 800260c:	e9c1 2300 	strd	r2, r3, [r1]
            	        	        	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002614:	4807      	ldr	r0, [pc, #28]	; (8002634 <main+0x4bc>)
 8002616:	f001 f9ed 	bl	80039f4 <HAL_GPIO_TogglePin>
                  {
 800261a:	e5f4      	b.n	8002206 <main+0x8e>
 800261c:	20000a48 	.word	0x20000a48
 8002620:	20000a50 	.word	0x20000a50
 8002624:	20000a38 	.word	0x20000a38
 8002628:	20000a40 	.word	0x20000a40
 800262c:	0800cbbc 	.word	0x0800cbbc
 8002630:	2000001c 	.word	0x2000001c
 8002634:	48000400 	.word	0x48000400

08002638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b096      	sub	sp, #88	; 0x58
 800263c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	2244      	movs	r2, #68	; 0x44
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f006 f855 	bl	80086f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800264c:	463b      	mov	r3, r7
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800265a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800265e:	f002 f915 	bl	800488c <HAL_PWREx_ControlVoltageScaling>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002668:	f000 f936 	bl	80028d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800266c:	2301      	movs	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002676:	2302      	movs	r3, #2
 8002678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800267a:	2303      	movs	r3, #3
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002682:	2314      	movs	r3, #20
 8002684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002686:	2302      	movs	r3, #2
 8002688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800268a:	2302      	movs	r3, #2
 800268c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4618      	mov	r0, r3
 8002694:	f002 f950 	bl	8004938 <HAL_RCC_OscConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800269e:	f000 f91b 	bl	80028d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a2:	230f      	movs	r3, #15
 80026a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a6:	2303      	movs	r3, #3
 80026a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026b6:	463b      	mov	r3, r7
 80026b8:	2104      	movs	r1, #4
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fd9e 	bl	80051fc <HAL_RCC_ClockConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80026c6:	f000 f907 	bl	80028d8 <Error_Handler>
  }
}
 80026ca:	bf00      	nop
 80026cc:	3758      	adds	r7, #88	; 0x58
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <MX_I2C1_Init+0x74>)
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <MX_I2C1_Init+0x78>)
 80026dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_I2C1_Init+0x74>)
 80026e0:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <MX_I2C1_Init+0x7c>)
 80026e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_I2C1_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <MX_I2C1_Init+0x74>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_I2C1_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <MX_I2C1_Init+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_I2C1_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_I2C1_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_I2C1_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800270e:	480e      	ldr	r0, [pc, #56]	; (8002748 <MX_I2C1_Init+0x74>)
 8002710:	f001 f98a 	bl	8003a28 <HAL_I2C_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800271a:	f000 f8dd 	bl	80028d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800271e:	2100      	movs	r1, #0
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <MX_I2C1_Init+0x74>)
 8002722:	f002 f80d 	bl	8004740 <HAL_I2CEx_ConfigAnalogFilter>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800272c:	f000 f8d4 	bl	80028d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_I2C1_Init+0x74>)
 8002734:	f002 f84f 	bl	80047d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800273e:	f000 f8cb 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200006d8 	.word	0x200006d8
 800274c:	40005400 	.word	0x40005400
 8002750:	10909cec 	.word	0x10909cec

08002754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <MX_I2C2_Init+0x74>)
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <MX_I2C2_Init+0x78>)
 800275c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <MX_I2C2_Init+0x7c>)
 8002762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_I2C2_Init+0x74>)
 800276c:	2201      	movs	r2, #1
 800276e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <MX_I2C2_Init+0x74>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002784:	2200      	movs	r2, #0
 8002786:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_I2C2_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800278e:	480e      	ldr	r0, [pc, #56]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002790:	f001 f94a 	bl	8003a28 <HAL_I2C_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800279a:	f000 f89d 	bl	80028d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279e:	2100      	movs	r1, #0
 80027a0:	4809      	ldr	r0, [pc, #36]	; (80027c8 <MX_I2C2_Init+0x74>)
 80027a2:	f001 ffcd 	bl	8004740 <HAL_I2CEx_ConfigAnalogFilter>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80027ac:	f000 f894 	bl	80028d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027b0:	2100      	movs	r1, #0
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_I2C2_Init+0x74>)
 80027b4:	f002 f80f 	bl	80047d6 <HAL_I2CEx_ConfigDigitalFilter>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80027be:	f000 f88b 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000072c 	.word	0x2000072c
 80027cc:	40005800 	.word	0x40005800
 80027d0:	10909cec 	.word	0x10909cec

080027d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <MX_USART1_UART_Init+0x68>)
 80027da:	4a19      	ldr	r2, [pc, #100]	; (8002840 <MX_USART1_UART_Init+0x6c>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_USART1_UART_Init+0x68>)
 80027e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_USART1_UART_Init+0x68>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <MX_USART1_UART_Init+0x68>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_USART1_UART_Init+0x68>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_USART1_UART_Init+0x68>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_USART1_UART_Init+0x68>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <MX_USART1_UART_Init+0x68>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_USART1_UART_Init+0x68>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_USART1_UART_Init+0x68>)
 8002812:	2218      	movs	r2, #24
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_USART1_UART_Init+0x68>)
 8002818:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <MX_USART1_UART_Init+0x68>)
 8002820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_USART1_UART_Init+0x68>)
 8002828:	f003 f892 	bl	8005950 <HAL_UART_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8002832:	f000 f851 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000780 	.word	0x20000780
 8002840:	40013800 	.word	0x40013800

08002844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <MX_GPIO_Init+0x90>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <MX_GPIO_Init+0x90>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_GPIO_Init+0x90>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2102      	movs	r1, #2
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028aa:	f001 f88b 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028ae:	2302      	movs	r3, #2
 80028b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c8:	f000 ff0a 	bl	80036e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000

080028d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028dc:	b672      	cpsid	i
}
 80028de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <Error_Handler+0x8>

080028e2 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "I2C.h"

void ssd1306_Reset(void) {
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
		uint8_t buffer[2];
		buffer[0] = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	733b      	strb	r3, [r7, #12]
		buffer[1] = byte;
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	737b      	strb	r3, [r7, #13]
		//I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
 8002902:	f107 020c 	add.w	r2, r7, #12
 8002906:	2302      	movs	r3, #2
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	4803      	ldr	r0, [pc, #12]	; (8002918 <ssd1306_WriteCommand+0x28>)
 800290c:	f7fe fd91 	bl	8001432 <I2C_SendData>
		//I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, &byte, 1);
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40005800 	.word	0x40005800

0800291c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800291c:	b580      	push	{r7, lr}
 800291e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002922:	af00      	add	r7, sp, #0
 8002924:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002928:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800292c:	6018      	str	r0, [r3, #0]
 800292e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002932:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002936:	6019      	str	r1, [r3, #0]
		int i;
		uint8_t buffer2[SSD1306_BUFFER_SIZE+1];
		buffer2[0] = 0x40;
 8002938:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800293c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	701a      	strb	r2, [r3, #0]
		for(i=0; i<buff_size;  i++)
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800294a:	e015      	b.n	8002978 <ssd1306_WriteData+0x5c>
			buffer2[i+1] = buffer[i];
 800294c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002950:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002954:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	441a      	add	r2, r3
 800295c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002960:	3301      	adds	r3, #1
 8002962:	7811      	ldrb	r1, [r2, #0]
 8002964:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002968:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 800296c:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<buff_size;  i++)
 800296e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002972:	3301      	adds	r3, #1
 8002974:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8002978:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800297c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002980:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d8e0      	bhi.n	800294c <ssd1306_WriteData+0x30>
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer2, buff_size+1);
 800298a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800298e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f107 0208 	add.w	r2, r7, #8
 800299e:	2178      	movs	r1, #120	; 0x78
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <ssd1306_WriteData+0x94>)
 80029a2:	f7fe fd46 	bl	8001432 <I2C_SendData>
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 80029a6:	bf00      	nop
 80029a8:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40005800 	.word	0x40005800

080029b4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
		volatile uint32_t i;
	
    // Reset OLED
    ssd1306_Reset();
 80029ba:	f7ff ff92 	bl	80028e2 <ssd1306_Reset>

    // Wait for the screen to boot
    //delay(100);
	  for(i=0; i<100000; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	e002      	b.n	80029ca <ssd1306_Init+0x16>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <ssd1306_Init+0xe4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d9f8      	bls.n	80029c4 <ssd1306_Init+0x10>
			;

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80029d2:	2000      	movs	r0, #0
 80029d4:	f000 f9ea 	bl	8002dac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80029d8:	2020      	movs	r0, #32
 80029da:	f7ff ff89 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80029de:	2000      	movs	r0, #0
 80029e0:	f7ff ff86 	bl	80028f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029e4:	20b0      	movs	r0, #176	; 0xb0
 80029e6:	f7ff ff83 	bl	80028f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80029ea:	20c8      	movs	r0, #200	; 0xc8
 80029ec:	f7ff ff80 	bl	80028f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff ff7d 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80029f6:	2010      	movs	r0, #16
 80029f8:	f7ff ff7a 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80029fc:	2040      	movs	r0, #64	; 0x40
 80029fe:	f7ff ff77 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002a02:	20ff      	movs	r0, #255	; 0xff
 8002a04:	f000 f9be 	bl	8002d84 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a08:	20a1      	movs	r0, #161	; 0xa1
 8002a0a:	f7ff ff71 	bl	80028f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a0e:	20a6      	movs	r0, #166	; 0xa6
 8002a10:	f7ff ff6e 	bl	80028f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002a14:	20a8      	movs	r0, #168	; 0xa8
 8002a16:	f7ff ff6b 	bl	80028f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002a1a:	203f      	movs	r0, #63	; 0x3f
 8002a1c:	f7ff ff68 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a20:	20a4      	movs	r0, #164	; 0xa4
 8002a22:	f7ff ff65 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002a26:	20d3      	movs	r0, #211	; 0xd3
 8002a28:	f7ff ff62 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7ff ff5f 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a32:	20d5      	movs	r0, #213	; 0xd5
 8002a34:	f7ff ff5c 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002a38:	20f0      	movs	r0, #240	; 0xf0
 8002a3a:	f7ff ff59 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002a3e:	20d9      	movs	r0, #217	; 0xd9
 8002a40:	f7ff ff56 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a44:	2022      	movs	r0, #34	; 0x22
 8002a46:	f7ff ff53 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a4a:	20da      	movs	r0, #218	; 0xda
 8002a4c:	f7ff ff50 	bl	80028f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a50:	2012      	movs	r0, #18
 8002a52:	f7ff ff4d 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a56:	20db      	movs	r0, #219	; 0xdb
 8002a58:	f7ff ff4a 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a5c:	2020      	movs	r0, #32
 8002a5e:	f7ff ff47 	bl	80028f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a62:	208d      	movs	r0, #141	; 0x8d
 8002a64:	f7ff ff44 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a68:	2014      	movs	r0, #20
 8002a6a:	f7ff ff41 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f000 f99c 	bl	8002dac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f000 f813 	bl	8002aa0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a7a:	f000 f835 	bl	8002ae8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <ssd1306_Init+0xe8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <ssd1306_Init+0xe8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <ssd1306_Init+0xe8>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	715a      	strb	r2, [r3, #5]
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	0001869f 	.word	0x0001869f
 8002a9c:	20000e60 	.word	0x20000e60

08002aa0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e00d      	b.n	8002acc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <ssd1306_Fill+0x1a>
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	e000      	b.n	8002abc <ssd1306_Fill+0x1c>
 8002aba:	21ff      	movs	r1, #255	; 0xff
 8002abc:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <ssd1306_Fill+0x44>)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad2:	d3ed      	bcc.n	8002ab0 <ssd1306_Fill+0x10>
    }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000a60 	.word	0x20000a60

08002ae8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
		uint8_t i;
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002aee:	2300      	movs	r3, #0
 8002af0:	71fb      	strb	r3, [r7, #7]
 8002af2:	e016      	b.n	8002b22 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	3b50      	subs	r3, #80	; 0x50
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fef8 	bl	80028f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff fef5 	bl	80028f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002b06:	2010      	movs	r0, #16
 8002b08:	f7ff fef2 	bl	80028f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	01db      	lsls	r3, r3, #7
 8002b10:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <ssd1306_UpdateScreen+0x4c>)
 8002b12:	4413      	add	r3, r2
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff00 	bl	800291c <ssd1306_WriteData>
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	71fb      	strb	r3, [r7, #7]
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d9e5      	bls.n	8002af4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000a60 	.word	0x20000a60

08002b38 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
 8002b42:	460b      	mov	r3, r1
 8002b44:	71bb      	strb	r3, [r7, #6]
 8002b46:	4613      	mov	r3, r2
 8002b48:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db48      	blt.n	8002be4 <ssd1306_DrawPixel+0xac>
 8002b52:	79bb      	ldrb	r3, [r7, #6]
 8002b54:	2b3f      	cmp	r3, #63	; 0x3f
 8002b56:	d845      	bhi.n	8002be4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <ssd1306_DrawPixel+0xb8>)
 8002b5a:	791b      	ldrb	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002b60:	797b      	ldrb	r3, [r7, #5]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002b6e:	797b      	ldrb	r3, [r7, #5]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d11a      	bne.n	8002baa <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	79bb      	ldrb	r3, [r7, #6]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	b2d8      	uxtb	r0, r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	4413      	add	r3, r2
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <ssd1306_DrawPixel+0xbc>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	b25a      	sxtb	r2, r3
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b259      	sxtb	r1, r3
 8002b9a:	79fa      	ldrb	r2, [r7, #7]
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b2c9      	uxtb	r1, r1
 8002ba4:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <ssd1306_DrawPixel+0xbc>)
 8002ba6:	54d1      	strb	r1, [r2, r3]
 8002ba8:	e01d      	b.n	8002be6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	79bb      	ldrb	r3, [r7, #6]
 8002bae:	08db      	lsrs	r3, r3, #3
 8002bb0:	b2d8      	uxtb	r0, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	01db      	lsls	r3, r3, #7
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <ssd1306_DrawPixel+0xbc>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	b25a      	sxtb	r2, r3
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b259      	sxtb	r1, r3
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	01db      	lsls	r3, r3, #7
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2c9      	uxtb	r1, r1
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <ssd1306_DrawPixel+0xbc>)
 8002be0:	54d1      	strb	r1, [r2, r3]
 8002be2:	e000      	b.n	8002be6 <ssd1306_DrawPixel+0xae>
        return;
 8002be4:	bf00      	nop
    }
}
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20000e60 	.word	0x20000e60
 8002bf4:	20000a60 	.word	0x20000a60

08002bf8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4604      	mov	r4, r0
 8002c00:	1d38      	adds	r0, r7, #4
 8002c02:	e880 0006 	stmia.w	r0, {r1, r2}
 8002c06:	461a      	mov	r2, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b1f      	cmp	r3, #31
 8002c14:	d902      	bls.n	8002c1c <ssd1306_WriteChar+0x24>
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b7e      	cmp	r3, #126	; 0x7e
 8002c1a:	d901      	bls.n	8002c20 <ssd1306_WriteChar+0x28>
        return 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e06d      	b.n	8002cfc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c20:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	793b      	ldrb	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	dc06      	bgt.n	8002c3c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002c2e:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002c30:	885b      	ldrh	r3, [r3, #2]
 8002c32:	461a      	mov	r2, r3
 8002c34:	797b      	ldrb	r3, [r7, #5]
 8002c36:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	dd01      	ble.n	8002c40 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e05d      	b.n	8002cfc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e04c      	b.n	8002ce0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	3b20      	subs	r3, #32
 8002c4c:	7979      	ldrb	r1, [r7, #5]
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	440b      	add	r3, r1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e034      	b.n	8002cd0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	b2d8      	uxtb	r0, r3
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002c86:	885b      	ldrh	r3, [r3, #2]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	7bba      	ldrb	r2, [r7, #14]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7ff ff4f 	bl	8002b38 <ssd1306_DrawPixel>
 8002c9a:	e016      	b.n	8002cca <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b2d8      	uxtb	r0, r3
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002cac:	885b      	ldrh	r3, [r3, #2]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b2d9      	uxtb	r1, r3
 8002cb8:	7bbb      	ldrb	r3, [r7, #14]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f7ff ff37 	bl	8002b38 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	793b      	ldrb	r3, [r7, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d3c5      	bcc.n	8002c66 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	797b      	ldrb	r3, [r7, #5]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d3ad      	bcc.n	8002c46 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	793b      	ldrb	r3, [r7, #4]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <ssd1306_WriteChar+0x10c>)
 8002cf8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3724      	adds	r7, #36	; 0x24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	20000e60 	.word	0x20000e60

08002d08 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	1d38      	adds	r0, r7, #4
 8002d12:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d16:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002d18:	e012      	b.n	8002d40 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	7818      	ldrb	r0, [r3, #0]
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	1d3a      	adds	r2, r7, #4
 8002d22:	ca06      	ldmia	r2, {r1, r2}
 8002d24:	f7ff ff68 	bl	8002bf8 <ssd1306_WriteChar>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d002      	beq.n	8002d3a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	e008      	b.n	8002d4c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e8      	bne.n	8002d1a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <ssd1306_SetCursor+0x2c>)
 8002d6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d6c:	79bb      	ldrb	r3, [r7, #6]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <ssd1306_SetCursor+0x2c>)
 8002d72:	805a      	strh	r2, [r3, #2]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20000e60 	.word	0x20000e60

08002d84 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002d8e:	2381      	movs	r3, #129	; 0x81
 8002d90:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fdab 	bl	80028f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fda7 	bl	80028f0 <ssd1306_WriteCommand>
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002dbc:	23af      	movs	r3, #175	; 0xaf
 8002dbe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <ssd1306_SetDisplayOn+0x38>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	719a      	strb	r2, [r3, #6]
 8002dc6:	e004      	b.n	8002dd2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002dc8:	23ae      	movs	r3, #174	; 0xae
 8002dca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <ssd1306_SetDisplayOn+0x38>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fd8b 	bl	80028f0 <ssd1306_WriteCommand>
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000e60 	.word	0x20000e60

08002de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_MspInit+0x44>)
 8002df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_MspInit+0x44>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6613      	str	r3, [r2, #96]	; 0x60
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_MspInit+0x44>)
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_MspInit+0x44>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_MspInit+0x44>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_MspInit+0x44>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b098      	sub	sp, #96	; 0x60
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e48:	f107 0318 	add.w	r3, r7, #24
 8002e4c:	2234      	movs	r2, #52	; 0x34
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f005 fc50 	bl	80086f6 <memset>
  if(hi2c->Instance==I2C1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3e      	ldr	r2, [pc, #248]	; (8002f54 <HAL_I2C_MspInit+0x124>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d138      	bne.n	8002ed2 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e60:	2340      	movs	r3, #64	; 0x40
 8002e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e68:	f107 0318 	add.w	r3, r7, #24
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fbe9 	bl	8005644 <HAL_RCCEx_PeriphCLKConfig>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002e78:	f7ff fd2e 	bl	80028d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e88:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 8002e94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e98:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9a:	2312      	movs	r3, #18
 8002e9c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb4:	f000 fc14 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ed0:	e03b      	b.n	8002f4a <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_I2C_MspInit+0x12c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d136      	bne.n	8002f4a <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fbab 	bl	8005644 <HAL_RCCEx_PeriphCLKConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 8002ef4:	f7ff fcf0 	bl	80028d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 8002f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f14:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f16:	2312      	movs	r3, #18
 8002f18:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f22:	2304      	movs	r3, #4
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <HAL_I2C_MspInit+0x130>)
 8002f2e:	f000 fbd7 	bl	80036e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_I2C_MspInit+0x128>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	3760      	adds	r7, #96	; 0x60
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40005400 	.word	0x40005400
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40005800 	.word	0x40005800
 8002f60:	48000400 	.word	0x48000400

08002f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b096      	sub	sp, #88	; 0x58
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	2234      	movs	r2, #52	; 0x34
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f005 fbb6 	bl	80086f6 <memset>
  if(huart->Instance==USART1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_UART_MspInit+0xb4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d13d      	bne.n	8003010 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 fb4f 	bl	8005644 <HAL_RCCEx_PeriphCLKConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fac:	f7ff fc94 	bl	80028d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_UART_MspInit+0xb8>)
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_UART_MspInit+0xb8>)
 8002fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fba:	6613      	str	r3, [r2, #96]	; 0x60
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_UART_MspInit+0xb8>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_UART_MspInit+0xb8>)
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	4a13      	ldr	r2, [pc, #76]	; (800301c <HAL_UART_MspInit+0xb8>)
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_UART_MspInit+0xb8>)
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fe0:	23c0      	movs	r3, #192	; 0xc0
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ff0:	2307      	movs	r3, #7
 8002ff2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4809      	ldr	r0, [pc, #36]	; (8003020 <HAL_UART_MspInit+0xbc>)
 8002ffc:	f000 fb70 	bl	80036e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	2025      	movs	r0, #37	; 0x25
 8003006:	f000 fab6 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800300a:	2025      	movs	r0, #37	; 0x25
 800300c:	f000 facf 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003010:	bf00      	nop
 8003012:	3758      	adds	r7, #88	; 0x58
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40013800 	.word	0x40013800
 800301c:	40021000 	.word	0x40021000
 8003020:	48000400 	.word	0x48000400

08003024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <NMI_Handler+0x4>

0800302a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <HardFault_Handler+0x4>

08003030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <MemManage_Handler+0x4>

08003036 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <BusFault_Handler+0x4>

0800303c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <UsageFault_Handler+0x4>

08003042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003070:	f000 f962 	bl	8003338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}

08003078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <USART1_IRQHandler+0x10>)
 800307e:	f002 fd01 	bl	8005a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000780 	.word	0x20000780

0800308c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return 1;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_kill>:

int _kill(int pid, int sig)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030a6:	f005 fbf9 	bl	800889c <__errno>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2216      	movs	r2, #22
 80030ae:	601a      	str	r2, [r3, #0]
  return -1;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_exit>:

void _exit (int status)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffe7 	bl	800309c <_kill>
  while (1) {}    /* Make sure we hang here */
 80030ce:	e7fe      	b.n	80030ce <_exit+0x12>

080030d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00a      	b.n	80030f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030e2:	f3af 8000 	nop.w
 80030e6:	4601      	mov	r1, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	b2ca      	uxtb	r2, r1
 80030f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dbf0      	blt.n	80030e2 <_read+0x12>
  }

  return len;
 8003100:	687b      	ldr	r3, [r7, #4]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e009      	b.n	8003130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60ba      	str	r2, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	dbf1      	blt.n	800311c <_write+0x12>
  }
  return len;
 8003138:	687b      	ldr	r3, [r7, #4]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_close>:

int _close(int file)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800316a:	605a      	str	r2, [r3, #4]
  return 0;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <_isatty>:

int _isatty(int file)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <_sbrk+0x5c>)
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <_sbrk+0x60>)
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <_sbrk+0x64>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <_sbrk+0x64>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <_sbrk+0x68>)
 80031cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d207      	bcs.n	80031ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031dc:	f005 fb5e 	bl	800889c <__errno>
 80031e0:	4603      	mov	r3, r0
 80031e2:	220c      	movs	r2, #12
 80031e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	e009      	b.n	8003200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <_sbrk+0x64>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <_sbrk+0x64>)
 80031fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	2000a000 	.word	0x2000a000
 800320c:	00000400 	.word	0x00000400
 8003210:	20000e68 	.word	0x20000e68
 8003214:	20000fc0 	.word	0x20000fc0

08003218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <SystemInit+0x20>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <SystemInit+0x20>)
 8003224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800323c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003274 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003240:	f7ff ffea 	bl	8003218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <LoopForever+0x6>)
  ldr r1, =_edata
 8003246:	490d      	ldr	r1, [pc, #52]	; (800327c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <LoopForever+0xe>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800325c:	4c0a      	ldr	r4, [pc, #40]	; (8003288 <LoopForever+0x16>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800326a:	f005 fb1d 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800326e:	f7fe ff83 	bl	8002178 <main>

08003272 <LoopForever>:

LoopForever:
    b LoopForever
 8003272:	e7fe      	b.n	8003272 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003274:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800327c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003280:	0800e7e0 	.word	0x0800e7e0
  ldr r2, =_sbss
 8003284:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003288:	20000fbc 	.word	0x20000fbc

0800328c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC1_2_IRQHandler>

0800328e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 f961 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800329e:	200f      	movs	r0, #15
 80032a0:	f000 f80e 	bl	80032c0 <HAL_InitTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	71fb      	strb	r3, [r7, #7]
 80032ae:	e001      	b.n	80032b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b0:	f7ff fd9a 	bl	8002de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032b4:	79fb      	ldrb	r3, [r7, #7]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032cc:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_InitTick+0x6c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <HAL_InitTick+0x70>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_InitTick+0x6c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f96d 	bl	80035ca <HAL_SYSTICK_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d809      	bhi.n	8003310 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fc:	2200      	movs	r2, #0
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f000 f937 	bl	8003576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_InitTick+0x74>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e007      	b.n	8003320 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e004      	b.n	8003320 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e001      	b.n	8003320 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000002c 	.word	0x2000002c
 8003330:	20000024 	.word	0x20000024
 8003334:	20000028 	.word	0x20000028

08003338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_IncTick+0x20>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x24>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4413      	add	r3, r2
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <HAL_IncTick+0x24>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	2000002c 	.word	0x2000002c
 800335c:	20000e6c 	.word	0x20000e6c

08003360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return uwTick;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_GetTick+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000e6c 	.word	0x20000e6c

08003378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7ff ffee 	bl	8003360 <HAL_GetTick>
 8003384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d005      	beq.n	800339e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_Delay+0x44>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800339e:	bf00      	nop
 80033a0:	f7ff ffde 	bl	8003360 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d8f7      	bhi.n	80033a0 <HAL_Delay+0x28>
  {
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000002c 	.word	0x2000002c

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff29 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff3e 	bl	8003408 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff8e 	bl	80034b4 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff31 	bl	8003424 <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d008      	beq.n	800360c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e022      	b.n	8003652 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020e 	bic.w	r2, r2, #14
 800361a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f003 021c 	and.w	r2, r3, #28
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f202 	lsl.w	r2, r1, r2
 800363e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d005      	beq.n	8003682 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e029      	b.n	80036d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020e 	bic.w	r2, r2, #14
 8003690:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 021c 	and.w	r2, r3, #28
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
    }
  }
  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ee:	e14e      	b.n	800398e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2101      	movs	r1, #1
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8140 	beq.w	8003988 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d005      	beq.n	8003720 <HAL_GPIO_Init+0x40>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d130      	bne.n	8003782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003756:	2201      	movs	r2, #1
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0201 	and.w	r2, r3, #1
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b03      	cmp	r3, #3
 800378c:	d017      	beq.n	80037be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	2203      	movs	r2, #3
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d123      	bne.n	8003812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	08da      	lsrs	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	220f      	movs	r2, #15
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	6939      	ldr	r1, [r7, #16]
 800380e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0203 	and.w	r2, r3, #3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 809a 	beq.w	8003988 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003854:	4b55      	ldr	r3, [pc, #340]	; (80039ac <HAL_GPIO_Init+0x2cc>)
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	4a54      	ldr	r2, [pc, #336]	; (80039ac <HAL_GPIO_Init+0x2cc>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6613      	str	r3, [r2, #96]	; 0x60
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <HAL_GPIO_Init+0x2cc>)
 8003862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800386c:	4a50      	ldr	r2, [pc, #320]	; (80039b0 <HAL_GPIO_Init+0x2d0>)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3302      	adds	r3, #2
 8003874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	220f      	movs	r2, #15
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003896:	d013      	beq.n	80038c0 <HAL_GPIO_Init+0x1e0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a46      	ldr	r2, [pc, #280]	; (80039b4 <HAL_GPIO_Init+0x2d4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00d      	beq.n	80038bc <HAL_GPIO_Init+0x1dc>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a45      	ldr	r2, [pc, #276]	; (80039b8 <HAL_GPIO_Init+0x2d8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <HAL_GPIO_Init+0x1d8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a44      	ldr	r2, [pc, #272]	; (80039bc <HAL_GPIO_Init+0x2dc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_GPIO_Init+0x1d4>
 80038b0:	2303      	movs	r3, #3
 80038b2:	e006      	b.n	80038c2 <HAL_GPIO_Init+0x1e2>
 80038b4:	2307      	movs	r3, #7
 80038b6:	e004      	b.n	80038c2 <HAL_GPIO_Init+0x1e2>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e002      	b.n	80038c2 <HAL_GPIO_Init+0x1e2>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_GPIO_Init+0x1e2>
 80038c0:	2300      	movs	r3, #0
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	f002 0203 	and.w	r2, r2, #3
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	4093      	lsls	r3, r2
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038d2:	4937      	ldr	r1, [pc, #220]	; (80039b0 <HAL_GPIO_Init+0x2d0>)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	3302      	adds	r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038e0:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003904:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800392e:	4a24      	ldr	r2, [pc, #144]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003958:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003982:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <HAL_GPIO_Init+0x2e0>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3301      	adds	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f aea9 	bne.w	80036f0 <HAL_GPIO_Init+0x10>
  }
}
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40010000 	.word	0x40010000
 80039b4:	48000400 	.word	0x48000400
 80039b8:	48000800 	.word	0x48000800
 80039bc:	48000c00 	.word	0x48000c00
 80039c0:	40010400 	.word	0x40010400

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43d9      	mvns	r1, r3
 8003a12:	887b      	ldrh	r3, [r7, #2]
 8003a14:	400b      	ands	r3, r1
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e08d      	b.n	8003b56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff f9ee 	bl	8002e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	; 0x24
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	e006      	b.n	8003ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d108      	bne.n	8003aca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	e007      	b.n	8003ada <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	f040 80f9 	bne.w	8003d7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x34>
 8003b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0ed      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Mem_Write+0x4e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0e6      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bb6:	f7ff fbd3 	bl	8003360 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fbcd 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0d1      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2221      	movs	r2, #33	; 0x21
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c00:	88f8      	ldrh	r0, [r7, #6]
 8003c02:	893a      	ldrh	r2, [r7, #8]
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fadd 	bl	80041d0 <I2C_RequestMemoryWrite>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a9      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2bff      	cmp	r3, #255	; 0xff
 8003c30:	d90e      	bls.n	8003c50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	22ff      	movs	r2, #255	; 0xff
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fd47 	bl	80046dc <I2C_TransferConfig>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fd36 	bl	80046dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fbc6 	bl	8004406 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e07b      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d034      	beq.n	8003d28 <HAL_I2C_Mem_Write+0x1c8>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d130      	bne.n	8003d28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb49 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e04d      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2bff      	cmp	r3, #255	; 0xff
 8003ce8:	d90e      	bls.n	8003d08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22ff      	movs	r2, #255	; 0xff
 8003cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	8979      	ldrh	r1, [r7, #10]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fceb 	bl	80046dc <I2C_TransferConfig>
 8003d06:	e00f      	b.n	8003d28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	8979      	ldrh	r1, [r7, #10]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fcda 	bl	80046dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d19e      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fbac 	bl	8004494 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e01a      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_I2C_Mem_Write+0x224>)
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fe00e800 	.word	0xfe00e800

08003d88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 80fd 	bne.w	8003faa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x34>
 8003db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0f1      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x4e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0ea      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dde:	f7ff fabf 	bl	8003360 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fab9 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0d5      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2222      	movs	r2, #34	; 0x22
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e28:	88f8      	ldrh	r0, [r7, #6]
 8003e2a:	893a      	ldrh	r2, [r7, #8]
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4603      	mov	r3, r0
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa1d 	bl	8004278 <I2C_RequestMemoryRead>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0ad      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2bff      	cmp	r3, #255	; 0xff
 8003e58:	d90e      	bls.n	8003e78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	; 0xff
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	4b52      	ldr	r3, [pc, #328]	; (8003fb4 <HAL_I2C_Mem_Read+0x22c>)
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fc33 	bl	80046dc <I2C_TransferConfig>
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8979      	ldrh	r1, [r7, #10]
 8003e8a:	4b4a      	ldr	r3, [pc, #296]	; (8003fb4 <HAL_I2C_Mem_Read+0x22c>)
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fc22 	bl	80046dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa60 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07c      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d034      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x1d0>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d130      	bne.n	8003f58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fa31 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e04d      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2bff      	cmp	r3, #255	; 0xff
 8003f18:	d90e      	bls.n	8003f38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fbd3 	bl	80046dc <I2C_TransferConfig>
 8003f36:	e00f      	b.n	8003f58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	8979      	ldrh	r1, [r7, #10]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fbc2 	bl	80046dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d19a      	bne.n	8003e98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fa94 	bl	8004494 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e01a      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_I2C_Mem_Read+0x230>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
  }
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	80002400 	.word	0x80002400
 8003fb8:	fe00e800 	.word	0xfe00e800

08003fbc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	f040 80f3 	bne.w	80041c4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0e9      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_IsDeviceReady+0x44>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0e2      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d107      	bne.n	800402e <HAL_I2C_IsDeviceReady+0x72>
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800402c:	e006      	b.n	800403c <HAL_I2C_IsDeviceReady+0x80>
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004038:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004042:	f7ff f98d 	bl	8003360 <HAL_GetTick>
 8004046:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b10      	cmp	r3, #16
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004074:	e034      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d01a      	beq.n	80040b4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7ff f96f 	bl	8003360 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <HAL_I2C_IsDeviceReady+0xd8>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e088      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b20      	cmp	r3, #32
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040e0:	7ffb      	ldrb	r3, [r7, #31]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_I2C_IsDeviceReady+0x130>
 80040e6:	7fbb      	ldrb	r3, [r7, #30]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0c4      	beq.n	8004076 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d01a      	beq.n	8004130 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	2120      	movs	r1, #32
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f92f 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e058      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e04a      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	2120      	movs	r1, #32
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f914 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e03d      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2220      	movs	r2, #32
 8004158:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d118      	bne.n	8004194 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004170:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	2120      	movs	r1, #32
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f8f3 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e01c      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2220      	movs	r2, #32
 8004192:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	f63f af39 	bhi.w	8004016 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	461a      	mov	r2, r3
 80041de:	4603      	mov	r3, r0
 80041e0:	817b      	strh	r3, [r7, #10]
 80041e2:	460b      	mov	r3, r1
 80041e4:	813b      	strh	r3, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	4b20      	ldr	r3, [pc, #128]	; (8004274 <I2C_RequestMemoryWrite+0xa4>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fa6f 	bl	80046dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f8ff 	bl	8004406 <I2C_WaitOnTXISFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e02c      	b.n	800426c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
 8004222:	e015      	b.n	8004250 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004224:	893b      	ldrh	r3, [r7, #8]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8e5 	bl	8004406 <I2C_WaitOnTXISFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e012      	b.n	800426c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004246:	893b      	ldrh	r3, [r7, #8]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2200      	movs	r2, #0
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f884 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	80002000 	.word	0x80002000

08004278 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4603      	mov	r3, r0
 8004288:	817b      	strh	r3, [r7, #10]
 800428a:	460b      	mov	r3, r1
 800428c:	813b      	strh	r3, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	8979      	ldrh	r1, [r7, #10]
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <I2C_RequestMemoryRead+0xa4>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2300      	movs	r3, #0
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fa1c 	bl	80046dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	69b9      	ldr	r1, [r7, #24]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f8ac 	bl	8004406 <I2C_WaitOnTXISFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e02c      	b.n	8004312 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042be:	893b      	ldrh	r3, [r7, #8]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
 80042c8:	e015      	b.n	80042f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f892 	bl	8004406 <I2C_WaitOnTXISFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e012      	b.n	8004312 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f831 	bl	8004368 <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	80002000 	.word	0x80002000

08004320 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d103      	bne.n	800433e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d007      	beq.n	800435c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	619a      	str	r2, [r3, #24]
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004378:	e031      	b.n	80043de <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d02d      	beq.n	80043de <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fe ffed 	bl	8003360 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d122      	bne.n	80043de <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d113      	bne.n	80043de <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e00f      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d0be      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004412:	e033      	b.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f87f 	bl	800451c <I2C_IsErrorOccurred>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e031      	b.n	800448c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d025      	beq.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004430:	f7fe ff96 	bl	8003360 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11a      	bne.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d013      	beq.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d1c4      	bne.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a0:	e02f      	b.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f838 	bl	800451c <I2C_IsErrorOccurred>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e02d      	b.n	8004512 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fe ff53 	bl	8003360 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11a      	bne.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d013      	beq.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e007      	b.n	8004512 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d1c8      	bne.n	80044a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d068      	beq.n	800461a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2210      	movs	r2, #16
 800454e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004550:	e049      	b.n	80045e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d045      	beq.n	80045e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe ff01 	bl	8003360 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_IsErrorOccurred+0x54>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d13a      	bne.n	80045e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004582:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800458e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004592:	d121      	bne.n	80045d8 <I2C_IsErrorOccurred+0xbc>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459a:	d01d      	beq.n	80045d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d01a      	beq.n	80045d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045b2:	f7fe fed5 	bl	8003360 <HAL_GetTick>
 80045b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b8:	e00e      	b.n	80045d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045ba:	f7fe fed1 	bl	8003360 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b19      	cmp	r3, #25
 80045c6:	d907      	bls.n	80045d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f043 0320 	orr.w	r3, r3, #32
 80045ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80045d6:	e006      	b.n	80045e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d1e9      	bne.n	80045ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d003      	beq.n	80045fc <I2C_IsErrorOccurred+0xe0>
 80045f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0aa      	beq.n	8004552 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2220      	movs	r2, #32
 800460a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800463c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f043 0308 	orr.w	r3, r3, #8
 8004654:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01c      	beq.n	80046ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fe45 	bl	8004320 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <I2C_IsErrorOccurred+0x1bc>)
 80046a2:	400b      	ands	r3, r1
 80046a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3728      	adds	r7, #40	; 0x28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	fe00e800 	.word	0xfe00e800

080046dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	817b      	strh	r3, [r7, #10]
 80046ea:	4613      	mov	r3, r2
 80046ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046f4:	7a7b      	ldrb	r3, [r7, #9]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	4313      	orrs	r3, r2
 8004706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800470a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	0d5b      	lsrs	r3, r3, #21
 8004716:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <I2C_TransferConfig+0x60>)
 800471c:	430b      	orrs	r3, r1
 800471e:	43db      	mvns	r3, r3
 8004720:	ea02 0103 	and.w	r1, r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	03ff63ff 	.word	0x03ff63ff

08004740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	d138      	bne.n	80047c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004760:	2302      	movs	r3, #2
 8004762:	e032      	b.n	80047ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d139      	bne.n	8004860 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e033      	b.n	8004862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2224      	movs	r2, #36	; 0x24
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004828:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	e000      	b.n	8004862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004860:	2302      	movs	r3, #2
  }
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_PWREx_GetVoltageRange+0x18>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40007000 	.word	0x40007000

0800488c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489a:	d130      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800489c:	4b23      	ldr	r3, [pc, #140]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d038      	beq.n	800491c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2232      	movs	r2, #50	; 0x32
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0c9b      	lsrs	r3, r3, #18
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d0:	e002      	b.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	d102      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f2      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f8:	d110      	bne.n	800491c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e00f      	b.n	800491e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d007      	beq.n	800491c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004914:	4a05      	ldr	r2, [pc, #20]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40007000 	.word	0x40007000
 8004930:	20000024 	.word	0x20000024
 8004934:	431bde83 	.word	0x431bde83

08004938 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f000 bc4f 	b.w	80051ea <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494c:	4b97      	ldr	r3, [pc, #604]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004956:	4b95      	ldr	r3, [pc, #596]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80e6 	beq.w	8004b3a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_RCC_OscConfig+0x4c>
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	f040 808d 	bne.w	8004a96 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b01      	cmp	r3, #1
 8004980:	f040 8089 	bne.w	8004a96 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004984:	4b89      	ldr	r3, [pc, #548]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <HAL_RCC_OscConfig+0x66>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f000 bc26 	b.w	80051ea <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a2:	4b82      	ldr	r3, [pc, #520]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <HAL_RCC_OscConfig+0x80>
 80049ae:	4b7f      	ldr	r3, [pc, #508]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b6:	e005      	b.n	80049c4 <HAL_RCC_OscConfig+0x8c>
 80049b8:	4b7c      	ldr	r3, [pc, #496]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d224      	bcs.n	8004a12 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fdd9 	bl	8005584 <RCC_SetFlashLatencyFromMSIRange>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f000 bc06 	b.w	80051ea <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049de:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a72      	ldr	r2, [pc, #456]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049e4:	f043 0308 	orr.w	r3, r3, #8
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	4b70      	ldr	r3, [pc, #448]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	496d      	ldr	r1, [pc, #436]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049fc:	4b6b      	ldr	r3, [pc, #428]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	4968      	ldr	r1, [pc, #416]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
 8004a10:	e025      	b.n	8004a5e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a12:	4b66      	ldr	r3, [pc, #408]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a65      	ldr	r2, [pc, #404]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	4960      	ldr	r1, [pc, #384]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a30:	4b5e      	ldr	r3, [pc, #376]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	495b      	ldr	r1, [pc, #364]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fd98 	bl	8005584 <RCC_SetFlashLatencyFromMSIRange>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e3c5      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a5e:	f000 fccd 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b51      	ldr	r3, [pc, #324]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	4950      	ldr	r1, [pc, #320]	; (8004bb0 <HAL_RCC_OscConfig+0x278>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	4a4e      	ldr	r2, [pc, #312]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a7e:	4b4e      	ldr	r3, [pc, #312]	; (8004bb8 <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fc1c 	bl	80032c0 <HAL_InitTick>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d052      	beq.n	8004b38 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	e3a9      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d032      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a9e:	4b43      	ldr	r3, [pc, #268]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a42      	ldr	r2, [pc, #264]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aaa:	f7fe fc59 	bl	8003360 <HAL_GetTick>
 8004aae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ab2:	f7fe fc55 	bl	8003360 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e392      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ad0:	4b36      	ldr	r3, [pc, #216]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ad6:	f043 0308 	orr.w	r3, r3, #8
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b33      	ldr	r3, [pc, #204]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	4930      	ldr	r1, [pc, #192]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	492b      	ldr	r1, [pc, #172]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
 8004b02:	e01a      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b04:	4b29      	ldr	r3, [pc, #164]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b10:	f7fe fc26 	bl	8003360 <HAL_GetTick>
 8004b14:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b18:	f7fe fc22 	bl	8003360 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e35f      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x1e0>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d073      	beq.n	8004c2e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_OscConfig+0x220>
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d10e      	bne.n	8004b70 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d10b      	bne.n	8004b70 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d063      	beq.n	8004c2c <HAL_RCC_OscConfig+0x2f4>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d15f      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e33c      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x250>
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a0b      	ldr	r2, [pc, #44]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e025      	b.n	8004bd4 <HAL_RCC_OscConfig+0x29c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b90:	d114      	bne.n	8004bbc <HAL_RCC_OscConfig+0x284>
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a05      	ldr	r2, [pc, #20]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b03      	ldr	r3, [pc, #12]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a02      	ldr	r2, [pc, #8]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e013      	b.n	8004bd4 <HAL_RCC_OscConfig+0x29c>
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800e098 	.word	0x0800e098
 8004bb4:	20000024 	.word	0x20000024
 8004bb8:	20000028 	.word	0x20000028
 8004bbc:	4b8f      	ldr	r3, [pc, #572]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a8e      	ldr	r2, [pc, #568]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b8c      	ldr	r3, [pc, #560]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a8b      	ldr	r2, [pc, #556]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d013      	beq.n	8004c04 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fe fbc0 	bl	8003360 <HAL_GetTick>
 8004be0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fe fbbc 	bl	8003360 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e2f9      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf6:	4b81      	ldr	r3, [pc, #516]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2ac>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fe fbac 	bl	8003360 <HAL_GetTick>
 8004c08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7fe fba8 	bl	8003360 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	; 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e2e5      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1e:	4b77      	ldr	r3, [pc, #476]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x2d4>
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d060      	beq.n	8004cfc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_OscConfig+0x314>
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d119      	bne.n	8004c7a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d116      	bne.n	8004c7a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c4c:	4b6b      	ldr	r3, [pc, #428]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_OscConfig+0x32c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e2c2      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	4962      	ldr	r1, [pc, #392]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c78:	e040      	b.n	8004cfc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d023      	beq.n	8004cca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c82:	4b5e      	ldr	r3, [pc, #376]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5d      	ldr	r2, [pc, #372]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fe fb67 	bl	8003360 <HAL_GetTick>
 8004c92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fe fb63 	bl	8003360 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e2a0      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca8:	4b54      	ldr	r3, [pc, #336]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4b51      	ldr	r3, [pc, #324]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	494e      	ldr	r1, [pc, #312]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	604b      	str	r3, [r1, #4]
 8004cc8:	e018      	b.n	8004cfc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cca:	4b4c      	ldr	r3, [pc, #304]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4b      	ldr	r2, [pc, #300]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fe fb43 	bl	8003360 <HAL_GetTick>
 8004cda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cde:	f7fe fb3f 	bl	8003360 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e27c      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf0:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8082 	beq.w	8004e0e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d05f      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004d12:	4b3a      	ldr	r3, [pc, #232]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d18:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d037      	beq.n	8004d98 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e254      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01b      	beq.n	8004d82 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004d4a:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d50:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d5a:	f7fe fb01 	bl	8003360 <HAL_GetTick>
 8004d5e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d62:	f7fe fafd 	bl	8003360 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b11      	cmp	r3, #17
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e23a      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ef      	bne.n	8004d62 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d88:	f023 0210 	bic.w	r2, r3, #16
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	491a      	ldr	r1, [pc, #104]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d98:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fe fada 	bl	8003360 <HAL_GetTick>
 8004dac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fe fad6 	bl	8003360 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b11      	cmp	r3, #17
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e213      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ef      	beq.n	8004db0 <HAL_RCC_OscConfig+0x478>
 8004dd0:	e01d      	b.n	8004e0e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd8:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de2:	f7fe fabd 	bl	8003360 <HAL_GetTick>
 8004de6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fe fab9 	bl	8003360 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b11      	cmp	r3, #17
 8004df6:	d903      	bls.n	8004e00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1f6      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
 8004dfc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e00:	4ba9      	ldr	r3, [pc, #676]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ed      	bne.n	8004dea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80bd 	beq.w	8004f96 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e22:	4ba1      	ldr	r3, [pc, #644]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10e      	bne.n	8004e4c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2e:	4b9e      	ldr	r3, [pc, #632]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	4a9d      	ldr	r2, [pc, #628]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e38:	6593      	str	r3, [r2, #88]	; 0x58
 8004e3a:	4b9b      	ldr	r3, [pc, #620]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4c:	4b97      	ldr	r3, [pc, #604]	; (80050ac <HAL_RCC_OscConfig+0x774>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d118      	bne.n	8004e8a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e58:	4b94      	ldr	r3, [pc, #592]	; (80050ac <HAL_RCC_OscConfig+0x774>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a93      	ldr	r2, [pc, #588]	; (80050ac <HAL_RCC_OscConfig+0x774>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e64:	f7fe fa7c 	bl	8003360 <HAL_GetTick>
 8004e68:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fe fa78 	bl	8003360 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1b5      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7e:	4b8b      	ldr	r3, [pc, #556]	; (80050ac <HAL_RCC_OscConfig+0x774>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d02c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004e96:	4b84      	ldr	r3, [pc, #528]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	497f      	ldr	r1, [pc, #508]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ebc:	4b7a      	ldr	r3, [pc, #488]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	4a79      	ldr	r2, [pc, #484]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ec4:	f043 0304 	orr.w	r3, r3, #4
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ecc:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004edc:	e018      	b.n	8004f10 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ede:	4b72      	ldr	r3, [pc, #456]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	4a70      	ldr	r2, [pc, #448]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eee:	e00f      	b.n	8004f10 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ef0:	4b6d      	ldr	r3, [pc, #436]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	4a6c      	ldr	r2, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f00:	4b69      	ldr	r3, [pc, #420]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	4a68      	ldr	r2, [pc, #416]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d016      	beq.n	8004f46 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fe fa22 	bl	8003360 <HAL_GetTick>
 8004f1c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fe fa1e 	bl	8003360 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e159      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	4b5c      	ldr	r3, [pc, #368]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ed      	beq.n	8004f20 <HAL_RCC_OscConfig+0x5e8>
 8004f44:	e01d      	b.n	8004f82 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fe fa0b 	bl	8003360 <HAL_GetTick>
 8004f4a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fe fa07 	bl	8003360 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e142      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f64:	4b50      	ldr	r3, [pc, #320]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ed      	bne.n	8004f4e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004f72:	4b4d      	ldr	r3, [pc, #308]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d105      	bne.n	8004f96 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	4a46      	ldr	r2, [pc, #280]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d03c      	beq.n	800501c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01c      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004faa:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fb0:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fe f9d1 	bl	8003360 <HAL_GetTick>
 8004fbe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc2:	f7fe f9cd 	bl	8003360 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e10a      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ef      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x68a>
 8004fe2:	e01b      	b.n	800501c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fe4:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fea:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fe f9b4 	bl	8003360 <HAL_GetTick>
 8004ff8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffc:	f7fe f9b0 	bl	8003360 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0ed      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800500e:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8005010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ef      	bne.n	8004ffc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80e1 	beq.w	80051e8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	2b02      	cmp	r3, #2
 800502c:	f040 80b5 	bne.w	800519a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0203 	and.w	r2, r3, #3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	429a      	cmp	r2, r3
 8005042:	d124      	bne.n	800508e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	3b01      	subs	r3, #1
 8005050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d11b      	bne.n	800508e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d113      	bne.n	800508e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	3b01      	subs	r3, #1
 8005074:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d109      	bne.n	800508e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	3b01      	subs	r3, #1
 8005088:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d05f      	beq.n	800514e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d05a      	beq.n	800514a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a03      	ldr	r2, [pc, #12]	; (80050a8 <HAL_RCC_OscConfig+0x770>)
 800509a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050a0:	f7fe f95e 	bl	8003360 <HAL_GetTick>
 80050a4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a6:	e00c      	b.n	80050c2 <HAL_RCC_OscConfig+0x78a>
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fe f956 	bl	8003360 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e093      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c2:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	4b49      	ldr	r3, [pc, #292]	; (80051f8 <HAL_RCC_OscConfig+0x8c0>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050de:	3a01      	subs	r2, #1
 80050e0:	0112      	lsls	r2, r2, #4
 80050e2:	4311      	orrs	r1, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e8:	0212      	lsls	r2, r2, #8
 80050ea:	4311      	orrs	r1, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050f0:	0852      	lsrs	r2, r2, #1
 80050f2:	3a01      	subs	r2, #1
 80050f4:	0552      	lsls	r2, r2, #21
 80050f6:	4311      	orrs	r1, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050fc:	0852      	lsrs	r2, r2, #1
 80050fe:	3a01      	subs	r2, #1
 8005100:	0652      	lsls	r2, r2, #25
 8005102:	430a      	orrs	r2, r1
 8005104:	493b      	ldr	r1, [pc, #236]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800510a:	4b3a      	ldr	r3, [pc, #232]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a39      	ldr	r2, [pc, #228]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 8005110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005114:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005116:	4b37      	ldr	r3, [pc, #220]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a36      	ldr	r2, [pc, #216]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 800511c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005120:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005122:	f7fe f91d 	bl	8003360 <HAL_GetTick>
 8005126:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512a:	f7fe f919 	bl	8003360 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e056      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005148:	e04e      	b.n	80051e8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e04d      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514e:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d146      	bne.n	80051e8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800515a:	4b26      	ldr	r3, [pc, #152]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 8005160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005164:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005166:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 800516c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005170:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005172:	f7fe f8f5 	bl	8003360 <HAL_GetTick>
 8005176:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517a:	f7fe f8f1 	bl	8003360 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e02e      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518c:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x842>
 8005198:	e026      	b.n	80051e8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d021      	beq.n	80051e4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fe f8d8 	bl	8003360 <HAL_GetTick>
 80051b0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe f8d4 	bl	8003360 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e011      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <HAL_RCC_OscConfig+0x8bc>)
 80051d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	60d3      	str	r3, [r2, #12]
 80051e2:	e001      	b.n	80051e8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	f99f808c 	.word	0xf99f808c

080051fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0e7      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b75      	ldr	r3, [pc, #468]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d910      	bls.n	8005240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b72      	ldr	r3, [pc, #456]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 0207 	bic.w	r2, r3, #7
 8005226:	4970      	ldr	r1, [pc, #448]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b6e      	ldr	r3, [pc, #440]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0cf      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d010      	beq.n	800526e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	4b66      	ldr	r3, [pc, #408]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005258:	429a      	cmp	r2, r3
 800525a:	d908      	bls.n	800526e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525c:	4b63      	ldr	r3, [pc, #396]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4960      	ldr	r1, [pc, #384]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04c      	beq.n	8005314 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d107      	bne.n	8005292 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	4b5a      	ldr	r3, [pc, #360]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e0a6      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529a:	4b54      	ldr	r3, [pc, #336]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e09a      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052b2:	4b4e      	ldr	r3, [pc, #312]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e08e      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c2:	4b4a      	ldr	r3, [pc, #296]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e086      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4b46      	ldr	r3, [pc, #280]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4943      	ldr	r1, [pc, #268]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e4:	f7fe f83c 	bl	8003360 <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ec:	f7fe f838 	bl	8003360 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e06e      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	4b3a      	ldr	r3, [pc, #232]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 020c 	and.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d010      	beq.n	8005342 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	4b31      	ldr	r3, [pc, #196]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532c:	429a      	cmp	r2, r3
 800532e:	d208      	bcs.n	8005342 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005330:	4b2e      	ldr	r3, [pc, #184]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	492b      	ldr	r1, [pc, #172]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 800533e:	4313      	orrs	r3, r2
 8005340:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d210      	bcs.n	8005372 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f023 0207 	bic.w	r2, r3, #7
 8005358:	4923      	ldr	r1, [pc, #140]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005360:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <HAL_RCC_ClockConfig+0x1ec>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e036      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800537e:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4918      	ldr	r1, [pc, #96]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 800538c:	4313      	orrs	r3, r2
 800538e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539c:	4b13      	ldr	r3, [pc, #76]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4910      	ldr	r1, [pc, #64]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053b0:	f000 f824 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <HAL_RCC_ClockConfig+0x1f0>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	490b      	ldr	r1, [pc, #44]	; (80053f0 <HAL_RCC_ClockConfig+0x1f4>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1f8>)
 80053ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1fc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fd ff73 	bl	80032c0 <HAL_InitTick>
 80053da:	4603      	mov	r3, r0
 80053dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80053de:	7afb      	ldrb	r3, [r7, #11]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40022000 	.word	0x40022000
 80053ec:	40021000 	.word	0x40021000
 80053f0:	0800e098 	.word	0x0800e098
 80053f4:	20000024 	.word	0x20000024
 80053f8:	20000028 	.word	0x20000028

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	; 0x24
 8005400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540a:	4b3e      	ldr	r3, [pc, #248]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005414:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x34>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d121      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d11e      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 800543e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	e005      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800544c:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005458:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10d      	bne.n	8005484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800546c:	e00a      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b04      	cmp	r3, #4
 8005472:	d102      	bne.n	800547a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005474:	4b25      	ldr	r3, [pc, #148]	; (800550c <HAL_RCC_GetSysClockFreq+0x110>)
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e004      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d101      	bne.n	8005484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <HAL_RCC_GetSysClockFreq+0x114>)
 8005482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d134      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d003      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0xac>
 80054a0:	e005      	b.n	80054ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <HAL_RCC_GetSysClockFreq+0x110>)
 80054a4:	617b      	str	r3, [r7, #20]
      break;
 80054a6:	e005      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <HAL_RCC_GetSysClockFreq+0x114>)
 80054aa:	617b      	str	r3, [r7, #20]
      break;
 80054ac:	e002      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	617b      	str	r3, [r7, #20]
      break;
 80054b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	3301      	adds	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	fb03 f202 	mul.w	r2, r3, r2
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_RCC_GetSysClockFreq+0x108>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	0e5b      	lsrs	r3, r3, #25
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	3301      	adds	r3, #1
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054f4:	69bb      	ldr	r3, [r7, #24]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
 8005508:	0800e0b0 	.word	0x0800e0b0
 800550c:	00f42400 	.word	0x00f42400
 8005510:	007a1200 	.word	0x007a1200

08005514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <HAL_RCC_GetHCLKFreq+0x14>)
 800551a:	681b      	ldr	r3, [r3, #0]
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000024 	.word	0x20000024

0800552c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005530:	f7ff fff0 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	4904      	ldr	r1, [pc, #16]	; (8005554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021000 	.word	0x40021000
 8005554:	0800e0a8 	.word	0x0800e0a8

08005558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800555c:	f7ff ffda 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 8005560:	4602      	mov	r2, r0
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	0adb      	lsrs	r3, r3, #11
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	4904      	ldr	r1, [pc, #16]	; (8005580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800556e:	5ccb      	ldrb	r3, [r1, r3]
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021000 	.word	0x40021000
 8005580:	0800e0a8 	.word	0x0800e0a8

08005584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005590:	4b2a      	ldr	r3, [pc, #168]	; (800563c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800559c:	f7ff f968 	bl	8004870 <HAL_PWREx_GetVoltageRange>
 80055a0:	6178      	str	r0, [r7, #20]
 80055a2:	e014      	b.n	80055ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	4a24      	ldr	r2, [pc, #144]	; (800563c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	6593      	str	r3, [r2, #88]	; 0x58
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055bc:	f7ff f958 	bl	8004870 <HAL_PWREx_GetVoltageRange>
 80055c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055c2:	4b1e      	ldr	r3, [pc, #120]	; (800563c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	4a1d      	ldr	r2, [pc, #116]	; (800563c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d4:	d10b      	bne.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b80      	cmp	r3, #128	; 0x80
 80055da:	d919      	bls.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2ba0      	cmp	r3, #160	; 0xa0
 80055e0:	d902      	bls.n	80055e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055e2:	2302      	movs	r3, #2
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e013      	b.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055e8:	2301      	movs	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	e010      	b.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d902      	bls.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80055f4:	2303      	movs	r3, #3
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e00a      	b.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d102      	bne.n	8005606 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005600:	2302      	movs	r3, #2
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	e004      	b.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b70      	cmp	r3, #112	; 0x70
 800560a:	d101      	bne.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800560c:	2301      	movs	r3, #1
 800560e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 0207 	bic.w	r2, r3, #7
 8005618:	4909      	ldr	r1, [pc, #36]	; (8005640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	429a      	cmp	r2, r3
 800562c:	d001      	beq.n	8005632 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000
 8005640:	40022000 	.word	0x40022000

08005644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800564c:	2300      	movs	r3, #0
 800564e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005650:	2300      	movs	r3, #0
 8005652:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 809e 	beq.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005662:	2300      	movs	r3, #0
 8005664:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567c:	4b40      	ldr	r3, [pc, #256]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	4a3f      	ldr	r2, [pc, #252]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005686:	6593      	str	r3, [r2, #88]	; 0x58
 8005688:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005694:	2301      	movs	r3, #1
 8005696:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005698:	4b3a      	ldr	r3, [pc, #232]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a39      	ldr	r2, [pc, #228]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800569e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056a4:	f7fd fe5c 	bl	8003360 <HAL_GetTick>
 80056a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056aa:	e009      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ac:	f7fd fe58 	bl	8003360 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d902      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	74fb      	strb	r3, [r7, #19]
        break;
 80056be:	e005      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ef      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d15a      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056d2:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01e      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d019      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056fa:	4b21      	ldr	r3, [pc, #132]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800571a:	4a19      	ldr	r2, [pc, #100]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d016      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fd fe18 	bl	8003360 <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005732:	e00b      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fd fe14 	bl	8003360 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d902      	bls.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	74fb      	strb	r3, [r7, #19]
            break;
 800574a:	e006      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ec      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005776:	e009      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	74bb      	strb	r3, [r7, #18]
 800577c:	e006      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800578c:	7c7b      	ldrb	r3, [r7, #17]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005792:	4b6e      	ldr	r3, [pc, #440]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	4a6d      	ldr	r2, [pc, #436]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057aa:	4b68      	ldr	r3, [pc, #416]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f023 0203 	bic.w	r2, r3, #3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4964      	ldr	r1, [pc, #400]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057cc:	4b5f      	ldr	r3, [pc, #380]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f023 020c 	bic.w	r2, r3, #12
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	495c      	ldr	r1, [pc, #368]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ee:	4b57      	ldr	r3, [pc, #348]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4953      	ldr	r1, [pc, #332]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005810:	4b4e      	ldr	r3, [pc, #312]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	494b      	ldr	r1, [pc, #300]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005832:	4b46      	ldr	r3, [pc, #280]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	4942      	ldr	r1, [pc, #264]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005854:	4b3d      	ldr	r3, [pc, #244]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	493a      	ldr	r1, [pc, #232]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005876:	4b35      	ldr	r3, [pc, #212]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	4931      	ldr	r1, [pc, #196]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005898:	4b2c      	ldr	r3, [pc, #176]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	4929      	ldr	r1, [pc, #164]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4920      	ldr	r1, [pc, #128]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d015      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	4918      	ldr	r1, [pc, #96]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	4b13      	ldr	r3, [pc, #76]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a12      	ldr	r2, [pc, #72]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005906:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	490a      	ldr	r1, [pc, #40]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a04      	ldr	r2, [pc, #16]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800593a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005940:	7cbb      	ldrb	r3, [r7, #18]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000

08005950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e040      	b.n	80059e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fd faf6 	bl	8002f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fdd8 	bl	800654c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fb7b 	bl	8006098 <UART_SetConfig>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e01b      	b.n	80059e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fe57 	bl	8006690 <UART_CheckIdleState>
 80059e2:	4603      	mov	r3, r0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d137      	bne.n	8005a74 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_UART_Receive_IT+0x24>
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e030      	b.n	8005a76 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a18      	ldr	r2, [pc, #96]	; (8005a80 <HAL_UART_Receive_IT+0x94>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d01f      	beq.n	8005a64 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d018      	beq.n	8005a64 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	461a      	mov	r2, r3
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 ff20 	bl	80068b0 <UART_Start_Receive_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3728      	adds	r7, #40	; 0x28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40008000 	.word	0x40008000

08005a84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b0ba      	sub	sp, #232	; 0xe8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005aae:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d115      	bne.n	8005aec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 82ae 	beq.w	800603e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
      }
      return;
 8005aea:	e2a8      	b.n	800603e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8117 	beq.w	8005d24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b06:	4b85      	ldr	r3, [pc, #532]	; (8005d1c <HAL_UART_IRQHandler+0x298>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 810a 	beq.w	8005d24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d011      	beq.n	8005b40 <HAL_UART_IRQHandler+0xbc>
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d011      	beq.n	8005b70 <HAL_UART_IRQHandler+0xec>
 8005b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b66:	f043 0204 	orr.w	r2, r3, #4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x11c>
 8005b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b96:	f043 0202 	orr.w	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd2:	f043 0208 	orr.w	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_UART_IRQHandler+0x18a>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00c      	beq.n	8005c0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8214 	beq.w	8006042 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00d      	beq.n	8005c42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d005      	beq.n	8005c66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04f      	beq.n	8005d06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fee8 	bl	8006a3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d141      	bne.n	8005cfe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1d9      	bne.n	8005c7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd2:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <HAL_UART_IRQHandler+0x29c>)
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fd fcbf 	bl	800365e <HAL_DMA_Abort_IT>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d017      	beq.n	8005d16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e00f      	b.n	8005d16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f9b8 	bl	800606c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e00b      	b.n	8005d16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9b4 	bl	800606c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	e007      	b.n	8005d16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f9b0 	bl	800606c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d14:	e195      	b.n	8006042 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d16:	bf00      	nop
    return;
 8005d18:	e193      	b.n	8006042 <HAL_UART_IRQHandler+0x5be>
 8005d1a:	bf00      	nop
 8005d1c:	04000120 	.word	0x04000120
 8005d20:	08006b05 	.word	0x08006b05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f040 814e 	bne.w	8005fca <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8147 	beq.w	8005fca <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8140 	beq.w	8005fca <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	f040 80b8 	bne.w	8005ed2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8167 	beq.w	8006046 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d82:	429a      	cmp	r2, r3
 8005d84:	f080 815f 	bcs.w	8006046 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f040 8086 	bne.w	8005eb0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1da      	bne.n	8005da4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e1      	bne.n	8005dee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e3      	bne.n	8005e2a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	f023 0310 	bic.w	r3, r3, #16
 8005e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e4      	bne.n	8005e70 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fd fb99 	bl	80035e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8d8 	bl	8006080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed0:	e0b9      	b.n	8006046 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80ab 	beq.w	800604a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a6 	beq.w	800604a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
 8005f22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	623b      	str	r3, [r7, #32]
   return(result);
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f58:	633a      	str	r2, [r7, #48]	; 0x30
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e3      	bne.n	8005f34 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e4      	bne.n	8005f80 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f85c 	bl	8006080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fc8:	e03f      	b.n	800604a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x570>
 8005fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 ff85 	bl	8006efc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ff2:	e02d      	b.n	8006050 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00e      	beq.n	800601e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
    }
    return;
 800601c:	e017      	b.n	800604e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d012      	beq.n	8006050 <HAL_UART_IRQHandler+0x5cc>
 800602a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fd7a 	bl	8006b30 <UART_EndTransmit_IT>
    return;
 800603c:	e008      	b.n	8006050 <HAL_UART_IRQHandler+0x5cc>
      return;
 800603e:	bf00      	nop
 8006040:	e006      	b.n	8006050 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <HAL_UART_IRQHandler+0x5cc>
      return;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_UART_IRQHandler+0x5cc>
    return;
 800604e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006050:	37e8      	adds	r7, #232	; 0xe8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop

08006058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800609c:	b08a      	sub	sp, #40	; 0x28
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	4313      	orrs	r3, r2
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b9e      	ldr	r3, [pc, #632]	; (8006340 <UART_SetConfig+0x2a8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a93      	ldr	r2, [pc, #588]	; (8006344 <UART_SetConfig+0x2ac>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006100:	4313      	orrs	r3, r2
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006114:	430a      	orrs	r2, r1
 8006116:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a8a      	ldr	r2, [pc, #552]	; (8006348 <UART_SetConfig+0x2b0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d126      	bne.n	8006170 <UART_SetConfig+0xd8>
 8006122:	4b8a      	ldr	r3, [pc, #552]	; (800634c <UART_SetConfig+0x2b4>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	2b03      	cmp	r3, #3
 800612e:	d81b      	bhi.n	8006168 <UART_SetConfig+0xd0>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0xa0>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	08006149 	.word	0x08006149
 800613c:	08006159 	.word	0x08006159
 8006140:	08006151 	.word	0x08006151
 8006144:	08006161 	.word	0x08006161
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614e:	e0ab      	b.n	80062a8 <UART_SetConfig+0x210>
 8006150:	2302      	movs	r3, #2
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006156:	e0a7      	b.n	80062a8 <UART_SetConfig+0x210>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615e:	e0a3      	b.n	80062a8 <UART_SetConfig+0x210>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006166:	e09f      	b.n	80062a8 <UART_SetConfig+0x210>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616e:	e09b      	b.n	80062a8 <UART_SetConfig+0x210>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a76      	ldr	r2, [pc, #472]	; (8006350 <UART_SetConfig+0x2b8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d138      	bne.n	80061ec <UART_SetConfig+0x154>
 800617a:	4b74      	ldr	r3, [pc, #464]	; (800634c <UART_SetConfig+0x2b4>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b0c      	cmp	r3, #12
 8006186:	d82d      	bhi.n	80061e4 <UART_SetConfig+0x14c>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0xf8>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080061e5 	.word	0x080061e5
 8006198:	080061e5 	.word	0x080061e5
 800619c:	080061e5 	.word	0x080061e5
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061e5 	.word	0x080061e5
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061e5 	.word	0x080061e5
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ca:	e06d      	b.n	80062a8 <UART_SetConfig+0x210>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d2:	e069      	b.n	80062a8 <UART_SetConfig+0x210>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061da:	e065      	b.n	80062a8 <UART_SetConfig+0x210>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e061      	b.n	80062a8 <UART_SetConfig+0x210>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e05d      	b.n	80062a8 <UART_SetConfig+0x210>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a58      	ldr	r2, [pc, #352]	; (8006354 <UART_SetConfig+0x2bc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d125      	bne.n	8006242 <UART_SetConfig+0x1aa>
 80061f6:	4b55      	ldr	r3, [pc, #340]	; (800634c <UART_SetConfig+0x2b4>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006200:	2b30      	cmp	r3, #48	; 0x30
 8006202:	d016      	beq.n	8006232 <UART_SetConfig+0x19a>
 8006204:	2b30      	cmp	r3, #48	; 0x30
 8006206:	d818      	bhi.n	800623a <UART_SetConfig+0x1a2>
 8006208:	2b20      	cmp	r3, #32
 800620a:	d00a      	beq.n	8006222 <UART_SetConfig+0x18a>
 800620c:	2b20      	cmp	r3, #32
 800620e:	d814      	bhi.n	800623a <UART_SetConfig+0x1a2>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <UART_SetConfig+0x182>
 8006214:	2b10      	cmp	r3, #16
 8006216:	d008      	beq.n	800622a <UART_SetConfig+0x192>
 8006218:	e00f      	b.n	800623a <UART_SetConfig+0x1a2>
 800621a:	2300      	movs	r3, #0
 800621c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006220:	e042      	b.n	80062a8 <UART_SetConfig+0x210>
 8006222:	2302      	movs	r3, #2
 8006224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006228:	e03e      	b.n	80062a8 <UART_SetConfig+0x210>
 800622a:	2304      	movs	r3, #4
 800622c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006230:	e03a      	b.n	80062a8 <UART_SetConfig+0x210>
 8006232:	2308      	movs	r3, #8
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006238:	e036      	b.n	80062a8 <UART_SetConfig+0x210>
 800623a:	2310      	movs	r3, #16
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006240:	e032      	b.n	80062a8 <UART_SetConfig+0x210>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a3f      	ldr	r2, [pc, #252]	; (8006344 <UART_SetConfig+0x2ac>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d12a      	bne.n	80062a2 <UART_SetConfig+0x20a>
 800624c:	4b3f      	ldr	r3, [pc, #252]	; (800634c <UART_SetConfig+0x2b4>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800625a:	d01a      	beq.n	8006292 <UART_SetConfig+0x1fa>
 800625c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006260:	d81b      	bhi.n	800629a <UART_SetConfig+0x202>
 8006262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006266:	d00c      	beq.n	8006282 <UART_SetConfig+0x1ea>
 8006268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626c:	d815      	bhi.n	800629a <UART_SetConfig+0x202>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <UART_SetConfig+0x1e2>
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d008      	beq.n	800628a <UART_SetConfig+0x1f2>
 8006278:	e00f      	b.n	800629a <UART_SetConfig+0x202>
 800627a:	2300      	movs	r3, #0
 800627c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006280:	e012      	b.n	80062a8 <UART_SetConfig+0x210>
 8006282:	2302      	movs	r3, #2
 8006284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006288:	e00e      	b.n	80062a8 <UART_SetConfig+0x210>
 800628a:	2304      	movs	r3, #4
 800628c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006290:	e00a      	b.n	80062a8 <UART_SetConfig+0x210>
 8006292:	2308      	movs	r3, #8
 8006294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006298:	e006      	b.n	80062a8 <UART_SetConfig+0x210>
 800629a:	2310      	movs	r3, #16
 800629c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a0:	e002      	b.n	80062a8 <UART_SetConfig+0x210>
 80062a2:	2310      	movs	r3, #16
 80062a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <UART_SetConfig+0x2ac>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f040 808a 	bne.w	80063c8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d824      	bhi.n	8006306 <UART_SetConfig+0x26e>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x22c>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	08006307 	.word	0x08006307
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	08006307 	.word	0x08006307
 80062d4:	080062f7 	.word	0x080062f7
 80062d8:	08006307 	.word	0x08006307
 80062dc:	08006307 	.word	0x08006307
 80062e0:	08006307 	.word	0x08006307
 80062e4:	080062ff 	.word	0x080062ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e8:	f7ff f920 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 80062ec:	61f8      	str	r0, [r7, #28]
        break;
 80062ee:	e010      	b.n	8006312 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <UART_SetConfig+0x2c0>)
 80062f2:	61fb      	str	r3, [r7, #28]
        break;
 80062f4:	e00d      	b.n	8006312 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7ff f881 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80062fa:	61f8      	str	r0, [r7, #28]
        break;
 80062fc:	e009      	b.n	8006312 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006302:	61fb      	str	r3, [r7, #28]
        break;
 8006304:	e005      	b.n	8006312 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8109 	beq.w	800652c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4413      	add	r3, r2
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	429a      	cmp	r2, r3
 8006328:	d305      	bcc.n	8006336 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	429a      	cmp	r2, r3
 8006334:	d912      	bls.n	800635c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800633c:	e0f6      	b.n	800652c <UART_SetConfig+0x494>
 800633e:	bf00      	nop
 8006340:	efff69f3 	.word	0xefff69f3
 8006344:	40008000 	.word	0x40008000
 8006348:	40013800 	.word	0x40013800
 800634c:	40021000 	.word	0x40021000
 8006350:	40004400 	.word	0x40004400
 8006354:	40004800 	.word	0x40004800
 8006358:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2200      	movs	r2, #0
 8006360:	461c      	mov	r4, r3
 8006362:	4615      	mov	r5, r2
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	022b      	lsls	r3, r5, #8
 800636e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006372:	0222      	lsls	r2, r4, #8
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	6849      	ldr	r1, [r1, #4]
 8006378:	0849      	lsrs	r1, r1, #1
 800637a:	2000      	movs	r0, #0
 800637c:	4688      	mov	r8, r1
 800637e:	4681      	mov	r9, r0
 8006380:	eb12 0a08 	adds.w	sl, r2, r8
 8006384:	eb43 0b09 	adc.w	fp, r3, r9
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7fa fc85 	bl	8000ca8 <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4613      	mov	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ac:	d308      	bcc.n	80063c0 <UART_SetConfig+0x328>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b4:	d204      	bcs.n	80063c0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e0b5      	b.n	800652c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063c6:	e0b1      	b.n	800652c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d0:	d15d      	bne.n	800648e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80063d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d827      	bhi.n	800642a <UART_SetConfig+0x392>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0x348>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006405 	.word	0x08006405
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	0800642b 	.word	0x0800642b
 80063f0:	0800641b 	.word	0x0800641b
 80063f4:	0800642b 	.word	0x0800642b
 80063f8:	0800642b 	.word	0x0800642b
 80063fc:	0800642b 	.word	0x0800642b
 8006400:	08006423 	.word	0x08006423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006404:	f7ff f892 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 8006408:	61f8      	str	r0, [r7, #28]
        break;
 800640a:	e014      	b.n	8006436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800640c:	f7ff f8a4 	bl	8005558 <HAL_RCC_GetPCLK2Freq>
 8006410:	61f8      	str	r0, [r7, #28]
        break;
 8006412:	e010      	b.n	8006436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006414:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <UART_SetConfig+0x4b0>)
 8006416:	61fb      	str	r3, [r7, #28]
        break;
 8006418:	e00d      	b.n	8006436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641a:	f7fe ffef 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 800641e:	61f8      	str	r0, [r7, #28]
        break;
 8006420:	e009      	b.n	8006436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006426:	61fb      	str	r3, [r7, #28]
        break;
 8006428:	e005      	b.n	8006436 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d077      	beq.n	800652c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	005a      	lsls	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b0f      	cmp	r3, #15
 8006456:	d916      	bls.n	8006486 <UART_SetConfig+0x3ee>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d212      	bcs.n	8006486 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f023 030f 	bic.w	r3, r3, #15
 8006468:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	b29b      	uxth	r3, r3
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	b29a      	uxth	r2, r3
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	4313      	orrs	r3, r2
 800647a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	8afa      	ldrh	r2, [r7, #22]
 8006482:	60da      	str	r2, [r3, #12]
 8006484:	e052      	b.n	800652c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800648c:	e04e      	b.n	800652c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800648e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006492:	2b08      	cmp	r3, #8
 8006494:	d827      	bhi.n	80064e6 <UART_SetConfig+0x44e>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x404>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d7 	.word	0x080064d7
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7ff f834 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 80064c4:	61f8      	str	r0, [r7, #28]
        break;
 80064c6:	e014      	b.n	80064f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7ff f846 	bl	8005558 <HAL_RCC_GetPCLK2Freq>
 80064cc:	61f8      	str	r0, [r7, #28]
        break;
 80064ce:	e010      	b.n	80064f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <UART_SetConfig+0x4b0>)
 80064d2:	61fb      	str	r3, [r7, #28]
        break;
 80064d4:	e00d      	b.n	80064f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fe ff91 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80064da:	61f8      	str	r0, [r7, #28]
        break;
 80064dc:	e009      	b.n	80064f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	61fb      	str	r3, [r7, #28]
        break;
 80064e4:	e005      	b.n	80064f2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064f0:	bf00      	nop
    }

    if (pclk != 0U)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d019      	beq.n	800652c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	085a      	lsrs	r2, r3, #1
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	fbb2 f3f3 	udiv	r3, r2, r3
 800650a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b0f      	cmp	r3, #15
 8006510:	d909      	bls.n	8006526 <UART_SetConfig+0x48e>
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006518:	d205      	bcs.n	8006526 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60da      	str	r2, [r3, #12]
 8006524:	e002      	b.n	800652c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006538:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800653c:	4618      	mov	r0, r3
 800653e:	3728      	adds	r7, #40	; 0x28
 8006540:	46bd      	mov	sp, r7
 8006542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006546:	bf00      	nop
 8006548:	00f42400 	.word	0x00f42400

0800654c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01a      	beq.n	8006662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800664a:	d10a      	bne.n	8006662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b098      	sub	sp, #96	; 0x60
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066a0:	f7fc fe5e 	bl	8003360 <HAL_GetTick>
 80066a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d12e      	bne.n	8006712 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066bc:	2200      	movs	r2, #0
 80066be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f88c 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d021      	beq.n	8006712 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e2:	653b      	str	r3, [r7, #80]	; 0x50
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ec:	647b      	str	r3, [r7, #68]	; 0x44
 80066ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e6      	bne.n	80066ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e062      	b.n	80067d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b04      	cmp	r3, #4
 800671e:	d149      	bne.n	80067b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f856 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d03c      	beq.n	80067b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	623b      	str	r3, [r7, #32]
   return(result);
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800674e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006758:	633b      	str	r3, [r7, #48]	; 0x30
 800675a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800675e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	60fb      	str	r3, [r7, #12]
   return(result);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	64bb      	str	r3, [r7, #72]	; 0x48
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678c:	61fa      	str	r2, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	617b      	str	r3, [r7, #20]
   return(result);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e5      	bne.n	800676c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e011      	b.n	80067d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3758      	adds	r7, #88	; 0x58
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f0:	e049      	b.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d045      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fc fdb1 	bl	8003360 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <UART_WaitOnFlagUntilTimeout+0x30>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e048      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d031      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b08      	cmp	r3, #8
 800682e:	d110      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2208      	movs	r2, #8
 8006836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f8ff 	bl	8006a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2208      	movs	r2, #8
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e029      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006860:	d111      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800686a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f8e5 	bl	8006a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00f      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d0a6      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b097      	sub	sp, #92	; 0x5c
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d10e      	bne.n	8006902 <UART_Start_Receive_IT+0x52>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <UART_Start_Receive_IT+0x48>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068f6:	e02d      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	22ff      	movs	r2, #255	; 0xff
 80068fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006900:	e028      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10d      	bne.n	8006926 <UART_Start_Receive_IT+0x76>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <UART_Start_Receive_IT+0x6c>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	; 0xff
 8006916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800691a:	e01b      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	227f      	movs	r2, #127	; 0x7f
 8006920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006924:	e016      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692e:	d10d      	bne.n	800694c <UART_Start_Receive_IT+0x9c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <UART_Start_Receive_IT+0x92>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	227f      	movs	r2, #127	; 0x7f
 800693c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006940:	e008      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	223f      	movs	r2, #63	; 0x3f
 8006946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800694a:	e003      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2222      	movs	r2, #34	; 0x22
 8006960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	657b      	str	r3, [r7, #84]	; 0x54
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3308      	adds	r3, #8
 8006982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006984:	64ba      	str	r2, [r7, #72]	; 0x48
 8006986:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800698a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a0:	d107      	bne.n	80069b2 <UART_Start_Receive_IT+0x102>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <UART_Start_Receive_IT+0x184>)
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68
 80069b0:	e002      	b.n	80069b8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <UART_Start_Receive_IT+0x188>)
 80069b6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d019      	beq.n	80069f4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
 80069e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_Start_Receive_IT+0x110>
 80069f2:	e018      	b.n	8006a26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f043 0320 	orr.w	r3, r3, #32
 8006a08:	653b      	str	r3, [r7, #80]	; 0x50
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69f9      	ldr	r1, [r7, #28]
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e6      	bne.n	80069f4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	375c      	adds	r7, #92	; 0x5c
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	08006d41 	.word	0x08006d41
 8006a38:	08006b85 	.word	0x08006b85

08006a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b095      	sub	sp, #84	; 0x54
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a62:	643b      	str	r3, [r7, #64]	; 0x40
 8006a64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e6      	bne.n	8006a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e5      	bne.n	8006a76 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d118      	bne.n	8006ae4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0310 	bic.w	r3, r3, #16
 8006ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6979      	ldr	r1, [r7, #20]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006af8:	bf00      	nop
 8006afa:	3754      	adds	r7, #84	; 0x54
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff faa2 	bl	800606c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	613b      	str	r3, [r7, #16]
   return(result);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e6      	bne.n	8006b38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fa6e 	bl	8006058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7c:	bf00      	nop
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b09c      	sub	sp, #112	; 0x70
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b9c:	2b22      	cmp	r3, #34	; 0x22
 8006b9e:	f040 80be 	bne.w	8006d1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bb0:	b2d9      	uxtb	r1, r3
 8006bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	400a      	ands	r2, r1
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 80a3 	bne.w	8006d32 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	667b      	str	r3, [r7, #100]	; 0x64
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a34      	ldr	r2, [pc, #208]	; (8006d3c <UART_RxISR_8BIT+0x1b8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d01f      	beq.n	8006cb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d018      	beq.n	8006cb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c92:	663b      	str	r3, [r7, #96]	; 0x60
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d12e      	bne.n	8006d16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0310 	bic.w	r3, r3, #16
 8006cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	69b9      	ldr	r1, [r7, #24]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d103      	bne.n	8006d06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2210      	movs	r2, #16
 8006d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff f9b6 	bl	8006080 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d14:	e00d      	b.n	8006d32 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fb f9b8 	bl	800208c <HAL_UART_RxCpltCallback>
}
 8006d1c:	e009      	b.n	8006d32 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	8b1b      	ldrh	r3, [r3, #24]
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0208 	orr.w	r2, r2, #8
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	831a      	strh	r2, [r3, #24]
}
 8006d32:	bf00      	nop
 8006d34:	3770      	adds	r7, #112	; 0x70
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40008000 	.word	0x40008000

08006d40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b09c      	sub	sp, #112	; 0x70
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d58:	2b22      	cmp	r3, #34	; 0x22
 8006d5a:	f040 80be 	bne.w	8006eda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006d72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d76:	4013      	ands	r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	1c9a      	adds	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 80a3 	bne.w	8006eee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	663b      	str	r3, [r7, #96]	; 0x60
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dfa:	643a      	str	r2, [r7, #64]	; 0x40
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a34      	ldr	r2, [pc, #208]	; (8006ef8 <UART_RxISR_16BIT+0x1b8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01f      	beq.n	8006e6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d018      	beq.n	8006e6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d12e      	bne.n	8006ed2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f023 0310 	bic.w	r3, r3, #16
 8006e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d103      	bne.n	8006ec2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff f8d8 	bl	8006080 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ed0:	e00d      	b.n	8006eee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fb f8da 	bl	800208c <HAL_UART_RxCpltCallback>
}
 8006ed8:	e009      	b.n	8006eee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	8b1b      	ldrh	r3, [r3, #24]
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0208 	orr.w	r2, r2, #8
 8006eea:	b292      	uxth	r2, r2
 8006eec:	831a      	strh	r2, [r3, #24]
}
 8006eee:	bf00      	nop
 8006ef0:	3770      	adds	r7, #112	; 0x70
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40008000 	.word	0x40008000

08006efc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <atof>:
 8006f10:	2100      	movs	r1, #0
 8006f12:	f000 be29 	b.w	8007b68 <strtod>

08006f16 <__itoa>:
 8006f16:	1e93      	subs	r3, r2, #2
 8006f18:	2b22      	cmp	r3, #34	; 0x22
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	d904      	bls.n	8006f2a <__itoa+0x14>
 8006f20:	2300      	movs	r3, #0
 8006f22:	700b      	strb	r3, [r1, #0]
 8006f24:	461c      	mov	r4, r3
 8006f26:	4620      	mov	r0, r4
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	2a0a      	cmp	r2, #10
 8006f2c:	d109      	bne.n	8006f42 <__itoa+0x2c>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	da07      	bge.n	8006f42 <__itoa+0x2c>
 8006f32:	232d      	movs	r3, #45	; 0x2d
 8006f34:	700b      	strb	r3, [r1, #0]
 8006f36:	4240      	negs	r0, r0
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4421      	add	r1, r4
 8006f3c:	f000 fe20 	bl	8007b80 <__utoa>
 8006f40:	e7f1      	b.n	8006f26 <__itoa+0x10>
 8006f42:	2100      	movs	r1, #0
 8006f44:	e7f9      	b.n	8006f3a <__itoa+0x24>

08006f46 <itoa>:
 8006f46:	f7ff bfe6 	b.w	8006f16 <__itoa>

08006f4a <sulp>:
 8006f4a:	b570      	push	{r4, r5, r6, lr}
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460d      	mov	r5, r1
 8006f50:	ec45 4b10 	vmov	d0, r4, r5
 8006f54:	4616      	mov	r6, r2
 8006f56:	f003 fb53 	bl	800a600 <__ulp>
 8006f5a:	ec51 0b10 	vmov	r0, r1, d0
 8006f5e:	b17e      	cbz	r6, 8006f80 <sulp+0x36>
 8006f60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dd09      	ble.n	8006f80 <sulp+0x36>
 8006f6c:	051b      	lsls	r3, r3, #20
 8006f6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f72:	2400      	movs	r4, #0
 8006f74:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f78:	4622      	mov	r2, r4
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	f7f9 fb4c 	bl	8000618 <__aeabi_dmul>
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	0000      	movs	r0, r0
 8006f84:	0000      	movs	r0, r0
	...

08006f88 <_strtod_l>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	ed2d 8b02 	vpush	{d8}
 8006f90:	b09b      	sub	sp, #108	; 0x6c
 8006f92:	4604      	mov	r4, r0
 8006f94:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f96:	2200      	movs	r2, #0
 8006f98:	9216      	str	r2, [sp, #88]	; 0x58
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	f04f 0800 	mov.w	r8, #0
 8006fa0:	f04f 0900 	mov.w	r9, #0
 8006fa4:	460a      	mov	r2, r1
 8006fa6:	9215      	str	r2, [sp, #84]	; 0x54
 8006fa8:	7811      	ldrb	r1, [r2, #0]
 8006faa:	292b      	cmp	r1, #43	; 0x2b
 8006fac:	d04c      	beq.n	8007048 <_strtod_l+0xc0>
 8006fae:	d83a      	bhi.n	8007026 <_strtod_l+0x9e>
 8006fb0:	290d      	cmp	r1, #13
 8006fb2:	d834      	bhi.n	800701e <_strtod_l+0x96>
 8006fb4:	2908      	cmp	r1, #8
 8006fb6:	d834      	bhi.n	8007022 <_strtod_l+0x9a>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d03d      	beq.n	8007038 <_strtod_l+0xb0>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	920a      	str	r2, [sp, #40]	; 0x28
 8006fc0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006fc2:	7832      	ldrb	r2, [r6, #0]
 8006fc4:	2a30      	cmp	r2, #48	; 0x30
 8006fc6:	f040 80b4 	bne.w	8007132 <_strtod_l+0x1aa>
 8006fca:	7872      	ldrb	r2, [r6, #1]
 8006fcc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006fd0:	2a58      	cmp	r2, #88	; 0x58
 8006fd2:	d170      	bne.n	80070b6 <_strtod_l+0x12e>
 8006fd4:	9302      	str	r3, [sp, #8]
 8006fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	ab16      	add	r3, sp, #88	; 0x58
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	4a8e      	ldr	r2, [pc, #568]	; (8007218 <_strtod_l+0x290>)
 8006fe0:	ab17      	add	r3, sp, #92	; 0x5c
 8006fe2:	a915      	add	r1, sp, #84	; 0x54
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f002 fbe9 	bl	80097bc <__gethex>
 8006fea:	f010 070f 	ands.w	r7, r0, #15
 8006fee:	4605      	mov	r5, r0
 8006ff0:	d005      	beq.n	8006ffe <_strtod_l+0x76>
 8006ff2:	2f06      	cmp	r7, #6
 8006ff4:	d12a      	bne.n	800704c <_strtod_l+0xc4>
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9615      	str	r6, [sp, #84]	; 0x54
 8006ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ffe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 857f 	bne.w	8007b04 <_strtod_l+0xb7c>
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	b1db      	cbz	r3, 8007042 <_strtod_l+0xba>
 800700a:	4642      	mov	r2, r8
 800700c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007010:	ec43 2b10 	vmov	d0, r2, r3
 8007014:	b01b      	add	sp, #108	; 0x6c
 8007016:	ecbd 8b02 	vpop	{d8}
 800701a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701e:	2920      	cmp	r1, #32
 8007020:	d1cc      	bne.n	8006fbc <_strtod_l+0x34>
 8007022:	3201      	adds	r2, #1
 8007024:	e7bf      	b.n	8006fa6 <_strtod_l+0x1e>
 8007026:	292d      	cmp	r1, #45	; 0x2d
 8007028:	d1c8      	bne.n	8006fbc <_strtod_l+0x34>
 800702a:	2101      	movs	r1, #1
 800702c:	910a      	str	r1, [sp, #40]	; 0x28
 800702e:	1c51      	adds	r1, r2, #1
 8007030:	9115      	str	r1, [sp, #84]	; 0x54
 8007032:	7852      	ldrb	r2, [r2, #1]
 8007034:	2a00      	cmp	r2, #0
 8007036:	d1c3      	bne.n	8006fc0 <_strtod_l+0x38>
 8007038:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800703a:	9515      	str	r5, [sp, #84]	; 0x54
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 855f 	bne.w	8007b00 <_strtod_l+0xb78>
 8007042:	4642      	mov	r2, r8
 8007044:	464b      	mov	r3, r9
 8007046:	e7e3      	b.n	8007010 <_strtod_l+0x88>
 8007048:	2100      	movs	r1, #0
 800704a:	e7ef      	b.n	800702c <_strtod_l+0xa4>
 800704c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800704e:	b13a      	cbz	r2, 8007060 <_strtod_l+0xd8>
 8007050:	2135      	movs	r1, #53	; 0x35
 8007052:	a818      	add	r0, sp, #96	; 0x60
 8007054:	f003 fbd1 	bl	800a7fa <__copybits>
 8007058:	9916      	ldr	r1, [sp, #88]	; 0x58
 800705a:	4620      	mov	r0, r4
 800705c:	f002 ffa4 	bl	8009fa8 <_Bfree>
 8007060:	3f01      	subs	r7, #1
 8007062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007064:	2f04      	cmp	r7, #4
 8007066:	d806      	bhi.n	8007076 <_strtod_l+0xee>
 8007068:	e8df f007 	tbb	[pc, r7]
 800706c:	201d0314 	.word	0x201d0314
 8007070:	14          	.byte	0x14
 8007071:	00          	.byte	0x00
 8007072:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007076:	05e9      	lsls	r1, r5, #23
 8007078:	bf48      	it	mi
 800707a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800707e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007082:	0d1b      	lsrs	r3, r3, #20
 8007084:	051b      	lsls	r3, r3, #20
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1b9      	bne.n	8006ffe <_strtod_l+0x76>
 800708a:	f001 fc07 	bl	800889c <__errno>
 800708e:	2322      	movs	r3, #34	; 0x22
 8007090:	6003      	str	r3, [r0, #0]
 8007092:	e7b4      	b.n	8006ffe <_strtod_l+0x76>
 8007094:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007098:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800709c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80070a4:	e7e7      	b.n	8007076 <_strtod_l+0xee>
 80070a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007220 <_strtod_l+0x298>
 80070aa:	e7e4      	b.n	8007076 <_strtod_l+0xee>
 80070ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80070b0:	f04f 38ff 	mov.w	r8, #4294967295
 80070b4:	e7df      	b.n	8007076 <_strtod_l+0xee>
 80070b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	9215      	str	r2, [sp, #84]	; 0x54
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b30      	cmp	r3, #48	; 0x30
 80070c0:	d0f9      	beq.n	80070b6 <_strtod_l+0x12e>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d09b      	beq.n	8006ffe <_strtod_l+0x76>
 80070c6:	2301      	movs	r3, #1
 80070c8:	f04f 0a00 	mov.w	sl, #0
 80070cc:	9304      	str	r3, [sp, #16]
 80070ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80070d6:	46d3      	mov	fp, sl
 80070d8:	220a      	movs	r2, #10
 80070da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80070dc:	7806      	ldrb	r6, [r0, #0]
 80070de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80070e2:	b2d9      	uxtb	r1, r3
 80070e4:	2909      	cmp	r1, #9
 80070e6:	d926      	bls.n	8007136 <_strtod_l+0x1ae>
 80070e8:	494c      	ldr	r1, [pc, #304]	; (800721c <_strtod_l+0x294>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	f001 fb0b 	bl	8008706 <strncmp>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d030      	beq.n	8007156 <_strtod_l+0x1ce>
 80070f4:	2000      	movs	r0, #0
 80070f6:	4632      	mov	r2, r6
 80070f8:	9005      	str	r0, [sp, #20]
 80070fa:	465e      	mov	r6, fp
 80070fc:	4603      	mov	r3, r0
 80070fe:	2a65      	cmp	r2, #101	; 0x65
 8007100:	d001      	beq.n	8007106 <_strtod_l+0x17e>
 8007102:	2a45      	cmp	r2, #69	; 0x45
 8007104:	d113      	bne.n	800712e <_strtod_l+0x1a6>
 8007106:	b91e      	cbnz	r6, 8007110 <_strtod_l+0x188>
 8007108:	9a04      	ldr	r2, [sp, #16]
 800710a:	4302      	orrs	r2, r0
 800710c:	d094      	beq.n	8007038 <_strtod_l+0xb0>
 800710e:	2600      	movs	r6, #0
 8007110:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007112:	1c6a      	adds	r2, r5, #1
 8007114:	9215      	str	r2, [sp, #84]	; 0x54
 8007116:	786a      	ldrb	r2, [r5, #1]
 8007118:	2a2b      	cmp	r2, #43	; 0x2b
 800711a:	d074      	beq.n	8007206 <_strtod_l+0x27e>
 800711c:	2a2d      	cmp	r2, #45	; 0x2d
 800711e:	d078      	beq.n	8007212 <_strtod_l+0x28a>
 8007120:	f04f 0c00 	mov.w	ip, #0
 8007124:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007128:	2909      	cmp	r1, #9
 800712a:	d97f      	bls.n	800722c <_strtod_l+0x2a4>
 800712c:	9515      	str	r5, [sp, #84]	; 0x54
 800712e:	2700      	movs	r7, #0
 8007130:	e09e      	b.n	8007270 <_strtod_l+0x2e8>
 8007132:	2300      	movs	r3, #0
 8007134:	e7c8      	b.n	80070c8 <_strtod_l+0x140>
 8007136:	f1bb 0f08 	cmp.w	fp, #8
 800713a:	bfd8      	it	le
 800713c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800713e:	f100 0001 	add.w	r0, r0, #1
 8007142:	bfda      	itte	le
 8007144:	fb02 3301 	mlale	r3, r2, r1, r3
 8007148:	9309      	strle	r3, [sp, #36]	; 0x24
 800714a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800714e:	f10b 0b01 	add.w	fp, fp, #1
 8007152:	9015      	str	r0, [sp, #84]	; 0x54
 8007154:	e7c1      	b.n	80070da <_strtod_l+0x152>
 8007156:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	9215      	str	r2, [sp, #84]	; 0x54
 800715c:	785a      	ldrb	r2, [r3, #1]
 800715e:	f1bb 0f00 	cmp.w	fp, #0
 8007162:	d037      	beq.n	80071d4 <_strtod_l+0x24c>
 8007164:	9005      	str	r0, [sp, #20]
 8007166:	465e      	mov	r6, fp
 8007168:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800716c:	2b09      	cmp	r3, #9
 800716e:	d912      	bls.n	8007196 <_strtod_l+0x20e>
 8007170:	2301      	movs	r3, #1
 8007172:	e7c4      	b.n	80070fe <_strtod_l+0x176>
 8007174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	9215      	str	r2, [sp, #84]	; 0x54
 800717a:	785a      	ldrb	r2, [r3, #1]
 800717c:	3001      	adds	r0, #1
 800717e:	2a30      	cmp	r2, #48	; 0x30
 8007180:	d0f8      	beq.n	8007174 <_strtod_l+0x1ec>
 8007182:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007186:	2b08      	cmp	r3, #8
 8007188:	f200 84c1 	bhi.w	8007b0e <_strtod_l+0xb86>
 800718c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800718e:	9005      	str	r0, [sp, #20]
 8007190:	2000      	movs	r0, #0
 8007192:	930b      	str	r3, [sp, #44]	; 0x2c
 8007194:	4606      	mov	r6, r0
 8007196:	3a30      	subs	r2, #48	; 0x30
 8007198:	f100 0301 	add.w	r3, r0, #1
 800719c:	d014      	beq.n	80071c8 <_strtod_l+0x240>
 800719e:	9905      	ldr	r1, [sp, #20]
 80071a0:	4419      	add	r1, r3
 80071a2:	9105      	str	r1, [sp, #20]
 80071a4:	4633      	mov	r3, r6
 80071a6:	eb00 0c06 	add.w	ip, r0, r6
 80071aa:	210a      	movs	r1, #10
 80071ac:	4563      	cmp	r3, ip
 80071ae:	d113      	bne.n	80071d8 <_strtod_l+0x250>
 80071b0:	1833      	adds	r3, r6, r0
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	f106 0601 	add.w	r6, r6, #1
 80071b8:	4406      	add	r6, r0
 80071ba:	dc1a      	bgt.n	80071f2 <_strtod_l+0x26a>
 80071bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071be:	230a      	movs	r3, #10
 80071c0:	fb03 2301 	mla	r3, r3, r1, r2
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	2300      	movs	r3, #0
 80071c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071ca:	1c51      	adds	r1, r2, #1
 80071cc:	9115      	str	r1, [sp, #84]	; 0x54
 80071ce:	7852      	ldrb	r2, [r2, #1]
 80071d0:	4618      	mov	r0, r3
 80071d2:	e7c9      	b.n	8007168 <_strtod_l+0x1e0>
 80071d4:	4658      	mov	r0, fp
 80071d6:	e7d2      	b.n	800717e <_strtod_l+0x1f6>
 80071d8:	2b08      	cmp	r3, #8
 80071da:	f103 0301 	add.w	r3, r3, #1
 80071de:	dc03      	bgt.n	80071e8 <_strtod_l+0x260>
 80071e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80071e2:	434f      	muls	r7, r1
 80071e4:	9709      	str	r7, [sp, #36]	; 0x24
 80071e6:	e7e1      	b.n	80071ac <_strtod_l+0x224>
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	bfd8      	it	le
 80071ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80071f0:	e7dc      	b.n	80071ac <_strtod_l+0x224>
 80071f2:	2e10      	cmp	r6, #16
 80071f4:	bfdc      	itt	le
 80071f6:	230a      	movle	r3, #10
 80071f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80071fc:	e7e3      	b.n	80071c6 <_strtod_l+0x23e>
 80071fe:	2300      	movs	r3, #0
 8007200:	9305      	str	r3, [sp, #20]
 8007202:	2301      	movs	r3, #1
 8007204:	e780      	b.n	8007108 <_strtod_l+0x180>
 8007206:	f04f 0c00 	mov.w	ip, #0
 800720a:	1caa      	adds	r2, r5, #2
 800720c:	9215      	str	r2, [sp, #84]	; 0x54
 800720e:	78aa      	ldrb	r2, [r5, #2]
 8007210:	e788      	b.n	8007124 <_strtod_l+0x19c>
 8007212:	f04f 0c01 	mov.w	ip, #1
 8007216:	e7f8      	b.n	800720a <_strtod_l+0x282>
 8007218:	0800e0e4 	.word	0x0800e0e4
 800721c:	0800e0e0 	.word	0x0800e0e0
 8007220:	7ff00000 	.word	0x7ff00000
 8007224:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007226:	1c51      	adds	r1, r2, #1
 8007228:	9115      	str	r1, [sp, #84]	; 0x54
 800722a:	7852      	ldrb	r2, [r2, #1]
 800722c:	2a30      	cmp	r2, #48	; 0x30
 800722e:	d0f9      	beq.n	8007224 <_strtod_l+0x29c>
 8007230:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007234:	2908      	cmp	r1, #8
 8007236:	f63f af7a 	bhi.w	800712e <_strtod_l+0x1a6>
 800723a:	3a30      	subs	r2, #48	; 0x30
 800723c:	9208      	str	r2, [sp, #32]
 800723e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007240:	920c      	str	r2, [sp, #48]	; 0x30
 8007242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007244:	1c57      	adds	r7, r2, #1
 8007246:	9715      	str	r7, [sp, #84]	; 0x54
 8007248:	7852      	ldrb	r2, [r2, #1]
 800724a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800724e:	f1be 0f09 	cmp.w	lr, #9
 8007252:	d938      	bls.n	80072c6 <_strtod_l+0x33e>
 8007254:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007256:	1a7f      	subs	r7, r7, r1
 8007258:	2f08      	cmp	r7, #8
 800725a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800725e:	dc03      	bgt.n	8007268 <_strtod_l+0x2e0>
 8007260:	9908      	ldr	r1, [sp, #32]
 8007262:	428f      	cmp	r7, r1
 8007264:	bfa8      	it	ge
 8007266:	460f      	movge	r7, r1
 8007268:	f1bc 0f00 	cmp.w	ip, #0
 800726c:	d000      	beq.n	8007270 <_strtod_l+0x2e8>
 800726e:	427f      	negs	r7, r7
 8007270:	2e00      	cmp	r6, #0
 8007272:	d14f      	bne.n	8007314 <_strtod_l+0x38c>
 8007274:	9904      	ldr	r1, [sp, #16]
 8007276:	4301      	orrs	r1, r0
 8007278:	f47f aec1 	bne.w	8006ffe <_strtod_l+0x76>
 800727c:	2b00      	cmp	r3, #0
 800727e:	f47f aedb 	bne.w	8007038 <_strtod_l+0xb0>
 8007282:	2a69      	cmp	r2, #105	; 0x69
 8007284:	d029      	beq.n	80072da <_strtod_l+0x352>
 8007286:	dc26      	bgt.n	80072d6 <_strtod_l+0x34e>
 8007288:	2a49      	cmp	r2, #73	; 0x49
 800728a:	d026      	beq.n	80072da <_strtod_l+0x352>
 800728c:	2a4e      	cmp	r2, #78	; 0x4e
 800728e:	f47f aed3 	bne.w	8007038 <_strtod_l+0xb0>
 8007292:	499b      	ldr	r1, [pc, #620]	; (8007500 <_strtod_l+0x578>)
 8007294:	a815      	add	r0, sp, #84	; 0x54
 8007296:	f002 fcd1 	bl	8009c3c <__match>
 800729a:	2800      	cmp	r0, #0
 800729c:	f43f aecc 	beq.w	8007038 <_strtod_l+0xb0>
 80072a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b28      	cmp	r3, #40	; 0x28
 80072a6:	d12f      	bne.n	8007308 <_strtod_l+0x380>
 80072a8:	4996      	ldr	r1, [pc, #600]	; (8007504 <_strtod_l+0x57c>)
 80072aa:	aa18      	add	r2, sp, #96	; 0x60
 80072ac:	a815      	add	r0, sp, #84	; 0x54
 80072ae:	f002 fcd9 	bl	8009c64 <__hexnan>
 80072b2:	2805      	cmp	r0, #5
 80072b4:	d128      	bne.n	8007308 <_strtod_l+0x380>
 80072b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80072c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80072c4:	e69b      	b.n	8006ffe <_strtod_l+0x76>
 80072c6:	9f08      	ldr	r7, [sp, #32]
 80072c8:	210a      	movs	r1, #10
 80072ca:	fb01 2107 	mla	r1, r1, r7, r2
 80072ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80072d2:	9208      	str	r2, [sp, #32]
 80072d4:	e7b5      	b.n	8007242 <_strtod_l+0x2ba>
 80072d6:	2a6e      	cmp	r2, #110	; 0x6e
 80072d8:	e7d9      	b.n	800728e <_strtod_l+0x306>
 80072da:	498b      	ldr	r1, [pc, #556]	; (8007508 <_strtod_l+0x580>)
 80072dc:	a815      	add	r0, sp, #84	; 0x54
 80072de:	f002 fcad 	bl	8009c3c <__match>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	f43f aea8 	beq.w	8007038 <_strtod_l+0xb0>
 80072e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072ea:	4988      	ldr	r1, [pc, #544]	; (800750c <_strtod_l+0x584>)
 80072ec:	3b01      	subs	r3, #1
 80072ee:	a815      	add	r0, sp, #84	; 0x54
 80072f0:	9315      	str	r3, [sp, #84]	; 0x54
 80072f2:	f002 fca3 	bl	8009c3c <__match>
 80072f6:	b910      	cbnz	r0, 80072fe <_strtod_l+0x376>
 80072f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072fa:	3301      	adds	r3, #1
 80072fc:	9315      	str	r3, [sp, #84]	; 0x54
 80072fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800751c <_strtod_l+0x594>
 8007302:	f04f 0800 	mov.w	r8, #0
 8007306:	e67a      	b.n	8006ffe <_strtod_l+0x76>
 8007308:	4881      	ldr	r0, [pc, #516]	; (8007510 <_strtod_l+0x588>)
 800730a:	f001 fb01 	bl	8008910 <nan>
 800730e:	ec59 8b10 	vmov	r8, r9, d0
 8007312:	e674      	b.n	8006ffe <_strtod_l+0x76>
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007318:	1afb      	subs	r3, r7, r3
 800731a:	f1bb 0f00 	cmp.w	fp, #0
 800731e:	bf08      	it	eq
 8007320:	46b3      	moveq	fp, r6
 8007322:	2e10      	cmp	r6, #16
 8007324:	9308      	str	r3, [sp, #32]
 8007326:	4635      	mov	r5, r6
 8007328:	bfa8      	it	ge
 800732a:	2510      	movge	r5, #16
 800732c:	f7f9 f8fa 	bl	8000524 <__aeabi_ui2d>
 8007330:	2e09      	cmp	r6, #9
 8007332:	4680      	mov	r8, r0
 8007334:	4689      	mov	r9, r1
 8007336:	dd13      	ble.n	8007360 <_strtod_l+0x3d8>
 8007338:	4b76      	ldr	r3, [pc, #472]	; (8007514 <_strtod_l+0x58c>)
 800733a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800733e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007342:	f7f9 f969 	bl	8000618 <__aeabi_dmul>
 8007346:	4680      	mov	r8, r0
 8007348:	4650      	mov	r0, sl
 800734a:	4689      	mov	r9, r1
 800734c:	f7f9 f8ea 	bl	8000524 <__aeabi_ui2d>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4640      	mov	r0, r8
 8007356:	4649      	mov	r1, r9
 8007358:	f7f8 ffa8 	bl	80002ac <__adddf3>
 800735c:	4680      	mov	r8, r0
 800735e:	4689      	mov	r9, r1
 8007360:	2e0f      	cmp	r6, #15
 8007362:	dc38      	bgt.n	80073d6 <_strtod_l+0x44e>
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f43f ae49 	beq.w	8006ffe <_strtod_l+0x76>
 800736c:	dd24      	ble.n	80073b8 <_strtod_l+0x430>
 800736e:	2b16      	cmp	r3, #22
 8007370:	dc0b      	bgt.n	800738a <_strtod_l+0x402>
 8007372:	4968      	ldr	r1, [pc, #416]	; (8007514 <_strtod_l+0x58c>)
 8007374:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	f7f9 f94a 	bl	8000618 <__aeabi_dmul>
 8007384:	4680      	mov	r8, r0
 8007386:	4689      	mov	r9, r1
 8007388:	e639      	b.n	8006ffe <_strtod_l+0x76>
 800738a:	9a08      	ldr	r2, [sp, #32]
 800738c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007390:	4293      	cmp	r3, r2
 8007392:	db20      	blt.n	80073d6 <_strtod_l+0x44e>
 8007394:	4c5f      	ldr	r4, [pc, #380]	; (8007514 <_strtod_l+0x58c>)
 8007396:	f1c6 060f 	rsb	r6, r6, #15
 800739a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800739e:	4642      	mov	r2, r8
 80073a0:	464b      	mov	r3, r9
 80073a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a6:	f7f9 f937 	bl	8000618 <__aeabi_dmul>
 80073aa:	9b08      	ldr	r3, [sp, #32]
 80073ac:	1b9e      	subs	r6, r3, r6
 80073ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80073b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073b6:	e7e3      	b.n	8007380 <_strtod_l+0x3f8>
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	3316      	adds	r3, #22
 80073bc:	db0b      	blt.n	80073d6 <_strtod_l+0x44e>
 80073be:	9b05      	ldr	r3, [sp, #20]
 80073c0:	1bdf      	subs	r7, r3, r7
 80073c2:	4b54      	ldr	r3, [pc, #336]	; (8007514 <_strtod_l+0x58c>)
 80073c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80073c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073cc:	4640      	mov	r0, r8
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7f9 fa4c 	bl	800086c <__aeabi_ddiv>
 80073d4:	e7d6      	b.n	8007384 <_strtod_l+0x3fc>
 80073d6:	9b08      	ldr	r3, [sp, #32]
 80073d8:	1b75      	subs	r5, r6, r5
 80073da:	441d      	add	r5, r3
 80073dc:	2d00      	cmp	r5, #0
 80073de:	dd70      	ble.n	80074c2 <_strtod_l+0x53a>
 80073e0:	f015 030f 	ands.w	r3, r5, #15
 80073e4:	d00a      	beq.n	80073fc <_strtod_l+0x474>
 80073e6:	494b      	ldr	r1, [pc, #300]	; (8007514 <_strtod_l+0x58c>)
 80073e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f4:	f7f9 f910 	bl	8000618 <__aeabi_dmul>
 80073f8:	4680      	mov	r8, r0
 80073fa:	4689      	mov	r9, r1
 80073fc:	f035 050f 	bics.w	r5, r5, #15
 8007400:	d04d      	beq.n	800749e <_strtod_l+0x516>
 8007402:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007406:	dd22      	ble.n	800744e <_strtod_l+0x4c6>
 8007408:	2500      	movs	r5, #0
 800740a:	46ab      	mov	fp, r5
 800740c:	9509      	str	r5, [sp, #36]	; 0x24
 800740e:	9505      	str	r5, [sp, #20]
 8007410:	2322      	movs	r3, #34	; 0x22
 8007412:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800751c <_strtod_l+0x594>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	f04f 0800 	mov.w	r8, #0
 800741c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f aded 	beq.w	8006ffe <_strtod_l+0x76>
 8007424:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007426:	4620      	mov	r0, r4
 8007428:	f002 fdbe 	bl	8009fa8 <_Bfree>
 800742c:	9905      	ldr	r1, [sp, #20]
 800742e:	4620      	mov	r0, r4
 8007430:	f002 fdba 	bl	8009fa8 <_Bfree>
 8007434:	4659      	mov	r1, fp
 8007436:	4620      	mov	r0, r4
 8007438:	f002 fdb6 	bl	8009fa8 <_Bfree>
 800743c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800743e:	4620      	mov	r0, r4
 8007440:	f002 fdb2 	bl	8009fa8 <_Bfree>
 8007444:	4629      	mov	r1, r5
 8007446:	4620      	mov	r0, r4
 8007448:	f002 fdae 	bl	8009fa8 <_Bfree>
 800744c:	e5d7      	b.n	8006ffe <_strtod_l+0x76>
 800744e:	4b32      	ldr	r3, [pc, #200]	; (8007518 <_strtod_l+0x590>)
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	2300      	movs	r3, #0
 8007454:	112d      	asrs	r5, r5, #4
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	469a      	mov	sl, r3
 800745c:	2d01      	cmp	r5, #1
 800745e:	dc21      	bgt.n	80074a4 <_strtod_l+0x51c>
 8007460:	b10b      	cbz	r3, 8007466 <_strtod_l+0x4de>
 8007462:	4680      	mov	r8, r0
 8007464:	4689      	mov	r9, r1
 8007466:	492c      	ldr	r1, [pc, #176]	; (8007518 <_strtod_l+0x590>)
 8007468:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800746c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007470:	4642      	mov	r2, r8
 8007472:	464b      	mov	r3, r9
 8007474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007478:	f7f9 f8ce 	bl	8000618 <__aeabi_dmul>
 800747c:	4b27      	ldr	r3, [pc, #156]	; (800751c <_strtod_l+0x594>)
 800747e:	460a      	mov	r2, r1
 8007480:	400b      	ands	r3, r1
 8007482:	4927      	ldr	r1, [pc, #156]	; (8007520 <_strtod_l+0x598>)
 8007484:	428b      	cmp	r3, r1
 8007486:	4680      	mov	r8, r0
 8007488:	d8be      	bhi.n	8007408 <_strtod_l+0x480>
 800748a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800748e:	428b      	cmp	r3, r1
 8007490:	bf86      	itte	hi
 8007492:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007524 <_strtod_l+0x59c>
 8007496:	f04f 38ff 	movhi.w	r8, #4294967295
 800749a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800749e:	2300      	movs	r3, #0
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	e07b      	b.n	800759c <_strtod_l+0x614>
 80074a4:	07ea      	lsls	r2, r5, #31
 80074a6:	d505      	bpl.n	80074b4 <_strtod_l+0x52c>
 80074a8:	9b04      	ldr	r3, [sp, #16]
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f9 f8b3 	bl	8000618 <__aeabi_dmul>
 80074b2:	2301      	movs	r3, #1
 80074b4:	9a04      	ldr	r2, [sp, #16]
 80074b6:	3208      	adds	r2, #8
 80074b8:	f10a 0a01 	add.w	sl, sl, #1
 80074bc:	106d      	asrs	r5, r5, #1
 80074be:	9204      	str	r2, [sp, #16]
 80074c0:	e7cc      	b.n	800745c <_strtod_l+0x4d4>
 80074c2:	d0ec      	beq.n	800749e <_strtod_l+0x516>
 80074c4:	426d      	negs	r5, r5
 80074c6:	f015 020f 	ands.w	r2, r5, #15
 80074ca:	d00a      	beq.n	80074e2 <_strtod_l+0x55a>
 80074cc:	4b11      	ldr	r3, [pc, #68]	; (8007514 <_strtod_l+0x58c>)
 80074ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f9 f9c7 	bl	800086c <__aeabi_ddiv>
 80074de:	4680      	mov	r8, r0
 80074e0:	4689      	mov	r9, r1
 80074e2:	112d      	asrs	r5, r5, #4
 80074e4:	d0db      	beq.n	800749e <_strtod_l+0x516>
 80074e6:	2d1f      	cmp	r5, #31
 80074e8:	dd1e      	ble.n	8007528 <_strtod_l+0x5a0>
 80074ea:	2500      	movs	r5, #0
 80074ec:	46ab      	mov	fp, r5
 80074ee:	9509      	str	r5, [sp, #36]	; 0x24
 80074f0:	9505      	str	r5, [sp, #20]
 80074f2:	2322      	movs	r3, #34	; 0x22
 80074f4:	f04f 0800 	mov.w	r8, #0
 80074f8:	f04f 0900 	mov.w	r9, #0
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	e78d      	b.n	800741c <_strtod_l+0x494>
 8007500:	0800e16a 	.word	0x0800e16a
 8007504:	0800e0f8 	.word	0x0800e0f8
 8007508:	0800e162 	.word	0x0800e162
 800750c:	0800e249 	.word	0x0800e249
 8007510:	0800e245 	.word	0x0800e245
 8007514:	0800e3a0 	.word	0x0800e3a0
 8007518:	0800e378 	.word	0x0800e378
 800751c:	7ff00000 	.word	0x7ff00000
 8007520:	7ca00000 	.word	0x7ca00000
 8007524:	7fefffff 	.word	0x7fefffff
 8007528:	f015 0310 	ands.w	r3, r5, #16
 800752c:	bf18      	it	ne
 800752e:	236a      	movne	r3, #106	; 0x6a
 8007530:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80078d4 <_strtod_l+0x94c>
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	4640      	mov	r0, r8
 8007538:	4649      	mov	r1, r9
 800753a:	2300      	movs	r3, #0
 800753c:	07ea      	lsls	r2, r5, #31
 800753e:	d504      	bpl.n	800754a <_strtod_l+0x5c2>
 8007540:	e9da 2300 	ldrd	r2, r3, [sl]
 8007544:	f7f9 f868 	bl	8000618 <__aeabi_dmul>
 8007548:	2301      	movs	r3, #1
 800754a:	106d      	asrs	r5, r5, #1
 800754c:	f10a 0a08 	add.w	sl, sl, #8
 8007550:	d1f4      	bne.n	800753c <_strtod_l+0x5b4>
 8007552:	b10b      	cbz	r3, 8007558 <_strtod_l+0x5d0>
 8007554:	4680      	mov	r8, r0
 8007556:	4689      	mov	r9, r1
 8007558:	9b04      	ldr	r3, [sp, #16]
 800755a:	b1bb      	cbz	r3, 800758c <_strtod_l+0x604>
 800755c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007560:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007564:	2b00      	cmp	r3, #0
 8007566:	4649      	mov	r1, r9
 8007568:	dd10      	ble.n	800758c <_strtod_l+0x604>
 800756a:	2b1f      	cmp	r3, #31
 800756c:	f340 811e 	ble.w	80077ac <_strtod_l+0x824>
 8007570:	2b34      	cmp	r3, #52	; 0x34
 8007572:	bfde      	ittt	le
 8007574:	f04f 33ff 	movle.w	r3, #4294967295
 8007578:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800757c:	4093      	lslle	r3, r2
 800757e:	f04f 0800 	mov.w	r8, #0
 8007582:	bfcc      	ite	gt
 8007584:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007588:	ea03 0901 	andle.w	r9, r3, r1
 800758c:	2200      	movs	r2, #0
 800758e:	2300      	movs	r3, #0
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f9 faa8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007598:	2800      	cmp	r0, #0
 800759a:	d1a6      	bne.n	80074ea <_strtod_l+0x562>
 800759c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075a2:	4633      	mov	r3, r6
 80075a4:	465a      	mov	r2, fp
 80075a6:	4620      	mov	r0, r4
 80075a8:	f002 fd66 	bl	800a078 <__s2b>
 80075ac:	9009      	str	r0, [sp, #36]	; 0x24
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f43f af2a 	beq.w	8007408 <_strtod_l+0x480>
 80075b4:	9a08      	ldr	r2, [sp, #32]
 80075b6:	9b05      	ldr	r3, [sp, #20]
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	eba3 0307 	sub.w	r3, r3, r7
 80075be:	bfa8      	it	ge
 80075c0:	2300      	movge	r3, #0
 80075c2:	930c      	str	r3, [sp, #48]	; 0x30
 80075c4:	2500      	movs	r5, #0
 80075c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80075ca:	9312      	str	r3, [sp, #72]	; 0x48
 80075cc:	46ab      	mov	fp, r5
 80075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d0:	4620      	mov	r0, r4
 80075d2:	6859      	ldr	r1, [r3, #4]
 80075d4:	f002 fca8 	bl	8009f28 <_Balloc>
 80075d8:	9005      	str	r0, [sp, #20]
 80075da:	2800      	cmp	r0, #0
 80075dc:	f43f af18 	beq.w	8007410 <_strtod_l+0x488>
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	3202      	adds	r2, #2
 80075e6:	f103 010c 	add.w	r1, r3, #12
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	300c      	adds	r0, #12
 80075ee:	f001 f981 	bl	80088f4 <memcpy>
 80075f2:	ec49 8b10 	vmov	d0, r8, r9
 80075f6:	aa18      	add	r2, sp, #96	; 0x60
 80075f8:	a917      	add	r1, sp, #92	; 0x5c
 80075fa:	4620      	mov	r0, r4
 80075fc:	f003 f870 	bl	800a6e0 <__d2b>
 8007600:	ec49 8b18 	vmov	d8, r8, r9
 8007604:	9016      	str	r0, [sp, #88]	; 0x58
 8007606:	2800      	cmp	r0, #0
 8007608:	f43f af02 	beq.w	8007410 <_strtod_l+0x488>
 800760c:	2101      	movs	r1, #1
 800760e:	4620      	mov	r0, r4
 8007610:	f002 fdca 	bl	800a1a8 <__i2b>
 8007614:	4683      	mov	fp, r0
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f aefa 	beq.w	8007410 <_strtod_l+0x488>
 800761c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800761e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007620:	2e00      	cmp	r6, #0
 8007622:	bfab      	itete	ge
 8007624:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007626:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007628:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800762a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800762e:	bfac      	ite	ge
 8007630:	eb06 0a03 	addge.w	sl, r6, r3
 8007634:	1b9f      	sublt	r7, r3, r6
 8007636:	9b04      	ldr	r3, [sp, #16]
 8007638:	1af6      	subs	r6, r6, r3
 800763a:	4416      	add	r6, r2
 800763c:	4ba0      	ldr	r3, [pc, #640]	; (80078c0 <_strtod_l+0x938>)
 800763e:	3e01      	subs	r6, #1
 8007640:	429e      	cmp	r6, r3
 8007642:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007646:	f280 80c4 	bge.w	80077d2 <_strtod_l+0x84a>
 800764a:	1b9b      	subs	r3, r3, r6
 800764c:	2b1f      	cmp	r3, #31
 800764e:	eba2 0203 	sub.w	r2, r2, r3
 8007652:	f04f 0101 	mov.w	r1, #1
 8007656:	f300 80b0 	bgt.w	80077ba <_strtod_l+0x832>
 800765a:	fa01 f303 	lsl.w	r3, r1, r3
 800765e:	930e      	str	r3, [sp, #56]	; 0x38
 8007660:	2300      	movs	r3, #0
 8007662:	930d      	str	r3, [sp, #52]	; 0x34
 8007664:	eb0a 0602 	add.w	r6, sl, r2
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	45b2      	cmp	sl, r6
 800766c:	4417      	add	r7, r2
 800766e:	441f      	add	r7, r3
 8007670:	4653      	mov	r3, sl
 8007672:	bfa8      	it	ge
 8007674:	4633      	movge	r3, r6
 8007676:	42bb      	cmp	r3, r7
 8007678:	bfa8      	it	ge
 800767a:	463b      	movge	r3, r7
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfc2      	ittt	gt
 8007680:	1af6      	subgt	r6, r6, r3
 8007682:	1aff      	subgt	r7, r7, r3
 8007684:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd17      	ble.n	80076be <_strtod_l+0x736>
 800768e:	4659      	mov	r1, fp
 8007690:	461a      	mov	r2, r3
 8007692:	4620      	mov	r0, r4
 8007694:	f002 fe48 	bl	800a328 <__pow5mult>
 8007698:	4683      	mov	fp, r0
 800769a:	2800      	cmp	r0, #0
 800769c:	f43f aeb8 	beq.w	8007410 <_strtod_l+0x488>
 80076a0:	4601      	mov	r1, r0
 80076a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076a4:	4620      	mov	r0, r4
 80076a6:	f002 fd95 	bl	800a1d4 <__multiply>
 80076aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f43f aeaf 	beq.w	8007410 <_strtod_l+0x488>
 80076b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80076b4:	4620      	mov	r0, r4
 80076b6:	f002 fc77 	bl	8009fa8 <_Bfree>
 80076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076bc:	9316      	str	r3, [sp, #88]	; 0x58
 80076be:	2e00      	cmp	r6, #0
 80076c0:	f300 808c 	bgt.w	80077dc <_strtod_l+0x854>
 80076c4:	9b08      	ldr	r3, [sp, #32]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dd08      	ble.n	80076dc <_strtod_l+0x754>
 80076ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076cc:	9905      	ldr	r1, [sp, #20]
 80076ce:	4620      	mov	r0, r4
 80076d0:	f002 fe2a 	bl	800a328 <__pow5mult>
 80076d4:	9005      	str	r0, [sp, #20]
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f43f ae9a 	beq.w	8007410 <_strtod_l+0x488>
 80076dc:	2f00      	cmp	r7, #0
 80076de:	dd08      	ble.n	80076f2 <_strtod_l+0x76a>
 80076e0:	9905      	ldr	r1, [sp, #20]
 80076e2:	463a      	mov	r2, r7
 80076e4:	4620      	mov	r0, r4
 80076e6:	f002 fe79 	bl	800a3dc <__lshift>
 80076ea:	9005      	str	r0, [sp, #20]
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f43f ae8f 	beq.w	8007410 <_strtod_l+0x488>
 80076f2:	f1ba 0f00 	cmp.w	sl, #0
 80076f6:	dd08      	ble.n	800770a <_strtod_l+0x782>
 80076f8:	4659      	mov	r1, fp
 80076fa:	4652      	mov	r2, sl
 80076fc:	4620      	mov	r0, r4
 80076fe:	f002 fe6d 	bl	800a3dc <__lshift>
 8007702:	4683      	mov	fp, r0
 8007704:	2800      	cmp	r0, #0
 8007706:	f43f ae83 	beq.w	8007410 <_strtod_l+0x488>
 800770a:	9a05      	ldr	r2, [sp, #20]
 800770c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800770e:	4620      	mov	r0, r4
 8007710:	f002 feec 	bl	800a4ec <__mdiff>
 8007714:	4605      	mov	r5, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f ae7a 	beq.w	8007410 <_strtod_l+0x488>
 800771c:	68c3      	ldr	r3, [r0, #12]
 800771e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007720:	2300      	movs	r3, #0
 8007722:	60c3      	str	r3, [r0, #12]
 8007724:	4659      	mov	r1, fp
 8007726:	f002 fec5 	bl	800a4b4 <__mcmp>
 800772a:	2800      	cmp	r0, #0
 800772c:	da60      	bge.n	80077f0 <_strtod_l+0x868>
 800772e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007730:	ea53 0308 	orrs.w	r3, r3, r8
 8007734:	f040 8084 	bne.w	8007840 <_strtod_l+0x8b8>
 8007738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800773c:	2b00      	cmp	r3, #0
 800773e:	d17f      	bne.n	8007840 <_strtod_l+0x8b8>
 8007740:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007744:	0d1b      	lsrs	r3, r3, #20
 8007746:	051b      	lsls	r3, r3, #20
 8007748:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800774c:	d978      	bls.n	8007840 <_strtod_l+0x8b8>
 800774e:	696b      	ldr	r3, [r5, #20]
 8007750:	b913      	cbnz	r3, 8007758 <_strtod_l+0x7d0>
 8007752:	692b      	ldr	r3, [r5, #16]
 8007754:	2b01      	cmp	r3, #1
 8007756:	dd73      	ble.n	8007840 <_strtod_l+0x8b8>
 8007758:	4629      	mov	r1, r5
 800775a:	2201      	movs	r2, #1
 800775c:	4620      	mov	r0, r4
 800775e:	f002 fe3d 	bl	800a3dc <__lshift>
 8007762:	4659      	mov	r1, fp
 8007764:	4605      	mov	r5, r0
 8007766:	f002 fea5 	bl	800a4b4 <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	dd68      	ble.n	8007840 <_strtod_l+0x8b8>
 800776e:	9904      	ldr	r1, [sp, #16]
 8007770:	4a54      	ldr	r2, [pc, #336]	; (80078c4 <_strtod_l+0x93c>)
 8007772:	464b      	mov	r3, r9
 8007774:	2900      	cmp	r1, #0
 8007776:	f000 8084 	beq.w	8007882 <_strtod_l+0x8fa>
 800777a:	ea02 0109 	and.w	r1, r2, r9
 800777e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007782:	dc7e      	bgt.n	8007882 <_strtod_l+0x8fa>
 8007784:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007788:	f77f aeb3 	ble.w	80074f2 <_strtod_l+0x56a>
 800778c:	4b4e      	ldr	r3, [pc, #312]	; (80078c8 <_strtod_l+0x940>)
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	2200      	movs	r2, #0
 8007794:	f7f8 ff40 	bl	8000618 <__aeabi_dmul>
 8007798:	4b4a      	ldr	r3, [pc, #296]	; (80078c4 <_strtod_l+0x93c>)
 800779a:	400b      	ands	r3, r1
 800779c:	4680      	mov	r8, r0
 800779e:	4689      	mov	r9, r1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f47f ae3f 	bne.w	8007424 <_strtod_l+0x49c>
 80077a6:	2322      	movs	r3, #34	; 0x22
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	e63b      	b.n	8007424 <_strtod_l+0x49c>
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	ea03 0808 	and.w	r8, r3, r8
 80077b8:	e6e8      	b.n	800758c <_strtod_l+0x604>
 80077ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80077be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80077c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80077c6:	36e2      	adds	r6, #226	; 0xe2
 80077c8:	fa01 f306 	lsl.w	r3, r1, r6
 80077cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80077d0:	e748      	b.n	8007664 <_strtod_l+0x6dc>
 80077d2:	2100      	movs	r1, #0
 80077d4:	2301      	movs	r3, #1
 80077d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80077da:	e743      	b.n	8007664 <_strtod_l+0x6dc>
 80077dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077de:	4632      	mov	r2, r6
 80077e0:	4620      	mov	r0, r4
 80077e2:	f002 fdfb 	bl	800a3dc <__lshift>
 80077e6:	9016      	str	r0, [sp, #88]	; 0x58
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f47f af6b 	bne.w	80076c4 <_strtod_l+0x73c>
 80077ee:	e60f      	b.n	8007410 <_strtod_l+0x488>
 80077f0:	46ca      	mov	sl, r9
 80077f2:	d171      	bne.n	80078d8 <_strtod_l+0x950>
 80077f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077fa:	b352      	cbz	r2, 8007852 <_strtod_l+0x8ca>
 80077fc:	4a33      	ldr	r2, [pc, #204]	; (80078cc <_strtod_l+0x944>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d12a      	bne.n	8007858 <_strtod_l+0x8d0>
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	4641      	mov	r1, r8
 8007806:	b1fb      	cbz	r3, 8007848 <_strtod_l+0x8c0>
 8007808:	4b2e      	ldr	r3, [pc, #184]	; (80078c4 <_strtod_l+0x93c>)
 800780a:	ea09 0303 	and.w	r3, r9, r3
 800780e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	d81a      	bhi.n	800784e <_strtod_l+0x8c6>
 8007818:	0d1b      	lsrs	r3, r3, #20
 800781a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	4299      	cmp	r1, r3
 8007824:	d118      	bne.n	8007858 <_strtod_l+0x8d0>
 8007826:	4b2a      	ldr	r3, [pc, #168]	; (80078d0 <_strtod_l+0x948>)
 8007828:	459a      	cmp	sl, r3
 800782a:	d102      	bne.n	8007832 <_strtod_l+0x8aa>
 800782c:	3101      	adds	r1, #1
 800782e:	f43f adef 	beq.w	8007410 <_strtod_l+0x488>
 8007832:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <_strtod_l+0x93c>)
 8007834:	ea0a 0303 	and.w	r3, sl, r3
 8007838:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800783c:	f04f 0800 	mov.w	r8, #0
 8007840:	9b04      	ldr	r3, [sp, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1a2      	bne.n	800778c <_strtod_l+0x804>
 8007846:	e5ed      	b.n	8007424 <_strtod_l+0x49c>
 8007848:	f04f 33ff 	mov.w	r3, #4294967295
 800784c:	e7e9      	b.n	8007822 <_strtod_l+0x89a>
 800784e:	4613      	mov	r3, r2
 8007850:	e7e7      	b.n	8007822 <_strtod_l+0x89a>
 8007852:	ea53 0308 	orrs.w	r3, r3, r8
 8007856:	d08a      	beq.n	800776e <_strtod_l+0x7e6>
 8007858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800785a:	b1e3      	cbz	r3, 8007896 <_strtod_l+0x90e>
 800785c:	ea13 0f0a 	tst.w	r3, sl
 8007860:	d0ee      	beq.n	8007840 <_strtod_l+0x8b8>
 8007862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007864:	9a04      	ldr	r2, [sp, #16]
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	b1c3      	cbz	r3, 800789e <_strtod_l+0x916>
 800786c:	f7ff fb6d 	bl	8006f4a <sulp>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	ec51 0b18 	vmov	r0, r1, d8
 8007878:	f7f8 fd18 	bl	80002ac <__adddf3>
 800787c:	4680      	mov	r8, r0
 800787e:	4689      	mov	r9, r1
 8007880:	e7de      	b.n	8007840 <_strtod_l+0x8b8>
 8007882:	4013      	ands	r3, r2
 8007884:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007888:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800788c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007890:	f04f 38ff 	mov.w	r8, #4294967295
 8007894:	e7d4      	b.n	8007840 <_strtod_l+0x8b8>
 8007896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007898:	ea13 0f08 	tst.w	r3, r8
 800789c:	e7e0      	b.n	8007860 <_strtod_l+0x8d8>
 800789e:	f7ff fb54 	bl	8006f4a <sulp>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	ec51 0b18 	vmov	r0, r1, d8
 80078aa:	f7f8 fcfd 	bl	80002a8 <__aeabi_dsub>
 80078ae:	2200      	movs	r2, #0
 80078b0:	2300      	movs	r3, #0
 80078b2:	4680      	mov	r8, r0
 80078b4:	4689      	mov	r9, r1
 80078b6:	f7f9 f917 	bl	8000ae8 <__aeabi_dcmpeq>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0c0      	beq.n	8007840 <_strtod_l+0x8b8>
 80078be:	e618      	b.n	80074f2 <_strtod_l+0x56a>
 80078c0:	fffffc02 	.word	0xfffffc02
 80078c4:	7ff00000 	.word	0x7ff00000
 80078c8:	39500000 	.word	0x39500000
 80078cc:	000fffff 	.word	0x000fffff
 80078d0:	7fefffff 	.word	0x7fefffff
 80078d4:	0800e110 	.word	0x0800e110
 80078d8:	4659      	mov	r1, fp
 80078da:	4628      	mov	r0, r5
 80078dc:	f002 ff5a 	bl	800a794 <__ratio>
 80078e0:	ec57 6b10 	vmov	r6, r7, d0
 80078e4:	ee10 0a10 	vmov	r0, s0
 80078e8:	2200      	movs	r2, #0
 80078ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078ee:	4639      	mov	r1, r7
 80078f0:	f7f9 f90e 	bl	8000b10 <__aeabi_dcmple>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d071      	beq.n	80079dc <_strtod_l+0xa54>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d17c      	bne.n	80079f8 <_strtod_l+0xa70>
 80078fe:	f1b8 0f00 	cmp.w	r8, #0
 8007902:	d15a      	bne.n	80079ba <_strtod_l+0xa32>
 8007904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007908:	2b00      	cmp	r3, #0
 800790a:	d15d      	bne.n	80079c8 <_strtod_l+0xa40>
 800790c:	4b90      	ldr	r3, [pc, #576]	; (8007b50 <_strtod_l+0xbc8>)
 800790e:	2200      	movs	r2, #0
 8007910:	4630      	mov	r0, r6
 8007912:	4639      	mov	r1, r7
 8007914:	f7f9 f8f2 	bl	8000afc <__aeabi_dcmplt>
 8007918:	2800      	cmp	r0, #0
 800791a:	d15c      	bne.n	80079d6 <_strtod_l+0xa4e>
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	4b8c      	ldr	r3, [pc, #560]	; (8007b54 <_strtod_l+0xbcc>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f8 fe78 	bl	8000618 <__aeabi_dmul>
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007930:	9606      	str	r6, [sp, #24]
 8007932:	9307      	str	r3, [sp, #28]
 8007934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007938:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800793c:	4b86      	ldr	r3, [pc, #536]	; (8007b58 <_strtod_l+0xbd0>)
 800793e:	ea0a 0303 	and.w	r3, sl, r3
 8007942:	930d      	str	r3, [sp, #52]	; 0x34
 8007944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007946:	4b85      	ldr	r3, [pc, #532]	; (8007b5c <_strtod_l+0xbd4>)
 8007948:	429a      	cmp	r2, r3
 800794a:	f040 8090 	bne.w	8007a6e <_strtod_l+0xae6>
 800794e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007952:	ec49 8b10 	vmov	d0, r8, r9
 8007956:	f002 fe53 	bl	800a600 <__ulp>
 800795a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800795e:	ec51 0b10 	vmov	r0, r1, d0
 8007962:	f7f8 fe59 	bl	8000618 <__aeabi_dmul>
 8007966:	4642      	mov	r2, r8
 8007968:	464b      	mov	r3, r9
 800796a:	f7f8 fc9f 	bl	80002ac <__adddf3>
 800796e:	460b      	mov	r3, r1
 8007970:	4979      	ldr	r1, [pc, #484]	; (8007b58 <_strtod_l+0xbd0>)
 8007972:	4a7b      	ldr	r2, [pc, #492]	; (8007b60 <_strtod_l+0xbd8>)
 8007974:	4019      	ands	r1, r3
 8007976:	4291      	cmp	r1, r2
 8007978:	4680      	mov	r8, r0
 800797a:	d944      	bls.n	8007a06 <_strtod_l+0xa7e>
 800797c:	ee18 2a90 	vmov	r2, s17
 8007980:	4b78      	ldr	r3, [pc, #480]	; (8007b64 <_strtod_l+0xbdc>)
 8007982:	429a      	cmp	r2, r3
 8007984:	d104      	bne.n	8007990 <_strtod_l+0xa08>
 8007986:	ee18 3a10 	vmov	r3, s16
 800798a:	3301      	adds	r3, #1
 800798c:	f43f ad40 	beq.w	8007410 <_strtod_l+0x488>
 8007990:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007b64 <_strtod_l+0xbdc>
 8007994:	f04f 38ff 	mov.w	r8, #4294967295
 8007998:	9916      	ldr	r1, [sp, #88]	; 0x58
 800799a:	4620      	mov	r0, r4
 800799c:	f002 fb04 	bl	8009fa8 <_Bfree>
 80079a0:	9905      	ldr	r1, [sp, #20]
 80079a2:	4620      	mov	r0, r4
 80079a4:	f002 fb00 	bl	8009fa8 <_Bfree>
 80079a8:	4659      	mov	r1, fp
 80079aa:	4620      	mov	r0, r4
 80079ac:	f002 fafc 	bl	8009fa8 <_Bfree>
 80079b0:	4629      	mov	r1, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	f002 faf8 	bl	8009fa8 <_Bfree>
 80079b8:	e609      	b.n	80075ce <_strtod_l+0x646>
 80079ba:	f1b8 0f01 	cmp.w	r8, #1
 80079be:	d103      	bne.n	80079c8 <_strtod_l+0xa40>
 80079c0:	f1b9 0f00 	cmp.w	r9, #0
 80079c4:	f43f ad95 	beq.w	80074f2 <_strtod_l+0x56a>
 80079c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007b20 <_strtod_l+0xb98>
 80079cc:	4f60      	ldr	r7, [pc, #384]	; (8007b50 <_strtod_l+0xbc8>)
 80079ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80079d2:	2600      	movs	r6, #0
 80079d4:	e7ae      	b.n	8007934 <_strtod_l+0x9ac>
 80079d6:	4f5f      	ldr	r7, [pc, #380]	; (8007b54 <_strtod_l+0xbcc>)
 80079d8:	2600      	movs	r6, #0
 80079da:	e7a7      	b.n	800792c <_strtod_l+0x9a4>
 80079dc:	4b5d      	ldr	r3, [pc, #372]	; (8007b54 <_strtod_l+0xbcc>)
 80079de:	4630      	mov	r0, r6
 80079e0:	4639      	mov	r1, r7
 80079e2:	2200      	movs	r2, #0
 80079e4:	f7f8 fe18 	bl	8000618 <__aeabi_dmul>
 80079e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d09c      	beq.n	800792c <_strtod_l+0x9a4>
 80079f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80079f6:	e79d      	b.n	8007934 <_strtod_l+0x9ac>
 80079f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007b28 <_strtod_l+0xba0>
 80079fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a00:	ec57 6b17 	vmov	r6, r7, d7
 8007a04:	e796      	b.n	8007934 <_strtod_l+0x9ac>
 8007a06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	46ca      	mov	sl, r9
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1c2      	bne.n	8007998 <_strtod_l+0xa10>
 8007a12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a18:	0d1b      	lsrs	r3, r3, #20
 8007a1a:	051b      	lsls	r3, r3, #20
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d1bb      	bne.n	8007998 <_strtod_l+0xa10>
 8007a20:	4630      	mov	r0, r6
 8007a22:	4639      	mov	r1, r7
 8007a24:	f7f9 f958 	bl	8000cd8 <__aeabi_d2lz>
 8007a28:	f7f8 fdc8 	bl	80005bc <__aeabi_l2d>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 fc38 	bl	80002a8 <__aeabi_dsub>
 8007a38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a3e:	ea43 0308 	orr.w	r3, r3, r8
 8007a42:	4313      	orrs	r3, r2
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	d054      	beq.n	8007af4 <_strtod_l+0xb6c>
 8007a4a:	a339      	add	r3, pc, #228	; (adr r3, 8007b30 <_strtod_l+0xba8>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7f9 f854 	bl	8000afc <__aeabi_dcmplt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f47f ace5 	bne.w	8007424 <_strtod_l+0x49c>
 8007a5a:	a337      	add	r3, pc, #220	; (adr r3, 8007b38 <_strtod_l+0xbb0>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f9 f868 	bl	8000b38 <__aeabi_dcmpgt>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d095      	beq.n	8007998 <_strtod_l+0xa10>
 8007a6c:	e4da      	b.n	8007424 <_strtod_l+0x49c>
 8007a6e:	9b04      	ldr	r3, [sp, #16]
 8007a70:	b333      	cbz	r3, 8007ac0 <_strtod_l+0xb38>
 8007a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a78:	d822      	bhi.n	8007ac0 <_strtod_l+0xb38>
 8007a7a:	a331      	add	r3, pc, #196	; (adr r3, 8007b40 <_strtod_l+0xbb8>)
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f9 f844 	bl	8000b10 <__aeabi_dcmple>
 8007a88:	b1a0      	cbz	r0, 8007ab4 <_strtod_l+0xb2c>
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7f9 f89b 	bl	8000bc8 <__aeabi_d2uiz>
 8007a92:	2801      	cmp	r0, #1
 8007a94:	bf38      	it	cc
 8007a96:	2001      	movcc	r0, #1
 8007a98:	f7f8 fd44 	bl	8000524 <__aeabi_ui2d>
 8007a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	bb23      	cbnz	r3, 8007aee <_strtod_l+0xb66>
 8007aa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aa8:	9010      	str	r0, [sp, #64]	; 0x40
 8007aaa:	9311      	str	r3, [sp, #68]	; 0x44
 8007aac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ab0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ab8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ac8:	eef0 0a68 	vmov.f32	s1, s17
 8007acc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007ad0:	f002 fd96 	bl	800a600 <__ulp>
 8007ad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007ad8:	ec53 2b10 	vmov	r2, r3, d0
 8007adc:	f7f8 fd9c 	bl	8000618 <__aeabi_dmul>
 8007ae0:	ec53 2b18 	vmov	r2, r3, d8
 8007ae4:	f7f8 fbe2 	bl	80002ac <__adddf3>
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4689      	mov	r9, r1
 8007aec:	e78d      	b.n	8007a0a <_strtod_l+0xa82>
 8007aee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007af2:	e7db      	b.n	8007aac <_strtod_l+0xb24>
 8007af4:	a314      	add	r3, pc, #80	; (adr r3, 8007b48 <_strtod_l+0xbc0>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f8 ffff 	bl	8000afc <__aeabi_dcmplt>
 8007afe:	e7b3      	b.n	8007a68 <_strtod_l+0xae0>
 8007b00:	2300      	movs	r3, #0
 8007b02:	930a      	str	r3, [sp, #40]	; 0x28
 8007b04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	f7ff ba7c 	b.w	8007006 <_strtod_l+0x7e>
 8007b0e:	2a65      	cmp	r2, #101	; 0x65
 8007b10:	f43f ab75 	beq.w	80071fe <_strtod_l+0x276>
 8007b14:	2a45      	cmp	r2, #69	; 0x45
 8007b16:	f43f ab72 	beq.w	80071fe <_strtod_l+0x276>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f7ff bbaa 	b.w	8007274 <_strtod_l+0x2ec>
 8007b20:	00000000 	.word	0x00000000
 8007b24:	bff00000 	.word	0xbff00000
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	94a03595 	.word	0x94a03595
 8007b34:	3fdfffff 	.word	0x3fdfffff
 8007b38:	35afe535 	.word	0x35afe535
 8007b3c:	3fe00000 	.word	0x3fe00000
 8007b40:	ffc00000 	.word	0xffc00000
 8007b44:	41dfffff 	.word	0x41dfffff
 8007b48:	94a03595 	.word	0x94a03595
 8007b4c:	3fcfffff 	.word	0x3fcfffff
 8007b50:	3ff00000 	.word	0x3ff00000
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	7ff00000 	.word	0x7ff00000
 8007b5c:	7fe00000 	.word	0x7fe00000
 8007b60:	7c9fffff 	.word	0x7c9fffff
 8007b64:	7fefffff 	.word	0x7fefffff

08007b68 <strtod>:
 8007b68:	460a      	mov	r2, r1
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	4802      	ldr	r0, [pc, #8]	; (8007b78 <strtod+0x10>)
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <strtod+0x14>)
 8007b70:	6800      	ldr	r0, [r0, #0]
 8007b72:	f7ff ba09 	b.w	8006f88 <_strtod_l>
 8007b76:	bf00      	nop
 8007b78:	200001f4 	.word	0x200001f4
 8007b7c:	2000003c 	.word	0x2000003c

08007b80 <__utoa>:
 8007b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b82:	4c1f      	ldr	r4, [pc, #124]	; (8007c00 <__utoa+0x80>)
 8007b84:	b08b      	sub	sp, #44	; 0x2c
 8007b86:	4605      	mov	r5, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	466e      	mov	r6, sp
 8007b8c:	f104 0c20 	add.w	ip, r4, #32
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	6861      	ldr	r1, [r4, #4]
 8007b94:	4637      	mov	r7, r6
 8007b96:	c703      	stmia	r7!, {r0, r1}
 8007b98:	3408      	adds	r4, #8
 8007b9a:	4564      	cmp	r4, ip
 8007b9c:	463e      	mov	r6, r7
 8007b9e:	d1f7      	bne.n	8007b90 <__utoa+0x10>
 8007ba0:	7921      	ldrb	r1, [r4, #4]
 8007ba2:	7139      	strb	r1, [r7, #4]
 8007ba4:	1e91      	subs	r1, r2, #2
 8007ba6:	6820      	ldr	r0, [r4, #0]
 8007ba8:	6038      	str	r0, [r7, #0]
 8007baa:	2922      	cmp	r1, #34	; 0x22
 8007bac:	f04f 0100 	mov.w	r1, #0
 8007bb0:	d904      	bls.n	8007bbc <__utoa+0x3c>
 8007bb2:	7019      	strb	r1, [r3, #0]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	b00b      	add	sp, #44	; 0x2c
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbc:	1e58      	subs	r0, r3, #1
 8007bbe:	4684      	mov	ip, r0
 8007bc0:	fbb5 f7f2 	udiv	r7, r5, r2
 8007bc4:	fb02 5617 	mls	r6, r2, r7, r5
 8007bc8:	3628      	adds	r6, #40	; 0x28
 8007bca:	446e      	add	r6, sp
 8007bcc:	460c      	mov	r4, r1
 8007bce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007bd2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007bd6:	462e      	mov	r6, r5
 8007bd8:	42b2      	cmp	r2, r6
 8007bda:	f101 0101 	add.w	r1, r1, #1
 8007bde:	463d      	mov	r5, r7
 8007be0:	d9ee      	bls.n	8007bc0 <__utoa+0x40>
 8007be2:	2200      	movs	r2, #0
 8007be4:	545a      	strb	r2, [r3, r1]
 8007be6:	1919      	adds	r1, r3, r4
 8007be8:	1aa5      	subs	r5, r4, r2
 8007bea:	42aa      	cmp	r2, r5
 8007bec:	dae3      	bge.n	8007bb6 <__utoa+0x36>
 8007bee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007bf2:	780e      	ldrb	r6, [r1, #0]
 8007bf4:	7006      	strb	r6, [r0, #0]
 8007bf6:	3201      	adds	r2, #1
 8007bf8:	f801 5901 	strb.w	r5, [r1], #-1
 8007bfc:	e7f4      	b.n	8007be8 <__utoa+0x68>
 8007bfe:	bf00      	nop
 8007c00:	0800e138 	.word	0x0800e138

08007c04 <__cvt>:
 8007c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	ec55 4b10 	vmov	r4, r5, d0
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	460e      	mov	r6, r1
 8007c10:	4619      	mov	r1, r3
 8007c12:	462b      	mov	r3, r5
 8007c14:	bfbb      	ittet	lt
 8007c16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c1a:	461d      	movlt	r5, r3
 8007c1c:	2300      	movge	r3, #0
 8007c1e:	232d      	movlt	r3, #45	; 0x2d
 8007c20:	700b      	strb	r3, [r1, #0]
 8007c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c28:	4691      	mov	r9, r2
 8007c2a:	f023 0820 	bic.w	r8, r3, #32
 8007c2e:	bfbc      	itt	lt
 8007c30:	4622      	movlt	r2, r4
 8007c32:	4614      	movlt	r4, r2
 8007c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c38:	d005      	beq.n	8007c46 <__cvt+0x42>
 8007c3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c3e:	d100      	bne.n	8007c42 <__cvt+0x3e>
 8007c40:	3601      	adds	r6, #1
 8007c42:	2102      	movs	r1, #2
 8007c44:	e000      	b.n	8007c48 <__cvt+0x44>
 8007c46:	2103      	movs	r1, #3
 8007c48:	ab03      	add	r3, sp, #12
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	ab02      	add	r3, sp, #8
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	ec45 4b10 	vmov	d0, r4, r5
 8007c54:	4653      	mov	r3, sl
 8007c56:	4632      	mov	r2, r6
 8007c58:	f000 ff0a 	bl	8008a70 <_dtoa_r>
 8007c5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c60:	4607      	mov	r7, r0
 8007c62:	d102      	bne.n	8007c6a <__cvt+0x66>
 8007c64:	f019 0f01 	tst.w	r9, #1
 8007c68:	d022      	beq.n	8007cb0 <__cvt+0xac>
 8007c6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c6e:	eb07 0906 	add.w	r9, r7, r6
 8007c72:	d110      	bne.n	8007c96 <__cvt+0x92>
 8007c74:	783b      	ldrb	r3, [r7, #0]
 8007c76:	2b30      	cmp	r3, #48	; 0x30
 8007c78:	d10a      	bne.n	8007c90 <__cvt+0x8c>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4629      	mov	r1, r5
 8007c82:	f7f8 ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c86:	b918      	cbnz	r0, 8007c90 <__cvt+0x8c>
 8007c88:	f1c6 0601 	rsb	r6, r6, #1
 8007c8c:	f8ca 6000 	str.w	r6, [sl]
 8007c90:	f8da 3000 	ldr.w	r3, [sl]
 8007c94:	4499      	add	r9, r3
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ca2:	b108      	cbz	r0, 8007ca8 <__cvt+0xa4>
 8007ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ca8:	2230      	movs	r2, #48	; 0x30
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	454b      	cmp	r3, r9
 8007cae:	d307      	bcc.n	8007cc0 <__cvt+0xbc>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cb4:	1bdb      	subs	r3, r3, r7
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	b004      	add	sp, #16
 8007cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc0:	1c59      	adds	r1, r3, #1
 8007cc2:	9103      	str	r1, [sp, #12]
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e7f0      	b.n	8007caa <__cvt+0xa6>

08007cc8 <__exponent>:
 8007cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	bfb8      	it	lt
 8007cd0:	4249      	neglt	r1, r1
 8007cd2:	f803 2b02 	strb.w	r2, [r3], #2
 8007cd6:	bfb4      	ite	lt
 8007cd8:	222d      	movlt	r2, #45	; 0x2d
 8007cda:	222b      	movge	r2, #43	; 0x2b
 8007cdc:	2909      	cmp	r1, #9
 8007cde:	7042      	strb	r2, [r0, #1]
 8007ce0:	dd2a      	ble.n	8007d38 <__exponent+0x70>
 8007ce2:	f10d 0207 	add.w	r2, sp, #7
 8007ce6:	4617      	mov	r7, r2
 8007ce8:	260a      	movs	r6, #10
 8007cea:	4694      	mov	ip, r2
 8007cec:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cf0:	fb06 1415 	mls	r4, r6, r5, r1
 8007cf4:	3430      	adds	r4, #48	; 0x30
 8007cf6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	2c63      	cmp	r4, #99	; 0x63
 8007cfe:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d02:	4629      	mov	r1, r5
 8007d04:	dcf1      	bgt.n	8007cea <__exponent+0x22>
 8007d06:	3130      	adds	r1, #48	; 0x30
 8007d08:	f1ac 0402 	sub.w	r4, ip, #2
 8007d0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d10:	1c41      	adds	r1, r0, #1
 8007d12:	4622      	mov	r2, r4
 8007d14:	42ba      	cmp	r2, r7
 8007d16:	d30a      	bcc.n	8007d2e <__exponent+0x66>
 8007d18:	f10d 0209 	add.w	r2, sp, #9
 8007d1c:	eba2 020c 	sub.w	r2, r2, ip
 8007d20:	42bc      	cmp	r4, r7
 8007d22:	bf88      	it	hi
 8007d24:	2200      	movhi	r2, #0
 8007d26:	4413      	add	r3, r2
 8007d28:	1a18      	subs	r0, r3, r0
 8007d2a:	b003      	add	sp, #12
 8007d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d36:	e7ed      	b.n	8007d14 <__exponent+0x4c>
 8007d38:	2330      	movs	r3, #48	; 0x30
 8007d3a:	3130      	adds	r1, #48	; 0x30
 8007d3c:	7083      	strb	r3, [r0, #2]
 8007d3e:	70c1      	strb	r1, [r0, #3]
 8007d40:	1d03      	adds	r3, r0, #4
 8007d42:	e7f1      	b.n	8007d28 <__exponent+0x60>

08007d44 <_printf_float>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	ed2d 8b02 	vpush	{d8}
 8007d4c:	b08d      	sub	sp, #52	; 0x34
 8007d4e:	460c      	mov	r4, r1
 8007d50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d54:	4616      	mov	r6, r2
 8007d56:	461f      	mov	r7, r3
 8007d58:	4605      	mov	r5, r0
 8007d5a:	f000 fd55 	bl	8008808 <_localeconv_r>
 8007d5e:	f8d0 a000 	ldr.w	sl, [r0]
 8007d62:	4650      	mov	r0, sl
 8007d64:	f7f8 fa94 	bl	8000290 <strlen>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	9305      	str	r3, [sp, #20]
 8007d70:	f8d8 3000 	ldr.w	r3, [r8]
 8007d74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d78:	3307      	adds	r3, #7
 8007d7a:	f023 0307 	bic.w	r3, r3, #7
 8007d7e:	f103 0208 	add.w	r2, r3, #8
 8007d82:	f8c8 2000 	str.w	r2, [r8]
 8007d86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d94:	ee08 0a10 	vmov	s16, r0
 8007d98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da0:	4b9e      	ldr	r3, [pc, #632]	; (800801c <_printf_float+0x2d8>)
 8007da2:	f04f 32ff 	mov.w	r2, #4294967295
 8007da6:	f7f8 fed1 	bl	8000b4c <__aeabi_dcmpun>
 8007daa:	bb88      	cbnz	r0, 8007e10 <_printf_float+0xcc>
 8007dac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db0:	4b9a      	ldr	r3, [pc, #616]	; (800801c <_printf_float+0x2d8>)
 8007db2:	f04f 32ff 	mov.w	r2, #4294967295
 8007db6:	f7f8 feab 	bl	8000b10 <__aeabi_dcmple>
 8007dba:	bb48      	cbnz	r0, 8007e10 <_printf_float+0xcc>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 fe9a 	bl	8000afc <__aeabi_dcmplt>
 8007dc8:	b110      	cbz	r0, 8007dd0 <_printf_float+0x8c>
 8007dca:	232d      	movs	r3, #45	; 0x2d
 8007dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd0:	4a93      	ldr	r2, [pc, #588]	; (8008020 <_printf_float+0x2dc>)
 8007dd2:	4b94      	ldr	r3, [pc, #592]	; (8008024 <_printf_float+0x2e0>)
 8007dd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dd8:	bf94      	ite	ls
 8007dda:	4690      	movls	r8, r2
 8007ddc:	4698      	movhi	r8, r3
 8007dde:	2303      	movs	r3, #3
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	f04f 0900 	mov.w	r9, #0
 8007dee:	9700      	str	r7, [sp, #0]
 8007df0:	4633      	mov	r3, r6
 8007df2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007df4:	4621      	mov	r1, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 f9da 	bl	80081b0 <_printf_common>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f040 8090 	bne.w	8007f22 <_printf_float+0x1de>
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295
 8007e06:	b00d      	add	sp, #52	; 0x34
 8007e08:	ecbd 8b02 	vpop	{d8}
 8007e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fe98 	bl	8000b4c <__aeabi_dcmpun>
 8007e1c:	b140      	cbz	r0, 8007e30 <_printf_float+0xec>
 8007e1e:	464b      	mov	r3, r9
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfbc      	itt	lt
 8007e24:	232d      	movlt	r3, #45	; 0x2d
 8007e26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e2a:	4a7f      	ldr	r2, [pc, #508]	; (8008028 <_printf_float+0x2e4>)
 8007e2c:	4b7f      	ldr	r3, [pc, #508]	; (800802c <_printf_float+0x2e8>)
 8007e2e:	e7d1      	b.n	8007dd4 <_printf_float+0x90>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e36:	9206      	str	r2, [sp, #24]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	d13f      	bne.n	8007ebc <_printf_float+0x178>
 8007e3c:	2306      	movs	r3, #6
 8007e3e:	6063      	str	r3, [r4, #4]
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	6861      	ldr	r1, [r4, #4]
 8007e44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9303      	str	r3, [sp, #12]
 8007e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8007e4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e52:	ab09      	add	r3, sp, #36	; 0x24
 8007e54:	ec49 8b10 	vmov	d0, r8, r9
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	6022      	str	r2, [r4, #0]
 8007e5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e60:	4628      	mov	r0, r5
 8007e62:	f7ff fecf 	bl	8007c04 <__cvt>
 8007e66:	9b06      	ldr	r3, [sp, #24]
 8007e68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e6a:	2b47      	cmp	r3, #71	; 0x47
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	d108      	bne.n	8007e82 <_printf_float+0x13e>
 8007e70:	1cc8      	adds	r0, r1, #3
 8007e72:	db02      	blt.n	8007e7a <_printf_float+0x136>
 8007e74:	6863      	ldr	r3, [r4, #4]
 8007e76:	4299      	cmp	r1, r3
 8007e78:	dd41      	ble.n	8007efe <_printf_float+0x1ba>
 8007e7a:	f1ab 0302 	sub.w	r3, fp, #2
 8007e7e:	fa5f fb83 	uxtb.w	fp, r3
 8007e82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e86:	d820      	bhi.n	8007eca <_printf_float+0x186>
 8007e88:	3901      	subs	r1, #1
 8007e8a:	465a      	mov	r2, fp
 8007e8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e90:	9109      	str	r1, [sp, #36]	; 0x24
 8007e92:	f7ff ff19 	bl	8007cc8 <__exponent>
 8007e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e98:	1813      	adds	r3, r2, r0
 8007e9a:	2a01      	cmp	r2, #1
 8007e9c:	4681      	mov	r9, r0
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	dc02      	bgt.n	8007ea8 <_printf_float+0x164>
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	07d2      	lsls	r2, r2, #31
 8007ea6:	d501      	bpl.n	8007eac <_printf_float+0x168>
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d09c      	beq.n	8007dee <_printf_float+0xaa>
 8007eb4:	232d      	movs	r3, #45	; 0x2d
 8007eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eba:	e798      	b.n	8007dee <_printf_float+0xaa>
 8007ebc:	9a06      	ldr	r2, [sp, #24]
 8007ebe:	2a47      	cmp	r2, #71	; 0x47
 8007ec0:	d1be      	bne.n	8007e40 <_printf_float+0xfc>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1bc      	bne.n	8007e40 <_printf_float+0xfc>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7b9      	b.n	8007e3e <_printf_float+0xfa>
 8007eca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ece:	d118      	bne.n	8007f02 <_printf_float+0x1be>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	dd0b      	ble.n	8007eee <_printf_float+0x1aa>
 8007ed6:	6121      	str	r1, [r4, #16]
 8007ed8:	b913      	cbnz	r3, 8007ee0 <_printf_float+0x19c>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	07d0      	lsls	r0, r2, #31
 8007ede:	d502      	bpl.n	8007ee6 <_printf_float+0x1a2>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	440b      	add	r3, r1
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ee8:	f04f 0900 	mov.w	r9, #0
 8007eec:	e7de      	b.n	8007eac <_printf_float+0x168>
 8007eee:	b913      	cbnz	r3, 8007ef6 <_printf_float+0x1b2>
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	07d2      	lsls	r2, r2, #31
 8007ef4:	d501      	bpl.n	8007efa <_printf_float+0x1b6>
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	e7f4      	b.n	8007ee4 <_printf_float+0x1a0>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7f2      	b.n	8007ee4 <_printf_float+0x1a0>
 8007efe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f04:	4299      	cmp	r1, r3
 8007f06:	db05      	blt.n	8007f14 <_printf_float+0x1d0>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	6121      	str	r1, [r4, #16]
 8007f0c:	07d8      	lsls	r0, r3, #31
 8007f0e:	d5ea      	bpl.n	8007ee6 <_printf_float+0x1a2>
 8007f10:	1c4b      	adds	r3, r1, #1
 8007f12:	e7e7      	b.n	8007ee4 <_printf_float+0x1a0>
 8007f14:	2900      	cmp	r1, #0
 8007f16:	bfd4      	ite	le
 8007f18:	f1c1 0202 	rsble	r2, r1, #2
 8007f1c:	2201      	movgt	r2, #1
 8007f1e:	4413      	add	r3, r2
 8007f20:	e7e0      	b.n	8007ee4 <_printf_float+0x1a0>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	055a      	lsls	r2, r3, #21
 8007f26:	d407      	bmi.n	8007f38 <_printf_float+0x1f4>
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	d12c      	bne.n	8007f90 <_printf_float+0x24c>
 8007f36:	e764      	b.n	8007e02 <_printf_float+0xbe>
 8007f38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f3c:	f240 80e0 	bls.w	8008100 <_printf_float+0x3bc>
 8007f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f44:	2200      	movs	r2, #0
 8007f46:	2300      	movs	r3, #0
 8007f48:	f7f8 fdce 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d034      	beq.n	8007fba <_printf_float+0x276>
 8007f50:	4a37      	ldr	r2, [pc, #220]	; (8008030 <_printf_float+0x2ec>)
 8007f52:	2301      	movs	r3, #1
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f af51 	beq.w	8007e02 <_printf_float+0xbe>
 8007f60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f64:	429a      	cmp	r2, r3
 8007f66:	db02      	blt.n	8007f6e <_printf_float+0x22a>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	07d8      	lsls	r0, r3, #31
 8007f6c:	d510      	bpl.n	8007f90 <_printf_float+0x24c>
 8007f6e:	ee18 3a10 	vmov	r3, s16
 8007f72:	4652      	mov	r2, sl
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b8      	blx	r7
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f43f af41 	beq.w	8007e02 <_printf_float+0xbe>
 8007f80:	f04f 0800 	mov.w	r8, #0
 8007f84:	f104 091a 	add.w	r9, r4, #26
 8007f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4543      	cmp	r3, r8
 8007f8e:	dc09      	bgt.n	8007fa4 <_printf_float+0x260>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	079b      	lsls	r3, r3, #30
 8007f94:	f100 8107 	bmi.w	80081a6 <_printf_float+0x462>
 8007f98:	68e0      	ldr	r0, [r4, #12]
 8007f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f9c:	4298      	cmp	r0, r3
 8007f9e:	bfb8      	it	lt
 8007fa0:	4618      	movlt	r0, r3
 8007fa2:	e730      	b.n	8007e06 <_printf_float+0xc2>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	464a      	mov	r2, r9
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f af27 	beq.w	8007e02 <_printf_float+0xbe>
 8007fb4:	f108 0801 	add.w	r8, r8, #1
 8007fb8:	e7e6      	b.n	8007f88 <_printf_float+0x244>
 8007fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc39      	bgt.n	8008034 <_printf_float+0x2f0>
 8007fc0:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <_printf_float+0x2ec>)
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f af19 	beq.w	8007e02 <_printf_float+0xbe>
 8007fd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	d102      	bne.n	8007fde <_printf_float+0x29a>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	07d9      	lsls	r1, r3, #31
 8007fdc:	d5d8      	bpl.n	8007f90 <_printf_float+0x24c>
 8007fde:	ee18 3a10 	vmov	r3, s16
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	47b8      	blx	r7
 8007fea:	3001      	adds	r0, #1
 8007fec:	f43f af09 	beq.w	8007e02 <_printf_float+0xbe>
 8007ff0:	f04f 0900 	mov.w	r9, #0
 8007ff4:	f104 0a1a 	add.w	sl, r4, #26
 8007ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffa:	425b      	negs	r3, r3
 8007ffc:	454b      	cmp	r3, r9
 8007ffe:	dc01      	bgt.n	8008004 <_printf_float+0x2c0>
 8008000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008002:	e792      	b.n	8007f2a <_printf_float+0x1e6>
 8008004:	2301      	movs	r3, #1
 8008006:	4652      	mov	r2, sl
 8008008:	4631      	mov	r1, r6
 800800a:	4628      	mov	r0, r5
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f aef7 	beq.w	8007e02 <_printf_float+0xbe>
 8008014:	f109 0901 	add.w	r9, r9, #1
 8008018:	e7ee      	b.n	8007ff8 <_printf_float+0x2b4>
 800801a:	bf00      	nop
 800801c:	7fefffff 	.word	0x7fefffff
 8008020:	0800e15d 	.word	0x0800e15d
 8008024:	0800e161 	.word	0x0800e161
 8008028:	0800e165 	.word	0x0800e165
 800802c:	0800e169 	.word	0x0800e169
 8008030:	0800e16d 	.word	0x0800e16d
 8008034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008038:	429a      	cmp	r2, r3
 800803a:	bfa8      	it	ge
 800803c:	461a      	movge	r2, r3
 800803e:	2a00      	cmp	r2, #0
 8008040:	4691      	mov	r9, r2
 8008042:	dc37      	bgt.n	80080b4 <_printf_float+0x370>
 8008044:	f04f 0b00 	mov.w	fp, #0
 8008048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800804c:	f104 021a 	add.w	r2, r4, #26
 8008050:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008052:	9305      	str	r3, [sp, #20]
 8008054:	eba3 0309 	sub.w	r3, r3, r9
 8008058:	455b      	cmp	r3, fp
 800805a:	dc33      	bgt.n	80080c4 <_printf_float+0x380>
 800805c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008060:	429a      	cmp	r2, r3
 8008062:	db3b      	blt.n	80080dc <_printf_float+0x398>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	07da      	lsls	r2, r3, #31
 8008068:	d438      	bmi.n	80080dc <_printf_float+0x398>
 800806a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800806e:	eba2 0903 	sub.w	r9, r2, r3
 8008072:	9b05      	ldr	r3, [sp, #20]
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	4591      	cmp	r9, r2
 8008078:	bfa8      	it	ge
 800807a:	4691      	movge	r9, r2
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	dc35      	bgt.n	80080ee <_printf_float+0x3aa>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800808a:	f104 0a1a 	add.w	sl, r4, #26
 800808e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	eba3 0309 	sub.w	r3, r3, r9
 8008098:	4543      	cmp	r3, r8
 800809a:	f77f af79 	ble.w	8007f90 <_printf_float+0x24c>
 800809e:	2301      	movs	r3, #1
 80080a0:	4652      	mov	r2, sl
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	f43f aeaa 	beq.w	8007e02 <_printf_float+0xbe>
 80080ae:	f108 0801 	add.w	r8, r8, #1
 80080b2:	e7ec      	b.n	800808e <_printf_float+0x34a>
 80080b4:	4613      	mov	r3, r2
 80080b6:	4631      	mov	r1, r6
 80080b8:	4642      	mov	r2, r8
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	d1c0      	bne.n	8008044 <_printf_float+0x300>
 80080c2:	e69e      	b.n	8007e02 <_printf_float+0xbe>
 80080c4:	2301      	movs	r3, #1
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	9205      	str	r2, [sp, #20]
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f ae97 	beq.w	8007e02 <_printf_float+0xbe>
 80080d4:	9a05      	ldr	r2, [sp, #20]
 80080d6:	f10b 0b01 	add.w	fp, fp, #1
 80080da:	e7b9      	b.n	8008050 <_printf_float+0x30c>
 80080dc:	ee18 3a10 	vmov	r3, s16
 80080e0:	4652      	mov	r2, sl
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	d1be      	bne.n	800806a <_printf_float+0x326>
 80080ec:	e689      	b.n	8007e02 <_printf_float+0xbe>
 80080ee:	9a05      	ldr	r2, [sp, #20]
 80080f0:	464b      	mov	r3, r9
 80080f2:	4442      	add	r2, r8
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	d1c1      	bne.n	8008082 <_printf_float+0x33e>
 80080fe:	e680      	b.n	8007e02 <_printf_float+0xbe>
 8008100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008102:	2a01      	cmp	r2, #1
 8008104:	dc01      	bgt.n	800810a <_printf_float+0x3c6>
 8008106:	07db      	lsls	r3, r3, #31
 8008108:	d53a      	bpl.n	8008180 <_printf_float+0x43c>
 800810a:	2301      	movs	r3, #1
 800810c:	4642      	mov	r2, r8
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	f43f ae74 	beq.w	8007e02 <_printf_float+0xbe>
 800811a:	ee18 3a10 	vmov	r3, s16
 800811e:	4652      	mov	r2, sl
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f ae6b 	beq.w	8007e02 <_printf_float+0xbe>
 800812c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008130:	2200      	movs	r2, #0
 8008132:	2300      	movs	r3, #0
 8008134:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008138:	f7f8 fcd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800813c:	b9d8      	cbnz	r0, 8008176 <_printf_float+0x432>
 800813e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008142:	f108 0201 	add.w	r2, r8, #1
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	d10e      	bne.n	800816e <_printf_float+0x42a>
 8008150:	e657      	b.n	8007e02 <_printf_float+0xbe>
 8008152:	2301      	movs	r3, #1
 8008154:	4652      	mov	r2, sl
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f ae50 	beq.w	8007e02 <_printf_float+0xbe>
 8008162:	f108 0801 	add.w	r8, r8, #1
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	3b01      	subs	r3, #1
 800816a:	4543      	cmp	r3, r8
 800816c:	dcf1      	bgt.n	8008152 <_printf_float+0x40e>
 800816e:	464b      	mov	r3, r9
 8008170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008174:	e6da      	b.n	8007f2c <_printf_float+0x1e8>
 8008176:	f04f 0800 	mov.w	r8, #0
 800817a:	f104 0a1a 	add.w	sl, r4, #26
 800817e:	e7f2      	b.n	8008166 <_printf_float+0x422>
 8008180:	2301      	movs	r3, #1
 8008182:	4642      	mov	r2, r8
 8008184:	e7df      	b.n	8008146 <_printf_float+0x402>
 8008186:	2301      	movs	r3, #1
 8008188:	464a      	mov	r2, r9
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f ae36 	beq.w	8007e02 <_printf_float+0xbe>
 8008196:	f108 0801 	add.w	r8, r8, #1
 800819a:	68e3      	ldr	r3, [r4, #12]
 800819c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800819e:	1a5b      	subs	r3, r3, r1
 80081a0:	4543      	cmp	r3, r8
 80081a2:	dcf0      	bgt.n	8008186 <_printf_float+0x442>
 80081a4:	e6f8      	b.n	8007f98 <_printf_float+0x254>
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	f104 0919 	add.w	r9, r4, #25
 80081ae:	e7f4      	b.n	800819a <_printf_float+0x456>

080081b0 <_printf_common>:
 80081b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	4616      	mov	r6, r2
 80081b6:	4699      	mov	r9, r3
 80081b8:	688a      	ldr	r2, [r1, #8]
 80081ba:	690b      	ldr	r3, [r1, #16]
 80081bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081c0:	4293      	cmp	r3, r2
 80081c2:	bfb8      	it	lt
 80081c4:	4613      	movlt	r3, r2
 80081c6:	6033      	str	r3, [r6, #0]
 80081c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081cc:	4607      	mov	r7, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b10a      	cbz	r2, 80081d6 <_printf_common+0x26>
 80081d2:	3301      	adds	r3, #1
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	0699      	lsls	r1, r3, #26
 80081da:	bf42      	ittt	mi
 80081dc:	6833      	ldrmi	r3, [r6, #0]
 80081de:	3302      	addmi	r3, #2
 80081e0:	6033      	strmi	r3, [r6, #0]
 80081e2:	6825      	ldr	r5, [r4, #0]
 80081e4:	f015 0506 	ands.w	r5, r5, #6
 80081e8:	d106      	bne.n	80081f8 <_printf_common+0x48>
 80081ea:	f104 0a19 	add.w	sl, r4, #25
 80081ee:	68e3      	ldr	r3, [r4, #12]
 80081f0:	6832      	ldr	r2, [r6, #0]
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	42ab      	cmp	r3, r5
 80081f6:	dc26      	bgt.n	8008246 <_printf_common+0x96>
 80081f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081fc:	1e13      	subs	r3, r2, #0
 80081fe:	6822      	ldr	r2, [r4, #0]
 8008200:	bf18      	it	ne
 8008202:	2301      	movne	r3, #1
 8008204:	0692      	lsls	r2, r2, #26
 8008206:	d42b      	bmi.n	8008260 <_printf_common+0xb0>
 8008208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800820c:	4649      	mov	r1, r9
 800820e:	4638      	mov	r0, r7
 8008210:	47c0      	blx	r8
 8008212:	3001      	adds	r0, #1
 8008214:	d01e      	beq.n	8008254 <_printf_common+0xa4>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	6922      	ldr	r2, [r4, #16]
 800821a:	f003 0306 	and.w	r3, r3, #6
 800821e:	2b04      	cmp	r3, #4
 8008220:	bf02      	ittt	eq
 8008222:	68e5      	ldreq	r5, [r4, #12]
 8008224:	6833      	ldreq	r3, [r6, #0]
 8008226:	1aed      	subeq	r5, r5, r3
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	bf0c      	ite	eq
 800822c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008230:	2500      	movne	r5, #0
 8008232:	4293      	cmp	r3, r2
 8008234:	bfc4      	itt	gt
 8008236:	1a9b      	subgt	r3, r3, r2
 8008238:	18ed      	addgt	r5, r5, r3
 800823a:	2600      	movs	r6, #0
 800823c:	341a      	adds	r4, #26
 800823e:	42b5      	cmp	r5, r6
 8008240:	d11a      	bne.n	8008278 <_printf_common+0xc8>
 8008242:	2000      	movs	r0, #0
 8008244:	e008      	b.n	8008258 <_printf_common+0xa8>
 8008246:	2301      	movs	r3, #1
 8008248:	4652      	mov	r2, sl
 800824a:	4649      	mov	r1, r9
 800824c:	4638      	mov	r0, r7
 800824e:	47c0      	blx	r8
 8008250:	3001      	adds	r0, #1
 8008252:	d103      	bne.n	800825c <_printf_common+0xac>
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825c:	3501      	adds	r5, #1
 800825e:	e7c6      	b.n	80081ee <_printf_common+0x3e>
 8008260:	18e1      	adds	r1, r4, r3
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	2030      	movs	r0, #48	; 0x30
 8008266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800826a:	4422      	add	r2, r4
 800826c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008274:	3302      	adds	r3, #2
 8008276:	e7c7      	b.n	8008208 <_printf_common+0x58>
 8008278:	2301      	movs	r3, #1
 800827a:	4622      	mov	r2, r4
 800827c:	4649      	mov	r1, r9
 800827e:	4638      	mov	r0, r7
 8008280:	47c0      	blx	r8
 8008282:	3001      	adds	r0, #1
 8008284:	d0e6      	beq.n	8008254 <_printf_common+0xa4>
 8008286:	3601      	adds	r6, #1
 8008288:	e7d9      	b.n	800823e <_printf_common+0x8e>
	...

0800828c <_printf_i>:
 800828c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008290:	7e0f      	ldrb	r7, [r1, #24]
 8008292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008294:	2f78      	cmp	r7, #120	; 0x78
 8008296:	4691      	mov	r9, r2
 8008298:	4680      	mov	r8, r0
 800829a:	460c      	mov	r4, r1
 800829c:	469a      	mov	sl, r3
 800829e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082a2:	d807      	bhi.n	80082b4 <_printf_i+0x28>
 80082a4:	2f62      	cmp	r7, #98	; 0x62
 80082a6:	d80a      	bhi.n	80082be <_printf_i+0x32>
 80082a8:	2f00      	cmp	r7, #0
 80082aa:	f000 80d4 	beq.w	8008456 <_printf_i+0x1ca>
 80082ae:	2f58      	cmp	r7, #88	; 0x58
 80082b0:	f000 80c0 	beq.w	8008434 <_printf_i+0x1a8>
 80082b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082bc:	e03a      	b.n	8008334 <_printf_i+0xa8>
 80082be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082c2:	2b15      	cmp	r3, #21
 80082c4:	d8f6      	bhi.n	80082b4 <_printf_i+0x28>
 80082c6:	a101      	add	r1, pc, #4	; (adr r1, 80082cc <_printf_i+0x40>)
 80082c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082cc:	08008325 	.word	0x08008325
 80082d0:	08008339 	.word	0x08008339
 80082d4:	080082b5 	.word	0x080082b5
 80082d8:	080082b5 	.word	0x080082b5
 80082dc:	080082b5 	.word	0x080082b5
 80082e0:	080082b5 	.word	0x080082b5
 80082e4:	08008339 	.word	0x08008339
 80082e8:	080082b5 	.word	0x080082b5
 80082ec:	080082b5 	.word	0x080082b5
 80082f0:	080082b5 	.word	0x080082b5
 80082f4:	080082b5 	.word	0x080082b5
 80082f8:	0800843d 	.word	0x0800843d
 80082fc:	08008365 	.word	0x08008365
 8008300:	080083f7 	.word	0x080083f7
 8008304:	080082b5 	.word	0x080082b5
 8008308:	080082b5 	.word	0x080082b5
 800830c:	0800845f 	.word	0x0800845f
 8008310:	080082b5 	.word	0x080082b5
 8008314:	08008365 	.word	0x08008365
 8008318:	080082b5 	.word	0x080082b5
 800831c:	080082b5 	.word	0x080082b5
 8008320:	080083ff 	.word	0x080083ff
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	1d1a      	adds	r2, r3, #4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	602a      	str	r2, [r5, #0]
 800832c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008334:	2301      	movs	r3, #1
 8008336:	e09f      	b.n	8008478 <_printf_i+0x1ec>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	0607      	lsls	r7, r0, #24
 800833e:	f103 0104 	add.w	r1, r3, #4
 8008342:	6029      	str	r1, [r5, #0]
 8008344:	d501      	bpl.n	800834a <_printf_i+0xbe>
 8008346:	681e      	ldr	r6, [r3, #0]
 8008348:	e003      	b.n	8008352 <_printf_i+0xc6>
 800834a:	0646      	lsls	r6, r0, #25
 800834c:	d5fb      	bpl.n	8008346 <_printf_i+0xba>
 800834e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008352:	2e00      	cmp	r6, #0
 8008354:	da03      	bge.n	800835e <_printf_i+0xd2>
 8008356:	232d      	movs	r3, #45	; 0x2d
 8008358:	4276      	negs	r6, r6
 800835a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835e:	485a      	ldr	r0, [pc, #360]	; (80084c8 <_printf_i+0x23c>)
 8008360:	230a      	movs	r3, #10
 8008362:	e012      	b.n	800838a <_printf_i+0xfe>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	1d19      	adds	r1, r3, #4
 800836a:	6029      	str	r1, [r5, #0]
 800836c:	0605      	lsls	r5, r0, #24
 800836e:	d501      	bpl.n	8008374 <_printf_i+0xe8>
 8008370:	681e      	ldr	r6, [r3, #0]
 8008372:	e002      	b.n	800837a <_printf_i+0xee>
 8008374:	0641      	lsls	r1, r0, #25
 8008376:	d5fb      	bpl.n	8008370 <_printf_i+0xe4>
 8008378:	881e      	ldrh	r6, [r3, #0]
 800837a:	4853      	ldr	r0, [pc, #332]	; (80084c8 <_printf_i+0x23c>)
 800837c:	2f6f      	cmp	r7, #111	; 0x6f
 800837e:	bf0c      	ite	eq
 8008380:	2308      	moveq	r3, #8
 8008382:	230a      	movne	r3, #10
 8008384:	2100      	movs	r1, #0
 8008386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800838a:	6865      	ldr	r5, [r4, #4]
 800838c:	60a5      	str	r5, [r4, #8]
 800838e:	2d00      	cmp	r5, #0
 8008390:	bfa2      	ittt	ge
 8008392:	6821      	ldrge	r1, [r4, #0]
 8008394:	f021 0104 	bicge.w	r1, r1, #4
 8008398:	6021      	strge	r1, [r4, #0]
 800839a:	b90e      	cbnz	r6, 80083a0 <_printf_i+0x114>
 800839c:	2d00      	cmp	r5, #0
 800839e:	d04b      	beq.n	8008438 <_printf_i+0x1ac>
 80083a0:	4615      	mov	r5, r2
 80083a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80083a6:	fb03 6711 	mls	r7, r3, r1, r6
 80083aa:	5dc7      	ldrb	r7, [r0, r7]
 80083ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083b0:	4637      	mov	r7, r6
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	460e      	mov	r6, r1
 80083b6:	d9f4      	bls.n	80083a2 <_printf_i+0x116>
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <_printf_i+0x148>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07de      	lsls	r6, r3, #31
 80083c0:	d508      	bpl.n	80083d4 <_printf_i+0x148>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	bfde      	ittt	le
 80083ca:	2330      	movle	r3, #48	; 0x30
 80083cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083d4:	1b52      	subs	r2, r2, r5
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	f8cd a000 	str.w	sl, [sp]
 80083dc:	464b      	mov	r3, r9
 80083de:	aa03      	add	r2, sp, #12
 80083e0:	4621      	mov	r1, r4
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff fee4 	bl	80081b0 <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d14a      	bne.n	8008482 <_printf_i+0x1f6>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b004      	add	sp, #16
 80083f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	4833      	ldr	r0, [pc, #204]	; (80084cc <_printf_i+0x240>)
 8008400:	2778      	movs	r7, #120	; 0x78
 8008402:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	6829      	ldr	r1, [r5, #0]
 800840a:	061f      	lsls	r7, r3, #24
 800840c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008410:	d402      	bmi.n	8008418 <_printf_i+0x18c>
 8008412:	065f      	lsls	r7, r3, #25
 8008414:	bf48      	it	mi
 8008416:	b2b6      	uxthmi	r6, r6
 8008418:	07df      	lsls	r7, r3, #31
 800841a:	bf48      	it	mi
 800841c:	f043 0320 	orrmi.w	r3, r3, #32
 8008420:	6029      	str	r1, [r5, #0]
 8008422:	bf48      	it	mi
 8008424:	6023      	strmi	r3, [r4, #0]
 8008426:	b91e      	cbnz	r6, 8008430 <_printf_i+0x1a4>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	f023 0320 	bic.w	r3, r3, #32
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	2310      	movs	r3, #16
 8008432:	e7a7      	b.n	8008384 <_printf_i+0xf8>
 8008434:	4824      	ldr	r0, [pc, #144]	; (80084c8 <_printf_i+0x23c>)
 8008436:	e7e4      	b.n	8008402 <_printf_i+0x176>
 8008438:	4615      	mov	r5, r2
 800843a:	e7bd      	b.n	80083b8 <_printf_i+0x12c>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	6826      	ldr	r6, [r4, #0]
 8008440:	6961      	ldr	r1, [r4, #20]
 8008442:	1d18      	adds	r0, r3, #4
 8008444:	6028      	str	r0, [r5, #0]
 8008446:	0635      	lsls	r5, r6, #24
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	d501      	bpl.n	8008450 <_printf_i+0x1c4>
 800844c:	6019      	str	r1, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0x1ca>
 8008450:	0670      	lsls	r0, r6, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0x1c0>
 8008454:	8019      	strh	r1, [r3, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	4615      	mov	r5, r2
 800845c:	e7bc      	b.n	80083d8 <_printf_i+0x14c>
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	602a      	str	r2, [r5, #0]
 8008464:	681d      	ldr	r5, [r3, #0]
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	4628      	mov	r0, r5
 800846c:	f7f7 fec0 	bl	80001f0 <memchr>
 8008470:	b108      	cbz	r0, 8008476 <_printf_i+0x1ea>
 8008472:	1b40      	subs	r0, r0, r5
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	6863      	ldr	r3, [r4, #4]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2300      	movs	r3, #0
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008480:	e7aa      	b.n	80083d8 <_printf_i+0x14c>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	462a      	mov	r2, r5
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d0ad      	beq.n	80083ec <_printf_i+0x160>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	079b      	lsls	r3, r3, #30
 8008494:	d413      	bmi.n	80084be <_printf_i+0x232>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	4298      	cmp	r0, r3
 800849c:	bfb8      	it	lt
 800849e:	4618      	movlt	r0, r3
 80084a0:	e7a6      	b.n	80083f0 <_printf_i+0x164>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d09d      	beq.n	80083ec <_printf_i+0x160>
 80084b0:	3501      	adds	r5, #1
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	9903      	ldr	r1, [sp, #12]
 80084b6:	1a5b      	subs	r3, r3, r1
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dcf2      	bgt.n	80084a2 <_printf_i+0x216>
 80084bc:	e7eb      	b.n	8008496 <_printf_i+0x20a>
 80084be:	2500      	movs	r5, #0
 80084c0:	f104 0619 	add.w	r6, r4, #25
 80084c4:	e7f5      	b.n	80084b2 <_printf_i+0x226>
 80084c6:	bf00      	nop
 80084c8:	0800e16f 	.word	0x0800e16f
 80084cc:	0800e180 	.word	0x0800e180

080084d0 <std>:
 80084d0:	2300      	movs	r3, #0
 80084d2:	b510      	push	{r4, lr}
 80084d4:	4604      	mov	r4, r0
 80084d6:	e9c0 3300 	strd	r3, r3, [r0]
 80084da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084de:	6083      	str	r3, [r0, #8]
 80084e0:	8181      	strh	r1, [r0, #12]
 80084e2:	6643      	str	r3, [r0, #100]	; 0x64
 80084e4:	81c2      	strh	r2, [r0, #14]
 80084e6:	6183      	str	r3, [r0, #24]
 80084e8:	4619      	mov	r1, r3
 80084ea:	2208      	movs	r2, #8
 80084ec:	305c      	adds	r0, #92	; 0x5c
 80084ee:	f000 f902 	bl	80086f6 <memset>
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <std+0x38>)
 80084f4:	6263      	str	r3, [r4, #36]	; 0x24
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x3c>)
 80084f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <std+0x40>)
 80084fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x44>)
 8008500:	6224      	str	r4, [r4, #32]
 8008502:	6323      	str	r3, [r4, #48]	; 0x30
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop
 8008508:	08008671 	.word	0x08008671
 800850c:	08008693 	.word	0x08008693
 8008510:	080086cb 	.word	0x080086cb
 8008514:	080086ef 	.word	0x080086ef

08008518 <stdio_exit_handler>:
 8008518:	4a02      	ldr	r2, [pc, #8]	; (8008524 <stdio_exit_handler+0xc>)
 800851a:	4903      	ldr	r1, [pc, #12]	; (8008528 <stdio_exit_handler+0x10>)
 800851c:	4803      	ldr	r0, [pc, #12]	; (800852c <stdio_exit_handler+0x14>)
 800851e:	f000 b869 	b.w	80085f4 <_fwalk_sglue>
 8008522:	bf00      	nop
 8008524:	20000030 	.word	0x20000030
 8008528:	0800ac59 	.word	0x0800ac59
 800852c:	200001a8 	.word	0x200001a8

08008530 <cleanup_stdio>:
 8008530:	6841      	ldr	r1, [r0, #4]
 8008532:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <cleanup_stdio+0x34>)
 8008534:	4299      	cmp	r1, r3
 8008536:	b510      	push	{r4, lr}
 8008538:	4604      	mov	r4, r0
 800853a:	d001      	beq.n	8008540 <cleanup_stdio+0x10>
 800853c:	f002 fb8c 	bl	800ac58 <_fflush_r>
 8008540:	68a1      	ldr	r1, [r4, #8]
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <cleanup_stdio+0x38>)
 8008544:	4299      	cmp	r1, r3
 8008546:	d002      	beq.n	800854e <cleanup_stdio+0x1e>
 8008548:	4620      	mov	r0, r4
 800854a:	f002 fb85 	bl	800ac58 <_fflush_r>
 800854e:	68e1      	ldr	r1, [r4, #12]
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <cleanup_stdio+0x3c>)
 8008552:	4299      	cmp	r1, r3
 8008554:	d004      	beq.n	8008560 <cleanup_stdio+0x30>
 8008556:	4620      	mov	r0, r4
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	f002 bb7c 	b.w	800ac58 <_fflush_r>
 8008560:	bd10      	pop	{r4, pc}
 8008562:	bf00      	nop
 8008564:	20000e70 	.word	0x20000e70
 8008568:	20000ed8 	.word	0x20000ed8
 800856c:	20000f40 	.word	0x20000f40

08008570 <global_stdio_init.part.0>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <global_stdio_init.part.0+0x30>)
 8008574:	4c0b      	ldr	r4, [pc, #44]	; (80085a4 <global_stdio_init.part.0+0x34>)
 8008576:	4a0c      	ldr	r2, [pc, #48]	; (80085a8 <global_stdio_init.part.0+0x38>)
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	4620      	mov	r0, r4
 800857c:	2200      	movs	r2, #0
 800857e:	2104      	movs	r1, #4
 8008580:	f7ff ffa6 	bl	80084d0 <std>
 8008584:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008588:	2201      	movs	r2, #1
 800858a:	2109      	movs	r1, #9
 800858c:	f7ff ffa0 	bl	80084d0 <std>
 8008590:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008594:	2202      	movs	r2, #2
 8008596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859a:	2112      	movs	r1, #18
 800859c:	f7ff bf98 	b.w	80084d0 <std>
 80085a0:	20000fa8 	.word	0x20000fa8
 80085a4:	20000e70 	.word	0x20000e70
 80085a8:	08008519 	.word	0x08008519

080085ac <__sfp_lock_acquire>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__sfp_lock_acquire+0x8>)
 80085ae:	f000 b99f 	b.w	80088f0 <__retarget_lock_acquire_recursive>
 80085b2:	bf00      	nop
 80085b4:	20000fb1 	.word	0x20000fb1

080085b8 <__sfp_lock_release>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__sfp_lock_release+0x8>)
 80085ba:	f000 b99a 	b.w	80088f2 <__retarget_lock_release_recursive>
 80085be:	bf00      	nop
 80085c0:	20000fb1 	.word	0x20000fb1

080085c4 <__sinit>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	4604      	mov	r4, r0
 80085c8:	f7ff fff0 	bl	80085ac <__sfp_lock_acquire>
 80085cc:	6a23      	ldr	r3, [r4, #32]
 80085ce:	b11b      	cbz	r3, 80085d8 <__sinit+0x14>
 80085d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d4:	f7ff bff0 	b.w	80085b8 <__sfp_lock_release>
 80085d8:	4b04      	ldr	r3, [pc, #16]	; (80085ec <__sinit+0x28>)
 80085da:	6223      	str	r3, [r4, #32]
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <__sinit+0x2c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f5      	bne.n	80085d0 <__sinit+0xc>
 80085e4:	f7ff ffc4 	bl	8008570 <global_stdio_init.part.0>
 80085e8:	e7f2      	b.n	80085d0 <__sinit+0xc>
 80085ea:	bf00      	nop
 80085ec:	08008531 	.word	0x08008531
 80085f0:	20000fa8 	.word	0x20000fa8

080085f4 <_fwalk_sglue>:
 80085f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	4607      	mov	r7, r0
 80085fa:	4688      	mov	r8, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	2600      	movs	r6, #0
 8008600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008604:	f1b9 0901 	subs.w	r9, r9, #1
 8008608:	d505      	bpl.n	8008616 <_fwalk_sglue+0x22>
 800860a:	6824      	ldr	r4, [r4, #0]
 800860c:	2c00      	cmp	r4, #0
 800860e:	d1f7      	bne.n	8008600 <_fwalk_sglue+0xc>
 8008610:	4630      	mov	r0, r6
 8008612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008616:	89ab      	ldrh	r3, [r5, #12]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d907      	bls.n	800862c <_fwalk_sglue+0x38>
 800861c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008620:	3301      	adds	r3, #1
 8008622:	d003      	beq.n	800862c <_fwalk_sglue+0x38>
 8008624:	4629      	mov	r1, r5
 8008626:	4638      	mov	r0, r7
 8008628:	47c0      	blx	r8
 800862a:	4306      	orrs	r6, r0
 800862c:	3568      	adds	r5, #104	; 0x68
 800862e:	e7e9      	b.n	8008604 <_fwalk_sglue+0x10>

08008630 <siprintf>:
 8008630:	b40e      	push	{r1, r2, r3}
 8008632:	b500      	push	{lr}
 8008634:	b09c      	sub	sp, #112	; 0x70
 8008636:	ab1d      	add	r3, sp, #116	; 0x74
 8008638:	9002      	str	r0, [sp, #8]
 800863a:	9006      	str	r0, [sp, #24]
 800863c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008640:	4809      	ldr	r0, [pc, #36]	; (8008668 <siprintf+0x38>)
 8008642:	9107      	str	r1, [sp, #28]
 8008644:	9104      	str	r1, [sp, #16]
 8008646:	4909      	ldr	r1, [pc, #36]	; (800866c <siprintf+0x3c>)
 8008648:	f853 2b04 	ldr.w	r2, [r3], #4
 800864c:	9105      	str	r1, [sp, #20]
 800864e:	6800      	ldr	r0, [r0, #0]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	a902      	add	r1, sp, #8
 8008654:	f002 f97c 	bl	800a950 <_svfiprintf_r>
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	b01c      	add	sp, #112	; 0x70
 8008660:	f85d eb04 	ldr.w	lr, [sp], #4
 8008664:	b003      	add	sp, #12
 8008666:	4770      	bx	lr
 8008668:	200001f4 	.word	0x200001f4
 800866c:	ffff0208 	.word	0xffff0208

08008670 <__sread>:
 8008670:	b510      	push	{r4, lr}
 8008672:	460c      	mov	r4, r1
 8008674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008678:	f000 f8ec 	bl	8008854 <_read_r>
 800867c:	2800      	cmp	r0, #0
 800867e:	bfab      	itete	ge
 8008680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008682:	89a3      	ldrhlt	r3, [r4, #12]
 8008684:	181b      	addge	r3, r3, r0
 8008686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800868a:	bfac      	ite	ge
 800868c:	6563      	strge	r3, [r4, #84]	; 0x54
 800868e:	81a3      	strhlt	r3, [r4, #12]
 8008690:	bd10      	pop	{r4, pc}

08008692 <__swrite>:
 8008692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008696:	461f      	mov	r7, r3
 8008698:	898b      	ldrh	r3, [r1, #12]
 800869a:	05db      	lsls	r3, r3, #23
 800869c:	4605      	mov	r5, r0
 800869e:	460c      	mov	r4, r1
 80086a0:	4616      	mov	r6, r2
 80086a2:	d505      	bpl.n	80086b0 <__swrite+0x1e>
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	2302      	movs	r3, #2
 80086aa:	2200      	movs	r2, #0
 80086ac:	f000 f8c0 	bl	8008830 <_lseek_r>
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	4632      	mov	r2, r6
 80086be:	463b      	mov	r3, r7
 80086c0:	4628      	mov	r0, r5
 80086c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086c6:	f000 b8d7 	b.w	8008878 <_write_r>

080086ca <__sseek>:
 80086ca:	b510      	push	{r4, lr}
 80086cc:	460c      	mov	r4, r1
 80086ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d2:	f000 f8ad 	bl	8008830 <_lseek_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	bf15      	itete	ne
 80086dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80086de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086e6:	81a3      	strheq	r3, [r4, #12]
 80086e8:	bf18      	it	ne
 80086ea:	81a3      	strhne	r3, [r4, #12]
 80086ec:	bd10      	pop	{r4, pc}

080086ee <__sclose>:
 80086ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f2:	f000 b88d 	b.w	8008810 <_close_r>

080086f6 <memset>:
 80086f6:	4402      	add	r2, r0
 80086f8:	4603      	mov	r3, r0
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d100      	bne.n	8008700 <memset+0xa>
 80086fe:	4770      	bx	lr
 8008700:	f803 1b01 	strb.w	r1, [r3], #1
 8008704:	e7f9      	b.n	80086fa <memset+0x4>

08008706 <strncmp>:
 8008706:	b510      	push	{r4, lr}
 8008708:	b16a      	cbz	r2, 8008726 <strncmp+0x20>
 800870a:	3901      	subs	r1, #1
 800870c:	1884      	adds	r4, r0, r2
 800870e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008712:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008716:	429a      	cmp	r2, r3
 8008718:	d103      	bne.n	8008722 <strncmp+0x1c>
 800871a:	42a0      	cmp	r0, r4
 800871c:	d001      	beq.n	8008722 <strncmp+0x1c>
 800871e:	2a00      	cmp	r2, #0
 8008720:	d1f5      	bne.n	800870e <strncmp+0x8>
 8008722:	1ad0      	subs	r0, r2, r3
 8008724:	bd10      	pop	{r4, pc}
 8008726:	4610      	mov	r0, r2
 8008728:	e7fc      	b.n	8008724 <strncmp+0x1e>

0800872a <strncpy>:
 800872a:	b510      	push	{r4, lr}
 800872c:	3901      	subs	r1, #1
 800872e:	4603      	mov	r3, r0
 8008730:	b132      	cbz	r2, 8008740 <strncpy+0x16>
 8008732:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008736:	f803 4b01 	strb.w	r4, [r3], #1
 800873a:	3a01      	subs	r2, #1
 800873c:	2c00      	cmp	r4, #0
 800873e:	d1f7      	bne.n	8008730 <strncpy+0x6>
 8008740:	441a      	add	r2, r3
 8008742:	2100      	movs	r1, #0
 8008744:	4293      	cmp	r3, r2
 8008746:	d100      	bne.n	800874a <strncpy+0x20>
 8008748:	bd10      	pop	{r4, pc}
 800874a:	f803 1b01 	strb.w	r1, [r3], #1
 800874e:	e7f9      	b.n	8008744 <strncpy+0x1a>

08008750 <strtok>:
 8008750:	4b16      	ldr	r3, [pc, #88]	; (80087ac <strtok+0x5c>)
 8008752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008754:	681e      	ldr	r6, [r3, #0]
 8008756:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008758:	4605      	mov	r5, r0
 800875a:	b9fc      	cbnz	r4, 800879c <strtok+0x4c>
 800875c:	2050      	movs	r0, #80	; 0x50
 800875e:	9101      	str	r1, [sp, #4]
 8008760:	f001 fb1c 	bl	8009d9c <malloc>
 8008764:	9901      	ldr	r1, [sp, #4]
 8008766:	6470      	str	r0, [r6, #68]	; 0x44
 8008768:	4602      	mov	r2, r0
 800876a:	b920      	cbnz	r0, 8008776 <strtok+0x26>
 800876c:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <strtok+0x60>)
 800876e:	4811      	ldr	r0, [pc, #68]	; (80087b4 <strtok+0x64>)
 8008770:	215b      	movs	r1, #91	; 0x5b
 8008772:	f000 f8d5 	bl	8008920 <__assert_func>
 8008776:	e9c0 4400 	strd	r4, r4, [r0]
 800877a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800877e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008782:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008786:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800878a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800878e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008792:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008796:	6184      	str	r4, [r0, #24]
 8008798:	7704      	strb	r4, [r0, #28]
 800879a:	6244      	str	r4, [r0, #36]	; 0x24
 800879c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800879e:	2301      	movs	r3, #1
 80087a0:	4628      	mov	r0, r5
 80087a2:	b002      	add	sp, #8
 80087a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087a8:	f000 b806 	b.w	80087b8 <__strtok_r>
 80087ac:	200001f4 	.word	0x200001f4
 80087b0:	0800e191 	.word	0x0800e191
 80087b4:	0800e1a8 	.word	0x0800e1a8

080087b8 <__strtok_r>:
 80087b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ba:	b908      	cbnz	r0, 80087c0 <__strtok_r+0x8>
 80087bc:	6810      	ldr	r0, [r2, #0]
 80087be:	b188      	cbz	r0, 80087e4 <__strtok_r+0x2c>
 80087c0:	4604      	mov	r4, r0
 80087c2:	4620      	mov	r0, r4
 80087c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087c8:	460f      	mov	r7, r1
 80087ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087ce:	b91e      	cbnz	r6, 80087d8 <__strtok_r+0x20>
 80087d0:	b965      	cbnz	r5, 80087ec <__strtok_r+0x34>
 80087d2:	6015      	str	r5, [r2, #0]
 80087d4:	4628      	mov	r0, r5
 80087d6:	e005      	b.n	80087e4 <__strtok_r+0x2c>
 80087d8:	42b5      	cmp	r5, r6
 80087da:	d1f6      	bne.n	80087ca <__strtok_r+0x12>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1f0      	bne.n	80087c2 <__strtok_r+0xa>
 80087e0:	6014      	str	r4, [r2, #0]
 80087e2:	7003      	strb	r3, [r0, #0]
 80087e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e6:	461c      	mov	r4, r3
 80087e8:	e00c      	b.n	8008804 <__strtok_r+0x4c>
 80087ea:	b915      	cbnz	r5, 80087f2 <__strtok_r+0x3a>
 80087ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087f0:	460e      	mov	r6, r1
 80087f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80087f6:	42ab      	cmp	r3, r5
 80087f8:	d1f7      	bne.n	80087ea <__strtok_r+0x32>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0f3      	beq.n	80087e6 <__strtok_r+0x2e>
 80087fe:	2300      	movs	r3, #0
 8008800:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008804:	6014      	str	r4, [r2, #0]
 8008806:	e7ed      	b.n	80087e4 <__strtok_r+0x2c>

08008808 <_localeconv_r>:
 8008808:	4800      	ldr	r0, [pc, #0]	; (800880c <_localeconv_r+0x4>)
 800880a:	4770      	bx	lr
 800880c:	2000012c 	.word	0x2000012c

08008810 <_close_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	; (800882c <_close_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7fa fc91 	bl	8003142 <_close>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_close_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_close_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20000fac 	.word	0x20000fac

08008830 <_lseek_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	; (8008850 <_lseek_r+0x20>)
 8008834:	4604      	mov	r4, r0
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	2200      	movs	r2, #0
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7fa fca6 	bl	8003190 <_lseek>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_lseek_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_lseek_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20000fac 	.word	0x20000fac

08008854 <_read_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	; (8008874 <_read_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7fa fc34 	bl	80030d0 <_read>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_read_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_read_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000fac 	.word	0x20000fac

08008878 <_write_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	; (8008898 <_write_r+0x20>)
 800887c:	4604      	mov	r4, r0
 800887e:	4608      	mov	r0, r1
 8008880:	4611      	mov	r1, r2
 8008882:	2200      	movs	r2, #0
 8008884:	602a      	str	r2, [r5, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f7fa fc3f 	bl	800310a <_write>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_write_r+0x1e>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_write_r+0x1e>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20000fac 	.word	0x20000fac

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	200001f4 	.word	0x200001f4

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4d0d      	ldr	r5, [pc, #52]	; (80088e0 <__libc_init_array+0x38>)
 80088ac:	4c0d      	ldr	r4, [pc, #52]	; (80088e4 <__libc_init_array+0x3c>)
 80088ae:	1b64      	subs	r4, r4, r5
 80088b0:	10a4      	asrs	r4, r4, #2
 80088b2:	2600      	movs	r6, #0
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	4d0b      	ldr	r5, [pc, #44]	; (80088e8 <__libc_init_array+0x40>)
 80088ba:	4c0c      	ldr	r4, [pc, #48]	; (80088ec <__libc_init_array+0x44>)
 80088bc:	f004 f952 	bl	800cb64 <_init>
 80088c0:	1b64      	subs	r4, r4, r5
 80088c2:	10a4      	asrs	r4, r4, #2
 80088c4:	2600      	movs	r6, #0
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d0:	4798      	blx	r3
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088da:	4798      	blx	r3
 80088dc:	3601      	adds	r6, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	0800e7d8 	.word	0x0800e7d8
 80088e4:	0800e7d8 	.word	0x0800e7d8
 80088e8:	0800e7d8 	.word	0x0800e7d8
 80088ec:	0800e7dc 	.word	0x0800e7dc

080088f0 <__retarget_lock_acquire_recursive>:
 80088f0:	4770      	bx	lr

080088f2 <__retarget_lock_release_recursive>:
 80088f2:	4770      	bx	lr

080088f4 <memcpy>:
 80088f4:	440a      	add	r2, r1
 80088f6:	4291      	cmp	r1, r2
 80088f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088fc:	d100      	bne.n	8008900 <memcpy+0xc>
 80088fe:	4770      	bx	lr
 8008900:	b510      	push	{r4, lr}
 8008902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890a:	4291      	cmp	r1, r2
 800890c:	d1f9      	bne.n	8008902 <memcpy+0xe>
 800890e:	bd10      	pop	{r4, pc}

08008910 <nan>:
 8008910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008918 <nan+0x8>
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	00000000 	.word	0x00000000
 800891c:	7ff80000 	.word	0x7ff80000

08008920 <__assert_func>:
 8008920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008922:	4614      	mov	r4, r2
 8008924:	461a      	mov	r2, r3
 8008926:	4b09      	ldr	r3, [pc, #36]	; (800894c <__assert_func+0x2c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4605      	mov	r5, r0
 800892c:	68d8      	ldr	r0, [r3, #12]
 800892e:	b14c      	cbz	r4, 8008944 <__assert_func+0x24>
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <__assert_func+0x30>)
 8008932:	9100      	str	r1, [sp, #0]
 8008934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008938:	4906      	ldr	r1, [pc, #24]	; (8008954 <__assert_func+0x34>)
 800893a:	462b      	mov	r3, r5
 800893c:	f002 f9b4 	bl	800aca8 <fiprintf>
 8008940:	f002 f9ee 	bl	800ad20 <abort>
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <__assert_func+0x38>)
 8008946:	461c      	mov	r4, r3
 8008948:	e7f3      	b.n	8008932 <__assert_func+0x12>
 800894a:	bf00      	nop
 800894c:	200001f4 	.word	0x200001f4
 8008950:	0800e20a 	.word	0x0800e20a
 8008954:	0800e217 	.word	0x0800e217
 8008958:	0800e245 	.word	0x0800e245

0800895c <quorem>:
 800895c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	6903      	ldr	r3, [r0, #16]
 8008962:	690c      	ldr	r4, [r1, #16]
 8008964:	42a3      	cmp	r3, r4
 8008966:	4607      	mov	r7, r0
 8008968:	db7e      	blt.n	8008a68 <quorem+0x10c>
 800896a:	3c01      	subs	r4, #1
 800896c:	f101 0814 	add.w	r8, r1, #20
 8008970:	f100 0514 	add.w	r5, r0, #20
 8008974:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800897e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008982:	3301      	adds	r3, #1
 8008984:	429a      	cmp	r2, r3
 8008986:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800898a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800898e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008992:	d331      	bcc.n	80089f8 <quorem+0x9c>
 8008994:	f04f 0e00 	mov.w	lr, #0
 8008998:	4640      	mov	r0, r8
 800899a:	46ac      	mov	ip, r5
 800899c:	46f2      	mov	sl, lr
 800899e:	f850 2b04 	ldr.w	r2, [r0], #4
 80089a2:	b293      	uxth	r3, r2
 80089a4:	fb06 e303 	mla	r3, r6, r3, lr
 80089a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089ac:	0c1a      	lsrs	r2, r3, #16
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	ebaa 0303 	sub.w	r3, sl, r3
 80089b4:	f8dc a000 	ldr.w	sl, [ip]
 80089b8:	fa13 f38a 	uxtah	r3, r3, sl
 80089bc:	fb06 220e 	mla	r2, r6, lr, r2
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	9b00      	ldr	r3, [sp, #0]
 80089c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089c8:	b292      	uxth	r2, r2
 80089ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80089d6:	4581      	cmp	r9, r0
 80089d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089dc:	f84c 3b04 	str.w	r3, [ip], #4
 80089e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089e4:	d2db      	bcs.n	800899e <quorem+0x42>
 80089e6:	f855 300b 	ldr.w	r3, [r5, fp]
 80089ea:	b92b      	cbnz	r3, 80089f8 <quorem+0x9c>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	3b04      	subs	r3, #4
 80089f0:	429d      	cmp	r5, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	d32c      	bcc.n	8008a50 <quorem+0xf4>
 80089f6:	613c      	str	r4, [r7, #16]
 80089f8:	4638      	mov	r0, r7
 80089fa:	f001 fd5b 	bl	800a4b4 <__mcmp>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	db22      	blt.n	8008a48 <quorem+0xec>
 8008a02:	3601      	adds	r6, #1
 8008a04:	4629      	mov	r1, r5
 8008a06:	2000      	movs	r0, #0
 8008a08:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a0c:	f8d1 c000 	ldr.w	ip, [r1]
 8008a10:	b293      	uxth	r3, r2
 8008a12:	1ac3      	subs	r3, r0, r3
 8008a14:	0c12      	lsrs	r2, r2, #16
 8008a16:	fa13 f38c 	uxtah	r3, r3, ip
 8008a1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a28:	45c1      	cmp	r9, r8
 8008a2a:	f841 3b04 	str.w	r3, [r1], #4
 8008a2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a32:	d2e9      	bcs.n	8008a08 <quorem+0xac>
 8008a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3c:	b922      	cbnz	r2, 8008a48 <quorem+0xec>
 8008a3e:	3b04      	subs	r3, #4
 8008a40:	429d      	cmp	r5, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	d30a      	bcc.n	8008a5c <quorem+0x100>
 8008a46:	613c      	str	r4, [r7, #16]
 8008a48:	4630      	mov	r0, r6
 8008a4a:	b003      	add	sp, #12
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	6812      	ldr	r2, [r2, #0]
 8008a52:	3b04      	subs	r3, #4
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	d1ce      	bne.n	80089f6 <quorem+0x9a>
 8008a58:	3c01      	subs	r4, #1
 8008a5a:	e7c9      	b.n	80089f0 <quorem+0x94>
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	3b04      	subs	r3, #4
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	d1f0      	bne.n	8008a46 <quorem+0xea>
 8008a64:	3c01      	subs	r4, #1
 8008a66:	e7eb      	b.n	8008a40 <quorem+0xe4>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7ee      	b.n	8008a4a <quorem+0xee>
 8008a6c:	0000      	movs	r0, r0
	...

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	ed2d 8b04 	vpush	{d8-d9}
 8008a78:	69c5      	ldr	r5, [r0, #28]
 8008a7a:	b093      	sub	sp, #76	; 0x4c
 8008a7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a80:	ec57 6b10 	vmov	r6, r7, d0
 8008a84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a88:	9107      	str	r1, [sp, #28]
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a90:	b975      	cbnz	r5, 8008ab0 <_dtoa_r+0x40>
 8008a92:	2010      	movs	r0, #16
 8008a94:	f001 f982 	bl	8009d9c <malloc>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	61e0      	str	r0, [r4, #28]
 8008a9c:	b920      	cbnz	r0, 8008aa8 <_dtoa_r+0x38>
 8008a9e:	4bae      	ldr	r3, [pc, #696]	; (8008d58 <_dtoa_r+0x2e8>)
 8008aa0:	21ef      	movs	r1, #239	; 0xef
 8008aa2:	48ae      	ldr	r0, [pc, #696]	; (8008d5c <_dtoa_r+0x2ec>)
 8008aa4:	f7ff ff3c 	bl	8008920 <__assert_func>
 8008aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aac:	6005      	str	r5, [r0, #0]
 8008aae:	60c5      	str	r5, [r0, #12]
 8008ab0:	69e3      	ldr	r3, [r4, #28]
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	b151      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	604a      	str	r2, [r1, #4]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4093      	lsls	r3, r2
 8008abe:	608b      	str	r3, [r1, #8]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f001 fa71 	bl	8009fa8 <_Bfree>
 8008ac6:	69e3      	ldr	r3, [r4, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e3b      	subs	r3, r7, #0
 8008ace:	bfbb      	ittet	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	9303      	strlt	r3, [sp, #12]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	2201      	movlt	r2, #1
 8008ada:	bfac      	ite	ge
 8008adc:	f8c8 3000 	strge.w	r3, [r8]
 8008ae0:	f8c8 2000 	strlt.w	r2, [r8]
 8008ae4:	4b9e      	ldr	r3, [pc, #632]	; (8008d60 <_dtoa_r+0x2f0>)
 8008ae6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008aea:	ea33 0308 	bics.w	r3, r3, r8
 8008aee:	d11b      	bne.n	8008b28 <_dtoa_r+0xb8>
 8008af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008afc:	4333      	orrs	r3, r6
 8008afe:	f000 8593 	beq.w	8009628 <_dtoa_r+0xbb8>
 8008b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b04:	b963      	cbnz	r3, 8008b20 <_dtoa_r+0xb0>
 8008b06:	4b97      	ldr	r3, [pc, #604]	; (8008d64 <_dtoa_r+0x2f4>)
 8008b08:	e027      	b.n	8008b5a <_dtoa_r+0xea>
 8008b0a:	4b97      	ldr	r3, [pc, #604]	; (8008d68 <_dtoa_r+0x2f8>)
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	9800      	ldr	r0, [sp, #0]
 8008b16:	b013      	add	sp, #76	; 0x4c
 8008b18:	ecbd 8b04 	vpop	{d8-d9}
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	4b90      	ldr	r3, [pc, #576]	; (8008d64 <_dtoa_r+0x2f4>)
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	3303      	adds	r3, #3
 8008b26:	e7f3      	b.n	8008b10 <_dtoa_r+0xa0>
 8008b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	ec51 0b17 	vmov	r0, r1, d7
 8008b32:	eeb0 8a47 	vmov.f32	s16, s14
 8008b36:	eef0 8a67 	vmov.f32	s17, s15
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f7f7 ffd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b40:	4681      	mov	r9, r0
 8008b42:	b160      	cbz	r0, 8008b5e <_dtoa_r+0xee>
 8008b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b46:	2301      	movs	r3, #1
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8568 	beq.w	8009622 <_dtoa_r+0xbb2>
 8008b52:	4b86      	ldr	r3, [pc, #536]	; (8008d6c <_dtoa_r+0x2fc>)
 8008b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	e7da      	b.n	8008b14 <_dtoa_r+0xa4>
 8008b5e:	aa10      	add	r2, sp, #64	; 0x40
 8008b60:	a911      	add	r1, sp, #68	; 0x44
 8008b62:	4620      	mov	r0, r4
 8008b64:	eeb0 0a48 	vmov.f32	s0, s16
 8008b68:	eef0 0a68 	vmov.f32	s1, s17
 8008b6c:	f001 fdb8 	bl	800a6e0 <__d2b>
 8008b70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b74:	4682      	mov	sl, r0
 8008b76:	2d00      	cmp	r5, #0
 8008b78:	d07f      	beq.n	8008c7a <_dtoa_r+0x20a>
 8008b7a:	ee18 3a90 	vmov	r3, s17
 8008b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b86:	ec51 0b18 	vmov	r0, r1, d8
 8008b8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b96:	4619      	mov	r1, r3
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4b75      	ldr	r3, [pc, #468]	; (8008d70 <_dtoa_r+0x300>)
 8008b9c:	f7f7 fb84 	bl	80002a8 <__aeabi_dsub>
 8008ba0:	a367      	add	r3, pc, #412	; (adr r3, 8008d40 <_dtoa_r+0x2d0>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fd37 	bl	8000618 <__aeabi_dmul>
 8008baa:	a367      	add	r3, pc, #412	; (adr r3, 8008d48 <_dtoa_r+0x2d8>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb7c 	bl	80002ac <__adddf3>
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	460f      	mov	r7, r1
 8008bba:	f7f7 fcc3 	bl	8000544 <__aeabi_i2d>
 8008bbe:	a364      	add	r3, pc, #400	; (adr r3, 8008d50 <_dtoa_r+0x2e0>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fd28 	bl	8000618 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb6c 	bl	80002ac <__adddf3>
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	f7f7 ffce 	bl	8000b78 <__aeabi_d2iz>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4683      	mov	fp, r0
 8008be0:	2300      	movs	r3, #0
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f7 ff89 	bl	8000afc <__aeabi_dcmplt>
 8008bea:	b148      	cbz	r0, 8008c00 <_dtoa_r+0x190>
 8008bec:	4658      	mov	r0, fp
 8008bee:	f7f7 fca9 	bl	8000544 <__aeabi_i2d>
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	f7f7 ff77 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bfa:	b908      	cbnz	r0, 8008c00 <_dtoa_r+0x190>
 8008bfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c00:	f1bb 0f16 	cmp.w	fp, #22
 8008c04:	d857      	bhi.n	8008cb6 <_dtoa_r+0x246>
 8008c06:	4b5b      	ldr	r3, [pc, #364]	; (8008d74 <_dtoa_r+0x304>)
 8008c08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	ec51 0b18 	vmov	r0, r1, d8
 8008c14:	f7f7 ff72 	bl	8000afc <__aeabi_dcmplt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d04e      	beq.n	8008cba <_dtoa_r+0x24a>
 8008c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c20:	2300      	movs	r3, #0
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c26:	1b5b      	subs	r3, r3, r5
 8008c28:	1e5a      	subs	r2, r3, #1
 8008c2a:	bf45      	ittet	mi
 8008c2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c30:	9305      	strmi	r3, [sp, #20]
 8008c32:	2300      	movpl	r3, #0
 8008c34:	2300      	movmi	r3, #0
 8008c36:	9206      	str	r2, [sp, #24]
 8008c38:	bf54      	ite	pl
 8008c3a:	9305      	strpl	r3, [sp, #20]
 8008c3c:	9306      	strmi	r3, [sp, #24]
 8008c3e:	f1bb 0f00 	cmp.w	fp, #0
 8008c42:	db3c      	blt.n	8008cbe <_dtoa_r+0x24e>
 8008c44:	9b06      	ldr	r3, [sp, #24]
 8008c46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c4a:	445b      	add	r3, fp
 8008c4c:	9306      	str	r3, [sp, #24]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9308      	str	r3, [sp, #32]
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d868      	bhi.n	8008d2a <_dtoa_r+0x2ba>
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	bfc4      	itt	gt
 8008c5c:	3b04      	subgt	r3, #4
 8008c5e:	9307      	strgt	r3, [sp, #28]
 8008c60:	9b07      	ldr	r3, [sp, #28]
 8008c62:	f1a3 0302 	sub.w	r3, r3, #2
 8008c66:	bfcc      	ite	gt
 8008c68:	2500      	movgt	r5, #0
 8008c6a:	2501      	movle	r5, #1
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	f200 8085 	bhi.w	8008d7c <_dtoa_r+0x30c>
 8008c72:	e8df f003 	tbb	[pc, r3]
 8008c76:	3b2e      	.short	0x3b2e
 8008c78:	5839      	.short	0x5839
 8008c7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c7e:	441d      	add	r5, r3
 8008c80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	bfc1      	itttt	gt
 8008c88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008c94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c98:	bfd6      	itet	le
 8008c9a:	f1c3 0320 	rsble	r3, r3, #32
 8008c9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ca2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ca6:	f7f7 fc3d 	bl	8000524 <__aeabi_ui2d>
 8008caa:	2201      	movs	r2, #1
 8008cac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008cb0:	3d01      	subs	r5, #1
 8008cb2:	920e      	str	r2, [sp, #56]	; 0x38
 8008cb4:	e76f      	b.n	8008b96 <_dtoa_r+0x126>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e7b3      	b.n	8008c22 <_dtoa_r+0x1b2>
 8008cba:	900c      	str	r0, [sp, #48]	; 0x30
 8008cbc:	e7b2      	b.n	8008c24 <_dtoa_r+0x1b4>
 8008cbe:	9b05      	ldr	r3, [sp, #20]
 8008cc0:	eba3 030b 	sub.w	r3, r3, fp
 8008cc4:	9305      	str	r3, [sp, #20]
 8008cc6:	f1cb 0300 	rsb	r3, fp, #0
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cd0:	e7bf      	b.n	8008c52 <_dtoa_r+0x1e2>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	dc52      	bgt.n	8008d82 <_dtoa_r+0x312>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ce6:	e00b      	b.n	8008d00 <_dtoa_r+0x290>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7f3      	b.n	8008cd4 <_dtoa_r+0x264>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf2:	445b      	add	r3, fp
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	bfb8      	it	lt
 8008cfe:	2301      	movlt	r3, #1
 8008d00:	69e0      	ldr	r0, [r4, #28]
 8008d02:	2100      	movs	r1, #0
 8008d04:	2204      	movs	r2, #4
 8008d06:	f102 0614 	add.w	r6, r2, #20
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	d93d      	bls.n	8008d8a <_dtoa_r+0x31a>
 8008d0e:	6041      	str	r1, [r0, #4]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f001 f909 	bl	8009f28 <_Balloc>
 8008d16:	9000      	str	r0, [sp, #0]
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d139      	bne.n	8008d90 <_dtoa_r+0x320>
 8008d1c:	4b16      	ldr	r3, [pc, #88]	; (8008d78 <_dtoa_r+0x308>)
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f240 11af 	movw	r1, #431	; 0x1af
 8008d24:	e6bd      	b.n	8008aa2 <_dtoa_r+0x32>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7e1      	b.n	8008cee <_dtoa_r+0x27e>
 8008d2a:	2501      	movs	r5, #1
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	9509      	str	r5, [sp, #36]	; 0x24
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2312      	movs	r3, #18
 8008d3e:	e7d1      	b.n	8008ce4 <_dtoa_r+0x274>
 8008d40:	636f4361 	.word	0x636f4361
 8008d44:	3fd287a7 	.word	0x3fd287a7
 8008d48:	8b60c8b3 	.word	0x8b60c8b3
 8008d4c:	3fc68a28 	.word	0x3fc68a28
 8008d50:	509f79fb 	.word	0x509f79fb
 8008d54:	3fd34413 	.word	0x3fd34413
 8008d58:	0800e191 	.word	0x0800e191
 8008d5c:	0800e253 	.word	0x0800e253
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	0800e24f 	.word	0x0800e24f
 8008d68:	0800e246 	.word	0x0800e246
 8008d6c:	0800e16e 	.word	0x0800e16e
 8008d70:	3ff80000 	.word	0x3ff80000
 8008d74:	0800e3a0 	.word	0x0800e3a0
 8008d78:	0800e2ab 	.word	0x0800e2ab
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d80:	e7d7      	b.n	8008d32 <_dtoa_r+0x2c2>
 8008d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	e7ba      	b.n	8008d00 <_dtoa_r+0x290>
 8008d8a:	3101      	adds	r1, #1
 8008d8c:	0052      	lsls	r2, r2, #1
 8008d8e:	e7ba      	b.n	8008d06 <_dtoa_r+0x296>
 8008d90:	69e3      	ldr	r3, [r4, #28]
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	2b0e      	cmp	r3, #14
 8008d9a:	f200 80a8 	bhi.w	8008eee <_dtoa_r+0x47e>
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	f000 80a5 	beq.w	8008eee <_dtoa_r+0x47e>
 8008da4:	f1bb 0f00 	cmp.w	fp, #0
 8008da8:	dd38      	ble.n	8008e1c <_dtoa_r+0x3ac>
 8008daa:	4bc0      	ldr	r3, [pc, #768]	; (80090ac <_dtoa_r+0x63c>)
 8008dac:	f00b 020f 	and.w	r2, fp, #15
 8008db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008db8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008dbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008dc0:	d019      	beq.n	8008df6 <_dtoa_r+0x386>
 8008dc2:	4bbb      	ldr	r3, [pc, #748]	; (80090b0 <_dtoa_r+0x640>)
 8008dc4:	ec51 0b18 	vmov	r0, r1, d8
 8008dc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dcc:	f7f7 fd4e 	bl	800086c <__aeabi_ddiv>
 8008dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd4:	f008 080f 	and.w	r8, r8, #15
 8008dd8:	2503      	movs	r5, #3
 8008dda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090b0 <_dtoa_r+0x640>
 8008dde:	f1b8 0f00 	cmp.w	r8, #0
 8008de2:	d10a      	bne.n	8008dfa <_dtoa_r+0x38a>
 8008de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de8:	4632      	mov	r2, r6
 8008dea:	463b      	mov	r3, r7
 8008dec:	f7f7 fd3e 	bl	800086c <__aeabi_ddiv>
 8008df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df4:	e02b      	b.n	8008e4e <_dtoa_r+0x3de>
 8008df6:	2502      	movs	r5, #2
 8008df8:	e7ef      	b.n	8008dda <_dtoa_r+0x36a>
 8008dfa:	f018 0f01 	tst.w	r8, #1
 8008dfe:	d008      	beq.n	8008e12 <_dtoa_r+0x3a2>
 8008e00:	4630      	mov	r0, r6
 8008e02:	4639      	mov	r1, r7
 8008e04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e08:	f7f7 fc06 	bl	8000618 <__aeabi_dmul>
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e16:	f109 0908 	add.w	r9, r9, #8
 8008e1a:	e7e0      	b.n	8008dde <_dtoa_r+0x36e>
 8008e1c:	f000 809f 	beq.w	8008f5e <_dtoa_r+0x4ee>
 8008e20:	f1cb 0600 	rsb	r6, fp, #0
 8008e24:	4ba1      	ldr	r3, [pc, #644]	; (80090ac <_dtoa_r+0x63c>)
 8008e26:	4fa2      	ldr	r7, [pc, #648]	; (80090b0 <_dtoa_r+0x640>)
 8008e28:	f006 020f 	and.w	r2, r6, #15
 8008e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	ec51 0b18 	vmov	r0, r1, d8
 8008e38:	f7f7 fbee 	bl	8000618 <__aeabi_dmul>
 8008e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e40:	1136      	asrs	r6, r6, #4
 8008e42:	2300      	movs	r3, #0
 8008e44:	2502      	movs	r5, #2
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d17e      	bne.n	8008f48 <_dtoa_r+0x4d8>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d0      	bne.n	8008df0 <_dtoa_r+0x380>
 8008e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8084 	beq.w	8008f62 <_dtoa_r+0x4f2>
 8008e5a:	4b96      	ldr	r3, [pc, #600]	; (80090b4 <_dtoa_r+0x644>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fe4b 	bl	8000afc <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d07b      	beq.n	8008f62 <_dtoa_r+0x4f2>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d078      	beq.n	8008f62 <_dtoa_r+0x4f2>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dd39      	ble.n	8008eea <_dtoa_r+0x47a>
 8008e76:	4b90      	ldr	r3, [pc, #576]	; (80090b8 <_dtoa_r+0x648>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 fbcb 	bl	8000618 <__aeabi_dmul>
 8008e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e86:	9e01      	ldr	r6, [sp, #4]
 8008e88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008e8c:	3501      	adds	r5, #1
 8008e8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7f7 fb56 	bl	8000544 <__aeabi_i2d>
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	f7f7 fbbc 	bl	8000618 <__aeabi_dmul>
 8008ea0:	4b86      	ldr	r3, [pc, #536]	; (80090bc <_dtoa_r+0x64c>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f7f7 fa02 	bl	80002ac <__adddf3>
 8008ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	d158      	bne.n	8008f68 <_dtoa_r+0x4f8>
 8008eb6:	4b82      	ldr	r3, [pc, #520]	; (80090c0 <_dtoa_r+0x650>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	f7f7 f9f3 	bl	80002a8 <__aeabi_dsub>
 8008ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	4689      	mov	r9, r1
 8008eca:	f7f7 fe35 	bl	8000b38 <__aeabi_dcmpgt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f040 8296 	bne.w	8009400 <_dtoa_r+0x990>
 8008ed4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ed8:	4640      	mov	r0, r8
 8008eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 fe0c 	bl	8000afc <__aeabi_dcmplt>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f040 8289 	bne.w	80093fc <_dtoa_r+0x98c>
 8008eea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f2c0 814e 	blt.w	8009192 <_dtoa_r+0x722>
 8008ef6:	f1bb 0f0e 	cmp.w	fp, #14
 8008efa:	f300 814a 	bgt.w	8009192 <_dtoa_r+0x722>
 8008efe:	4b6b      	ldr	r3, [pc, #428]	; (80090ac <_dtoa_r+0x63c>)
 8008f00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f280 80dc 	bge.w	80090c8 <_dtoa_r+0x658>
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f300 80d8 	bgt.w	80090c8 <_dtoa_r+0x658>
 8008f18:	f040 826f 	bne.w	80093fa <_dtoa_r+0x98a>
 8008f1c:	4b68      	ldr	r3, [pc, #416]	; (80090c0 <_dtoa_r+0x650>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fb78 	bl	8000618 <__aeabi_dmul>
 8008f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f2c:	f7f7 fdfa 	bl	8000b24 <__aeabi_dcmpge>
 8008f30:	9e04      	ldr	r6, [sp, #16]
 8008f32:	4637      	mov	r7, r6
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f040 8245 	bne.w	80093c4 <_dtoa_r+0x954>
 8008f3a:	9d00      	ldr	r5, [sp, #0]
 8008f3c:	2331      	movs	r3, #49	; 0x31
 8008f3e:	f805 3b01 	strb.w	r3, [r5], #1
 8008f42:	f10b 0b01 	add.w	fp, fp, #1
 8008f46:	e241      	b.n	80093cc <_dtoa_r+0x95c>
 8008f48:	07f2      	lsls	r2, r6, #31
 8008f4a:	d505      	bpl.n	8008f58 <_dtoa_r+0x4e8>
 8008f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f50:	f7f7 fb62 	bl	8000618 <__aeabi_dmul>
 8008f54:	3501      	adds	r5, #1
 8008f56:	2301      	movs	r3, #1
 8008f58:	1076      	asrs	r6, r6, #1
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	e773      	b.n	8008e46 <_dtoa_r+0x3d6>
 8008f5e:	2502      	movs	r5, #2
 8008f60:	e775      	b.n	8008e4e <_dtoa_r+0x3de>
 8008f62:	9e04      	ldr	r6, [sp, #16]
 8008f64:	465f      	mov	r7, fp
 8008f66:	e792      	b.n	8008e8e <_dtoa_r+0x41e>
 8008f68:	9900      	ldr	r1, [sp, #0]
 8008f6a:	4b50      	ldr	r3, [pc, #320]	; (80090ac <_dtoa_r+0x63c>)
 8008f6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f70:	4431      	add	r1, r6
 8008f72:	9102      	str	r1, [sp, #8]
 8008f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f76:	eeb0 9a47 	vmov.f32	s18, s14
 8008f7a:	eef0 9a67 	vmov.f32	s19, s15
 8008f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d044      	beq.n	8009014 <_dtoa_r+0x5a4>
 8008f8a:	494e      	ldr	r1, [pc, #312]	; (80090c4 <_dtoa_r+0x654>)
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f7f7 fc6d 	bl	800086c <__aeabi_ddiv>
 8008f92:	ec53 2b19 	vmov	r2, r3, d9
 8008f96:	f7f7 f987 	bl	80002a8 <__aeabi_dsub>
 8008f9a:	9d00      	ldr	r5, [sp, #0]
 8008f9c:	ec41 0b19 	vmov	d9, r0, r1
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	f7f7 fde8 	bl	8000b78 <__aeabi_d2iz>
 8008fa8:	4606      	mov	r6, r0
 8008faa:	f7f7 facb 	bl	8000544 <__aeabi_i2d>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 f977 	bl	80002a8 <__aeabi_dsub>
 8008fba:	3630      	adds	r6, #48	; 0x30
 8008fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8008fc0:	ec53 2b19 	vmov	r2, r3, d9
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	f7f7 fd98 	bl	8000afc <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d164      	bne.n	800909a <_dtoa_r+0x62a>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	4937      	ldr	r1, [pc, #220]	; (80090b4 <_dtoa_r+0x644>)
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	f7f7 f966 	bl	80002a8 <__aeabi_dsub>
 8008fdc:	ec53 2b19 	vmov	r2, r3, d9
 8008fe0:	f7f7 fd8c 	bl	8000afc <__aeabi_dcmplt>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f040 80b6 	bne.w	8009156 <_dtoa_r+0x6e6>
 8008fea:	9b02      	ldr	r3, [sp, #8]
 8008fec:	429d      	cmp	r5, r3
 8008fee:	f43f af7c 	beq.w	8008eea <_dtoa_r+0x47a>
 8008ff2:	4b31      	ldr	r3, [pc, #196]	; (80090b8 <_dtoa_r+0x648>)
 8008ff4:	ec51 0b19 	vmov	r0, r1, d9
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f7f7 fb0d 	bl	8000618 <__aeabi_dmul>
 8008ffe:	4b2e      	ldr	r3, [pc, #184]	; (80090b8 <_dtoa_r+0x648>)
 8009000:	ec41 0b19 	vmov	d9, r0, r1
 8009004:	2200      	movs	r2, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fb05 	bl	8000618 <__aeabi_dmul>
 800900e:	4680      	mov	r8, r0
 8009010:	4689      	mov	r9, r1
 8009012:	e7c5      	b.n	8008fa0 <_dtoa_r+0x530>
 8009014:	ec51 0b17 	vmov	r0, r1, d7
 8009018:	f7f7 fafe 	bl	8000618 <__aeabi_dmul>
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	9d00      	ldr	r5, [sp, #0]
 8009020:	930f      	str	r3, [sp, #60]	; 0x3c
 8009022:	ec41 0b19 	vmov	d9, r0, r1
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	f7f7 fda5 	bl	8000b78 <__aeabi_d2iz>
 800902e:	4606      	mov	r6, r0
 8009030:	f7f7 fa88 	bl	8000544 <__aeabi_i2d>
 8009034:	3630      	adds	r6, #48	; 0x30
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f933 	bl	80002a8 <__aeabi_dsub>
 8009042:	f805 6b01 	strb.w	r6, [r5], #1
 8009046:	9b02      	ldr	r3, [sp, #8]
 8009048:	429d      	cmp	r5, r3
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	d124      	bne.n	800909e <_dtoa_r+0x62e>
 8009054:	4b1b      	ldr	r3, [pc, #108]	; (80090c4 <_dtoa_r+0x654>)
 8009056:	ec51 0b19 	vmov	r0, r1, d9
 800905a:	f7f7 f927 	bl	80002ac <__adddf3>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 fd67 	bl	8000b38 <__aeabi_dcmpgt>
 800906a:	2800      	cmp	r0, #0
 800906c:	d173      	bne.n	8009156 <_dtoa_r+0x6e6>
 800906e:	ec53 2b19 	vmov	r2, r3, d9
 8009072:	4914      	ldr	r1, [pc, #80]	; (80090c4 <_dtoa_r+0x654>)
 8009074:	2000      	movs	r0, #0
 8009076:	f7f7 f917 	bl	80002a8 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	f7f7 fd3b 	bl	8000afc <__aeabi_dcmplt>
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f af2f 	beq.w	8008eea <_dtoa_r+0x47a>
 800908c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800908e:	1e6b      	subs	r3, r5, #1
 8009090:	930f      	str	r3, [sp, #60]	; 0x3c
 8009092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009096:	2b30      	cmp	r3, #48	; 0x30
 8009098:	d0f8      	beq.n	800908c <_dtoa_r+0x61c>
 800909a:	46bb      	mov	fp, r7
 800909c:	e04a      	b.n	8009134 <_dtoa_r+0x6c4>
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <_dtoa_r+0x648>)
 80090a0:	f7f7 faba 	bl	8000618 <__aeabi_dmul>
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	e7bd      	b.n	8009026 <_dtoa_r+0x5b6>
 80090aa:	bf00      	nop
 80090ac:	0800e3a0 	.word	0x0800e3a0
 80090b0:	0800e378 	.word	0x0800e378
 80090b4:	3ff00000 	.word	0x3ff00000
 80090b8:	40240000 	.word	0x40240000
 80090bc:	401c0000 	.word	0x401c0000
 80090c0:	40140000 	.word	0x40140000
 80090c4:	3fe00000 	.word	0x3fe00000
 80090c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090cc:	9d00      	ldr	r5, [sp, #0]
 80090ce:	4642      	mov	r2, r8
 80090d0:	464b      	mov	r3, r9
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fbc9 	bl	800086c <__aeabi_ddiv>
 80090da:	f7f7 fd4d 	bl	8000b78 <__aeabi_d2iz>
 80090de:	9001      	str	r0, [sp, #4]
 80090e0:	f7f7 fa30 	bl	8000544 <__aeabi_i2d>
 80090e4:	4642      	mov	r2, r8
 80090e6:	464b      	mov	r3, r9
 80090e8:	f7f7 fa96 	bl	8000618 <__aeabi_dmul>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 f8d8 	bl	80002a8 <__aeabi_dsub>
 80090f8:	9e01      	ldr	r6, [sp, #4]
 80090fa:	9f04      	ldr	r7, [sp, #16]
 80090fc:	3630      	adds	r6, #48	; 0x30
 80090fe:	f805 6b01 	strb.w	r6, [r5], #1
 8009102:	9e00      	ldr	r6, [sp, #0]
 8009104:	1bae      	subs	r6, r5, r6
 8009106:	42b7      	cmp	r7, r6
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	d134      	bne.n	8009178 <_dtoa_r+0x708>
 800910e:	f7f7 f8cd 	bl	80002ac <__adddf3>
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	4606      	mov	r6, r0
 8009118:	460f      	mov	r7, r1
 800911a:	f7f7 fd0d 	bl	8000b38 <__aeabi_dcmpgt>
 800911e:	b9c8      	cbnz	r0, 8009154 <_dtoa_r+0x6e4>
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 fcde 	bl	8000ae8 <__aeabi_dcmpeq>
 800912c:	b110      	cbz	r0, 8009134 <_dtoa_r+0x6c4>
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	07db      	lsls	r3, r3, #31
 8009132:	d40f      	bmi.n	8009154 <_dtoa_r+0x6e4>
 8009134:	4651      	mov	r1, sl
 8009136:	4620      	mov	r0, r4
 8009138:	f000 ff36 	bl	8009fa8 <_Bfree>
 800913c:	2300      	movs	r3, #0
 800913e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009140:	702b      	strb	r3, [r5, #0]
 8009142:	f10b 0301 	add.w	r3, fp, #1
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800914a:	2b00      	cmp	r3, #0
 800914c:	f43f ace2 	beq.w	8008b14 <_dtoa_r+0xa4>
 8009150:	601d      	str	r5, [r3, #0]
 8009152:	e4df      	b.n	8008b14 <_dtoa_r+0xa4>
 8009154:	465f      	mov	r7, fp
 8009156:	462b      	mov	r3, r5
 8009158:	461d      	mov	r5, r3
 800915a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800915e:	2a39      	cmp	r2, #57	; 0x39
 8009160:	d106      	bne.n	8009170 <_dtoa_r+0x700>
 8009162:	9a00      	ldr	r2, [sp, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d1f7      	bne.n	8009158 <_dtoa_r+0x6e8>
 8009168:	9900      	ldr	r1, [sp, #0]
 800916a:	2230      	movs	r2, #48	; 0x30
 800916c:	3701      	adds	r7, #1
 800916e:	700a      	strb	r2, [r1, #0]
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	3201      	adds	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e790      	b.n	800909a <_dtoa_r+0x62a>
 8009178:	4ba3      	ldr	r3, [pc, #652]	; (8009408 <_dtoa_r+0x998>)
 800917a:	2200      	movs	r2, #0
 800917c:	f7f7 fa4c 	bl	8000618 <__aeabi_dmul>
 8009180:	2200      	movs	r2, #0
 8009182:	2300      	movs	r3, #0
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	f7f7 fcae 	bl	8000ae8 <__aeabi_dcmpeq>
 800918c:	2800      	cmp	r0, #0
 800918e:	d09e      	beq.n	80090ce <_dtoa_r+0x65e>
 8009190:	e7d0      	b.n	8009134 <_dtoa_r+0x6c4>
 8009192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009194:	2a00      	cmp	r2, #0
 8009196:	f000 80ca 	beq.w	800932e <_dtoa_r+0x8be>
 800919a:	9a07      	ldr	r2, [sp, #28]
 800919c:	2a01      	cmp	r2, #1
 800919e:	f300 80ad 	bgt.w	80092fc <_dtoa_r+0x88c>
 80091a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	f000 80a5 	beq.w	80092f4 <_dtoa_r+0x884>
 80091aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091ae:	9e08      	ldr	r6, [sp, #32]
 80091b0:	9d05      	ldr	r5, [sp, #20]
 80091b2:	9a05      	ldr	r2, [sp, #20]
 80091b4:	441a      	add	r2, r3
 80091b6:	9205      	str	r2, [sp, #20]
 80091b8:	9a06      	ldr	r2, [sp, #24]
 80091ba:	2101      	movs	r1, #1
 80091bc:	441a      	add	r2, r3
 80091be:	4620      	mov	r0, r4
 80091c0:	9206      	str	r2, [sp, #24]
 80091c2:	f000 fff1 	bl	800a1a8 <__i2b>
 80091c6:	4607      	mov	r7, r0
 80091c8:	b165      	cbz	r5, 80091e4 <_dtoa_r+0x774>
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd09      	ble.n	80091e4 <_dtoa_r+0x774>
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	9a05      	ldr	r2, [sp, #20]
 80091d4:	bfa8      	it	ge
 80091d6:	462b      	movge	r3, r5
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	9205      	str	r2, [sp, #20]
 80091dc:	9a06      	ldr	r2, [sp, #24]
 80091de:	1aed      	subs	r5, r5, r3
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	9306      	str	r3, [sp, #24]
 80091e4:	9b08      	ldr	r3, [sp, #32]
 80091e6:	b1f3      	cbz	r3, 8009226 <_dtoa_r+0x7b6>
 80091e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 80a3 	beq.w	8009336 <_dtoa_r+0x8c6>
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	dd10      	ble.n	8009216 <_dtoa_r+0x7a6>
 80091f4:	4639      	mov	r1, r7
 80091f6:	4632      	mov	r2, r6
 80091f8:	4620      	mov	r0, r4
 80091fa:	f001 f895 	bl	800a328 <__pow5mult>
 80091fe:	4652      	mov	r2, sl
 8009200:	4601      	mov	r1, r0
 8009202:	4607      	mov	r7, r0
 8009204:	4620      	mov	r0, r4
 8009206:	f000 ffe5 	bl	800a1d4 <__multiply>
 800920a:	4651      	mov	r1, sl
 800920c:	4680      	mov	r8, r0
 800920e:	4620      	mov	r0, r4
 8009210:	f000 feca 	bl	8009fa8 <_Bfree>
 8009214:	46c2      	mov	sl, r8
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	1b9a      	subs	r2, r3, r6
 800921a:	d004      	beq.n	8009226 <_dtoa_r+0x7b6>
 800921c:	4651      	mov	r1, sl
 800921e:	4620      	mov	r0, r4
 8009220:	f001 f882 	bl	800a328 <__pow5mult>
 8009224:	4682      	mov	sl, r0
 8009226:	2101      	movs	r1, #1
 8009228:	4620      	mov	r0, r4
 800922a:	f000 ffbd 	bl	800a1a8 <__i2b>
 800922e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009230:	2b00      	cmp	r3, #0
 8009232:	4606      	mov	r6, r0
 8009234:	f340 8081 	ble.w	800933a <_dtoa_r+0x8ca>
 8009238:	461a      	mov	r2, r3
 800923a:	4601      	mov	r1, r0
 800923c:	4620      	mov	r0, r4
 800923e:	f001 f873 	bl	800a328 <__pow5mult>
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	2b01      	cmp	r3, #1
 8009246:	4606      	mov	r6, r0
 8009248:	dd7a      	ble.n	8009340 <_dtoa_r+0x8d0>
 800924a:	f04f 0800 	mov.w	r8, #0
 800924e:	6933      	ldr	r3, [r6, #16]
 8009250:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009254:	6918      	ldr	r0, [r3, #16]
 8009256:	f000 ff59 	bl	800a10c <__hi0bits>
 800925a:	f1c0 0020 	rsb	r0, r0, #32
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	4418      	add	r0, r3
 8009262:	f010 001f 	ands.w	r0, r0, #31
 8009266:	f000 8094 	beq.w	8009392 <_dtoa_r+0x922>
 800926a:	f1c0 0320 	rsb	r3, r0, #32
 800926e:	2b04      	cmp	r3, #4
 8009270:	f340 8085 	ble.w	800937e <_dtoa_r+0x90e>
 8009274:	9b05      	ldr	r3, [sp, #20]
 8009276:	f1c0 001c 	rsb	r0, r0, #28
 800927a:	4403      	add	r3, r0
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	4403      	add	r3, r0
 8009282:	4405      	add	r5, r0
 8009284:	9306      	str	r3, [sp, #24]
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	dd05      	ble.n	8009298 <_dtoa_r+0x828>
 800928c:	4651      	mov	r1, sl
 800928e:	461a      	mov	r2, r3
 8009290:	4620      	mov	r0, r4
 8009292:	f001 f8a3 	bl	800a3dc <__lshift>
 8009296:	4682      	mov	sl, r0
 8009298:	9b06      	ldr	r3, [sp, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dd05      	ble.n	80092aa <_dtoa_r+0x83a>
 800929e:	4631      	mov	r1, r6
 80092a0:	461a      	mov	r2, r3
 80092a2:	4620      	mov	r0, r4
 80092a4:	f001 f89a 	bl	800a3dc <__lshift>
 80092a8:	4606      	mov	r6, r0
 80092aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d072      	beq.n	8009396 <_dtoa_r+0x926>
 80092b0:	4631      	mov	r1, r6
 80092b2:	4650      	mov	r0, sl
 80092b4:	f001 f8fe 	bl	800a4b4 <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	da6c      	bge.n	8009396 <_dtoa_r+0x926>
 80092bc:	2300      	movs	r3, #0
 80092be:	4651      	mov	r1, sl
 80092c0:	220a      	movs	r2, #10
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fe92 	bl	8009fec <__multadd>
 80092c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092ce:	4682      	mov	sl, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 81b0 	beq.w	8009636 <_dtoa_r+0xbc6>
 80092d6:	2300      	movs	r3, #0
 80092d8:	4639      	mov	r1, r7
 80092da:	220a      	movs	r2, #10
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 fe85 	bl	8009fec <__multadd>
 80092e2:	9b01      	ldr	r3, [sp, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	4607      	mov	r7, r0
 80092e8:	f300 8096 	bgt.w	8009418 <_dtoa_r+0x9a8>
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dc59      	bgt.n	80093a6 <_dtoa_r+0x936>
 80092f2:	e091      	b.n	8009418 <_dtoa_r+0x9a8>
 80092f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092fa:	e758      	b.n	80091ae <_dtoa_r+0x73e>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	1e5e      	subs	r6, r3, #1
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	42b3      	cmp	r3, r6
 8009304:	bfbf      	itttt	lt
 8009306:	9b08      	ldrlt	r3, [sp, #32]
 8009308:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800930a:	9608      	strlt	r6, [sp, #32]
 800930c:	1af3      	sublt	r3, r6, r3
 800930e:	bfb4      	ite	lt
 8009310:	18d2      	addlt	r2, r2, r3
 8009312:	1b9e      	subge	r6, r3, r6
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	bfbc      	itt	lt
 8009318:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800931a:	2600      	movlt	r6, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfb7      	itett	lt
 8009320:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009324:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009328:	1a9d      	sublt	r5, r3, r2
 800932a:	2300      	movlt	r3, #0
 800932c:	e741      	b.n	80091b2 <_dtoa_r+0x742>
 800932e:	9e08      	ldr	r6, [sp, #32]
 8009330:	9d05      	ldr	r5, [sp, #20]
 8009332:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009334:	e748      	b.n	80091c8 <_dtoa_r+0x758>
 8009336:	9a08      	ldr	r2, [sp, #32]
 8009338:	e770      	b.n	800921c <_dtoa_r+0x7ac>
 800933a:	9b07      	ldr	r3, [sp, #28]
 800933c:	2b01      	cmp	r3, #1
 800933e:	dc19      	bgt.n	8009374 <_dtoa_r+0x904>
 8009340:	9b02      	ldr	r3, [sp, #8]
 8009342:	b9bb      	cbnz	r3, 8009374 <_dtoa_r+0x904>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800934a:	b99b      	cbnz	r3, 8009374 <_dtoa_r+0x904>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009352:	0d1b      	lsrs	r3, r3, #20
 8009354:	051b      	lsls	r3, r3, #20
 8009356:	b183      	cbz	r3, 800937a <_dtoa_r+0x90a>
 8009358:	9b05      	ldr	r3, [sp, #20]
 800935a:	3301      	adds	r3, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	9b06      	ldr	r3, [sp, #24]
 8009360:	3301      	adds	r3, #1
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	f04f 0801 	mov.w	r8, #1
 8009368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f af6f 	bne.w	800924e <_dtoa_r+0x7de>
 8009370:	2001      	movs	r0, #1
 8009372:	e774      	b.n	800925e <_dtoa_r+0x7ee>
 8009374:	f04f 0800 	mov.w	r8, #0
 8009378:	e7f6      	b.n	8009368 <_dtoa_r+0x8f8>
 800937a:	4698      	mov	r8, r3
 800937c:	e7f4      	b.n	8009368 <_dtoa_r+0x8f8>
 800937e:	d082      	beq.n	8009286 <_dtoa_r+0x816>
 8009380:	9a05      	ldr	r2, [sp, #20]
 8009382:	331c      	adds	r3, #28
 8009384:	441a      	add	r2, r3
 8009386:	9205      	str	r2, [sp, #20]
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	441a      	add	r2, r3
 800938c:	441d      	add	r5, r3
 800938e:	9206      	str	r2, [sp, #24]
 8009390:	e779      	b.n	8009286 <_dtoa_r+0x816>
 8009392:	4603      	mov	r3, r0
 8009394:	e7f4      	b.n	8009380 <_dtoa_r+0x910>
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dc37      	bgt.n	800940c <_dtoa_r+0x99c>
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	dd34      	ble.n	800940c <_dtoa_r+0x99c>
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	9b01      	ldr	r3, [sp, #4]
 80093a8:	b963      	cbnz	r3, 80093c4 <_dtoa_r+0x954>
 80093aa:	4631      	mov	r1, r6
 80093ac:	2205      	movs	r2, #5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fe1c 	bl	8009fec <__multadd>
 80093b4:	4601      	mov	r1, r0
 80093b6:	4606      	mov	r6, r0
 80093b8:	4650      	mov	r0, sl
 80093ba:	f001 f87b 	bl	800a4b4 <__mcmp>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f73f adbb 	bgt.w	8008f3a <_dtoa_r+0x4ca>
 80093c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c6:	9d00      	ldr	r5, [sp, #0]
 80093c8:	ea6f 0b03 	mvn.w	fp, r3
 80093cc:	f04f 0800 	mov.w	r8, #0
 80093d0:	4631      	mov	r1, r6
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 fde8 	bl	8009fa8 <_Bfree>
 80093d8:	2f00      	cmp	r7, #0
 80093da:	f43f aeab 	beq.w	8009134 <_dtoa_r+0x6c4>
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	d005      	beq.n	80093f0 <_dtoa_r+0x980>
 80093e4:	45b8      	cmp	r8, r7
 80093e6:	d003      	beq.n	80093f0 <_dtoa_r+0x980>
 80093e8:	4641      	mov	r1, r8
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fddc 	bl	8009fa8 <_Bfree>
 80093f0:	4639      	mov	r1, r7
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fdd8 	bl	8009fa8 <_Bfree>
 80093f8:	e69c      	b.n	8009134 <_dtoa_r+0x6c4>
 80093fa:	2600      	movs	r6, #0
 80093fc:	4637      	mov	r7, r6
 80093fe:	e7e1      	b.n	80093c4 <_dtoa_r+0x954>
 8009400:	46bb      	mov	fp, r7
 8009402:	4637      	mov	r7, r6
 8009404:	e599      	b.n	8008f3a <_dtoa_r+0x4ca>
 8009406:	bf00      	nop
 8009408:	40240000 	.word	0x40240000
 800940c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80c8 	beq.w	80095a4 <_dtoa_r+0xb34>
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	2d00      	cmp	r5, #0
 800941a:	dd05      	ble.n	8009428 <_dtoa_r+0x9b8>
 800941c:	4639      	mov	r1, r7
 800941e:	462a      	mov	r2, r5
 8009420:	4620      	mov	r0, r4
 8009422:	f000 ffdb 	bl	800a3dc <__lshift>
 8009426:	4607      	mov	r7, r0
 8009428:	f1b8 0f00 	cmp.w	r8, #0
 800942c:	d05b      	beq.n	80094e6 <_dtoa_r+0xa76>
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fd79 	bl	8009f28 <_Balloc>
 8009436:	4605      	mov	r5, r0
 8009438:	b928      	cbnz	r0, 8009446 <_dtoa_r+0x9d6>
 800943a:	4b83      	ldr	r3, [pc, #524]	; (8009648 <_dtoa_r+0xbd8>)
 800943c:	4602      	mov	r2, r0
 800943e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009442:	f7ff bb2e 	b.w	8008aa2 <_dtoa_r+0x32>
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	3202      	adds	r2, #2
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	f107 010c 	add.w	r1, r7, #12
 8009450:	300c      	adds	r0, #12
 8009452:	f7ff fa4f 	bl	80088f4 <memcpy>
 8009456:	2201      	movs	r2, #1
 8009458:	4629      	mov	r1, r5
 800945a:	4620      	mov	r0, r4
 800945c:	f000 ffbe 	bl	800a3dc <__lshift>
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800946a:	4413      	add	r3, r2
 800946c:	9308      	str	r3, [sp, #32]
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	46b8      	mov	r8, r7
 8009476:	9306      	str	r3, [sp, #24]
 8009478:	4607      	mov	r7, r0
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	4631      	mov	r1, r6
 800947e:	3b01      	subs	r3, #1
 8009480:	4650      	mov	r0, sl
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	f7ff fa6a 	bl	800895c <quorem>
 8009488:	4641      	mov	r1, r8
 800948a:	9002      	str	r0, [sp, #8]
 800948c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009490:	4650      	mov	r0, sl
 8009492:	f001 f80f 	bl	800a4b4 <__mcmp>
 8009496:	463a      	mov	r2, r7
 8009498:	9005      	str	r0, [sp, #20]
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	f001 f825 	bl	800a4ec <__mdiff>
 80094a2:	68c2      	ldr	r2, [r0, #12]
 80094a4:	4605      	mov	r5, r0
 80094a6:	bb02      	cbnz	r2, 80094ea <_dtoa_r+0xa7a>
 80094a8:	4601      	mov	r1, r0
 80094aa:	4650      	mov	r0, sl
 80094ac:	f001 f802 	bl	800a4b4 <__mcmp>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4629      	mov	r1, r5
 80094b4:	4620      	mov	r0, r4
 80094b6:	9209      	str	r2, [sp, #36]	; 0x24
 80094b8:	f000 fd76 	bl	8009fa8 <_Bfree>
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c0:	9d04      	ldr	r5, [sp, #16]
 80094c2:	ea43 0102 	orr.w	r1, r3, r2
 80094c6:	9b06      	ldr	r3, [sp, #24]
 80094c8:	4319      	orrs	r1, r3
 80094ca:	d110      	bne.n	80094ee <_dtoa_r+0xa7e>
 80094cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094d0:	d029      	beq.n	8009526 <_dtoa_r+0xab6>
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	dd02      	ble.n	80094de <_dtoa_r+0xa6e>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	f883 9000 	strb.w	r9, [r3]
 80094e4:	e774      	b.n	80093d0 <_dtoa_r+0x960>
 80094e6:	4638      	mov	r0, r7
 80094e8:	e7ba      	b.n	8009460 <_dtoa_r+0x9f0>
 80094ea:	2201      	movs	r2, #1
 80094ec:	e7e1      	b.n	80094b2 <_dtoa_r+0xa42>
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	db04      	blt.n	80094fe <_dtoa_r+0xa8e>
 80094f4:	9907      	ldr	r1, [sp, #28]
 80094f6:	430b      	orrs	r3, r1
 80094f8:	9906      	ldr	r1, [sp, #24]
 80094fa:	430b      	orrs	r3, r1
 80094fc:	d120      	bne.n	8009540 <_dtoa_r+0xad0>
 80094fe:	2a00      	cmp	r2, #0
 8009500:	dded      	ble.n	80094de <_dtoa_r+0xa6e>
 8009502:	4651      	mov	r1, sl
 8009504:	2201      	movs	r2, #1
 8009506:	4620      	mov	r0, r4
 8009508:	f000 ff68 	bl	800a3dc <__lshift>
 800950c:	4631      	mov	r1, r6
 800950e:	4682      	mov	sl, r0
 8009510:	f000 ffd0 	bl	800a4b4 <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	dc03      	bgt.n	8009520 <_dtoa_r+0xab0>
 8009518:	d1e1      	bne.n	80094de <_dtoa_r+0xa6e>
 800951a:	f019 0f01 	tst.w	r9, #1
 800951e:	d0de      	beq.n	80094de <_dtoa_r+0xa6e>
 8009520:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009524:	d1d8      	bne.n	80094d8 <_dtoa_r+0xa68>
 8009526:	9a01      	ldr	r2, [sp, #4]
 8009528:	2339      	movs	r3, #57	; 0x39
 800952a:	7013      	strb	r3, [r2, #0]
 800952c:	462b      	mov	r3, r5
 800952e:	461d      	mov	r5, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009536:	2a39      	cmp	r2, #57	; 0x39
 8009538:	d06c      	beq.n	8009614 <_dtoa_r+0xba4>
 800953a:	3201      	adds	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	e747      	b.n	80093d0 <_dtoa_r+0x960>
 8009540:	2a00      	cmp	r2, #0
 8009542:	dd07      	ble.n	8009554 <_dtoa_r+0xae4>
 8009544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009548:	d0ed      	beq.n	8009526 <_dtoa_r+0xab6>
 800954a:	9a01      	ldr	r2, [sp, #4]
 800954c:	f109 0301 	add.w	r3, r9, #1
 8009550:	7013      	strb	r3, [r2, #0]
 8009552:	e73d      	b.n	80093d0 <_dtoa_r+0x960>
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	9a08      	ldr	r2, [sp, #32]
 8009558:	f803 9c01 	strb.w	r9, [r3, #-1]
 800955c:	4293      	cmp	r3, r2
 800955e:	d043      	beq.n	80095e8 <_dtoa_r+0xb78>
 8009560:	4651      	mov	r1, sl
 8009562:	2300      	movs	r3, #0
 8009564:	220a      	movs	r2, #10
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fd40 	bl	8009fec <__multadd>
 800956c:	45b8      	cmp	r8, r7
 800956e:	4682      	mov	sl, r0
 8009570:	f04f 0300 	mov.w	r3, #0
 8009574:	f04f 020a 	mov.w	r2, #10
 8009578:	4641      	mov	r1, r8
 800957a:	4620      	mov	r0, r4
 800957c:	d107      	bne.n	800958e <_dtoa_r+0xb1e>
 800957e:	f000 fd35 	bl	8009fec <__multadd>
 8009582:	4680      	mov	r8, r0
 8009584:	4607      	mov	r7, r0
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	3301      	adds	r3, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	e775      	b.n	800947a <_dtoa_r+0xa0a>
 800958e:	f000 fd2d 	bl	8009fec <__multadd>
 8009592:	4639      	mov	r1, r7
 8009594:	4680      	mov	r8, r0
 8009596:	2300      	movs	r3, #0
 8009598:	220a      	movs	r2, #10
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fd26 	bl	8009fec <__multadd>
 80095a0:	4607      	mov	r7, r0
 80095a2:	e7f0      	b.n	8009586 <_dtoa_r+0xb16>
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	9d00      	ldr	r5, [sp, #0]
 80095aa:	4631      	mov	r1, r6
 80095ac:	4650      	mov	r0, sl
 80095ae:	f7ff f9d5 	bl	800895c <quorem>
 80095b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	f805 9b01 	strb.w	r9, [r5], #1
 80095bc:	1aea      	subs	r2, r5, r3
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	dd07      	ble.n	80095d4 <_dtoa_r+0xb64>
 80095c4:	4651      	mov	r1, sl
 80095c6:	2300      	movs	r3, #0
 80095c8:	220a      	movs	r2, #10
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fd0e 	bl	8009fec <__multadd>
 80095d0:	4682      	mov	sl, r0
 80095d2:	e7ea      	b.n	80095aa <_dtoa_r+0xb3a>
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfc8      	it	gt
 80095da:	461d      	movgt	r5, r3
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	bfd8      	it	le
 80095e0:	2501      	movle	r5, #1
 80095e2:	441d      	add	r5, r3
 80095e4:	f04f 0800 	mov.w	r8, #0
 80095e8:	4651      	mov	r1, sl
 80095ea:	2201      	movs	r2, #1
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fef5 	bl	800a3dc <__lshift>
 80095f2:	4631      	mov	r1, r6
 80095f4:	4682      	mov	sl, r0
 80095f6:	f000 ff5d 	bl	800a4b4 <__mcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	dc96      	bgt.n	800952c <_dtoa_r+0xabc>
 80095fe:	d102      	bne.n	8009606 <_dtoa_r+0xb96>
 8009600:	f019 0f01 	tst.w	r9, #1
 8009604:	d192      	bne.n	800952c <_dtoa_r+0xabc>
 8009606:	462b      	mov	r3, r5
 8009608:	461d      	mov	r5, r3
 800960a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800960e:	2a30      	cmp	r2, #48	; 0x30
 8009610:	d0fa      	beq.n	8009608 <_dtoa_r+0xb98>
 8009612:	e6dd      	b.n	80093d0 <_dtoa_r+0x960>
 8009614:	9a00      	ldr	r2, [sp, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d189      	bne.n	800952e <_dtoa_r+0xabe>
 800961a:	f10b 0b01 	add.w	fp, fp, #1
 800961e:	2331      	movs	r3, #49	; 0x31
 8009620:	e796      	b.n	8009550 <_dtoa_r+0xae0>
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <_dtoa_r+0xbdc>)
 8009624:	f7ff ba99 	b.w	8008b5a <_dtoa_r+0xea>
 8009628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800962a:	2b00      	cmp	r3, #0
 800962c:	f47f aa6d 	bne.w	8008b0a <_dtoa_r+0x9a>
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <_dtoa_r+0xbe0>)
 8009632:	f7ff ba92 	b.w	8008b5a <_dtoa_r+0xea>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	dcb5      	bgt.n	80095a8 <_dtoa_r+0xb38>
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	2b02      	cmp	r3, #2
 8009640:	f73f aeb1 	bgt.w	80093a6 <_dtoa_r+0x936>
 8009644:	e7b0      	b.n	80095a8 <_dtoa_r+0xb38>
 8009646:	bf00      	nop
 8009648:	0800e2ab 	.word	0x0800e2ab
 800964c:	0800e16d 	.word	0x0800e16d
 8009650:	0800e246 	.word	0x0800e246

08009654 <_free_r>:
 8009654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009656:	2900      	cmp	r1, #0
 8009658:	d044      	beq.n	80096e4 <_free_r+0x90>
 800965a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965e:	9001      	str	r0, [sp, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f1a1 0404 	sub.w	r4, r1, #4
 8009666:	bfb8      	it	lt
 8009668:	18e4      	addlt	r4, r4, r3
 800966a:	f000 fc51 	bl	8009f10 <__malloc_lock>
 800966e:	4a1e      	ldr	r2, [pc, #120]	; (80096e8 <_free_r+0x94>)
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	b933      	cbnz	r3, 8009684 <_free_r+0x30>
 8009676:	6063      	str	r3, [r4, #4]
 8009678:	6014      	str	r4, [r2, #0]
 800967a:	b003      	add	sp, #12
 800967c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009680:	f000 bc4c 	b.w	8009f1c <__malloc_unlock>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d908      	bls.n	800969a <_free_r+0x46>
 8009688:	6825      	ldr	r5, [r4, #0]
 800968a:	1961      	adds	r1, r4, r5
 800968c:	428b      	cmp	r3, r1
 800968e:	bf01      	itttt	eq
 8009690:	6819      	ldreq	r1, [r3, #0]
 8009692:	685b      	ldreq	r3, [r3, #4]
 8009694:	1949      	addeq	r1, r1, r5
 8009696:	6021      	streq	r1, [r4, #0]
 8009698:	e7ed      	b.n	8009676 <_free_r+0x22>
 800969a:	461a      	mov	r2, r3
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	b10b      	cbz	r3, 80096a4 <_free_r+0x50>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d9fa      	bls.n	800969a <_free_r+0x46>
 80096a4:	6811      	ldr	r1, [r2, #0]
 80096a6:	1855      	adds	r5, r2, r1
 80096a8:	42a5      	cmp	r5, r4
 80096aa:	d10b      	bne.n	80096c4 <_free_r+0x70>
 80096ac:	6824      	ldr	r4, [r4, #0]
 80096ae:	4421      	add	r1, r4
 80096b0:	1854      	adds	r4, r2, r1
 80096b2:	42a3      	cmp	r3, r4
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	d1e0      	bne.n	800967a <_free_r+0x26>
 80096b8:	681c      	ldr	r4, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	6053      	str	r3, [r2, #4]
 80096be:	440c      	add	r4, r1
 80096c0:	6014      	str	r4, [r2, #0]
 80096c2:	e7da      	b.n	800967a <_free_r+0x26>
 80096c4:	d902      	bls.n	80096cc <_free_r+0x78>
 80096c6:	230c      	movs	r3, #12
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	e7d6      	b.n	800967a <_free_r+0x26>
 80096cc:	6825      	ldr	r5, [r4, #0]
 80096ce:	1961      	adds	r1, r4, r5
 80096d0:	428b      	cmp	r3, r1
 80096d2:	bf04      	itt	eq
 80096d4:	6819      	ldreq	r1, [r3, #0]
 80096d6:	685b      	ldreq	r3, [r3, #4]
 80096d8:	6063      	str	r3, [r4, #4]
 80096da:	bf04      	itt	eq
 80096dc:	1949      	addeq	r1, r1, r5
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	6054      	str	r4, [r2, #4]
 80096e2:	e7ca      	b.n	800967a <_free_r+0x26>
 80096e4:	b003      	add	sp, #12
 80096e6:	bd30      	pop	{r4, r5, pc}
 80096e8:	20000fb4 	.word	0x20000fb4

080096ec <rshift>:
 80096ec:	6903      	ldr	r3, [r0, #16]
 80096ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096fa:	f100 0414 	add.w	r4, r0, #20
 80096fe:	dd45      	ble.n	800978c <rshift+0xa0>
 8009700:	f011 011f 	ands.w	r1, r1, #31
 8009704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800970c:	d10c      	bne.n	8009728 <rshift+0x3c>
 800970e:	f100 0710 	add.w	r7, r0, #16
 8009712:	4629      	mov	r1, r5
 8009714:	42b1      	cmp	r1, r6
 8009716:	d334      	bcc.n	8009782 <rshift+0x96>
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	1eea      	subs	r2, r5, #3
 800971e:	4296      	cmp	r6, r2
 8009720:	bf38      	it	cc
 8009722:	2300      	movcc	r3, #0
 8009724:	4423      	add	r3, r4
 8009726:	e015      	b.n	8009754 <rshift+0x68>
 8009728:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800972c:	f1c1 0820 	rsb	r8, r1, #32
 8009730:	40cf      	lsrs	r7, r1
 8009732:	f105 0e04 	add.w	lr, r5, #4
 8009736:	46a1      	mov	r9, r4
 8009738:	4576      	cmp	r6, lr
 800973a:	46f4      	mov	ip, lr
 800973c:	d815      	bhi.n	800976a <rshift+0x7e>
 800973e:	1a9a      	subs	r2, r3, r2
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	3a04      	subs	r2, #4
 8009744:	3501      	adds	r5, #1
 8009746:	42ae      	cmp	r6, r5
 8009748:	bf38      	it	cc
 800974a:	2200      	movcc	r2, #0
 800974c:	18a3      	adds	r3, r4, r2
 800974e:	50a7      	str	r7, [r4, r2]
 8009750:	b107      	cbz	r7, 8009754 <rshift+0x68>
 8009752:	3304      	adds	r3, #4
 8009754:	1b1a      	subs	r2, r3, r4
 8009756:	42a3      	cmp	r3, r4
 8009758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800975c:	bf08      	it	eq
 800975e:	2300      	moveq	r3, #0
 8009760:	6102      	str	r2, [r0, #16]
 8009762:	bf08      	it	eq
 8009764:	6143      	streq	r3, [r0, #20]
 8009766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800976a:	f8dc c000 	ldr.w	ip, [ip]
 800976e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009772:	ea4c 0707 	orr.w	r7, ip, r7
 8009776:	f849 7b04 	str.w	r7, [r9], #4
 800977a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800977e:	40cf      	lsrs	r7, r1
 8009780:	e7da      	b.n	8009738 <rshift+0x4c>
 8009782:	f851 cb04 	ldr.w	ip, [r1], #4
 8009786:	f847 cf04 	str.w	ip, [r7, #4]!
 800978a:	e7c3      	b.n	8009714 <rshift+0x28>
 800978c:	4623      	mov	r3, r4
 800978e:	e7e1      	b.n	8009754 <rshift+0x68>

08009790 <__hexdig_fun>:
 8009790:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009794:	2b09      	cmp	r3, #9
 8009796:	d802      	bhi.n	800979e <__hexdig_fun+0xe>
 8009798:	3820      	subs	r0, #32
 800979a:	b2c0      	uxtb	r0, r0
 800979c:	4770      	bx	lr
 800979e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d801      	bhi.n	80097aa <__hexdig_fun+0x1a>
 80097a6:	3847      	subs	r0, #71	; 0x47
 80097a8:	e7f7      	b.n	800979a <__hexdig_fun+0xa>
 80097aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097ae:	2b05      	cmp	r3, #5
 80097b0:	d801      	bhi.n	80097b6 <__hexdig_fun+0x26>
 80097b2:	3827      	subs	r0, #39	; 0x27
 80097b4:	e7f1      	b.n	800979a <__hexdig_fun+0xa>
 80097b6:	2000      	movs	r0, #0
 80097b8:	4770      	bx	lr
	...

080097bc <__gethex>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	4617      	mov	r7, r2
 80097c2:	680a      	ldr	r2, [r1, #0]
 80097c4:	b085      	sub	sp, #20
 80097c6:	f102 0b02 	add.w	fp, r2, #2
 80097ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097d2:	4681      	mov	r9, r0
 80097d4:	468a      	mov	sl, r1
 80097d6:	9302      	str	r3, [sp, #8]
 80097d8:	32fe      	adds	r2, #254	; 0xfe
 80097da:	eb02 030b 	add.w	r3, r2, fp
 80097de:	46d8      	mov	r8, fp
 80097e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	2830      	cmp	r0, #48	; 0x30
 80097e8:	d0f7      	beq.n	80097da <__gethex+0x1e>
 80097ea:	f7ff ffd1 	bl	8009790 <__hexdig_fun>
 80097ee:	4604      	mov	r4, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d138      	bne.n	8009866 <__gethex+0xaa>
 80097f4:	49a7      	ldr	r1, [pc, #668]	; (8009a94 <__gethex+0x2d8>)
 80097f6:	2201      	movs	r2, #1
 80097f8:	4640      	mov	r0, r8
 80097fa:	f7fe ff84 	bl	8008706 <strncmp>
 80097fe:	4606      	mov	r6, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	d169      	bne.n	80098d8 <__gethex+0x11c>
 8009804:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009808:	465d      	mov	r5, fp
 800980a:	f7ff ffc1 	bl	8009790 <__hexdig_fun>
 800980e:	2800      	cmp	r0, #0
 8009810:	d064      	beq.n	80098dc <__gethex+0x120>
 8009812:	465a      	mov	r2, fp
 8009814:	7810      	ldrb	r0, [r2, #0]
 8009816:	2830      	cmp	r0, #48	; 0x30
 8009818:	4690      	mov	r8, r2
 800981a:	f102 0201 	add.w	r2, r2, #1
 800981e:	d0f9      	beq.n	8009814 <__gethex+0x58>
 8009820:	f7ff ffb6 	bl	8009790 <__hexdig_fun>
 8009824:	2301      	movs	r3, #1
 8009826:	fab0 f480 	clz	r4, r0
 800982a:	0964      	lsrs	r4, r4, #5
 800982c:	465e      	mov	r6, fp
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	4642      	mov	r2, r8
 8009832:	4615      	mov	r5, r2
 8009834:	3201      	adds	r2, #1
 8009836:	7828      	ldrb	r0, [r5, #0]
 8009838:	f7ff ffaa 	bl	8009790 <__hexdig_fun>
 800983c:	2800      	cmp	r0, #0
 800983e:	d1f8      	bne.n	8009832 <__gethex+0x76>
 8009840:	4994      	ldr	r1, [pc, #592]	; (8009a94 <__gethex+0x2d8>)
 8009842:	2201      	movs	r2, #1
 8009844:	4628      	mov	r0, r5
 8009846:	f7fe ff5e 	bl	8008706 <strncmp>
 800984a:	b978      	cbnz	r0, 800986c <__gethex+0xb0>
 800984c:	b946      	cbnz	r6, 8009860 <__gethex+0xa4>
 800984e:	1c6e      	adds	r6, r5, #1
 8009850:	4632      	mov	r2, r6
 8009852:	4615      	mov	r5, r2
 8009854:	3201      	adds	r2, #1
 8009856:	7828      	ldrb	r0, [r5, #0]
 8009858:	f7ff ff9a 	bl	8009790 <__hexdig_fun>
 800985c:	2800      	cmp	r0, #0
 800985e:	d1f8      	bne.n	8009852 <__gethex+0x96>
 8009860:	1b73      	subs	r3, r6, r5
 8009862:	009e      	lsls	r6, r3, #2
 8009864:	e004      	b.n	8009870 <__gethex+0xb4>
 8009866:	2400      	movs	r4, #0
 8009868:	4626      	mov	r6, r4
 800986a:	e7e1      	b.n	8009830 <__gethex+0x74>
 800986c:	2e00      	cmp	r6, #0
 800986e:	d1f7      	bne.n	8009860 <__gethex+0xa4>
 8009870:	782b      	ldrb	r3, [r5, #0]
 8009872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009876:	2b50      	cmp	r3, #80	; 0x50
 8009878:	d13d      	bne.n	80098f6 <__gethex+0x13a>
 800987a:	786b      	ldrb	r3, [r5, #1]
 800987c:	2b2b      	cmp	r3, #43	; 0x2b
 800987e:	d02f      	beq.n	80098e0 <__gethex+0x124>
 8009880:	2b2d      	cmp	r3, #45	; 0x2d
 8009882:	d031      	beq.n	80098e8 <__gethex+0x12c>
 8009884:	1c69      	adds	r1, r5, #1
 8009886:	f04f 0b00 	mov.w	fp, #0
 800988a:	7808      	ldrb	r0, [r1, #0]
 800988c:	f7ff ff80 	bl	8009790 <__hexdig_fun>
 8009890:	1e42      	subs	r2, r0, #1
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	2a18      	cmp	r2, #24
 8009896:	d82e      	bhi.n	80098f6 <__gethex+0x13a>
 8009898:	f1a0 0210 	sub.w	r2, r0, #16
 800989c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098a0:	f7ff ff76 	bl	8009790 <__hexdig_fun>
 80098a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80098a8:	fa5f fc8c 	uxtb.w	ip, ip
 80098ac:	f1bc 0f18 	cmp.w	ip, #24
 80098b0:	d91d      	bls.n	80098ee <__gethex+0x132>
 80098b2:	f1bb 0f00 	cmp.w	fp, #0
 80098b6:	d000      	beq.n	80098ba <__gethex+0xfe>
 80098b8:	4252      	negs	r2, r2
 80098ba:	4416      	add	r6, r2
 80098bc:	f8ca 1000 	str.w	r1, [sl]
 80098c0:	b1dc      	cbz	r4, 80098fa <__gethex+0x13e>
 80098c2:	9b01      	ldr	r3, [sp, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	bf14      	ite	ne
 80098c8:	f04f 0800 	movne.w	r8, #0
 80098cc:	f04f 0806 	moveq.w	r8, #6
 80098d0:	4640      	mov	r0, r8
 80098d2:	b005      	add	sp, #20
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	4645      	mov	r5, r8
 80098da:	4626      	mov	r6, r4
 80098dc:	2401      	movs	r4, #1
 80098de:	e7c7      	b.n	8009870 <__gethex+0xb4>
 80098e0:	f04f 0b00 	mov.w	fp, #0
 80098e4:	1ca9      	adds	r1, r5, #2
 80098e6:	e7d0      	b.n	800988a <__gethex+0xce>
 80098e8:	f04f 0b01 	mov.w	fp, #1
 80098ec:	e7fa      	b.n	80098e4 <__gethex+0x128>
 80098ee:	230a      	movs	r3, #10
 80098f0:	fb03 0002 	mla	r0, r3, r2, r0
 80098f4:	e7d0      	b.n	8009898 <__gethex+0xdc>
 80098f6:	4629      	mov	r1, r5
 80098f8:	e7e0      	b.n	80098bc <__gethex+0x100>
 80098fa:	eba5 0308 	sub.w	r3, r5, r8
 80098fe:	3b01      	subs	r3, #1
 8009900:	4621      	mov	r1, r4
 8009902:	2b07      	cmp	r3, #7
 8009904:	dc0a      	bgt.n	800991c <__gethex+0x160>
 8009906:	4648      	mov	r0, r9
 8009908:	f000 fb0e 	bl	8009f28 <_Balloc>
 800990c:	4604      	mov	r4, r0
 800990e:	b940      	cbnz	r0, 8009922 <__gethex+0x166>
 8009910:	4b61      	ldr	r3, [pc, #388]	; (8009a98 <__gethex+0x2dc>)
 8009912:	4602      	mov	r2, r0
 8009914:	21e4      	movs	r1, #228	; 0xe4
 8009916:	4861      	ldr	r0, [pc, #388]	; (8009a9c <__gethex+0x2e0>)
 8009918:	f7ff f802 	bl	8008920 <__assert_func>
 800991c:	3101      	adds	r1, #1
 800991e:	105b      	asrs	r3, r3, #1
 8009920:	e7ef      	b.n	8009902 <__gethex+0x146>
 8009922:	f100 0a14 	add.w	sl, r0, #20
 8009926:	2300      	movs	r3, #0
 8009928:	495a      	ldr	r1, [pc, #360]	; (8009a94 <__gethex+0x2d8>)
 800992a:	f8cd a004 	str.w	sl, [sp, #4]
 800992e:	469b      	mov	fp, r3
 8009930:	45a8      	cmp	r8, r5
 8009932:	d342      	bcc.n	80099ba <__gethex+0x1fe>
 8009934:	9801      	ldr	r0, [sp, #4]
 8009936:	f840 bb04 	str.w	fp, [r0], #4
 800993a:	eba0 000a 	sub.w	r0, r0, sl
 800993e:	1080      	asrs	r0, r0, #2
 8009940:	6120      	str	r0, [r4, #16]
 8009942:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009946:	4658      	mov	r0, fp
 8009948:	f000 fbe0 	bl	800a10c <__hi0bits>
 800994c:	683d      	ldr	r5, [r7, #0]
 800994e:	eba8 0000 	sub.w	r0, r8, r0
 8009952:	42a8      	cmp	r0, r5
 8009954:	dd59      	ble.n	8009a0a <__gethex+0x24e>
 8009956:	eba0 0805 	sub.w	r8, r0, r5
 800995a:	4641      	mov	r1, r8
 800995c:	4620      	mov	r0, r4
 800995e:	f000 ff6f 	bl	800a840 <__any_on>
 8009962:	4683      	mov	fp, r0
 8009964:	b1b8      	cbz	r0, 8009996 <__gethex+0x1da>
 8009966:	f108 33ff 	add.w	r3, r8, #4294967295
 800996a:	1159      	asrs	r1, r3, #5
 800996c:	f003 021f 	and.w	r2, r3, #31
 8009970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009974:	f04f 0b01 	mov.w	fp, #1
 8009978:	fa0b f202 	lsl.w	r2, fp, r2
 800997c:	420a      	tst	r2, r1
 800997e:	d00a      	beq.n	8009996 <__gethex+0x1da>
 8009980:	455b      	cmp	r3, fp
 8009982:	dd06      	ble.n	8009992 <__gethex+0x1d6>
 8009984:	f1a8 0102 	sub.w	r1, r8, #2
 8009988:	4620      	mov	r0, r4
 800998a:	f000 ff59 	bl	800a840 <__any_on>
 800998e:	2800      	cmp	r0, #0
 8009990:	d138      	bne.n	8009a04 <__gethex+0x248>
 8009992:	f04f 0b02 	mov.w	fp, #2
 8009996:	4641      	mov	r1, r8
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff fea7 	bl	80096ec <rshift>
 800999e:	4446      	add	r6, r8
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	42b3      	cmp	r3, r6
 80099a4:	da41      	bge.n	8009a2a <__gethex+0x26e>
 80099a6:	4621      	mov	r1, r4
 80099a8:	4648      	mov	r0, r9
 80099aa:	f000 fafd 	bl	8009fa8 <_Bfree>
 80099ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099b0:	2300      	movs	r3, #0
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80099b8:	e78a      	b.n	80098d0 <__gethex+0x114>
 80099ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80099be:	2a2e      	cmp	r2, #46	; 0x2e
 80099c0:	d014      	beq.n	80099ec <__gethex+0x230>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d106      	bne.n	80099d4 <__gethex+0x218>
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	f843 bb04 	str.w	fp, [r3], #4
 80099cc:	f04f 0b00 	mov.w	fp, #0
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	465b      	mov	r3, fp
 80099d4:	7828      	ldrb	r0, [r5, #0]
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	f7ff feda 	bl	8009790 <__hexdig_fun>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	f000 000f 	and.w	r0, r0, #15
 80099e2:	4098      	lsls	r0, r3
 80099e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80099e8:	3304      	adds	r3, #4
 80099ea:	e7a1      	b.n	8009930 <__gethex+0x174>
 80099ec:	45a8      	cmp	r8, r5
 80099ee:	d8e8      	bhi.n	80099c2 <__gethex+0x206>
 80099f0:	2201      	movs	r2, #1
 80099f2:	4628      	mov	r0, r5
 80099f4:	9303      	str	r3, [sp, #12]
 80099f6:	f7fe fe86 	bl	8008706 <strncmp>
 80099fa:	4926      	ldr	r1, [pc, #152]	; (8009a94 <__gethex+0x2d8>)
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1df      	bne.n	80099c2 <__gethex+0x206>
 8009a02:	e795      	b.n	8009930 <__gethex+0x174>
 8009a04:	f04f 0b03 	mov.w	fp, #3
 8009a08:	e7c5      	b.n	8009996 <__gethex+0x1da>
 8009a0a:	da0b      	bge.n	8009a24 <__gethex+0x268>
 8009a0c:	eba5 0800 	sub.w	r8, r5, r0
 8009a10:	4621      	mov	r1, r4
 8009a12:	4642      	mov	r2, r8
 8009a14:	4648      	mov	r0, r9
 8009a16:	f000 fce1 	bl	800a3dc <__lshift>
 8009a1a:	eba6 0608 	sub.w	r6, r6, r8
 8009a1e:	4604      	mov	r4, r0
 8009a20:	f100 0a14 	add.w	sl, r0, #20
 8009a24:	f04f 0b00 	mov.w	fp, #0
 8009a28:	e7ba      	b.n	80099a0 <__gethex+0x1e4>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	42b3      	cmp	r3, r6
 8009a2e:	dd73      	ble.n	8009b18 <__gethex+0x35c>
 8009a30:	1b9e      	subs	r6, r3, r6
 8009a32:	42b5      	cmp	r5, r6
 8009a34:	dc34      	bgt.n	8009aa0 <__gethex+0x2e4>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d023      	beq.n	8009a84 <__gethex+0x2c8>
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d025      	beq.n	8009a8c <__gethex+0x2d0>
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d115      	bne.n	8009a70 <__gethex+0x2b4>
 8009a44:	42b5      	cmp	r5, r6
 8009a46:	d113      	bne.n	8009a70 <__gethex+0x2b4>
 8009a48:	2d01      	cmp	r5, #1
 8009a4a:	d10b      	bne.n	8009a64 <__gethex+0x2a8>
 8009a4c:	9a02      	ldr	r2, [sp, #8]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	2301      	movs	r3, #1
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	f8ca 3000 	str.w	r3, [sl]
 8009a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a5c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009a60:	601c      	str	r4, [r3, #0]
 8009a62:	e735      	b.n	80098d0 <__gethex+0x114>
 8009a64:	1e69      	subs	r1, r5, #1
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 feea 	bl	800a840 <__any_on>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d1ed      	bne.n	8009a4c <__gethex+0x290>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4648      	mov	r0, r9
 8009a74:	f000 fa98 	bl	8009fa8 <_Bfree>
 8009a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009a82:	e725      	b.n	80098d0 <__gethex+0x114>
 8009a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f2      	bne.n	8009a70 <__gethex+0x2b4>
 8009a8a:	e7df      	b.n	8009a4c <__gethex+0x290>
 8009a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1dc      	bne.n	8009a4c <__gethex+0x290>
 8009a92:	e7ed      	b.n	8009a70 <__gethex+0x2b4>
 8009a94:	0800e0e0 	.word	0x0800e0e0
 8009a98:	0800e2ab 	.word	0x0800e2ab
 8009a9c:	0800e2bc 	.word	0x0800e2bc
 8009aa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8009aa4:	f1bb 0f00 	cmp.w	fp, #0
 8009aa8:	d133      	bne.n	8009b12 <__gethex+0x356>
 8009aaa:	f1b8 0f00 	cmp.w	r8, #0
 8009aae:	d004      	beq.n	8009aba <__gethex+0x2fe>
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 fec4 	bl	800a840 <__any_on>
 8009ab8:	4683      	mov	fp, r0
 8009aba:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ac4:	f008 081f 	and.w	r8, r8, #31
 8009ac8:	fa03 f308 	lsl.w	r3, r3, r8
 8009acc:	4213      	tst	r3, r2
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	bf18      	it	ne
 8009ad4:	f04b 0b02 	orrne.w	fp, fp, #2
 8009ad8:	1bad      	subs	r5, r5, r6
 8009ada:	f7ff fe07 	bl	80096ec <rshift>
 8009ade:	687e      	ldr	r6, [r7, #4]
 8009ae0:	f04f 0802 	mov.w	r8, #2
 8009ae4:	f1bb 0f00 	cmp.w	fp, #0
 8009ae8:	d04a      	beq.n	8009b80 <__gethex+0x3c4>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d016      	beq.n	8009b1e <__gethex+0x362>
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d018      	beq.n	8009b26 <__gethex+0x36a>
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d109      	bne.n	8009b0c <__gethex+0x350>
 8009af8:	f01b 0f02 	tst.w	fp, #2
 8009afc:	d006      	beq.n	8009b0c <__gethex+0x350>
 8009afe:	f8da 3000 	ldr.w	r3, [sl]
 8009b02:	ea4b 0b03 	orr.w	fp, fp, r3
 8009b06:	f01b 0f01 	tst.w	fp, #1
 8009b0a:	d10f      	bne.n	8009b2c <__gethex+0x370>
 8009b0c:	f048 0810 	orr.w	r8, r8, #16
 8009b10:	e036      	b.n	8009b80 <__gethex+0x3c4>
 8009b12:	f04f 0b01 	mov.w	fp, #1
 8009b16:	e7d0      	b.n	8009aba <__gethex+0x2fe>
 8009b18:	f04f 0801 	mov.w	r8, #1
 8009b1c:	e7e2      	b.n	8009ae4 <__gethex+0x328>
 8009b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b20:	f1c3 0301 	rsb	r3, r3, #1
 8009b24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0ef      	beq.n	8009b0c <__gethex+0x350>
 8009b2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b30:	f104 0214 	add.w	r2, r4, #20
 8009b34:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4694      	mov	ip, r2
 8009b42:	f852 1b04 	ldr.w	r1, [r2], #4
 8009b46:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009b4a:	d01e      	beq.n	8009b8a <__gethex+0x3ce>
 8009b4c:	3101      	adds	r1, #1
 8009b4e:	f8cc 1000 	str.w	r1, [ip]
 8009b52:	f1b8 0f02 	cmp.w	r8, #2
 8009b56:	f104 0214 	add.w	r2, r4, #20
 8009b5a:	d13d      	bne.n	8009bd8 <__gethex+0x41c>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	d10b      	bne.n	8009b7c <__gethex+0x3c0>
 8009b64:	1169      	asrs	r1, r5, #5
 8009b66:	2301      	movs	r3, #1
 8009b68:	f005 051f 	and.w	r5, r5, #31
 8009b6c:	fa03 f505 	lsl.w	r5, r3, r5
 8009b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b74:	421d      	tst	r5, r3
 8009b76:	bf18      	it	ne
 8009b78:	f04f 0801 	movne.w	r8, #1
 8009b7c:	f048 0820 	orr.w	r8, r8, #32
 8009b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b82:	601c      	str	r4, [r3, #0]
 8009b84:	9b02      	ldr	r3, [sp, #8]
 8009b86:	601e      	str	r6, [r3, #0]
 8009b88:	e6a2      	b.n	80098d0 <__gethex+0x114>
 8009b8a:	4290      	cmp	r0, r2
 8009b8c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009b90:	d8d6      	bhi.n	8009b40 <__gethex+0x384>
 8009b92:	68a2      	ldr	r2, [r4, #8]
 8009b94:	4593      	cmp	fp, r2
 8009b96:	db17      	blt.n	8009bc8 <__gethex+0x40c>
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	4648      	mov	r0, r9
 8009b9c:	3101      	adds	r1, #1
 8009b9e:	f000 f9c3 	bl	8009f28 <_Balloc>
 8009ba2:	4682      	mov	sl, r0
 8009ba4:	b918      	cbnz	r0, 8009bae <__gethex+0x3f2>
 8009ba6:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <__gethex+0x458>)
 8009ba8:	4602      	mov	r2, r0
 8009baa:	2184      	movs	r1, #132	; 0x84
 8009bac:	e6b3      	b.n	8009916 <__gethex+0x15a>
 8009bae:	6922      	ldr	r2, [r4, #16]
 8009bb0:	3202      	adds	r2, #2
 8009bb2:	f104 010c 	add.w	r1, r4, #12
 8009bb6:	0092      	lsls	r2, r2, #2
 8009bb8:	300c      	adds	r0, #12
 8009bba:	f7fe fe9b 	bl	80088f4 <memcpy>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4648      	mov	r0, r9
 8009bc2:	f000 f9f1 	bl	8009fa8 <_Bfree>
 8009bc6:	4654      	mov	r4, sl
 8009bc8:	6922      	ldr	r2, [r4, #16]
 8009bca:	1c51      	adds	r1, r2, #1
 8009bcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009bd0:	6121      	str	r1, [r4, #16]
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	6151      	str	r1, [r2, #20]
 8009bd6:	e7bc      	b.n	8009b52 <__gethex+0x396>
 8009bd8:	6921      	ldr	r1, [r4, #16]
 8009bda:	4559      	cmp	r1, fp
 8009bdc:	dd0b      	ble.n	8009bf6 <__gethex+0x43a>
 8009bde:	2101      	movs	r1, #1
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff fd83 	bl	80096ec <rshift>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3601      	adds	r6, #1
 8009bea:	42b3      	cmp	r3, r6
 8009bec:	f6ff aedb 	blt.w	80099a6 <__gethex+0x1ea>
 8009bf0:	f04f 0801 	mov.w	r8, #1
 8009bf4:	e7c2      	b.n	8009b7c <__gethex+0x3c0>
 8009bf6:	f015 051f 	ands.w	r5, r5, #31
 8009bfa:	d0f9      	beq.n	8009bf0 <__gethex+0x434>
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	441a      	add	r2, r3
 8009c00:	f1c5 0520 	rsb	r5, r5, #32
 8009c04:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009c08:	f000 fa80 	bl	800a10c <__hi0bits>
 8009c0c:	42a8      	cmp	r0, r5
 8009c0e:	dbe6      	blt.n	8009bde <__gethex+0x422>
 8009c10:	e7ee      	b.n	8009bf0 <__gethex+0x434>
 8009c12:	bf00      	nop
 8009c14:	0800e2ab 	.word	0x0800e2ab

08009c18 <L_shift>:
 8009c18:	f1c2 0208 	rsb	r2, r2, #8
 8009c1c:	0092      	lsls	r2, r2, #2
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	f1c2 0620 	rsb	r6, r2, #32
 8009c24:	6843      	ldr	r3, [r0, #4]
 8009c26:	6804      	ldr	r4, [r0, #0]
 8009c28:	fa03 f506 	lsl.w	r5, r3, r6
 8009c2c:	432c      	orrs	r4, r5
 8009c2e:	40d3      	lsrs	r3, r2
 8009c30:	6004      	str	r4, [r0, #0]
 8009c32:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c36:	4288      	cmp	r0, r1
 8009c38:	d3f4      	bcc.n	8009c24 <L_shift+0xc>
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}

08009c3c <__match>:
 8009c3c:	b530      	push	{r4, r5, lr}
 8009c3e:	6803      	ldr	r3, [r0, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c46:	b914      	cbnz	r4, 8009c4e <__match+0x12>
 8009c48:	6003      	str	r3, [r0, #0]
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	bd30      	pop	{r4, r5, pc}
 8009c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c56:	2d19      	cmp	r5, #25
 8009c58:	bf98      	it	ls
 8009c5a:	3220      	addls	r2, #32
 8009c5c:	42a2      	cmp	r2, r4
 8009c5e:	d0f0      	beq.n	8009c42 <__match+0x6>
 8009c60:	2000      	movs	r0, #0
 8009c62:	e7f3      	b.n	8009c4c <__match+0x10>

08009c64 <__hexnan>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	680b      	ldr	r3, [r1, #0]
 8009c6a:	6801      	ldr	r1, [r0, #0]
 8009c6c:	115e      	asrs	r6, r3, #5
 8009c6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c72:	f013 031f 	ands.w	r3, r3, #31
 8009c76:	b087      	sub	sp, #28
 8009c78:	bf18      	it	ne
 8009c7a:	3604      	addne	r6, #4
 8009c7c:	2500      	movs	r5, #0
 8009c7e:	1f37      	subs	r7, r6, #4
 8009c80:	4682      	mov	sl, r0
 8009c82:	4690      	mov	r8, r2
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c8a:	46b9      	mov	r9, r7
 8009c8c:	463c      	mov	r4, r7
 8009c8e:	9502      	str	r5, [sp, #8]
 8009c90:	46ab      	mov	fp, r5
 8009c92:	784a      	ldrb	r2, [r1, #1]
 8009c94:	1c4b      	adds	r3, r1, #1
 8009c96:	9303      	str	r3, [sp, #12]
 8009c98:	b342      	cbz	r2, 8009cec <__hexnan+0x88>
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	9105      	str	r1, [sp, #20]
 8009c9e:	9204      	str	r2, [sp, #16]
 8009ca0:	f7ff fd76 	bl	8009790 <__hexdig_fun>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d14f      	bne.n	8009d48 <__hexnan+0xe4>
 8009ca8:	9a04      	ldr	r2, [sp, #16]
 8009caa:	9905      	ldr	r1, [sp, #20]
 8009cac:	2a20      	cmp	r2, #32
 8009cae:	d818      	bhi.n	8009ce2 <__hexnan+0x7e>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	459b      	cmp	fp, r3
 8009cb4:	dd13      	ble.n	8009cde <__hexnan+0x7a>
 8009cb6:	454c      	cmp	r4, r9
 8009cb8:	d206      	bcs.n	8009cc8 <__hexnan+0x64>
 8009cba:	2d07      	cmp	r5, #7
 8009cbc:	dc04      	bgt.n	8009cc8 <__hexnan+0x64>
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff ffa8 	bl	8009c18 <L_shift>
 8009cc8:	4544      	cmp	r4, r8
 8009cca:	d950      	bls.n	8009d6e <__hexnan+0x10a>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f1a4 0904 	sub.w	r9, r4, #4
 8009cd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cd6:	f8cd b008 	str.w	fp, [sp, #8]
 8009cda:	464c      	mov	r4, r9
 8009cdc:	461d      	mov	r5, r3
 8009cde:	9903      	ldr	r1, [sp, #12]
 8009ce0:	e7d7      	b.n	8009c92 <__hexnan+0x2e>
 8009ce2:	2a29      	cmp	r2, #41	; 0x29
 8009ce4:	d155      	bne.n	8009d92 <__hexnan+0x12e>
 8009ce6:	3102      	adds	r1, #2
 8009ce8:	f8ca 1000 	str.w	r1, [sl]
 8009cec:	f1bb 0f00 	cmp.w	fp, #0
 8009cf0:	d04f      	beq.n	8009d92 <__hexnan+0x12e>
 8009cf2:	454c      	cmp	r4, r9
 8009cf4:	d206      	bcs.n	8009d04 <__hexnan+0xa0>
 8009cf6:	2d07      	cmp	r5, #7
 8009cf8:	dc04      	bgt.n	8009d04 <__hexnan+0xa0>
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff ff8a 	bl	8009c18 <L_shift>
 8009d04:	4544      	cmp	r4, r8
 8009d06:	d934      	bls.n	8009d72 <__hexnan+0x10e>
 8009d08:	f1a8 0204 	sub.w	r2, r8, #4
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d12:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d16:	429f      	cmp	r7, r3
 8009d18:	d2f9      	bcs.n	8009d0e <__hexnan+0xaa>
 8009d1a:	1b3b      	subs	r3, r7, r4
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	3304      	adds	r3, #4
 8009d22:	3e03      	subs	r6, #3
 8009d24:	3401      	adds	r4, #1
 8009d26:	42a6      	cmp	r6, r4
 8009d28:	bf38      	it	cc
 8009d2a:	2304      	movcc	r3, #4
 8009d2c:	4443      	add	r3, r8
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f843 2b04 	str.w	r2, [r3], #4
 8009d34:	429f      	cmp	r7, r3
 8009d36:	d2fb      	bcs.n	8009d30 <__hexnan+0xcc>
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	b91b      	cbnz	r3, 8009d44 <__hexnan+0xe0>
 8009d3c:	4547      	cmp	r7, r8
 8009d3e:	d126      	bne.n	8009d8e <__hexnan+0x12a>
 8009d40:	2301      	movs	r3, #1
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	2005      	movs	r0, #5
 8009d46:	e025      	b.n	8009d94 <__hexnan+0x130>
 8009d48:	3501      	adds	r5, #1
 8009d4a:	2d08      	cmp	r5, #8
 8009d4c:	f10b 0b01 	add.w	fp, fp, #1
 8009d50:	dd06      	ble.n	8009d60 <__hexnan+0xfc>
 8009d52:	4544      	cmp	r4, r8
 8009d54:	d9c3      	bls.n	8009cde <__hexnan+0x7a>
 8009d56:	2300      	movs	r3, #0
 8009d58:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d5c:	2501      	movs	r5, #1
 8009d5e:	3c04      	subs	r4, #4
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	f000 000f 	and.w	r0, r0, #15
 8009d66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d6a:	6020      	str	r0, [r4, #0]
 8009d6c:	e7b7      	b.n	8009cde <__hexnan+0x7a>
 8009d6e:	2508      	movs	r5, #8
 8009d70:	e7b5      	b.n	8009cde <__hexnan+0x7a>
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0df      	beq.n	8009d38 <__hexnan+0xd4>
 8009d78:	f1c3 0320 	rsb	r3, r3, #32
 8009d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d80:	40da      	lsrs	r2, r3
 8009d82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d86:	4013      	ands	r3, r2
 8009d88:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d8c:	e7d4      	b.n	8009d38 <__hexnan+0xd4>
 8009d8e:	3f04      	subs	r7, #4
 8009d90:	e7d2      	b.n	8009d38 <__hexnan+0xd4>
 8009d92:	2004      	movs	r0, #4
 8009d94:	b007      	add	sp, #28
 8009d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009d9c <malloc>:
 8009d9c:	4b02      	ldr	r3, [pc, #8]	; (8009da8 <malloc+0xc>)
 8009d9e:	4601      	mov	r1, r0
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	f000 b823 	b.w	8009dec <_malloc_r>
 8009da6:	bf00      	nop
 8009da8:	200001f4 	.word	0x200001f4

08009dac <sbrk_aligned>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	4e0e      	ldr	r6, [pc, #56]	; (8009de8 <sbrk_aligned+0x3c>)
 8009db0:	460c      	mov	r4, r1
 8009db2:	6831      	ldr	r1, [r6, #0]
 8009db4:	4605      	mov	r5, r0
 8009db6:	b911      	cbnz	r1, 8009dbe <sbrk_aligned+0x12>
 8009db8:	f000 ffa2 	bl	800ad00 <_sbrk_r>
 8009dbc:	6030      	str	r0, [r6, #0]
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f000 ff9d 	bl	800ad00 <_sbrk_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d00a      	beq.n	8009de0 <sbrk_aligned+0x34>
 8009dca:	1cc4      	adds	r4, r0, #3
 8009dcc:	f024 0403 	bic.w	r4, r4, #3
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d007      	beq.n	8009de4 <sbrk_aligned+0x38>
 8009dd4:	1a21      	subs	r1, r4, r0
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f000 ff92 	bl	800ad00 <_sbrk_r>
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d101      	bne.n	8009de4 <sbrk_aligned+0x38>
 8009de0:	f04f 34ff 	mov.w	r4, #4294967295
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	20000fb8 	.word	0x20000fb8

08009dec <_malloc_r>:
 8009dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df0:	1ccd      	adds	r5, r1, #3
 8009df2:	f025 0503 	bic.w	r5, r5, #3
 8009df6:	3508      	adds	r5, #8
 8009df8:	2d0c      	cmp	r5, #12
 8009dfa:	bf38      	it	cc
 8009dfc:	250c      	movcc	r5, #12
 8009dfe:	2d00      	cmp	r5, #0
 8009e00:	4607      	mov	r7, r0
 8009e02:	db01      	blt.n	8009e08 <_malloc_r+0x1c>
 8009e04:	42a9      	cmp	r1, r5
 8009e06:	d905      	bls.n	8009e14 <_malloc_r+0x28>
 8009e08:	230c      	movs	r3, #12
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	2600      	movs	r6, #0
 8009e0e:	4630      	mov	r0, r6
 8009e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ee8 <_malloc_r+0xfc>
 8009e18:	f000 f87a 	bl	8009f10 <__malloc_lock>
 8009e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e20:	461c      	mov	r4, r3
 8009e22:	bb5c      	cbnz	r4, 8009e7c <_malloc_r+0x90>
 8009e24:	4629      	mov	r1, r5
 8009e26:	4638      	mov	r0, r7
 8009e28:	f7ff ffc0 	bl	8009dac <sbrk_aligned>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	4604      	mov	r4, r0
 8009e30:	d155      	bne.n	8009ede <_malloc_r+0xf2>
 8009e32:	f8d8 4000 	ldr.w	r4, [r8]
 8009e36:	4626      	mov	r6, r4
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	d145      	bne.n	8009ec8 <_malloc_r+0xdc>
 8009e3c:	2c00      	cmp	r4, #0
 8009e3e:	d048      	beq.n	8009ed2 <_malloc_r+0xe6>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	4631      	mov	r1, r6
 8009e44:	4638      	mov	r0, r7
 8009e46:	eb04 0903 	add.w	r9, r4, r3
 8009e4a:	f000 ff59 	bl	800ad00 <_sbrk_r>
 8009e4e:	4581      	cmp	r9, r0
 8009e50:	d13f      	bne.n	8009ed2 <_malloc_r+0xe6>
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	1a6d      	subs	r5, r5, r1
 8009e56:	4629      	mov	r1, r5
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f7ff ffa7 	bl	8009dac <sbrk_aligned>
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d037      	beq.n	8009ed2 <_malloc_r+0xe6>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	442b      	add	r3, r5
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	f8d8 3000 	ldr.w	r3, [r8]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d038      	beq.n	8009ee2 <_malloc_r+0xf6>
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	42a2      	cmp	r2, r4
 8009e74:	d12b      	bne.n	8009ece <_malloc_r+0xe2>
 8009e76:	2200      	movs	r2, #0
 8009e78:	605a      	str	r2, [r3, #4]
 8009e7a:	e00f      	b.n	8009e9c <_malloc_r+0xb0>
 8009e7c:	6822      	ldr	r2, [r4, #0]
 8009e7e:	1b52      	subs	r2, r2, r5
 8009e80:	d41f      	bmi.n	8009ec2 <_malloc_r+0xd6>
 8009e82:	2a0b      	cmp	r2, #11
 8009e84:	d917      	bls.n	8009eb6 <_malloc_r+0xca>
 8009e86:	1961      	adds	r1, r4, r5
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	6025      	str	r5, [r4, #0]
 8009e8c:	bf18      	it	ne
 8009e8e:	6059      	strne	r1, [r3, #4]
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	bf08      	it	eq
 8009e94:	f8c8 1000 	streq.w	r1, [r8]
 8009e98:	5162      	str	r2, [r4, r5]
 8009e9a:	604b      	str	r3, [r1, #4]
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f104 060b 	add.w	r6, r4, #11
 8009ea2:	f000 f83b 	bl	8009f1c <__malloc_unlock>
 8009ea6:	f026 0607 	bic.w	r6, r6, #7
 8009eaa:	1d23      	adds	r3, r4, #4
 8009eac:	1af2      	subs	r2, r6, r3
 8009eae:	d0ae      	beq.n	8009e0e <_malloc_r+0x22>
 8009eb0:	1b9b      	subs	r3, r3, r6
 8009eb2:	50a3      	str	r3, [r4, r2]
 8009eb4:	e7ab      	b.n	8009e0e <_malloc_r+0x22>
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	6862      	ldr	r2, [r4, #4]
 8009eba:	d1dd      	bne.n	8009e78 <_malloc_r+0x8c>
 8009ebc:	f8c8 2000 	str.w	r2, [r8]
 8009ec0:	e7ec      	b.n	8009e9c <_malloc_r+0xb0>
 8009ec2:	4623      	mov	r3, r4
 8009ec4:	6864      	ldr	r4, [r4, #4]
 8009ec6:	e7ac      	b.n	8009e22 <_malloc_r+0x36>
 8009ec8:	4634      	mov	r4, r6
 8009eca:	6876      	ldr	r6, [r6, #4]
 8009ecc:	e7b4      	b.n	8009e38 <_malloc_r+0x4c>
 8009ece:	4613      	mov	r3, r2
 8009ed0:	e7cc      	b.n	8009e6c <_malloc_r+0x80>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f000 f820 	bl	8009f1c <__malloc_unlock>
 8009edc:	e797      	b.n	8009e0e <_malloc_r+0x22>
 8009ede:	6025      	str	r5, [r4, #0]
 8009ee0:	e7dc      	b.n	8009e9c <_malloc_r+0xb0>
 8009ee2:	605b      	str	r3, [r3, #4]
 8009ee4:	deff      	udf	#255	; 0xff
 8009ee6:	bf00      	nop
 8009ee8:	20000fb4 	.word	0x20000fb4

08009eec <__ascii_mbtowc>:
 8009eec:	b082      	sub	sp, #8
 8009eee:	b901      	cbnz	r1, 8009ef2 <__ascii_mbtowc+0x6>
 8009ef0:	a901      	add	r1, sp, #4
 8009ef2:	b142      	cbz	r2, 8009f06 <__ascii_mbtowc+0x1a>
 8009ef4:	b14b      	cbz	r3, 8009f0a <__ascii_mbtowc+0x1e>
 8009ef6:	7813      	ldrb	r3, [r2, #0]
 8009ef8:	600b      	str	r3, [r1, #0]
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	1e10      	subs	r0, r2, #0
 8009efe:	bf18      	it	ne
 8009f00:	2001      	movne	r0, #1
 8009f02:	b002      	add	sp, #8
 8009f04:	4770      	bx	lr
 8009f06:	4610      	mov	r0, r2
 8009f08:	e7fb      	b.n	8009f02 <__ascii_mbtowc+0x16>
 8009f0a:	f06f 0001 	mvn.w	r0, #1
 8009f0e:	e7f8      	b.n	8009f02 <__ascii_mbtowc+0x16>

08009f10 <__malloc_lock>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__malloc_lock+0x8>)
 8009f12:	f7fe bced 	b.w	80088f0 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	20000fb0 	.word	0x20000fb0

08009f1c <__malloc_unlock>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__malloc_unlock+0x8>)
 8009f1e:	f7fe bce8 	b.w	80088f2 <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	20000fb0 	.word	0x20000fb0

08009f28 <_Balloc>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	69c6      	ldr	r6, [r0, #28]
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	460d      	mov	r5, r1
 8009f30:	b976      	cbnz	r6, 8009f50 <_Balloc+0x28>
 8009f32:	2010      	movs	r0, #16
 8009f34:	f7ff ff32 	bl	8009d9c <malloc>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	61e0      	str	r0, [r4, #28]
 8009f3c:	b920      	cbnz	r0, 8009f48 <_Balloc+0x20>
 8009f3e:	4b18      	ldr	r3, [pc, #96]	; (8009fa0 <_Balloc+0x78>)
 8009f40:	4818      	ldr	r0, [pc, #96]	; (8009fa4 <_Balloc+0x7c>)
 8009f42:	216b      	movs	r1, #107	; 0x6b
 8009f44:	f7fe fcec 	bl	8008920 <__assert_func>
 8009f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f4c:	6006      	str	r6, [r0, #0]
 8009f4e:	60c6      	str	r6, [r0, #12]
 8009f50:	69e6      	ldr	r6, [r4, #28]
 8009f52:	68f3      	ldr	r3, [r6, #12]
 8009f54:	b183      	cbz	r3, 8009f78 <_Balloc+0x50>
 8009f56:	69e3      	ldr	r3, [r4, #28]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f5e:	b9b8      	cbnz	r0, 8009f90 <_Balloc+0x68>
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f605 	lsl.w	r6, r1, r5
 8009f66:	1d72      	adds	r2, r6, #5
 8009f68:	0092      	lsls	r2, r2, #2
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fedf 	bl	800ad2e <_calloc_r>
 8009f70:	b160      	cbz	r0, 8009f8c <_Balloc+0x64>
 8009f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f76:	e00e      	b.n	8009f96 <_Balloc+0x6e>
 8009f78:	2221      	movs	r2, #33	; 0x21
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fed6 	bl	800ad2e <_calloc_r>
 8009f82:	69e3      	ldr	r3, [r4, #28]
 8009f84:	60f0      	str	r0, [r6, #12]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e4      	bne.n	8009f56 <_Balloc+0x2e>
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	6802      	ldr	r2, [r0, #0]
 8009f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f96:	2300      	movs	r3, #0
 8009f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f9c:	e7f7      	b.n	8009f8e <_Balloc+0x66>
 8009f9e:	bf00      	nop
 8009fa0:	0800e191 	.word	0x0800e191
 8009fa4:	0800e31c 	.word	0x0800e31c

08009fa8 <_Bfree>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	69c6      	ldr	r6, [r0, #28]
 8009fac:	4605      	mov	r5, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	b976      	cbnz	r6, 8009fd0 <_Bfree+0x28>
 8009fb2:	2010      	movs	r0, #16
 8009fb4:	f7ff fef2 	bl	8009d9c <malloc>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	61e8      	str	r0, [r5, #28]
 8009fbc:	b920      	cbnz	r0, 8009fc8 <_Bfree+0x20>
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <_Bfree+0x3c>)
 8009fc0:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <_Bfree+0x40>)
 8009fc2:	218f      	movs	r1, #143	; 0x8f
 8009fc4:	f7fe fcac 	bl	8008920 <__assert_func>
 8009fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fcc:	6006      	str	r6, [r0, #0]
 8009fce:	60c6      	str	r6, [r0, #12]
 8009fd0:	b13c      	cbz	r4, 8009fe2 <_Bfree+0x3a>
 8009fd2:	69eb      	ldr	r3, [r5, #28]
 8009fd4:	6862      	ldr	r2, [r4, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fdc:	6021      	str	r1, [r4, #0]
 8009fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
 8009fe4:	0800e191 	.word	0x0800e191
 8009fe8:	0800e31c 	.word	0x0800e31c

08009fec <__multadd>:
 8009fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff0:	690d      	ldr	r5, [r1, #16]
 8009ff2:	4607      	mov	r7, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	461e      	mov	r6, r3
 8009ff8:	f101 0c14 	add.w	ip, r1, #20
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f8dc 3000 	ldr.w	r3, [ip]
 800a002:	b299      	uxth	r1, r3
 800a004:	fb02 6101 	mla	r1, r2, r1, r6
 800a008:	0c1e      	lsrs	r6, r3, #16
 800a00a:	0c0b      	lsrs	r3, r1, #16
 800a00c:	fb02 3306 	mla	r3, r2, r6, r3
 800a010:	b289      	uxth	r1, r1
 800a012:	3001      	adds	r0, #1
 800a014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a018:	4285      	cmp	r5, r0
 800a01a:	f84c 1b04 	str.w	r1, [ip], #4
 800a01e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a022:	dcec      	bgt.n	8009ffe <__multadd+0x12>
 800a024:	b30e      	cbz	r6, 800a06a <__multadd+0x7e>
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dc19      	bgt.n	800a060 <__multadd+0x74>
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4638      	mov	r0, r7
 800a030:	3101      	adds	r1, #1
 800a032:	f7ff ff79 	bl	8009f28 <_Balloc>
 800a036:	4680      	mov	r8, r0
 800a038:	b928      	cbnz	r0, 800a046 <__multadd+0x5a>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <__multadd+0x84>)
 800a03e:	480d      	ldr	r0, [pc, #52]	; (800a074 <__multadd+0x88>)
 800a040:	21ba      	movs	r1, #186	; 0xba
 800a042:	f7fe fc6d 	bl	8008920 <__assert_func>
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	3202      	adds	r2, #2
 800a04a:	f104 010c 	add.w	r1, r4, #12
 800a04e:	0092      	lsls	r2, r2, #2
 800a050:	300c      	adds	r0, #12
 800a052:	f7fe fc4f 	bl	80088f4 <memcpy>
 800a056:	4621      	mov	r1, r4
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ffa5 	bl	8009fa8 <_Bfree>
 800a05e:	4644      	mov	r4, r8
 800a060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a064:	3501      	adds	r5, #1
 800a066:	615e      	str	r6, [r3, #20]
 800a068:	6125      	str	r5, [r4, #16]
 800a06a:	4620      	mov	r0, r4
 800a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a070:	0800e2ab 	.word	0x0800e2ab
 800a074:	0800e31c 	.word	0x0800e31c

0800a078 <__s2b>:
 800a078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	460c      	mov	r4, r1
 800a07e:	4615      	mov	r5, r2
 800a080:	461f      	mov	r7, r3
 800a082:	2209      	movs	r2, #9
 800a084:	3308      	adds	r3, #8
 800a086:	4606      	mov	r6, r0
 800a088:	fb93 f3f2 	sdiv	r3, r3, r2
 800a08c:	2100      	movs	r1, #0
 800a08e:	2201      	movs	r2, #1
 800a090:	429a      	cmp	r2, r3
 800a092:	db09      	blt.n	800a0a8 <__s2b+0x30>
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff ff47 	bl	8009f28 <_Balloc>
 800a09a:	b940      	cbnz	r0, 800a0ae <__s2b+0x36>
 800a09c:	4602      	mov	r2, r0
 800a09e:	4b19      	ldr	r3, [pc, #100]	; (800a104 <__s2b+0x8c>)
 800a0a0:	4819      	ldr	r0, [pc, #100]	; (800a108 <__s2b+0x90>)
 800a0a2:	21d3      	movs	r1, #211	; 0xd3
 800a0a4:	f7fe fc3c 	bl	8008920 <__assert_func>
 800a0a8:	0052      	lsls	r2, r2, #1
 800a0aa:	3101      	adds	r1, #1
 800a0ac:	e7f0      	b.n	800a090 <__s2b+0x18>
 800a0ae:	9b08      	ldr	r3, [sp, #32]
 800a0b0:	6143      	str	r3, [r0, #20]
 800a0b2:	2d09      	cmp	r5, #9
 800a0b4:	f04f 0301 	mov.w	r3, #1
 800a0b8:	6103      	str	r3, [r0, #16]
 800a0ba:	dd16      	ble.n	800a0ea <__s2b+0x72>
 800a0bc:	f104 0909 	add.w	r9, r4, #9
 800a0c0:	46c8      	mov	r8, r9
 800a0c2:	442c      	add	r4, r5
 800a0c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0c8:	4601      	mov	r1, r0
 800a0ca:	3b30      	subs	r3, #48	; 0x30
 800a0cc:	220a      	movs	r2, #10
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff ff8c 	bl	8009fec <__multadd>
 800a0d4:	45a0      	cmp	r8, r4
 800a0d6:	d1f5      	bne.n	800a0c4 <__s2b+0x4c>
 800a0d8:	f1a5 0408 	sub.w	r4, r5, #8
 800a0dc:	444c      	add	r4, r9
 800a0de:	1b2d      	subs	r5, r5, r4
 800a0e0:	1963      	adds	r3, r4, r5
 800a0e2:	42bb      	cmp	r3, r7
 800a0e4:	db04      	blt.n	800a0f0 <__s2b+0x78>
 800a0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	340a      	adds	r4, #10
 800a0ec:	2509      	movs	r5, #9
 800a0ee:	e7f6      	b.n	800a0de <__s2b+0x66>
 800a0f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	3b30      	subs	r3, #48	; 0x30
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7ff ff76 	bl	8009fec <__multadd>
 800a100:	e7ee      	b.n	800a0e0 <__s2b+0x68>
 800a102:	bf00      	nop
 800a104:	0800e2ab 	.word	0x0800e2ab
 800a108:	0800e31c 	.word	0x0800e31c

0800a10c <__hi0bits>:
 800a10c:	0c03      	lsrs	r3, r0, #16
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	b9d3      	cbnz	r3, 800a148 <__hi0bits+0x3c>
 800a112:	0400      	lsls	r0, r0, #16
 800a114:	2310      	movs	r3, #16
 800a116:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a11a:	bf04      	itt	eq
 800a11c:	0200      	lsleq	r0, r0, #8
 800a11e:	3308      	addeq	r3, #8
 800a120:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a124:	bf04      	itt	eq
 800a126:	0100      	lsleq	r0, r0, #4
 800a128:	3304      	addeq	r3, #4
 800a12a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a12e:	bf04      	itt	eq
 800a130:	0080      	lsleq	r0, r0, #2
 800a132:	3302      	addeq	r3, #2
 800a134:	2800      	cmp	r0, #0
 800a136:	db05      	blt.n	800a144 <__hi0bits+0x38>
 800a138:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a13c:	f103 0301 	add.w	r3, r3, #1
 800a140:	bf08      	it	eq
 800a142:	2320      	moveq	r3, #32
 800a144:	4618      	mov	r0, r3
 800a146:	4770      	bx	lr
 800a148:	2300      	movs	r3, #0
 800a14a:	e7e4      	b.n	800a116 <__hi0bits+0xa>

0800a14c <__lo0bits>:
 800a14c:	6803      	ldr	r3, [r0, #0]
 800a14e:	f013 0207 	ands.w	r2, r3, #7
 800a152:	d00c      	beq.n	800a16e <__lo0bits+0x22>
 800a154:	07d9      	lsls	r1, r3, #31
 800a156:	d422      	bmi.n	800a19e <__lo0bits+0x52>
 800a158:	079a      	lsls	r2, r3, #30
 800a15a:	bf49      	itett	mi
 800a15c:	085b      	lsrmi	r3, r3, #1
 800a15e:	089b      	lsrpl	r3, r3, #2
 800a160:	6003      	strmi	r3, [r0, #0]
 800a162:	2201      	movmi	r2, #1
 800a164:	bf5c      	itt	pl
 800a166:	6003      	strpl	r3, [r0, #0]
 800a168:	2202      	movpl	r2, #2
 800a16a:	4610      	mov	r0, r2
 800a16c:	4770      	bx	lr
 800a16e:	b299      	uxth	r1, r3
 800a170:	b909      	cbnz	r1, 800a176 <__lo0bits+0x2a>
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	2210      	movs	r2, #16
 800a176:	b2d9      	uxtb	r1, r3
 800a178:	b909      	cbnz	r1, 800a17e <__lo0bits+0x32>
 800a17a:	3208      	adds	r2, #8
 800a17c:	0a1b      	lsrs	r3, r3, #8
 800a17e:	0719      	lsls	r1, r3, #28
 800a180:	bf04      	itt	eq
 800a182:	091b      	lsreq	r3, r3, #4
 800a184:	3204      	addeq	r2, #4
 800a186:	0799      	lsls	r1, r3, #30
 800a188:	bf04      	itt	eq
 800a18a:	089b      	lsreq	r3, r3, #2
 800a18c:	3202      	addeq	r2, #2
 800a18e:	07d9      	lsls	r1, r3, #31
 800a190:	d403      	bmi.n	800a19a <__lo0bits+0x4e>
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	f102 0201 	add.w	r2, r2, #1
 800a198:	d003      	beq.n	800a1a2 <__lo0bits+0x56>
 800a19a:	6003      	str	r3, [r0, #0]
 800a19c:	e7e5      	b.n	800a16a <__lo0bits+0x1e>
 800a19e:	2200      	movs	r2, #0
 800a1a0:	e7e3      	b.n	800a16a <__lo0bits+0x1e>
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	e7e1      	b.n	800a16a <__lo0bits+0x1e>
	...

0800a1a8 <__i2b>:
 800a1a8:	b510      	push	{r4, lr}
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	f7ff febb 	bl	8009f28 <_Balloc>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	b928      	cbnz	r0, 800a1c2 <__i2b+0x1a>
 800a1b6:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <__i2b+0x24>)
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <__i2b+0x28>)
 800a1ba:	f240 1145 	movw	r1, #325	; 0x145
 800a1be:	f7fe fbaf 	bl	8008920 <__assert_func>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	6144      	str	r4, [r0, #20]
 800a1c6:	6103      	str	r3, [r0, #16]
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800e2ab 	.word	0x0800e2ab
 800a1d0:	0800e31c 	.word	0x0800e31c

0800a1d4 <__multiply>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	4691      	mov	r9, r2
 800a1da:	690a      	ldr	r2, [r1, #16]
 800a1dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	bfb8      	it	lt
 800a1e4:	460b      	movlt	r3, r1
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	bfbc      	itt	lt
 800a1ea:	464c      	movlt	r4, r9
 800a1ec:	4699      	movlt	r9, r3
 800a1ee:	6927      	ldr	r7, [r4, #16]
 800a1f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	6861      	ldr	r1, [r4, #4]
 800a1f8:	eb07 060a 	add.w	r6, r7, sl
 800a1fc:	42b3      	cmp	r3, r6
 800a1fe:	b085      	sub	sp, #20
 800a200:	bfb8      	it	lt
 800a202:	3101      	addlt	r1, #1
 800a204:	f7ff fe90 	bl	8009f28 <_Balloc>
 800a208:	b930      	cbnz	r0, 800a218 <__multiply+0x44>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4b44      	ldr	r3, [pc, #272]	; (800a320 <__multiply+0x14c>)
 800a20e:	4845      	ldr	r0, [pc, #276]	; (800a324 <__multiply+0x150>)
 800a210:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a214:	f7fe fb84 	bl	8008920 <__assert_func>
 800a218:	f100 0514 	add.w	r5, r0, #20
 800a21c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a220:	462b      	mov	r3, r5
 800a222:	2200      	movs	r2, #0
 800a224:	4543      	cmp	r3, r8
 800a226:	d321      	bcc.n	800a26c <__multiply+0x98>
 800a228:	f104 0314 	add.w	r3, r4, #20
 800a22c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a230:	f109 0314 	add.w	r3, r9, #20
 800a234:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a238:	9202      	str	r2, [sp, #8]
 800a23a:	1b3a      	subs	r2, r7, r4
 800a23c:	3a15      	subs	r2, #21
 800a23e:	f022 0203 	bic.w	r2, r2, #3
 800a242:	3204      	adds	r2, #4
 800a244:	f104 0115 	add.w	r1, r4, #21
 800a248:	428f      	cmp	r7, r1
 800a24a:	bf38      	it	cc
 800a24c:	2204      	movcc	r2, #4
 800a24e:	9201      	str	r2, [sp, #4]
 800a250:	9a02      	ldr	r2, [sp, #8]
 800a252:	9303      	str	r3, [sp, #12]
 800a254:	429a      	cmp	r2, r3
 800a256:	d80c      	bhi.n	800a272 <__multiply+0x9e>
 800a258:	2e00      	cmp	r6, #0
 800a25a:	dd03      	ble.n	800a264 <__multiply+0x90>
 800a25c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a260:	2b00      	cmp	r3, #0
 800a262:	d05b      	beq.n	800a31c <__multiply+0x148>
 800a264:	6106      	str	r6, [r0, #16]
 800a266:	b005      	add	sp, #20
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26c:	f843 2b04 	str.w	r2, [r3], #4
 800a270:	e7d8      	b.n	800a224 <__multiply+0x50>
 800a272:	f8b3 a000 	ldrh.w	sl, [r3]
 800a276:	f1ba 0f00 	cmp.w	sl, #0
 800a27a:	d024      	beq.n	800a2c6 <__multiply+0xf2>
 800a27c:	f104 0e14 	add.w	lr, r4, #20
 800a280:	46a9      	mov	r9, r5
 800a282:	f04f 0c00 	mov.w	ip, #0
 800a286:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a28a:	f8d9 1000 	ldr.w	r1, [r9]
 800a28e:	fa1f fb82 	uxth.w	fp, r2
 800a292:	b289      	uxth	r1, r1
 800a294:	fb0a 110b 	mla	r1, sl, fp, r1
 800a298:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a29c:	f8d9 2000 	ldr.w	r2, [r9]
 800a2a0:	4461      	add	r1, ip
 800a2a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2ae:	b289      	uxth	r1, r1
 800a2b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2b4:	4577      	cmp	r7, lr
 800a2b6:	f849 1b04 	str.w	r1, [r9], #4
 800a2ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2be:	d8e2      	bhi.n	800a286 <__multiply+0xb2>
 800a2c0:	9a01      	ldr	r2, [sp, #4]
 800a2c2:	f845 c002 	str.w	ip, [r5, r2]
 800a2c6:	9a03      	ldr	r2, [sp, #12]
 800a2c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	f1b9 0f00 	cmp.w	r9, #0
 800a2d2:	d021      	beq.n	800a318 <__multiply+0x144>
 800a2d4:	6829      	ldr	r1, [r5, #0]
 800a2d6:	f104 0c14 	add.w	ip, r4, #20
 800a2da:	46ae      	mov	lr, r5
 800a2dc:	f04f 0a00 	mov.w	sl, #0
 800a2e0:	f8bc b000 	ldrh.w	fp, [ip]
 800a2e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2e8:	fb09 220b 	mla	r2, r9, fp, r2
 800a2ec:	4452      	add	r2, sl
 800a2ee:	b289      	uxth	r1, r1
 800a2f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2f4:	f84e 1b04 	str.w	r1, [lr], #4
 800a2f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a2fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a300:	f8be 1000 	ldrh.w	r1, [lr]
 800a304:	fb09 110a 	mla	r1, r9, sl, r1
 800a308:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a30c:	4567      	cmp	r7, ip
 800a30e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a312:	d8e5      	bhi.n	800a2e0 <__multiply+0x10c>
 800a314:	9a01      	ldr	r2, [sp, #4]
 800a316:	50a9      	str	r1, [r5, r2]
 800a318:	3504      	adds	r5, #4
 800a31a:	e799      	b.n	800a250 <__multiply+0x7c>
 800a31c:	3e01      	subs	r6, #1
 800a31e:	e79b      	b.n	800a258 <__multiply+0x84>
 800a320:	0800e2ab 	.word	0x0800e2ab
 800a324:	0800e31c 	.word	0x0800e31c

0800a328 <__pow5mult>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4615      	mov	r5, r2
 800a32e:	f012 0203 	ands.w	r2, r2, #3
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	d007      	beq.n	800a348 <__pow5mult+0x20>
 800a338:	4c25      	ldr	r4, [pc, #148]	; (800a3d0 <__pow5mult+0xa8>)
 800a33a:	3a01      	subs	r2, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a342:	f7ff fe53 	bl	8009fec <__multadd>
 800a346:	4607      	mov	r7, r0
 800a348:	10ad      	asrs	r5, r5, #2
 800a34a:	d03d      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a34c:	69f4      	ldr	r4, [r6, #28]
 800a34e:	b97c      	cbnz	r4, 800a370 <__pow5mult+0x48>
 800a350:	2010      	movs	r0, #16
 800a352:	f7ff fd23 	bl	8009d9c <malloc>
 800a356:	4602      	mov	r2, r0
 800a358:	61f0      	str	r0, [r6, #28]
 800a35a:	b928      	cbnz	r0, 800a368 <__pow5mult+0x40>
 800a35c:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <__pow5mult+0xac>)
 800a35e:	481e      	ldr	r0, [pc, #120]	; (800a3d8 <__pow5mult+0xb0>)
 800a360:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a364:	f7fe fadc 	bl	8008920 <__assert_func>
 800a368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a36c:	6004      	str	r4, [r0, #0]
 800a36e:	60c4      	str	r4, [r0, #12]
 800a370:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a378:	b94c      	cbnz	r4, 800a38e <__pow5mult+0x66>
 800a37a:	f240 2171 	movw	r1, #625	; 0x271
 800a37e:	4630      	mov	r0, r6
 800a380:	f7ff ff12 	bl	800a1a8 <__i2b>
 800a384:	2300      	movs	r3, #0
 800a386:	f8c8 0008 	str.w	r0, [r8, #8]
 800a38a:	4604      	mov	r4, r0
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	07eb      	lsls	r3, r5, #31
 800a394:	d50a      	bpl.n	800a3ac <__pow5mult+0x84>
 800a396:	4639      	mov	r1, r7
 800a398:	4622      	mov	r2, r4
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ff1a 	bl	800a1d4 <__multiply>
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff fdff 	bl	8009fa8 <_Bfree>
 800a3aa:	4647      	mov	r7, r8
 800a3ac:	106d      	asrs	r5, r5, #1
 800a3ae:	d00b      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	b938      	cbnz	r0, 800a3c4 <__pow5mult+0x9c>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ff0b 	bl	800a1d4 <__multiply>
 800a3be:	6020      	str	r0, [r4, #0]
 800a3c0:	f8c0 9000 	str.w	r9, [r0]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	e7e4      	b.n	800a392 <__pow5mult+0x6a>
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800e468 	.word	0x0800e468
 800a3d4:	0800e191 	.word	0x0800e191
 800a3d8:	0800e31c 	.word	0x0800e31c

0800a3dc <__lshift>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	6849      	ldr	r1, [r1, #4]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3f4:	f108 0601 	add.w	r6, r8, #1
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	db0b      	blt.n	800a414 <__lshift+0x38>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff fd93 	bl	8009f28 <_Balloc>
 800a402:	4605      	mov	r5, r0
 800a404:	b948      	cbnz	r0, 800a41a <__lshift+0x3e>
 800a406:	4602      	mov	r2, r0
 800a408:	4b28      	ldr	r3, [pc, #160]	; (800a4ac <__lshift+0xd0>)
 800a40a:	4829      	ldr	r0, [pc, #164]	; (800a4b0 <__lshift+0xd4>)
 800a40c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a410:	f7fe fa86 	bl	8008920 <__assert_func>
 800a414:	3101      	adds	r1, #1
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	e7ee      	b.n	800a3f8 <__lshift+0x1c>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f100 0114 	add.w	r1, r0, #20
 800a420:	f100 0210 	add.w	r2, r0, #16
 800a424:	4618      	mov	r0, r3
 800a426:	4553      	cmp	r3, sl
 800a428:	db33      	blt.n	800a492 <__lshift+0xb6>
 800a42a:	6920      	ldr	r0, [r4, #16]
 800a42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a430:	f104 0314 	add.w	r3, r4, #20
 800a434:	f019 091f 	ands.w	r9, r9, #31
 800a438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a440:	d02b      	beq.n	800a49a <__lshift+0xbe>
 800a442:	f1c9 0e20 	rsb	lr, r9, #32
 800a446:	468a      	mov	sl, r1
 800a448:	2200      	movs	r2, #0
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	fa00 f009 	lsl.w	r0, r0, r9
 800a450:	4310      	orrs	r0, r2
 800a452:	f84a 0b04 	str.w	r0, [sl], #4
 800a456:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45a:	459c      	cmp	ip, r3
 800a45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a460:	d8f3      	bhi.n	800a44a <__lshift+0x6e>
 800a462:	ebac 0304 	sub.w	r3, ip, r4
 800a466:	3b15      	subs	r3, #21
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	3304      	adds	r3, #4
 800a46e:	f104 0015 	add.w	r0, r4, #21
 800a472:	4584      	cmp	ip, r0
 800a474:	bf38      	it	cc
 800a476:	2304      	movcc	r3, #4
 800a478:	50ca      	str	r2, [r1, r3]
 800a47a:	b10a      	cbz	r2, 800a480 <__lshift+0xa4>
 800a47c:	f108 0602 	add.w	r6, r8, #2
 800a480:	3e01      	subs	r6, #1
 800a482:	4638      	mov	r0, r7
 800a484:	612e      	str	r6, [r5, #16]
 800a486:	4621      	mov	r1, r4
 800a488:	f7ff fd8e 	bl	8009fa8 <_Bfree>
 800a48c:	4628      	mov	r0, r5
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	f842 0f04 	str.w	r0, [r2, #4]!
 800a496:	3301      	adds	r3, #1
 800a498:	e7c5      	b.n	800a426 <__lshift+0x4a>
 800a49a:	3904      	subs	r1, #4
 800a49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4a4:	459c      	cmp	ip, r3
 800a4a6:	d8f9      	bhi.n	800a49c <__lshift+0xc0>
 800a4a8:	e7ea      	b.n	800a480 <__lshift+0xa4>
 800a4aa:	bf00      	nop
 800a4ac:	0800e2ab 	.word	0x0800e2ab
 800a4b0:	0800e31c 	.word	0x0800e31c

0800a4b4 <__mcmp>:
 800a4b4:	b530      	push	{r4, r5, lr}
 800a4b6:	6902      	ldr	r2, [r0, #16]
 800a4b8:	690c      	ldr	r4, [r1, #16]
 800a4ba:	1b12      	subs	r2, r2, r4
 800a4bc:	d10e      	bne.n	800a4dc <__mcmp+0x28>
 800a4be:	f100 0314 	add.w	r3, r0, #20
 800a4c2:	3114      	adds	r1, #20
 800a4c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4d4:	42a5      	cmp	r5, r4
 800a4d6:	d003      	beq.n	800a4e0 <__mcmp+0x2c>
 800a4d8:	d305      	bcc.n	800a4e6 <__mcmp+0x32>
 800a4da:	2201      	movs	r2, #1
 800a4dc:	4610      	mov	r0, r2
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	4283      	cmp	r3, r0
 800a4e2:	d3f3      	bcc.n	800a4cc <__mcmp+0x18>
 800a4e4:	e7fa      	b.n	800a4dc <__mcmp+0x28>
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ea:	e7f7      	b.n	800a4dc <__mcmp+0x28>

0800a4ec <__mdiff>:
 800a4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4690      	mov	r8, r2
 800a4fa:	f7ff ffdb 	bl	800a4b4 <__mcmp>
 800a4fe:	1e05      	subs	r5, r0, #0
 800a500:	d110      	bne.n	800a524 <__mdiff+0x38>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fd0f 	bl	8009f28 <_Balloc>
 800a50a:	b930      	cbnz	r0, 800a51a <__mdiff+0x2e>
 800a50c:	4b3a      	ldr	r3, [pc, #232]	; (800a5f8 <__mdiff+0x10c>)
 800a50e:	4602      	mov	r2, r0
 800a510:	f240 2137 	movw	r1, #567	; 0x237
 800a514:	4839      	ldr	r0, [pc, #228]	; (800a5fc <__mdiff+0x110>)
 800a516:	f7fe fa03 	bl	8008920 <__assert_func>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	bfa4      	itt	ge
 800a526:	4643      	movge	r3, r8
 800a528:	46a0      	movge	r8, r4
 800a52a:	4630      	mov	r0, r6
 800a52c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a530:	bfa6      	itte	ge
 800a532:	461c      	movge	r4, r3
 800a534:	2500      	movge	r5, #0
 800a536:	2501      	movlt	r5, #1
 800a538:	f7ff fcf6 	bl	8009f28 <_Balloc>
 800a53c:	b920      	cbnz	r0, 800a548 <__mdiff+0x5c>
 800a53e:	4b2e      	ldr	r3, [pc, #184]	; (800a5f8 <__mdiff+0x10c>)
 800a540:	4602      	mov	r2, r0
 800a542:	f240 2145 	movw	r1, #581	; 0x245
 800a546:	e7e5      	b.n	800a514 <__mdiff+0x28>
 800a548:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a54c:	6926      	ldr	r6, [r4, #16]
 800a54e:	60c5      	str	r5, [r0, #12]
 800a550:	f104 0914 	add.w	r9, r4, #20
 800a554:	f108 0514 	add.w	r5, r8, #20
 800a558:	f100 0e14 	add.w	lr, r0, #20
 800a55c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a560:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a564:	f108 0210 	add.w	r2, r8, #16
 800a568:	46f2      	mov	sl, lr
 800a56a:	2100      	movs	r1, #0
 800a56c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a570:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a574:	fa11 f88b 	uxtah	r8, r1, fp
 800a578:	b299      	uxth	r1, r3
 800a57a:	0c1b      	lsrs	r3, r3, #16
 800a57c:	eba8 0801 	sub.w	r8, r8, r1
 800a580:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a584:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a588:	fa1f f888 	uxth.w	r8, r8
 800a58c:	1419      	asrs	r1, r3, #16
 800a58e:	454e      	cmp	r6, r9
 800a590:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a594:	f84a 3b04 	str.w	r3, [sl], #4
 800a598:	d8e8      	bhi.n	800a56c <__mdiff+0x80>
 800a59a:	1b33      	subs	r3, r6, r4
 800a59c:	3b15      	subs	r3, #21
 800a59e:	f023 0303 	bic.w	r3, r3, #3
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	3415      	adds	r4, #21
 800a5a6:	42a6      	cmp	r6, r4
 800a5a8:	bf38      	it	cc
 800a5aa:	2304      	movcc	r3, #4
 800a5ac:	441d      	add	r5, r3
 800a5ae:	4473      	add	r3, lr
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	462e      	mov	r6, r5
 800a5b4:	4566      	cmp	r6, ip
 800a5b6:	d30e      	bcc.n	800a5d6 <__mdiff+0xea>
 800a5b8:	f10c 0203 	add.w	r2, ip, #3
 800a5bc:	1b52      	subs	r2, r2, r5
 800a5be:	f022 0203 	bic.w	r2, r2, #3
 800a5c2:	3d03      	subs	r5, #3
 800a5c4:	45ac      	cmp	ip, r5
 800a5c6:	bf38      	it	cc
 800a5c8:	2200      	movcc	r2, #0
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a5d0:	b17a      	cbz	r2, 800a5f2 <__mdiff+0x106>
 800a5d2:	6107      	str	r7, [r0, #16]
 800a5d4:	e7a4      	b.n	800a520 <__mdiff+0x34>
 800a5d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5da:	fa11 f288 	uxtah	r2, r1, r8
 800a5de:	1414      	asrs	r4, r2, #16
 800a5e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5e4:	b292      	uxth	r2, r2
 800a5e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5ea:	f84e 2b04 	str.w	r2, [lr], #4
 800a5ee:	1421      	asrs	r1, r4, #16
 800a5f0:	e7e0      	b.n	800a5b4 <__mdiff+0xc8>
 800a5f2:	3f01      	subs	r7, #1
 800a5f4:	e7ea      	b.n	800a5cc <__mdiff+0xe0>
 800a5f6:	bf00      	nop
 800a5f8:	0800e2ab 	.word	0x0800e2ab
 800a5fc:	0800e31c 	.word	0x0800e31c

0800a600 <__ulp>:
 800a600:	b082      	sub	sp, #8
 800a602:	ed8d 0b00 	vstr	d0, [sp]
 800a606:	9a01      	ldr	r2, [sp, #4]
 800a608:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <__ulp+0x48>)
 800a60a:	4013      	ands	r3, r2
 800a60c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a610:	2b00      	cmp	r3, #0
 800a612:	dc08      	bgt.n	800a626 <__ulp+0x26>
 800a614:	425b      	negs	r3, r3
 800a616:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a61a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a61e:	da04      	bge.n	800a62a <__ulp+0x2a>
 800a620:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a624:	4113      	asrs	r3, r2
 800a626:	2200      	movs	r2, #0
 800a628:	e008      	b.n	800a63c <__ulp+0x3c>
 800a62a:	f1a2 0314 	sub.w	r3, r2, #20
 800a62e:	2b1e      	cmp	r3, #30
 800a630:	bfda      	itte	le
 800a632:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a636:	40da      	lsrle	r2, r3
 800a638:	2201      	movgt	r2, #1
 800a63a:	2300      	movs	r3, #0
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	ec41 0b10 	vmov	d0, r0, r1
 800a644:	b002      	add	sp, #8
 800a646:	4770      	bx	lr
 800a648:	7ff00000 	.word	0x7ff00000

0800a64c <__b2d>:
 800a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a650:	6906      	ldr	r6, [r0, #16]
 800a652:	f100 0814 	add.w	r8, r0, #20
 800a656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a65a:	1f37      	subs	r7, r6, #4
 800a65c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a660:	4610      	mov	r0, r2
 800a662:	f7ff fd53 	bl	800a10c <__hi0bits>
 800a666:	f1c0 0320 	rsb	r3, r0, #32
 800a66a:	280a      	cmp	r0, #10
 800a66c:	600b      	str	r3, [r1, #0]
 800a66e:	491b      	ldr	r1, [pc, #108]	; (800a6dc <__b2d+0x90>)
 800a670:	dc15      	bgt.n	800a69e <__b2d+0x52>
 800a672:	f1c0 0c0b 	rsb	ip, r0, #11
 800a676:	fa22 f30c 	lsr.w	r3, r2, ip
 800a67a:	45b8      	cmp	r8, r7
 800a67c:	ea43 0501 	orr.w	r5, r3, r1
 800a680:	bf34      	ite	cc
 800a682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a686:	2300      	movcs	r3, #0
 800a688:	3015      	adds	r0, #21
 800a68a:	fa02 f000 	lsl.w	r0, r2, r0
 800a68e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a692:	4303      	orrs	r3, r0
 800a694:	461c      	mov	r4, r3
 800a696:	ec45 4b10 	vmov	d0, r4, r5
 800a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69e:	45b8      	cmp	r8, r7
 800a6a0:	bf3a      	itte	cc
 800a6a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a6aa:	2300      	movcs	r3, #0
 800a6ac:	380b      	subs	r0, #11
 800a6ae:	d012      	beq.n	800a6d6 <__b2d+0x8a>
 800a6b0:	f1c0 0120 	rsb	r1, r0, #32
 800a6b4:	fa23 f401 	lsr.w	r4, r3, r1
 800a6b8:	4082      	lsls	r2, r0
 800a6ba:	4322      	orrs	r2, r4
 800a6bc:	4547      	cmp	r7, r8
 800a6be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a6c2:	bf8c      	ite	hi
 800a6c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a6c8:	2200      	movls	r2, #0
 800a6ca:	4083      	lsls	r3, r0
 800a6cc:	40ca      	lsrs	r2, r1
 800a6ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	e7de      	b.n	800a694 <__b2d+0x48>
 800a6d6:	ea42 0501 	orr.w	r5, r2, r1
 800a6da:	e7db      	b.n	800a694 <__b2d+0x48>
 800a6dc:	3ff00000 	.word	0x3ff00000

0800a6e0 <__d2b>:
 800a6e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	ec59 8b10 	vmov	r8, r9, d0
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	f7ff fc1b 	bl	8009f28 <_Balloc>
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	b930      	cbnz	r0, 800a704 <__d2b+0x24>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	4b24      	ldr	r3, [pc, #144]	; (800a78c <__d2b+0xac>)
 800a6fa:	4825      	ldr	r0, [pc, #148]	; (800a790 <__d2b+0xb0>)
 800a6fc:	f240 310f 	movw	r1, #783	; 0x30f
 800a700:	f7fe f90e 	bl	8008920 <__assert_func>
 800a704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a70c:	bb2d      	cbnz	r5, 800a75a <__d2b+0x7a>
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	f1b8 0300 	subs.w	r3, r8, #0
 800a714:	d026      	beq.n	800a764 <__d2b+0x84>
 800a716:	4668      	mov	r0, sp
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	f7ff fd17 	bl	800a14c <__lo0bits>
 800a71e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a722:	b1e8      	cbz	r0, 800a760 <__d2b+0x80>
 800a724:	f1c0 0320 	rsb	r3, r0, #32
 800a728:	fa02 f303 	lsl.w	r3, r2, r3
 800a72c:	430b      	orrs	r3, r1
 800a72e:	40c2      	lsrs	r2, r0
 800a730:	6163      	str	r3, [r4, #20]
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	61a3      	str	r3, [r4, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bf14      	ite	ne
 800a73c:	2202      	movne	r2, #2
 800a73e:	2201      	moveq	r2, #1
 800a740:	6122      	str	r2, [r4, #16]
 800a742:	b1bd      	cbz	r5, 800a774 <__d2b+0x94>
 800a744:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a748:	4405      	add	r5, r0
 800a74a:	603d      	str	r5, [r7, #0]
 800a74c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a750:	6030      	str	r0, [r6, #0]
 800a752:	4620      	mov	r0, r4
 800a754:	b003      	add	sp, #12
 800a756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a75a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a75e:	e7d6      	b.n	800a70e <__d2b+0x2e>
 800a760:	6161      	str	r1, [r4, #20]
 800a762:	e7e7      	b.n	800a734 <__d2b+0x54>
 800a764:	a801      	add	r0, sp, #4
 800a766:	f7ff fcf1 	bl	800a14c <__lo0bits>
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	6163      	str	r3, [r4, #20]
 800a76e:	3020      	adds	r0, #32
 800a770:	2201      	movs	r2, #1
 800a772:	e7e5      	b.n	800a740 <__d2b+0x60>
 800a774:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a77c:	6038      	str	r0, [r7, #0]
 800a77e:	6918      	ldr	r0, [r3, #16]
 800a780:	f7ff fcc4 	bl	800a10c <__hi0bits>
 800a784:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a788:	e7e2      	b.n	800a750 <__d2b+0x70>
 800a78a:	bf00      	nop
 800a78c:	0800e2ab 	.word	0x0800e2ab
 800a790:	0800e31c 	.word	0x0800e31c

0800a794 <__ratio>:
 800a794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	4688      	mov	r8, r1
 800a79a:	4669      	mov	r1, sp
 800a79c:	4681      	mov	r9, r0
 800a79e:	f7ff ff55 	bl	800a64c <__b2d>
 800a7a2:	a901      	add	r1, sp, #4
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	ec55 4b10 	vmov	r4, r5, d0
 800a7aa:	f7ff ff4f 	bl	800a64c <__b2d>
 800a7ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7b6:	eba3 0c02 	sub.w	ip, r3, r2
 800a7ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7c4:	ec51 0b10 	vmov	r0, r1, d0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bfd6      	itet	le
 800a7cc:	460a      	movle	r2, r1
 800a7ce:	462a      	movgt	r2, r5
 800a7d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7d4:	468b      	mov	fp, r1
 800a7d6:	462f      	mov	r7, r5
 800a7d8:	bfd4      	ite	le
 800a7da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a7de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	ee10 2a10 	vmov	r2, s0
 800a7e8:	465b      	mov	r3, fp
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f83e 	bl	800086c <__aeabi_ddiv>
 800a7f0:	ec41 0b10 	vmov	d0, r0, r1
 800a7f4:	b003      	add	sp, #12
 800a7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7fa <__copybits>:
 800a7fa:	3901      	subs	r1, #1
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	1149      	asrs	r1, r1, #5
 800a800:	6914      	ldr	r4, [r2, #16]
 800a802:	3101      	adds	r1, #1
 800a804:	f102 0314 	add.w	r3, r2, #20
 800a808:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a80c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a810:	1f05      	subs	r5, r0, #4
 800a812:	42a3      	cmp	r3, r4
 800a814:	d30c      	bcc.n	800a830 <__copybits+0x36>
 800a816:	1aa3      	subs	r3, r4, r2
 800a818:	3b11      	subs	r3, #17
 800a81a:	f023 0303 	bic.w	r3, r3, #3
 800a81e:	3211      	adds	r2, #17
 800a820:	42a2      	cmp	r2, r4
 800a822:	bf88      	it	hi
 800a824:	2300      	movhi	r3, #0
 800a826:	4418      	add	r0, r3
 800a828:	2300      	movs	r3, #0
 800a82a:	4288      	cmp	r0, r1
 800a82c:	d305      	bcc.n	800a83a <__copybits+0x40>
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	f853 6b04 	ldr.w	r6, [r3], #4
 800a834:	f845 6f04 	str.w	r6, [r5, #4]!
 800a838:	e7eb      	b.n	800a812 <__copybits+0x18>
 800a83a:	f840 3b04 	str.w	r3, [r0], #4
 800a83e:	e7f4      	b.n	800a82a <__copybits+0x30>

0800a840 <__any_on>:
 800a840:	f100 0214 	add.w	r2, r0, #20
 800a844:	6900      	ldr	r0, [r0, #16]
 800a846:	114b      	asrs	r3, r1, #5
 800a848:	4298      	cmp	r0, r3
 800a84a:	b510      	push	{r4, lr}
 800a84c:	db11      	blt.n	800a872 <__any_on+0x32>
 800a84e:	dd0a      	ble.n	800a866 <__any_on+0x26>
 800a850:	f011 011f 	ands.w	r1, r1, #31
 800a854:	d007      	beq.n	800a866 <__any_on+0x26>
 800a856:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a85a:	fa24 f001 	lsr.w	r0, r4, r1
 800a85e:	fa00 f101 	lsl.w	r1, r0, r1
 800a862:	428c      	cmp	r4, r1
 800a864:	d10b      	bne.n	800a87e <__any_on+0x3e>
 800a866:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d803      	bhi.n	800a876 <__any_on+0x36>
 800a86e:	2000      	movs	r0, #0
 800a870:	bd10      	pop	{r4, pc}
 800a872:	4603      	mov	r3, r0
 800a874:	e7f7      	b.n	800a866 <__any_on+0x26>
 800a876:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a87a:	2900      	cmp	r1, #0
 800a87c:	d0f5      	beq.n	800a86a <__any_on+0x2a>
 800a87e:	2001      	movs	r0, #1
 800a880:	e7f6      	b.n	800a870 <__any_on+0x30>

0800a882 <__ascii_wctomb>:
 800a882:	b149      	cbz	r1, 800a898 <__ascii_wctomb+0x16>
 800a884:	2aff      	cmp	r2, #255	; 0xff
 800a886:	bf85      	ittet	hi
 800a888:	238a      	movhi	r3, #138	; 0x8a
 800a88a:	6003      	strhi	r3, [r0, #0]
 800a88c:	700a      	strbls	r2, [r1, #0]
 800a88e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a892:	bf98      	it	ls
 800a894:	2001      	movls	r0, #1
 800a896:	4770      	bx	lr
 800a898:	4608      	mov	r0, r1
 800a89a:	4770      	bx	lr

0800a89c <__ssputs_r>:
 800a89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a0:	688e      	ldr	r6, [r1, #8]
 800a8a2:	461f      	mov	r7, r3
 800a8a4:	42be      	cmp	r6, r7
 800a8a6:	680b      	ldr	r3, [r1, #0]
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	d82c      	bhi.n	800a90a <__ssputs_r+0x6e>
 800a8b0:	898a      	ldrh	r2, [r1, #12]
 800a8b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8b6:	d026      	beq.n	800a906 <__ssputs_r+0x6a>
 800a8b8:	6965      	ldr	r5, [r4, #20]
 800a8ba:	6909      	ldr	r1, [r1, #16]
 800a8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8c0:	eba3 0901 	sub.w	r9, r3, r1
 800a8c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8c8:	1c7b      	adds	r3, r7, #1
 800a8ca:	444b      	add	r3, r9
 800a8cc:	106d      	asrs	r5, r5, #1
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	bf38      	it	cc
 800a8d2:	461d      	movcc	r5, r3
 800a8d4:	0553      	lsls	r3, r2, #21
 800a8d6:	d527      	bpl.n	800a928 <__ssputs_r+0x8c>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7ff fa87 	bl	8009dec <_malloc_r>
 800a8de:	4606      	mov	r6, r0
 800a8e0:	b360      	cbz	r0, 800a93c <__ssputs_r+0xa0>
 800a8e2:	6921      	ldr	r1, [r4, #16]
 800a8e4:	464a      	mov	r2, r9
 800a8e6:	f7fe f805 	bl	80088f4 <memcpy>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f4:	81a3      	strh	r3, [r4, #12]
 800a8f6:	6126      	str	r6, [r4, #16]
 800a8f8:	6165      	str	r5, [r4, #20]
 800a8fa:	444e      	add	r6, r9
 800a8fc:	eba5 0509 	sub.w	r5, r5, r9
 800a900:	6026      	str	r6, [r4, #0]
 800a902:	60a5      	str	r5, [r4, #8]
 800a904:	463e      	mov	r6, r7
 800a906:	42be      	cmp	r6, r7
 800a908:	d900      	bls.n	800a90c <__ssputs_r+0x70>
 800a90a:	463e      	mov	r6, r7
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	4632      	mov	r2, r6
 800a910:	4641      	mov	r1, r8
 800a912:	f000 f9db 	bl	800accc <memmove>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	1b9b      	subs	r3, r3, r6
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	4433      	add	r3, r6
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	2000      	movs	r0, #0
 800a924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a928:	462a      	mov	r2, r5
 800a92a:	f000 fa16 	bl	800ad5a <_realloc_r>
 800a92e:	4606      	mov	r6, r0
 800a930:	2800      	cmp	r0, #0
 800a932:	d1e0      	bne.n	800a8f6 <__ssputs_r+0x5a>
 800a934:	6921      	ldr	r1, [r4, #16]
 800a936:	4650      	mov	r0, sl
 800a938:	f7fe fe8c 	bl	8009654 <_free_r>
 800a93c:	230c      	movs	r3, #12
 800a93e:	f8ca 3000 	str.w	r3, [sl]
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	e7e9      	b.n	800a924 <__ssputs_r+0x88>

0800a950 <_svfiprintf_r>:
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	4698      	mov	r8, r3
 800a956:	898b      	ldrh	r3, [r1, #12]
 800a958:	061b      	lsls	r3, r3, #24
 800a95a:	b09d      	sub	sp, #116	; 0x74
 800a95c:	4607      	mov	r7, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	4614      	mov	r4, r2
 800a962:	d50e      	bpl.n	800a982 <_svfiprintf_r+0x32>
 800a964:	690b      	ldr	r3, [r1, #16]
 800a966:	b963      	cbnz	r3, 800a982 <_svfiprintf_r+0x32>
 800a968:	2140      	movs	r1, #64	; 0x40
 800a96a:	f7ff fa3f 	bl	8009dec <_malloc_r>
 800a96e:	6028      	str	r0, [r5, #0]
 800a970:	6128      	str	r0, [r5, #16]
 800a972:	b920      	cbnz	r0, 800a97e <_svfiprintf_r+0x2e>
 800a974:	230c      	movs	r3, #12
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	f04f 30ff 	mov.w	r0, #4294967295
 800a97c:	e0d0      	b.n	800ab20 <_svfiprintf_r+0x1d0>
 800a97e:	2340      	movs	r3, #64	; 0x40
 800a980:	616b      	str	r3, [r5, #20]
 800a982:	2300      	movs	r3, #0
 800a984:	9309      	str	r3, [sp, #36]	; 0x24
 800a986:	2320      	movs	r3, #32
 800a988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a98c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a990:	2330      	movs	r3, #48	; 0x30
 800a992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab38 <_svfiprintf_r+0x1e8>
 800a996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a99a:	f04f 0901 	mov.w	r9, #1
 800a99e:	4623      	mov	r3, r4
 800a9a0:	469a      	mov	sl, r3
 800a9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9a6:	b10a      	cbz	r2, 800a9ac <_svfiprintf_r+0x5c>
 800a9a8:	2a25      	cmp	r2, #37	; 0x25
 800a9aa:	d1f9      	bne.n	800a9a0 <_svfiprintf_r+0x50>
 800a9ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a9b0:	d00b      	beq.n	800a9ca <_svfiprintf_r+0x7a>
 800a9b2:	465b      	mov	r3, fp
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f7ff ff6f 	bl	800a89c <__ssputs_r>
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f000 80a9 	beq.w	800ab16 <_svfiprintf_r+0x1c6>
 800a9c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9c6:	445a      	add	r2, fp
 800a9c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 80a1 	beq.w	800ab16 <_svfiprintf_r+0x1c6>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9de:	f10a 0a01 	add.w	sl, sl, #1
 800a9e2:	9304      	str	r3, [sp, #16]
 800a9e4:	9307      	str	r3, [sp, #28]
 800a9e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a9ec:	4654      	mov	r4, sl
 800a9ee:	2205      	movs	r2, #5
 800a9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f4:	4850      	ldr	r0, [pc, #320]	; (800ab38 <_svfiprintf_r+0x1e8>)
 800a9f6:	f7f5 fbfb 	bl	80001f0 <memchr>
 800a9fa:	9a04      	ldr	r2, [sp, #16]
 800a9fc:	b9d8      	cbnz	r0, 800aa36 <_svfiprintf_r+0xe6>
 800a9fe:	06d0      	lsls	r0, r2, #27
 800aa00:	bf44      	itt	mi
 800aa02:	2320      	movmi	r3, #32
 800aa04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa08:	0711      	lsls	r1, r2, #28
 800aa0a:	bf44      	itt	mi
 800aa0c:	232b      	movmi	r3, #43	; 0x2b
 800aa0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa12:	f89a 3000 	ldrb.w	r3, [sl]
 800aa16:	2b2a      	cmp	r3, #42	; 0x2a
 800aa18:	d015      	beq.n	800aa46 <_svfiprintf_r+0xf6>
 800aa1a:	9a07      	ldr	r2, [sp, #28]
 800aa1c:	4654      	mov	r4, sl
 800aa1e:	2000      	movs	r0, #0
 800aa20:	f04f 0c0a 	mov.w	ip, #10
 800aa24:	4621      	mov	r1, r4
 800aa26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa2a:	3b30      	subs	r3, #48	; 0x30
 800aa2c:	2b09      	cmp	r3, #9
 800aa2e:	d94d      	bls.n	800aacc <_svfiprintf_r+0x17c>
 800aa30:	b1b0      	cbz	r0, 800aa60 <_svfiprintf_r+0x110>
 800aa32:	9207      	str	r2, [sp, #28]
 800aa34:	e014      	b.n	800aa60 <_svfiprintf_r+0x110>
 800aa36:	eba0 0308 	sub.w	r3, r0, r8
 800aa3a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	46a2      	mov	sl, r4
 800aa44:	e7d2      	b.n	800a9ec <_svfiprintf_r+0x9c>
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	1d19      	adds	r1, r3, #4
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	9103      	str	r1, [sp, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	bfbb      	ittet	lt
 800aa52:	425b      	neglt	r3, r3
 800aa54:	f042 0202 	orrlt.w	r2, r2, #2
 800aa58:	9307      	strge	r3, [sp, #28]
 800aa5a:	9307      	strlt	r3, [sp, #28]
 800aa5c:	bfb8      	it	lt
 800aa5e:	9204      	strlt	r2, [sp, #16]
 800aa60:	7823      	ldrb	r3, [r4, #0]
 800aa62:	2b2e      	cmp	r3, #46	; 0x2e
 800aa64:	d10c      	bne.n	800aa80 <_svfiprintf_r+0x130>
 800aa66:	7863      	ldrb	r3, [r4, #1]
 800aa68:	2b2a      	cmp	r3, #42	; 0x2a
 800aa6a:	d134      	bne.n	800aad6 <_svfiprintf_r+0x186>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	1d1a      	adds	r2, r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	9203      	str	r2, [sp, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfb8      	it	lt
 800aa78:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa7c:	3402      	adds	r4, #2
 800aa7e:	9305      	str	r3, [sp, #20]
 800aa80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ab48 <_svfiprintf_r+0x1f8>
 800aa84:	7821      	ldrb	r1, [r4, #0]
 800aa86:	2203      	movs	r2, #3
 800aa88:	4650      	mov	r0, sl
 800aa8a:	f7f5 fbb1 	bl	80001f0 <memchr>
 800aa8e:	b138      	cbz	r0, 800aaa0 <_svfiprintf_r+0x150>
 800aa90:	9b04      	ldr	r3, [sp, #16]
 800aa92:	eba0 000a 	sub.w	r0, r0, sl
 800aa96:	2240      	movs	r2, #64	; 0x40
 800aa98:	4082      	lsls	r2, r0
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	3401      	adds	r4, #1
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa4:	4825      	ldr	r0, [pc, #148]	; (800ab3c <_svfiprintf_r+0x1ec>)
 800aaa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaaa:	2206      	movs	r2, #6
 800aaac:	f7f5 fba0 	bl	80001f0 <memchr>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d038      	beq.n	800ab26 <_svfiprintf_r+0x1d6>
 800aab4:	4b22      	ldr	r3, [pc, #136]	; (800ab40 <_svfiprintf_r+0x1f0>)
 800aab6:	bb1b      	cbnz	r3, 800ab00 <_svfiprintf_r+0x1b0>
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	3307      	adds	r3, #7
 800aabc:	f023 0307 	bic.w	r3, r3, #7
 800aac0:	3308      	adds	r3, #8
 800aac2:	9303      	str	r3, [sp, #12]
 800aac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac6:	4433      	add	r3, r6
 800aac8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaca:	e768      	b.n	800a99e <_svfiprintf_r+0x4e>
 800aacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad0:	460c      	mov	r4, r1
 800aad2:	2001      	movs	r0, #1
 800aad4:	e7a6      	b.n	800aa24 <_svfiprintf_r+0xd4>
 800aad6:	2300      	movs	r3, #0
 800aad8:	3401      	adds	r4, #1
 800aada:	9305      	str	r3, [sp, #20]
 800aadc:	4619      	mov	r1, r3
 800aade:	f04f 0c0a 	mov.w	ip, #10
 800aae2:	4620      	mov	r0, r4
 800aae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aae8:	3a30      	subs	r2, #48	; 0x30
 800aaea:	2a09      	cmp	r2, #9
 800aaec:	d903      	bls.n	800aaf6 <_svfiprintf_r+0x1a6>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0c6      	beq.n	800aa80 <_svfiprintf_r+0x130>
 800aaf2:	9105      	str	r1, [sp, #20]
 800aaf4:	e7c4      	b.n	800aa80 <_svfiprintf_r+0x130>
 800aaf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aafa:	4604      	mov	r4, r0
 800aafc:	2301      	movs	r3, #1
 800aafe:	e7f0      	b.n	800aae2 <_svfiprintf_r+0x192>
 800ab00:	ab03      	add	r3, sp, #12
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	462a      	mov	r2, r5
 800ab06:	4b0f      	ldr	r3, [pc, #60]	; (800ab44 <_svfiprintf_r+0x1f4>)
 800ab08:	a904      	add	r1, sp, #16
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	f7fd f91a 	bl	8007d44 <_printf_float>
 800ab10:	1c42      	adds	r2, r0, #1
 800ab12:	4606      	mov	r6, r0
 800ab14:	d1d6      	bne.n	800aac4 <_svfiprintf_r+0x174>
 800ab16:	89ab      	ldrh	r3, [r5, #12]
 800ab18:	065b      	lsls	r3, r3, #25
 800ab1a:	f53f af2d 	bmi.w	800a978 <_svfiprintf_r+0x28>
 800ab1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab20:	b01d      	add	sp, #116	; 0x74
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab26:	ab03      	add	r3, sp, #12
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <_svfiprintf_r+0x1f4>)
 800ab2e:	a904      	add	r1, sp, #16
 800ab30:	4638      	mov	r0, r7
 800ab32:	f7fd fbab 	bl	800828c <_printf_i>
 800ab36:	e7eb      	b.n	800ab10 <_svfiprintf_r+0x1c0>
 800ab38:	0800e575 	.word	0x0800e575
 800ab3c:	0800e57f 	.word	0x0800e57f
 800ab40:	08007d45 	.word	0x08007d45
 800ab44:	0800a89d 	.word	0x0800a89d
 800ab48:	0800e57b 	.word	0x0800e57b

0800ab4c <__sflush_r>:
 800ab4c:	898a      	ldrh	r2, [r1, #12]
 800ab4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	0710      	lsls	r0, r2, #28
 800ab56:	460c      	mov	r4, r1
 800ab58:	d458      	bmi.n	800ac0c <__sflush_r+0xc0>
 800ab5a:	684b      	ldr	r3, [r1, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc05      	bgt.n	800ab6c <__sflush_r+0x20>
 800ab60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dc02      	bgt.n	800ab6c <__sflush_r+0x20>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab6e:	2e00      	cmp	r6, #0
 800ab70:	d0f9      	beq.n	800ab66 <__sflush_r+0x1a>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab78:	682f      	ldr	r7, [r5, #0]
 800ab7a:	6a21      	ldr	r1, [r4, #32]
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	d032      	beq.n	800abe6 <__sflush_r+0x9a>
 800ab80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	075a      	lsls	r2, r3, #29
 800ab86:	d505      	bpl.n	800ab94 <__sflush_r+0x48>
 800ab88:	6863      	ldr	r3, [r4, #4]
 800ab8a:	1ac0      	subs	r0, r0, r3
 800ab8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab8e:	b10b      	cbz	r3, 800ab94 <__sflush_r+0x48>
 800ab90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab92:	1ac0      	subs	r0, r0, r3
 800ab94:	2300      	movs	r3, #0
 800ab96:	4602      	mov	r2, r0
 800ab98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab9a:	6a21      	ldr	r1, [r4, #32]
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b0      	blx	r6
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	d106      	bne.n	800abb4 <__sflush_r+0x68>
 800aba6:	6829      	ldr	r1, [r5, #0]
 800aba8:	291d      	cmp	r1, #29
 800abaa:	d82b      	bhi.n	800ac04 <__sflush_r+0xb8>
 800abac:	4a29      	ldr	r2, [pc, #164]	; (800ac54 <__sflush_r+0x108>)
 800abae:	410a      	asrs	r2, r1
 800abb0:	07d6      	lsls	r6, r2, #31
 800abb2:	d427      	bmi.n	800ac04 <__sflush_r+0xb8>
 800abb4:	2200      	movs	r2, #0
 800abb6:	6062      	str	r2, [r4, #4]
 800abb8:	04d9      	lsls	r1, r3, #19
 800abba:	6922      	ldr	r2, [r4, #16]
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	d504      	bpl.n	800abca <__sflush_r+0x7e>
 800abc0:	1c42      	adds	r2, r0, #1
 800abc2:	d101      	bne.n	800abc8 <__sflush_r+0x7c>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b903      	cbnz	r3, 800abca <__sflush_r+0x7e>
 800abc8:	6560      	str	r0, [r4, #84]	; 0x54
 800abca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abcc:	602f      	str	r7, [r5, #0]
 800abce:	2900      	cmp	r1, #0
 800abd0:	d0c9      	beq.n	800ab66 <__sflush_r+0x1a>
 800abd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd6:	4299      	cmp	r1, r3
 800abd8:	d002      	beq.n	800abe0 <__sflush_r+0x94>
 800abda:	4628      	mov	r0, r5
 800abdc:	f7fe fd3a 	bl	8009654 <_free_r>
 800abe0:	2000      	movs	r0, #0
 800abe2:	6360      	str	r0, [r4, #52]	; 0x34
 800abe4:	e7c0      	b.n	800ab68 <__sflush_r+0x1c>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4628      	mov	r0, r5
 800abea:	47b0      	blx	r6
 800abec:	1c41      	adds	r1, r0, #1
 800abee:	d1c8      	bne.n	800ab82 <__sflush_r+0x36>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0c5      	beq.n	800ab82 <__sflush_r+0x36>
 800abf6:	2b1d      	cmp	r3, #29
 800abf8:	d001      	beq.n	800abfe <__sflush_r+0xb2>
 800abfa:	2b16      	cmp	r3, #22
 800abfc:	d101      	bne.n	800ac02 <__sflush_r+0xb6>
 800abfe:	602f      	str	r7, [r5, #0]
 800ac00:	e7b1      	b.n	800ab66 <__sflush_r+0x1a>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac08:	81a3      	strh	r3, [r4, #12]
 800ac0a:	e7ad      	b.n	800ab68 <__sflush_r+0x1c>
 800ac0c:	690f      	ldr	r7, [r1, #16]
 800ac0e:	2f00      	cmp	r7, #0
 800ac10:	d0a9      	beq.n	800ab66 <__sflush_r+0x1a>
 800ac12:	0793      	lsls	r3, r2, #30
 800ac14:	680e      	ldr	r6, [r1, #0]
 800ac16:	bf08      	it	eq
 800ac18:	694b      	ldreq	r3, [r1, #20]
 800ac1a:	600f      	str	r7, [r1, #0]
 800ac1c:	bf18      	it	ne
 800ac1e:	2300      	movne	r3, #0
 800ac20:	eba6 0807 	sub.w	r8, r6, r7
 800ac24:	608b      	str	r3, [r1, #8]
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	dd9c      	ble.n	800ab66 <__sflush_r+0x1a>
 800ac2c:	6a21      	ldr	r1, [r4, #32]
 800ac2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac30:	4643      	mov	r3, r8
 800ac32:	463a      	mov	r2, r7
 800ac34:	4628      	mov	r0, r5
 800ac36:	47b0      	blx	r6
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dc06      	bgt.n	800ac4a <__sflush_r+0xfe>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e78e      	b.n	800ab68 <__sflush_r+0x1c>
 800ac4a:	4407      	add	r7, r0
 800ac4c:	eba8 0800 	sub.w	r8, r8, r0
 800ac50:	e7e9      	b.n	800ac26 <__sflush_r+0xda>
 800ac52:	bf00      	nop
 800ac54:	dfbffffe 	.word	0xdfbffffe

0800ac58 <_fflush_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	690b      	ldr	r3, [r1, #16]
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	b913      	cbnz	r3, 800ac68 <_fflush_r+0x10>
 800ac62:	2500      	movs	r5, #0
 800ac64:	4628      	mov	r0, r5
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	b118      	cbz	r0, 800ac72 <_fflush_r+0x1a>
 800ac6a:	6a03      	ldr	r3, [r0, #32]
 800ac6c:	b90b      	cbnz	r3, 800ac72 <_fflush_r+0x1a>
 800ac6e:	f7fd fca9 	bl	80085c4 <__sinit>
 800ac72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0f3      	beq.n	800ac62 <_fflush_r+0xa>
 800ac7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac7c:	07d0      	lsls	r0, r2, #31
 800ac7e:	d404      	bmi.n	800ac8a <_fflush_r+0x32>
 800ac80:	0599      	lsls	r1, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_fflush_r+0x32>
 800ac84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac86:	f7fd fe33 	bl	80088f0 <__retarget_lock_acquire_recursive>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	f7ff ff5d 	bl	800ab4c <__sflush_r>
 800ac92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac94:	07da      	lsls	r2, r3, #31
 800ac96:	4605      	mov	r5, r0
 800ac98:	d4e4      	bmi.n	800ac64 <_fflush_r+0xc>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	059b      	lsls	r3, r3, #22
 800ac9e:	d4e1      	bmi.n	800ac64 <_fflush_r+0xc>
 800aca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aca2:	f7fd fe26 	bl	80088f2 <__retarget_lock_release_recursive>
 800aca6:	e7dd      	b.n	800ac64 <_fflush_r+0xc>

0800aca8 <fiprintf>:
 800aca8:	b40e      	push	{r1, r2, r3}
 800acaa:	b503      	push	{r0, r1, lr}
 800acac:	4601      	mov	r1, r0
 800acae:	ab03      	add	r3, sp, #12
 800acb0:	4805      	ldr	r0, [pc, #20]	; (800acc8 <fiprintf+0x20>)
 800acb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb6:	6800      	ldr	r0, [r0, #0]
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	f000 f8a7 	bl	800ae0c <_vfiprintf_r>
 800acbe:	b002      	add	sp, #8
 800acc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc4:	b003      	add	sp, #12
 800acc6:	4770      	bx	lr
 800acc8:	200001f4 	.word	0x200001f4

0800accc <memmove>:
 800accc:	4288      	cmp	r0, r1
 800acce:	b510      	push	{r4, lr}
 800acd0:	eb01 0402 	add.w	r4, r1, r2
 800acd4:	d902      	bls.n	800acdc <memmove+0x10>
 800acd6:	4284      	cmp	r4, r0
 800acd8:	4623      	mov	r3, r4
 800acda:	d807      	bhi.n	800acec <memmove+0x20>
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	42a1      	cmp	r1, r4
 800ace0:	d008      	beq.n	800acf4 <memmove+0x28>
 800ace2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acea:	e7f8      	b.n	800acde <memmove+0x12>
 800acec:	4402      	add	r2, r0
 800acee:	4601      	mov	r1, r0
 800acf0:	428a      	cmp	r2, r1
 800acf2:	d100      	bne.n	800acf6 <memmove+0x2a>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfe:	e7f7      	b.n	800acf0 <memmove+0x24>

0800ad00 <_sbrk_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d06      	ldr	r5, [pc, #24]	; (800ad1c <_sbrk_r+0x1c>)
 800ad04:	2300      	movs	r3, #0
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7f8 fa4e 	bl	80031ac <_sbrk>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_sbrk_r+0x1a>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_sbrk_r+0x1a>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20000fac 	.word	0x20000fac

0800ad20 <abort>:
 800ad20:	b508      	push	{r3, lr}
 800ad22:	2006      	movs	r0, #6
 800ad24:	f000 fa4a 	bl	800b1bc <raise>
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f7f8 f9c7 	bl	80030bc <_exit>

0800ad2e <_calloc_r>:
 800ad2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad30:	fba1 2402 	umull	r2, r4, r1, r2
 800ad34:	b94c      	cbnz	r4, 800ad4a <_calloc_r+0x1c>
 800ad36:	4611      	mov	r1, r2
 800ad38:	9201      	str	r2, [sp, #4]
 800ad3a:	f7ff f857 	bl	8009dec <_malloc_r>
 800ad3e:	9a01      	ldr	r2, [sp, #4]
 800ad40:	4605      	mov	r5, r0
 800ad42:	b930      	cbnz	r0, 800ad52 <_calloc_r+0x24>
 800ad44:	4628      	mov	r0, r5
 800ad46:	b003      	add	sp, #12
 800ad48:	bd30      	pop	{r4, r5, pc}
 800ad4a:	220c      	movs	r2, #12
 800ad4c:	6002      	str	r2, [r0, #0]
 800ad4e:	2500      	movs	r5, #0
 800ad50:	e7f8      	b.n	800ad44 <_calloc_r+0x16>
 800ad52:	4621      	mov	r1, r4
 800ad54:	f7fd fccf 	bl	80086f6 <memset>
 800ad58:	e7f4      	b.n	800ad44 <_calloc_r+0x16>

0800ad5a <_realloc_r>:
 800ad5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5e:	4680      	mov	r8, r0
 800ad60:	4614      	mov	r4, r2
 800ad62:	460e      	mov	r6, r1
 800ad64:	b921      	cbnz	r1, 800ad70 <_realloc_r+0x16>
 800ad66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	f7ff b83e 	b.w	8009dec <_malloc_r>
 800ad70:	b92a      	cbnz	r2, 800ad7e <_realloc_r+0x24>
 800ad72:	f7fe fc6f 	bl	8009654 <_free_r>
 800ad76:	4625      	mov	r5, r4
 800ad78:	4628      	mov	r0, r5
 800ad7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7e:	f000 fa39 	bl	800b1f4 <_malloc_usable_size_r>
 800ad82:	4284      	cmp	r4, r0
 800ad84:	4607      	mov	r7, r0
 800ad86:	d802      	bhi.n	800ad8e <_realloc_r+0x34>
 800ad88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad8c:	d812      	bhi.n	800adb4 <_realloc_r+0x5a>
 800ad8e:	4621      	mov	r1, r4
 800ad90:	4640      	mov	r0, r8
 800ad92:	f7ff f82b 	bl	8009dec <_malloc_r>
 800ad96:	4605      	mov	r5, r0
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d0ed      	beq.n	800ad78 <_realloc_r+0x1e>
 800ad9c:	42bc      	cmp	r4, r7
 800ad9e:	4622      	mov	r2, r4
 800ada0:	4631      	mov	r1, r6
 800ada2:	bf28      	it	cs
 800ada4:	463a      	movcs	r2, r7
 800ada6:	f7fd fda5 	bl	80088f4 <memcpy>
 800adaa:	4631      	mov	r1, r6
 800adac:	4640      	mov	r0, r8
 800adae:	f7fe fc51 	bl	8009654 <_free_r>
 800adb2:	e7e1      	b.n	800ad78 <_realloc_r+0x1e>
 800adb4:	4635      	mov	r5, r6
 800adb6:	e7df      	b.n	800ad78 <_realloc_r+0x1e>

0800adb8 <__sfputc_r>:
 800adb8:	6893      	ldr	r3, [r2, #8]
 800adba:	3b01      	subs	r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	b410      	push	{r4}
 800adc0:	6093      	str	r3, [r2, #8]
 800adc2:	da08      	bge.n	800add6 <__sfputc_r+0x1e>
 800adc4:	6994      	ldr	r4, [r2, #24]
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	db01      	blt.n	800adce <__sfputc_r+0x16>
 800adca:	290a      	cmp	r1, #10
 800adcc:	d103      	bne.n	800add6 <__sfputc_r+0x1e>
 800adce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800add2:	f000 b935 	b.w	800b040 <__swbuf_r>
 800add6:	6813      	ldr	r3, [r2, #0]
 800add8:	1c58      	adds	r0, r3, #1
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	7019      	strb	r1, [r3, #0]
 800adde:	4608      	mov	r0, r1
 800ade0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <__sfputs_r>:
 800ade6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade8:	4606      	mov	r6, r0
 800adea:	460f      	mov	r7, r1
 800adec:	4614      	mov	r4, r2
 800adee:	18d5      	adds	r5, r2, r3
 800adf0:	42ac      	cmp	r4, r5
 800adf2:	d101      	bne.n	800adf8 <__sfputs_r+0x12>
 800adf4:	2000      	movs	r0, #0
 800adf6:	e007      	b.n	800ae08 <__sfputs_r+0x22>
 800adf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfc:	463a      	mov	r2, r7
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff ffda 	bl	800adb8 <__sfputc_r>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d1f3      	bne.n	800adf0 <__sfputs_r+0xa>
 800ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae0c <_vfiprintf_r>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	460d      	mov	r5, r1
 800ae12:	b09d      	sub	sp, #116	; 0x74
 800ae14:	4614      	mov	r4, r2
 800ae16:	4698      	mov	r8, r3
 800ae18:	4606      	mov	r6, r0
 800ae1a:	b118      	cbz	r0, 800ae24 <_vfiprintf_r+0x18>
 800ae1c:	6a03      	ldr	r3, [r0, #32]
 800ae1e:	b90b      	cbnz	r3, 800ae24 <_vfiprintf_r+0x18>
 800ae20:	f7fd fbd0 	bl	80085c4 <__sinit>
 800ae24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae26:	07d9      	lsls	r1, r3, #31
 800ae28:	d405      	bmi.n	800ae36 <_vfiprintf_r+0x2a>
 800ae2a:	89ab      	ldrh	r3, [r5, #12]
 800ae2c:	059a      	lsls	r2, r3, #22
 800ae2e:	d402      	bmi.n	800ae36 <_vfiprintf_r+0x2a>
 800ae30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae32:	f7fd fd5d 	bl	80088f0 <__retarget_lock_acquire_recursive>
 800ae36:	89ab      	ldrh	r3, [r5, #12]
 800ae38:	071b      	lsls	r3, r3, #28
 800ae3a:	d501      	bpl.n	800ae40 <_vfiprintf_r+0x34>
 800ae3c:	692b      	ldr	r3, [r5, #16]
 800ae3e:	b99b      	cbnz	r3, 800ae68 <_vfiprintf_r+0x5c>
 800ae40:	4629      	mov	r1, r5
 800ae42:	4630      	mov	r0, r6
 800ae44:	f000 f93a 	bl	800b0bc <__swsetup_r>
 800ae48:	b170      	cbz	r0, 800ae68 <_vfiprintf_r+0x5c>
 800ae4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae4c:	07dc      	lsls	r4, r3, #31
 800ae4e:	d504      	bpl.n	800ae5a <_vfiprintf_r+0x4e>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	b01d      	add	sp, #116	; 0x74
 800ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	0598      	lsls	r0, r3, #22
 800ae5e:	d4f7      	bmi.n	800ae50 <_vfiprintf_r+0x44>
 800ae60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae62:	f7fd fd46 	bl	80088f2 <__retarget_lock_release_recursive>
 800ae66:	e7f3      	b.n	800ae50 <_vfiprintf_r+0x44>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae6c:	2320      	movs	r3, #32
 800ae6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae76:	2330      	movs	r3, #48	; 0x30
 800ae78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b02c <_vfiprintf_r+0x220>
 800ae7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae80:	f04f 0901 	mov.w	r9, #1
 800ae84:	4623      	mov	r3, r4
 800ae86:	469a      	mov	sl, r3
 800ae88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae8c:	b10a      	cbz	r2, 800ae92 <_vfiprintf_r+0x86>
 800ae8e:	2a25      	cmp	r2, #37	; 0x25
 800ae90:	d1f9      	bne.n	800ae86 <_vfiprintf_r+0x7a>
 800ae92:	ebba 0b04 	subs.w	fp, sl, r4
 800ae96:	d00b      	beq.n	800aeb0 <_vfiprintf_r+0xa4>
 800ae98:	465b      	mov	r3, fp
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f7ff ffa1 	bl	800ade6 <__sfputs_r>
 800aea4:	3001      	adds	r0, #1
 800aea6:	f000 80a9 	beq.w	800affc <_vfiprintf_r+0x1f0>
 800aeaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeac:	445a      	add	r2, fp
 800aeae:	9209      	str	r2, [sp, #36]	; 0x24
 800aeb0:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80a1 	beq.w	800affc <_vfiprintf_r+0x1f0>
 800aeba:	2300      	movs	r3, #0
 800aebc:	f04f 32ff 	mov.w	r2, #4294967295
 800aec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec4:	f10a 0a01 	add.w	sl, sl, #1
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	9307      	str	r3, [sp, #28]
 800aecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aed0:	931a      	str	r3, [sp, #104]	; 0x68
 800aed2:	4654      	mov	r4, sl
 800aed4:	2205      	movs	r2, #5
 800aed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeda:	4854      	ldr	r0, [pc, #336]	; (800b02c <_vfiprintf_r+0x220>)
 800aedc:	f7f5 f988 	bl	80001f0 <memchr>
 800aee0:	9a04      	ldr	r2, [sp, #16]
 800aee2:	b9d8      	cbnz	r0, 800af1c <_vfiprintf_r+0x110>
 800aee4:	06d1      	lsls	r1, r2, #27
 800aee6:	bf44      	itt	mi
 800aee8:	2320      	movmi	r3, #32
 800aeea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeee:	0713      	lsls	r3, r2, #28
 800aef0:	bf44      	itt	mi
 800aef2:	232b      	movmi	r3, #43	; 0x2b
 800aef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aef8:	f89a 3000 	ldrb.w	r3, [sl]
 800aefc:	2b2a      	cmp	r3, #42	; 0x2a
 800aefe:	d015      	beq.n	800af2c <_vfiprintf_r+0x120>
 800af00:	9a07      	ldr	r2, [sp, #28]
 800af02:	4654      	mov	r4, sl
 800af04:	2000      	movs	r0, #0
 800af06:	f04f 0c0a 	mov.w	ip, #10
 800af0a:	4621      	mov	r1, r4
 800af0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af10:	3b30      	subs	r3, #48	; 0x30
 800af12:	2b09      	cmp	r3, #9
 800af14:	d94d      	bls.n	800afb2 <_vfiprintf_r+0x1a6>
 800af16:	b1b0      	cbz	r0, 800af46 <_vfiprintf_r+0x13a>
 800af18:	9207      	str	r2, [sp, #28]
 800af1a:	e014      	b.n	800af46 <_vfiprintf_r+0x13a>
 800af1c:	eba0 0308 	sub.w	r3, r0, r8
 800af20:	fa09 f303 	lsl.w	r3, r9, r3
 800af24:	4313      	orrs	r3, r2
 800af26:	9304      	str	r3, [sp, #16]
 800af28:	46a2      	mov	sl, r4
 800af2a:	e7d2      	b.n	800aed2 <_vfiprintf_r+0xc6>
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	1d19      	adds	r1, r3, #4
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	9103      	str	r1, [sp, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfbb      	ittet	lt
 800af38:	425b      	neglt	r3, r3
 800af3a:	f042 0202 	orrlt.w	r2, r2, #2
 800af3e:	9307      	strge	r3, [sp, #28]
 800af40:	9307      	strlt	r3, [sp, #28]
 800af42:	bfb8      	it	lt
 800af44:	9204      	strlt	r2, [sp, #16]
 800af46:	7823      	ldrb	r3, [r4, #0]
 800af48:	2b2e      	cmp	r3, #46	; 0x2e
 800af4a:	d10c      	bne.n	800af66 <_vfiprintf_r+0x15a>
 800af4c:	7863      	ldrb	r3, [r4, #1]
 800af4e:	2b2a      	cmp	r3, #42	; 0x2a
 800af50:	d134      	bne.n	800afbc <_vfiprintf_r+0x1b0>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	1d1a      	adds	r2, r3, #4
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	9203      	str	r2, [sp, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	bfb8      	it	lt
 800af5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800af62:	3402      	adds	r4, #2
 800af64:	9305      	str	r3, [sp, #20]
 800af66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b03c <_vfiprintf_r+0x230>
 800af6a:	7821      	ldrb	r1, [r4, #0]
 800af6c:	2203      	movs	r2, #3
 800af6e:	4650      	mov	r0, sl
 800af70:	f7f5 f93e 	bl	80001f0 <memchr>
 800af74:	b138      	cbz	r0, 800af86 <_vfiprintf_r+0x17a>
 800af76:	9b04      	ldr	r3, [sp, #16]
 800af78:	eba0 000a 	sub.w	r0, r0, sl
 800af7c:	2240      	movs	r2, #64	; 0x40
 800af7e:	4082      	lsls	r2, r0
 800af80:	4313      	orrs	r3, r2
 800af82:	3401      	adds	r4, #1
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8a:	4829      	ldr	r0, [pc, #164]	; (800b030 <_vfiprintf_r+0x224>)
 800af8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af90:	2206      	movs	r2, #6
 800af92:	f7f5 f92d 	bl	80001f0 <memchr>
 800af96:	2800      	cmp	r0, #0
 800af98:	d03f      	beq.n	800b01a <_vfiprintf_r+0x20e>
 800af9a:	4b26      	ldr	r3, [pc, #152]	; (800b034 <_vfiprintf_r+0x228>)
 800af9c:	bb1b      	cbnz	r3, 800afe6 <_vfiprintf_r+0x1da>
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	3307      	adds	r3, #7
 800afa2:	f023 0307 	bic.w	r3, r3, #7
 800afa6:	3308      	adds	r3, #8
 800afa8:	9303      	str	r3, [sp, #12]
 800afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afac:	443b      	add	r3, r7
 800afae:	9309      	str	r3, [sp, #36]	; 0x24
 800afb0:	e768      	b.n	800ae84 <_vfiprintf_r+0x78>
 800afb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800afb6:	460c      	mov	r4, r1
 800afb8:	2001      	movs	r0, #1
 800afba:	e7a6      	b.n	800af0a <_vfiprintf_r+0xfe>
 800afbc:	2300      	movs	r3, #0
 800afbe:	3401      	adds	r4, #1
 800afc0:	9305      	str	r3, [sp, #20]
 800afc2:	4619      	mov	r1, r3
 800afc4:	f04f 0c0a 	mov.w	ip, #10
 800afc8:	4620      	mov	r0, r4
 800afca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afce:	3a30      	subs	r2, #48	; 0x30
 800afd0:	2a09      	cmp	r2, #9
 800afd2:	d903      	bls.n	800afdc <_vfiprintf_r+0x1d0>
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0c6      	beq.n	800af66 <_vfiprintf_r+0x15a>
 800afd8:	9105      	str	r1, [sp, #20]
 800afda:	e7c4      	b.n	800af66 <_vfiprintf_r+0x15a>
 800afdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800afe0:	4604      	mov	r4, r0
 800afe2:	2301      	movs	r3, #1
 800afe4:	e7f0      	b.n	800afc8 <_vfiprintf_r+0x1bc>
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	462a      	mov	r2, r5
 800afec:	4b12      	ldr	r3, [pc, #72]	; (800b038 <_vfiprintf_r+0x22c>)
 800afee:	a904      	add	r1, sp, #16
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7fc fea7 	bl	8007d44 <_printf_float>
 800aff6:	4607      	mov	r7, r0
 800aff8:	1c78      	adds	r0, r7, #1
 800affa:	d1d6      	bne.n	800afaa <_vfiprintf_r+0x19e>
 800affc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800affe:	07d9      	lsls	r1, r3, #31
 800b000:	d405      	bmi.n	800b00e <_vfiprintf_r+0x202>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	059a      	lsls	r2, r3, #22
 800b006:	d402      	bmi.n	800b00e <_vfiprintf_r+0x202>
 800b008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b00a:	f7fd fc72 	bl	80088f2 <__retarget_lock_release_recursive>
 800b00e:	89ab      	ldrh	r3, [r5, #12]
 800b010:	065b      	lsls	r3, r3, #25
 800b012:	f53f af1d 	bmi.w	800ae50 <_vfiprintf_r+0x44>
 800b016:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b018:	e71c      	b.n	800ae54 <_vfiprintf_r+0x48>
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462a      	mov	r2, r5
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <_vfiprintf_r+0x22c>)
 800b022:	a904      	add	r1, sp, #16
 800b024:	4630      	mov	r0, r6
 800b026:	f7fd f931 	bl	800828c <_printf_i>
 800b02a:	e7e4      	b.n	800aff6 <_vfiprintf_r+0x1ea>
 800b02c:	0800e575 	.word	0x0800e575
 800b030:	0800e57f 	.word	0x0800e57f
 800b034:	08007d45 	.word	0x08007d45
 800b038:	0800ade7 	.word	0x0800ade7
 800b03c:	0800e57b 	.word	0x0800e57b

0800b040 <__swbuf_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	460e      	mov	r6, r1
 800b044:	4614      	mov	r4, r2
 800b046:	4605      	mov	r5, r0
 800b048:	b118      	cbz	r0, 800b052 <__swbuf_r+0x12>
 800b04a:	6a03      	ldr	r3, [r0, #32]
 800b04c:	b90b      	cbnz	r3, 800b052 <__swbuf_r+0x12>
 800b04e:	f7fd fab9 	bl	80085c4 <__sinit>
 800b052:	69a3      	ldr	r3, [r4, #24]
 800b054:	60a3      	str	r3, [r4, #8]
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	071a      	lsls	r2, r3, #28
 800b05a:	d525      	bpl.n	800b0a8 <__swbuf_r+0x68>
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	b31b      	cbz	r3, 800b0a8 <__swbuf_r+0x68>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	6922      	ldr	r2, [r4, #16]
 800b064:	1a98      	subs	r0, r3, r2
 800b066:	6963      	ldr	r3, [r4, #20]
 800b068:	b2f6      	uxtb	r6, r6
 800b06a:	4283      	cmp	r3, r0
 800b06c:	4637      	mov	r7, r6
 800b06e:	dc04      	bgt.n	800b07a <__swbuf_r+0x3a>
 800b070:	4621      	mov	r1, r4
 800b072:	4628      	mov	r0, r5
 800b074:	f7ff fdf0 	bl	800ac58 <_fflush_r>
 800b078:	b9e0      	cbnz	r0, 800b0b4 <__swbuf_r+0x74>
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	60a3      	str	r3, [r4, #8]
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	6022      	str	r2, [r4, #0]
 800b086:	701e      	strb	r6, [r3, #0]
 800b088:	6962      	ldr	r2, [r4, #20]
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d004      	beq.n	800b09a <__swbuf_r+0x5a>
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	07db      	lsls	r3, r3, #31
 800b094:	d506      	bpl.n	800b0a4 <__swbuf_r+0x64>
 800b096:	2e0a      	cmp	r6, #10
 800b098:	d104      	bne.n	800b0a4 <__swbuf_r+0x64>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4628      	mov	r0, r5
 800b09e:	f7ff fddb 	bl	800ac58 <_fflush_r>
 800b0a2:	b938      	cbnz	r0, 800b0b4 <__swbuf_r+0x74>
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 f806 	bl	800b0bc <__swsetup_r>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d0d5      	beq.n	800b060 <__swbuf_r+0x20>
 800b0b4:	f04f 37ff 	mov.w	r7, #4294967295
 800b0b8:	e7f4      	b.n	800b0a4 <__swbuf_r+0x64>
	...

0800b0bc <__swsetup_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4b2a      	ldr	r3, [pc, #168]	; (800b168 <__swsetup_r+0xac>)
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	b118      	cbz	r0, 800b0d0 <__swsetup_r+0x14>
 800b0c8:	6a03      	ldr	r3, [r0, #32]
 800b0ca:	b90b      	cbnz	r3, 800b0d0 <__swsetup_r+0x14>
 800b0cc:	f7fd fa7a 	bl	80085c4 <__sinit>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0d6:	0718      	lsls	r0, r3, #28
 800b0d8:	d422      	bmi.n	800b120 <__swsetup_r+0x64>
 800b0da:	06d9      	lsls	r1, r3, #27
 800b0dc:	d407      	bmi.n	800b0ee <__swsetup_r+0x32>
 800b0de:	2309      	movs	r3, #9
 800b0e0:	602b      	str	r3, [r5, #0]
 800b0e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ec:	e034      	b.n	800b158 <__swsetup_r+0x9c>
 800b0ee:	0758      	lsls	r0, r3, #29
 800b0f0:	d512      	bpl.n	800b118 <__swsetup_r+0x5c>
 800b0f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0f4:	b141      	cbz	r1, 800b108 <__swsetup_r+0x4c>
 800b0f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0fa:	4299      	cmp	r1, r3
 800b0fc:	d002      	beq.n	800b104 <__swsetup_r+0x48>
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7fe faa8 	bl	8009654 <_free_r>
 800b104:	2300      	movs	r3, #0
 800b106:	6363      	str	r3, [r4, #52]	; 0x34
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	2300      	movs	r3, #0
 800b112:	6063      	str	r3, [r4, #4]
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	f043 0308 	orr.w	r3, r3, #8
 800b11e:	81a3      	strh	r3, [r4, #12]
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	b94b      	cbnz	r3, 800b138 <__swsetup_r+0x7c>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b12a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b12e:	d003      	beq.n	800b138 <__swsetup_r+0x7c>
 800b130:	4621      	mov	r1, r4
 800b132:	4628      	mov	r0, r5
 800b134:	f000 f88c 	bl	800b250 <__smakebuf_r>
 800b138:	89a0      	ldrh	r0, [r4, #12]
 800b13a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b13e:	f010 0301 	ands.w	r3, r0, #1
 800b142:	d00a      	beq.n	800b15a <__swsetup_r+0x9e>
 800b144:	2300      	movs	r3, #0
 800b146:	60a3      	str	r3, [r4, #8]
 800b148:	6963      	ldr	r3, [r4, #20]
 800b14a:	425b      	negs	r3, r3
 800b14c:	61a3      	str	r3, [r4, #24]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	b943      	cbnz	r3, 800b164 <__swsetup_r+0xa8>
 800b152:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b156:	d1c4      	bne.n	800b0e2 <__swsetup_r+0x26>
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	0781      	lsls	r1, r0, #30
 800b15c:	bf58      	it	pl
 800b15e:	6963      	ldrpl	r3, [r4, #20]
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	e7f4      	b.n	800b14e <__swsetup_r+0x92>
 800b164:	2000      	movs	r0, #0
 800b166:	e7f7      	b.n	800b158 <__swsetup_r+0x9c>
 800b168:	200001f4 	.word	0x200001f4

0800b16c <_raise_r>:
 800b16c:	291f      	cmp	r1, #31
 800b16e:	b538      	push	{r3, r4, r5, lr}
 800b170:	4604      	mov	r4, r0
 800b172:	460d      	mov	r5, r1
 800b174:	d904      	bls.n	800b180 <_raise_r+0x14>
 800b176:	2316      	movs	r3, #22
 800b178:	6003      	str	r3, [r0, #0]
 800b17a:	f04f 30ff 	mov.w	r0, #4294967295
 800b17e:	bd38      	pop	{r3, r4, r5, pc}
 800b180:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b182:	b112      	cbz	r2, 800b18a <_raise_r+0x1e>
 800b184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b188:	b94b      	cbnz	r3, 800b19e <_raise_r+0x32>
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 f830 	bl	800b1f0 <_getpid_r>
 800b190:	462a      	mov	r2, r5
 800b192:	4601      	mov	r1, r0
 800b194:	4620      	mov	r0, r4
 800b196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b19a:	f000 b817 	b.w	800b1cc <_kill_r>
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d00a      	beq.n	800b1b8 <_raise_r+0x4c>
 800b1a2:	1c59      	adds	r1, r3, #1
 800b1a4:	d103      	bne.n	800b1ae <_raise_r+0x42>
 800b1a6:	2316      	movs	r3, #22
 800b1a8:	6003      	str	r3, [r0, #0]
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	e7e7      	b.n	800b17e <_raise_r+0x12>
 800b1ae:	2400      	movs	r4, #0
 800b1b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	4798      	blx	r3
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	e7e0      	b.n	800b17e <_raise_r+0x12>

0800b1bc <raise>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <raise+0xc>)
 800b1be:	4601      	mov	r1, r0
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f7ff bfd3 	b.w	800b16c <_raise_r>
 800b1c6:	bf00      	nop
 800b1c8:	200001f4 	.word	0x200001f4

0800b1cc <_kill_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4d07      	ldr	r5, [pc, #28]	; (800b1ec <_kill_r+0x20>)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	f7f7 ff5f 	bl	800309c <_kill>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d102      	bne.n	800b1e8 <_kill_r+0x1c>
 800b1e2:	682b      	ldr	r3, [r5, #0]
 800b1e4:	b103      	cbz	r3, 800b1e8 <_kill_r+0x1c>
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20000fac 	.word	0x20000fac

0800b1f0 <_getpid_r>:
 800b1f0:	f7f7 bf4c 	b.w	800308c <_getpid>

0800b1f4 <_malloc_usable_size_r>:
 800b1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f8:	1f18      	subs	r0, r3, #4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfbc      	itt	lt
 800b1fe:	580b      	ldrlt	r3, [r1, r0]
 800b200:	18c0      	addlt	r0, r0, r3
 800b202:	4770      	bx	lr

0800b204 <__swhatbuf_r>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	460c      	mov	r4, r1
 800b208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20c:	2900      	cmp	r1, #0
 800b20e:	b096      	sub	sp, #88	; 0x58
 800b210:	4615      	mov	r5, r2
 800b212:	461e      	mov	r6, r3
 800b214:	da0d      	bge.n	800b232 <__swhatbuf_r+0x2e>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b21c:	f04f 0100 	mov.w	r1, #0
 800b220:	bf0c      	ite	eq
 800b222:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b226:	2340      	movne	r3, #64	; 0x40
 800b228:	2000      	movs	r0, #0
 800b22a:	6031      	str	r1, [r6, #0]
 800b22c:	602b      	str	r3, [r5, #0]
 800b22e:	b016      	add	sp, #88	; 0x58
 800b230:	bd70      	pop	{r4, r5, r6, pc}
 800b232:	466a      	mov	r2, sp
 800b234:	f000 f848 	bl	800b2c8 <_fstat_r>
 800b238:	2800      	cmp	r0, #0
 800b23a:	dbec      	blt.n	800b216 <__swhatbuf_r+0x12>
 800b23c:	9901      	ldr	r1, [sp, #4]
 800b23e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b242:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b246:	4259      	negs	r1, r3
 800b248:	4159      	adcs	r1, r3
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	e7eb      	b.n	800b228 <__swhatbuf_r+0x24>

0800b250 <__smakebuf_r>:
 800b250:	898b      	ldrh	r3, [r1, #12]
 800b252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b254:	079d      	lsls	r5, r3, #30
 800b256:	4606      	mov	r6, r0
 800b258:	460c      	mov	r4, r1
 800b25a:	d507      	bpl.n	800b26c <__smakebuf_r+0x1c>
 800b25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	6123      	str	r3, [r4, #16]
 800b264:	2301      	movs	r3, #1
 800b266:	6163      	str	r3, [r4, #20]
 800b268:	b002      	add	sp, #8
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	ab01      	add	r3, sp, #4
 800b26e:	466a      	mov	r2, sp
 800b270:	f7ff ffc8 	bl	800b204 <__swhatbuf_r>
 800b274:	9900      	ldr	r1, [sp, #0]
 800b276:	4605      	mov	r5, r0
 800b278:	4630      	mov	r0, r6
 800b27a:	f7fe fdb7 	bl	8009dec <_malloc_r>
 800b27e:	b948      	cbnz	r0, 800b294 <__smakebuf_r+0x44>
 800b280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b284:	059a      	lsls	r2, r3, #22
 800b286:	d4ef      	bmi.n	800b268 <__smakebuf_r+0x18>
 800b288:	f023 0303 	bic.w	r3, r3, #3
 800b28c:	f043 0302 	orr.w	r3, r3, #2
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	e7e3      	b.n	800b25c <__smakebuf_r+0xc>
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	6020      	str	r0, [r4, #0]
 800b298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	9b00      	ldr	r3, [sp, #0]
 800b2a0:	6163      	str	r3, [r4, #20]
 800b2a2:	9b01      	ldr	r3, [sp, #4]
 800b2a4:	6120      	str	r0, [r4, #16]
 800b2a6:	b15b      	cbz	r3, 800b2c0 <__smakebuf_r+0x70>
 800b2a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f000 f81d 	bl	800b2ec <_isatty_r>
 800b2b2:	b128      	cbz	r0, 800b2c0 <__smakebuf_r+0x70>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f023 0303 	bic.w	r3, r3, #3
 800b2ba:	f043 0301 	orr.w	r3, r3, #1
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	431d      	orrs	r5, r3
 800b2c4:	81a5      	strh	r5, [r4, #12]
 800b2c6:	e7cf      	b.n	800b268 <__smakebuf_r+0x18>

0800b2c8 <_fstat_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d07      	ldr	r5, [pc, #28]	; (800b2e8 <_fstat_r+0x20>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	f7f7 ff40 	bl	800315a <_fstat>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d102      	bne.n	800b2e4 <_fstat_r+0x1c>
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	b103      	cbz	r3, 800b2e4 <_fstat_r+0x1c>
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000fac 	.word	0x20000fac

0800b2ec <_isatty_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4d06      	ldr	r5, [pc, #24]	; (800b308 <_isatty_r+0x1c>)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	602b      	str	r3, [r5, #0]
 800b2f8:	f7f7 ff3f 	bl	800317a <_isatty>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_isatty_r+0x1a>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_isatty_r+0x1a>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	20000fac 	.word	0x20000fac

0800b30c <atan2>:
 800b30c:	f000 bbe0 	b.w	800bad0 <__ieee754_atan2>

0800b310 <sqrt>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	ed2d 8b02 	vpush	{d8}
 800b316:	ec55 4b10 	vmov	r4, r5, d0
 800b31a:	f000 f8d1 	bl	800b4c0 <__ieee754_sqrt>
 800b31e:	4622      	mov	r2, r4
 800b320:	462b      	mov	r3, r5
 800b322:	4620      	mov	r0, r4
 800b324:	4629      	mov	r1, r5
 800b326:	eeb0 8a40 	vmov.f32	s16, s0
 800b32a:	eef0 8a60 	vmov.f32	s17, s1
 800b32e:	f7f5 fc0d 	bl	8000b4c <__aeabi_dcmpun>
 800b332:	b990      	cbnz	r0, 800b35a <sqrt+0x4a>
 800b334:	2200      	movs	r2, #0
 800b336:	2300      	movs	r3, #0
 800b338:	4620      	mov	r0, r4
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f5 fbde 	bl	8000afc <__aeabi_dcmplt>
 800b340:	b158      	cbz	r0, 800b35a <sqrt+0x4a>
 800b342:	f7fd faab 	bl	800889c <__errno>
 800b346:	2321      	movs	r3, #33	; 0x21
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	2200      	movs	r2, #0
 800b34c:	2300      	movs	r3, #0
 800b34e:	4610      	mov	r0, r2
 800b350:	4619      	mov	r1, r3
 800b352:	f7f5 fa8b 	bl	800086c <__aeabi_ddiv>
 800b356:	ec41 0b18 	vmov	d8, r0, r1
 800b35a:	eeb0 0a48 	vmov.f32	s0, s16
 800b35e:	eef0 0a68 	vmov.f32	s1, s17
 800b362:	ecbd 8b02 	vpop	{d8}
 800b366:	bd38      	pop	{r3, r4, r5, pc}

0800b368 <cos>:
 800b368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b36a:	ec53 2b10 	vmov	r2, r3, d0
 800b36e:	4826      	ldr	r0, [pc, #152]	; (800b408 <cos+0xa0>)
 800b370:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b374:	4281      	cmp	r1, r0
 800b376:	dc06      	bgt.n	800b386 <cos+0x1e>
 800b378:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b400 <cos+0x98>
 800b37c:	b005      	add	sp, #20
 800b37e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b382:	f000 ba1d 	b.w	800b7c0 <__kernel_cos>
 800b386:	4821      	ldr	r0, [pc, #132]	; (800b40c <cos+0xa4>)
 800b388:	4281      	cmp	r1, r0
 800b38a:	dd09      	ble.n	800b3a0 <cos+0x38>
 800b38c:	ee10 0a10 	vmov	r0, s0
 800b390:	4619      	mov	r1, r3
 800b392:	f7f4 ff89 	bl	80002a8 <__aeabi_dsub>
 800b396:	ec41 0b10 	vmov	d0, r0, r1
 800b39a:	b005      	add	sp, #20
 800b39c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3a0:	4668      	mov	r0, sp
 800b3a2:	f000 fc5d 	bl	800bc60 <__ieee754_rem_pio2>
 800b3a6:	f000 0003 	and.w	r0, r0, #3
 800b3aa:	2801      	cmp	r0, #1
 800b3ac:	d00b      	beq.n	800b3c6 <cos+0x5e>
 800b3ae:	2802      	cmp	r0, #2
 800b3b0:	d016      	beq.n	800b3e0 <cos+0x78>
 800b3b2:	b9e0      	cbnz	r0, 800b3ee <cos+0x86>
 800b3b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3b8:	ed9d 0b00 	vldr	d0, [sp]
 800b3bc:	f000 fa00 	bl	800b7c0 <__kernel_cos>
 800b3c0:	ec51 0b10 	vmov	r0, r1, d0
 800b3c4:	e7e7      	b.n	800b396 <cos+0x2e>
 800b3c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ca:	ed9d 0b00 	vldr	d0, [sp]
 800b3ce:	f000 fabf 	bl	800b950 <__kernel_sin>
 800b3d2:	ec53 2b10 	vmov	r2, r3, d0
 800b3d6:	ee10 0a10 	vmov	r0, s0
 800b3da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3de:	e7da      	b.n	800b396 <cos+0x2e>
 800b3e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3e4:	ed9d 0b00 	vldr	d0, [sp]
 800b3e8:	f000 f9ea 	bl	800b7c0 <__kernel_cos>
 800b3ec:	e7f1      	b.n	800b3d2 <cos+0x6a>
 800b3ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3f2:	ed9d 0b00 	vldr	d0, [sp]
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	f000 faaa 	bl	800b950 <__kernel_sin>
 800b3fc:	e7e0      	b.n	800b3c0 <cos+0x58>
 800b3fe:	bf00      	nop
	...
 800b408:	3fe921fb 	.word	0x3fe921fb
 800b40c:	7fefffff 	.word	0x7fefffff

0800b410 <sin>:
 800b410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b412:	ec53 2b10 	vmov	r2, r3, d0
 800b416:	4828      	ldr	r0, [pc, #160]	; (800b4b8 <sin+0xa8>)
 800b418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b41c:	4281      	cmp	r1, r0
 800b41e:	dc07      	bgt.n	800b430 <sin+0x20>
 800b420:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b4b0 <sin+0xa0>
 800b424:	2000      	movs	r0, #0
 800b426:	b005      	add	sp, #20
 800b428:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42c:	f000 ba90 	b.w	800b950 <__kernel_sin>
 800b430:	4822      	ldr	r0, [pc, #136]	; (800b4bc <sin+0xac>)
 800b432:	4281      	cmp	r1, r0
 800b434:	dd09      	ble.n	800b44a <sin+0x3a>
 800b436:	ee10 0a10 	vmov	r0, s0
 800b43a:	4619      	mov	r1, r3
 800b43c:	f7f4 ff34 	bl	80002a8 <__aeabi_dsub>
 800b440:	ec41 0b10 	vmov	d0, r0, r1
 800b444:	b005      	add	sp, #20
 800b446:	f85d fb04 	ldr.w	pc, [sp], #4
 800b44a:	4668      	mov	r0, sp
 800b44c:	f000 fc08 	bl	800bc60 <__ieee754_rem_pio2>
 800b450:	f000 0003 	and.w	r0, r0, #3
 800b454:	2801      	cmp	r0, #1
 800b456:	d00c      	beq.n	800b472 <sin+0x62>
 800b458:	2802      	cmp	r0, #2
 800b45a:	d011      	beq.n	800b480 <sin+0x70>
 800b45c:	b9f0      	cbnz	r0, 800b49c <sin+0x8c>
 800b45e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b462:	ed9d 0b00 	vldr	d0, [sp]
 800b466:	2001      	movs	r0, #1
 800b468:	f000 fa72 	bl	800b950 <__kernel_sin>
 800b46c:	ec51 0b10 	vmov	r0, r1, d0
 800b470:	e7e6      	b.n	800b440 <sin+0x30>
 800b472:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b476:	ed9d 0b00 	vldr	d0, [sp]
 800b47a:	f000 f9a1 	bl	800b7c0 <__kernel_cos>
 800b47e:	e7f5      	b.n	800b46c <sin+0x5c>
 800b480:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b484:	ed9d 0b00 	vldr	d0, [sp]
 800b488:	2001      	movs	r0, #1
 800b48a:	f000 fa61 	bl	800b950 <__kernel_sin>
 800b48e:	ec53 2b10 	vmov	r2, r3, d0
 800b492:	ee10 0a10 	vmov	r0, s0
 800b496:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b49a:	e7d1      	b.n	800b440 <sin+0x30>
 800b49c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b4a0:	ed9d 0b00 	vldr	d0, [sp]
 800b4a4:	f000 f98c 	bl	800b7c0 <__kernel_cos>
 800b4a8:	e7f1      	b.n	800b48e <sin+0x7e>
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w
	...
 800b4b8:	3fe921fb 	.word	0x3fe921fb
 800b4bc:	7fefffff 	.word	0x7fefffff

0800b4c0 <__ieee754_sqrt>:
 800b4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	ec55 4b10 	vmov	r4, r5, d0
 800b4c8:	4e67      	ldr	r6, [pc, #412]	; (800b668 <__ieee754_sqrt+0x1a8>)
 800b4ca:	43ae      	bics	r6, r5
 800b4cc:	ee10 0a10 	vmov	r0, s0
 800b4d0:	ee10 2a10 	vmov	r2, s0
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	d10d      	bne.n	800b4f6 <__ieee754_sqrt+0x36>
 800b4da:	f7f5 f89d 	bl	8000618 <__aeabi_dmul>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	f7f4 fee1 	bl	80002ac <__adddf3>
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	ec45 4b10 	vmov	d0, r4, r5
 800b4f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f6:	2d00      	cmp	r5, #0
 800b4f8:	dc0b      	bgt.n	800b512 <__ieee754_sqrt+0x52>
 800b4fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b4fe:	4326      	orrs	r6, r4
 800b500:	d0f5      	beq.n	800b4ee <__ieee754_sqrt+0x2e>
 800b502:	b135      	cbz	r5, 800b512 <__ieee754_sqrt+0x52>
 800b504:	f7f4 fed0 	bl	80002a8 <__aeabi_dsub>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	f7f5 f9ae 	bl	800086c <__aeabi_ddiv>
 800b510:	e7eb      	b.n	800b4ea <__ieee754_sqrt+0x2a>
 800b512:	1509      	asrs	r1, r1, #20
 800b514:	f000 808d 	beq.w	800b632 <__ieee754_sqrt+0x172>
 800b518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b51c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b524:	07c9      	lsls	r1, r1, #31
 800b526:	bf5c      	itt	pl
 800b528:	005b      	lslpl	r3, r3, #1
 800b52a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b52e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b532:	bf58      	it	pl
 800b534:	0052      	lslpl	r2, r2, #1
 800b536:	2500      	movs	r5, #0
 800b538:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b53c:	1076      	asrs	r6, r6, #1
 800b53e:	0052      	lsls	r2, r2, #1
 800b540:	f04f 0e16 	mov.w	lr, #22
 800b544:	46ac      	mov	ip, r5
 800b546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b54a:	eb0c 0001 	add.w	r0, ip, r1
 800b54e:	4298      	cmp	r0, r3
 800b550:	bfde      	ittt	le
 800b552:	1a1b      	suble	r3, r3, r0
 800b554:	eb00 0c01 	addle.w	ip, r0, r1
 800b558:	186d      	addle	r5, r5, r1
 800b55a:	005b      	lsls	r3, r3, #1
 800b55c:	f1be 0e01 	subs.w	lr, lr, #1
 800b560:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b564:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b568:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b56c:	d1ed      	bne.n	800b54a <__ieee754_sqrt+0x8a>
 800b56e:	4674      	mov	r4, lr
 800b570:	2720      	movs	r7, #32
 800b572:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b576:	4563      	cmp	r3, ip
 800b578:	eb01 000e 	add.w	r0, r1, lr
 800b57c:	dc02      	bgt.n	800b584 <__ieee754_sqrt+0xc4>
 800b57e:	d113      	bne.n	800b5a8 <__ieee754_sqrt+0xe8>
 800b580:	4290      	cmp	r0, r2
 800b582:	d811      	bhi.n	800b5a8 <__ieee754_sqrt+0xe8>
 800b584:	2800      	cmp	r0, #0
 800b586:	eb00 0e01 	add.w	lr, r0, r1
 800b58a:	da57      	bge.n	800b63c <__ieee754_sqrt+0x17c>
 800b58c:	f1be 0f00 	cmp.w	lr, #0
 800b590:	db54      	blt.n	800b63c <__ieee754_sqrt+0x17c>
 800b592:	f10c 0801 	add.w	r8, ip, #1
 800b596:	eba3 030c 	sub.w	r3, r3, ip
 800b59a:	4290      	cmp	r0, r2
 800b59c:	bf88      	it	hi
 800b59e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b5a2:	1a12      	subs	r2, r2, r0
 800b5a4:	440c      	add	r4, r1
 800b5a6:	46c4      	mov	ip, r8
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	3f01      	subs	r7, #1
 800b5ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b5b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b5b8:	d1dd      	bne.n	800b576 <__ieee754_sqrt+0xb6>
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	d01b      	beq.n	800b5f6 <__ieee754_sqrt+0x136>
 800b5be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b66c <__ieee754_sqrt+0x1ac>
 800b5c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b670 <__ieee754_sqrt+0x1b0>
 800b5c6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5ca:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5ce:	f7f4 fe6b 	bl	80002a8 <__aeabi_dsub>
 800b5d2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f5 fa97 	bl	8000b10 <__aeabi_dcmple>
 800b5e2:	b140      	cbz	r0, 800b5f6 <__ieee754_sqrt+0x136>
 800b5e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b5e8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5ec:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5f0:	d126      	bne.n	800b640 <__ieee754_sqrt+0x180>
 800b5f2:	3501      	adds	r5, #1
 800b5f4:	463c      	mov	r4, r7
 800b5f6:	106a      	asrs	r2, r5, #1
 800b5f8:	0863      	lsrs	r3, r4, #1
 800b5fa:	07e9      	lsls	r1, r5, #31
 800b5fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b600:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b604:	bf48      	it	mi
 800b606:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b60a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b60e:	461c      	mov	r4, r3
 800b610:	e76d      	b.n	800b4ee <__ieee754_sqrt+0x2e>
 800b612:	0ad3      	lsrs	r3, r2, #11
 800b614:	3815      	subs	r0, #21
 800b616:	0552      	lsls	r2, r2, #21
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0fa      	beq.n	800b612 <__ieee754_sqrt+0x152>
 800b61c:	02dc      	lsls	r4, r3, #11
 800b61e:	d50a      	bpl.n	800b636 <__ieee754_sqrt+0x176>
 800b620:	f1c1 0420 	rsb	r4, r1, #32
 800b624:	fa22 f404 	lsr.w	r4, r2, r4
 800b628:	1e4d      	subs	r5, r1, #1
 800b62a:	408a      	lsls	r2, r1
 800b62c:	4323      	orrs	r3, r4
 800b62e:	1b41      	subs	r1, r0, r5
 800b630:	e772      	b.n	800b518 <__ieee754_sqrt+0x58>
 800b632:	4608      	mov	r0, r1
 800b634:	e7f0      	b.n	800b618 <__ieee754_sqrt+0x158>
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	3101      	adds	r1, #1
 800b63a:	e7ef      	b.n	800b61c <__ieee754_sqrt+0x15c>
 800b63c:	46e0      	mov	r8, ip
 800b63e:	e7aa      	b.n	800b596 <__ieee754_sqrt+0xd6>
 800b640:	f7f4 fe34 	bl	80002ac <__adddf3>
 800b644:	e9da 8900 	ldrd	r8, r9, [sl]
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4640      	mov	r0, r8
 800b64e:	4649      	mov	r1, r9
 800b650:	f7f5 fa54 	bl	8000afc <__aeabi_dcmplt>
 800b654:	b120      	cbz	r0, 800b660 <__ieee754_sqrt+0x1a0>
 800b656:	1ca0      	adds	r0, r4, #2
 800b658:	bf08      	it	eq
 800b65a:	3501      	addeq	r5, #1
 800b65c:	3402      	adds	r4, #2
 800b65e:	e7ca      	b.n	800b5f6 <__ieee754_sqrt+0x136>
 800b660:	3401      	adds	r4, #1
 800b662:	f024 0401 	bic.w	r4, r4, #1
 800b666:	e7c6      	b.n	800b5f6 <__ieee754_sqrt+0x136>
 800b668:	7ff00000 	.word	0x7ff00000
 800b66c:	200001f8 	.word	0x200001f8
 800b670:	20000200 	.word	0x20000200
 800b674:	00000000 	.word	0x00000000

0800b678 <floor>:
 800b678:	ec51 0b10 	vmov	r0, r1, d0
 800b67c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b688:	2e13      	cmp	r6, #19
 800b68a:	ee10 5a10 	vmov	r5, s0
 800b68e:	ee10 8a10 	vmov	r8, s0
 800b692:	460c      	mov	r4, r1
 800b694:	dc31      	bgt.n	800b6fa <floor+0x82>
 800b696:	2e00      	cmp	r6, #0
 800b698:	da14      	bge.n	800b6c4 <floor+0x4c>
 800b69a:	a333      	add	r3, pc, #204	; (adr r3, 800b768 <floor+0xf0>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fe04 	bl	80002ac <__adddf3>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f7f5 fa46 	bl	8000b38 <__aeabi_dcmpgt>
 800b6ac:	b138      	cbz	r0, 800b6be <floor+0x46>
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	da53      	bge.n	800b75a <floor+0xe2>
 800b6b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b6b6:	4325      	orrs	r5, r4
 800b6b8:	d052      	beq.n	800b760 <floor+0xe8>
 800b6ba:	4c2d      	ldr	r4, [pc, #180]	; (800b770 <floor+0xf8>)
 800b6bc:	2500      	movs	r5, #0
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	e024      	b.n	800b70e <floor+0x96>
 800b6c4:	4f2b      	ldr	r7, [pc, #172]	; (800b774 <floor+0xfc>)
 800b6c6:	4137      	asrs	r7, r6
 800b6c8:	ea01 0307 	and.w	r3, r1, r7
 800b6cc:	4303      	orrs	r3, r0
 800b6ce:	d01e      	beq.n	800b70e <floor+0x96>
 800b6d0:	a325      	add	r3, pc, #148	; (adr r3, 800b768 <floor+0xf0>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 fde9 	bl	80002ac <__adddf3>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f7f5 fa2b 	bl	8000b38 <__aeabi_dcmpgt>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d0eb      	beq.n	800b6be <floor+0x46>
 800b6e6:	2c00      	cmp	r4, #0
 800b6e8:	bfbe      	ittt	lt
 800b6ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6ee:	4133      	asrlt	r3, r6
 800b6f0:	18e4      	addlt	r4, r4, r3
 800b6f2:	ea24 0407 	bic.w	r4, r4, r7
 800b6f6:	2500      	movs	r5, #0
 800b6f8:	e7e1      	b.n	800b6be <floor+0x46>
 800b6fa:	2e33      	cmp	r6, #51	; 0x33
 800b6fc:	dd0b      	ble.n	800b716 <floor+0x9e>
 800b6fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b702:	d104      	bne.n	800b70e <floor+0x96>
 800b704:	ee10 2a10 	vmov	r2, s0
 800b708:	460b      	mov	r3, r1
 800b70a:	f7f4 fdcf 	bl	80002ac <__adddf3>
 800b70e:	ec41 0b10 	vmov	d0, r0, r1
 800b712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b716:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b71a:	f04f 37ff 	mov.w	r7, #4294967295
 800b71e:	40df      	lsrs	r7, r3
 800b720:	4238      	tst	r0, r7
 800b722:	d0f4      	beq.n	800b70e <floor+0x96>
 800b724:	a310      	add	r3, pc, #64	; (adr r3, 800b768 <floor+0xf0>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f7f4 fdbf 	bl	80002ac <__adddf3>
 800b72e:	2200      	movs	r2, #0
 800b730:	2300      	movs	r3, #0
 800b732:	f7f5 fa01 	bl	8000b38 <__aeabi_dcmpgt>
 800b736:	2800      	cmp	r0, #0
 800b738:	d0c1      	beq.n	800b6be <floor+0x46>
 800b73a:	2c00      	cmp	r4, #0
 800b73c:	da0a      	bge.n	800b754 <floor+0xdc>
 800b73e:	2e14      	cmp	r6, #20
 800b740:	d101      	bne.n	800b746 <floor+0xce>
 800b742:	3401      	adds	r4, #1
 800b744:	e006      	b.n	800b754 <floor+0xdc>
 800b746:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b74a:	2301      	movs	r3, #1
 800b74c:	40b3      	lsls	r3, r6
 800b74e:	441d      	add	r5, r3
 800b750:	45a8      	cmp	r8, r5
 800b752:	d8f6      	bhi.n	800b742 <floor+0xca>
 800b754:	ea25 0507 	bic.w	r5, r5, r7
 800b758:	e7b1      	b.n	800b6be <floor+0x46>
 800b75a:	2500      	movs	r5, #0
 800b75c:	462c      	mov	r4, r5
 800b75e:	e7ae      	b.n	800b6be <floor+0x46>
 800b760:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b764:	e7ab      	b.n	800b6be <floor+0x46>
 800b766:	bf00      	nop
 800b768:	8800759c 	.word	0x8800759c
 800b76c:	7e37e43c 	.word	0x7e37e43c
 800b770:	bff00000 	.word	0xbff00000
 800b774:	000fffff 	.word	0x000fffff

0800b778 <roundf>:
 800b778:	ee10 0a10 	vmov	r0, s0
 800b77c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b780:	3a7f      	subs	r2, #127	; 0x7f
 800b782:	2a16      	cmp	r2, #22
 800b784:	dc15      	bgt.n	800b7b2 <roundf+0x3a>
 800b786:	2a00      	cmp	r2, #0
 800b788:	da08      	bge.n	800b79c <roundf+0x24>
 800b78a:	3201      	adds	r2, #1
 800b78c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b790:	d101      	bne.n	800b796 <roundf+0x1e>
 800b792:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b796:	ee00 3a10 	vmov	s0, r3
 800b79a:	4770      	bx	lr
 800b79c:	4907      	ldr	r1, [pc, #28]	; (800b7bc <roundf+0x44>)
 800b79e:	4111      	asrs	r1, r2
 800b7a0:	4208      	tst	r0, r1
 800b7a2:	d0fa      	beq.n	800b79a <roundf+0x22>
 800b7a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b7a8:	4113      	asrs	r3, r2
 800b7aa:	4403      	add	r3, r0
 800b7ac:	ea23 0301 	bic.w	r3, r3, r1
 800b7b0:	e7f1      	b.n	800b796 <roundf+0x1e>
 800b7b2:	2a80      	cmp	r2, #128	; 0x80
 800b7b4:	d1f1      	bne.n	800b79a <roundf+0x22>
 800b7b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b7ba:	4770      	bx	lr
 800b7bc:	007fffff 	.word	0x007fffff

0800b7c0 <__kernel_cos>:
 800b7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	ec57 6b10 	vmov	r6, r7, d0
 800b7c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b7cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b7d0:	ed8d 1b00 	vstr	d1, [sp]
 800b7d4:	da07      	bge.n	800b7e6 <__kernel_cos+0x26>
 800b7d6:	ee10 0a10 	vmov	r0, s0
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f5 f9cc 	bl	8000b78 <__aeabi_d2iz>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	f000 8088 	beq.w	800b8f6 <__kernel_cos+0x136>
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 ff13 	bl	8000618 <__aeabi_dmul>
 800b7f2:	4b51      	ldr	r3, [pc, #324]	; (800b938 <__kernel_cos+0x178>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	f7f4 ff0d 	bl	8000618 <__aeabi_dmul>
 800b7fe:	a340      	add	r3, pc, #256	; (adr r3, 800b900 <__kernel_cos+0x140>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	4682      	mov	sl, r0
 800b806:	468b      	mov	fp, r1
 800b808:	4620      	mov	r0, r4
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 ff04 	bl	8000618 <__aeabi_dmul>
 800b810:	a33d      	add	r3, pc, #244	; (adr r3, 800b908 <__kernel_cos+0x148>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fd49 	bl	80002ac <__adddf3>
 800b81a:	4622      	mov	r2, r4
 800b81c:	462b      	mov	r3, r5
 800b81e:	f7f4 fefb 	bl	8000618 <__aeabi_dmul>
 800b822:	a33b      	add	r3, pc, #236	; (adr r3, 800b910 <__kernel_cos+0x150>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fd3e 	bl	80002a8 <__aeabi_dsub>
 800b82c:	4622      	mov	r2, r4
 800b82e:	462b      	mov	r3, r5
 800b830:	f7f4 fef2 	bl	8000618 <__aeabi_dmul>
 800b834:	a338      	add	r3, pc, #224	; (adr r3, 800b918 <__kernel_cos+0x158>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f7f4 fd37 	bl	80002ac <__adddf3>
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	f7f4 fee9 	bl	8000618 <__aeabi_dmul>
 800b846:	a336      	add	r3, pc, #216	; (adr r3, 800b920 <__kernel_cos+0x160>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fd2c 	bl	80002a8 <__aeabi_dsub>
 800b850:	4622      	mov	r2, r4
 800b852:	462b      	mov	r3, r5
 800b854:	f7f4 fee0 	bl	8000618 <__aeabi_dmul>
 800b858:	a333      	add	r3, pc, #204	; (adr r3, 800b928 <__kernel_cos+0x168>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fd25 	bl	80002ac <__adddf3>
 800b862:	4622      	mov	r2, r4
 800b864:	462b      	mov	r3, r5
 800b866:	f7f4 fed7 	bl	8000618 <__aeabi_dmul>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	f7f4 fed3 	bl	8000618 <__aeabi_dmul>
 800b872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b876:	4604      	mov	r4, r0
 800b878:	460d      	mov	r5, r1
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fecb 	bl	8000618 <__aeabi_dmul>
 800b882:	460b      	mov	r3, r1
 800b884:	4602      	mov	r2, r0
 800b886:	4629      	mov	r1, r5
 800b888:	4620      	mov	r0, r4
 800b88a:	f7f4 fd0d 	bl	80002a8 <__aeabi_dsub>
 800b88e:	4b2b      	ldr	r3, [pc, #172]	; (800b93c <__kernel_cos+0x17c>)
 800b890:	4598      	cmp	r8, r3
 800b892:	4606      	mov	r6, r0
 800b894:	460f      	mov	r7, r1
 800b896:	dc10      	bgt.n	800b8ba <__kernel_cos+0xfa>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4650      	mov	r0, sl
 800b89e:	4659      	mov	r1, fp
 800b8a0:	f7f4 fd02 	bl	80002a8 <__aeabi_dsub>
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4926      	ldr	r1, [pc, #152]	; (800b940 <__kernel_cos+0x180>)
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f7f4 fcfc 	bl	80002a8 <__aeabi_dsub>
 800b8b0:	ec41 0b10 	vmov	d0, r0, r1
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ba:	4b22      	ldr	r3, [pc, #136]	; (800b944 <__kernel_cos+0x184>)
 800b8bc:	4920      	ldr	r1, [pc, #128]	; (800b940 <__kernel_cos+0x180>)
 800b8be:	4598      	cmp	r8, r3
 800b8c0:	bfcc      	ite	gt
 800b8c2:	4d21      	ldrgt	r5, [pc, #132]	; (800b948 <__kernel_cos+0x188>)
 800b8c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f7f4 fcea 	bl	80002a8 <__aeabi_dsub>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4689      	mov	r9, r1
 800b8da:	462b      	mov	r3, r5
 800b8dc:	4650      	mov	r0, sl
 800b8de:	4659      	mov	r1, fp
 800b8e0:	f7f4 fce2 	bl	80002a8 <__aeabi_dsub>
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	463b      	mov	r3, r7
 800b8e8:	f7f4 fcde 	bl	80002a8 <__aeabi_dsub>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	e7da      	b.n	800b8ac <__kernel_cos+0xec>
 800b8f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b930 <__kernel_cos+0x170>
 800b8fa:	e7db      	b.n	800b8b4 <__kernel_cos+0xf4>
 800b8fc:	f3af 8000 	nop.w
 800b900:	be8838d4 	.word	0xbe8838d4
 800b904:	bda8fae9 	.word	0xbda8fae9
 800b908:	bdb4b1c4 	.word	0xbdb4b1c4
 800b90c:	3e21ee9e 	.word	0x3e21ee9e
 800b910:	809c52ad 	.word	0x809c52ad
 800b914:	3e927e4f 	.word	0x3e927e4f
 800b918:	19cb1590 	.word	0x19cb1590
 800b91c:	3efa01a0 	.word	0x3efa01a0
 800b920:	16c15177 	.word	0x16c15177
 800b924:	3f56c16c 	.word	0x3f56c16c
 800b928:	5555554c 	.word	0x5555554c
 800b92c:	3fa55555 	.word	0x3fa55555
 800b930:	00000000 	.word	0x00000000
 800b934:	3ff00000 	.word	0x3ff00000
 800b938:	3fe00000 	.word	0x3fe00000
 800b93c:	3fd33332 	.word	0x3fd33332
 800b940:	3ff00000 	.word	0x3ff00000
 800b944:	3fe90000 	.word	0x3fe90000
 800b948:	3fd20000 	.word	0x3fd20000
 800b94c:	00000000 	.word	0x00000000

0800b950 <__kernel_sin>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	ed2d 8b04 	vpush	{d8-d9}
 800b958:	eeb0 8a41 	vmov.f32	s16, s2
 800b95c:	eef0 8a61 	vmov.f32	s17, s3
 800b960:	ec55 4b10 	vmov	r4, r5, d0
 800b964:	b083      	sub	sp, #12
 800b966:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b96a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b96e:	9001      	str	r0, [sp, #4]
 800b970:	da06      	bge.n	800b980 <__kernel_sin+0x30>
 800b972:	ee10 0a10 	vmov	r0, s0
 800b976:	4629      	mov	r1, r5
 800b978:	f7f5 f8fe 	bl	8000b78 <__aeabi_d2iz>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d051      	beq.n	800ba24 <__kernel_sin+0xd4>
 800b980:	4622      	mov	r2, r4
 800b982:	462b      	mov	r3, r5
 800b984:	4620      	mov	r0, r4
 800b986:	4629      	mov	r1, r5
 800b988:	f7f4 fe46 	bl	8000618 <__aeabi_dmul>
 800b98c:	4682      	mov	sl, r0
 800b98e:	468b      	mov	fp, r1
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4620      	mov	r0, r4
 800b996:	4629      	mov	r1, r5
 800b998:	f7f4 fe3e 	bl	8000618 <__aeabi_dmul>
 800b99c:	a341      	add	r3, pc, #260	; (adr r3, 800baa4 <__kernel_sin+0x154>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	4689      	mov	r9, r1
 800b9a6:	4650      	mov	r0, sl
 800b9a8:	4659      	mov	r1, fp
 800b9aa:	f7f4 fe35 	bl	8000618 <__aeabi_dmul>
 800b9ae:	a33f      	add	r3, pc, #252	; (adr r3, 800baac <__kernel_sin+0x15c>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	f7f4 fc78 	bl	80002a8 <__aeabi_dsub>
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	465b      	mov	r3, fp
 800b9bc:	f7f4 fe2c 	bl	8000618 <__aeabi_dmul>
 800b9c0:	a33c      	add	r3, pc, #240	; (adr r3, 800bab4 <__kernel_sin+0x164>)
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	f7f4 fc71 	bl	80002ac <__adddf3>
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	f7f4 fe23 	bl	8000618 <__aeabi_dmul>
 800b9d2:	a33a      	add	r3, pc, #232	; (adr r3, 800babc <__kernel_sin+0x16c>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fc66 	bl	80002a8 <__aeabi_dsub>
 800b9dc:	4652      	mov	r2, sl
 800b9de:	465b      	mov	r3, fp
 800b9e0:	f7f4 fe1a 	bl	8000618 <__aeabi_dmul>
 800b9e4:	a337      	add	r3, pc, #220	; (adr r3, 800bac4 <__kernel_sin+0x174>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f4 fc5f 	bl	80002ac <__adddf3>
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	460f      	mov	r7, r1
 800b9f4:	b9eb      	cbnz	r3, 800ba32 <__kernel_sin+0xe2>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	4659      	mov	r1, fp
 800b9fe:	f7f4 fe0b 	bl	8000618 <__aeabi_dmul>
 800ba02:	a325      	add	r3, pc, #148	; (adr r3, 800ba98 <__kernel_sin+0x148>)
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	f7f4 fc4e 	bl	80002a8 <__aeabi_dsub>
 800ba0c:	4642      	mov	r2, r8
 800ba0e:	464b      	mov	r3, r9
 800ba10:	f7f4 fe02 	bl	8000618 <__aeabi_dmul>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f4 fc46 	bl	80002ac <__adddf3>
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	ec45 4b10 	vmov	d0, r4, r5
 800ba28:	b003      	add	sp, #12
 800ba2a:	ecbd 8b04 	vpop	{d8-d9}
 800ba2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba32:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <__kernel_sin+0x150>)
 800ba34:	ec51 0b18 	vmov	r0, r1, d8
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f7f4 fded 	bl	8000618 <__aeabi_dmul>
 800ba3e:	4632      	mov	r2, r6
 800ba40:	ec41 0b19 	vmov	d9, r0, r1
 800ba44:	463b      	mov	r3, r7
 800ba46:	4640      	mov	r0, r8
 800ba48:	4649      	mov	r1, r9
 800ba4a:	f7f4 fde5 	bl	8000618 <__aeabi_dmul>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	460b      	mov	r3, r1
 800ba52:	ec51 0b19 	vmov	r0, r1, d9
 800ba56:	f7f4 fc27 	bl	80002a8 <__aeabi_dsub>
 800ba5a:	4652      	mov	r2, sl
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	f7f4 fddb 	bl	8000618 <__aeabi_dmul>
 800ba62:	ec53 2b18 	vmov	r2, r3, d8
 800ba66:	f7f4 fc1f 	bl	80002a8 <__aeabi_dsub>
 800ba6a:	a30b      	add	r3, pc, #44	; (adr r3, 800ba98 <__kernel_sin+0x148>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	4606      	mov	r6, r0
 800ba72:	460f      	mov	r7, r1
 800ba74:	4640      	mov	r0, r8
 800ba76:	4649      	mov	r1, r9
 800ba78:	f7f4 fdce 	bl	8000618 <__aeabi_dmul>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f4 fc12 	bl	80002ac <__adddf3>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f4 fc0a 	bl	80002a8 <__aeabi_dsub>
 800ba94:	e7c4      	b.n	800ba20 <__kernel_sin+0xd0>
 800ba96:	bf00      	nop
 800ba98:	55555549 	.word	0x55555549
 800ba9c:	3fc55555 	.word	0x3fc55555
 800baa0:	3fe00000 	.word	0x3fe00000
 800baa4:	5acfd57c 	.word	0x5acfd57c
 800baa8:	3de5d93a 	.word	0x3de5d93a
 800baac:	8a2b9ceb 	.word	0x8a2b9ceb
 800bab0:	3e5ae5e6 	.word	0x3e5ae5e6
 800bab4:	57b1fe7d 	.word	0x57b1fe7d
 800bab8:	3ec71de3 	.word	0x3ec71de3
 800babc:	19c161d5 	.word	0x19c161d5
 800bac0:	3f2a01a0 	.word	0x3f2a01a0
 800bac4:	1110f8a6 	.word	0x1110f8a6
 800bac8:	3f811111 	.word	0x3f811111
 800bacc:	00000000 	.word	0x00000000

0800bad0 <__ieee754_atan2>:
 800bad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad4:	ec57 6b11 	vmov	r6, r7, d1
 800bad8:	4273      	negs	r3, r6
 800bada:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bc58 <__ieee754_atan2+0x188>
 800bade:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bae2:	4333      	orrs	r3, r6
 800bae4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bae8:	4543      	cmp	r3, r8
 800baea:	ec51 0b10 	vmov	r0, r1, d0
 800baee:	ee11 5a10 	vmov	r5, s2
 800baf2:	d80a      	bhi.n	800bb0a <__ieee754_atan2+0x3a>
 800baf4:	4244      	negs	r4, r0
 800baf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bafa:	4304      	orrs	r4, r0
 800bafc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bb00:	4544      	cmp	r4, r8
 800bb02:	ee10 9a10 	vmov	r9, s0
 800bb06:	468e      	mov	lr, r1
 800bb08:	d907      	bls.n	800bb1a <__ieee754_atan2+0x4a>
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	f7f4 fbcd 	bl	80002ac <__adddf3>
 800bb12:	ec41 0b10 	vmov	d0, r0, r1
 800bb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bb1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb22:	4334      	orrs	r4, r6
 800bb24:	d103      	bne.n	800bb2e <__ieee754_atan2+0x5e>
 800bb26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2a:	f000 baa1 	b.w	800c070 <atan>
 800bb2e:	17bc      	asrs	r4, r7, #30
 800bb30:	f004 0402 	and.w	r4, r4, #2
 800bb34:	ea53 0909 	orrs.w	r9, r3, r9
 800bb38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bb3c:	d107      	bne.n	800bb4e <__ieee754_atan2+0x7e>
 800bb3e:	2c02      	cmp	r4, #2
 800bb40:	d05f      	beq.n	800bc02 <__ieee754_atan2+0x132>
 800bb42:	2c03      	cmp	r4, #3
 800bb44:	d1e5      	bne.n	800bb12 <__ieee754_atan2+0x42>
 800bb46:	a140      	add	r1, pc, #256	; (adr r1, 800bc48 <__ieee754_atan2+0x178>)
 800bb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4c:	e7e1      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bb4e:	4315      	orrs	r5, r2
 800bb50:	d106      	bne.n	800bb60 <__ieee754_atan2+0x90>
 800bb52:	f1be 0f00 	cmp.w	lr, #0
 800bb56:	da5f      	bge.n	800bc18 <__ieee754_atan2+0x148>
 800bb58:	a13d      	add	r1, pc, #244	; (adr r1, 800bc50 <__ieee754_atan2+0x180>)
 800bb5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5e:	e7d8      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bb60:	4542      	cmp	r2, r8
 800bb62:	d10f      	bne.n	800bb84 <__ieee754_atan2+0xb4>
 800bb64:	4293      	cmp	r3, r2
 800bb66:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb6a:	d107      	bne.n	800bb7c <__ieee754_atan2+0xac>
 800bb6c:	2c02      	cmp	r4, #2
 800bb6e:	d84c      	bhi.n	800bc0a <__ieee754_atan2+0x13a>
 800bb70:	4b33      	ldr	r3, [pc, #204]	; (800bc40 <__ieee754_atan2+0x170>)
 800bb72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb7a:	e7ca      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bb7c:	2c02      	cmp	r4, #2
 800bb7e:	d848      	bhi.n	800bc12 <__ieee754_atan2+0x142>
 800bb80:	4b30      	ldr	r3, [pc, #192]	; (800bc44 <__ieee754_atan2+0x174>)
 800bb82:	e7f6      	b.n	800bb72 <__ieee754_atan2+0xa2>
 800bb84:	4543      	cmp	r3, r8
 800bb86:	d0e4      	beq.n	800bb52 <__ieee754_atan2+0x82>
 800bb88:	1a9b      	subs	r3, r3, r2
 800bb8a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bb8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb92:	da1e      	bge.n	800bbd2 <__ieee754_atan2+0x102>
 800bb94:	2f00      	cmp	r7, #0
 800bb96:	da01      	bge.n	800bb9c <__ieee754_atan2+0xcc>
 800bb98:	323c      	adds	r2, #60	; 0x3c
 800bb9a:	db1e      	blt.n	800bbda <__ieee754_atan2+0x10a>
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	463b      	mov	r3, r7
 800bba0:	f7f4 fe64 	bl	800086c <__aeabi_ddiv>
 800bba4:	ec41 0b10 	vmov	d0, r0, r1
 800bba8:	f000 fc02 	bl	800c3b0 <fabs>
 800bbac:	f000 fa60 	bl	800c070 <atan>
 800bbb0:	ec51 0b10 	vmov	r0, r1, d0
 800bbb4:	2c01      	cmp	r4, #1
 800bbb6:	d013      	beq.n	800bbe0 <__ieee754_atan2+0x110>
 800bbb8:	2c02      	cmp	r4, #2
 800bbba:	d015      	beq.n	800bbe8 <__ieee754_atan2+0x118>
 800bbbc:	2c00      	cmp	r4, #0
 800bbbe:	d0a8      	beq.n	800bb12 <__ieee754_atan2+0x42>
 800bbc0:	a317      	add	r3, pc, #92	; (adr r3, 800bc20 <__ieee754_atan2+0x150>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 fb6f 	bl	80002a8 <__aeabi_dsub>
 800bbca:	a317      	add	r3, pc, #92	; (adr r3, 800bc28 <__ieee754_atan2+0x158>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	e014      	b.n	800bbfc <__ieee754_atan2+0x12c>
 800bbd2:	a117      	add	r1, pc, #92	; (adr r1, 800bc30 <__ieee754_atan2+0x160>)
 800bbd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbd8:	e7ec      	b.n	800bbb4 <__ieee754_atan2+0xe4>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	e7e9      	b.n	800bbb4 <__ieee754_atan2+0xe4>
 800bbe0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	e794      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bbe8:	a30d      	add	r3, pc, #52	; (adr r3, 800bc20 <__ieee754_atan2+0x150>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fb5b 	bl	80002a8 <__aeabi_dsub>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	a10c      	add	r1, pc, #48	; (adr r1, 800bc28 <__ieee754_atan2+0x158>)
 800bbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbfc:	f7f4 fb54 	bl	80002a8 <__aeabi_dsub>
 800bc00:	e787      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bc02:	a109      	add	r1, pc, #36	; (adr r1, 800bc28 <__ieee754_atan2+0x158>)
 800bc04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc08:	e783      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bc0a:	a10b      	add	r1, pc, #44	; (adr r1, 800bc38 <__ieee754_atan2+0x168>)
 800bc0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc10:	e77f      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bc12:	2000      	movs	r0, #0
 800bc14:	2100      	movs	r1, #0
 800bc16:	e77c      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bc18:	a105      	add	r1, pc, #20	; (adr r1, 800bc30 <__ieee754_atan2+0x160>)
 800bc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc1e:	e778      	b.n	800bb12 <__ieee754_atan2+0x42>
 800bc20:	33145c07 	.word	0x33145c07
 800bc24:	3ca1a626 	.word	0x3ca1a626
 800bc28:	54442d18 	.word	0x54442d18
 800bc2c:	400921fb 	.word	0x400921fb
 800bc30:	54442d18 	.word	0x54442d18
 800bc34:	3ff921fb 	.word	0x3ff921fb
 800bc38:	54442d18 	.word	0x54442d18
 800bc3c:	3fe921fb 	.word	0x3fe921fb
 800bc40:	0800e588 	.word	0x0800e588
 800bc44:	0800e5a0 	.word	0x0800e5a0
 800bc48:	54442d18 	.word	0x54442d18
 800bc4c:	c00921fb 	.word	0xc00921fb
 800bc50:	54442d18 	.word	0x54442d18
 800bc54:	bff921fb 	.word	0xbff921fb
 800bc58:	7ff00000 	.word	0x7ff00000
 800bc5c:	00000000 	.word	0x00000000

0800bc60 <__ieee754_rem_pio2>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ed2d 8b02 	vpush	{d8}
 800bc68:	ec55 4b10 	vmov	r4, r5, d0
 800bc6c:	4bca      	ldr	r3, [pc, #808]	; (800bf98 <__ieee754_rem_pio2+0x338>)
 800bc6e:	b08b      	sub	sp, #44	; 0x2c
 800bc70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bc74:	4598      	cmp	r8, r3
 800bc76:	4682      	mov	sl, r0
 800bc78:	9502      	str	r5, [sp, #8]
 800bc7a:	dc08      	bgt.n	800bc8e <__ieee754_rem_pio2+0x2e>
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2300      	movs	r3, #0
 800bc80:	ed80 0b00 	vstr	d0, [r0]
 800bc84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bc88:	f04f 0b00 	mov.w	fp, #0
 800bc8c:	e028      	b.n	800bce0 <__ieee754_rem_pio2+0x80>
 800bc8e:	4bc3      	ldr	r3, [pc, #780]	; (800bf9c <__ieee754_rem_pio2+0x33c>)
 800bc90:	4598      	cmp	r8, r3
 800bc92:	dc78      	bgt.n	800bd86 <__ieee754_rem_pio2+0x126>
 800bc94:	9b02      	ldr	r3, [sp, #8]
 800bc96:	4ec2      	ldr	r6, [pc, #776]	; (800bfa0 <__ieee754_rem_pio2+0x340>)
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	ee10 0a10 	vmov	r0, s0
 800bc9e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bf60 <__ieee754_rem_pio2+0x300>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	4629      	mov	r1, r5
 800bca6:	dd39      	ble.n	800bd1c <__ieee754_rem_pio2+0xbc>
 800bca8:	f7f4 fafe 	bl	80002a8 <__aeabi_dsub>
 800bcac:	45b0      	cmp	r8, r6
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	d01b      	beq.n	800bcec <__ieee754_rem_pio2+0x8c>
 800bcb4:	a3ac      	add	r3, pc, #688	; (adr r3, 800bf68 <__ieee754_rem_pio2+0x308>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 faf5 	bl	80002a8 <__aeabi_dsub>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	e9ca 2300 	strd	r2, r3, [sl]
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 faed 	bl	80002a8 <__aeabi_dsub>
 800bcce:	a3a6      	add	r3, pc, #664	; (adr r3, 800bf68 <__ieee754_rem_pio2+0x308>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fae8 	bl	80002a8 <__aeabi_dsub>
 800bcd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bcdc:	f04f 0b01 	mov.w	fp, #1
 800bce0:	4658      	mov	r0, fp
 800bce2:	b00b      	add	sp, #44	; 0x2c
 800bce4:	ecbd 8b02 	vpop	{d8}
 800bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcec:	a3a0      	add	r3, pc, #640	; (adr r3, 800bf70 <__ieee754_rem_pio2+0x310>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 fad9 	bl	80002a8 <__aeabi_dsub>
 800bcf6:	a3a0      	add	r3, pc, #640	; (adr r3, 800bf78 <__ieee754_rem_pio2+0x318>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	460d      	mov	r5, r1
 800bd00:	f7f4 fad2 	bl	80002a8 <__aeabi_dsub>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9ca 2300 	strd	r2, r3, [sl]
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 faca 	bl	80002a8 <__aeabi_dsub>
 800bd14:	a398      	add	r3, pc, #608	; (adr r3, 800bf78 <__ieee754_rem_pio2+0x318>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	e7db      	b.n	800bcd4 <__ieee754_rem_pio2+0x74>
 800bd1c:	f7f4 fac6 	bl	80002ac <__adddf3>
 800bd20:	45b0      	cmp	r8, r6
 800bd22:	4604      	mov	r4, r0
 800bd24:	460d      	mov	r5, r1
 800bd26:	d016      	beq.n	800bd56 <__ieee754_rem_pio2+0xf6>
 800bd28:	a38f      	add	r3, pc, #572	; (adr r3, 800bf68 <__ieee754_rem_pio2+0x308>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	f7f4 fabd 	bl	80002ac <__adddf3>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	e9ca 2300 	strd	r2, r3, [sl]
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 fab3 	bl	80002a8 <__aeabi_dsub>
 800bd42:	a389      	add	r3, pc, #548	; (adr r3, 800bf68 <__ieee754_rem_pio2+0x308>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fab0 	bl	80002ac <__adddf3>
 800bd4c:	f04f 3bff 	mov.w	fp, #4294967295
 800bd50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd54:	e7c4      	b.n	800bce0 <__ieee754_rem_pio2+0x80>
 800bd56:	a386      	add	r3, pc, #536	; (adr r3, 800bf70 <__ieee754_rem_pio2+0x310>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 faa6 	bl	80002ac <__adddf3>
 800bd60:	a385      	add	r3, pc, #532	; (adr r3, 800bf78 <__ieee754_rem_pio2+0x318>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	4604      	mov	r4, r0
 800bd68:	460d      	mov	r5, r1
 800bd6a:	f7f4 fa9f 	bl	80002ac <__adddf3>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	e9ca 2300 	strd	r2, r3, [sl]
 800bd76:	4620      	mov	r0, r4
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f7f4 fa95 	bl	80002a8 <__aeabi_dsub>
 800bd7e:	a37e      	add	r3, pc, #504	; (adr r3, 800bf78 <__ieee754_rem_pio2+0x318>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	e7e0      	b.n	800bd48 <__ieee754_rem_pio2+0xe8>
 800bd86:	4b87      	ldr	r3, [pc, #540]	; (800bfa4 <__ieee754_rem_pio2+0x344>)
 800bd88:	4598      	cmp	r8, r3
 800bd8a:	f300 80d8 	bgt.w	800bf3e <__ieee754_rem_pio2+0x2de>
 800bd8e:	f000 fb0f 	bl	800c3b0 <fabs>
 800bd92:	ec55 4b10 	vmov	r4, r5, d0
 800bd96:	ee10 0a10 	vmov	r0, s0
 800bd9a:	a379      	add	r3, pc, #484	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x320>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fc39 	bl	8000618 <__aeabi_dmul>
 800bda6:	4b80      	ldr	r3, [pc, #512]	; (800bfa8 <__ieee754_rem_pio2+0x348>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f7f4 fa7f 	bl	80002ac <__adddf3>
 800bdae:	f7f4 fee3 	bl	8000b78 <__aeabi_d2iz>
 800bdb2:	4683      	mov	fp, r0
 800bdb4:	f7f4 fbc6 	bl	8000544 <__aeabi_i2d>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	ec43 2b18 	vmov	d8, r2, r3
 800bdc0:	a367      	add	r3, pc, #412	; (adr r3, 800bf60 <__ieee754_rem_pio2+0x300>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fc27 	bl	8000618 <__aeabi_dmul>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa69 	bl	80002a8 <__aeabi_dsub>
 800bdd6:	a364      	add	r3, pc, #400	; (adr r3, 800bf68 <__ieee754_rem_pio2+0x308>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	ec51 0b18 	vmov	r0, r1, d8
 800bde4:	f7f4 fc18 	bl	8000618 <__aeabi_dmul>
 800bde8:	f1bb 0f1f 	cmp.w	fp, #31
 800bdec:	4604      	mov	r4, r0
 800bdee:	460d      	mov	r5, r1
 800bdf0:	dc0d      	bgt.n	800be0e <__ieee754_rem_pio2+0x1ae>
 800bdf2:	4b6e      	ldr	r3, [pc, #440]	; (800bfac <__ieee754_rem_pio2+0x34c>)
 800bdf4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfc:	4543      	cmp	r3, r8
 800bdfe:	d006      	beq.n	800be0e <__ieee754_rem_pio2+0x1ae>
 800be00:	4622      	mov	r2, r4
 800be02:	462b      	mov	r3, r5
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fa4e 	bl	80002a8 <__aeabi_dsub>
 800be0c:	e00e      	b.n	800be2c <__ieee754_rem_pio2+0x1cc>
 800be0e:	462b      	mov	r3, r5
 800be10:	4622      	mov	r2, r4
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fa47 	bl	80002a8 <__aeabi_dsub>
 800be1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800be1e:	9303      	str	r3, [sp, #12]
 800be20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be24:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800be28:	2b10      	cmp	r3, #16
 800be2a:	dc02      	bgt.n	800be32 <__ieee754_rem_pio2+0x1d2>
 800be2c:	e9ca 0100 	strd	r0, r1, [sl]
 800be30:	e039      	b.n	800bea6 <__ieee754_rem_pio2+0x246>
 800be32:	a34f      	add	r3, pc, #316	; (adr r3, 800bf70 <__ieee754_rem_pio2+0x310>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	ec51 0b18 	vmov	r0, r1, d8
 800be3c:	f7f4 fbec 	bl	8000618 <__aeabi_dmul>
 800be40:	4604      	mov	r4, r0
 800be42:	460d      	mov	r5, r1
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 fa2c 	bl	80002a8 <__aeabi_dsub>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 fa24 	bl	80002a8 <__aeabi_dsub>
 800be60:	4622      	mov	r2, r4
 800be62:	462b      	mov	r3, r5
 800be64:	f7f4 fa20 	bl	80002a8 <__aeabi_dsub>
 800be68:	a343      	add	r3, pc, #268	; (adr r3, 800bf78 <__ieee754_rem_pio2+0x318>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	4604      	mov	r4, r0
 800be70:	460d      	mov	r5, r1
 800be72:	ec51 0b18 	vmov	r0, r1, d8
 800be76:	f7f4 fbcf 	bl	8000618 <__aeabi_dmul>
 800be7a:	4622      	mov	r2, r4
 800be7c:	462b      	mov	r3, r5
 800be7e:	f7f4 fa13 	bl	80002a8 <__aeabi_dsub>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4604      	mov	r4, r0
 800be88:	460d      	mov	r5, r1
 800be8a:	4640      	mov	r0, r8
 800be8c:	4649      	mov	r1, r9
 800be8e:	f7f4 fa0b 	bl	80002a8 <__aeabi_dsub>
 800be92:	9a03      	ldr	r2, [sp, #12]
 800be94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	2b31      	cmp	r3, #49	; 0x31
 800be9c:	dc24      	bgt.n	800bee8 <__ieee754_rem_pio2+0x288>
 800be9e:	e9ca 0100 	strd	r0, r1, [sl]
 800bea2:	4646      	mov	r6, r8
 800bea4:	464f      	mov	r7, r9
 800bea6:	e9da 8900 	ldrd	r8, r9, [sl]
 800beaa:	4630      	mov	r0, r6
 800beac:	4642      	mov	r2, r8
 800beae:	464b      	mov	r3, r9
 800beb0:	4639      	mov	r1, r7
 800beb2:	f7f4 f9f9 	bl	80002a8 <__aeabi_dsub>
 800beb6:	462b      	mov	r3, r5
 800beb8:	4622      	mov	r2, r4
 800beba:	f7f4 f9f5 	bl	80002a8 <__aeabi_dsub>
 800bebe:	9b02      	ldr	r3, [sp, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bec6:	f6bf af0b 	bge.w	800bce0 <__ieee754_rem_pio2+0x80>
 800beca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bece:	f8ca 3004 	str.w	r3, [sl, #4]
 800bed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bed6:	f8ca 8000 	str.w	r8, [sl]
 800beda:	f8ca 0008 	str.w	r0, [sl, #8]
 800bede:	f8ca 300c 	str.w	r3, [sl, #12]
 800bee2:	f1cb 0b00 	rsb	fp, fp, #0
 800bee6:	e6fb      	b.n	800bce0 <__ieee754_rem_pio2+0x80>
 800bee8:	a327      	add	r3, pc, #156	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x328>)
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	ec51 0b18 	vmov	r0, r1, d8
 800bef2:	f7f4 fb91 	bl	8000618 <__aeabi_dmul>
 800bef6:	4604      	mov	r4, r0
 800bef8:	460d      	mov	r5, r1
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4640      	mov	r0, r8
 800bf00:	4649      	mov	r1, r9
 800bf02:	f7f4 f9d1 	bl	80002a8 <__aeabi_dsub>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460f      	mov	r7, r1
 800bf0e:	4640      	mov	r0, r8
 800bf10:	4649      	mov	r1, r9
 800bf12:	f7f4 f9c9 	bl	80002a8 <__aeabi_dsub>
 800bf16:	4622      	mov	r2, r4
 800bf18:	462b      	mov	r3, r5
 800bf1a:	f7f4 f9c5 	bl	80002a8 <__aeabi_dsub>
 800bf1e:	a31c      	add	r3, pc, #112	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x330>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	ec51 0b18 	vmov	r0, r1, d8
 800bf2c:	f7f4 fb74 	bl	8000618 <__aeabi_dmul>
 800bf30:	4622      	mov	r2, r4
 800bf32:	462b      	mov	r3, r5
 800bf34:	f7f4 f9b8 	bl	80002a8 <__aeabi_dsub>
 800bf38:	4604      	mov	r4, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	e760      	b.n	800be00 <__ieee754_rem_pio2+0x1a0>
 800bf3e:	4b1c      	ldr	r3, [pc, #112]	; (800bfb0 <__ieee754_rem_pio2+0x350>)
 800bf40:	4598      	cmp	r8, r3
 800bf42:	dd37      	ble.n	800bfb4 <__ieee754_rem_pio2+0x354>
 800bf44:	ee10 2a10 	vmov	r2, s0
 800bf48:	462b      	mov	r3, r5
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	f7f4 f9ab 	bl	80002a8 <__aeabi_dsub>
 800bf52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf56:	e9ca 0100 	strd	r0, r1, [sl]
 800bf5a:	e695      	b.n	800bc88 <__ieee754_rem_pio2+0x28>
 800bf5c:	f3af 8000 	nop.w
 800bf60:	54400000 	.word	0x54400000
 800bf64:	3ff921fb 	.word	0x3ff921fb
 800bf68:	1a626331 	.word	0x1a626331
 800bf6c:	3dd0b461 	.word	0x3dd0b461
 800bf70:	1a600000 	.word	0x1a600000
 800bf74:	3dd0b461 	.word	0x3dd0b461
 800bf78:	2e037073 	.word	0x2e037073
 800bf7c:	3ba3198a 	.word	0x3ba3198a
 800bf80:	6dc9c883 	.word	0x6dc9c883
 800bf84:	3fe45f30 	.word	0x3fe45f30
 800bf88:	2e000000 	.word	0x2e000000
 800bf8c:	3ba3198a 	.word	0x3ba3198a
 800bf90:	252049c1 	.word	0x252049c1
 800bf94:	397b839a 	.word	0x397b839a
 800bf98:	3fe921fb 	.word	0x3fe921fb
 800bf9c:	4002d97b 	.word	0x4002d97b
 800bfa0:	3ff921fb 	.word	0x3ff921fb
 800bfa4:	413921fb 	.word	0x413921fb
 800bfa8:	3fe00000 	.word	0x3fe00000
 800bfac:	0800e5b8 	.word	0x0800e5b8
 800bfb0:	7fefffff 	.word	0x7fefffff
 800bfb4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800bfb8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800bfbc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	f7f4 fdd8 	bl	8000b78 <__aeabi_d2iz>
 800bfc8:	f7f4 fabc 	bl	8000544 <__aeabi_i2d>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfd8:	f7f4 f966 	bl	80002a8 <__aeabi_dsub>
 800bfdc:	4b21      	ldr	r3, [pc, #132]	; (800c064 <__ieee754_rem_pio2+0x404>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f7f4 fb1a 	bl	8000618 <__aeabi_dmul>
 800bfe4:	460d      	mov	r5, r1
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	f7f4 fdc6 	bl	8000b78 <__aeabi_d2iz>
 800bfec:	f7f4 faaa 	bl	8000544 <__aeabi_i2d>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bffc:	f7f4 f954 	bl	80002a8 <__aeabi_dsub>
 800c000:	4b18      	ldr	r3, [pc, #96]	; (800c064 <__ieee754_rem_pio2+0x404>)
 800c002:	2200      	movs	r2, #0
 800c004:	f7f4 fb08 	bl	8000618 <__aeabi_dmul>
 800c008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c00c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c010:	2703      	movs	r7, #3
 800c012:	2400      	movs	r4, #0
 800c014:	2500      	movs	r5, #0
 800c016:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c01a:	4622      	mov	r2, r4
 800c01c:	462b      	mov	r3, r5
 800c01e:	46b9      	mov	r9, r7
 800c020:	3f01      	subs	r7, #1
 800c022:	f7f4 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 800c026:	2800      	cmp	r0, #0
 800c028:	d1f5      	bne.n	800c016 <__ieee754_rem_pio2+0x3b6>
 800c02a:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <__ieee754_rem_pio2+0x408>)
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	2302      	movs	r3, #2
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	4632      	mov	r2, r6
 800c034:	464b      	mov	r3, r9
 800c036:	4651      	mov	r1, sl
 800c038:	a804      	add	r0, sp, #16
 800c03a:	f000 f9c5 	bl	800c3c8 <__kernel_rem_pio2>
 800c03e:	9b02      	ldr	r3, [sp, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	4683      	mov	fp, r0
 800c044:	f6bf ae4c 	bge.w	800bce0 <__ieee754_rem_pio2+0x80>
 800c048:	e9da 2100 	ldrd	r2, r1, [sl]
 800c04c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c050:	e9ca 2300 	strd	r2, r3, [sl]
 800c054:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c05c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c060:	e73f      	b.n	800bee2 <__ieee754_rem_pio2+0x282>
 800c062:	bf00      	nop
 800c064:	41700000 	.word	0x41700000
 800c068:	0800e638 	.word	0x0800e638
 800c06c:	00000000 	.word	0x00000000

0800c070 <atan>:
 800c070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	ec55 4b10 	vmov	r4, r5, d0
 800c078:	4bc3      	ldr	r3, [pc, #780]	; (800c388 <atan+0x318>)
 800c07a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c07e:	429e      	cmp	r6, r3
 800c080:	46ab      	mov	fp, r5
 800c082:	dd18      	ble.n	800c0b6 <atan+0x46>
 800c084:	4bc1      	ldr	r3, [pc, #772]	; (800c38c <atan+0x31c>)
 800c086:	429e      	cmp	r6, r3
 800c088:	dc01      	bgt.n	800c08e <atan+0x1e>
 800c08a:	d109      	bne.n	800c0a0 <atan+0x30>
 800c08c:	b144      	cbz	r4, 800c0a0 <atan+0x30>
 800c08e:	4622      	mov	r2, r4
 800c090:	462b      	mov	r3, r5
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 f909 	bl	80002ac <__adddf3>
 800c09a:	4604      	mov	r4, r0
 800c09c:	460d      	mov	r5, r1
 800c09e:	e006      	b.n	800c0ae <atan+0x3e>
 800c0a0:	f1bb 0f00 	cmp.w	fp, #0
 800c0a4:	f300 8131 	bgt.w	800c30a <atan+0x29a>
 800c0a8:	a59b      	add	r5, pc, #620	; (adr r5, 800c318 <atan+0x2a8>)
 800c0aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0ae:	ec45 4b10 	vmov	d0, r4, r5
 800c0b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b6:	4bb6      	ldr	r3, [pc, #728]	; (800c390 <atan+0x320>)
 800c0b8:	429e      	cmp	r6, r3
 800c0ba:	dc14      	bgt.n	800c0e6 <atan+0x76>
 800c0bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c0c0:	429e      	cmp	r6, r3
 800c0c2:	dc0d      	bgt.n	800c0e0 <atan+0x70>
 800c0c4:	a396      	add	r3, pc, #600	; (adr r3, 800c320 <atan+0x2b0>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	ee10 0a10 	vmov	r0, s0
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	f7f4 f8ec 	bl	80002ac <__adddf3>
 800c0d4:	4baf      	ldr	r3, [pc, #700]	; (800c394 <atan+0x324>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f7f4 fd2e 	bl	8000b38 <__aeabi_dcmpgt>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d1e6      	bne.n	800c0ae <atan+0x3e>
 800c0e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c0e4:	e02b      	b.n	800c13e <atan+0xce>
 800c0e6:	f000 f963 	bl	800c3b0 <fabs>
 800c0ea:	4bab      	ldr	r3, [pc, #684]	; (800c398 <atan+0x328>)
 800c0ec:	429e      	cmp	r6, r3
 800c0ee:	ec55 4b10 	vmov	r4, r5, d0
 800c0f2:	f300 80bf 	bgt.w	800c274 <atan+0x204>
 800c0f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c0fa:	429e      	cmp	r6, r3
 800c0fc:	f300 80a0 	bgt.w	800c240 <atan+0x1d0>
 800c100:	ee10 2a10 	vmov	r2, s0
 800c104:	ee10 0a10 	vmov	r0, s0
 800c108:	462b      	mov	r3, r5
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 f8ce 	bl	80002ac <__adddf3>
 800c110:	4ba0      	ldr	r3, [pc, #640]	; (800c394 <atan+0x324>)
 800c112:	2200      	movs	r2, #0
 800c114:	f7f4 f8c8 	bl	80002a8 <__aeabi_dsub>
 800c118:	2200      	movs	r2, #0
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c122:	4620      	mov	r0, r4
 800c124:	4629      	mov	r1, r5
 800c126:	f7f4 f8c1 	bl	80002ac <__adddf3>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	4630      	mov	r0, r6
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 fb9b 	bl	800086c <__aeabi_ddiv>
 800c136:	f04f 0a00 	mov.w	sl, #0
 800c13a:	4604      	mov	r4, r0
 800c13c:	460d      	mov	r5, r1
 800c13e:	4622      	mov	r2, r4
 800c140:	462b      	mov	r3, r5
 800c142:	4620      	mov	r0, r4
 800c144:	4629      	mov	r1, r5
 800c146:	f7f4 fa67 	bl	8000618 <__aeabi_dmul>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4680      	mov	r8, r0
 800c150:	4689      	mov	r9, r1
 800c152:	f7f4 fa61 	bl	8000618 <__aeabi_dmul>
 800c156:	a374      	add	r3, pc, #464	; (adr r3, 800c328 <atan+0x2b8>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	4606      	mov	r6, r0
 800c15e:	460f      	mov	r7, r1
 800c160:	f7f4 fa5a 	bl	8000618 <__aeabi_dmul>
 800c164:	a372      	add	r3, pc, #456	; (adr r3, 800c330 <atan+0x2c0>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	f7f4 f89f 	bl	80002ac <__adddf3>
 800c16e:	4632      	mov	r2, r6
 800c170:	463b      	mov	r3, r7
 800c172:	f7f4 fa51 	bl	8000618 <__aeabi_dmul>
 800c176:	a370      	add	r3, pc, #448	; (adr r3, 800c338 <atan+0x2c8>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f7f4 f896 	bl	80002ac <__adddf3>
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	f7f4 fa48 	bl	8000618 <__aeabi_dmul>
 800c188:	a36d      	add	r3, pc, #436	; (adr r3, 800c340 <atan+0x2d0>)
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	f7f4 f88d 	bl	80002ac <__adddf3>
 800c192:	4632      	mov	r2, r6
 800c194:	463b      	mov	r3, r7
 800c196:	f7f4 fa3f 	bl	8000618 <__aeabi_dmul>
 800c19a:	a36b      	add	r3, pc, #428	; (adr r3, 800c348 <atan+0x2d8>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 f884 	bl	80002ac <__adddf3>
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	f7f4 fa36 	bl	8000618 <__aeabi_dmul>
 800c1ac:	a368      	add	r3, pc, #416	; (adr r3, 800c350 <atan+0x2e0>)
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	f7f4 f87b 	bl	80002ac <__adddf3>
 800c1b6:	4642      	mov	r2, r8
 800c1b8:	464b      	mov	r3, r9
 800c1ba:	f7f4 fa2d 	bl	8000618 <__aeabi_dmul>
 800c1be:	a366      	add	r3, pc, #408	; (adr r3, 800c358 <atan+0x2e8>)
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	4689      	mov	r9, r1
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	f7f4 fa24 	bl	8000618 <__aeabi_dmul>
 800c1d0:	a363      	add	r3, pc, #396	; (adr r3, 800c360 <atan+0x2f0>)
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	f7f4 f867 	bl	80002a8 <__aeabi_dsub>
 800c1da:	4632      	mov	r2, r6
 800c1dc:	463b      	mov	r3, r7
 800c1de:	f7f4 fa1b 	bl	8000618 <__aeabi_dmul>
 800c1e2:	a361      	add	r3, pc, #388	; (adr r3, 800c368 <atan+0x2f8>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	f7f4 f85e 	bl	80002a8 <__aeabi_dsub>
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	463b      	mov	r3, r7
 800c1f0:	f7f4 fa12 	bl	8000618 <__aeabi_dmul>
 800c1f4:	a35e      	add	r3, pc, #376	; (adr r3, 800c370 <atan+0x300>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	f7f4 f855 	bl	80002a8 <__aeabi_dsub>
 800c1fe:	4632      	mov	r2, r6
 800c200:	463b      	mov	r3, r7
 800c202:	f7f4 fa09 	bl	8000618 <__aeabi_dmul>
 800c206:	a35c      	add	r3, pc, #368	; (adr r3, 800c378 <atan+0x308>)
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f7f4 f84c 	bl	80002a8 <__aeabi_dsub>
 800c210:	4632      	mov	r2, r6
 800c212:	463b      	mov	r3, r7
 800c214:	f7f4 fa00 	bl	8000618 <__aeabi_dmul>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4640      	mov	r0, r8
 800c21e:	4649      	mov	r1, r9
 800c220:	f7f4 f844 	bl	80002ac <__adddf3>
 800c224:	4622      	mov	r2, r4
 800c226:	462b      	mov	r3, r5
 800c228:	f7f4 f9f6 	bl	8000618 <__aeabi_dmul>
 800c22c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	d14b      	bne.n	800c2ce <atan+0x25e>
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 f835 	bl	80002a8 <__aeabi_dsub>
 800c23e:	e72c      	b.n	800c09a <atan+0x2a>
 800c240:	ee10 0a10 	vmov	r0, s0
 800c244:	4b53      	ldr	r3, [pc, #332]	; (800c394 <atan+0x324>)
 800c246:	2200      	movs	r2, #0
 800c248:	4629      	mov	r1, r5
 800c24a:	f7f4 f82d 	bl	80002a8 <__aeabi_dsub>
 800c24e:	4b51      	ldr	r3, [pc, #324]	; (800c394 <atan+0x324>)
 800c250:	4606      	mov	r6, r0
 800c252:	460f      	mov	r7, r1
 800c254:	2200      	movs	r2, #0
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f4 f827 	bl	80002ac <__adddf3>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4630      	mov	r0, r6
 800c264:	4639      	mov	r1, r7
 800c266:	f7f4 fb01 	bl	800086c <__aeabi_ddiv>
 800c26a:	f04f 0a01 	mov.w	sl, #1
 800c26e:	4604      	mov	r4, r0
 800c270:	460d      	mov	r5, r1
 800c272:	e764      	b.n	800c13e <atan+0xce>
 800c274:	4b49      	ldr	r3, [pc, #292]	; (800c39c <atan+0x32c>)
 800c276:	429e      	cmp	r6, r3
 800c278:	da1d      	bge.n	800c2b6 <atan+0x246>
 800c27a:	ee10 0a10 	vmov	r0, s0
 800c27e:	4b48      	ldr	r3, [pc, #288]	; (800c3a0 <atan+0x330>)
 800c280:	2200      	movs	r2, #0
 800c282:	4629      	mov	r1, r5
 800c284:	f7f4 f810 	bl	80002a8 <__aeabi_dsub>
 800c288:	4b45      	ldr	r3, [pc, #276]	; (800c3a0 <atan+0x330>)
 800c28a:	4606      	mov	r6, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	2200      	movs	r2, #0
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	f7f4 f9c0 	bl	8000618 <__aeabi_dmul>
 800c298:	4b3e      	ldr	r3, [pc, #248]	; (800c394 <atan+0x324>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7f4 f806 	bl	80002ac <__adddf3>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f4 fae0 	bl	800086c <__aeabi_ddiv>
 800c2ac:	f04f 0a02 	mov.w	sl, #2
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	e743      	b.n	800c13e <atan+0xce>
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	ee10 2a10 	vmov	r2, s0
 800c2bc:	4939      	ldr	r1, [pc, #228]	; (800c3a4 <atan+0x334>)
 800c2be:	2000      	movs	r0, #0
 800c2c0:	f7f4 fad4 	bl	800086c <__aeabi_ddiv>
 800c2c4:	f04f 0a03 	mov.w	sl, #3
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	e737      	b.n	800c13e <atan+0xce>
 800c2ce:	4b36      	ldr	r3, [pc, #216]	; (800c3a8 <atan+0x338>)
 800c2d0:	4e36      	ldr	r6, [pc, #216]	; (800c3ac <atan+0x33c>)
 800c2d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	f7f3 ffe5 	bl	80002a8 <__aeabi_dsub>
 800c2de:	4622      	mov	r2, r4
 800c2e0:	462b      	mov	r3, r5
 800c2e2:	f7f3 ffe1 	bl	80002a8 <__aeabi_dsub>
 800c2e6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c2f2:	f7f3 ffd9 	bl	80002a8 <__aeabi_dsub>
 800c2f6:	f1bb 0f00 	cmp.w	fp, #0
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	f6bf aed6 	bge.w	800c0ae <atan+0x3e>
 800c302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c306:	461d      	mov	r5, r3
 800c308:	e6d1      	b.n	800c0ae <atan+0x3e>
 800c30a:	a51d      	add	r5, pc, #116	; (adr r5, 800c380 <atan+0x310>)
 800c30c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c310:	e6cd      	b.n	800c0ae <atan+0x3e>
 800c312:	bf00      	nop
 800c314:	f3af 8000 	nop.w
 800c318:	54442d18 	.word	0x54442d18
 800c31c:	bff921fb 	.word	0xbff921fb
 800c320:	8800759c 	.word	0x8800759c
 800c324:	7e37e43c 	.word	0x7e37e43c
 800c328:	e322da11 	.word	0xe322da11
 800c32c:	3f90ad3a 	.word	0x3f90ad3a
 800c330:	24760deb 	.word	0x24760deb
 800c334:	3fa97b4b 	.word	0x3fa97b4b
 800c338:	a0d03d51 	.word	0xa0d03d51
 800c33c:	3fb10d66 	.word	0x3fb10d66
 800c340:	c54c206e 	.word	0xc54c206e
 800c344:	3fb745cd 	.word	0x3fb745cd
 800c348:	920083ff 	.word	0x920083ff
 800c34c:	3fc24924 	.word	0x3fc24924
 800c350:	5555550d 	.word	0x5555550d
 800c354:	3fd55555 	.word	0x3fd55555
 800c358:	2c6a6c2f 	.word	0x2c6a6c2f
 800c35c:	bfa2b444 	.word	0xbfa2b444
 800c360:	52defd9a 	.word	0x52defd9a
 800c364:	3fadde2d 	.word	0x3fadde2d
 800c368:	af749a6d 	.word	0xaf749a6d
 800c36c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c370:	fe231671 	.word	0xfe231671
 800c374:	3fbc71c6 	.word	0x3fbc71c6
 800c378:	9998ebc4 	.word	0x9998ebc4
 800c37c:	3fc99999 	.word	0x3fc99999
 800c380:	54442d18 	.word	0x54442d18
 800c384:	3ff921fb 	.word	0x3ff921fb
 800c388:	440fffff 	.word	0x440fffff
 800c38c:	7ff00000 	.word	0x7ff00000
 800c390:	3fdbffff 	.word	0x3fdbffff
 800c394:	3ff00000 	.word	0x3ff00000
 800c398:	3ff2ffff 	.word	0x3ff2ffff
 800c39c:	40038000 	.word	0x40038000
 800c3a0:	3ff80000 	.word	0x3ff80000
 800c3a4:	bff00000 	.word	0xbff00000
 800c3a8:	0800e760 	.word	0x0800e760
 800c3ac:	0800e740 	.word	0x0800e740

0800c3b0 <fabs>:
 800c3b0:	ec51 0b10 	vmov	r0, r1, d0
 800c3b4:	ee10 2a10 	vmov	r2, s0
 800c3b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3bc:	ec43 2b10 	vmov	d0, r2, r3
 800c3c0:	4770      	bx	lr
 800c3c2:	0000      	movs	r0, r0
 800c3c4:	0000      	movs	r0, r0
	...

0800c3c8 <__kernel_rem_pio2>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	ed2d 8b02 	vpush	{d8}
 800c3d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c3d4:	f112 0f14 	cmn.w	r2, #20
 800c3d8:	9306      	str	r3, [sp, #24]
 800c3da:	9104      	str	r1, [sp, #16]
 800c3dc:	4bc2      	ldr	r3, [pc, #776]	; (800c6e8 <__kernel_rem_pio2+0x320>)
 800c3de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c3e0:	9009      	str	r0, [sp, #36]	; 0x24
 800c3e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	9b06      	ldr	r3, [sp, #24]
 800c3ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3ee:	bfa8      	it	ge
 800c3f0:	1ed4      	subge	r4, r2, #3
 800c3f2:	9305      	str	r3, [sp, #20]
 800c3f4:	bfb2      	itee	lt
 800c3f6:	2400      	movlt	r4, #0
 800c3f8:	2318      	movge	r3, #24
 800c3fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800c3fe:	f06f 0317 	mvn.w	r3, #23
 800c402:	fb04 3303 	mla	r3, r4, r3, r3
 800c406:	eb03 0a02 	add.w	sl, r3, r2
 800c40a:	9b00      	ldr	r3, [sp, #0]
 800c40c:	9a05      	ldr	r2, [sp, #20]
 800c40e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c6d8 <__kernel_rem_pio2+0x310>
 800c412:	eb03 0802 	add.w	r8, r3, r2
 800c416:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c418:	1aa7      	subs	r7, r4, r2
 800c41a:	ae20      	add	r6, sp, #128	; 0x80
 800c41c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c420:	2500      	movs	r5, #0
 800c422:	4545      	cmp	r5, r8
 800c424:	dd13      	ble.n	800c44e <__kernel_rem_pio2+0x86>
 800c426:	9b06      	ldr	r3, [sp, #24]
 800c428:	aa20      	add	r2, sp, #128	; 0x80
 800c42a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c42e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c432:	f04f 0800 	mov.w	r8, #0
 800c436:	9b00      	ldr	r3, [sp, #0]
 800c438:	4598      	cmp	r8, r3
 800c43a:	dc31      	bgt.n	800c4a0 <__kernel_rem_pio2+0xd8>
 800c43c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c6d8 <__kernel_rem_pio2+0x310>
 800c440:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c444:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c448:	462f      	mov	r7, r5
 800c44a:	2600      	movs	r6, #0
 800c44c:	e01b      	b.n	800c486 <__kernel_rem_pio2+0xbe>
 800c44e:	42ef      	cmn	r7, r5
 800c450:	d407      	bmi.n	800c462 <__kernel_rem_pio2+0x9a>
 800c452:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c456:	f7f4 f875 	bl	8000544 <__aeabi_i2d>
 800c45a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c45e:	3501      	adds	r5, #1
 800c460:	e7df      	b.n	800c422 <__kernel_rem_pio2+0x5a>
 800c462:	ec51 0b18 	vmov	r0, r1, d8
 800c466:	e7f8      	b.n	800c45a <__kernel_rem_pio2+0x92>
 800c468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c46c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c470:	f7f4 f8d2 	bl	8000618 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c47c:	f7f3 ff16 	bl	80002ac <__adddf3>
 800c480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c484:	3601      	adds	r6, #1
 800c486:	9b05      	ldr	r3, [sp, #20]
 800c488:	429e      	cmp	r6, r3
 800c48a:	f1a7 0708 	sub.w	r7, r7, #8
 800c48e:	ddeb      	ble.n	800c468 <__kernel_rem_pio2+0xa0>
 800c490:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c494:	f108 0801 	add.w	r8, r8, #1
 800c498:	ecab 7b02 	vstmia	fp!, {d7}
 800c49c:	3508      	adds	r5, #8
 800c49e:	e7ca      	b.n	800c436 <__kernel_rem_pio2+0x6e>
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	aa0c      	add	r2, sp, #48	; 0x30
 800c4a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4aa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c4ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c4b0:	9c00      	ldr	r4, [sp, #0]
 800c4b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4b4:	00e3      	lsls	r3, r4, #3
 800c4b6:	9308      	str	r3, [sp, #32]
 800c4b8:	ab98      	add	r3, sp, #608	; 0x260
 800c4ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c4c2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c4c6:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c4cc:	46c3      	mov	fp, r8
 800c4ce:	46a1      	mov	r9, r4
 800c4d0:	f1b9 0f00 	cmp.w	r9, #0
 800c4d4:	f1a5 0508 	sub.w	r5, r5, #8
 800c4d8:	dc77      	bgt.n	800c5ca <__kernel_rem_pio2+0x202>
 800c4da:	ec47 6b10 	vmov	d0, r6, r7
 800c4de:	4650      	mov	r0, sl
 800c4e0:	f000 fac2 	bl	800ca68 <scalbn>
 800c4e4:	ec57 6b10 	vmov	r6, r7, d0
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c4ee:	ee10 0a10 	vmov	r0, s0
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	f7f4 f890 	bl	8000618 <__aeabi_dmul>
 800c4f8:	ec41 0b10 	vmov	d0, r0, r1
 800c4fc:	f7ff f8bc 	bl	800b678 <floor>
 800c500:	4b7a      	ldr	r3, [pc, #488]	; (800c6ec <__kernel_rem_pio2+0x324>)
 800c502:	ec51 0b10 	vmov	r0, r1, d0
 800c506:	2200      	movs	r2, #0
 800c508:	f7f4 f886 	bl	8000618 <__aeabi_dmul>
 800c50c:	4602      	mov	r2, r0
 800c50e:	460b      	mov	r3, r1
 800c510:	4630      	mov	r0, r6
 800c512:	4639      	mov	r1, r7
 800c514:	f7f3 fec8 	bl	80002a8 <__aeabi_dsub>
 800c518:	460f      	mov	r7, r1
 800c51a:	4606      	mov	r6, r0
 800c51c:	f7f4 fb2c 	bl	8000b78 <__aeabi_d2iz>
 800c520:	9002      	str	r0, [sp, #8]
 800c522:	f7f4 f80f 	bl	8000544 <__aeabi_i2d>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f3 febb 	bl	80002a8 <__aeabi_dsub>
 800c532:	f1ba 0f00 	cmp.w	sl, #0
 800c536:	4606      	mov	r6, r0
 800c538:	460f      	mov	r7, r1
 800c53a:	dd6d      	ble.n	800c618 <__kernel_rem_pio2+0x250>
 800c53c:	1e61      	subs	r1, r4, #1
 800c53e:	ab0c      	add	r3, sp, #48	; 0x30
 800c540:	9d02      	ldr	r5, [sp, #8]
 800c542:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c546:	f1ca 0018 	rsb	r0, sl, #24
 800c54a:	fa43 f200 	asr.w	r2, r3, r0
 800c54e:	4415      	add	r5, r2
 800c550:	4082      	lsls	r2, r0
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	aa0c      	add	r2, sp, #48	; 0x30
 800c556:	9502      	str	r5, [sp, #8]
 800c558:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c55c:	f1ca 0217 	rsb	r2, sl, #23
 800c560:	fa43 fb02 	asr.w	fp, r3, r2
 800c564:	f1bb 0f00 	cmp.w	fp, #0
 800c568:	dd65      	ble.n	800c636 <__kernel_rem_pio2+0x26e>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	2200      	movs	r2, #0
 800c56e:	3301      	adds	r3, #1
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	4615      	mov	r5, r2
 800c574:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c578:	4294      	cmp	r4, r2
 800c57a:	f300 809f 	bgt.w	800c6bc <__kernel_rem_pio2+0x2f4>
 800c57e:	f1ba 0f00 	cmp.w	sl, #0
 800c582:	dd07      	ble.n	800c594 <__kernel_rem_pio2+0x1cc>
 800c584:	f1ba 0f01 	cmp.w	sl, #1
 800c588:	f000 80c1 	beq.w	800c70e <__kernel_rem_pio2+0x346>
 800c58c:	f1ba 0f02 	cmp.w	sl, #2
 800c590:	f000 80c7 	beq.w	800c722 <__kernel_rem_pio2+0x35a>
 800c594:	f1bb 0f02 	cmp.w	fp, #2
 800c598:	d14d      	bne.n	800c636 <__kernel_rem_pio2+0x26e>
 800c59a:	4632      	mov	r2, r6
 800c59c:	463b      	mov	r3, r7
 800c59e:	4954      	ldr	r1, [pc, #336]	; (800c6f0 <__kernel_rem_pio2+0x328>)
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	f7f3 fe81 	bl	80002a8 <__aeabi_dsub>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460f      	mov	r7, r1
 800c5aa:	2d00      	cmp	r5, #0
 800c5ac:	d043      	beq.n	800c636 <__kernel_rem_pio2+0x26e>
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c6e0 <__kernel_rem_pio2+0x318>
 800c5b4:	f000 fa58 	bl	800ca68 <scalbn>
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	ec53 2b10 	vmov	r2, r3, d0
 800c5c0:	f7f3 fe72 	bl	80002a8 <__aeabi_dsub>
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	460f      	mov	r7, r1
 800c5c8:	e035      	b.n	800c636 <__kernel_rem_pio2+0x26e>
 800c5ca:	4b4a      	ldr	r3, [pc, #296]	; (800c6f4 <__kernel_rem_pio2+0x32c>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	f7f4 f821 	bl	8000618 <__aeabi_dmul>
 800c5d6:	f7f4 facf 	bl	8000b78 <__aeabi_d2iz>
 800c5da:	f7f3 ffb3 	bl	8000544 <__aeabi_i2d>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	ec43 2b18 	vmov	d8, r2, r3
 800c5e6:	4b44      	ldr	r3, [pc, #272]	; (800c6f8 <__kernel_rem_pio2+0x330>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f7f4 f815 	bl	8000618 <__aeabi_dmul>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	f7f3 fe57 	bl	80002a8 <__aeabi_dsub>
 800c5fa:	f7f4 fabd 	bl	8000b78 <__aeabi_d2iz>
 800c5fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c602:	f84b 0b04 	str.w	r0, [fp], #4
 800c606:	ec51 0b18 	vmov	r0, r1, d8
 800c60a:	f7f3 fe4f 	bl	80002ac <__adddf3>
 800c60e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	e75b      	b.n	800c4d0 <__kernel_rem_pio2+0x108>
 800c618:	d106      	bne.n	800c628 <__kernel_rem_pio2+0x260>
 800c61a:	1e63      	subs	r3, r4, #1
 800c61c:	aa0c      	add	r2, sp, #48	; 0x30
 800c61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c622:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c626:	e79d      	b.n	800c564 <__kernel_rem_pio2+0x19c>
 800c628:	4b34      	ldr	r3, [pc, #208]	; (800c6fc <__kernel_rem_pio2+0x334>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	f7f4 fa7a 	bl	8000b24 <__aeabi_dcmpge>
 800c630:	2800      	cmp	r0, #0
 800c632:	d140      	bne.n	800c6b6 <__kernel_rem_pio2+0x2ee>
 800c634:	4683      	mov	fp, r0
 800c636:	2200      	movs	r2, #0
 800c638:	2300      	movs	r3, #0
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f4 fa53 	bl	8000ae8 <__aeabi_dcmpeq>
 800c642:	2800      	cmp	r0, #0
 800c644:	f000 80c1 	beq.w	800c7ca <__kernel_rem_pio2+0x402>
 800c648:	1e65      	subs	r5, r4, #1
 800c64a:	462b      	mov	r3, r5
 800c64c:	2200      	movs	r2, #0
 800c64e:	9900      	ldr	r1, [sp, #0]
 800c650:	428b      	cmp	r3, r1
 800c652:	da6d      	bge.n	800c730 <__kernel_rem_pio2+0x368>
 800c654:	2a00      	cmp	r2, #0
 800c656:	f000 808a 	beq.w	800c76e <__kernel_rem_pio2+0x3a6>
 800c65a:	ab0c      	add	r3, sp, #48	; 0x30
 800c65c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c660:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80ae 	beq.w	800c7c6 <__kernel_rem_pio2+0x3fe>
 800c66a:	4650      	mov	r0, sl
 800c66c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c6e0 <__kernel_rem_pio2+0x318>
 800c670:	f000 f9fa 	bl	800ca68 <scalbn>
 800c674:	1c6b      	adds	r3, r5, #1
 800c676:	00da      	lsls	r2, r3, #3
 800c678:	9205      	str	r2, [sp, #20]
 800c67a:	ec57 6b10 	vmov	r6, r7, d0
 800c67e:	aa70      	add	r2, sp, #448	; 0x1c0
 800c680:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c6f4 <__kernel_rem_pio2+0x32c>
 800c684:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c688:	462c      	mov	r4, r5
 800c68a:	f04f 0800 	mov.w	r8, #0
 800c68e:	2c00      	cmp	r4, #0
 800c690:	f280 80d4 	bge.w	800c83c <__kernel_rem_pio2+0x474>
 800c694:	462c      	mov	r4, r5
 800c696:	2c00      	cmp	r4, #0
 800c698:	f2c0 8102 	blt.w	800c8a0 <__kernel_rem_pio2+0x4d8>
 800c69c:	4b18      	ldr	r3, [pc, #96]	; (800c700 <__kernel_rem_pio2+0x338>)
 800c69e:	461e      	mov	r6, r3
 800c6a0:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6a2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c6a6:	1b2b      	subs	r3, r5, r4
 800c6a8:	f04f 0900 	mov.w	r9, #0
 800c6ac:	f04f 0a00 	mov.w	sl, #0
 800c6b0:	2700      	movs	r7, #0
 800c6b2:	9306      	str	r3, [sp, #24]
 800c6b4:	e0e6      	b.n	800c884 <__kernel_rem_pio2+0x4bc>
 800c6b6:	f04f 0b02 	mov.w	fp, #2
 800c6ba:	e756      	b.n	800c56a <__kernel_rem_pio2+0x1a2>
 800c6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c6c0:	bb05      	cbnz	r5, 800c704 <__kernel_rem_pio2+0x33c>
 800c6c2:	b123      	cbz	r3, 800c6ce <__kernel_rem_pio2+0x306>
 800c6c4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c6c8:	f8c8 3000 	str.w	r3, [r8]
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	3201      	adds	r2, #1
 800c6d0:	f108 0804 	add.w	r8, r8, #4
 800c6d4:	461d      	mov	r5, r3
 800c6d6:	e74f      	b.n	800c578 <__kernel_rem_pio2+0x1b0>
	...
 800c6e4:	3ff00000 	.word	0x3ff00000
 800c6e8:	0800e7c0 	.word	0x0800e7c0
 800c6ec:	40200000 	.word	0x40200000
 800c6f0:	3ff00000 	.word	0x3ff00000
 800c6f4:	3e700000 	.word	0x3e700000
 800c6f8:	41700000 	.word	0x41700000
 800c6fc:	3fe00000 	.word	0x3fe00000
 800c700:	0800e780 	.word	0x0800e780
 800c704:	1acb      	subs	r3, r1, r3
 800c706:	f8c8 3000 	str.w	r3, [r8]
 800c70a:	462b      	mov	r3, r5
 800c70c:	e7df      	b.n	800c6ce <__kernel_rem_pio2+0x306>
 800c70e:	1e62      	subs	r2, r4, #1
 800c710:	ab0c      	add	r3, sp, #48	; 0x30
 800c712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c716:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c71a:	a90c      	add	r1, sp, #48	; 0x30
 800c71c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c720:	e738      	b.n	800c594 <__kernel_rem_pio2+0x1cc>
 800c722:	1e62      	subs	r2, r4, #1
 800c724:	ab0c      	add	r3, sp, #48	; 0x30
 800c726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c72a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c72e:	e7f4      	b.n	800c71a <__kernel_rem_pio2+0x352>
 800c730:	a90c      	add	r1, sp, #48	; 0x30
 800c732:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c736:	3b01      	subs	r3, #1
 800c738:	430a      	orrs	r2, r1
 800c73a:	e788      	b.n	800c64e <__kernel_rem_pio2+0x286>
 800c73c:	3301      	adds	r3, #1
 800c73e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c742:	2900      	cmp	r1, #0
 800c744:	d0fa      	beq.n	800c73c <__kernel_rem_pio2+0x374>
 800c746:	9a08      	ldr	r2, [sp, #32]
 800c748:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c74c:	446a      	add	r2, sp
 800c74e:	3a98      	subs	r2, #152	; 0x98
 800c750:	9208      	str	r2, [sp, #32]
 800c752:	9a06      	ldr	r2, [sp, #24]
 800c754:	a920      	add	r1, sp, #128	; 0x80
 800c756:	18a2      	adds	r2, r4, r2
 800c758:	18e3      	adds	r3, r4, r3
 800c75a:	f104 0801 	add.w	r8, r4, #1
 800c75e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c762:	9302      	str	r3, [sp, #8]
 800c764:	9b02      	ldr	r3, [sp, #8]
 800c766:	4543      	cmp	r3, r8
 800c768:	da04      	bge.n	800c774 <__kernel_rem_pio2+0x3ac>
 800c76a:	461c      	mov	r4, r3
 800c76c:	e6a2      	b.n	800c4b4 <__kernel_rem_pio2+0xec>
 800c76e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c770:	2301      	movs	r3, #1
 800c772:	e7e4      	b.n	800c73e <__kernel_rem_pio2+0x376>
 800c774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c776:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c77a:	f7f3 fee3 	bl	8000544 <__aeabi_i2d>
 800c77e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c784:	46ab      	mov	fp, r5
 800c786:	461c      	mov	r4, r3
 800c788:	f04f 0900 	mov.w	r9, #0
 800c78c:	2600      	movs	r6, #0
 800c78e:	2700      	movs	r7, #0
 800c790:	9b05      	ldr	r3, [sp, #20]
 800c792:	4599      	cmp	r9, r3
 800c794:	dd06      	ble.n	800c7a4 <__kernel_rem_pio2+0x3dc>
 800c796:	9b08      	ldr	r3, [sp, #32]
 800c798:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c79c:	f108 0801 	add.w	r8, r8, #1
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	e7df      	b.n	800c764 <__kernel_rem_pio2+0x39c>
 800c7a4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c7a8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c7ac:	f7f3 ff34 	bl	8000618 <__aeabi_dmul>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	4639      	mov	r1, r7
 800c7b8:	f7f3 fd78 	bl	80002ac <__adddf3>
 800c7bc:	f109 0901 	add.w	r9, r9, #1
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	460f      	mov	r7, r1
 800c7c4:	e7e4      	b.n	800c790 <__kernel_rem_pio2+0x3c8>
 800c7c6:	3d01      	subs	r5, #1
 800c7c8:	e747      	b.n	800c65a <__kernel_rem_pio2+0x292>
 800c7ca:	ec47 6b10 	vmov	d0, r6, r7
 800c7ce:	f1ca 0000 	rsb	r0, sl, #0
 800c7d2:	f000 f949 	bl	800ca68 <scalbn>
 800c7d6:	ec57 6b10 	vmov	r6, r7, d0
 800c7da:	4ba0      	ldr	r3, [pc, #640]	; (800ca5c <__kernel_rem_pio2+0x694>)
 800c7dc:	ee10 0a10 	vmov	r0, s0
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f4 f99e 	bl	8000b24 <__aeabi_dcmpge>
 800c7e8:	b1f8      	cbz	r0, 800c82a <__kernel_rem_pio2+0x462>
 800c7ea:	4b9d      	ldr	r3, [pc, #628]	; (800ca60 <__kernel_rem_pio2+0x698>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f7f3 ff11 	bl	8000618 <__aeabi_dmul>
 800c7f6:	f7f4 f9bf 	bl	8000b78 <__aeabi_d2iz>
 800c7fa:	4680      	mov	r8, r0
 800c7fc:	f7f3 fea2 	bl	8000544 <__aeabi_i2d>
 800c800:	4b96      	ldr	r3, [pc, #600]	; (800ca5c <__kernel_rem_pio2+0x694>)
 800c802:	2200      	movs	r2, #0
 800c804:	f7f3 ff08 	bl	8000618 <__aeabi_dmul>
 800c808:	460b      	mov	r3, r1
 800c80a:	4602      	mov	r2, r0
 800c80c:	4639      	mov	r1, r7
 800c80e:	4630      	mov	r0, r6
 800c810:	f7f3 fd4a 	bl	80002a8 <__aeabi_dsub>
 800c814:	f7f4 f9b0 	bl	8000b78 <__aeabi_d2iz>
 800c818:	1c65      	adds	r5, r4, #1
 800c81a:	ab0c      	add	r3, sp, #48	; 0x30
 800c81c:	f10a 0a18 	add.w	sl, sl, #24
 800c820:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c824:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c828:	e71f      	b.n	800c66a <__kernel_rem_pio2+0x2a2>
 800c82a:	4630      	mov	r0, r6
 800c82c:	4639      	mov	r1, r7
 800c82e:	f7f4 f9a3 	bl	8000b78 <__aeabi_d2iz>
 800c832:	ab0c      	add	r3, sp, #48	; 0x30
 800c834:	4625      	mov	r5, r4
 800c836:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c83a:	e716      	b.n	800c66a <__kernel_rem_pio2+0x2a2>
 800c83c:	ab0c      	add	r3, sp, #48	; 0x30
 800c83e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c842:	f7f3 fe7f 	bl	8000544 <__aeabi_i2d>
 800c846:	4632      	mov	r2, r6
 800c848:	463b      	mov	r3, r7
 800c84a:	f7f3 fee5 	bl	8000618 <__aeabi_dmul>
 800c84e:	4642      	mov	r2, r8
 800c850:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c854:	464b      	mov	r3, r9
 800c856:	4630      	mov	r0, r6
 800c858:	4639      	mov	r1, r7
 800c85a:	f7f3 fedd 	bl	8000618 <__aeabi_dmul>
 800c85e:	3c01      	subs	r4, #1
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	e713      	b.n	800c68e <__kernel_rem_pio2+0x2c6>
 800c866:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c86a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c86e:	f7f3 fed3 	bl	8000618 <__aeabi_dmul>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4648      	mov	r0, r9
 800c878:	4651      	mov	r1, sl
 800c87a:	f7f3 fd17 	bl	80002ac <__adddf3>
 800c87e:	3701      	adds	r7, #1
 800c880:	4681      	mov	r9, r0
 800c882:	468a      	mov	sl, r1
 800c884:	9b00      	ldr	r3, [sp, #0]
 800c886:	429f      	cmp	r7, r3
 800c888:	dc02      	bgt.n	800c890 <__kernel_rem_pio2+0x4c8>
 800c88a:	9b06      	ldr	r3, [sp, #24]
 800c88c:	429f      	cmp	r7, r3
 800c88e:	ddea      	ble.n	800c866 <__kernel_rem_pio2+0x49e>
 800c890:	9a06      	ldr	r2, [sp, #24]
 800c892:	ab48      	add	r3, sp, #288	; 0x120
 800c894:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c898:	e9c6 9a00 	strd	r9, sl, [r6]
 800c89c:	3c01      	subs	r4, #1
 800c89e:	e6fa      	b.n	800c696 <__kernel_rem_pio2+0x2ce>
 800c8a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	dc0b      	bgt.n	800c8be <__kernel_rem_pio2+0x4f6>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	dc39      	bgt.n	800c91e <__kernel_rem_pio2+0x556>
 800c8aa:	d05d      	beq.n	800c968 <__kernel_rem_pio2+0x5a0>
 800c8ac:	9b02      	ldr	r3, [sp, #8]
 800c8ae:	f003 0007 	and.w	r0, r3, #7
 800c8b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c8b6:	ecbd 8b02 	vpop	{d8}
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c8c0:	2b03      	cmp	r3, #3
 800c8c2:	d1f3      	bne.n	800c8ac <__kernel_rem_pio2+0x4e4>
 800c8c4:	9b05      	ldr	r3, [sp, #20]
 800c8c6:	9500      	str	r5, [sp, #0]
 800c8c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c8cc:	eb0d 0403 	add.w	r4, sp, r3
 800c8d0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c8d4:	46a2      	mov	sl, r4
 800c8d6:	9b00      	ldr	r3, [sp, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f1aa 0a08 	sub.w	sl, sl, #8
 800c8de:	dc69      	bgt.n	800c9b4 <__kernel_rem_pio2+0x5ec>
 800c8e0:	46aa      	mov	sl, r5
 800c8e2:	f1ba 0f01 	cmp.w	sl, #1
 800c8e6:	f1a4 0408 	sub.w	r4, r4, #8
 800c8ea:	f300 8083 	bgt.w	800c9f4 <__kernel_rem_pio2+0x62c>
 800c8ee:	9c05      	ldr	r4, [sp, #20]
 800c8f0:	ab48      	add	r3, sp, #288	; 0x120
 800c8f2:	441c      	add	r4, r3
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	2d01      	cmp	r5, #1
 800c8fa:	f300 809a 	bgt.w	800ca32 <__kernel_rem_pio2+0x66a>
 800c8fe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c902:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c906:	f1bb 0f00 	cmp.w	fp, #0
 800c90a:	f040 8098 	bne.w	800ca3e <__kernel_rem_pio2+0x676>
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	e9c3 7800 	strd	r7, r8, [r3]
 800c914:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c918:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c91c:	e7c6      	b.n	800c8ac <__kernel_rem_pio2+0x4e4>
 800c91e:	9e05      	ldr	r6, [sp, #20]
 800c920:	ab48      	add	r3, sp, #288	; 0x120
 800c922:	441e      	add	r6, r3
 800c924:	462c      	mov	r4, r5
 800c926:	2000      	movs	r0, #0
 800c928:	2100      	movs	r1, #0
 800c92a:	2c00      	cmp	r4, #0
 800c92c:	da33      	bge.n	800c996 <__kernel_rem_pio2+0x5ce>
 800c92e:	f1bb 0f00 	cmp.w	fp, #0
 800c932:	d036      	beq.n	800c9a2 <__kernel_rem_pio2+0x5da>
 800c934:	4602      	mov	r2, r0
 800c936:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c93a:	9c04      	ldr	r4, [sp, #16]
 800c93c:	e9c4 2300 	strd	r2, r3, [r4]
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c948:	f7f3 fcae 	bl	80002a8 <__aeabi_dsub>
 800c94c:	ae4a      	add	r6, sp, #296	; 0x128
 800c94e:	2401      	movs	r4, #1
 800c950:	42a5      	cmp	r5, r4
 800c952:	da29      	bge.n	800c9a8 <__kernel_rem_pio2+0x5e0>
 800c954:	f1bb 0f00 	cmp.w	fp, #0
 800c958:	d002      	beq.n	800c960 <__kernel_rem_pio2+0x598>
 800c95a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c95e:	4619      	mov	r1, r3
 800c960:	9b04      	ldr	r3, [sp, #16]
 800c962:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c966:	e7a1      	b.n	800c8ac <__kernel_rem_pio2+0x4e4>
 800c968:	9c05      	ldr	r4, [sp, #20]
 800c96a:	ab48      	add	r3, sp, #288	; 0x120
 800c96c:	441c      	add	r4, r3
 800c96e:	2000      	movs	r0, #0
 800c970:	2100      	movs	r1, #0
 800c972:	2d00      	cmp	r5, #0
 800c974:	da09      	bge.n	800c98a <__kernel_rem_pio2+0x5c2>
 800c976:	f1bb 0f00 	cmp.w	fp, #0
 800c97a:	d002      	beq.n	800c982 <__kernel_rem_pio2+0x5ba>
 800c97c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c980:	4619      	mov	r1, r3
 800c982:	9b04      	ldr	r3, [sp, #16]
 800c984:	e9c3 0100 	strd	r0, r1, [r3]
 800c988:	e790      	b.n	800c8ac <__kernel_rem_pio2+0x4e4>
 800c98a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c98e:	f7f3 fc8d 	bl	80002ac <__adddf3>
 800c992:	3d01      	subs	r5, #1
 800c994:	e7ed      	b.n	800c972 <__kernel_rem_pio2+0x5aa>
 800c996:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c99a:	f7f3 fc87 	bl	80002ac <__adddf3>
 800c99e:	3c01      	subs	r4, #1
 800c9a0:	e7c3      	b.n	800c92a <__kernel_rem_pio2+0x562>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	e7c8      	b.n	800c93a <__kernel_rem_pio2+0x572>
 800c9a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c9ac:	f7f3 fc7e 	bl	80002ac <__adddf3>
 800c9b0:	3401      	adds	r4, #1
 800c9b2:	e7cd      	b.n	800c950 <__kernel_rem_pio2+0x588>
 800c9b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c9bc:	9b00      	ldr	r3, [sp, #0]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	463b      	mov	r3, r7
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	4649      	mov	r1, r9
 800c9ca:	f7f3 fc6f 	bl	80002ac <__adddf3>
 800c9ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4649      	mov	r1, r9
 800c9da:	f7f3 fc65 	bl	80002a8 <__aeabi_dsub>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	f7f3 fc63 	bl	80002ac <__adddf3>
 800c9e6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c9ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c9ee:	ed8a 7b00 	vstr	d7, [sl]
 800c9f2:	e770      	b.n	800c8d6 <__kernel_rem_pio2+0x50e>
 800c9f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c9f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4632      	mov	r2, r6
 800ca00:	463b      	mov	r3, r7
 800ca02:	4649      	mov	r1, r9
 800ca04:	f7f3 fc52 	bl	80002ac <__adddf3>
 800ca08:	e9cd 0100 	strd	r0, r1, [sp]
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4640      	mov	r0, r8
 800ca12:	4649      	mov	r1, r9
 800ca14:	f7f3 fc48 	bl	80002a8 <__aeabi_dsub>
 800ca18:	4632      	mov	r2, r6
 800ca1a:	463b      	mov	r3, r7
 800ca1c:	f7f3 fc46 	bl	80002ac <__adddf3>
 800ca20:	ed9d 7b00 	vldr	d7, [sp]
 800ca24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca28:	ed84 7b00 	vstr	d7, [r4]
 800ca2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca30:	e757      	b.n	800c8e2 <__kernel_rem_pio2+0x51a>
 800ca32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ca36:	f7f3 fc39 	bl	80002ac <__adddf3>
 800ca3a:	3d01      	subs	r5, #1
 800ca3c:	e75c      	b.n	800c8f8 <__kernel_rem_pio2+0x530>
 800ca3e:	9b04      	ldr	r3, [sp, #16]
 800ca40:	9a04      	ldr	r2, [sp, #16]
 800ca42:	601f      	str	r7, [r3, #0]
 800ca44:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ca48:	605c      	str	r4, [r3, #4]
 800ca4a:	609d      	str	r5, [r3, #8]
 800ca4c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ca50:	60d3      	str	r3, [r2, #12]
 800ca52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca56:	6110      	str	r0, [r2, #16]
 800ca58:	6153      	str	r3, [r2, #20]
 800ca5a:	e727      	b.n	800c8ac <__kernel_rem_pio2+0x4e4>
 800ca5c:	41700000 	.word	0x41700000
 800ca60:	3e700000 	.word	0x3e700000
 800ca64:	00000000 	.word	0x00000000

0800ca68 <scalbn>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	ec55 4b10 	vmov	r4, r5, d0
 800ca6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ca72:	4606      	mov	r6, r0
 800ca74:	462b      	mov	r3, r5
 800ca76:	b999      	cbnz	r1, 800caa0 <scalbn+0x38>
 800ca78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca7c:	4323      	orrs	r3, r4
 800ca7e:	d03f      	beq.n	800cb00 <scalbn+0x98>
 800ca80:	4b35      	ldr	r3, [pc, #212]	; (800cb58 <scalbn+0xf0>)
 800ca82:	4629      	mov	r1, r5
 800ca84:	ee10 0a10 	vmov	r0, s0
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f7f3 fdc5 	bl	8000618 <__aeabi_dmul>
 800ca8e:	4b33      	ldr	r3, [pc, #204]	; (800cb5c <scalbn+0xf4>)
 800ca90:	429e      	cmp	r6, r3
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	da10      	bge.n	800caba <scalbn+0x52>
 800ca98:	a327      	add	r3, pc, #156	; (adr r3, 800cb38 <scalbn+0xd0>)
 800ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9e:	e01f      	b.n	800cae0 <scalbn+0x78>
 800caa0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800caa4:	4291      	cmp	r1, r2
 800caa6:	d10c      	bne.n	800cac2 <scalbn+0x5a>
 800caa8:	ee10 2a10 	vmov	r2, s0
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f3 fbfc 	bl	80002ac <__adddf3>
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	e022      	b.n	800cb00 <scalbn+0x98>
 800caba:	460b      	mov	r3, r1
 800cabc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cac0:	3936      	subs	r1, #54	; 0x36
 800cac2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cac6:	4296      	cmp	r6, r2
 800cac8:	dd0d      	ble.n	800cae6 <scalbn+0x7e>
 800caca:	2d00      	cmp	r5, #0
 800cacc:	a11c      	add	r1, pc, #112	; (adr r1, 800cb40 <scalbn+0xd8>)
 800cace:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad2:	da02      	bge.n	800cada <scalbn+0x72>
 800cad4:	a11c      	add	r1, pc, #112	; (adr r1, 800cb48 <scalbn+0xe0>)
 800cad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cada:	a319      	add	r3, pc, #100	; (adr r3, 800cb40 <scalbn+0xd8>)
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	f7f3 fd9a 	bl	8000618 <__aeabi_dmul>
 800cae4:	e7e6      	b.n	800cab4 <scalbn+0x4c>
 800cae6:	1872      	adds	r2, r6, r1
 800cae8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800caec:	428a      	cmp	r2, r1
 800caee:	dcec      	bgt.n	800caca <scalbn+0x62>
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	dd08      	ble.n	800cb06 <scalbn+0x9e>
 800caf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800caf8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cafc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb00:	ec45 4b10 	vmov	d0, r4, r5
 800cb04:	bd70      	pop	{r4, r5, r6, pc}
 800cb06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb0a:	da08      	bge.n	800cb1e <scalbn+0xb6>
 800cb0c:	2d00      	cmp	r5, #0
 800cb0e:	a10a      	add	r1, pc, #40	; (adr r1, 800cb38 <scalbn+0xd0>)
 800cb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb14:	dac0      	bge.n	800ca98 <scalbn+0x30>
 800cb16:	a10e      	add	r1, pc, #56	; (adr r1, 800cb50 <scalbn+0xe8>)
 800cb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb1c:	e7bc      	b.n	800ca98 <scalbn+0x30>
 800cb1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb22:	3236      	adds	r2, #54	; 0x36
 800cb24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <scalbn+0xf8>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	e7d5      	b.n	800cae0 <scalbn+0x78>
 800cb34:	f3af 8000 	nop.w
 800cb38:	c2f8f359 	.word	0xc2f8f359
 800cb3c:	01a56e1f 	.word	0x01a56e1f
 800cb40:	8800759c 	.word	0x8800759c
 800cb44:	7e37e43c 	.word	0x7e37e43c
 800cb48:	8800759c 	.word	0x8800759c
 800cb4c:	fe37e43c 	.word	0xfe37e43c
 800cb50:	c2f8f359 	.word	0xc2f8f359
 800cb54:	81a56e1f 	.word	0x81a56e1f
 800cb58:	43500000 	.word	0x43500000
 800cb5c:	ffff3cb0 	.word	0xffff3cb0
 800cb60:	3c900000 	.word	0x3c900000

0800cb64 <_init>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr

0800cb70 <_fini>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	bf00      	nop
 800cb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb76:	bc08      	pop	{r3}
 800cb78:	469e      	mov	lr, r3
 800cb7a:	4770      	bx	lr
