
Accel_NewBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db4  08005db4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000080  08005e38  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08005e38  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e599  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002108  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ee  00000000  00000000  00031470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b252  00000000  00000000  00031e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001020a  00000000  00000000  0004d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4530  00000000  00000000  0005d2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003db4  00000000  00000000  001017ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001055a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d08 	.word	0x08005d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005d08 	.word	0x08005d08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000708:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800070c:	f000 b970 	b.w	80009f0 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9e08      	ldr	r6, [sp, #32]
 800072e:	460d      	mov	r5, r1
 8000730:	4604      	mov	r4, r0
 8000732:	460f      	mov	r7, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4694      	mov	ip, r2
 800073c:	d965      	bls.n	800080a <__udivmoddi4+0xe2>
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	b143      	cbz	r3, 8000756 <__udivmoddi4+0x2e>
 8000744:	fa02 fc03 	lsl.w	ip, r2, r3
 8000748:	f1c3 0220 	rsb	r2, r3, #32
 800074c:	409f      	lsls	r7, r3
 800074e:	fa20 f202 	lsr.w	r2, r0, r2
 8000752:	4317      	orrs	r7, r2
 8000754:	409c      	lsls	r4, r3
 8000756:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075a:	fa1f f58c 	uxth.w	r5, ip
 800075e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000762:	0c22      	lsrs	r2, r4, #16
 8000764:	fb0e 7711 	mls	r7, lr, r1, r7
 8000768:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800076c:	fb01 f005 	mul.w	r0, r1, r5
 8000770:	4290      	cmp	r0, r2
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x62>
 8000774:	eb1c 0202 	adds.w	r2, ip, r2
 8000778:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800077c:	f080 811c 	bcs.w	80009b8 <__udivmoddi4+0x290>
 8000780:	4290      	cmp	r0, r2
 8000782:	f240 8119 	bls.w	80009b8 <__udivmoddi4+0x290>
 8000786:	3902      	subs	r1, #2
 8000788:	4462      	add	r2, ip
 800078a:	1a12      	subs	r2, r2, r0
 800078c:	b2a4      	uxth	r4, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079a:	fb00 f505 	mul.w	r5, r0, r5
 800079e:	42a5      	cmp	r5, r4
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x90>
 80007a2:	eb1c 0404 	adds.w	r4, ip, r4
 80007a6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80007aa:	f080 8107 	bcs.w	80009bc <__udivmoddi4+0x294>
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	f240 8104 	bls.w	80009bc <__udivmoddi4+0x294>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	2100      	movs	r1, #0
 80007c0:	b11e      	cbz	r6, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40dc      	lsrs	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0xbc>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f000 80ed 	beq.w	80009b2 <__udivmoddi4+0x28a>
 80007d8:	2100      	movs	r1, #0
 80007da:	e9c6 0500 	strd	r0, r5, [r6]
 80007de:	4608      	mov	r0, r1
 80007e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e4:	fab3 f183 	clz	r1, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d149      	bne.n	8000880 <__udivmoddi4+0x158>
 80007ec:	42ab      	cmp	r3, r5
 80007ee:	d302      	bcc.n	80007f6 <__udivmoddi4+0xce>
 80007f0:	4282      	cmp	r2, r0
 80007f2:	f200 80f8 	bhi.w	80009e6 <__udivmoddi4+0x2be>
 80007f6:	1a84      	subs	r4, r0, r2
 80007f8:	eb65 0203 	sbc.w	r2, r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	4617      	mov	r7, r2
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0e2      	beq.n	80007ca <__udivmoddi4+0xa2>
 8000804:	e9c6 4700 	strd	r4, r7, [r6]
 8000808:	e7df      	b.n	80007ca <__udivmoddi4+0xa2>
 800080a:	b902      	cbnz	r2, 800080e <__udivmoddi4+0xe6>
 800080c:	deff      	udf	#255	; 0xff
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8090 	bne.w	8000938 <__udivmoddi4+0x210>
 8000818:	1a8a      	subs	r2, r1, r2
 800081a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800081e:	fa1f fe8c 	uxth.w	lr, ip
 8000822:	2101      	movs	r1, #1
 8000824:	fbb2 f5f7 	udiv	r5, r2, r7
 8000828:	fb07 2015 	mls	r0, r7, r5, r2
 800082c:	0c22      	lsrs	r2, r4, #16
 800082e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000832:	fb0e f005 	mul.w	r0, lr, r5
 8000836:	4290      	cmp	r0, r2
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x124>
 800083a:	eb1c 0202 	adds.w	r2, ip, r2
 800083e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x122>
 8000844:	4290      	cmp	r0, r2
 8000846:	f200 80cb 	bhi.w	80009e0 <__udivmoddi4+0x2b8>
 800084a:	4645      	mov	r5, r8
 800084c:	1a12      	subs	r2, r2, r0
 800084e:	b2a4      	uxth	r4, r4
 8000850:	fbb2 f0f7 	udiv	r0, r2, r7
 8000854:	fb07 2210 	mls	r2, r7, r0, r2
 8000858:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800085c:	fb0e fe00 	mul.w	lr, lr, r0
 8000860:	45a6      	cmp	lr, r4
 8000862:	d908      	bls.n	8000876 <__udivmoddi4+0x14e>
 8000864:	eb1c 0404 	adds.w	r4, ip, r4
 8000868:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800086c:	d202      	bcs.n	8000874 <__udivmoddi4+0x14c>
 800086e:	45a6      	cmp	lr, r4
 8000870:	f200 80bb 	bhi.w	80009ea <__udivmoddi4+0x2c2>
 8000874:	4610      	mov	r0, r2
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800087e:	e79f      	b.n	80007c0 <__udivmoddi4+0x98>
 8000880:	f1c1 0720 	rsb	r7, r1, #32
 8000884:	408b      	lsls	r3, r1
 8000886:	fa22 fc07 	lsr.w	ip, r2, r7
 800088a:	ea4c 0c03 	orr.w	ip, ip, r3
 800088e:	fa05 f401 	lsl.w	r4, r5, r1
 8000892:	fa20 f307 	lsr.w	r3, r0, r7
 8000896:	40fd      	lsrs	r5, r7
 8000898:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800089c:	4323      	orrs	r3, r4
 800089e:	fbb5 f8f9 	udiv	r8, r5, r9
 80008a2:	fa1f fe8c 	uxth.w	lr, ip
 80008a6:	fb09 5518 	mls	r5, r9, r8, r5
 80008aa:	0c1c      	lsrs	r4, r3, #16
 80008ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008b0:	fb08 f50e 	mul.w	r5, r8, lr
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ba:	fa00 f001 	lsl.w	r0, r0, r1
 80008be:	d90b      	bls.n	80008d8 <__udivmoddi4+0x1b0>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008c8:	f080 8088 	bcs.w	80009dc <__udivmoddi4+0x2b4>
 80008cc:	42a5      	cmp	r5, r4
 80008ce:	f240 8085 	bls.w	80009dc <__udivmoddi4+0x2b4>
 80008d2:	f1a8 0802 	sub.w	r8, r8, #2
 80008d6:	4464      	add	r4, ip
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	b29d      	uxth	r5, r3
 80008dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e0:	fb09 4413 	mls	r4, r9, r3, r4
 80008e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x1da>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80008f8:	d26c      	bcs.n	80009d4 <__udivmoddi4+0x2ac>
 80008fa:	45a6      	cmp	lr, r4
 80008fc:	d96a      	bls.n	80009d4 <__udivmoddi4+0x2ac>
 80008fe:	3b02      	subs	r3, #2
 8000900:	4464      	add	r4, ip
 8000902:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000906:	fba3 9502 	umull	r9, r5, r3, r2
 800090a:	eba4 040e 	sub.w	r4, r4, lr
 800090e:	42ac      	cmp	r4, r5
 8000910:	46c8      	mov	r8, r9
 8000912:	46ae      	mov	lr, r5
 8000914:	d356      	bcc.n	80009c4 <__udivmoddi4+0x29c>
 8000916:	d053      	beq.n	80009c0 <__udivmoddi4+0x298>
 8000918:	b156      	cbz	r6, 8000930 <__udivmoddi4+0x208>
 800091a:	ebb0 0208 	subs.w	r2, r0, r8
 800091e:	eb64 040e 	sbc.w	r4, r4, lr
 8000922:	fa04 f707 	lsl.w	r7, r4, r7
 8000926:	40ca      	lsrs	r2, r1
 8000928:	40cc      	lsrs	r4, r1
 800092a:	4317      	orrs	r7, r2
 800092c:	e9c6 7400 	strd	r7, r4, [r6]
 8000930:	4618      	mov	r0, r3
 8000932:	2100      	movs	r1, #0
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	f1c3 0120 	rsb	r1, r3, #32
 800093c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000940:	fa20 f201 	lsr.w	r2, r0, r1
 8000944:	fa25 f101 	lsr.w	r1, r5, r1
 8000948:	409d      	lsls	r5, r3
 800094a:	432a      	orrs	r2, r5
 800094c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1510 	mls	r5, r7, r0, r1
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000962:	fb00 f50e 	mul.w	r5, r0, lr
 8000966:	428d      	cmp	r5, r1
 8000968:	fa04 f403 	lsl.w	r4, r4, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x258>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000976:	d22f      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 8000978:	428d      	cmp	r5, r1
 800097a:	d92d      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 800097c:	3802      	subs	r0, #2
 800097e:	4461      	add	r1, ip
 8000980:	1b49      	subs	r1, r1, r5
 8000982:	b292      	uxth	r2, r2
 8000984:	fbb1 f5f7 	udiv	r5, r1, r7
 8000988:	fb07 1115 	mls	r1, r7, r5, r1
 800098c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000990:	fb05 f10e 	mul.w	r1, r5, lr
 8000994:	4291      	cmp	r1, r2
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x282>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80009a0:	d216      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 80009a2:	4291      	cmp	r1, r2
 80009a4:	d914      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 80009a6:	3d02      	subs	r5, #2
 80009a8:	4462      	add	r2, ip
 80009aa:	1a52      	subs	r2, r2, r1
 80009ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009b0:	e738      	b.n	8000824 <__udivmoddi4+0xfc>
 80009b2:	4631      	mov	r1, r6
 80009b4:	4630      	mov	r0, r6
 80009b6:	e708      	b.n	80007ca <__udivmoddi4+0xa2>
 80009b8:	4639      	mov	r1, r7
 80009ba:	e6e6      	b.n	800078a <__udivmoddi4+0x62>
 80009bc:	4610      	mov	r0, r2
 80009be:	e6fb      	b.n	80007b8 <__udivmoddi4+0x90>
 80009c0:	4548      	cmp	r0, r9
 80009c2:	d2a9      	bcs.n	8000918 <__udivmoddi4+0x1f0>
 80009c4:	ebb9 0802 	subs.w	r8, r9, r2
 80009c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009cc:	3b01      	subs	r3, #1
 80009ce:	e7a3      	b.n	8000918 <__udivmoddi4+0x1f0>
 80009d0:	4645      	mov	r5, r8
 80009d2:	e7ea      	b.n	80009aa <__udivmoddi4+0x282>
 80009d4:	462b      	mov	r3, r5
 80009d6:	e794      	b.n	8000902 <__udivmoddi4+0x1da>
 80009d8:	4640      	mov	r0, r8
 80009da:	e7d1      	b.n	8000980 <__udivmoddi4+0x258>
 80009dc:	46d0      	mov	r8, sl
 80009de:	e77b      	b.n	80008d8 <__udivmoddi4+0x1b0>
 80009e0:	3d02      	subs	r5, #2
 80009e2:	4462      	add	r2, ip
 80009e4:	e732      	b.n	800084c <__udivmoddi4+0x124>
 80009e6:	4608      	mov	r0, r1
 80009e8:	e70a      	b.n	8000800 <__udivmoddi4+0xd8>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	e742      	b.n	8000876 <__udivmoddi4+0x14e>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <SquareRoot>:
 *
 * \param[in] a_nInput - unsigned integer for which to find the square root
 *
 * \return Integer square root of the input value.
 */
static uint32_t SquareRoot(uint32_t a_nInput) {
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    uint32_t op  = a_nInput;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	617b      	str	r3, [r7, #20]
    uint32_t res = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
    uint32_t one = 1uL << 30; // The second-to-top bit is set: use 1u << 14 for uint16_t type; use 1uL<<30 for uint32_t type
 8000a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a08:	60fb      	str	r3, [r7, #12]

    // "one" starts at the highest power of four <= than the argument.
    while (one > op) {
 8000a0a:	e002      	b.n	8000a12 <SquareRoot+0x1e>
        one >>= 2;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
    while (one > op) {
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d8f8      	bhi.n	8000a0c <SquareRoot+0x18>
    }

    while (one != 0) {
 8000a1a:	e016      	b.n	8000a4a <SquareRoot+0x56>
        if (op >= res + one) {
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d30a      	bcc.n	8000a3e <SquareRoot+0x4a>
            op  = op - (res + one);
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
            res = res +  2 * one;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        }
        res >>= 1;
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
        one >>= 2;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	60fb      	str	r3, [r7, #12]
    while (one != 0) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e5      	bne.n	8000a1c <SquareRoot+0x28>
    }
    return res;
 8000a50:	693b      	ldr	r3, [r7, #16]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	371c      	adds	r7, #28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <get_autocorr_peak_stats>:
//take a look at the original autocorrelation signal at index i and see if
//its a real peak or if its just a fake "noisy" peak corresponding to
//non-walking. basically just count the number of points of the
//autocorrelation peak to the right and left of the peak. this function gets
//the number of points to the right and left of the peak, as well as the delta amplitude
static void get_autocorr_peak_stats(int64_t *autocorr_buff, uint8_t *neg_slope_count, int64_t *delta_amplitude_right, uint8_t *pos_slope_count, int64_t *delta_amplitude_left, uint8_t peak_ind) {
 8000a5e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6178      	str	r0, [r7, #20]
 8000a68:	6139      	str	r1, [r7, #16]
 8000a6a:	60fa      	str	r2, [r7, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]

    //first look to the right of the peak. walk forward until the slope begins decreasing
    uint8_t  neg_slope_ind = peak_ind;
 8000a6e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a72:	77fb      	strb	r3, [r7, #31]
    uint16_t loop_limit    = NUM_AUTOCORR_LAGS-1;
 8000a74:	2331      	movs	r3, #49	; 0x31
 8000a76:	83bb      	strh	r3, [r7, #28]
    while ((autocorr_buff[neg_slope_ind+1] - autocorr_buff[neg_slope_ind] < 0) && (neg_slope_ind < loop_limit)) {
 8000a78:	e008      	b.n	8000a8c <get_autocorr_peak_stats+0x2e>
        *neg_slope_count = *neg_slope_count + 1;
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	701a      	strb	r2, [r3, #0]
        neg_slope_ind    = neg_slope_ind + 1;
 8000a86:	7ffb      	ldrb	r3, [r7, #31]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	77fb      	strb	r3, [r7, #31]
    while ((autocorr_buff[neg_slope_ind+1] - autocorr_buff[neg_slope_ind] < 0) && (neg_slope_ind < loop_limit)) {
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a9a:	7ffb      	ldrb	r3, [r7, #31]
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa6:	1a86      	subs	r6, r0, r2
 8000aa8:	603e      	str	r6, [r7, #0]
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	da04      	bge.n	8000ac0 <get_autocorr_peak_stats+0x62>
 8000ab6:	7ffb      	ldrb	r3, [r7, #31]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	8bba      	ldrh	r2, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8dc      	bhi.n	8000a7a <get_autocorr_peak_stats+0x1c>
    }

    //get the delta amplitude between peak and right trough
    *delta_amplitude_right = autocorr_buff[peak_ind] - autocorr_buff[neg_slope_ind];
 8000ac0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4413      	add	r3, r2
 8000aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ace:	7ffb      	ldrb	r3, [r7, #31]
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ada:	ebb0 0a02 	subs.w	sl, r0, r2
 8000ade:	eb61 0b03 	sbc.w	fp, r1, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	e9c3 ab00 	strd	sl, fp, [r3]

    //next look to the left of the peak. walk backward until the slope begins increasing
    uint8_t pos_slope_ind = peak_ind;
 8000ae8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000aec:	77bb      	strb	r3, [r7, #30]
    loop_limit    = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	83bb      	strh	r3, [r7, #28]
    while ((autocorr_buff[pos_slope_ind] - autocorr_buff[pos_slope_ind-1] > 0) && (pos_slope_ind > loop_limit)) {
 8000af2:	e008      	b.n	8000b06 <get_autocorr_peak_stats+0xa8>
        *pos_slope_count = *pos_slope_count + 1;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	701a      	strb	r2, [r3, #0]
        pos_slope_ind    = pos_slope_ind - 1;
 8000b00:	7fbb      	ldrb	r3, [r7, #30]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	77bb      	strb	r3, [r7, #30]
    while ((autocorr_buff[pos_slope_ind] - autocorr_buff[pos_slope_ind-1] > 0) && (pos_slope_ind > loop_limit)) {
 8000b06:	7fbb      	ldrb	r3, [r7, #30]
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b12:	7fbb      	ldrb	r3, [r7, #30]
 8000b14:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	4413      	add	r3, r2
 8000b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0503 	sbc.w	r5, r1, r3
 8000b2a:	2c01      	cmp	r4, #1
 8000b2c:	f175 0300 	sbcs.w	r3, r5, #0
 8000b30:	db04      	blt.n	8000b3c <get_autocorr_peak_stats+0xde>
 8000b32:	7fbb      	ldrb	r3, [r7, #30]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	8bba      	ldrh	r2, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d3db      	bcc.n	8000af4 <get_autocorr_peak_stats+0x96>
    }

    //get the delta amplitude between the peak and the left trough
    *delta_amplitude_left = autocorr_buff[peak_ind] - autocorr_buff[pos_slope_ind];
 8000b3c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4413      	add	r3, r2
 8000b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b4a:	7fbb      	ldrb	r3, [r7, #30]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b56:	ebb0 0802 	subs.w	r8, r0, r2
 8000b5a:	eb61 0903 	sbc.w	r9, r1, r3
 8000b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b60:	e9c3 8900 	strd	r8, r9, [r3]
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b6e:	4770      	bx	lr

08000b70 <get_precise_peakind>:


//use the original autocorrelation signal to hone in on the
//exact peak index. this corresponds to the point where the points to the
//left and right are less than the current point
static uint8_t get_precise_peakind(int64_t *autocorr_buff, uint8_t peak_ind) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
    uint8_t loop_limit = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
    if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1])) {
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8c:	78f9      	ldrb	r1, [r7, #3]
 8000b8e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8000b92:	3901      	subs	r1, #1
 8000b94:	00c9      	lsls	r1, r1, #3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4401      	add	r1, r0
 8000b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b9e:	4290      	cmp	r0, r2
 8000ba0:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ba4:	da11      	bge.n	8000bca <get_precise_peakind+0x5a>
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	78f9      	ldrb	r1, [r7, #3]
 8000bb4:	3101      	adds	r1, #1
 8000bb6:	00c9      	lsls	r1, r1, #3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	4401      	add	r1, r0
 8000bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	eb71 0303 	sbcs.w	r3, r1, r3
 8000bc6:	f2c0 8087 	blt.w	8000cd8 <get_precise_peakind+0x168>
        //peak_ind is perfectly set at the peak. nothing to do
    }
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	78f9      	ldrb	r1, [r7, #3]
 8000bd8:	3101      	adds	r1, #1
 8000bda:	00c9      	lsls	r1, r1, #3
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	4401      	add	r1, r0
 8000be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000be4:	4290      	cmp	r0, r2
 8000be6:	eb71 0303 	sbcs.w	r3, r1, r3
 8000bea:	da43      	bge.n	8000c74 <get_precise_peakind+0x104>
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	eb71 0303 	sbcs.w	r3, r1, r3
 8000c10:	da30      	bge.n	8000c74 <get_precise_peakind+0x104>
        //peak is to the left. keep moving in that direction
        loop_limit = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1]) && (loop_limit < 10)) {
 8000c16:	e005      	b.n	8000c24 <get_precise_peakind+0xb4>
            peak_ind = peak_ind - 1;
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	70fb      	strb	r3, [r7, #3]
            loop_limit++;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	3301      	adds	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1]) && (loop_limit < 10)) {
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	78f9      	ldrb	r1, [r7, #3]
 8000c32:	3101      	adds	r1, #1
 8000c34:	00c9      	lsls	r1, r1, #3
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	4401      	add	r1, r0
 8000c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c3e:	4290      	cmp	r0, r2
 8000c40:	eb71 0303 	sbcs.w	r3, r1, r3
 8000c44:	da47      	bge.n	8000cd6 <get_precise_peakind+0x166>
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c64:	4290      	cmp	r0, r2
 8000c66:	eb71 0303 	sbcs.w	r3, r1, r3
 8000c6a:	da34      	bge.n	8000cd6 <get_precise_peakind+0x166>
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	d9d2      	bls.n	8000c18 <get_precise_peakind+0xa8>
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 8000c72:	e030      	b.n	8000cd6 <get_precise_peakind+0x166>
        }
    }
    else {
        //peak is to the right. keep moving in that direction
        loop_limit = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind+1]) && (loop_limit < 10)) {
 8000c78:	e005      	b.n	8000c86 <get_precise_peakind+0x116>
            peak_ind = peak_ind + 1;
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	70fb      	strb	r3, [r7, #3]
            loop_limit++;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	3301      	adds	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
        while ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind-1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind+1]) && (loop_limit < 10)) {
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c92:	78f9      	ldrb	r1, [r7, #3]
 8000c94:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8000c98:	3901      	subs	r1, #1
 8000c9a:	00c9      	lsls	r1, r1, #3
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	4401      	add	r1, r0
 8000ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	eb71 0303 	sbcs.w	r3, r1, r3
 8000caa:	da15      	bge.n	8000cd8 <get_precise_peakind+0x168>
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ccc:	da04      	bge.n	8000cd8 <get_precise_peakind+0x168>
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	2b09      	cmp	r3, #9
 8000cd2:	d9d2      	bls.n	8000c7a <get_precise_peakind+0x10a>
 8000cd4:	e000      	b.n	8000cd8 <get_precise_peakind+0x168>
    else if ((autocorr_buff[peak_ind] > autocorr_buff[peak_ind+1]) && (autocorr_buff[peak_ind] < autocorr_buff[peak_ind-1])) {
 8000cd6:	bf00      	nop
        }
    }
    return peak_ind;
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <derivative>:


//calculate deriviative via FIR filter
static void derivative(int64_t *autocorr_buff, int64_t *deriv) {
 8000ce8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]

    uint8_t n          = 0;
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	75f9      	strb	r1, [r7, #23]
    uint8_t i          = 0;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	75b9      	strb	r1, [r7, #22]
    int64_t temp_deriv = 0;
 8000cfc:	f04f 0000 	mov.w	r0, #0
 8000d00:	f04f 0100 	mov.w	r1, #0
 8000d04:	e9c7 0102 	strd	r0, r1, [r7, #8]
    for (n = 0; n < NUM_AUTOCORR_LAGS; n++) {
 8000d08:	2100      	movs	r1, #0
 8000d0a:	75f9      	strb	r1, [r7, #23]
 8000d0c:	e03e      	b.n	8000d8c <derivative+0xa4>
        temp_deriv = 0;
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	f04f 0100 	mov.w	r1, #0
 8000d16:	e9c7 0102 	strd	r0, r1, [r7, #8]
        for (i = 0; i < DERIV_FILT_LEN; i++) {
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	75b9      	strb	r1, [r7, #22]
 8000d1e:	e027      	b.n	8000d70 <derivative+0x88>
            if (n-i >= 0) {     //handle the case when n < filter length
 8000d20:	7df8      	ldrb	r0, [r7, #23]
 8000d22:	7db9      	ldrb	r1, [r7, #22]
 8000d24:	1a41      	subs	r1, r0, r1
 8000d26:	2900      	cmp	r1, #0
 8000d28:	db1f      	blt.n	8000d6a <derivative+0x82>
                temp_deriv += deriv_coeffs[i]*autocorr_buff[n-i];
 8000d2a:	7db9      	ldrb	r1, [r7, #22]
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <derivative+0xb8>)
 8000d2e:	5641      	ldrsb	r1, [r0, r1]
 8000d30:	b249      	sxtb	r1, r1
 8000d32:	17c8      	asrs	r0, r1, #31
 8000d34:	460c      	mov	r4, r1
 8000d36:	4605      	mov	r5, r0
 8000d38:	7df8      	ldrb	r0, [r7, #23]
 8000d3a:	7db9      	ldrb	r1, [r7, #22]
 8000d3c:	1a41      	subs	r1, r0, r1
 8000d3e:	00c9      	lsls	r1, r1, #3
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	4401      	add	r1, r0
 8000d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d48:	fb00 fc05 	mul.w	ip, r0, r5
 8000d4c:	fb04 f601 	mul.w	r6, r4, r1
 8000d50:	4466      	add	r6, ip
 8000d52:	fba4 2300 	umull	r2, r3, r4, r0
 8000d56:	18f1      	adds	r1, r6, r3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d5e:	eb10 0802 	adds.w	r8, r0, r2
 8000d62:	eb41 0903 	adc.w	r9, r1, r3
 8000d66:	e9c7 8902 	strd	r8, r9, [r7, #8]
        for (i = 0; i < DERIV_FILT_LEN; i++) {
 8000d6a:	7db9      	ldrb	r1, [r7, #22]
 8000d6c:	3101      	adds	r1, #1
 8000d6e:	75b9      	strb	r1, [r7, #22]
 8000d70:	7db9      	ldrb	r1, [r7, #22]
 8000d72:	2904      	cmp	r1, #4
 8000d74:	d9d4      	bls.n	8000d20 <derivative+0x38>
            }
        }
        deriv[n] = temp_deriv;
 8000d76:	7df9      	ldrb	r1, [r7, #23]
 8000d78:	00c9      	lsls	r1, r1, #3
 8000d7a:	6838      	ldr	r0, [r7, #0]
 8000d7c:	1846      	adds	r6, r0, r1
 8000d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d82:	e9c6 0100 	strd	r0, r1, [r6]
    for (n = 0; n < NUM_AUTOCORR_LAGS; n++) {
 8000d86:	7df9      	ldrb	r1, [r7, #23]
 8000d88:	3101      	adds	r1, #1
 8000d8a:	75f9      	strb	r1, [r7, #23]
 8000d8c:	7df9      	ldrb	r1, [r7, #23]
 8000d8e:	2931      	cmp	r1, #49	; 0x31
 8000d90:	d9bd      	bls.n	8000d0e <derivative+0x26>
    }
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000d9e:	4770      	bx	lr
 8000da0:	20000000 	.word	0x20000000

08000da4 <autocorr>:


//autocorrelation function
//this takes a lot of computation. there are efficient implementations, but this is more intuitive
static void autocorr(int32_t *lpf, int64_t *autocorr_buff) {
 8000da4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]

    uint8_t lag;
    uint16_t i;
    int64_t temp_ac;
    for (lag = 0; lag < NUM_AUTOCORR_LAGS; lag++) {
 8000db0:	2100      	movs	r1, #0
 8000db2:	75f9      	strb	r1, [r7, #23]
 8000db4:	e03f      	b.n	8000e36 <autocorr+0x92>
        temp_ac = 0;
 8000db6:	f04f 0000 	mov.w	r0, #0
 8000dba:	f04f 0100 	mov.w	r1, #0
 8000dbe:	e9c7 0102 	strd	r0, r1, [r7, #8]
        for (i = 0; i < NUM_TUPLES-lag; i++) {
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	82b9      	strh	r1, [r7, #20]
 8000dc6:	e025      	b.n	8000e14 <autocorr+0x70>
            temp_ac += (int64_t)lpf[i]*(int64_t)lpf[i+lag];
 8000dc8:	8ab9      	ldrh	r1, [r7, #20]
 8000dca:	0089      	lsls	r1, r1, #2
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4401      	add	r1, r0
 8000dd0:	6809      	ldr	r1, [r1, #0]
 8000dd2:	17c8      	asrs	r0, r1, #31
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	4605      	mov	r5, r0
 8000dd8:	8ab8      	ldrh	r0, [r7, #20]
 8000dda:	7df9      	ldrb	r1, [r7, #23]
 8000ddc:	4401      	add	r1, r0
 8000dde:	0089      	lsls	r1, r1, #2
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4401      	add	r1, r0
 8000de4:	6809      	ldr	r1, [r1, #0]
 8000de6:	17c8      	asrs	r0, r1, #31
 8000de8:	4688      	mov	r8, r1
 8000dea:	4681      	mov	r9, r0
 8000dec:	fb08 f005 	mul.w	r0, r8, r5
 8000df0:	fb04 f109 	mul.w	r1, r4, r9
 8000df4:	4401      	add	r1, r0
 8000df6:	fba4 2308 	umull	r2, r3, r4, r8
 8000dfa:	4419      	add	r1, r3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e02:	eb10 0a02 	adds.w	sl, r0, r2
 8000e06:	eb41 0b03 	adc.w	fp, r1, r3
 8000e0a:	e9c7 ab02 	strd	sl, fp, [r7, #8]
        for (i = 0; i < NUM_TUPLES-lag; i++) {
 8000e0e:	8ab9      	ldrh	r1, [r7, #20]
 8000e10:	3101      	adds	r1, #1
 8000e12:	82b9      	strh	r1, [r7, #20]
 8000e14:	8ab8      	ldrh	r0, [r7, #20]
 8000e16:	7df9      	ldrb	r1, [r7, #23]
 8000e18:	f1c1 0150 	rsb	r1, r1, #80	; 0x50
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	dbd3      	blt.n	8000dc8 <autocorr+0x24>
        }
        autocorr_buff[lag] = temp_ac;
 8000e20:	7df9      	ldrb	r1, [r7, #23]
 8000e22:	00c9      	lsls	r1, r1, #3
 8000e24:	6838      	ldr	r0, [r7, #0]
 8000e26:	1846      	adds	r6, r0, r1
 8000e28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e2c:	e9c6 0100 	strd	r0, r1, [r6]
    for (lag = 0; lag < NUM_AUTOCORR_LAGS; lag++) {
 8000e30:	7df9      	ldrb	r1, [r7, #23]
 8000e32:	3101      	adds	r1, #1
 8000e34:	75f9      	strb	r1, [r7, #23]
 8000e36:	7df9      	ldrb	r1, [r7, #23]
 8000e38:	2931      	cmp	r1, #49	; 0x31
 8000e3a:	d9bc      	bls.n	8000db6 <autocorr+0x12>
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e48:	4770      	bx	lr
	...

08000e4c <remove_mean>:


//calculate and remove the mean
static void remove_mean(int32_t *lpf) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

    int32_t sum = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
    uint16_t i;
    for (i = 0; i < NUM_TUPLES; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	817b      	strh	r3, [r7, #10]
 8000e5c:	e00a      	b.n	8000e74 <remove_mean+0x28>
        sum += lpf[i];
 8000e5e:	897b      	ldrh	r3, [r7, #10]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_TUPLES; i++) {
 8000e6e:	897b      	ldrh	r3, [r7, #10]
 8000e70:	3301      	adds	r3, #1
 8000e72:	817b      	strh	r3, [r7, #10]
 8000e74:	897b      	ldrh	r3, [r7, #10]
 8000e76:	2b4f      	cmp	r3, #79	; 0x4f
 8000e78:	d9f1      	bls.n	8000e5e <remove_mean+0x12>
    }
    sum = sum/(NUM_TUPLES);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <remove_mean+0x78>)
 8000e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e82:	1152      	asrs	r2, r2, #5
 8000e84:	17db      	asrs	r3, r3, #31
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < NUM_TUPLES; i++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	817b      	strh	r3, [r7, #10]
 8000e8e:	e00e      	b.n	8000eae <remove_mean+0x62>
        lpf[i] = lpf[i] - sum;
 8000e90:	897b      	ldrh	r3, [r7, #10]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	897b      	ldrh	r3, [r7, #10]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	1a8a      	subs	r2, r1, r2
 8000ea6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_TUPLES; i++) {
 8000ea8:	897b      	ldrh	r3, [r7, #10]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	817b      	strh	r3, [r7, #10]
 8000eae:	897b      	ldrh	r3, [r7, #10]
 8000eb0:	2b4f      	cmp	r3, #79	; 0x4f
 8000eb2:	d9ed      	bls.n	8000e90 <remove_mean+0x44>
    }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	66666667 	.word	0x66666667

08000ec8 <lowpassfilt>:


//FIR low pass filter
static void lowpassfilt(uint8_t *mag_sqrt, int32_t *lpf) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]

    uint16_t n;
    uint8_t i;
    int32_t temp_lpf;
    for (n = 0; n < NUM_TUPLES; n++) {
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	81fb      	strh	r3, [r7, #14]
 8000ed6:	e028      	b.n	8000f2a <lowpassfilt+0x62>
        temp_lpf = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < LPF_FILT_LEN; i++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	737b      	strb	r3, [r7, #13]
 8000ee0:	e017      	b.n	8000f12 <lowpassfilt+0x4a>
            if (n-i >= 0) {     //handle the case when n < filter length
 8000ee2:	89fa      	ldrh	r2, [r7, #14]
 8000ee4:	7b7b      	ldrb	r3, [r7, #13]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0f      	blt.n	8000f0c <lowpassfilt+0x44>
                temp_lpf += (int32_t)lpf_coeffs[i]*(int32_t)mag_sqrt[n-i];
 8000eec:	7b7b      	ldrb	r3, [r7, #13]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <lowpassfilt+0x78>)
 8000ef0:	56d3      	ldrsb	r3, [r2, r3]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	89fa      	ldrh	r2, [r7, #14]
 8000ef6:	7b7b      	ldrb	r3, [r7, #13]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	fb01 f303 	mul.w	r3, r1, r3
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	4413      	add	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < LPF_FILT_LEN; i++) {
 8000f0c:	7b7b      	ldrb	r3, [r7, #13]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	737b      	strb	r3, [r7, #13]
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d9e4      	bls.n	8000ee2 <lowpassfilt+0x1a>
            }
        }
        lpf[n] = temp_lpf;
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	601a      	str	r2, [r3, #0]
    for (n = 0; n < NUM_TUPLES; n++) {
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	3301      	adds	r3, #1
 8000f28:	81fb      	strh	r3, [r7, #14]
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	2b4f      	cmp	r3, #79	; 0x4f
 8000f2e:	d9d3      	bls.n	8000ed8 <lowpassfilt+0x10>
    }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	00000000 	.word	0x00000000

08000f48 <count_steps>:


//algorithm interface
uint8_t count_steps(int8_t *data) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	6078      	str	r0, [r7, #4]
    //assume data is in the format data = [x1,y1,z1,x2,y2,z2...etc]
    //calculate the magnitude of each of triplet ie temp_mag = [x1^2+y1^2+z1^2]
    //then temp_mag = sqrt(temp_mag)
    uint16_t i;
    uint16_t temp_mag;
    for (i = 0; i < NUM_TUPLES; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f54:	e054      	b.n	8001000 <count_steps+0xb8>
        temp_mag = (uint16_t)((uint16_t)data[i*3+0]*(uint16_t)data[i*3+0] + (uint16_t)data[i*3+1]*(uint16_t)data[i*3+1] + (uint16_t)data[i*3+2]*(uint16_t)data[i*3+2]);
 8000f56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	f993 3000 	ldrsb.w	r3, [r3]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	f993 3000 	ldrsb.w	r3, [r3]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	fb11 f303 	smulbb	r3, r1, r3
 8000f82:	b299      	uxth	r1, r3
 8000f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	f993 3000 	ldrsb.w	r3, [r3]
 8000f96:	b298      	uxth	r0, r3
 8000f98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	fb10 f303 	smulbb	r3, r0, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	fb10 f303 	smulbb	r3, r0, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	847b      	strh	r3, [r7, #34]	; 0x22
        mag_sqrt[i] = (uint8_t)SquareRoot(temp_mag);
 8000fe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fd02 	bl	80009f4 <SquareRoot>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ff4:	b2d1      	uxtb	r1, r2
 8000ff6:	4a5a      	ldr	r2, [pc, #360]	; (8001160 <count_steps+0x218>)
 8000ff8:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < NUM_TUPLES; i++) {
 8000ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001002:	2b4f      	cmp	r3, #79	; 0x4f
 8001004:	d9a7      	bls.n	8000f56 <count_steps+0xe>
    }

    //apply low pass filter to mag_sqrt, result is stored in lpf
    lowpassfilt(mag_sqrt, lpf);
 8001006:	4957      	ldr	r1, [pc, #348]	; (8001164 <count_steps+0x21c>)
 8001008:	4855      	ldr	r0, [pc, #340]	; (8001160 <count_steps+0x218>)
 800100a:	f7ff ff5d 	bl	8000ec8 <lowpassfilt>

    //remove mean from lpf, store result in lpf
    remove_mean(lpf);
 800100e:	4855      	ldr	r0, [pc, #340]	; (8001164 <count_steps+0x21c>)
 8001010:	f7ff ff1c 	bl	8000e4c <remove_mean>

    //do the autocorrelation on the lpf buffer, store the result in autocorr_buff
    autocorr(lpf, autocorr_buff);
 8001014:	4954      	ldr	r1, [pc, #336]	; (8001168 <count_steps+0x220>)
 8001016:	4853      	ldr	r0, [pc, #332]	; (8001164 <count_steps+0x21c>)
 8001018:	f7ff fec4 	bl	8000da4 <autocorr>

    //get the derivative of the autocorr_buff, store in deriv
    derivative(autocorr_buff, deriv);
 800101c:	4953      	ldr	r1, [pc, #332]	; (800116c <count_steps+0x224>)
 800101e:	4852      	ldr	r0, [pc, #328]	; (8001168 <count_steps+0x220>)
 8001020:	f7ff fe62 	bl	8000ce8 <derivative>

    //look for first zero crossing where derivative goes from positive to negative. that
    //corresponds to the first positive peak in the autocorrelation. look at two samples
    //instead of just one to maybe reduce the chances of getting tricked by noise
    uint8_t peak_ind = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    //start index is set to 8 lags, which corresponds to a walking rate of 2.5Hz @20Hz sampling rate. its probably
    //running if its faster than this
    for (i = 8; i < NUM_AUTOCORR_LAGS; i++) {
 800102a:	2308      	movs	r3, #8
 800102c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800102e:	e02f      	b.n	8001090 <count_steps+0x148>
        if ((deriv[i] > 0) && (deriv[i-1] > 0) && (deriv[i-2] < 0) && (deriv[i-3] < 0)) {
 8001030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001032:	4a4e      	ldr	r2, [pc, #312]	; (800116c <count_steps+0x224>)
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	2a01      	cmp	r2, #1
 800103e:	f173 0300 	sbcs.w	r3, r3, #0
 8001042:	db22      	blt.n	800108a <count_steps+0x142>
 8001044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001046:	3b01      	subs	r3, #1
 8001048:	4a48      	ldr	r2, [pc, #288]	; (800116c <count_steps+0x224>)
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	2a01      	cmp	r2, #1
 8001054:	f173 0300 	sbcs.w	r3, r3, #0
 8001058:	db17      	blt.n	800108a <count_steps+0x142>
 800105a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800105c:	3b02      	subs	r3, #2
 800105e:	4a43      	ldr	r2, [pc, #268]	; (800116c <count_steps+0x224>)
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	da0e      	bge.n	800108a <count_steps+0x142>
 800106c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800106e:	3b03      	subs	r3, #3
 8001070:	4a3e      	ldr	r2, [pc, #248]	; (800116c <count_steps+0x224>)
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da05      	bge.n	800108a <count_steps+0x142>
            peak_ind = i-1;
 800107e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            break;
 8001088:	e005      	b.n	8001096 <count_steps+0x14e>
    for (i = 8; i < NUM_AUTOCORR_LAGS; i++) {
 800108a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108c:	3301      	adds	r3, #1
 800108e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001092:	2b31      	cmp	r3, #49	; 0x31
 8001094:	d9cc      	bls.n	8001030 <count_steps+0xe8>
        }
    }

    //hone in on the exact peak index
    peak_ind = get_precise_peakind(autocorr_buff, peak_ind);
 8001096:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800109a:	4619      	mov	r1, r3
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <count_steps+0x220>)
 800109e:	f7ff fd67 	bl	8000b70 <get_precise_peakind>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    //printf("peak ind: %i\n", peak_ind);

    //get autocorrelation peak stats
    uint8_t neg_slope_count = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    int64_t delta_amplitude_right = 0;
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint8_t pos_slope_count = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	75fb      	strb	r3, [r7, #23]
    int64_t delta_amplitude_left = 0;
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    get_autocorr_peak_stats(autocorr_buff, &neg_slope_count, &delta_amplitude_right, &pos_slope_count, &delta_amplitude_left, peak_ind);
 80010ca:	f107 0017 	add.w	r0, r7, #23
 80010ce:	f107 0218 	add.w	r2, r7, #24
 80010d2:	f107 0121 	add.w	r1, r7, #33	; 0x21
 80010d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4603      	mov	r3, r0
 80010e4:	4820      	ldr	r0, [pc, #128]	; (8001168 <count_steps+0x220>)
 80010e6:	f7ff fcba 	bl	8000a5e <get_autocorr_peak_stats>

    //now check the conditions to see if it was a real peak or not, and if so, calculate the number of steps
    uint8_t num_steps = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if ((pos_slope_count > AUTOCORR_MIN_HALF_LEN) && (neg_slope_count > AUTOCORR_MIN_HALF_LEN) && (delta_amplitude_right > AUTOCORR_DELTA_AMPLITUDE_THRESH) && (delta_amplitude_left > AUTOCORR_DELTA_AMPLITUDE_THRESH)) {
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d927      	bls.n	8001146 <count_steps+0x1fe>
 80010f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d923      	bls.n	8001146 <count_steps+0x1fe>
 80010fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fa41 	bl	800058c <__aeabi_l2d>
 800110a:	a313      	add	r3, pc, #76	; (adr r3, 8001158 <count_steps+0x210>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fae8 	bl	80006e4 <__aeabi_dcmpgt>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d015      	beq.n	8001146 <count_steps+0x1fe>
 800111a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fa33 	bl	800058c <__aeabi_l2d>
 8001126:	a30c      	add	r3, pc, #48	; (adr r3, 8001158 <count_steps+0x210>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fada 	bl	80006e4 <__aeabi_dcmpgt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <count_steps+0x1fe>
        //the period is peak_ind/sampling_rate seconds. that corresponds to a frequency of 1/period
        //with the frequency known, and the number of seconds is 4 seconds, you can then find out the number of steps
        num_steps = (SAMPLING_RATE*WINDOW_LENGTH)/peak_ind;
 8001136:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800113a:	2250      	movs	r2, #80	; 0x50
 800113c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001140:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001144:	e002      	b.n	800114c <count_steps+0x204>
    } else {
        //not a valid autocorrelation peak
        num_steps = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    }

    //printf("num steps: %i\n", num_steps);
    return num_steps;
 800114c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
}
 8001150:	4618      	mov	r0, r3
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	00000000 	.word	0x00000000
 800115c:	41bdcd65 	.word	0x41bdcd65
 8001160:	2000009c 	.word	0x2000009c
 8001164:	200000ec 	.word	0x200000ec
 8001168:	20000230 	.word	0x20000230
 800116c:	200003c0 	.word	0x200003c0

08001170 <lis3dh_init>:

#define I2C_READ_BIT   (1)
#define I2C_WRITE_BIT  (0)
#define TIMEOUT_MS     (50)

HAL_StatusTypeDef lis3dh_init(lis3dh_t *lis3dh, I2C_HandleTypeDef *i2c, uint8_t *buf, uint16_t bufsize) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	lis3dh->i2c = i2c;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	601a      	str	r2, [r3, #0]
	lis3dh->i2c_addr = LIS3DH_ADDR << 1;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2230      	movs	r2, #48	; 0x30
 8001188:	809a      	strh	r2, [r3, #4]
	lis3dh->buf = buf;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	61da      	str	r2, [r3, #28]
	lis3dh->bufsize = bufsize;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	831a      	strh	r2, [r3, #24]

	/* Let device wake up. */
	HAL_Delay(LID3DH_POWER_UP_MS);
 8001196:	200a      	movs	r0, #10
 8001198:	f000 fe1c 	bl	8001dd4 <HAL_Delay>

	status = HAL_I2C_IsDeviceReady(lis3dh->i2c, lis3dh->i2c_addr, 1, TIMEOUT_MS);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8899      	ldrh	r1, [r3, #4]
 80011a4:	2332      	movs	r3, #50	; 0x32
 80011a6:	2201      	movs	r2, #1
 80011a8:	f001 fb8c 	bl	80028c4 <HAL_I2C_IsDeviceReady>
 80011ac:	4603      	mov	r3, r0
 80011ae:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <lis3dh_init+0x4a>
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	e032      	b.n	8001220 <lis3dh_init+0xb0>

    /* Confirm the device identifies itself as expected. */
	status = lis3dh_read(lis3dh, REG_WHO_AM_I, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	210f      	movs	r1, #15
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f850 	bl	8001264 <lis3dh_read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <lis3dh_init+0x62>
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	e026      	b.n	8001220 <lis3dh_init+0xb0>
	if (lis3dh->buf[0] != LIS3DH_DEVICE_ID) return HAL_ERROR;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b33      	cmp	r3, #51	; 0x33
 80011da:	d001      	beq.n	80011e0 <lis3dh_init+0x70>
 80011dc:	2301      	movs	r3, #1
 80011de:	e01f      	b.n	8001220 <lis3dh_init+0xb0>

	// Set power mode to operational; Enable all axes; Normal operation.
	status = lis3dh_write(lis3dh, REG_CTRL_REG1, DATA_RATE_NORM_1kHz344 | 0x07);
 80011e0:	2297      	movs	r2, #151	; 0x97
 80011e2:	2120      	movs	r1, #32
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f864 	bl	80012b2 <lis3dh_write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <lis3dh_init+0x88>
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	e013      	b.n	8001220 <lis3dh_init+0xb0>

	// High resolution; BDU enabled.
	status = lis3dh_write(lis3dh, REG_CTRL_REG4, 0x88);
 80011f8:	2288      	movs	r2, #136	; 0x88
 80011fa:	2123      	movs	r1, #35	; 0x23
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 f858 	bl	80012b2 <lis3dh_write>
 8001202:	4603      	mov	r3, r0
 8001204:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <lis3dh_init+0xa0>
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	e007      	b.n	8001220 <lis3dh_init+0xb0>

	// Enable temp sensor.
	status = lis3dh_write(lis3dh, REG_TEMP_CFG_REG, 0x80);
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	211f      	movs	r1, #31
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f84c 	bl	80012b2 <lis3dh_write>
 800121a:	4603      	mov	r3, r0
 800121c:	75fb      	strb	r3, [r7, #23]
	return status;
 800121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <lis3dh_xyz_available>:

bool lis3dh_xyz_available(lis3dh_t *lis3dh) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	/*
	 * Read STATUS_REG bit 2 (ZYXDA): New X, Y, Z data available.
	 */
	HAL_StatusTypeDef status;
	status = lis3dh_read(lis3dh, REG_STATUS_REG, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2127      	movs	r1, #39	; 0x27
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f815 	bl	8001264 <lis3dh_read>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return false;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <lis3dh_xyz_available+0x20>
 8001244:	2300      	movs	r3, #0
 8001246:	e009      	b.n	800125c <lis3dh_xyz_available+0x34>

	return (lis3dh->buf[0] & 2) > 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfcc      	ite	gt
 8001256:	2301      	movgt	r3, #1
 8001258:	2300      	movle	r3, #0
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <lis3dh_read>:

HAL_StatusTypeDef lis3dh_read(lis3dh_t* lis3dh, uint16_t reg, uint16_t bufsize) {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b087      	sub	sp, #28
 8001268:	af04      	add	r7, sp, #16
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	803b      	strh	r3, [r7, #0]
	if (bufsize > lis3dh->bufsize) return HAL_ERROR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	8b1b      	ldrh	r3, [r3, #24]
 8001278:	883a      	ldrh	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d901      	bls.n	8001282 <lis3dh_read+0x1e>
 800127e:	2301      	movs	r3, #1
 8001280:	e013      	b.n	80012aa <lis3dh_read+0x46>

	return HAL_I2C_Mem_Read(lis3dh->i2c, lis3dh->i2c_addr | I2C_READ_BIT, reg, 1, lis3dh->buf, bufsize, TIMEOUT_MS);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	b299      	uxth	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	887c      	ldrh	r4, [r7, #2]
 8001296:	2232      	movs	r2, #50	; 0x32
 8001298:	9202      	str	r2, [sp, #8]
 800129a:	883a      	ldrh	r2, [r7, #0]
 800129c:	9201      	str	r2, [sp, #4]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	4622      	mov	r2, r4
 80012a4:	f001 f9f4 	bl	8002690 <HAL_I2C_Mem_Read>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}

080012b2 <lis3dh_write>:

HAL_StatusTypeDef lis3dh_write(lis3dh_t* lis3dh, uint16_t reg, uint8_t data) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af04      	add	r7, sp, #16
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	707b      	strb	r3, [r7, #1]
	return HAL_I2C_Mem_Write(lis3dh->i2c, lis3dh->i2c_addr, reg, 1, &data, 1, TIMEOUT_MS);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	8899      	ldrh	r1, [r3, #4]
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	2332      	movs	r3, #50	; 0x32
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	1c7b      	adds	r3, r7, #1
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	f001 f8c5 	bl	8002468 <HAL_I2C_Mem_Write>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <lis3dh_get_xyz>:

HAL_StatusTypeDef lis3dh_get_xyz(lis3dh_t* lis3dh) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	6078      	str	r0, [r7, #4]
	if (lis3dh->bufsize < 6) return HAL_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	8b1b      	ldrh	r3, [r3, #24]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d801      	bhi.n	80012fc <lis3dh_get_xyz+0x14>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e04b      	b.n	8001394 <lis3dh_get_xyz+0xac>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
			lis3dh->i2c,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6818      	ldr	r0, [r3, #0]
			lis3dh->i2c_addr | I2C_READ_BIT,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	889b      	ldrh	r3, [r3, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	b299      	uxth	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	2232      	movs	r2, #50	; 0x32
 8001310:	9202      	str	r2, [sp, #8]
 8001312:	2206      	movs	r2, #6
 8001314:	9201      	str	r2, [sp, #4]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	22a8      	movs	r2, #168	; 0xa8
 800131c:	f001 f9b8 	bl	8002690 <HAL_I2C_Mem_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
			1,
			lis3dh->buf,
			6,
			TIMEOUT_MS);

	if (status != HAL_OK) {
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00d      	beq.n	8001346 <lis3dh_get_xyz+0x5e>
		lis3dh->x = -1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001330:	609a      	str	r2, [r3, #8]
		lis3dh->y = -1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001338:	60da      	str	r2, [r3, #12]
		lis3dh->z = -1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001340:	611a      	str	r2, [r3, #16]
		return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	e026      	b.n	8001394 <lis3dh_get_xyz+0xac>
	}

	lis3dh->x = (int) (((int8_t) lis3dh->buf[1]) << 8) | lis3dh->buf[0];
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	69d2      	ldr	r2, [r2, #28]
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
	lis3dh->y = (int) (((int8_t) lis3dh->buf[3]) << 8) | lis3dh->buf[2];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	3303      	adds	r3, #3
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b25b      	sxtb	r3, r3
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	69d2      	ldr	r2, [r2, #28]
 800136e:	3202      	adds	r2, #2
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]
	lis3dh->z = (int) (((int8_t) lis3dh->buf[5]) << 8) | lis3dh->buf[4];
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	3305      	adds	r3, #5
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	69d2      	ldr	r2, [r2, #28]
 8001388:	3204      	adds	r2, #4
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]

	return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f000 fc9a 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f96a 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f000 fa28 	bl	8001800 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013b0:	f000 f9b6 	bl	8001720 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013b4:	f000 f9f4 	bl	80017a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status = lis3dh_init(&lis3dh, &hi2c1, xyz_buf, 6);
 80013b8:	2306      	movs	r3, #6
 80013ba:	4a95      	ldr	r2, [pc, #596]	; (8001610 <main+0x274>)
 80013bc:	4995      	ldr	r1, [pc, #596]	; (8001614 <main+0x278>)
 80013be:	4896      	ldr	r0, [pc, #600]	; (8001618 <main+0x27c>)
 80013c0:	f7ff fed6 	bl	8001170 <lis3dh_init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b94      	ldr	r3, [pc, #592]	; (800161c <main+0x280>)
 80013ca:	701a      	strb	r2, [r3, #0]
      }
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
      uint8_t  num_steps  = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f

          	  //printf("test1\r\n");

      	//hold the data from the CSV file in a fifo-like data structure where the accelerometer data looks like
      	    //[x1,y1,z1,x2,y2,z2...x400,y400,z400]
      	    int8_t acc[NUM_SAMPLES_IN_CSV_FILE*3] = {0};
 80013d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80013d6:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	3304      	adds	r3, #4
 80013e0:	f44f 7215 	mov.w	r2, #596	; 0x254
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fe0a 	bl	8005000 <memset>
      	    uint16_t i    = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8a7 336c 	strh.w	r3, [r7, #876]	; 0x36c
      	    float    temp = 0;
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
      	    while(i < NUM_SAMPLES_IN_CSV_FILE*3) //while data array is being filled
 80013fa:	e09f      	b.n	800153c <main+0x1a0>
          	{
      			  HAL_Delay(50); //20Hz
 80013fc:	2032      	movs	r0, #50	; 0x32
 80013fe:	f000 fce9 	bl	8001dd4 <HAL_Delay>
      			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001406:	4886      	ldr	r0, [pc, #536]	; (8001620 <main+0x284>)
 8001408:	f000 ff78 	bl	80022fc <HAL_GPIO_TogglePin>

      			//scaling factor to convert the decimal data to int8 integers. calculated in matlab by taking the absolute value of all the data
      			//and then calculating the max of that data. then divide that by 127 to get the scaling factor
      			  float scale_factor = 55.3293;
 800140c:	4b85      	ldr	r3, [pc, #532]	; (8001624 <main+0x288>)
 800140e:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

  				  if (lis3dh_xyz_available(&lis3dh)) {
 8001412:	4881      	ldr	r0, [pc, #516]	; (8001618 <main+0x27c>)
 8001414:	f7ff ff08 	bl	8001228 <lis3dh_xyz_available>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 808e 	beq.w	800153c <main+0x1a0>
  						status = lis3dh_get_xyz(&lis3dh);
 8001420:	487d      	ldr	r0, [pc, #500]	; (8001618 <main+0x27c>)
 8001422:	f7ff ff61 	bl	80012e8 <lis3dh_get_xyz>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <main+0x280>)
 800142c:	701a      	strb	r2, [r3, #0]
  						float xx = lis3dh.x/16384;
 800142e:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <main+0x27c>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da02      	bge.n	800143c <main+0xa0>
 8001436:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800143a:	333f      	adds	r3, #63	; 0x3f
 800143c:	139b      	asrs	r3, r3, #14
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001446:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
  						float yy = lis3dh.y/16384;
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <main+0x27c>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	da02      	bge.n	8001458 <main+0xbc>
 8001452:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001456:	333f      	adds	r3, #63	; 0x3f
 8001458:	139b      	asrs	r3, r3, #14
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	edc7 7ad5 	vstr	s15, [r7, #852]	; 0x354
  						float zz = lis3dh.z/16384;
 8001466:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <main+0x27c>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da02      	bge.n	8001474 <main+0xd8>
 800146e:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001472:	333f      	adds	r3, #63	; 0x3f
 8001474:	139b      	asrs	r3, r3, #14
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	edc7 7ad4 	vstr	s15, [r7, #848]	; 0x350

  						temp     = roundf(xx*scale_factor);
 8001482:	ed97 7ad6 	vldr	s14, [r7, #856]	; 0x358
 8001486:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	f004 fc15 	bl	8005cc0 <roundf>
 8001496:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364
  						acc[i++] = (int8_t)temp;
 800149a:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	f8a7 236c 	strh.w	r2, [r7, #876]	; 0x36c
 80014a4:	461a      	mov	r2, r3
 80014a6:	edd7 7ad9 	vldr	s15, [r7, #868]	; 0x364
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80014b2:	793b      	ldrb	r3, [r7, #4]
 80014b4:	b259      	sxtb	r1, r3
 80014b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014ba:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80014be:	5499      	strb	r1, [r3, r2]

  						temp     = roundf(yy*scale_factor);
 80014c0:	ed97 7ad5 	vldr	s14, [r7, #852]	; 0x354
 80014c4:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	f004 fbf6 	bl	8005cc0 <roundf>
 80014d4:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364
  						acc[i++] = (int8_t)temp;
 80014d8:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	f8a7 236c 	strh.w	r2, [r7, #876]	; 0x36c
 80014e2:	461a      	mov	r2, r3
 80014e4:	edd7 7ad9 	vldr	s15, [r7, #868]	; 0x364
 80014e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80014f0:	793b      	ldrb	r3, [r7, #4]
 80014f2:	b259      	sxtb	r1, r3
 80014f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014f8:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80014fc:	5499      	strb	r1, [r3, r2]

  						temp     = roundf(zz*scale_factor);
 80014fe:	ed97 7ad4 	vldr	s14, [r7, #848]	; 0x350
 8001502:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8001506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	f004 fbd7 	bl	8005cc0 <roundf>
 8001512:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364
  						acc[i++] = (int8_t)temp;
 8001516:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	f8a7 236c 	strh.w	r2, [r7, #876]	; 0x36c
 8001520:	461a      	mov	r2, r3
 8001522:	edd7 7ad9 	vldr	s15, [r7, #868]	; 0x364
 8001526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152a:	edc7 7a01 	vstr	s15, [r7, #4]
 800152e:	793b      	ldrb	r3, [r7, #4]
 8001530:	b259      	sxtb	r1, r3
 8001532:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001536:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800153a:	5499      	strb	r1, [r3, r2]
      	    while(i < NUM_SAMPLES_IN_CSV_FILE*3) //while data array is being filled
 800153c:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 8001540:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001544:	f4ff af5a 	bcc.w	80013fc <main+0x60>

  					  }

          	  }            /* USER CODE BEGIN 3 */
          	  //pass data to step counting algorithm, 4 seconds at a time (which is the WINDOW_LENGTH). put the data into a temporary buffer each loop
          	      int8_t   data[NUM_TUPLES*3] = {0};
 8001548:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800154c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	3304      	adds	r3, #4
 8001556:	22ec      	movs	r2, #236	; 0xec
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fd50 	bl	8005000 <memset>
          	      uint8_t  num_segments       = NUM_SAMPLES_IN_CSV_FILE/(SAMPLING_RATE*WINDOW_LENGTH);
 8001560:	2302      	movs	r3, #2
 8001562:	f887 3363 	strb.w	r3, [r7, #867]	; 0x363
          	      uint16_t j                  = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a

          	      for (i = 0; i < num_segments; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	f8a7 336c 	strh.w	r3, [r7, #876]	; 0x36c
 8001572:	e03e      	b.n	80015f2 <main+0x256>
          	          for (j = SAMPLING_RATE*WINDOW_LENGTH*i*3; j < SAMPLING_RATE*WINDOW_LENGTH*(i+1)*3; j++) {
 8001574:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 8001578:	461a      	mov	r2, r3
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a
 8001584:	e019      	b.n	80015ba <main+0x21e>
          	              data[j-SAMPLING_RATE*WINDOW_LENGTH*i*3] = acc[j];
 8001586:	f8b7 136a 	ldrh.w	r1, [r7, #874]	; 0x36a
 800158a:	f8b7 036a 	ldrh.w	r0, [r7, #874]	; 0x36a
 800158e:	f8b7 236c 	ldrh.w	r2, [r7, #876]	; 0x36c
 8001592:	4613      	mov	r3, r2
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4403      	add	r3, r0
 800159c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80015a0:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 80015a4:	5651      	ldrsb	r1, [r2, r1]
 80015a6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80015aa:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 80015ae:	54d1      	strb	r1, [r2, r3]
          	          for (j = SAMPLING_RATE*WINDOW_LENGTH*i*3; j < SAMPLING_RATE*WINDOW_LENGTH*(i+1)*3; j++) {
 80015b0:	f8b7 336a 	ldrh.w	r3, [r7, #874]	; 0x36a
 80015b4:	3301      	adds	r3, #1
 80015b6:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a
 80015ba:	f8b7 136a 	ldrh.w	r1, [r7, #874]	; 0x36a
 80015be:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4299      	cmp	r1, r3
 80015ce:	dbda      	blt.n	8001586 <main+0x1ea>
          	          }
          	          num_steps += count_steps(data);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fcb7 	bl	8000f48 <count_steps>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 80015e2:	4413      	add	r3, r2
 80015e4:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
          	      for (i = 0; i < num_segments; i++) {
 80015e8:	f8b7 336c 	ldrh.w	r3, [r7, #876]	; 0x36c
 80015ec:	3301      	adds	r3, #1
 80015ee:	f8a7 336c 	strh.w	r3, [r7, #876]	; 0x36c
 80015f2:	f897 3363 	ldrb.w	r3, [r7, #867]	; 0x363
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f8b7 236c 	ldrh.w	r2, [r7, #876]	; 0x36c
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3b9      	bcc.n	8001574 <main+0x1d8>
          	      }
          	      printf("num steps: %i\n\r", num_steps);
 8001600:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 8001604:	4619      	mov	r1, r3
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <main+0x28c>)
 8001608:	f003 fce8 	bl	8004fdc <iprintf>
            {
 800160c:	e6e1      	b.n	80013d2 <main+0x36>
 800160e:	bf00      	nop
 8001610:	2000062c 	.word	0x2000062c
 8001614:	20000550 	.word	0x20000550
 8001618:	20000634 	.word	0x20000634
 800161c:	20000654 	.word	0x20000654
 8001620:	48000400 	.word	0x48000400
 8001624:	425d5134 	.word	0x425d5134
 8001628:	08005d20 	.word	0x08005d20

0800162c <__io_putchar>:
            }
  /* USER CODE END 3 */
}

int __io_putchar(int ch)
    {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
            HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001634:	1d39      	adds	r1, r7, #4
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163a:	2201      	movs	r2, #1
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <__io_putchar+0x20>)
 800163e:	f002 fe59 	bl	80042f4 <HAL_UART_Transmit>
            return ch;
 8001642:	687b      	ldr	r3, [r7, #4]
    }
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200005a4 	.word	0x200005a4

08001650 <__io_getchar>:
    int __io_getchar(void)
    {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
            uint8_t ch = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	71fb      	strb	r3, [r7, #7]
            __HAL_UART_CLEAR_OREFLAG(&huart2);
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <__io_getchar+0x2c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2208      	movs	r2, #8
 8001660:	621a      	str	r2, [r3, #32]
            HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001662:	1df9      	adds	r1, r7, #7
 8001664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001668:	2201      	movs	r2, #1
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <__io_getchar+0x2c>)
 800166c:	f002 fecc 	bl	8004408 <HAL_UART_Receive>
            return ch;
 8001670:	79fb      	ldrb	r3, [r7, #7]
    }
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200005a4 	.word	0x200005a4

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b096      	sub	sp, #88	; 0x58
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2244      	movs	r2, #68	; 0x44
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fcb6 	bl	8005000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016a6:	f001 fd75 	bl	8003194 <HAL_PWREx_ControlVoltageScaling>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016b0:	f000 f930 	bl	8001914 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016b4:	2310      	movs	r3, #16
 80016b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016c0:	2360      	movs	r3, #96	; 0x60
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016c8:	2301      	movs	r3, #1
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016d0:	2328      	movs	r3, #40	; 0x28
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fdad 	bl	8003240 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80016ec:	f000 f912 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2303      	movs	r3, #3
 80016f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	2104      	movs	r1, #4
 8001708:	4618      	mov	r0, r3
 800170a:	f002 f9fb 	bl	8003b04 <HAL_RCC_ClockConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001714:	f000 f8fe 	bl	8001914 <Error_Handler>
  }
}
 8001718:	bf00      	nop
 800171a:	3758      	adds	r7, #88	; 0x58
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_I2C1_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <MX_I2C1_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_I2C1_Init+0x74>)
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <MX_I2C1_Init+0x7c>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_I2C1_Init+0x74>)
 8001738:	2201      	movs	r2, #1
 800173a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_I2C1_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_I2C1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_I2C1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_I2C1_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <MX_I2C1_Init+0x74>)
 800175c:	f000 fde8 	bl	8002330 <HAL_I2C_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001766:	f000 f8d5 	bl	8001914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <MX_I2C1_Init+0x74>)
 800176e:	f001 fc6b 	bl	8003048 <HAL_I2CEx_ConfigAnalogFilter>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001778:	f000 f8cc 	bl	8001914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_I2C1_Init+0x74>)
 8001780:	f001 fcad 	bl	80030de <HAL_I2CEx_ConfigDigitalFilter>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800178a:	f000 f8c3 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000550 	.word	0x20000550
 8001798:	40005400 	.word	0x40005400
 800179c:	10909cec 	.word	0x10909cec

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART2_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017e4:	f002 fd38 	bl	8004258 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 f891 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200005a4 	.word	0x200005a4
 80017fc:	40004400 	.word	0x40004400

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <MX_GPIO_Init+0x108>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <MX_GPIO_Init+0x108>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <MX_GPIO_Init+0x108>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <MX_GPIO_Init+0x108>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a35      	ldr	r2, [pc, #212]	; (8001908 <MX_GPIO_Init+0x108>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <MX_GPIO_Init+0x108>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <MX_GPIO_Init+0x108>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <MX_GPIO_Init+0x108>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <MX_GPIO_Init+0x108>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <MX_GPIO_Init+0x108>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <MX_GPIO_Init+0x108>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_GPIO_Init+0x108>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	21b0      	movs	r1, #176	; 0xb0
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f000 fd25 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001888:	4820      	ldr	r0, [pc, #128]	; (800190c <MX_GPIO_Init+0x10c>)
 800188a:	f000 fd1f 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001894:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	481a      	ldr	r0, [pc, #104]	; (8001910 <MX_GPIO_Init+0x110>)
 80018a6:	f000 fb9f 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80018aa:	23b0      	movs	r3, #176	; 0xb0
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f000 fb90 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f000 fb83 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80018e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_GPIO_Init+0x10c>)
 80018fc:	f000 fb74 	bl	8001fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400
 8001910:	48000800 	.word	0x48000800

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x44>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x44>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x44>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x44>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x44>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x44>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b096      	sub	sp, #88	; 0x58
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2234      	movs	r2, #52	; 0x34
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fb39 	bl	8005000 <memset>
  if(hi2c->Instance==I2C1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_I2C_MspInit+0xa8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d137      	bne.n	8001a08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fad1 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff ffb0 	bl	8001914 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_I2C_MspInit+0xac>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <HAL_I2C_MspInit+0xac>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_I2C_MspInit+0xac>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 80019cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019de:	2304      	movs	r3, #4
 80019e0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f000 fafc 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_I2C_MspInit+0xac>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_I2C_MspInit+0xac>)
 80019f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_I2C_MspInit+0xac>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3758      	adds	r7, #88	; 0x58
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b096      	sub	sp, #88	; 0x58
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2234      	movs	r2, #52	; 0x34
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fae1 	bl	8005000 <memset>
  if(huart->Instance==USART2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_UART_MspInit+0xa8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d136      	bne.n	8001ab6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fa79 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a60:	f7ff ff58 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a94:	230c      	movs	r3, #12
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f000 fa99 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3758      	adds	r7, #88	; 0x58
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40004400 	.word	0x40004400
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b14:	f000 f93e 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e00a      	b.n	8001b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b2e:	f7ff fd8f 	bl	8001650 <__io_getchar>
 8001b32:	4601      	mov	r1, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	b2ca      	uxtb	r2, r1
 8001b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf0      	blt.n	8001b2e <_read+0x12>
  }

  return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e009      	b.n	8001b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fd5b 	bl	800162c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf1      	blt.n	8001b68 <_write+0x12>
  }
  return len;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_close>:

int _close(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_isatty>:

int _isatty(int file)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f003 f9f2 	bl	8005010 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000a000 	.word	0x2000a000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	20000658 	.word	0x20000658
 8001c60:	200007b0 	.word	0x200007b0

08001c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c8c:	f7ff ffea 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <LoopForever+0xe>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <LoopForever+0x16>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f003 f9b1 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cba:	f7ff fb6f 	bl	800139c <main>

08001cbe <LoopForever>:

LoopForever:
    b LoopForever
 8001cbe:	e7fe      	b.n	8001cbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cc0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ccc:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 8001cd0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001cd4:	200007ac 	.word	0x200007ac

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_Init+0x3c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_Init+0x3c>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f944 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f80f 	bl	8001d1c <HAL_InitTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	e001      	b.n	8001d0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d0a:	f7ff fe09 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_InitTick+0x6c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_InitTick+0x70>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_InitTick+0x6c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f941 	bl	8001fce <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d809      	bhi.n	8001d6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d60:	f000 f919 	bl	8001f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_InitTick+0x74>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e004      	b.n	8001d7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e001      	b.n	8001d7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000001c 	.word	0x2000001c
 8001d8c:	20000014 	.word	0x20000014
 8001d90:	20000018 	.word	0x20000018

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	2000001c 	.word	0x2000001c
 8001db8:	2000065c 	.word	0x2000065c

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2000065c 	.word	0x2000065c

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000001c 	.word	0x2000001c

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f60:	f7ff ff8e 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff47 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa8:	f7ff ff5c 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff8e 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff5d 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffb0 	bl	8001f3c <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	e14e      	b.n	8002296 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8140 	beq.w	8002290 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d005      	beq.n	8002028 <HAL_GPIO_Init+0x40>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d130      	bne.n	800208a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205e:	2201      	movs	r2, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 0201 	and.w	r2, r3, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b03      	cmp	r3, #3
 8002094:	d017      	beq.n	80020c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d123      	bne.n	800211a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0203 	and.w	r2, r3, #3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 809a 	beq.w	8002290 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215c:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	4a54      	ldr	r2, [pc, #336]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6613      	str	r3, [r2, #96]	; 0x60
 8002168:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1e0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_GPIO_Init+0x2d4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1dc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <HAL_GPIO_Init+0x2d8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1d8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a44      	ldr	r2, [pc, #272]	; (80022c4 <HAL_GPIO_Init+0x2dc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1d4>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021bc:	2307      	movs	r3, #7
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021c8:	2300      	movs	r3, #0
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021da:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220c:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002236:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f aea9 	bne.w	8001ff8 <HAL_GPIO_Init+0x10>
  }
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	48000400 	.word	0x48000400
 80022c0:	48000800 	.word	0x48000800
 80022c4:	48000c00 	.word	0x48000c00
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43d9      	mvns	r1, r3
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	400b      	ands	r3, r1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e08d      	b.n	800245e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fb06 	bl	8001968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	e006      	b.n	80023b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d108      	bne.n	80023d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	e007      	b.n	80023e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	f040 80f9 	bne.w	8002682 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_I2C_Mem_Write+0x34>
 8002496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0ed      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Mem_Write+0x4e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0e6      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024be:	f7ff fc7d 	bl	8001dbc <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2319      	movs	r3, #25
 80024ca:	2201      	movs	r2, #1
 80024cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fbcd 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d1      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2221      	movs	r2, #33	; 0x21
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002508:	88f8      	ldrh	r0, [r7, #6]
 800250a:	893a      	ldrh	r2, [r7, #8]
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4603      	mov	r3, r0
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fadd 	bl	8002ad8 <I2C_RequestMemoryWrite>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0a9      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2bff      	cmp	r3, #255	; 0xff
 8002538:	d90e      	bls.n	8002558 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	22ff      	movs	r2, #255	; 0xff
 800253e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	b2da      	uxtb	r2, r3
 8002546:	8979      	ldrh	r1, [r7, #10]
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fd47 	bl	8002fe4 <I2C_TransferConfig>
 8002556:	e00f      	b.n	8002578 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	b2da      	uxtb	r2, r3
 8002568:	8979      	ldrh	r1, [r7, #10]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fd36 	bl	8002fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fbc6 	bl	8002d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e07b      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d034      	beq.n	8002630 <HAL_I2C_Mem_Write+0x1c8>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d130      	bne.n	8002630 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fb49 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e04d      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d90e      	bls.n	8002610 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fceb 	bl	8002fe4 <I2C_TransferConfig>
 800260e:	e00f      	b.n	8002630 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	b2da      	uxtb	r2, r3
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fcda 	bl	8002fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d19e      	bne.n	8002578 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fbac 	bl	8002d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01a      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2220      	movs	r2, #32
 8002654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_I2C_Mem_Write+0x224>)
 8002662:	400b      	ands	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	fe00e800 	.word	0xfe00e800

08002690 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	817b      	strh	r3, [r7, #10]
 80026a2:	460b      	mov	r3, r1
 80026a4:	813b      	strh	r3, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	f040 80fd 	bne.w	80028b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x34>
 80026be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0f1      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x4e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e0ea      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026e6:	f7ff fb69 	bl	8001dbc <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2319      	movs	r3, #25
 80026f2:	2201      	movs	r2, #1
 80026f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fab9 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d5      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2222      	movs	r2, #34	; 0x22
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002730:	88f8      	ldrh	r0, [r7, #6]
 8002732:	893a      	ldrh	r2, [r7, #8]
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4603      	mov	r3, r0
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa1d 	bl	8002b80 <I2C_RequestMemoryRead>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0ad      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d90e      	bls.n	8002780 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	8979      	ldrh	r1, [r7, #10]
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_I2C_Mem_Read+0x22c>)
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fc33 	bl	8002fe4 <I2C_TransferConfig>
 800277e:	e00f      	b.n	80027a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	b2da      	uxtb	r2, r3
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_I2C_Mem_Read+0x22c>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fc22 	bl	8002fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	2200      	movs	r2, #0
 80027a8:	2104      	movs	r1, #4
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fa60 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07c      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d034      	beq.n	8002860 <HAL_I2C_Mem_Read+0x1d0>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d130      	bne.n	8002860 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	2200      	movs	r2, #0
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fa31 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04d      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2bff      	cmp	r3, #255	; 0xff
 8002820:	d90e      	bls.n	8002840 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	22ff      	movs	r2, #255	; 0xff
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	b2da      	uxtb	r2, r3
 800282e:	8979      	ldrh	r1, [r7, #10]
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fbd3 	bl	8002fe4 <I2C_TransferConfig>
 800283e:	e00f      	b.n	8002860 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fbc2 	bl	8002fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d19a      	bne.n	80027a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fa94 	bl	8002d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e01a      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2220      	movs	r2, #32
 8002884:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_I2C_Mem_Read+0x230>)
 8002892:	400b      	ands	r3, r1
 8002894:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	80002400 	.word	0x80002400
 80028c0:	fe00e800 	.word	0xfe00e800

080028c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	f040 80f3 	bne.w	8002acc <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0e9      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_IsDeviceReady+0x44>
 8002904:	2302      	movs	r3, #2
 8002906:	e0e2      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_I2C_IsDeviceReady+0x72>
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002934:	e006      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x80>
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002940:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800294a:	f7ff fa37 	bl	8001dbc <HAL_GetTick>
 800294e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b10      	cmp	r3, #16
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800297c:	e034      	b.n	80029e8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002984:	d01a      	beq.n	80029bc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7ff fa19 	bl	8001dbc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <HAL_I2C_IsDeviceReady+0xd8>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e088      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029e8:	7ffb      	ldrb	r3, [r7, #31]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_I2C_IsDeviceReady+0x130>
 80029ee:	7fbb      	ldrb	r3, [r7, #30]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0c4      	beq.n	800297e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d01a      	beq.n	8002a38 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f92f 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e058      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2220      	movs	r2, #32
 8002a22:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e04a      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2120      	movs	r1, #32
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f914 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e03d      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2210      	movs	r2, #16
 8002a58:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d118      	bne.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a78:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2120      	movs	r1, #32
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f8f3 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e01c      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f63f af39 	bhi.w	800291e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	8979      	ldrh	r1, [r7, #10]
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <I2C_RequestMemoryWrite+0xa4>)
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fa6f 	bl	8002fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	69b9      	ldr	r1, [r7, #24]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f8ff 	bl	8002d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e02c      	b.n	8002b74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
 8002b2a:	e015      	b.n	8002b58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	69b9      	ldr	r1, [r7, #24]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8e5 	bl	8002d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e012      	b.n	8002b74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4e:	893b      	ldrh	r3, [r7, #8]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f884 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	80002000 	.word	0x80002000

08002b80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	817b      	strh	r3, [r7, #10]
 8002b92:	460b      	mov	r3, r1
 8002b94:	813b      	strh	r3, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <I2C_RequestMemoryRead+0xa4>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa1c 	bl	8002fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f8ac 	bl	8002d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e02c      	b.n	8002c1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc6:	893b      	ldrh	r3, [r7, #8]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd0:	e015      	b.n	8002bfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f892 	bl	8002d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e012      	b.n	8002c1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf4:	893b      	ldrh	r3, [r7, #8]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2140      	movs	r1, #64	; 0x40
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f831 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	80002000 	.word	0x80002000

08002c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d007      	beq.n	8002c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	619a      	str	r2, [r3, #24]
  }
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	e031      	b.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d02d      	beq.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7ff f897 	bl	8001dbc <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d122      	bne.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d113      	bne.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	bf0c      	ite	eq
 8002cf6:	2301      	moveq	r3, #1
 8002cf8:	2300      	movne	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d0be      	beq.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1a:	e033      	b.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f87f 	bl	8002e24 <I2C_IsErrorOccurred>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e031      	b.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d36:	d025      	beq.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7ff f840 	bl	8001dbc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11a      	bne.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d013      	beq.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e007      	b.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d1c4      	bne.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da8:	e02f      	b.n	8002e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f838 	bl	8002e24 <I2C_IsErrorOccurred>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e02d      	b.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fe fffd 	bl	8001dbc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11a      	bne.n	8002e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d013      	beq.n	8002e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d1c8      	bne.n	8002daa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d068      	beq.n	8002f22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2210      	movs	r2, #16
 8002e56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e58:	e049      	b.n	8002eee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e60:	d045      	beq.n	8002eee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fe ffab 	bl	8001dbc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_IsErrorOccurred+0x54>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d13a      	bne.n	8002eee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d121      	bne.n	8002ee0 <I2C_IsErrorOccurred+0xbc>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea2:	d01d      	beq.n	8002ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d01a      	beq.n	8002ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eba:	f7fe ff7f 	bl	8001dbc <HAL_GetTick>
 8002ebe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec0:	e00e      	b.n	8002ee0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ec2:	f7fe ff7b 	bl	8001dbc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b19      	cmp	r3, #25
 8002ece:	d907      	bls.n	8002ee0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f043 0320 	orr.w	r3, r3, #32
 8002ed6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ede:	e006      	b.n	8002eee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d1e9      	bne.n	8002ec2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d003      	beq.n	8002f04 <I2C_IsErrorOccurred+0xe0>
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0aa      	beq.n	8002e5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2220      	movs	r2, #32
 8002f12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01c      	beq.n	8002fd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff fe45 	bl	8002c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <I2C_IsErrorOccurred+0x1bc>)
 8002faa:	400b      	ands	r3, r1
 8002fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	fe00e800 	.word	0xfe00e800

08002fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ffc:	7a7b      	ldrb	r3, [r7, #9]
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003004:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	4313      	orrs	r3, r2
 800300e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003012:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	0d5b      	lsrs	r3, r3, #21
 800301e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <I2C_TransferConfig+0x60>)
 8003024:	430b      	orrs	r3, r1
 8003026:	43db      	mvns	r3, r3
 8003028:	ea02 0103 	and.w	r1, r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	03ff63ff 	.word	0x03ff63ff

08003048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b20      	cmp	r3, #32
 800305c:	d138      	bne.n	80030d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003068:	2302      	movs	r3, #2
 800306a:	e032      	b.n	80030d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800309a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d139      	bne.n	8003168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030fe:	2302      	movs	r3, #2
 8003100:	e033      	b.n	800316a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2224      	movs	r2, #36	; 0x24
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_PWREx_GetVoltageRange+0x18>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40007000 	.word	0x40007000

08003194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a2:	d130      	bne.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d038      	beq.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2232      	movs	r2, #50	; 0x32
 80031c8:	fb02 f303 	mul.w	r3, r2, r3
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0c9b      	lsrs	r3, r3, #18
 80031d4:	3301      	adds	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d8:	e002      	b.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3b01      	subs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d102      	bne.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f2      	bne.n	80031da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003200:	d110      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e00f      	b.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d007      	beq.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800321c:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40007000 	.word	0x40007000
 8003238:	20000014 	.word	0x20000014
 800323c:	431bde83 	.word	0x431bde83

08003240 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f000 bc4f 	b.w	8003af2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003254:	4b97      	ldr	r3, [pc, #604]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800325e:	4b95      	ldr	r3, [pc, #596]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80e6 	beq.w	8003442 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_RCC_OscConfig+0x4c>
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	f040 808d 	bne.w	800339e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 8089 	bne.w	800339e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800328c:	4b89      	ldr	r3, [pc, #548]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_RCC_OscConfig+0x66>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f000 bc26 	b.w	8003af2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032aa:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_RCC_OscConfig+0x80>
 80032b6:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032be:	e005      	b.n	80032cc <HAL_RCC_OscConfig+0x8c>
 80032c0:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d224      	bcs.n	800331a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fdd9 	bl	8003e8c <RCC_SetFlashLatencyFromMSIRange>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f000 bc06 	b.w	8003af2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a72      	ldr	r2, [pc, #456]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	496d      	ldr	r1, [pc, #436]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003304:	4b6b      	ldr	r3, [pc, #428]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4968      	ldr	r1, [pc, #416]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e025      	b.n	8003366 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800331a:	4b66      	ldr	r3, [pc, #408]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	4960      	ldr	r1, [pc, #384]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003338:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	495b      	ldr	r1, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fd98 	bl	8003e8c <RCC_SetFlashLatencyFromMSIRange>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e3c5      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003366:	f000 fccd 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4950      	ldr	r1, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0x278>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <HAL_RCC_OscConfig+0x27c>)
 8003384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fcc6 	bl	8001d1c <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d052      	beq.n	8003440 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	e3a9      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d032      	beq.n	800340c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033b2:	f7fe fd03 	bl	8001dbc <HAL_GetTick>
 80033b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ba:	f7fe fcff 	bl	8001dbc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e392      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	4930      	ldr	r1, [pc, #192]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f6:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	492b      	ldr	r1, [pc, #172]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e01a      	b.n	8003442 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003418:	f7fe fcd0 	bl	8001dbc <HAL_GetTick>
 800341c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003420:	f7fe fccc 	bl	8001dbc <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e35f      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x1e0>
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d073      	beq.n	8003536 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d005      	beq.n	8003460 <HAL_RCC_OscConfig+0x220>
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d10e      	bne.n	8003478 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d10b      	bne.n	8003478 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d063      	beq.n	8003534 <HAL_RCC_OscConfig+0x2f4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d15f      	bne.n	8003534 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e33c      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d106      	bne.n	8003490 <HAL_RCC_OscConfig+0x250>
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e025      	b.n	80034dc <HAL_RCC_OscConfig+0x29c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003498:	d114      	bne.n	80034c4 <HAL_RCC_OscConfig+0x284>
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a02      	ldr	r2, [pc, #8]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e013      	b.n	80034dc <HAL_RCC_OscConfig+0x29c>
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08005d30 	.word	0x08005d30
 80034bc:	20000014 	.word	0x20000014
 80034c0:	20000018 	.word	0x20000018
 80034c4:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8e      	ldr	r2, [pc, #568]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b8c      	ldr	r3, [pc, #560]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a8b      	ldr	r2, [pc, #556]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fc6a 	bl	8001dbc <HAL_GetTick>
 80034e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fc66 	bl	8001dbc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e2f9      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fe:	4b81      	ldr	r3, [pc, #516]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x2ac>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fc56 	bl	8001dbc <HAL_GetTick>
 8003510:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe fc52 	bl	8001dbc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e2e5      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003526:	4b77      	ldr	r3, [pc, #476]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x2d4>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d060      	beq.n	8003604 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d005      	beq.n	8003554 <HAL_RCC_OscConfig+0x314>
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d119      	bne.n	8003582 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d116      	bne.n	8003582 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003554:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x32c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e2c2      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b65      	ldr	r3, [pc, #404]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	4962      	ldr	r1, [pc, #392]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	e040      	b.n	8003604 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d023      	beq.n	80035d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358a:	4b5e      	ldr	r3, [pc, #376]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fe fc11 	bl	8001dbc <HAL_GetTick>
 800359a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7fe fc0d 	bl	8001dbc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e2a0      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b0:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b51      	ldr	r3, [pc, #324]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	494e      	ldr	r1, [pc, #312]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	e018      	b.n	8003604 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d2:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe fbed 	bl	8001dbc <HAL_GetTick>
 80035e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe fbe9 	bl	8001dbc <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e27c      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8082 	beq.w	8003716 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d05f      	beq.n	80036da <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003620:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	429a      	cmp	r2, r3
 800362e:	d037      	beq.n	80036a0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e254      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01b      	beq.n	800368a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003658:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003662:	f7fe fbab 	bl	8001dbc <HAL_GetTick>
 8003666:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fe fba7 	bl	8001dbc <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b11      	cmp	r3, #17
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e23a      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ef      	bne.n	800366a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003690:	f023 0210 	bic.w	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	491a      	ldr	r1, [pc, #104]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	4a17      	ldr	r2, [pc, #92]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fe fb84 	bl	8001dbc <HAL_GetTick>
 80036b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fe fb80 	bl	8001dbc <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b11      	cmp	r3, #17
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e213      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x478>
 80036d8:	e01d      	b.n	8003716 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fb67 	bl	8001dbc <HAL_GetTick>
 80036ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fb63 	bl	8001dbc <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b11      	cmp	r3, #17
 80036fe:	d903      	bls.n	8003708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1f6      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
 8003704:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003708:	4ba9      	ldr	r3, [pc, #676]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ed      	bne.n	80036f2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80bd 	beq.w	800389e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800372a:	4ba1      	ldr	r3, [pc, #644]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10e      	bne.n	8003754 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4b9e      	ldr	r3, [pc, #632]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	4a9d      	ldr	r2, [pc, #628]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	6593      	str	r3, [r2, #88]	; 0x58
 8003742:	4b9b      	ldr	r3, [pc, #620]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003754:	4b97      	ldr	r3, [pc, #604]	; (80039b4 <HAL_RCC_OscConfig+0x774>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4b94      	ldr	r3, [pc, #592]	; (80039b4 <HAL_RCC_OscConfig+0x774>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a93      	ldr	r2, [pc, #588]	; (80039b4 <HAL_RCC_OscConfig+0x774>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376c:	f7fe fb26 	bl	8001dbc <HAL_GetTick>
 8003770:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fe fb22 	bl	8001dbc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1b5      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <HAL_RCC_OscConfig+0x774>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800379e:	4b84      	ldr	r3, [pc, #528]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	497f      	ldr	r1, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037c4:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	4a79      	ldr	r2, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037d4:	4b76      	ldr	r3, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	4a75      	ldr	r2, [pc, #468]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e4:	e018      	b.n	8003818 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	4a70      	ldr	r2, [pc, #448]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f6:	e00f      	b.n	8003818 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037f8:	4b6d      	ldr	r3, [pc, #436]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a6c      	ldr	r2, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003808:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a68      	ldr	r2, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe facc 	bl	8001dbc <HAL_GetTick>
 8003824:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe fac8 	bl	8001dbc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e159      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b5c      	ldr	r3, [pc, #368]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ed      	beq.n	8003828 <HAL_RCC_OscConfig+0x5e8>
 800384c:	e01d      	b.n	800388a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe fab5 	bl	8001dbc <HAL_GetTick>
 8003852:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fe fab1 	bl	8001dbc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e142      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ed      	bne.n	8003856 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800387a:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	4a4b      	ldr	r2, [pc, #300]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4a46      	ldr	r2, [pc, #280]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03c      	beq.n	8003924 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01c      	beq.n	80038ec <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80038b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b8:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fe fa7b 	bl	8001dbc <HAL_GetTick>
 80038c6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ca:	f7fe fa77 	bl	8001dbc <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e10a      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80038de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0ef      	beq.n	80038ca <HAL_RCC_OscConfig+0x68a>
 80038ea:	e01b      	b.n	8003924 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80038ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f2:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe fa5e 	bl	8001dbc <HAL_GetTick>
 8003900:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003904:	f7fe fa5a 	bl	8001dbc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0ed      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 8003918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ef      	bne.n	8003904 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80e1 	beq.w	8003af0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	2b02      	cmp	r3, #2
 8003934:	f040 80b5 	bne.w	8003aa2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	429a      	cmp	r2, r3
 800394a:	d124      	bne.n	8003996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	3b01      	subs	r3, #1
 8003958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d11b      	bne.n	8003996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d113      	bne.n	8003996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d109      	bne.n	8003996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d05f      	beq.n	8003a56 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2b0c      	cmp	r3, #12
 800399a:	d05a      	beq.n	8003a52 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a03      	ldr	r2, [pc, #12]	; (80039b0 <HAL_RCC_OscConfig+0x770>)
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a8:	f7fe fa08 	bl	8001dbc <HAL_GetTick>
 80039ac:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	e00c      	b.n	80039ca <HAL_RCC_OscConfig+0x78a>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe fa00 	bl	8001dbc <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e093      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ca:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <HAL_RCC_OscConfig+0x8c0>)
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e6:	3a01      	subs	r2, #1
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f0:	0212      	lsls	r2, r2, #8
 80039f2:	4311      	orrs	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039f8:	0852      	lsrs	r2, r2, #1
 80039fa:	3a01      	subs	r2, #1
 80039fc:	0552      	lsls	r2, r2, #21
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a04:	0852      	lsrs	r2, r2, #1
 8003a06:	3a01      	subs	r2, #1
 8003a08:	0652      	lsls	r2, r2, #25
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	493b      	ldr	r1, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a12:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	4a36      	ldr	r2, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a28:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2a:	f7fe f9c7 	bl	8001dbc <HAL_GetTick>
 8003a2e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe f9c3 	bl	8001dbc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e056      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	e04e      	b.n	8003af0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e04d      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d146      	bne.n	8003af0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a25      	ldr	r2, [pc, #148]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a6e:	4b23      	ldr	r3, [pc, #140]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4a22      	ldr	r2, [pc, #136]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a78:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7a:	f7fe f99f 	bl	8001dbc <HAL_GetTick>
 8003a7e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fe f99b 	bl	8001dbc <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e02e      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x842>
 8003aa0:	e026      	b.n	8003af0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d021      	beq.n	8003aec <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f982 	bl	8001dbc <HAL_GetTick>
 8003ab8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe f97e 	bl	8001dbc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e011      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4a07      	ldr	r2, [pc, #28]	; (8003afc <HAL_RCC_OscConfig+0x8bc>)
 8003ae0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ae4:	f023 0303 	bic.w	r3, r3, #3
 8003ae8:	60d3      	str	r3, [r2, #12]
 8003aea:	e001      	b.n	8003af0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	f99f808c 	.word	0xf99f808c

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0e7      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b75      	ldr	r3, [pc, #468]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b72      	ldr	r3, [pc, #456]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4970      	ldr	r1, [pc, #448]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b6e      	ldr	r3, [pc, #440]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cf      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d908      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b64:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4960      	ldr	r1, [pc, #384]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04c      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8a:	4b5a      	ldr	r3, [pc, #360]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0a6      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d115      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e09a      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bba:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e08e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e086      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4943      	ldr	r1, [pc, #268]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fe f8e6 	bl	8001dbc <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fe f8e2 	bl	8001dbc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	492b      	ldr	r1, [pc, #172]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d210      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	4923      	ldr	r1, [pc, #140]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e036      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4918      	ldr	r1, [pc, #96]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4910      	ldr	r1, [pc, #64]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb8:	f000 f824 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1fc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe f81d 	bl	8001d1c <HAL_InitTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08005d30 	.word	0x08005d30
 8003cfc:	20000014 	.word	0x20000014
 8003d00:	20000018 	.word	0x20000018

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d12:	4b3e      	ldr	r3, [pc, #248]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d11e      	bne.n	8003d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e005      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d102      	bne.n	8003d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e004      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d88:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d134      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0xa6>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d003      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0xac>
 8003da8:	e005      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dac:	617b      	str	r3, [r7, #20]
      break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003db2:	617b      	str	r3, [r7, #20]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	617b      	str	r3, [r7, #20]
      break;
 8003dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	fb03 f202 	mul.w	r2, r3, r2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	0e5b      	lsrs	r3, r3, #25
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	3301      	adds	r3, #1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	; 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08005d48 	.word	0x08005d48
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000014 	.word	0x20000014

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4904      	ldr	r1, [pc, #16]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08005d40 	.word	0x08005d40

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e64:	f7ff ffda 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0adb      	lsrs	r3, r3, #11
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	08005d40 	.word	0x08005d40

08003e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea4:	f7ff f968 	bl	8003178 <HAL_PWREx_GetVoltageRange>
 8003ea8:	6178      	str	r0, [r7, #20]
 8003eaa:	e014      	b.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec4:	f7ff f958 	bl	8003178 <HAL_PWREx_GetVoltageRange>
 8003ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d10b      	bne.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d919      	bls.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ee8:	d902      	bls.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eea:	2302      	movs	r3, #2
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e013      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e010      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d902      	bls.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003efc:	2303      	movs	r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e00a      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d102      	bne.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f08:	2302      	movs	r3, #2
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e004      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d101      	bne.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f14:	2301      	movs	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 0207 	bic.w	r2, r3, #7
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40022000 	.word	0x40022000

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 809e 	beq.w	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f6e:	4b46      	ldr	r3, [pc, #280]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f84:	4b40      	ldr	r3, [pc, #256]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	4a3f      	ldr	r2, [pc, #252]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f90:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a39      	ldr	r2, [pc, #228]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fac:	f7fd ff06 	bl	8001dbc <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fb2:	e009      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb4:	f7fd ff02 	bl	8001dbc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d902      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	74fb      	strb	r3, [r7, #19]
        break;
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ef      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d15a      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01e      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d019      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff6:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004022:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fec2 	bl	8001dbc <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403a:	e00b      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd febe 	bl	8001dbc <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d902      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	74fb      	strb	r3, [r7, #19]
            break;
 8004052:	e006      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ec      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	74bb      	strb	r3, [r7, #18]
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004094:	7c7b      	ldrb	r3, [r7, #17]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b6e      	ldr	r3, [pc, #440]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	4a6d      	ldr	r2, [pc, #436]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b2:	4b68      	ldr	r3, [pc, #416]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f023 0203 	bic.w	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4964      	ldr	r1, [pc, #400]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d4:	4b5f      	ldr	r3, [pc, #380]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f023 020c 	bic.w	r2, r3, #12
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	495c      	ldr	r1, [pc, #368]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f6:	4b57      	ldr	r3, [pc, #348]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4953      	ldr	r1, [pc, #332]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004118:	4b4e      	ldr	r3, [pc, #312]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	494b      	ldr	r1, [pc, #300]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800413a:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4942      	ldr	r1, [pc, #264]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800415c:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	493a      	ldr	r1, [pc, #232]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	4931      	ldr	r1, [pc, #196]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041a0:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4929      	ldr	r1, [pc, #164]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041c2:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	4920      	ldr	r1, [pc, #128]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	4918      	ldr	r1, [pc, #96]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a12      	ldr	r2, [pc, #72]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800420a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	490a      	ldr	r1, [pc, #40]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004248:	7cbb      	ldrb	r3, [r7, #18]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e040      	b.n	80042ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fbcc 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fbd6 	bl	8004a50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f979 	bl	800459c <UART_SetConfig>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e01b      	b.n	80042ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fc55 	bl	8004b94 <UART_CheckIdleState>
 80042ea:	4603      	mov	r3, r0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004308:	2b20      	cmp	r3, #32
 800430a:	d178      	bne.n	80043fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Transmit+0x24>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e071      	b.n	8004400 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2221      	movs	r2, #33	; 0x21
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432a:	f7fd fd47 	bl	8001dbc <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x68>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004364:	e030      	b.n	80043c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fcb7 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e03c      	b.n	8004400 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004398:	b292      	uxth	r2, r2
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3302      	adds	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e008      	b.n	80043b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b292      	uxth	r2, r2
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1c8      	bne.n	8004366 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	2140      	movs	r1, #64	; 0x40
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fc80 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e005      	b.n	8004400 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441e:	2b20      	cmp	r3, #32
 8004420:	f040 80b6 	bne.w	8004590 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Receive+0x28>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0ae      	b.n	8004592 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2222      	movs	r2, #34	; 0x22
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fd fcb7 	bl	8001dbc <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d10e      	bne.n	8004488 <HAL_UART_Receive+0x80>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <HAL_UART_Receive+0x76>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800447c:	e02d      	b.n	80044da <HAL_UART_Receive+0xd2>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	22ff      	movs	r2, #255	; 0xff
 8004482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004486:	e028      	b.n	80044da <HAL_UART_Receive+0xd2>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_UART_Receive+0xa4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <HAL_UART_Receive+0x9a>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	22ff      	movs	r2, #255	; 0xff
 800449c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044a0:	e01b      	b.n	80044da <HAL_UART_Receive+0xd2>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	227f      	movs	r2, #127	; 0x7f
 80044a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044aa:	e016      	b.n	80044da <HAL_UART_Receive+0xd2>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b4:	d10d      	bne.n	80044d2 <HAL_UART_Receive+0xca>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_UART_Receive+0xc0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	227f      	movs	r2, #127	; 0x7f
 80044c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044c6:	e008      	b.n	80044da <HAL_UART_Receive+0xd2>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	223f      	movs	r2, #63	; 0x3f
 80044cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d0:	e003      	b.n	80044da <HAL_UART_Receive+0xd2>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	d108      	bne.n	80044fe <HAL_UART_Receive+0xf6>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	e003      	b.n	8004506 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004506:	e037      	b.n	8004578 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	2120      	movs	r1, #32
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fbe6 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e033      	b.n	8004592 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10c      	bne.n	800454a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004536:	b29a      	uxth	r2, r3
 8004538:	8a7b      	ldrh	r3, [r7, #18]
 800453a:	4013      	ands	r3, r2
 800453c:	b29a      	uxth	r2, r3
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3302      	adds	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e00d      	b.n	8004566 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004550:	b29b      	uxth	r3, r3
 8004552:	b2da      	uxtb	r2, r3
 8004554:	8a7b      	ldrh	r3, [r7, #18]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	4013      	ands	r3, r2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1c1      	bne.n	8004508 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b08a      	sub	sp, #40	; 0x28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b9e      	ldr	r3, [pc, #632]	; (8004844 <UART_SetConfig+0x2a8>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a93      	ldr	r2, [pc, #588]	; (8004848 <UART_SetConfig+0x2ac>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	4313      	orrs	r3, r2
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a8a      	ldr	r2, [pc, #552]	; (800484c <UART_SetConfig+0x2b0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d126      	bne.n	8004674 <UART_SetConfig+0xd8>
 8004626:	4b8a      	ldr	r3, [pc, #552]	; (8004850 <UART_SetConfig+0x2b4>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d81b      	bhi.n	800466c <UART_SetConfig+0xd0>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0xa0>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	0800465d 	.word	0x0800465d
 8004644:	08004655 	.word	0x08004655
 8004648:	08004665 	.word	0x08004665
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e0ab      	b.n	80047ac <UART_SetConfig+0x210>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e0a7      	b.n	80047ac <UART_SetConfig+0x210>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e0a3      	b.n	80047ac <UART_SetConfig+0x210>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e09f      	b.n	80047ac <UART_SetConfig+0x210>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e09b      	b.n	80047ac <UART_SetConfig+0x210>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a76      	ldr	r2, [pc, #472]	; (8004854 <UART_SetConfig+0x2b8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d138      	bne.n	80046f0 <UART_SetConfig+0x154>
 800467e:	4b74      	ldr	r3, [pc, #464]	; (8004850 <UART_SetConfig+0x2b4>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d82d      	bhi.n	80046e8 <UART_SetConfig+0x14c>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0xf8>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046c9 	.word	0x080046c9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046e9 	.word	0x080046e9
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046e9 	.word	0x080046e9
 80046c4:	080046e1 	.word	0x080046e1
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e06d      	b.n	80047ac <UART_SetConfig+0x210>
 80046d0:	2302      	movs	r3, #2
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e069      	b.n	80047ac <UART_SetConfig+0x210>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e065      	b.n	80047ac <UART_SetConfig+0x210>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e061      	b.n	80047ac <UART_SetConfig+0x210>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e05d      	b.n	80047ac <UART_SetConfig+0x210>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a58      	ldr	r2, [pc, #352]	; (8004858 <UART_SetConfig+0x2bc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d125      	bne.n	8004746 <UART_SetConfig+0x1aa>
 80046fa:	4b55      	ldr	r3, [pc, #340]	; (8004850 <UART_SetConfig+0x2b4>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d016      	beq.n	8004736 <UART_SetConfig+0x19a>
 8004708:	2b30      	cmp	r3, #48	; 0x30
 800470a:	d818      	bhi.n	800473e <UART_SetConfig+0x1a2>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d00a      	beq.n	8004726 <UART_SetConfig+0x18a>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d814      	bhi.n	800473e <UART_SetConfig+0x1a2>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <UART_SetConfig+0x182>
 8004718:	2b10      	cmp	r3, #16
 800471a:	d008      	beq.n	800472e <UART_SetConfig+0x192>
 800471c:	e00f      	b.n	800473e <UART_SetConfig+0x1a2>
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004724:	e042      	b.n	80047ac <UART_SetConfig+0x210>
 8004726:	2302      	movs	r3, #2
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472c:	e03e      	b.n	80047ac <UART_SetConfig+0x210>
 800472e:	2304      	movs	r3, #4
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004734:	e03a      	b.n	80047ac <UART_SetConfig+0x210>
 8004736:	2308      	movs	r3, #8
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473c:	e036      	b.n	80047ac <UART_SetConfig+0x210>
 800473e:	2310      	movs	r3, #16
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004744:	e032      	b.n	80047ac <UART_SetConfig+0x210>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3f      	ldr	r2, [pc, #252]	; (8004848 <UART_SetConfig+0x2ac>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d12a      	bne.n	80047a6 <UART_SetConfig+0x20a>
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <UART_SetConfig+0x2b4>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800475a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800475e:	d01a      	beq.n	8004796 <UART_SetConfig+0x1fa>
 8004760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004764:	d81b      	bhi.n	800479e <UART_SetConfig+0x202>
 8004766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476a:	d00c      	beq.n	8004786 <UART_SetConfig+0x1ea>
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004770:	d815      	bhi.n	800479e <UART_SetConfig+0x202>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <UART_SetConfig+0x1e2>
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d008      	beq.n	800478e <UART_SetConfig+0x1f2>
 800477c:	e00f      	b.n	800479e <UART_SetConfig+0x202>
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004784:	e012      	b.n	80047ac <UART_SetConfig+0x210>
 8004786:	2302      	movs	r3, #2
 8004788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478c:	e00e      	b.n	80047ac <UART_SetConfig+0x210>
 800478e:	2304      	movs	r3, #4
 8004790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004794:	e00a      	b.n	80047ac <UART_SetConfig+0x210>
 8004796:	2308      	movs	r3, #8
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479c:	e006      	b.n	80047ac <UART_SetConfig+0x210>
 800479e:	2310      	movs	r3, #16
 80047a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a4:	e002      	b.n	80047ac <UART_SetConfig+0x210>
 80047a6:	2310      	movs	r3, #16
 80047a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a25      	ldr	r2, [pc, #148]	; (8004848 <UART_SetConfig+0x2ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	f040 808a 	bne.w	80048cc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d824      	bhi.n	800480a <UART_SetConfig+0x26e>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0x22c>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	0800480b 	.word	0x0800480b
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	080047fb 	.word	0x080047fb
 80047dc:	0800480b 	.word	0x0800480b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800480b 	.word	0x0800480b
 80047e8:	08004803 	.word	0x08004803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7ff fb22 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 80047f0:	61f8      	str	r0, [r7, #28]
        break;
 80047f2:	e010      	b.n	8004816 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <UART_SetConfig+0x2c0>)
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e00d      	b.n	8004816 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fa:	f7ff fa83 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 80047fe:	61f8      	str	r0, [r7, #28]
        break;
 8004800:	e009      	b.n	8004816 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004806:	61fb      	str	r3, [r7, #28]
        break;
 8004808:	e005      	b.n	8004816 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8109 	beq.w	8004a30 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	429a      	cmp	r2, r3
 800482c:	d305      	bcc.n	800483a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	429a      	cmp	r2, r3
 8004838:	d912      	bls.n	8004860 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004840:	e0f6      	b.n	8004a30 <UART_SetConfig+0x494>
 8004842:	bf00      	nop
 8004844:	efff69f3 	.word	0xefff69f3
 8004848:	40008000 	.word	0x40008000
 800484c:	40013800 	.word	0x40013800
 8004850:	40021000 	.word	0x40021000
 8004854:	40004400 	.word	0x40004400
 8004858:	40004800 	.word	0x40004800
 800485c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2200      	movs	r2, #0
 8004864:	461c      	mov	r4, r3
 8004866:	4615      	mov	r5, r2
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	022b      	lsls	r3, r5, #8
 8004872:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004876:	0222      	lsls	r2, r4, #8
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	6849      	ldr	r1, [r1, #4]
 800487c:	0849      	lsrs	r1, r1, #1
 800487e:	2000      	movs	r0, #0
 8004880:	4688      	mov	r8, r1
 8004882:	4681      	mov	r9, r0
 8004884:	eb12 0a08 	adds.w	sl, r2, r8
 8004888:	eb43 0b09 	adc.w	fp, r3, r9
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800489a:	4650      	mov	r0, sl
 800489c:	4659      	mov	r1, fp
 800489e:	f7fb ff2b 	bl	80006f8 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4613      	mov	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b0:	d308      	bcc.n	80048c4 <UART_SetConfig+0x328>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b8:	d204      	bcs.n	80048c4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	e0b5      	b.n	8004a30 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048ca:	e0b1      	b.n	8004a30 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d4:	d15d      	bne.n	8004992 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80048d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d827      	bhi.n	800492e <UART_SetConfig+0x392>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x348>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004919 	.word	0x08004919
 80048f0:	0800492f 	.word	0x0800492f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800492f 	.word	0x0800492f
 80048fc:	0800492f 	.word	0x0800492f
 8004900:	0800492f 	.word	0x0800492f
 8004904:	08004927 	.word	0x08004927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7ff fa94 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e014      	b.n	800493a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7ff faa6 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8004914:	61f8      	str	r0, [r7, #28]
        break;
 8004916:	e010      	b.n	800493a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004918:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <UART_SetConfig+0x4b0>)
 800491a:	61fb      	str	r3, [r7, #28]
        break;
 800491c:	e00d      	b.n	800493a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491e:	f7ff f9f1 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8004922:	61f8      	str	r0, [r7, #28]
        break;
 8004924:	e009      	b.n	800493a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492a:	61fb      	str	r3, [r7, #28]
        break;
 800492c:	e005      	b.n	800493a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d077      	beq.n	8004a30 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005a      	lsls	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	441a      	add	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b0f      	cmp	r3, #15
 800495a:	d916      	bls.n	800498a <UART_SetConfig+0x3ee>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004962:	d212      	bcs.n	800498a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f023 030f 	bic.w	r3, r3, #15
 800496c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	b29a      	uxth	r2, r3
 800497a:	8afb      	ldrh	r3, [r7, #22]
 800497c:	4313      	orrs	r3, r2
 800497e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	8afa      	ldrh	r2, [r7, #22]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	e052      	b.n	8004a30 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004990:	e04e      	b.n	8004a30 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004996:	2b08      	cmp	r3, #8
 8004998:	d827      	bhi.n	80049ea <UART_SetConfig+0x44e>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0x404>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7ff fa36 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 80049c8:	61f8      	str	r0, [r7, #28]
        break;
 80049ca:	e014      	b.n	80049f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049cc:	f7ff fa48 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 80049d0:	61f8      	str	r0, [r7, #28]
        break;
 80049d2:	e010      	b.n	80049f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d4:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <UART_SetConfig+0x4b0>)
 80049d6:	61fb      	str	r3, [r7, #28]
        break;
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049da:	f7ff f993 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 80049de:	61f8      	str	r0, [r7, #28]
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	61fb      	str	r3, [r7, #28]
        break;
 80049e8:	e005      	b.n	80049f6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049f4:	bf00      	nop
    }

    if (pclk != 0U)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d019      	beq.n	8004a30 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	085a      	lsrs	r2, r3, #1
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	d909      	bls.n	8004a2a <UART_SetConfig+0x48e>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d205      	bcs.n	8004a2a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e002      	b.n	8004a30 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4a:	bf00      	nop
 8004a4c:	00f42400 	.word	0x00f42400

08004a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01a      	beq.n	8004b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4e:	d10a      	bne.n	8004b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b098      	sub	sp, #96	; 0x60
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba4:	f7fd f90a 	bl	8001dbc <HAL_GetTick>
 8004ba8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d12e      	bne.n	8004c16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f88c 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d021      	beq.n	8004c16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be6:	653b      	str	r3, [r7, #80]	; 0x50
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e062      	b.n	8004cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d149      	bne.n	8004cb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f856 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d03c      	beq.n	8004cb8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e6      	bne.n	8004c3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c90:	61fa      	str	r2, [r7, #28]
 8004c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e011      	b.n	8004cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3758      	adds	r7, #88	; 0x58
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf4:	e049      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfc:	d045      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7fd f85d 	bl	8001dbc <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e048      	b.n	8004daa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d031      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d110      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f838 	bl	8004db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2208      	movs	r2, #8
 8004d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e029      	b.n	8004daa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	d111      	bne.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f81e 	bl	8004db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00f      	b.n	8004daa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d0a6      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b095      	sub	sp, #84	; 0x54
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e6      	bne.n	8004dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d118      	bne.n	8004e5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f023 0310 	bic.w	r3, r3, #16
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	613b      	str	r3, [r7, #16]
   return(result);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e6      	bne.n	8004e28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e6e:	bf00      	nop
 8004e70:	3754      	adds	r7, #84	; 0x54
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <std>:
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	e9c0 3300 	strd	r3, r3, [r0]
 8004e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e8a:	6083      	str	r3, [r0, #8]
 8004e8c:	8181      	strh	r1, [r0, #12]
 8004e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e90:	81c2      	strh	r2, [r0, #14]
 8004e92:	6183      	str	r3, [r0, #24]
 8004e94:	4619      	mov	r1, r3
 8004e96:	2208      	movs	r2, #8
 8004e98:	305c      	adds	r0, #92	; 0x5c
 8004e9a:	f000 f8b1 	bl	8005000 <memset>
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <std+0x38>)
 8004ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <std+0x3c>)
 8004ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <std+0x40>)
 8004ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <std+0x44>)
 8004eac:	6224      	str	r4, [r4, #32]
 8004eae:	6323      	str	r3, [r4, #48]	; 0x30
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	bf00      	nop
 8004eb4:	080058c5 	.word	0x080058c5
 8004eb8:	080058e7 	.word	0x080058e7
 8004ebc:	0800591f 	.word	0x0800591f
 8004ec0:	08005943 	.word	0x08005943

08004ec4 <stdio_exit_handler>:
 8004ec4:	4a02      	ldr	r2, [pc, #8]	; (8004ed0 <stdio_exit_handler+0xc>)
 8004ec6:	4903      	ldr	r1, [pc, #12]	; (8004ed4 <stdio_exit_handler+0x10>)
 8004ec8:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <stdio_exit_handler+0x14>)
 8004eca:	f000 b869 	b.w	8004fa0 <_fwalk_sglue>
 8004ece:	bf00      	nop
 8004ed0:	20000020 	.word	0x20000020
 8004ed4:	0800585d 	.word	0x0800585d
 8004ed8:	2000002c 	.word	0x2000002c

08004edc <cleanup_stdio>:
 8004edc:	6841      	ldr	r1, [r0, #4]
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <cleanup_stdio+0x34>)
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	b510      	push	{r4, lr}
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	d001      	beq.n	8004eec <cleanup_stdio+0x10>
 8004ee8:	f000 fcb8 	bl	800585c <_fflush_r>
 8004eec:	68a1      	ldr	r1, [r4, #8]
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <cleanup_stdio+0x38>)
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	d002      	beq.n	8004efa <cleanup_stdio+0x1e>
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 fcb1 	bl	800585c <_fflush_r>
 8004efa:	68e1      	ldr	r1, [r4, #12]
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <cleanup_stdio+0x3c>)
 8004efe:	4299      	cmp	r1, r3
 8004f00:	d004      	beq.n	8004f0c <cleanup_stdio+0x30>
 8004f02:	4620      	mov	r0, r4
 8004f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f08:	f000 bca8 	b.w	800585c <_fflush_r>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000660 	.word	0x20000660
 8004f14:	200006c8 	.word	0x200006c8
 8004f18:	20000730 	.word	0x20000730

08004f1c <global_stdio_init.part.0>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <global_stdio_init.part.0+0x30>)
 8004f20:	4c0b      	ldr	r4, [pc, #44]	; (8004f50 <global_stdio_init.part.0+0x34>)
 8004f22:	4a0c      	ldr	r2, [pc, #48]	; (8004f54 <global_stdio_init.part.0+0x38>)
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	4620      	mov	r0, r4
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	f7ff ffa6 	bl	8004e7c <std>
 8004f30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f34:	2201      	movs	r2, #1
 8004f36:	2109      	movs	r1, #9
 8004f38:	f7ff ffa0 	bl	8004e7c <std>
 8004f3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f40:	2202      	movs	r2, #2
 8004f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f46:	2112      	movs	r1, #18
 8004f48:	f7ff bf98 	b.w	8004e7c <std>
 8004f4c:	20000798 	.word	0x20000798
 8004f50:	20000660 	.word	0x20000660
 8004f54:	08004ec5 	.word	0x08004ec5

08004f58 <__sfp_lock_acquire>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__sfp_lock_acquire+0x8>)
 8004f5a:	f000 b883 	b.w	8005064 <__retarget_lock_acquire_recursive>
 8004f5e:	bf00      	nop
 8004f60:	2000079d 	.word	0x2000079d

08004f64 <__sfp_lock_release>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__sfp_lock_release+0x8>)
 8004f66:	f000 b87e 	b.w	8005066 <__retarget_lock_release_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	2000079d 	.word	0x2000079d

08004f70 <__sinit>:
 8004f70:	b510      	push	{r4, lr}
 8004f72:	4604      	mov	r4, r0
 8004f74:	f7ff fff0 	bl	8004f58 <__sfp_lock_acquire>
 8004f78:	6a23      	ldr	r3, [r4, #32]
 8004f7a:	b11b      	cbz	r3, 8004f84 <__sinit+0x14>
 8004f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f80:	f7ff bff0 	b.w	8004f64 <__sfp_lock_release>
 8004f84:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <__sinit+0x28>)
 8004f86:	6223      	str	r3, [r4, #32]
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <__sinit+0x2c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f5      	bne.n	8004f7c <__sinit+0xc>
 8004f90:	f7ff ffc4 	bl	8004f1c <global_stdio_init.part.0>
 8004f94:	e7f2      	b.n	8004f7c <__sinit+0xc>
 8004f96:	bf00      	nop
 8004f98:	08004edd 	.word	0x08004edd
 8004f9c:	20000798 	.word	0x20000798

08004fa0 <_fwalk_sglue>:
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	4688      	mov	r8, r1
 8004fa8:	4614      	mov	r4, r2
 8004faa:	2600      	movs	r6, #0
 8004fac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fb0:	f1b9 0901 	subs.w	r9, r9, #1
 8004fb4:	d505      	bpl.n	8004fc2 <_fwalk_sglue+0x22>
 8004fb6:	6824      	ldr	r4, [r4, #0]
 8004fb8:	2c00      	cmp	r4, #0
 8004fba:	d1f7      	bne.n	8004fac <_fwalk_sglue+0xc>
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc2:	89ab      	ldrh	r3, [r5, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d907      	bls.n	8004fd8 <_fwalk_sglue+0x38>
 8004fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	d003      	beq.n	8004fd8 <_fwalk_sglue+0x38>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	47c0      	blx	r8
 8004fd6:	4306      	orrs	r6, r0
 8004fd8:	3568      	adds	r5, #104	; 0x68
 8004fda:	e7e9      	b.n	8004fb0 <_fwalk_sglue+0x10>

08004fdc <iprintf>:
 8004fdc:	b40f      	push	{r0, r1, r2, r3}
 8004fde:	b507      	push	{r0, r1, r2, lr}
 8004fe0:	4906      	ldr	r1, [pc, #24]	; (8004ffc <iprintf+0x20>)
 8004fe2:	ab04      	add	r3, sp, #16
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fea:	6881      	ldr	r1, [r0, #8]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	f000 f865 	bl	80050bc <_vfiprintf_r>
 8004ff2:	b003      	add	sp, #12
 8004ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff8:	b004      	add	sp, #16
 8004ffa:	4770      	bx	lr
 8004ffc:	20000078 	.word	0x20000078

08005000 <memset>:
 8005000:	4402      	add	r2, r0
 8005002:	4603      	mov	r3, r0
 8005004:	4293      	cmp	r3, r2
 8005006:	d100      	bne.n	800500a <memset+0xa>
 8005008:	4770      	bx	lr
 800500a:	f803 1b01 	strb.w	r1, [r3], #1
 800500e:	e7f9      	b.n	8005004 <memset+0x4>

08005010 <__errno>:
 8005010:	4b01      	ldr	r3, [pc, #4]	; (8005018 <__errno+0x8>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000078 	.word	0x20000078

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4d0d      	ldr	r5, [pc, #52]	; (8005054 <__libc_init_array+0x38>)
 8005020:	4c0d      	ldr	r4, [pc, #52]	; (8005058 <__libc_init_array+0x3c>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	2600      	movs	r6, #0
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	4d0b      	ldr	r5, [pc, #44]	; (800505c <__libc_init_array+0x40>)
 800502e:	4c0c      	ldr	r4, [pc, #48]	; (8005060 <__libc_init_array+0x44>)
 8005030:	f000 fe6a 	bl	8005d08 <_init>
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	2600      	movs	r6, #0
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	08005db4 	.word	0x08005db4
 8005058:	08005db4 	.word	0x08005db4
 800505c:	08005db4 	.word	0x08005db4
 8005060:	08005db8 	.word	0x08005db8

08005064 <__retarget_lock_acquire_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_release_recursive>:
 8005066:	4770      	bx	lr

08005068 <__sfputc_r>:
 8005068:	6893      	ldr	r3, [r2, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	b410      	push	{r4}
 8005070:	6093      	str	r3, [r2, #8]
 8005072:	da08      	bge.n	8005086 <__sfputc_r+0x1e>
 8005074:	6994      	ldr	r4, [r2, #24]
 8005076:	42a3      	cmp	r3, r4
 8005078:	db01      	blt.n	800507e <__sfputc_r+0x16>
 800507a:	290a      	cmp	r1, #10
 800507c:	d103      	bne.n	8005086 <__sfputc_r+0x1e>
 800507e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005082:	f000 bc62 	b.w	800594a <__swbuf_r>
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	1c58      	adds	r0, r3, #1
 800508a:	6010      	str	r0, [r2, #0]
 800508c:	7019      	strb	r1, [r3, #0]
 800508e:	4608      	mov	r0, r1
 8005090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005094:	4770      	bx	lr

08005096 <__sfputs_r>:
 8005096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005098:	4606      	mov	r6, r0
 800509a:	460f      	mov	r7, r1
 800509c:	4614      	mov	r4, r2
 800509e:	18d5      	adds	r5, r2, r3
 80050a0:	42ac      	cmp	r4, r5
 80050a2:	d101      	bne.n	80050a8 <__sfputs_r+0x12>
 80050a4:	2000      	movs	r0, #0
 80050a6:	e007      	b.n	80050b8 <__sfputs_r+0x22>
 80050a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ac:	463a      	mov	r2, r7
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ffda 	bl	8005068 <__sfputc_r>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d1f3      	bne.n	80050a0 <__sfputs_r+0xa>
 80050b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050bc <_vfiprintf_r>:
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	460d      	mov	r5, r1
 80050c2:	b09d      	sub	sp, #116	; 0x74
 80050c4:	4614      	mov	r4, r2
 80050c6:	4698      	mov	r8, r3
 80050c8:	4606      	mov	r6, r0
 80050ca:	b118      	cbz	r0, 80050d4 <_vfiprintf_r+0x18>
 80050cc:	6a03      	ldr	r3, [r0, #32]
 80050ce:	b90b      	cbnz	r3, 80050d4 <_vfiprintf_r+0x18>
 80050d0:	f7ff ff4e 	bl	8004f70 <__sinit>
 80050d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050d6:	07d9      	lsls	r1, r3, #31
 80050d8:	d405      	bmi.n	80050e6 <_vfiprintf_r+0x2a>
 80050da:	89ab      	ldrh	r3, [r5, #12]
 80050dc:	059a      	lsls	r2, r3, #22
 80050de:	d402      	bmi.n	80050e6 <_vfiprintf_r+0x2a>
 80050e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e2:	f7ff ffbf 	bl	8005064 <__retarget_lock_acquire_recursive>
 80050e6:	89ab      	ldrh	r3, [r5, #12]
 80050e8:	071b      	lsls	r3, r3, #28
 80050ea:	d501      	bpl.n	80050f0 <_vfiprintf_r+0x34>
 80050ec:	692b      	ldr	r3, [r5, #16]
 80050ee:	b99b      	cbnz	r3, 8005118 <_vfiprintf_r+0x5c>
 80050f0:	4629      	mov	r1, r5
 80050f2:	4630      	mov	r0, r6
 80050f4:	f000 fc66 	bl	80059c4 <__swsetup_r>
 80050f8:	b170      	cbz	r0, 8005118 <_vfiprintf_r+0x5c>
 80050fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050fc:	07dc      	lsls	r4, r3, #31
 80050fe:	d504      	bpl.n	800510a <_vfiprintf_r+0x4e>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005104:	b01d      	add	sp, #116	; 0x74
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510a:	89ab      	ldrh	r3, [r5, #12]
 800510c:	0598      	lsls	r0, r3, #22
 800510e:	d4f7      	bmi.n	8005100 <_vfiprintf_r+0x44>
 8005110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005112:	f7ff ffa8 	bl	8005066 <__retarget_lock_release_recursive>
 8005116:	e7f3      	b.n	8005100 <_vfiprintf_r+0x44>
 8005118:	2300      	movs	r3, #0
 800511a:	9309      	str	r3, [sp, #36]	; 0x24
 800511c:	2320      	movs	r3, #32
 800511e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005122:	f8cd 800c 	str.w	r8, [sp, #12]
 8005126:	2330      	movs	r3, #48	; 0x30
 8005128:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80052dc <_vfiprintf_r+0x220>
 800512c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005130:	f04f 0901 	mov.w	r9, #1
 8005134:	4623      	mov	r3, r4
 8005136:	469a      	mov	sl, r3
 8005138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800513c:	b10a      	cbz	r2, 8005142 <_vfiprintf_r+0x86>
 800513e:	2a25      	cmp	r2, #37	; 0x25
 8005140:	d1f9      	bne.n	8005136 <_vfiprintf_r+0x7a>
 8005142:	ebba 0b04 	subs.w	fp, sl, r4
 8005146:	d00b      	beq.n	8005160 <_vfiprintf_r+0xa4>
 8005148:	465b      	mov	r3, fp
 800514a:	4622      	mov	r2, r4
 800514c:	4629      	mov	r1, r5
 800514e:	4630      	mov	r0, r6
 8005150:	f7ff ffa1 	bl	8005096 <__sfputs_r>
 8005154:	3001      	adds	r0, #1
 8005156:	f000 80a9 	beq.w	80052ac <_vfiprintf_r+0x1f0>
 800515a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800515c:	445a      	add	r2, fp
 800515e:	9209      	str	r2, [sp, #36]	; 0x24
 8005160:	f89a 3000 	ldrb.w	r3, [sl]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80a1 	beq.w	80052ac <_vfiprintf_r+0x1f0>
 800516a:	2300      	movs	r3, #0
 800516c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005174:	f10a 0a01 	add.w	sl, sl, #1
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	9307      	str	r3, [sp, #28]
 800517c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005180:	931a      	str	r3, [sp, #104]	; 0x68
 8005182:	4654      	mov	r4, sl
 8005184:	2205      	movs	r2, #5
 8005186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518a:	4854      	ldr	r0, [pc, #336]	; (80052dc <_vfiprintf_r+0x220>)
 800518c:	f7fb f820 	bl	80001d0 <memchr>
 8005190:	9a04      	ldr	r2, [sp, #16]
 8005192:	b9d8      	cbnz	r0, 80051cc <_vfiprintf_r+0x110>
 8005194:	06d1      	lsls	r1, r2, #27
 8005196:	bf44      	itt	mi
 8005198:	2320      	movmi	r3, #32
 800519a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800519e:	0713      	lsls	r3, r2, #28
 80051a0:	bf44      	itt	mi
 80051a2:	232b      	movmi	r3, #43	; 0x2b
 80051a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051a8:	f89a 3000 	ldrb.w	r3, [sl]
 80051ac:	2b2a      	cmp	r3, #42	; 0x2a
 80051ae:	d015      	beq.n	80051dc <_vfiprintf_r+0x120>
 80051b0:	9a07      	ldr	r2, [sp, #28]
 80051b2:	4654      	mov	r4, sl
 80051b4:	2000      	movs	r0, #0
 80051b6:	f04f 0c0a 	mov.w	ip, #10
 80051ba:	4621      	mov	r1, r4
 80051bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c0:	3b30      	subs	r3, #48	; 0x30
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	d94d      	bls.n	8005262 <_vfiprintf_r+0x1a6>
 80051c6:	b1b0      	cbz	r0, 80051f6 <_vfiprintf_r+0x13a>
 80051c8:	9207      	str	r2, [sp, #28]
 80051ca:	e014      	b.n	80051f6 <_vfiprintf_r+0x13a>
 80051cc:	eba0 0308 	sub.w	r3, r0, r8
 80051d0:	fa09 f303 	lsl.w	r3, r9, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	46a2      	mov	sl, r4
 80051da:	e7d2      	b.n	8005182 <_vfiprintf_r+0xc6>
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	1d19      	adds	r1, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	9103      	str	r1, [sp, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bfbb      	ittet	lt
 80051e8:	425b      	neglt	r3, r3
 80051ea:	f042 0202 	orrlt.w	r2, r2, #2
 80051ee:	9307      	strge	r3, [sp, #28]
 80051f0:	9307      	strlt	r3, [sp, #28]
 80051f2:	bfb8      	it	lt
 80051f4:	9204      	strlt	r2, [sp, #16]
 80051f6:	7823      	ldrb	r3, [r4, #0]
 80051f8:	2b2e      	cmp	r3, #46	; 0x2e
 80051fa:	d10c      	bne.n	8005216 <_vfiprintf_r+0x15a>
 80051fc:	7863      	ldrb	r3, [r4, #1]
 80051fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005200:	d134      	bne.n	800526c <_vfiprintf_r+0x1b0>
 8005202:	9b03      	ldr	r3, [sp, #12]
 8005204:	1d1a      	adds	r2, r3, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	9203      	str	r2, [sp, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	bfb8      	it	lt
 800520e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005212:	3402      	adds	r4, #2
 8005214:	9305      	str	r3, [sp, #20]
 8005216:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80052ec <_vfiprintf_r+0x230>
 800521a:	7821      	ldrb	r1, [r4, #0]
 800521c:	2203      	movs	r2, #3
 800521e:	4650      	mov	r0, sl
 8005220:	f7fa ffd6 	bl	80001d0 <memchr>
 8005224:	b138      	cbz	r0, 8005236 <_vfiprintf_r+0x17a>
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	eba0 000a 	sub.w	r0, r0, sl
 800522c:	2240      	movs	r2, #64	; 0x40
 800522e:	4082      	lsls	r2, r0
 8005230:	4313      	orrs	r3, r2
 8005232:	3401      	adds	r4, #1
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523a:	4829      	ldr	r0, [pc, #164]	; (80052e0 <_vfiprintf_r+0x224>)
 800523c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005240:	2206      	movs	r2, #6
 8005242:	f7fa ffc5 	bl	80001d0 <memchr>
 8005246:	2800      	cmp	r0, #0
 8005248:	d03f      	beq.n	80052ca <_vfiprintf_r+0x20e>
 800524a:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <_vfiprintf_r+0x228>)
 800524c:	bb1b      	cbnz	r3, 8005296 <_vfiprintf_r+0x1da>
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	3307      	adds	r3, #7
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	3308      	adds	r3, #8
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525c:	443b      	add	r3, r7
 800525e:	9309      	str	r3, [sp, #36]	; 0x24
 8005260:	e768      	b.n	8005134 <_vfiprintf_r+0x78>
 8005262:	fb0c 3202 	mla	r2, ip, r2, r3
 8005266:	460c      	mov	r4, r1
 8005268:	2001      	movs	r0, #1
 800526a:	e7a6      	b.n	80051ba <_vfiprintf_r+0xfe>
 800526c:	2300      	movs	r3, #0
 800526e:	3401      	adds	r4, #1
 8005270:	9305      	str	r3, [sp, #20]
 8005272:	4619      	mov	r1, r3
 8005274:	f04f 0c0a 	mov.w	ip, #10
 8005278:	4620      	mov	r0, r4
 800527a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800527e:	3a30      	subs	r2, #48	; 0x30
 8005280:	2a09      	cmp	r2, #9
 8005282:	d903      	bls.n	800528c <_vfiprintf_r+0x1d0>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0c6      	beq.n	8005216 <_vfiprintf_r+0x15a>
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	e7c4      	b.n	8005216 <_vfiprintf_r+0x15a>
 800528c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005290:	4604      	mov	r4, r0
 8005292:	2301      	movs	r3, #1
 8005294:	e7f0      	b.n	8005278 <_vfiprintf_r+0x1bc>
 8005296:	ab03      	add	r3, sp, #12
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	462a      	mov	r2, r5
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <_vfiprintf_r+0x22c>)
 800529e:	a904      	add	r1, sp, #16
 80052a0:	4630      	mov	r0, r6
 80052a2:	f3af 8000 	nop.w
 80052a6:	4607      	mov	r7, r0
 80052a8:	1c78      	adds	r0, r7, #1
 80052aa:	d1d6      	bne.n	800525a <_vfiprintf_r+0x19e>
 80052ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052ae:	07d9      	lsls	r1, r3, #31
 80052b0:	d405      	bmi.n	80052be <_vfiprintf_r+0x202>
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	059a      	lsls	r2, r3, #22
 80052b6:	d402      	bmi.n	80052be <_vfiprintf_r+0x202>
 80052b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ba:	f7ff fed4 	bl	8005066 <__retarget_lock_release_recursive>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	065b      	lsls	r3, r3, #25
 80052c2:	f53f af1d 	bmi.w	8005100 <_vfiprintf_r+0x44>
 80052c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c8:	e71c      	b.n	8005104 <_vfiprintf_r+0x48>
 80052ca:	ab03      	add	r3, sp, #12
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <_vfiprintf_r+0x22c>)
 80052d2:	a904      	add	r1, sp, #16
 80052d4:	4630      	mov	r0, r6
 80052d6:	f000 f919 	bl	800550c <_printf_i>
 80052da:	e7e4      	b.n	80052a6 <_vfiprintf_r+0x1ea>
 80052dc:	08005d78 	.word	0x08005d78
 80052e0:	08005d82 	.word	0x08005d82
 80052e4:	00000000 	.word	0x00000000
 80052e8:	08005097 	.word	0x08005097
 80052ec:	08005d7e 	.word	0x08005d7e

080052f0 <sbrk_aligned>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4e0e      	ldr	r6, [pc, #56]	; (800532c <sbrk_aligned+0x3c>)
 80052f4:	460c      	mov	r4, r1
 80052f6:	6831      	ldr	r1, [r6, #0]
 80052f8:	4605      	mov	r5, r0
 80052fa:	b911      	cbnz	r1, 8005302 <sbrk_aligned+0x12>
 80052fc:	f000 fc72 	bl	8005be4 <_sbrk_r>
 8005300:	6030      	str	r0, [r6, #0]
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
 8005306:	f000 fc6d 	bl	8005be4 <_sbrk_r>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	d00a      	beq.n	8005324 <sbrk_aligned+0x34>
 800530e:	1cc4      	adds	r4, r0, #3
 8005310:	f024 0403 	bic.w	r4, r4, #3
 8005314:	42a0      	cmp	r0, r4
 8005316:	d007      	beq.n	8005328 <sbrk_aligned+0x38>
 8005318:	1a21      	subs	r1, r4, r0
 800531a:	4628      	mov	r0, r5
 800531c:	f000 fc62 	bl	8005be4 <_sbrk_r>
 8005320:	3001      	adds	r0, #1
 8005322:	d101      	bne.n	8005328 <sbrk_aligned+0x38>
 8005324:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005328:	4620      	mov	r0, r4
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	200007a4 	.word	0x200007a4

08005330 <_malloc_r>:
 8005330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005334:	1ccd      	adds	r5, r1, #3
 8005336:	f025 0503 	bic.w	r5, r5, #3
 800533a:	3508      	adds	r5, #8
 800533c:	2d0c      	cmp	r5, #12
 800533e:	bf38      	it	cc
 8005340:	250c      	movcc	r5, #12
 8005342:	2d00      	cmp	r5, #0
 8005344:	4607      	mov	r7, r0
 8005346:	db01      	blt.n	800534c <_malloc_r+0x1c>
 8005348:	42a9      	cmp	r1, r5
 800534a:	d905      	bls.n	8005358 <_malloc_r+0x28>
 800534c:	230c      	movs	r3, #12
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	2600      	movs	r6, #0
 8005352:	4630      	mov	r0, r6
 8005354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005358:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800542c <_malloc_r+0xfc>
 800535c:	f000 faa6 	bl	80058ac <__malloc_lock>
 8005360:	f8d8 3000 	ldr.w	r3, [r8]
 8005364:	461c      	mov	r4, r3
 8005366:	bb5c      	cbnz	r4, 80053c0 <_malloc_r+0x90>
 8005368:	4629      	mov	r1, r5
 800536a:	4638      	mov	r0, r7
 800536c:	f7ff ffc0 	bl	80052f0 <sbrk_aligned>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	4604      	mov	r4, r0
 8005374:	d155      	bne.n	8005422 <_malloc_r+0xf2>
 8005376:	f8d8 4000 	ldr.w	r4, [r8]
 800537a:	4626      	mov	r6, r4
 800537c:	2e00      	cmp	r6, #0
 800537e:	d145      	bne.n	800540c <_malloc_r+0xdc>
 8005380:	2c00      	cmp	r4, #0
 8005382:	d048      	beq.n	8005416 <_malloc_r+0xe6>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	4631      	mov	r1, r6
 8005388:	4638      	mov	r0, r7
 800538a:	eb04 0903 	add.w	r9, r4, r3
 800538e:	f000 fc29 	bl	8005be4 <_sbrk_r>
 8005392:	4581      	cmp	r9, r0
 8005394:	d13f      	bne.n	8005416 <_malloc_r+0xe6>
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	1a6d      	subs	r5, r5, r1
 800539a:	4629      	mov	r1, r5
 800539c:	4638      	mov	r0, r7
 800539e:	f7ff ffa7 	bl	80052f0 <sbrk_aligned>
 80053a2:	3001      	adds	r0, #1
 80053a4:	d037      	beq.n	8005416 <_malloc_r+0xe6>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	442b      	add	r3, r5
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	f8d8 3000 	ldr.w	r3, [r8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d038      	beq.n	8005426 <_malloc_r+0xf6>
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	42a2      	cmp	r2, r4
 80053b8:	d12b      	bne.n	8005412 <_malloc_r+0xe2>
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	e00f      	b.n	80053e0 <_malloc_r+0xb0>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	1b52      	subs	r2, r2, r5
 80053c4:	d41f      	bmi.n	8005406 <_malloc_r+0xd6>
 80053c6:	2a0b      	cmp	r2, #11
 80053c8:	d917      	bls.n	80053fa <_malloc_r+0xca>
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	6059      	strne	r1, [r3, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	bf08      	it	eq
 80053d8:	f8c8 1000 	streq.w	r1, [r8]
 80053dc:	5162      	str	r2, [r4, r5]
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	4638      	mov	r0, r7
 80053e2:	f104 060b 	add.w	r6, r4, #11
 80053e6:	f000 fa67 	bl	80058b8 <__malloc_unlock>
 80053ea:	f026 0607 	bic.w	r6, r6, #7
 80053ee:	1d23      	adds	r3, r4, #4
 80053f0:	1af2      	subs	r2, r6, r3
 80053f2:	d0ae      	beq.n	8005352 <_malloc_r+0x22>
 80053f4:	1b9b      	subs	r3, r3, r6
 80053f6:	50a3      	str	r3, [r4, r2]
 80053f8:	e7ab      	b.n	8005352 <_malloc_r+0x22>
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	6862      	ldr	r2, [r4, #4]
 80053fe:	d1dd      	bne.n	80053bc <_malloc_r+0x8c>
 8005400:	f8c8 2000 	str.w	r2, [r8]
 8005404:	e7ec      	b.n	80053e0 <_malloc_r+0xb0>
 8005406:	4623      	mov	r3, r4
 8005408:	6864      	ldr	r4, [r4, #4]
 800540a:	e7ac      	b.n	8005366 <_malloc_r+0x36>
 800540c:	4634      	mov	r4, r6
 800540e:	6876      	ldr	r6, [r6, #4]
 8005410:	e7b4      	b.n	800537c <_malloc_r+0x4c>
 8005412:	4613      	mov	r3, r2
 8005414:	e7cc      	b.n	80053b0 <_malloc_r+0x80>
 8005416:	230c      	movs	r3, #12
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4638      	mov	r0, r7
 800541c:	f000 fa4c 	bl	80058b8 <__malloc_unlock>
 8005420:	e797      	b.n	8005352 <_malloc_r+0x22>
 8005422:	6025      	str	r5, [r4, #0]
 8005424:	e7dc      	b.n	80053e0 <_malloc_r+0xb0>
 8005426:	605b      	str	r3, [r3, #4]
 8005428:	deff      	udf	#255	; 0xff
 800542a:	bf00      	nop
 800542c:	200007a0 	.word	0x200007a0

08005430 <_printf_common>:
 8005430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	4616      	mov	r6, r2
 8005436:	4699      	mov	r9, r3
 8005438:	688a      	ldr	r2, [r1, #8]
 800543a:	690b      	ldr	r3, [r1, #16]
 800543c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005440:	4293      	cmp	r3, r2
 8005442:	bfb8      	it	lt
 8005444:	4613      	movlt	r3, r2
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800544c:	4607      	mov	r7, r0
 800544e:	460c      	mov	r4, r1
 8005450:	b10a      	cbz	r2, 8005456 <_printf_common+0x26>
 8005452:	3301      	adds	r3, #1
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0699      	lsls	r1, r3, #26
 800545a:	bf42      	ittt	mi
 800545c:	6833      	ldrmi	r3, [r6, #0]
 800545e:	3302      	addmi	r3, #2
 8005460:	6033      	strmi	r3, [r6, #0]
 8005462:	6825      	ldr	r5, [r4, #0]
 8005464:	f015 0506 	ands.w	r5, r5, #6
 8005468:	d106      	bne.n	8005478 <_printf_common+0x48>
 800546a:	f104 0a19 	add.w	sl, r4, #25
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	6832      	ldr	r2, [r6, #0]
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	42ab      	cmp	r3, r5
 8005476:	dc26      	bgt.n	80054c6 <_printf_common+0x96>
 8005478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800547c:	1e13      	subs	r3, r2, #0
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	bf18      	it	ne
 8005482:	2301      	movne	r3, #1
 8005484:	0692      	lsls	r2, r2, #26
 8005486:	d42b      	bmi.n	80054e0 <_printf_common+0xb0>
 8005488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800548c:	4649      	mov	r1, r9
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	3001      	adds	r0, #1
 8005494:	d01e      	beq.n	80054d4 <_printf_common+0xa4>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	6922      	ldr	r2, [r4, #16]
 800549a:	f003 0306 	and.w	r3, r3, #6
 800549e:	2b04      	cmp	r3, #4
 80054a0:	bf02      	ittt	eq
 80054a2:	68e5      	ldreq	r5, [r4, #12]
 80054a4:	6833      	ldreq	r3, [r6, #0]
 80054a6:	1aed      	subeq	r5, r5, r3
 80054a8:	68a3      	ldr	r3, [r4, #8]
 80054aa:	bf0c      	ite	eq
 80054ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b0:	2500      	movne	r5, #0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bfc4      	itt	gt
 80054b6:	1a9b      	subgt	r3, r3, r2
 80054b8:	18ed      	addgt	r5, r5, r3
 80054ba:	2600      	movs	r6, #0
 80054bc:	341a      	adds	r4, #26
 80054be:	42b5      	cmp	r5, r6
 80054c0:	d11a      	bne.n	80054f8 <_printf_common+0xc8>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e008      	b.n	80054d8 <_printf_common+0xa8>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	4649      	mov	r1, r9
 80054cc:	4638      	mov	r0, r7
 80054ce:	47c0      	blx	r8
 80054d0:	3001      	adds	r0, #1
 80054d2:	d103      	bne.n	80054dc <_printf_common+0xac>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	3501      	adds	r5, #1
 80054de:	e7c6      	b.n	800546e <_printf_common+0x3e>
 80054e0:	18e1      	adds	r1, r4, r3
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	2030      	movs	r0, #48	; 0x30
 80054e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ea:	4422      	add	r2, r4
 80054ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f4:	3302      	adds	r3, #2
 80054f6:	e7c7      	b.n	8005488 <_printf_common+0x58>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4622      	mov	r2, r4
 80054fc:	4649      	mov	r1, r9
 80054fe:	4638      	mov	r0, r7
 8005500:	47c0      	blx	r8
 8005502:	3001      	adds	r0, #1
 8005504:	d0e6      	beq.n	80054d4 <_printf_common+0xa4>
 8005506:	3601      	adds	r6, #1
 8005508:	e7d9      	b.n	80054be <_printf_common+0x8e>
	...

0800550c <_printf_i>:
 800550c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	7e0f      	ldrb	r7, [r1, #24]
 8005512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005514:	2f78      	cmp	r7, #120	; 0x78
 8005516:	4691      	mov	r9, r2
 8005518:	4680      	mov	r8, r0
 800551a:	460c      	mov	r4, r1
 800551c:	469a      	mov	sl, r3
 800551e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005522:	d807      	bhi.n	8005534 <_printf_i+0x28>
 8005524:	2f62      	cmp	r7, #98	; 0x62
 8005526:	d80a      	bhi.n	800553e <_printf_i+0x32>
 8005528:	2f00      	cmp	r7, #0
 800552a:	f000 80d4 	beq.w	80056d6 <_printf_i+0x1ca>
 800552e:	2f58      	cmp	r7, #88	; 0x58
 8005530:	f000 80c0 	beq.w	80056b4 <_printf_i+0x1a8>
 8005534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800553c:	e03a      	b.n	80055b4 <_printf_i+0xa8>
 800553e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005542:	2b15      	cmp	r3, #21
 8005544:	d8f6      	bhi.n	8005534 <_printf_i+0x28>
 8005546:	a101      	add	r1, pc, #4	; (adr r1, 800554c <_printf_i+0x40>)
 8005548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055b9 	.word	0x080055b9
 8005554:	08005535 	.word	0x08005535
 8005558:	08005535 	.word	0x08005535
 800555c:	08005535 	.word	0x08005535
 8005560:	08005535 	.word	0x08005535
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005535 	.word	0x08005535
 800556c:	08005535 	.word	0x08005535
 8005570:	08005535 	.word	0x08005535
 8005574:	08005535 	.word	0x08005535
 8005578:	080056bd 	.word	0x080056bd
 800557c:	080055e5 	.word	0x080055e5
 8005580:	08005677 	.word	0x08005677
 8005584:	08005535 	.word	0x08005535
 8005588:	08005535 	.word	0x08005535
 800558c:	080056df 	.word	0x080056df
 8005590:	08005535 	.word	0x08005535
 8005594:	080055e5 	.word	0x080055e5
 8005598:	08005535 	.word	0x08005535
 800559c:	08005535 	.word	0x08005535
 80055a0:	0800567f 	.word	0x0800567f
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055b4:	2301      	movs	r3, #1
 80055b6:	e09f      	b.n	80056f8 <_printf_i+0x1ec>
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	0607      	lsls	r7, r0, #24
 80055be:	f103 0104 	add.w	r1, r3, #4
 80055c2:	6029      	str	r1, [r5, #0]
 80055c4:	d501      	bpl.n	80055ca <_printf_i+0xbe>
 80055c6:	681e      	ldr	r6, [r3, #0]
 80055c8:	e003      	b.n	80055d2 <_printf_i+0xc6>
 80055ca:	0646      	lsls	r6, r0, #25
 80055cc:	d5fb      	bpl.n	80055c6 <_printf_i+0xba>
 80055ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	da03      	bge.n	80055de <_printf_i+0xd2>
 80055d6:	232d      	movs	r3, #45	; 0x2d
 80055d8:	4276      	negs	r6, r6
 80055da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055de:	485a      	ldr	r0, [pc, #360]	; (8005748 <_printf_i+0x23c>)
 80055e0:	230a      	movs	r3, #10
 80055e2:	e012      	b.n	800560a <_printf_i+0xfe>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	1d19      	adds	r1, r3, #4
 80055ea:	6029      	str	r1, [r5, #0]
 80055ec:	0605      	lsls	r5, r0, #24
 80055ee:	d501      	bpl.n	80055f4 <_printf_i+0xe8>
 80055f0:	681e      	ldr	r6, [r3, #0]
 80055f2:	e002      	b.n	80055fa <_printf_i+0xee>
 80055f4:	0641      	lsls	r1, r0, #25
 80055f6:	d5fb      	bpl.n	80055f0 <_printf_i+0xe4>
 80055f8:	881e      	ldrh	r6, [r3, #0]
 80055fa:	4853      	ldr	r0, [pc, #332]	; (8005748 <_printf_i+0x23c>)
 80055fc:	2f6f      	cmp	r7, #111	; 0x6f
 80055fe:	bf0c      	ite	eq
 8005600:	2308      	moveq	r3, #8
 8005602:	230a      	movne	r3, #10
 8005604:	2100      	movs	r1, #0
 8005606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800560a:	6865      	ldr	r5, [r4, #4]
 800560c:	60a5      	str	r5, [r4, #8]
 800560e:	2d00      	cmp	r5, #0
 8005610:	bfa2      	ittt	ge
 8005612:	6821      	ldrge	r1, [r4, #0]
 8005614:	f021 0104 	bicge.w	r1, r1, #4
 8005618:	6021      	strge	r1, [r4, #0]
 800561a:	b90e      	cbnz	r6, 8005620 <_printf_i+0x114>
 800561c:	2d00      	cmp	r5, #0
 800561e:	d04b      	beq.n	80056b8 <_printf_i+0x1ac>
 8005620:	4615      	mov	r5, r2
 8005622:	fbb6 f1f3 	udiv	r1, r6, r3
 8005626:	fb03 6711 	mls	r7, r3, r1, r6
 800562a:	5dc7      	ldrb	r7, [r0, r7]
 800562c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005630:	4637      	mov	r7, r6
 8005632:	42bb      	cmp	r3, r7
 8005634:	460e      	mov	r6, r1
 8005636:	d9f4      	bls.n	8005622 <_printf_i+0x116>
 8005638:	2b08      	cmp	r3, #8
 800563a:	d10b      	bne.n	8005654 <_printf_i+0x148>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07de      	lsls	r6, r3, #31
 8005640:	d508      	bpl.n	8005654 <_printf_i+0x148>
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	6861      	ldr	r1, [r4, #4]
 8005646:	4299      	cmp	r1, r3
 8005648:	bfde      	ittt	le
 800564a:	2330      	movle	r3, #48	; 0x30
 800564c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005650:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005654:	1b52      	subs	r2, r2, r5
 8005656:	6122      	str	r2, [r4, #16]
 8005658:	f8cd a000 	str.w	sl, [sp]
 800565c:	464b      	mov	r3, r9
 800565e:	aa03      	add	r2, sp, #12
 8005660:	4621      	mov	r1, r4
 8005662:	4640      	mov	r0, r8
 8005664:	f7ff fee4 	bl	8005430 <_printf_common>
 8005668:	3001      	adds	r0, #1
 800566a:	d14a      	bne.n	8005702 <_printf_i+0x1f6>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005670:	b004      	add	sp, #16
 8005672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f043 0320 	orr.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	4833      	ldr	r0, [pc, #204]	; (800574c <_printf_i+0x240>)
 8005680:	2778      	movs	r7, #120	; 0x78
 8005682:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	6829      	ldr	r1, [r5, #0]
 800568a:	061f      	lsls	r7, r3, #24
 800568c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005690:	d402      	bmi.n	8005698 <_printf_i+0x18c>
 8005692:	065f      	lsls	r7, r3, #25
 8005694:	bf48      	it	mi
 8005696:	b2b6      	uxthmi	r6, r6
 8005698:	07df      	lsls	r7, r3, #31
 800569a:	bf48      	it	mi
 800569c:	f043 0320 	orrmi.w	r3, r3, #32
 80056a0:	6029      	str	r1, [r5, #0]
 80056a2:	bf48      	it	mi
 80056a4:	6023      	strmi	r3, [r4, #0]
 80056a6:	b91e      	cbnz	r6, 80056b0 <_printf_i+0x1a4>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	2310      	movs	r3, #16
 80056b2:	e7a7      	b.n	8005604 <_printf_i+0xf8>
 80056b4:	4824      	ldr	r0, [pc, #144]	; (8005748 <_printf_i+0x23c>)
 80056b6:	e7e4      	b.n	8005682 <_printf_i+0x176>
 80056b8:	4615      	mov	r5, r2
 80056ba:	e7bd      	b.n	8005638 <_printf_i+0x12c>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	6826      	ldr	r6, [r4, #0]
 80056c0:	6961      	ldr	r1, [r4, #20]
 80056c2:	1d18      	adds	r0, r3, #4
 80056c4:	6028      	str	r0, [r5, #0]
 80056c6:	0635      	lsls	r5, r6, #24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	d501      	bpl.n	80056d0 <_printf_i+0x1c4>
 80056cc:	6019      	str	r1, [r3, #0]
 80056ce:	e002      	b.n	80056d6 <_printf_i+0x1ca>
 80056d0:	0670      	lsls	r0, r6, #25
 80056d2:	d5fb      	bpl.n	80056cc <_printf_i+0x1c0>
 80056d4:	8019      	strh	r1, [r3, #0]
 80056d6:	2300      	movs	r3, #0
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	4615      	mov	r5, r2
 80056dc:	e7bc      	b.n	8005658 <_printf_i+0x14c>
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	602a      	str	r2, [r5, #0]
 80056e4:	681d      	ldr	r5, [r3, #0]
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	2100      	movs	r1, #0
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7fa fd70 	bl	80001d0 <memchr>
 80056f0:	b108      	cbz	r0, 80056f6 <_printf_i+0x1ea>
 80056f2:	1b40      	subs	r0, r0, r5
 80056f4:	6060      	str	r0, [r4, #4]
 80056f6:	6863      	ldr	r3, [r4, #4]
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	2300      	movs	r3, #0
 80056fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005700:	e7aa      	b.n	8005658 <_printf_i+0x14c>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	462a      	mov	r2, r5
 8005706:	4649      	mov	r1, r9
 8005708:	4640      	mov	r0, r8
 800570a:	47d0      	blx	sl
 800570c:	3001      	adds	r0, #1
 800570e:	d0ad      	beq.n	800566c <_printf_i+0x160>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	079b      	lsls	r3, r3, #30
 8005714:	d413      	bmi.n	800573e <_printf_i+0x232>
 8005716:	68e0      	ldr	r0, [r4, #12]
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	4298      	cmp	r0, r3
 800571c:	bfb8      	it	lt
 800571e:	4618      	movlt	r0, r3
 8005720:	e7a6      	b.n	8005670 <_printf_i+0x164>
 8005722:	2301      	movs	r3, #1
 8005724:	4632      	mov	r2, r6
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	47d0      	blx	sl
 800572c:	3001      	adds	r0, #1
 800572e:	d09d      	beq.n	800566c <_printf_i+0x160>
 8005730:	3501      	adds	r5, #1
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	9903      	ldr	r1, [sp, #12]
 8005736:	1a5b      	subs	r3, r3, r1
 8005738:	42ab      	cmp	r3, r5
 800573a:	dcf2      	bgt.n	8005722 <_printf_i+0x216>
 800573c:	e7eb      	b.n	8005716 <_printf_i+0x20a>
 800573e:	2500      	movs	r5, #0
 8005740:	f104 0619 	add.w	r6, r4, #25
 8005744:	e7f5      	b.n	8005732 <_printf_i+0x226>
 8005746:	bf00      	nop
 8005748:	08005d89 	.word	0x08005d89
 800574c:	08005d9a 	.word	0x08005d9a

08005750 <__sflush_r>:
 8005750:	898a      	ldrh	r2, [r1, #12]
 8005752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	0710      	lsls	r0, r2, #28
 800575a:	460c      	mov	r4, r1
 800575c:	d458      	bmi.n	8005810 <__sflush_r+0xc0>
 800575e:	684b      	ldr	r3, [r1, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	dc05      	bgt.n	8005770 <__sflush_r+0x20>
 8005764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc02      	bgt.n	8005770 <__sflush_r+0x20>
 800576a:	2000      	movs	r0, #0
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005772:	2e00      	cmp	r6, #0
 8005774:	d0f9      	beq.n	800576a <__sflush_r+0x1a>
 8005776:	2300      	movs	r3, #0
 8005778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800577c:	682f      	ldr	r7, [r5, #0]
 800577e:	6a21      	ldr	r1, [r4, #32]
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	d032      	beq.n	80057ea <__sflush_r+0x9a>
 8005784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	075a      	lsls	r2, r3, #29
 800578a:	d505      	bpl.n	8005798 <__sflush_r+0x48>
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	1ac0      	subs	r0, r0, r3
 8005790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005792:	b10b      	cbz	r3, 8005798 <__sflush_r+0x48>
 8005794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005796:	1ac0      	subs	r0, r0, r3
 8005798:	2300      	movs	r3, #0
 800579a:	4602      	mov	r2, r0
 800579c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800579e:	6a21      	ldr	r1, [r4, #32]
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b0      	blx	r6
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	d106      	bne.n	80057b8 <__sflush_r+0x68>
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	291d      	cmp	r1, #29
 80057ae:	d82b      	bhi.n	8005808 <__sflush_r+0xb8>
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <__sflush_r+0x108>)
 80057b2:	410a      	asrs	r2, r1
 80057b4:	07d6      	lsls	r6, r2, #31
 80057b6:	d427      	bmi.n	8005808 <__sflush_r+0xb8>
 80057b8:	2200      	movs	r2, #0
 80057ba:	6062      	str	r2, [r4, #4]
 80057bc:	04d9      	lsls	r1, r3, #19
 80057be:	6922      	ldr	r2, [r4, #16]
 80057c0:	6022      	str	r2, [r4, #0]
 80057c2:	d504      	bpl.n	80057ce <__sflush_r+0x7e>
 80057c4:	1c42      	adds	r2, r0, #1
 80057c6:	d101      	bne.n	80057cc <__sflush_r+0x7c>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b903      	cbnz	r3, 80057ce <__sflush_r+0x7e>
 80057cc:	6560      	str	r0, [r4, #84]	; 0x54
 80057ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d0:	602f      	str	r7, [r5, #0]
 80057d2:	2900      	cmp	r1, #0
 80057d4:	d0c9      	beq.n	800576a <__sflush_r+0x1a>
 80057d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057da:	4299      	cmp	r1, r3
 80057dc:	d002      	beq.n	80057e4 <__sflush_r+0x94>
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fa22 	bl	8005c28 <_free_r>
 80057e4:	2000      	movs	r0, #0
 80057e6:	6360      	str	r0, [r4, #52]	; 0x34
 80057e8:	e7c0      	b.n	800576c <__sflush_r+0x1c>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b0      	blx	r6
 80057f0:	1c41      	adds	r1, r0, #1
 80057f2:	d1c8      	bne.n	8005786 <__sflush_r+0x36>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0c5      	beq.n	8005786 <__sflush_r+0x36>
 80057fa:	2b1d      	cmp	r3, #29
 80057fc:	d001      	beq.n	8005802 <__sflush_r+0xb2>
 80057fe:	2b16      	cmp	r3, #22
 8005800:	d101      	bne.n	8005806 <__sflush_r+0xb6>
 8005802:	602f      	str	r7, [r5, #0]
 8005804:	e7b1      	b.n	800576a <__sflush_r+0x1a>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	e7ad      	b.n	800576c <__sflush_r+0x1c>
 8005810:	690f      	ldr	r7, [r1, #16]
 8005812:	2f00      	cmp	r7, #0
 8005814:	d0a9      	beq.n	800576a <__sflush_r+0x1a>
 8005816:	0793      	lsls	r3, r2, #30
 8005818:	680e      	ldr	r6, [r1, #0]
 800581a:	bf08      	it	eq
 800581c:	694b      	ldreq	r3, [r1, #20]
 800581e:	600f      	str	r7, [r1, #0]
 8005820:	bf18      	it	ne
 8005822:	2300      	movne	r3, #0
 8005824:	eba6 0807 	sub.w	r8, r6, r7
 8005828:	608b      	str	r3, [r1, #8]
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	dd9c      	ble.n	800576a <__sflush_r+0x1a>
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005834:	4643      	mov	r3, r8
 8005836:	463a      	mov	r2, r7
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	2800      	cmp	r0, #0
 800583e:	dc06      	bgt.n	800584e <__sflush_r+0xfe>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800584c:	e78e      	b.n	800576c <__sflush_r+0x1c>
 800584e:	4407      	add	r7, r0
 8005850:	eba8 0800 	sub.w	r8, r8, r0
 8005854:	e7e9      	b.n	800582a <__sflush_r+0xda>
 8005856:	bf00      	nop
 8005858:	dfbffffe 	.word	0xdfbffffe

0800585c <_fflush_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b913      	cbnz	r3, 800586c <_fflush_r+0x10>
 8005866:	2500      	movs	r5, #0
 8005868:	4628      	mov	r0, r5
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	b118      	cbz	r0, 8005876 <_fflush_r+0x1a>
 800586e:	6a03      	ldr	r3, [r0, #32]
 8005870:	b90b      	cbnz	r3, 8005876 <_fflush_r+0x1a>
 8005872:	f7ff fb7d 	bl	8004f70 <__sinit>
 8005876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f3      	beq.n	8005866 <_fflush_r+0xa>
 800587e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005880:	07d0      	lsls	r0, r2, #31
 8005882:	d404      	bmi.n	800588e <_fflush_r+0x32>
 8005884:	0599      	lsls	r1, r3, #22
 8005886:	d402      	bmi.n	800588e <_fflush_r+0x32>
 8005888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588a:	f7ff fbeb 	bl	8005064 <__retarget_lock_acquire_recursive>
 800588e:	4628      	mov	r0, r5
 8005890:	4621      	mov	r1, r4
 8005892:	f7ff ff5d 	bl	8005750 <__sflush_r>
 8005896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005898:	07da      	lsls	r2, r3, #31
 800589a:	4605      	mov	r5, r0
 800589c:	d4e4      	bmi.n	8005868 <_fflush_r+0xc>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	059b      	lsls	r3, r3, #22
 80058a2:	d4e1      	bmi.n	8005868 <_fflush_r+0xc>
 80058a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a6:	f7ff fbde 	bl	8005066 <__retarget_lock_release_recursive>
 80058aa:	e7dd      	b.n	8005868 <_fflush_r+0xc>

080058ac <__malloc_lock>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__malloc_lock+0x8>)
 80058ae:	f7ff bbd9 	b.w	8005064 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	2000079c 	.word	0x2000079c

080058b8 <__malloc_unlock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__malloc_unlock+0x8>)
 80058ba:	f7ff bbd4 	b.w	8005066 <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	2000079c 	.word	0x2000079c

080058c4 <__sread>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	460c      	mov	r4, r1
 80058c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058cc:	f000 f978 	bl	8005bc0 <_read_r>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	bfab      	itete	ge
 80058d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058d6:	89a3      	ldrhlt	r3, [r4, #12]
 80058d8:	181b      	addge	r3, r3, r0
 80058da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058de:	bfac      	ite	ge
 80058e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058e2:	81a3      	strhlt	r3, [r4, #12]
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <__swrite>:
 80058e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	461f      	mov	r7, r3
 80058ec:	898b      	ldrh	r3, [r1, #12]
 80058ee:	05db      	lsls	r3, r3, #23
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4616      	mov	r6, r2
 80058f6:	d505      	bpl.n	8005904 <__swrite+0x1e>
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	2302      	movs	r3, #2
 80058fe:	2200      	movs	r2, #0
 8005900:	f000 f94c 	bl	8005b9c <_lseek_r>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800590a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	4632      	mov	r2, r6
 8005912:	463b      	mov	r3, r7
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	f000 b973 	b.w	8005c04 <_write_r>

0800591e <__sseek>:
 800591e:	b510      	push	{r4, lr}
 8005920:	460c      	mov	r4, r1
 8005922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005926:	f000 f939 	bl	8005b9c <_lseek_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	bf15      	itete	ne
 8005930:	6560      	strne	r0, [r4, #84]	; 0x54
 8005932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800593a:	81a3      	strheq	r3, [r4, #12]
 800593c:	bf18      	it	ne
 800593e:	81a3      	strhne	r3, [r4, #12]
 8005940:	bd10      	pop	{r4, pc}

08005942 <__sclose>:
 8005942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005946:	f000 b8f7 	b.w	8005b38 <_close_r>

0800594a <__swbuf_r>:
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	460e      	mov	r6, r1
 800594e:	4614      	mov	r4, r2
 8005950:	4605      	mov	r5, r0
 8005952:	b118      	cbz	r0, 800595c <__swbuf_r+0x12>
 8005954:	6a03      	ldr	r3, [r0, #32]
 8005956:	b90b      	cbnz	r3, 800595c <__swbuf_r+0x12>
 8005958:	f7ff fb0a 	bl	8004f70 <__sinit>
 800595c:	69a3      	ldr	r3, [r4, #24]
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	071a      	lsls	r2, r3, #28
 8005964:	d525      	bpl.n	80059b2 <__swbuf_r+0x68>
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	b31b      	cbz	r3, 80059b2 <__swbuf_r+0x68>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	6922      	ldr	r2, [r4, #16]
 800596e:	1a98      	subs	r0, r3, r2
 8005970:	6963      	ldr	r3, [r4, #20]
 8005972:	b2f6      	uxtb	r6, r6
 8005974:	4283      	cmp	r3, r0
 8005976:	4637      	mov	r7, r6
 8005978:	dc04      	bgt.n	8005984 <__swbuf_r+0x3a>
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f7ff ff6d 	bl	800585c <_fflush_r>
 8005982:	b9e0      	cbnz	r0, 80059be <__swbuf_r+0x74>
 8005984:	68a3      	ldr	r3, [r4, #8]
 8005986:	3b01      	subs	r3, #1
 8005988:	60a3      	str	r3, [r4, #8]
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	701e      	strb	r6, [r3, #0]
 8005992:	6962      	ldr	r2, [r4, #20]
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	429a      	cmp	r2, r3
 8005998:	d004      	beq.n	80059a4 <__swbuf_r+0x5a>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	07db      	lsls	r3, r3, #31
 800599e:	d506      	bpl.n	80059ae <__swbuf_r+0x64>
 80059a0:	2e0a      	cmp	r6, #10
 80059a2:	d104      	bne.n	80059ae <__swbuf_r+0x64>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7ff ff58 	bl	800585c <_fflush_r>
 80059ac:	b938      	cbnz	r0, 80059be <__swbuf_r+0x74>
 80059ae:	4638      	mov	r0, r7
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b2:	4621      	mov	r1, r4
 80059b4:	4628      	mov	r0, r5
 80059b6:	f000 f805 	bl	80059c4 <__swsetup_r>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d0d5      	beq.n	800596a <__swbuf_r+0x20>
 80059be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059c2:	e7f4      	b.n	80059ae <__swbuf_r+0x64>

080059c4 <__swsetup_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4b2a      	ldr	r3, [pc, #168]	; (8005a70 <__swsetup_r+0xac>)
 80059c8:	4605      	mov	r5, r0
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	460c      	mov	r4, r1
 80059ce:	b118      	cbz	r0, 80059d8 <__swsetup_r+0x14>
 80059d0:	6a03      	ldr	r3, [r0, #32]
 80059d2:	b90b      	cbnz	r3, 80059d8 <__swsetup_r+0x14>
 80059d4:	f7ff facc 	bl	8004f70 <__sinit>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059de:	0718      	lsls	r0, r3, #28
 80059e0:	d422      	bmi.n	8005a28 <__swsetup_r+0x64>
 80059e2:	06d9      	lsls	r1, r3, #27
 80059e4:	d407      	bmi.n	80059f6 <__swsetup_r+0x32>
 80059e6:	2309      	movs	r3, #9
 80059e8:	602b      	str	r3, [r5, #0]
 80059ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f4:	e034      	b.n	8005a60 <__swsetup_r+0x9c>
 80059f6:	0758      	lsls	r0, r3, #29
 80059f8:	d512      	bpl.n	8005a20 <__swsetup_r+0x5c>
 80059fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059fc:	b141      	cbz	r1, 8005a10 <__swsetup_r+0x4c>
 80059fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a02:	4299      	cmp	r1, r3
 8005a04:	d002      	beq.n	8005a0c <__swsetup_r+0x48>
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f90e 	bl	8005c28 <_free_r>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6363      	str	r3, [r4, #52]	; 0x34
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6063      	str	r3, [r4, #4]
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	f043 0308 	orr.w	r3, r3, #8
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	b94b      	cbnz	r3, 8005a40 <__swsetup_r+0x7c>
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a36:	d003      	beq.n	8005a40 <__swsetup_r+0x7c>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f840 	bl	8005ac0 <__smakebuf_r>
 8005a40:	89a0      	ldrh	r0, [r4, #12]
 8005a42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a46:	f010 0301 	ands.w	r3, r0, #1
 8005a4a:	d00a      	beq.n	8005a62 <__swsetup_r+0x9e>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60a3      	str	r3, [r4, #8]
 8005a50:	6963      	ldr	r3, [r4, #20]
 8005a52:	425b      	negs	r3, r3
 8005a54:	61a3      	str	r3, [r4, #24]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	b943      	cbnz	r3, 8005a6c <__swsetup_r+0xa8>
 8005a5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a5e:	d1c4      	bne.n	80059ea <__swsetup_r+0x26>
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
 8005a62:	0781      	lsls	r1, r0, #30
 8005a64:	bf58      	it	pl
 8005a66:	6963      	ldrpl	r3, [r4, #20]
 8005a68:	60a3      	str	r3, [r4, #8]
 8005a6a:	e7f4      	b.n	8005a56 <__swsetup_r+0x92>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	e7f7      	b.n	8005a60 <__swsetup_r+0x9c>
 8005a70:	20000078 	.word	0x20000078

08005a74 <__swhatbuf_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	460c      	mov	r4, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	b096      	sub	sp, #88	; 0x58
 8005a80:	4615      	mov	r5, r2
 8005a82:	461e      	mov	r6, r3
 8005a84:	da0d      	bge.n	8005aa2 <__swhatbuf_r+0x2e>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	bf0c      	ite	eq
 8005a92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a96:	2340      	movne	r3, #64	; 0x40
 8005a98:	2000      	movs	r0, #0
 8005a9a:	6031      	str	r1, [r6, #0]
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	b016      	add	sp, #88	; 0x58
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
 8005aa2:	466a      	mov	r2, sp
 8005aa4:	f000 f858 	bl	8005b58 <_fstat_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	dbec      	blt.n	8005a86 <__swhatbuf_r+0x12>
 8005aac:	9901      	ldr	r1, [sp, #4]
 8005aae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ab2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ab6:	4259      	negs	r1, r3
 8005ab8:	4159      	adcs	r1, r3
 8005aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005abe:	e7eb      	b.n	8005a98 <__swhatbuf_r+0x24>

08005ac0 <__smakebuf_r>:
 8005ac0:	898b      	ldrh	r3, [r1, #12]
 8005ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ac4:	079d      	lsls	r5, r3, #30
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	d507      	bpl.n	8005adc <__smakebuf_r+0x1c>
 8005acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	6163      	str	r3, [r4, #20]
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	ab01      	add	r3, sp, #4
 8005ade:	466a      	mov	r2, sp
 8005ae0:	f7ff ffc8 	bl	8005a74 <__swhatbuf_r>
 8005ae4:	9900      	ldr	r1, [sp, #0]
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7ff fc21 	bl	8005330 <_malloc_r>
 8005aee:	b948      	cbnz	r0, 8005b04 <__smakebuf_r+0x44>
 8005af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af4:	059a      	lsls	r2, r3, #22
 8005af6:	d4ef      	bmi.n	8005ad8 <__smakebuf_r+0x18>
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	f043 0302 	orr.w	r3, r3, #2
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	e7e3      	b.n	8005acc <__smakebuf_r+0xc>
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	6163      	str	r3, [r4, #20]
 8005b12:	9b01      	ldr	r3, [sp, #4]
 8005b14:	6120      	str	r0, [r4, #16]
 8005b16:	b15b      	cbz	r3, 8005b30 <__smakebuf_r+0x70>
 8005b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 f82d 	bl	8005b7c <_isatty_r>
 8005b22:	b128      	cbz	r0, 8005b30 <__smakebuf_r+0x70>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	431d      	orrs	r5, r3
 8005b34:	81a5      	strh	r5, [r4, #12]
 8005b36:	e7cf      	b.n	8005ad8 <__smakebuf_r+0x18>

08005b38 <_close_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d06      	ldr	r5, [pc, #24]	; (8005b54 <_close_r+0x1c>)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4608      	mov	r0, r1
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fc f823 	bl	8001b8e <_close>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_close_r+0x1a>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_close_r+0x1a>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	200007a8 	.word	0x200007a8

08005b58 <_fstat_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d07      	ldr	r5, [pc, #28]	; (8005b78 <_fstat_r+0x20>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	f7fc f81e 	bl	8001ba6 <_fstat>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d102      	bne.n	8005b74 <_fstat_r+0x1c>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	b103      	cbz	r3, 8005b74 <_fstat_r+0x1c>
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	200007a8 	.word	0x200007a8

08005b7c <_isatty_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_isatty_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fc f81d 	bl	8001bc6 <_isatty>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_isatty_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_isatty_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200007a8 	.word	0x200007a8

08005b9c <_lseek_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	; (8005bbc <_lseek_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fc f816 	bl	8001bdc <_lseek>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_lseek_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_lseek_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200007a8 	.word	0x200007a8

08005bc0 <_read_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <_read_r+0x20>)
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fb ffa4 	bl	8001b1c <_read>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_read_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_read_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	200007a8 	.word	0x200007a8

08005be4 <_sbrk_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d06      	ldr	r5, [pc, #24]	; (8005c00 <_sbrk_r+0x1c>)
 8005be8:	2300      	movs	r3, #0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	f7fc f802 	bl	8001bf8 <_sbrk>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d102      	bne.n	8005bfe <_sbrk_r+0x1a>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	b103      	cbz	r3, 8005bfe <_sbrk_r+0x1a>
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	200007a8 	.word	0x200007a8

08005c04 <_write_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d07      	ldr	r5, [pc, #28]	; (8005c24 <_write_r+0x20>)
 8005c08:	4604      	mov	r4, r0
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	602a      	str	r2, [r5, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f7fb ff9f 	bl	8001b56 <_write>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d102      	bne.n	8005c22 <_write_r+0x1e>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b103      	cbz	r3, 8005c22 <_write_r+0x1e>
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
 8005c24:	200007a8 	.word	0x200007a8

08005c28 <_free_r>:
 8005c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d044      	beq.n	8005cb8 <_free_r+0x90>
 8005c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c32:	9001      	str	r0, [sp, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f1a1 0404 	sub.w	r4, r1, #4
 8005c3a:	bfb8      	it	lt
 8005c3c:	18e4      	addlt	r4, r4, r3
 8005c3e:	f7ff fe35 	bl	80058ac <__malloc_lock>
 8005c42:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <_free_r+0x94>)
 8005c44:	9801      	ldr	r0, [sp, #4]
 8005c46:	6813      	ldr	r3, [r2, #0]
 8005c48:	b933      	cbnz	r3, 8005c58 <_free_r+0x30>
 8005c4a:	6063      	str	r3, [r4, #4]
 8005c4c:	6014      	str	r4, [r2, #0]
 8005c4e:	b003      	add	sp, #12
 8005c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c54:	f7ff be30 	b.w	80058b8 <__malloc_unlock>
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	d908      	bls.n	8005c6e <_free_r+0x46>
 8005c5c:	6825      	ldr	r5, [r4, #0]
 8005c5e:	1961      	adds	r1, r4, r5
 8005c60:	428b      	cmp	r3, r1
 8005c62:	bf01      	itttt	eq
 8005c64:	6819      	ldreq	r1, [r3, #0]
 8005c66:	685b      	ldreq	r3, [r3, #4]
 8005c68:	1949      	addeq	r1, r1, r5
 8005c6a:	6021      	streq	r1, [r4, #0]
 8005c6c:	e7ed      	b.n	8005c4a <_free_r+0x22>
 8005c6e:	461a      	mov	r2, r3
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	b10b      	cbz	r3, 8005c78 <_free_r+0x50>
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	d9fa      	bls.n	8005c6e <_free_r+0x46>
 8005c78:	6811      	ldr	r1, [r2, #0]
 8005c7a:	1855      	adds	r5, r2, r1
 8005c7c:	42a5      	cmp	r5, r4
 8005c7e:	d10b      	bne.n	8005c98 <_free_r+0x70>
 8005c80:	6824      	ldr	r4, [r4, #0]
 8005c82:	4421      	add	r1, r4
 8005c84:	1854      	adds	r4, r2, r1
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	6011      	str	r1, [r2, #0]
 8005c8a:	d1e0      	bne.n	8005c4e <_free_r+0x26>
 8005c8c:	681c      	ldr	r4, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	6053      	str	r3, [r2, #4]
 8005c92:	440c      	add	r4, r1
 8005c94:	6014      	str	r4, [r2, #0]
 8005c96:	e7da      	b.n	8005c4e <_free_r+0x26>
 8005c98:	d902      	bls.n	8005ca0 <_free_r+0x78>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	6003      	str	r3, [r0, #0]
 8005c9e:	e7d6      	b.n	8005c4e <_free_r+0x26>
 8005ca0:	6825      	ldr	r5, [r4, #0]
 8005ca2:	1961      	adds	r1, r4, r5
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf04      	itt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	bf04      	itt	eq
 8005cb0:	1949      	addeq	r1, r1, r5
 8005cb2:	6021      	streq	r1, [r4, #0]
 8005cb4:	6054      	str	r4, [r2, #4]
 8005cb6:	e7ca      	b.n	8005c4e <_free_r+0x26>
 8005cb8:	b003      	add	sp, #12
 8005cba:	bd30      	pop	{r4, r5, pc}
 8005cbc:	200007a0 	.word	0x200007a0

08005cc0 <roundf>:
 8005cc0:	ee10 0a10 	vmov	r0, s0
 8005cc4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005cc8:	3a7f      	subs	r2, #127	; 0x7f
 8005cca:	2a16      	cmp	r2, #22
 8005ccc:	dc15      	bgt.n	8005cfa <roundf+0x3a>
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	da08      	bge.n	8005ce4 <roundf+0x24>
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005cd8:	d101      	bne.n	8005cde <roundf+0x1e>
 8005cda:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005cde:	ee00 3a10 	vmov	s0, r3
 8005ce2:	4770      	bx	lr
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <roundf+0x44>)
 8005ce6:	4111      	asrs	r1, r2
 8005ce8:	4208      	tst	r0, r1
 8005cea:	d0fa      	beq.n	8005ce2 <roundf+0x22>
 8005cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cf0:	4113      	asrs	r3, r2
 8005cf2:	4403      	add	r3, r0
 8005cf4:	ea23 0301 	bic.w	r3, r3, r1
 8005cf8:	e7f1      	b.n	8005cde <roundf+0x1e>
 8005cfa:	2a80      	cmp	r2, #128	; 0x80
 8005cfc:	d1f1      	bne.n	8005ce2 <roundf+0x22>
 8005cfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d02:	4770      	bx	lr
 8005d04:	007fffff 	.word	0x007fffff

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
